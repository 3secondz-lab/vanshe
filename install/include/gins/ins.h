// Generated by gencpp from file gins/ins.msg
// DO NOT EDIT!


#ifndef GINS_MESSAGE_INS_H
#define GINS_MESSAGE_INS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace gins
{
template <class ContainerAllocator>
struct ins_
{
  typedef ins_<ContainerAllocator> Type;

  ins_()
    : header()
    , position()
    , velocity()
    , attitude()
    , acc_bias()
    , gyr_bias()
    , ant_lever_arm()  {
    }
  ins_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , attitude(_alloc)
    , acc_bias(_alloc)
    , gyr_bias(_alloc)
    , ant_lever_arm(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _attitude_type;
  _attitude_type attitude;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc_bias_type;
  _acc_bias_type acc_bias;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gyr_bias_type;
  _gyr_bias_type gyr_bias;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ant_lever_arm_type;
  _ant_lever_arm_type ant_lever_arm;





  typedef boost::shared_ptr< ::gins::ins_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gins::ins_<ContainerAllocator> const> ConstPtr;

}; // struct ins_

typedef ::gins::ins_<std::allocator<void> > ins;

typedef boost::shared_ptr< ::gins::ins > insPtr;
typedef boost::shared_ptr< ::gins::ins const> insConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gins::ins_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gins::ins_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gins::ins_<ContainerAllocator1> & lhs, const ::gins::ins_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.attitude == rhs.attitude &&
    lhs.acc_bias == rhs.acc_bias &&
    lhs.gyr_bias == rhs.gyr_bias &&
    lhs.ant_lever_arm == rhs.ant_lever_arm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gins::ins_<ContainerAllocator1> & lhs, const ::gins::ins_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gins::ins_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gins::ins_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gins::ins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gins::ins_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gins::ins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gins::ins_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gins::ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffa3347d032977e6b6132691084d732b";
  }

  static const char* value(const ::gins::ins_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffa3347d032977e6ULL;
  static const uint64_t static_value2 = 0xb6132691084d732bULL;
};

template<class ContainerAllocator>
struct DataType< ::gins::ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gins/ins";
  }

  static const char* value(const ::gins::ins_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gins::ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"std_msgs/Header header\n"
"\n"
"geometry_msgs/Vector3 position\n"
"geometry_msgs/Vector3 velocity\n"
"geometry_msgs/Vector3 attitude\n"
"\n"
"geometry_msgs/Vector3 acc_bias\n"
"geometry_msgs/Vector3 gyr_bias\n"
"\n"
"geometry_msgs/Vector3 ant_lever_arm\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::gins::ins_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gins::ins_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.attitude);
      stream.next(m.acc_bias);
      stream.next(m.gyr_bias);
      stream.next(m.ant_lever_arm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ins_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gins::ins_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gins::ins_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "attitude: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.attitude);
    s << indent << "acc_bias: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc_bias);
    s << indent << "gyr_bias: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gyr_bias);
    s << indent << "ant_lever_arm: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ant_lever_arm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GINS_MESSAGE_INS_H
