
example-algo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013bcc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00413bcc  00413bcc  00023bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00002ec8  20000000  00413bd4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002420  20002ec8  00416aa0  00032ec8  2**3
                  ALLOC
  4 .stack        00003000  200052e8  00418ec0  00032ec8  2**0
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00032ec8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00032ef8  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002e4e1  00000000  00000000  00032f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000060ee  00000000  00000000  00061432  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d7d1  00000000  00000000  00067520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001840  00000000  00000000  00074cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001728  00000000  00000000  00076531  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c6d3  00000000  00000000  00077c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a92e  00000000  00000000  0009432c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005ef51  00000000  00000000  000aec5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007490  00000000  00000000  0010dbac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 82 00 20 f1 97 40 00 c1 98 40 00 c1 98 40 00     ... ..@...@...@.
  400010:	c1 98 40 00 c1 98 40 00 c1 98 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c1 98 40 00 c1 98 40 00 00 00 00 00 c1 98 40 00     ..@...@.......@.
  40003c:	0d 5f 40 00 c1 98 40 00 c1 98 40 00 b5 52 40 00     ._@...@...@..R@.
  40004c:	c1 98 40 00 c1 98 40 00 c1 98 40 00 c1 98 40 00     ..@...@...@...@.
  40005c:	a5 73 40 00 91 73 40 00 c1 98 40 00 00 00 00 00     .s@..s@...@.....
  40006c:	85 87 40 00 9d 87 40 00 c1 98 40 00 c1 98 40 00     ..@...@...@...@.
  40007c:	c1 98 40 00 c1 98 40 00 c1 98 40 00 c1 98 40 00     ..@...@...@...@.
  40008c:	c1 98 40 00 c1 98 40 00 f9 5e 40 00 c1 98 40 00     ..@...@..^@...@.
  40009c:	a5 66 40 00 c9 66 40 00 e1 66 40 00 f9 66 40 00     .f@..f@..f@..f@.
  4000ac:	11 67 40 00 29 67 40 00 c1 98 40 00 c1 98 40 00     .g@.)g@...@...@.
	...
  4000fc:	c1 98 40 00 c1 98 40 00 c1 98 40 00 00 00 00 00     ..@...@...@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20002ec8 	.word	0x20002ec8
  400164:	00000000 	.word	0x00000000
  400168:	00413bd4 	.word	0x00413bd4

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	00413bd4 	.word	0x00413bd4
  4001a8:	20002ecc 	.word	0x20002ecc
  4001ac:	00413bd4 	.word	0x00413bd4
  4001b0:	00000000 	.word	0x00000000

004001b4 <config_uart>:
/* I2C address for Ak09915 */
#define AK_I2C_ADDR      0x0E


void config_uart(inv_uart_num_t log_uart_id)
{
  4001b4:	b580      	push	{r7, lr}
  4001b6:	b086      	sub	sp, #24
  4001b8:	af00      	add	r7, sp, #0
  4001ba:	4603      	mov	r3, r0
  4001bc:	71fb      	strb	r3, [r7, #7]
	inv_uart_mngr_init_struct_t uart_mngr_config;
	
	uart_mngr_config.uart_num = log_uart_id;
  4001be:	79fb      	ldrb	r3, [r7, #7]
  4001c0:	733b      	strb	r3, [r7, #12]
	uart_mngr_config.baudrate = 921600;
  4001c2:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
  4001c6:	613b      	str	r3, [r7, #16]
	uart_mngr_config.flow_ctrl = INV_UART_FLOW_CONTROL_NONE;
  4001c8:	2300      	movs	r3, #0
  4001ca:	753b      	strb	r3, [r7, #20]
	inv_uart_mngr_init(&uart_mngr_config);
  4001cc:	f107 030c 	add.w	r3, r7, #12
  4001d0:	4618      	mov	r0, r3
  4001d2:	4b03      	ldr	r3, [pc, #12]	; (4001e0 <config_uart+0x2c>)
  4001d4:	4798      	blx	r3
}
  4001d6:	bf00      	nop
  4001d8:	3718      	adds	r7, #24
  4001da:	46bd      	mov	sp, r7
  4001dc:	bd80      	pop	{r7, pc}
  4001de:	bf00      	nop
  4001e0:	00407611 	.word	0x00407611

004001e4 <inv_io_hal_init>:
/******************************************************/
/* Low-level serial interface function implementation */
/******************************************************/

int inv_io_hal_init(struct inv_icm426xx_serif * serif)
{
  4001e4:	b580      	push	{r7, lr}
  4001e6:	b082      	sub	sp, #8
  4001e8:	af00      	add	r7, sp, #0
  4001ea:	6078      	str	r0, [r7, #4]
	switch (serif->serif_type) {
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	7e1b      	ldrb	r3, [r3, #24]
  4001f0:	2b00      	cmp	r3, #0
  4001f2:	d006      	beq.n	400202 <inv_io_hal_init+0x1e>
  4001f4:	2b01      	cmp	r3, #1
  4001f6:	d107      	bne.n	400208 <inv_io_hal_init+0x24>
			/* To avoid SPI disturbance on ICM DB, on-chip ICM is forced to SPI by doing a dummy-write*/
			inv_spi_master_init(INV_SPI_ONBOARD, 6*1000*1000);
			/* Write to register MPUREG_WHO_AM_I */
			inv_spi_master_write_register(INV_SPI_ONBOARD, 0x76, 1, &dummy);
#endif
			inv_spi_master_init(INV_SPI_AP, 6*1000*1000);
  4001f8:	4907      	ldr	r1, [pc, #28]	; (400218 <inv_io_hal_init+0x34>)
  4001fa:	2001      	movs	r0, #1
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <inv_io_hal_init+0x38>)
  4001fe:	4798      	blx	r3
			break;
  400200:	e005      	b.n	40020e <inv_io_hal_init+0x2a>
		}

		case ICM426XX_UI_I2C:
			/* Set I2C clock is 400kHz by default */
			inv_i2c_master_init();
  400202:	4b07      	ldr	r3, [pc, #28]	; (400220 <inv_io_hal_init+0x3c>)
  400204:	4798      	blx	r3
			break;
  400206:	e002      	b.n	40020e <inv_io_hal_init+0x2a>
		default:
			return -1;
  400208:	f04f 33ff 	mov.w	r3, #4294967295
  40020c:	e000      	b.n	400210 <inv_io_hal_init+0x2c>
	}

	return 0;
  40020e:	2300      	movs	r3, #0
}
  400210:	4618      	mov	r0, r3
  400212:	3708      	adds	r7, #8
  400214:	46bd      	mov	sp, r7
  400216:	bd80      	pop	{r7, pc}
  400218:	005b8d80 	.word	0x005b8d80
  40021c:	00405771 	.word	0x00405771
  400220:	00405135 	.word	0x00405135

00400224 <inv_io_hal_read_reg>:
			return -1;
	}
}

int inv_io_hal_read_reg(struct inv_icm426xx_serif * serif, uint8_t reg, uint8_t * rbuffer, uint32_t rlen)
{
  400224:	b590      	push	{r4, r7, lr}
  400226:	b085      	sub	sp, #20
  400228:	af00      	add	r7, sp, #0
  40022a:	60f8      	str	r0, [r7, #12]
  40022c:	607a      	str	r2, [r7, #4]
  40022e:	603b      	str	r3, [r7, #0]
  400230:	460b      	mov	r3, r1
  400232:	72fb      	strb	r3, [r7, #11]
	switch (serif->serif_type) {
  400234:	68fb      	ldr	r3, [r7, #12]
  400236:	7e1b      	ldrb	r3, [r3, #24]
  400238:	2b00      	cmp	r3, #0
  40023a:	d00e      	beq.n	40025a <inv_io_hal_read_reg+0x36>
  40023c:	2b01      	cmp	r3, #1
  40023e:	d118      	bne.n	400272 <inv_io_hal_read_reg+0x4e>
		case ICM426XX_UI_SPI4:
			return inv_spi_master_read_register(INV_SPI_AP, reg, rlen, rbuffer);
  400240:	683b      	ldr	r3, [r7, #0]
  400242:	b29a      	uxth	r2, r3
  400244:	7af9      	ldrb	r1, [r7, #11]
  400246:	687b      	ldr	r3, [r7, #4]
  400248:	2001      	movs	r0, #1
  40024a:	4c0d      	ldr	r4, [pc, #52]	; (400280 <inv_io_hal_read_reg+0x5c>)
  40024c:	47a0      	blx	r4
  40024e:	4603      	mov	r3, r0
  400250:	e011      	b.n	400276 <inv_io_hal_read_reg+0x52>
		case ICM426XX_UI_I2C:
			while(inv_i2c_master_read_register(ICM_I2C_ADDR, reg, rlen, rbuffer)) {
				inv_delay_us(32000); // Loop in case of I2C timeout
  400252:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
  400256:	4b0b      	ldr	r3, [pc, #44]	; (400284 <inv_io_hal_read_reg+0x60>)
  400258:	4798      	blx	r3
			while(inv_i2c_master_read_register(ICM_I2C_ADDR, reg, rlen, rbuffer)) {
  40025a:	683b      	ldr	r3, [r7, #0]
  40025c:	b29a      	uxth	r2, r3
  40025e:	7af9      	ldrb	r1, [r7, #11]
  400260:	687b      	ldr	r3, [r7, #4]
  400262:	2069      	movs	r0, #105	; 0x69
  400264:	4c08      	ldr	r4, [pc, #32]	; (400288 <inv_io_hal_read_reg+0x64>)
  400266:	47a0      	blx	r4
  400268:	4603      	mov	r3, r0
  40026a:	2b00      	cmp	r3, #0
  40026c:	d1f1      	bne.n	400252 <inv_io_hal_read_reg+0x2e>
			}
			return 0;
  40026e:	2300      	movs	r3, #0
  400270:	e001      	b.n	400276 <inv_io_hal_read_reg+0x52>
		default:
			return -1;
  400272:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  400276:	4618      	mov	r0, r3
  400278:	3714      	adds	r7, #20
  40027a:	46bd      	mov	sp, r7
  40027c:	bd90      	pop	{r4, r7, pc}
  40027e:	bf00      	nop
  400280:	00405cc5 	.word	0x00405cc5
  400284:	00404a5d 	.word	0x00404a5d
  400288:	0040525d 	.word	0x0040525d

0040028c <inv_io_hal_write_reg>:

int inv_io_hal_write_reg(struct inv_icm426xx_serif * serif, uint8_t reg, const uint8_t * wbuffer, uint32_t wlen)
{
  40028c:	b590      	push	{r4, r7, lr}
  40028e:	b087      	sub	sp, #28
  400290:	af00      	add	r7, sp, #0
  400292:	60f8      	str	r0, [r7, #12]
  400294:	607a      	str	r2, [r7, #4]
  400296:	603b      	str	r3, [r7, #0]
  400298:	460b      	mov	r3, r1
  40029a:	72fb      	strb	r3, [r7, #11]
	int rc;

	switch (serif->serif_type) {
  40029c:	68fb      	ldr	r3, [r7, #12]
  40029e:	7e1b      	ldrb	r3, [r3, #24]
  4002a0:	2b00      	cmp	r3, #0
  4002a2:	d024      	beq.n	4002ee <inv_io_hal_write_reg+0x62>
  4002a4:	2b01      	cmp	r3, #1
  4002a6:	d12e      	bne.n	400306 <inv_io_hal_write_reg+0x7a>
		case ICM426XX_UI_SPI4:
			for(uint32_t i=0; i<wlen; i++) {
  4002a8:	2300      	movs	r3, #0
  4002aa:	617b      	str	r3, [r7, #20]
  4002ac:	e015      	b.n	4002da <inv_io_hal_write_reg+0x4e>
				rc = inv_spi_master_write_register(INV_SPI_AP, reg+i, 1, &wbuffer[i]);
  4002ae:	697b      	ldr	r3, [r7, #20]
  4002b0:	b2da      	uxtb	r2, r3
  4002b2:	7afb      	ldrb	r3, [r7, #11]
  4002b4:	4413      	add	r3, r2
  4002b6:	b2d9      	uxtb	r1, r3
  4002b8:	687a      	ldr	r2, [r7, #4]
  4002ba:	697b      	ldr	r3, [r7, #20]
  4002bc:	4413      	add	r3, r2
  4002be:	2201      	movs	r2, #1
  4002c0:	2001      	movs	r0, #1
  4002c2:	4c14      	ldr	r4, [pc, #80]	; (400314 <inv_io_hal_write_reg+0x88>)
  4002c4:	47a0      	blx	r4
  4002c6:	4603      	mov	r3, r0
  4002c8:	613b      	str	r3, [r7, #16]
				if(rc)
  4002ca:	693b      	ldr	r3, [r7, #16]
  4002cc:	2b00      	cmp	r3, #0
  4002ce:	d001      	beq.n	4002d4 <inv_io_hal_write_reg+0x48>
					return rc;
  4002d0:	693b      	ldr	r3, [r7, #16]
  4002d2:	e01a      	b.n	40030a <inv_io_hal_write_reg+0x7e>
			for(uint32_t i=0; i<wlen; i++) {
  4002d4:	697b      	ldr	r3, [r7, #20]
  4002d6:	3301      	adds	r3, #1
  4002d8:	617b      	str	r3, [r7, #20]
  4002da:	697a      	ldr	r2, [r7, #20]
  4002dc:	683b      	ldr	r3, [r7, #0]
  4002de:	429a      	cmp	r2, r3
  4002e0:	d3e5      	bcc.n	4002ae <inv_io_hal_write_reg+0x22>
			}
			return 0;
  4002e2:	2300      	movs	r3, #0
  4002e4:	e011      	b.n	40030a <inv_io_hal_write_reg+0x7e>
		case ICM426XX_UI_I2C:
			while(inv_i2c_master_write_register(ICM_I2C_ADDR, reg, wlen, wbuffer)) {
				inv_delay_us(32000); // Loop in case of I2C timeout
  4002e6:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
  4002ea:	4b0b      	ldr	r3, [pc, #44]	; (400318 <inv_io_hal_write_reg+0x8c>)
  4002ec:	4798      	blx	r3
			while(inv_i2c_master_write_register(ICM_I2C_ADDR, reg, wlen, wbuffer)) {
  4002ee:	683b      	ldr	r3, [r7, #0]
  4002f0:	b29a      	uxth	r2, r3
  4002f2:	7af9      	ldrb	r1, [r7, #11]
  4002f4:	687b      	ldr	r3, [r7, #4]
  4002f6:	2069      	movs	r0, #105	; 0x69
  4002f8:	4c08      	ldr	r4, [pc, #32]	; (40031c <inv_io_hal_write_reg+0x90>)
  4002fa:	47a0      	blx	r4
  4002fc:	4603      	mov	r3, r0
  4002fe:	2b00      	cmp	r3, #0
  400300:	d1f1      	bne.n	4002e6 <inv_io_hal_write_reg+0x5a>
			}
			return 0;
  400302:	2300      	movs	r3, #0
  400304:	e001      	b.n	40030a <inv_io_hal_write_reg+0x7e>
		default:
			return -1;
  400306:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  40030a:	4618      	mov	r0, r3
  40030c:	371c      	adds	r7, #28
  40030e:	46bd      	mov	sp, r7
  400310:	bd90      	pop	{r4, r7, pc}
  400312:	bf00      	nop
  400314:	00405b71 	.word	0x00405b71
  400318:	00404a5d 	.word	0x00404a5d
  40031c:	004051f1 	.word	0x004051f1

00400320 <get_ringbuffer_volatile_size>:
	\return  	current number of items hold in the ringbuffer
*/
#define RINGBUFFER_SIZE(rb) 		((uint16_t)((rb)->write - (rb)->read))

static inline uint16_t get_ringbuffer_volatile_size(void * rb)
{
  400320:	b480      	push	{r7}
  400322:	b085      	sub	sp, #20
  400324:	af00      	add	r7, sp, #0
  400326:	6078      	str	r0, [r7, #4]
	struct { uint16_t read, write; } rb_var;
	memcpy(&rb_var, rb, sizeof(rb_var));
  400328:	687b      	ldr	r3, [r7, #4]
  40032a:	681b      	ldr	r3, [r3, #0]
  40032c:	60fb      	str	r3, [r7, #12]
	return (rb_var.write - rb_var.read);
  40032e:	89fa      	ldrh	r2, [r7, #14]
  400330:	89bb      	ldrh	r3, [r7, #12]
  400332:	1ad3      	subs	r3, r2, r3
  400334:	b29b      	uxth	r3, r3
}
  400336:	4618      	mov	r0, r3
  400338:	3714      	adds	r7, #20
  40033a:	46bd      	mov	sp, r7
  40033c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400340:	4770      	bx	lr
	...

00400344 <SetupInvDevice>:
/* --------------------------------------------------------------------------------------
 *  Functions definition
 * -------------------------------------------------------------------------------------- */

int SetupInvDevice(struct inv_icm426xx_serif * icm_serif)
{
  400344:	b590      	push	{r4, r7, lr}
  400346:	b085      	sub	sp, #20
  400348:	af00      	add	r7, sp, #0
  40034a:	6078      	str	r0, [r7, #4]
	int rc = 0;
  40034c:	2300      	movs	r3, #0
  40034e:	60fb      	str	r3, [r7, #12]
	uint8_t who_am_i;

	INV_MSG(INV_MSG_LEVEL_VERBOSE, "Initialize ICM");
  400350:	491f      	ldr	r1, [pc, #124]	; (4003d0 <SetupInvDevice+0x8c>)
  400352:	2004      	movs	r0, #4
  400354:	4b1f      	ldr	r3, [pc, #124]	; (4003d4 <SetupInvDevice+0x90>)
  400356:	4798      	blx	r3

	/* Init device */
	rc = inv_icm426xx_init(&icm_driver, icm_serif, HandleInvDeviceFifoPacket);
  400358:	4a1f      	ldr	r2, [pc, #124]	; (4003d8 <SetupInvDevice+0x94>)
  40035a:	6879      	ldr	r1, [r7, #4]
  40035c:	481f      	ldr	r0, [pc, #124]	; (4003dc <SetupInvDevice+0x98>)
  40035e:	4b20      	ldr	r3, [pc, #128]	; (4003e0 <SetupInvDevice+0x9c>)
  400360:	4798      	blx	r3
  400362:	60f8      	str	r0, [r7, #12]
	if (rc != INV_ERROR_SUCCESS) {
  400364:	68fb      	ldr	r3, [r7, #12]
  400366:	2b00      	cmp	r3, #0
  400368:	d005      	beq.n	400376 <SetupInvDevice+0x32>
		INV_MSG(INV_MSG_LEVEL_ERROR, "!!! ERROR : failed to initialize Icm426xx.");
  40036a:	491e      	ldr	r1, [pc, #120]	; (4003e4 <SetupInvDevice+0xa0>)
  40036c:	2001      	movs	r0, #1
  40036e:	4b19      	ldr	r3, [pc, #100]	; (4003d4 <SetupInvDevice+0x90>)
  400370:	4798      	blx	r3
		return rc;
  400372:	68fb      	ldr	r3, [r7, #12]
  400374:	e027      	b.n	4003c6 <SetupInvDevice+0x82>
	}
	
	/* Check WHOAMI */
	INV_MSG(INV_MSG_LEVEL_VERBOSE, "Check ICM whoami value");
  400376:	491c      	ldr	r1, [pc, #112]	; (4003e8 <SetupInvDevice+0xa4>)
  400378:	2004      	movs	r0, #4
  40037a:	4b16      	ldr	r3, [pc, #88]	; (4003d4 <SetupInvDevice+0x90>)
  40037c:	4798      	blx	r3

	rc = inv_icm426xx_get_who_am_i(&icm_driver, &who_am_i);
  40037e:	f107 030b 	add.w	r3, r7, #11
  400382:	4619      	mov	r1, r3
  400384:	4815      	ldr	r0, [pc, #84]	; (4003dc <SetupInvDevice+0x98>)
  400386:	4b19      	ldr	r3, [pc, #100]	; (4003ec <SetupInvDevice+0xa8>)
  400388:	4798      	blx	r3
  40038a:	60f8      	str	r0, [r7, #12]
	if (rc != INV_ERROR_SUCCESS) {
  40038c:	68fb      	ldr	r3, [r7, #12]
  40038e:	2b00      	cmp	r3, #0
  400390:	d005      	beq.n	40039e <SetupInvDevice+0x5a>
		INV_MSG(INV_MSG_LEVEL_ERROR, "!!! ERROR : failed to read Icm426xx whoami value.");
  400392:	4917      	ldr	r1, [pc, #92]	; (4003f0 <SetupInvDevice+0xac>)
  400394:	2001      	movs	r0, #1
  400396:	4b0f      	ldr	r3, [pc, #60]	; (4003d4 <SetupInvDevice+0x90>)
  400398:	4798      	blx	r3
		return rc;
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	e013      	b.n	4003c6 <SetupInvDevice+0x82>
	}
	
	if (who_am_i != ICM_WHOAMI) {
  40039e:	7afb      	ldrb	r3, [r7, #11]
  4003a0:	2b42      	cmp	r3, #66	; 0x42
  4003a2:	d009      	beq.n	4003b8 <SetupInvDevice+0x74>
		INV_MSG(INV_MSG_LEVEL_ERROR, "!!! ERROR :  bad WHOAMI value. Got 0x%02x (expected: 0x%02x)", who_am_i, ICM_WHOAMI);
  4003a4:	7afb      	ldrb	r3, [r7, #11]
  4003a6:	461a      	mov	r2, r3
  4003a8:	2342      	movs	r3, #66	; 0x42
  4003aa:	4912      	ldr	r1, [pc, #72]	; (4003f4 <SetupInvDevice+0xb0>)
  4003ac:	2001      	movs	r0, #1
  4003ae:	4c09      	ldr	r4, [pc, #36]	; (4003d4 <SetupInvDevice+0x90>)
  4003b0:	47a0      	blx	r4
		return INV_ERROR;
  4003b2:	f04f 33ff 	mov.w	r3, #4294967295
  4003b6:	e006      	b.n	4003c6 <SetupInvDevice+0x82>
	}
	
	RINGBUFFER_VOLATILE_CLEAR(&timestamp_buffer_icm);
  4003b8:	4b0f      	ldr	r3, [pc, #60]	; (4003f8 <SetupInvDevice+0xb4>)
  4003ba:	2200      	movs	r2, #0
  4003bc:	801a      	strh	r2, [r3, #0]
  4003be:	4b0e      	ldr	r3, [pc, #56]	; (4003f8 <SetupInvDevice+0xb4>)
  4003c0:	2200      	movs	r2, #0
  4003c2:	805a      	strh	r2, [r3, #2]
	return rc;
  4003c4:	68fb      	ldr	r3, [r7, #12]
}
  4003c6:	4618      	mov	r0, r3
  4003c8:	3714      	adds	r7, #20
  4003ca:	46bd      	mov	sp, r7
  4003cc:	bd90      	pop	{r4, r7, pc}
  4003ce:	bf00      	nop
  4003d0:	00412fe8 	.word	0x00412fe8
  4003d4:	00407925 	.word	0x00407925
  4003d8:	004007d1 	.word	0x004007d1
  4003dc:	20002ee8 	.word	0x20002ee8
  4003e0:	0040169d 	.word	0x0040169d
  4003e4:	00412ff8 	.word	0x00412ff8
  4003e8:	00413024 	.word	0x00413024
  4003ec:	00401909 	.word	0x00401909
  4003f0:	0041303c 	.word	0x0041303c
  4003f4:	00413070 	.word	0x00413070
  4003f8:	200048d0 	.word	0x200048d0

004003fc <ConfigureInvDevice>:


int ConfigureInvDevice(void)
{
  4003fc:	b580      	push	{r7, lr}
  4003fe:	b082      	sub	sp, #8
  400400:	af00      	add	r7, sp, #0
	int rc = 0;
  400402:	2300      	movs	r3, #0
  400404:	607b      	str	r3, [r7, #4]

	rc |= inv_flash_manager_init();
  400406:	4b2a      	ldr	r3, [pc, #168]	; (4004b0 <ConfigureInvDevice+0xb4>)
  400408:	4798      	blx	r3
  40040a:	4602      	mov	r2, r0
  40040c:	687b      	ldr	r3, [r7, #4]
  40040e:	4313      	orrs	r3, r2
  400410:	607b      	str	r3, [r7, #4]
		/* Ensure all coefficients are set to 1 as the clock will not drift */
		clk_calib.coef[INV_ICM426XX_PLL] = 1.0f;
		clk_calib.coef[INV_ICM426XX_RC_OSC] = 1.0f;
		clk_calib.coef[INV_ICM426XX_WU_OSC] = 1.0f;
#else
	rc |= clock_calibration_init(&icm_driver, &clk_calib);
  400412:	4928      	ldr	r1, [pc, #160]	; (4004b4 <ConfigureInvDevice+0xb8>)
  400414:	4828      	ldr	r0, [pc, #160]	; (4004b8 <ConfigureInvDevice+0xbc>)
  400416:	4b29      	ldr	r3, [pc, #164]	; (4004bc <ConfigureInvDevice+0xc0>)
  400418:	4798      	blx	r3
  40041a:	4602      	mov	r2, r0
  40041c:	687b      	ldr	r3, [r7, #4]
  40041e:	4313      	orrs	r3, r2
  400420:	607b      	str	r3, [r7, #4]
#endif
	
	rc |= clock_calibration_init(&icm_driver, &clk_calib);
  400422:	4924      	ldr	r1, [pc, #144]	; (4004b4 <ConfigureInvDevice+0xb8>)
  400424:	4824      	ldr	r0, [pc, #144]	; (4004b8 <ConfigureInvDevice+0xbc>)
  400426:	4b25      	ldr	r3, [pc, #148]	; (4004bc <ConfigureInvDevice+0xc0>)
  400428:	4798      	blx	r3
  40042a:	4602      	mov	r2, r0
  40042c:	687b      	ldr	r3, [r7, #4]
  40042e:	4313      	orrs	r3, r2
  400430:	607b      	str	r3, [r7, #4]
	
#if IS_HIGH_RES_MODE
	rc |= inv_icm426xx_enable_high_resolution_fifo(&icm_driver);
#else
	rc |= inv_icm426xx_set_accel_fsr(&icm_driver, (ICM426XX_ACCEL_CONFIG0_FS_SEL_t)accel_fsr_g_to_bitfield(acc_fsr));
  400432:	2302      	movs	r3, #2
  400434:	4618      	mov	r0, r3
  400436:	4b22      	ldr	r3, [pc, #136]	; (4004c0 <ConfigureInvDevice+0xc4>)
  400438:	4798      	blx	r3
  40043a:	4603      	mov	r3, r0
  40043c:	b2db      	uxtb	r3, r3
  40043e:	4619      	mov	r1, r3
  400440:	481d      	ldr	r0, [pc, #116]	; (4004b8 <ConfigureInvDevice+0xbc>)
  400442:	4b20      	ldr	r3, [pc, #128]	; (4004c4 <ConfigureInvDevice+0xc8>)
  400444:	4798      	blx	r3
  400446:	4602      	mov	r2, r0
  400448:	687b      	ldr	r3, [r7, #4]
  40044a:	4313      	orrs	r3, r2
  40044c:	607b      	str	r3, [r7, #4]
	rc |= inv_icm426xx_set_gyro_fsr(&icm_driver,  (ICM426XX_GYRO_CONFIG0_FS_SEL_t) gyro_fsr_dps_to_bitfield(gyr_fsr));
  40044e:	237d      	movs	r3, #125	; 0x7d
  400450:	4618      	mov	r0, r3
  400452:	4b1d      	ldr	r3, [pc, #116]	; (4004c8 <ConfigureInvDevice+0xcc>)
  400454:	4798      	blx	r3
  400456:	4603      	mov	r3, r0
  400458:	b2db      	uxtb	r3, r3
  40045a:	4619      	mov	r1, r3
  40045c:	4816      	ldr	r0, [pc, #88]	; (4004b8 <ConfigureInvDevice+0xbc>)
  40045e:	4b1b      	ldr	r3, [pc, #108]	; (4004cc <ConfigureInvDevice+0xd0>)
  400460:	4798      	blx	r3
  400462:	4602      	mov	r2, r0
  400464:	687b      	ldr	r3, [r7, #4]
  400466:	4313      	orrs	r3, r2
  400468:	607b      	str	r3, [r7, #4]
#endif
	
	rc |= inv_icm426xx_set_accel_frequency(&icm_driver, ACCEL_FREQ);
  40046a:	2108      	movs	r1, #8
  40046c:	4812      	ldr	r0, [pc, #72]	; (4004b8 <ConfigureInvDevice+0xbc>)
  40046e:	4b18      	ldr	r3, [pc, #96]	; (4004d0 <ConfigureInvDevice+0xd4>)
  400470:	4798      	blx	r3
  400472:	4602      	mov	r2, r0
  400474:	687b      	ldr	r3, [r7, #4]
  400476:	4313      	orrs	r3, r2
  400478:	607b      	str	r3, [r7, #4]
	rc |= inv_icm426xx_set_gyro_frequency(&icm_driver,  GYRO_FREQ);
  40047a:	2108      	movs	r1, #8
  40047c:	480e      	ldr	r0, [pc, #56]	; (4004b8 <ConfigureInvDevice+0xbc>)
  40047e:	4b15      	ldr	r3, [pc, #84]	; (4004d4 <ConfigureInvDevice+0xd8>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	687b      	ldr	r3, [r7, #4]
  400486:	4313      	orrs	r3, r2
  400488:	607b      	str	r3, [r7, #4]

#if IS_LOW_NOISE_MODE
	rc |= inv_icm426xx_enable_accel_low_noise_mode(&icm_driver);
  40048a:	480b      	ldr	r0, [pc, #44]	; (4004b8 <ConfigureInvDevice+0xbc>)
  40048c:	4b12      	ldr	r3, [pc, #72]	; (4004d8 <ConfigureInvDevice+0xdc>)
  40048e:	4798      	blx	r3
  400490:	4602      	mov	r2, r0
  400492:	687b      	ldr	r3, [r7, #4]
  400494:	4313      	orrs	r3, r2
  400496:	607b      	str	r3, [r7, #4]
#else
	rc |= inv_icm426xx_enable_accel_low_power_mode(&icm_driver);
#endif

	rc |= inv_icm426xx_enable_gyro_low_noise_mode(&icm_driver);
  400498:	4807      	ldr	r0, [pc, #28]	; (4004b8 <ConfigureInvDevice+0xbc>)
  40049a:	4b10      	ldr	r3, [pc, #64]	; (4004dc <ConfigureInvDevice+0xe0>)
  40049c:	4798      	blx	r3
  40049e:	4602      	mov	r2, r0
  4004a0:	687b      	ldr	r3, [r7, #4]
  4004a2:	4313      	orrs	r3, r2
  4004a4:	607b      	str	r3, [r7, #4]
	
	return rc;
  4004a6:	687b      	ldr	r3, [r7, #4]
}
  4004a8:	4618      	mov	r0, r3
  4004aa:	3708      	adds	r7, #8
  4004ac:	46bd      	mov	sp, r7
  4004ae:	bd80      	pop	{r7, pc}
  4004b0:	00404ad9 	.word	0x00404ad9
  4004b4:	20003768 	.word	0x20003768
  4004b8:	20002ee8 	.word	0x20002ee8
  4004bc:	00403f8d 	.word	0x00403f8d
  4004c0:	004011c1 	.word	0x004011c1
  4004c4:	00402ce5 	.word	0x00402ce5
  4004c8:	00401149 	.word	0x00401149
  4004cc:	00402d49 	.word	0x00402d49
  4004d0:	00402be1 	.word	0x00402be1
  4004d4:	00402c81 	.word	0x00402c81
  4004d8:	00401999 	.word	0x00401999
  4004dc:	00401c61 	.word	0x00401c61

004004e0 <InitInvAGMBiases>:

/*
 * This function initializes biases and accuracies for accelerometer, gyroscope and magnetometer.
 */
int InitInvAGMBiases(void)
{
  4004e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
  4004e4:	b084      	sub	sp, #16
  4004e6:	af04      	add	r7, sp, #16
	/* Retrieve stored biases */
	if (retrieve_stored_biases_from_flash(acc_bias, gyr_bias, mag_bias) == 0) {
  4004e8:	4a72      	ldr	r2, [pc, #456]	; (4006b4 <InitInvAGMBiases+0x1d4>)
  4004ea:	4973      	ldr	r1, [pc, #460]	; (4006b8 <InitInvAGMBiases+0x1d8>)
  4004ec:	4873      	ldr	r0, [pc, #460]	; (4006bc <InitInvAGMBiases+0x1dc>)
  4004ee:	4b74      	ldr	r3, [pc, #464]	; (4006c0 <InitInvAGMBiases+0x1e0>)
  4004f0:	4798      	blx	r3
  4004f2:	4603      	mov	r3, r0
  4004f4:	2b00      	cmp	r3, #0
  4004f6:	f040 80bc 	bne.w	400672 <InitInvAGMBiases+0x192>
		INV_MSG(INV_MSG_LEVEL_INFO, "   Biases loaded from flash:");
  4004fa:	4972      	ldr	r1, [pc, #456]	; (4006c4 <InitInvAGMBiases+0x1e4>)
  4004fc:	2003      	movs	r0, #3
  4004fe:	4b72      	ldr	r3, [pc, #456]	; (4006c8 <InitInvAGMBiases+0x1e8>)
  400500:	4798      	blx	r3
		INV_MSG(INV_MSG_LEVEL_INFO, "    - Accel: [%f %f %f]g",   
  400502:	4b6e      	ldr	r3, [pc, #440]	; (4006bc <InitInvAGMBiases+0x1dc>)
  400504:	681b      	ldr	r3, [r3, #0]
  400506:	ee07 3a90 	vmov	s15, r3
  40050a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40050e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 4006cc <InitInvAGMBiases+0x1ec>
  400512:	eec7 6a87 	vdiv.f32	s13, s15, s14
  400516:	4b6e      	ldr	r3, [pc, #440]	; (4006d0 <InitInvAGMBiases+0x1f0>)
  400518:	ee16 0a90 	vmov	r0, s13
  40051c:	4798      	blx	r3
  40051e:	4680      	mov	r8, r0
  400520:	4689      	mov	r9, r1
  400522:	4b66      	ldr	r3, [pc, #408]	; (4006bc <InitInvAGMBiases+0x1dc>)
  400524:	685b      	ldr	r3, [r3, #4]
  400526:	ee07 3a90 	vmov	s15, r3
  40052a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40052e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 4006cc <InitInvAGMBiases+0x1ec>
  400532:	eec7 6a87 	vdiv.f32	s13, s15, s14
  400536:	4b66      	ldr	r3, [pc, #408]	; (4006d0 <InitInvAGMBiases+0x1f0>)
  400538:	ee16 0a90 	vmov	r0, s13
  40053c:	4798      	blx	r3
  40053e:	4604      	mov	r4, r0
  400540:	460d      	mov	r5, r1
  400542:	4b5e      	ldr	r3, [pc, #376]	; (4006bc <InitInvAGMBiases+0x1dc>)
  400544:	689b      	ldr	r3, [r3, #8]
  400546:	ee07 3a90 	vmov	s15, r3
  40054a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40054e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 4006cc <InitInvAGMBiases+0x1ec>
  400552:	eec7 6a87 	vdiv.f32	s13, s15, s14
  400556:	4b5e      	ldr	r3, [pc, #376]	; (4006d0 <InitInvAGMBiases+0x1f0>)
  400558:	ee16 0a90 	vmov	r0, s13
  40055c:	4798      	blx	r3
  40055e:	4602      	mov	r2, r0
  400560:	460b      	mov	r3, r1
  400562:	e9cd 2302 	strd	r2, r3, [sp, #8]
  400566:	e9cd 4500 	strd	r4, r5, [sp]
  40056a:	4642      	mov	r2, r8
  40056c:	464b      	mov	r3, r9
  40056e:	4959      	ldr	r1, [pc, #356]	; (4006d4 <InitInvAGMBiases+0x1f4>)
  400570:	2003      	movs	r0, #3
  400572:	4c55      	ldr	r4, [pc, #340]	; (4006c8 <InitInvAGMBiases+0x1e8>)
  400574:	47a0      	blx	r4
			(float)acc_bias[0]/(1<<16), (float)acc_bias[1]/(1<<16), (float)acc_bias[2]/(1<<16));
		INV_MSG(INV_MSG_LEVEL_INFO, "    - Gyro:  [%f %f %f]dps", 
  400576:	4b50      	ldr	r3, [pc, #320]	; (4006b8 <InitInvAGMBiases+0x1d8>)
  400578:	681b      	ldr	r3, [r3, #0]
  40057a:	ee07 3a90 	vmov	s15, r3
  40057e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400582:	ed9f 7a52 	vldr	s14, [pc, #328]	; 4006cc <InitInvAGMBiases+0x1ec>
  400586:	eec7 6a87 	vdiv.f32	s13, s15, s14
  40058a:	4b51      	ldr	r3, [pc, #324]	; (4006d0 <InitInvAGMBiases+0x1f0>)
  40058c:	ee16 0a90 	vmov	r0, s13
  400590:	4798      	blx	r3
  400592:	4680      	mov	r8, r0
  400594:	4689      	mov	r9, r1
  400596:	4b48      	ldr	r3, [pc, #288]	; (4006b8 <InitInvAGMBiases+0x1d8>)
  400598:	685b      	ldr	r3, [r3, #4]
  40059a:	ee07 3a90 	vmov	s15, r3
  40059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4005a2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 4006cc <InitInvAGMBiases+0x1ec>
  4005a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
  4005aa:	4b49      	ldr	r3, [pc, #292]	; (4006d0 <InitInvAGMBiases+0x1f0>)
  4005ac:	ee16 0a90 	vmov	r0, s13
  4005b0:	4798      	blx	r3
  4005b2:	4604      	mov	r4, r0
  4005b4:	460d      	mov	r5, r1
  4005b6:	4b40      	ldr	r3, [pc, #256]	; (4006b8 <InitInvAGMBiases+0x1d8>)
  4005b8:	689b      	ldr	r3, [r3, #8]
  4005ba:	ee07 3a90 	vmov	s15, r3
  4005be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4005c2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 4006cc <InitInvAGMBiases+0x1ec>
  4005c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
  4005ca:	4b41      	ldr	r3, [pc, #260]	; (4006d0 <InitInvAGMBiases+0x1f0>)
  4005cc:	ee16 0a90 	vmov	r0, s13
  4005d0:	4798      	blx	r3
  4005d2:	4602      	mov	r2, r0
  4005d4:	460b      	mov	r3, r1
  4005d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4005da:	e9cd 4500 	strd	r4, r5, [sp]
  4005de:	4642      	mov	r2, r8
  4005e0:	464b      	mov	r3, r9
  4005e2:	493d      	ldr	r1, [pc, #244]	; (4006d8 <InitInvAGMBiases+0x1f8>)
  4005e4:	2003      	movs	r0, #3
  4005e6:	4c38      	ldr	r4, [pc, #224]	; (4006c8 <InitInvAGMBiases+0x1e8>)
  4005e8:	47a0      	blx	r4
			(float)gyr_bias[0]/(1<<16), (float)gyr_bias[1]/(1<<16), (float)gyr_bias[2]/(1<<16));
		INV_MSG(INV_MSG_LEVEL_INFO, "    - Mag:   [%f %f %f]uT",  
  4005ea:	4b32      	ldr	r3, [pc, #200]	; (4006b4 <InitInvAGMBiases+0x1d4>)
  4005ec:	681b      	ldr	r3, [r3, #0]
  4005ee:	ee07 3a90 	vmov	s15, r3
  4005f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4005f6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 4006cc <InitInvAGMBiases+0x1ec>
  4005fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
  4005fe:	4b34      	ldr	r3, [pc, #208]	; (4006d0 <InitInvAGMBiases+0x1f0>)
  400600:	ee16 0a90 	vmov	r0, s13
  400604:	4798      	blx	r3
  400606:	4680      	mov	r8, r0
  400608:	4689      	mov	r9, r1
  40060a:	4b2a      	ldr	r3, [pc, #168]	; (4006b4 <InitInvAGMBiases+0x1d4>)
  40060c:	685b      	ldr	r3, [r3, #4]
  40060e:	ee07 3a90 	vmov	s15, r3
  400612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400616:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 4006cc <InitInvAGMBiases+0x1ec>
  40061a:	eec7 6a87 	vdiv.f32	s13, s15, s14
  40061e:	4b2c      	ldr	r3, [pc, #176]	; (4006d0 <InitInvAGMBiases+0x1f0>)
  400620:	ee16 0a90 	vmov	r0, s13
  400624:	4798      	blx	r3
  400626:	4604      	mov	r4, r0
  400628:	460d      	mov	r5, r1
  40062a:	4b22      	ldr	r3, [pc, #136]	; (4006b4 <InitInvAGMBiases+0x1d4>)
  40062c:	689b      	ldr	r3, [r3, #8]
  40062e:	ee07 3a90 	vmov	s15, r3
  400632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400636:	ed9f 7a25 	vldr	s14, [pc, #148]	; 4006cc <InitInvAGMBiases+0x1ec>
  40063a:	eec7 6a87 	vdiv.f32	s13, s15, s14
  40063e:	4b24      	ldr	r3, [pc, #144]	; (4006d0 <InitInvAGMBiases+0x1f0>)
  400640:	ee16 0a90 	vmov	r0, s13
  400644:	4798      	blx	r3
  400646:	4602      	mov	r2, r0
  400648:	460b      	mov	r3, r1
  40064a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40064e:	e9cd 4500 	strd	r4, r5, [sp]
  400652:	4642      	mov	r2, r8
  400654:	464b      	mov	r3, r9
  400656:	4921      	ldr	r1, [pc, #132]	; (4006dc <InitInvAGMBiases+0x1fc>)
  400658:	2003      	movs	r0, #3
  40065a:	4c1b      	ldr	r4, [pc, #108]	; (4006c8 <InitInvAGMBiases+0x1e8>)
  40065c:	47a0      	blx	r4
			(float)mag_bias[0]/(1<<16), (float)mag_bias[1]/(1<<16), (float)mag_bias[2]/(1<<16));
		
		acc_accuracy = 3;
  40065e:	4b20      	ldr	r3, [pc, #128]	; (4006e0 <InitInvAGMBiases+0x200>)
  400660:	2203      	movs	r2, #3
  400662:	601a      	str	r2, [r3, #0]
		gyr_accuracy = 2;
  400664:	4b1f      	ldr	r3, [pc, #124]	; (4006e4 <InitInvAGMBiases+0x204>)
  400666:	2202      	movs	r2, #2
  400668:	601a      	str	r2, [r3, #0]
		mag_accuracy = 1;
  40066a:	4b1f      	ldr	r3, [pc, #124]	; (4006e8 <InitInvAGMBiases+0x208>)
  40066c:	2201      	movs	r2, #1
  40066e:	601a      	str	r2, [r3, #0]
  400670:	e01b      	b.n	4006aa <InitInvAGMBiases+0x1ca>
	} else {
		INV_MSG(INV_MSG_LEVEL_INFO, "   No bias values retrieved");
  400672:	491e      	ldr	r1, [pc, #120]	; (4006ec <InitInvAGMBiases+0x20c>)
  400674:	2003      	movs	r0, #3
  400676:	4b14      	ldr	r3, [pc, #80]	; (4006c8 <InitInvAGMBiases+0x1e8>)
  400678:	4798      	blx	r3
		memset(acc_bias,0,sizeof(acc_bias));
  40067a:	220c      	movs	r2, #12
  40067c:	2100      	movs	r1, #0
  40067e:	480f      	ldr	r0, [pc, #60]	; (4006bc <InitInvAGMBiases+0x1dc>)
  400680:	4b1b      	ldr	r3, [pc, #108]	; (4006f0 <InitInvAGMBiases+0x210>)
  400682:	4798      	blx	r3
		memset(gyr_bias,0,sizeof(gyr_bias));
  400684:	220c      	movs	r2, #12
  400686:	2100      	movs	r1, #0
  400688:	480b      	ldr	r0, [pc, #44]	; (4006b8 <InitInvAGMBiases+0x1d8>)
  40068a:	4b19      	ldr	r3, [pc, #100]	; (4006f0 <InitInvAGMBiases+0x210>)
  40068c:	4798      	blx	r3
		memset(mag_bias,0,sizeof(mag_bias));
  40068e:	220c      	movs	r2, #12
  400690:	2100      	movs	r1, #0
  400692:	4808      	ldr	r0, [pc, #32]	; (4006b4 <InitInvAGMBiases+0x1d4>)
  400694:	4b16      	ldr	r3, [pc, #88]	; (4006f0 <InitInvAGMBiases+0x210>)
  400696:	4798      	blx	r3
		acc_accuracy = 0;
  400698:	4b11      	ldr	r3, [pc, #68]	; (4006e0 <InitInvAGMBiases+0x200>)
  40069a:	2200      	movs	r2, #0
  40069c:	601a      	str	r2, [r3, #0]
		gyr_accuracy = 0;
  40069e:	4b11      	ldr	r3, [pc, #68]	; (4006e4 <InitInvAGMBiases+0x204>)
  4006a0:	2200      	movs	r2, #0
  4006a2:	601a      	str	r2, [r3, #0]
		mag_accuracy = 0;
  4006a4:	4b10      	ldr	r3, [pc, #64]	; (4006e8 <InitInvAGMBiases+0x208>)
  4006a6:	2200      	movs	r2, #0
  4006a8:	601a      	str	r2, [r3, #0]
	}

	return 0;
  4006aa:	2300      	movs	r3, #0
}
  4006ac:	4618      	mov	r0, r3
  4006ae:	46bd      	mov	sp, r7
  4006b0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
  4006b4:	20003920 	.word	0x20003920
  4006b8:	20003914 	.word	0x20003914
  4006bc:	20003908 	.word	0x20003908
  4006c0:	00400ad1 	.word	0x00400ad1
  4006c4:	004130b0 	.word	0x004130b0
  4006c8:	00407925 	.word	0x00407925
  4006cc:	47800000 	.word	0x47800000
  4006d0:	0040e531 	.word	0x0040e531
  4006d4:	004130d0 	.word	0x004130d0
  4006d8:	004130ec 	.word	0x004130ec
  4006dc:	00413108 	.word	0x00413108
  4006e0:	2000392c 	.word	0x2000392c
  4006e4:	20003930 	.word	0x20003930
  4006e8:	20003934 	.word	0x20003934
  4006ec:	00413124 	.word	0x00413124
  4006f0:	0040fa3d 	.word	0x0040fa3d

004006f4 <InitInvAGMAlgo>:


int InitInvAGMAlgo(void)
{
  4006f4:	b580      	push	{r7, lr}
  4006f6:	b08e      	sub	sp, #56	; 0x38
  4006f8:	af00      	add	r7, sp, #0
	int rc = 0;
  4006fa:	2300      	movs	r3, #0
  4006fc:	637b      	str	r3, [r7, #52]	; 0x34
	InvnAlgoAGMConfig config;

	memset(&input,  0, sizeof(input));
  4006fe:	2248      	movs	r2, #72	; 0x48
  400700:	2100      	movs	r1, #0
  400702:	4821      	ldr	r0, [pc, #132]	; (400788 <InitInvAGMAlgo+0x94>)
  400704:	4b21      	ldr	r3, [pc, #132]	; (40078c <InitInvAGMAlgo+0x98>)
  400706:	4798      	blx	r3
	memset(&output, 0, sizeof(output));
  400708:	22bc      	movs	r2, #188	; 0xbc
  40070a:	2100      	movs	r1, #0
  40070c:	4820      	ldr	r0, [pc, #128]	; (400790 <InitInvAGMAlgo+0x9c>)
  40070e:	4b1f      	ldr	r3, [pc, #124]	; (40078c <InitInvAGMAlgo+0x98>)
  400710:	4798      	blx	r3
	memset(&config, 0, sizeof(config));
  400712:	1d3b      	adds	r3, r7, #4
  400714:	2230      	movs	r2, #48	; 0x30
  400716:	2100      	movs	r1, #0
  400718:	4618      	mov	r0, r3
  40071a:	4b1c      	ldr	r3, [pc, #112]	; (40078c <InitInvAGMAlgo+0x98>)
  40071c:	4798      	blx	r3
	// config.acc_bias_q16 = output.acc_bias_q16;
	// config.gyr_bias_q16 = output.gyr_bias_q16;
	// config.mag_bias_q16 = output.mag_bias_q16;
	
	/* FSR configurations */
	config.acc_fsr = acc_fsr;
  40071e:	2302      	movs	r3, #2
  400720:	617b      	str	r3, [r7, #20]
	config.gyr_fsr = gyr_fsr;
  400722:	237d      	movs	r3, #125	; 0x7d
  400724:	61bb      	str	r3, [r7, #24]

	config.acc_odr_us = odr_bitfield_to_us(ACCEL_FREQ);
  400726:	2008      	movs	r0, #8
  400728:	4b1a      	ldr	r3, [pc, #104]	; (400794 <InitInvAGMAlgo+0xa0>)
  40072a:	4798      	blx	r3
  40072c:	4603      	mov	r3, r0
  40072e:	61fb      	str	r3, [r7, #28]
	config.gyr_odr_us = odr_bitfield_to_us(GYRO_FREQ);
  400730:	2008      	movs	r0, #8
  400732:	4b18      	ldr	r3, [pc, #96]	; (400794 <InitInvAGMAlgo+0xa0>)
  400734:	4798      	blx	r3
  400736:	4603      	mov	r3, r0
  400738:	623b      	str	r3, [r7, #32]
	/* Temoperature sensor configuration */
#if IS_HIGH_RES_MODE
	config.temp_sensitivity = (int32_t)((int64_t)((int64_t)100 << 30)/13248); // high-res;
	config.temp_offset = 25 << 16;
#else
	config.temp_sensitivity = (int32_t)((int64_t)((int64_t)100 << 30)/207);
  40073a:	4b17      	ldr	r3, [pc, #92]	; (400798 <InitInvAGMAlgo+0xa4>)
  40073c:	62fb      	str	r3, [r7, #44]	; 0x2c
	config.temp_offset = 25 << 16;
  40073e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
  400742:	633b      	str	r3, [r7, #48]	; 0x30

#if USE_MAG
	config.mag_sc_q16 = 9830;//0.15
	config.mag_odr_us = MAG_ODR_US;
#else
	config.mag_bias_q16 = NULL;
  400744:	2300      	movs	r3, #0
  400746:	60fb      	str	r3, [r7, #12]
#endif
	
	config.acc_bias_q16 = acc_bias;
  400748:	4b14      	ldr	r3, [pc, #80]	; (40079c <InitInvAGMAlgo+0xa8>)
  40074a:	607b      	str	r3, [r7, #4]
	config.gyr_bias_q16 = gyr_bias;
  40074c:	4b14      	ldr	r3, [pc, #80]	; (4007a0 <InitInvAGMAlgo+0xac>)
  40074e:	60bb      	str	r3, [r7, #8]
	config.mag_bias_q16 = mag_bias;
  400750:	4b14      	ldr	r3, [pc, #80]	; (4007a4 <InitInvAGMAlgo+0xb0>)
  400752:	60fb      	str	r3, [r7, #12]
	config.acc_accuracy = acc_accuracy;
  400754:	4b14      	ldr	r3, [pc, #80]	; (4007a8 <InitInvAGMAlgo+0xb4>)
  400756:	681b      	ldr	r3, [r3, #0]
  400758:	b25b      	sxtb	r3, r3
  40075a:	743b      	strb	r3, [r7, #16]
	config.gyr_accuracy = gyr_accuracy;
  40075c:	4b13      	ldr	r3, [pc, #76]	; (4007ac <InitInvAGMAlgo+0xb8>)
  40075e:	681b      	ldr	r3, [r3, #0]
  400760:	b25b      	sxtb	r3, r3
  400762:	747b      	strb	r3, [r7, #17]
	config.mag_accuracy = mag_accuracy;
  400764:	4b12      	ldr	r3, [pc, #72]	; (4007b0 <InitInvAGMAlgo+0xbc>)
  400766:	681b      	ldr	r3, [r3, #0]
  400768:	b25b      	sxtb	r3, r3
  40076a:	74bb      	strb	r3, [r7, #18]

	/* Initialize algorithm */
	rc |= invn_algo_agm_init(&config);
  40076c:	1d3b      	adds	r3, r7, #4
  40076e:	4618      	mov	r0, r3
  400770:	4b10      	ldr	r3, [pc, #64]	; (4007b4 <InitInvAGMAlgo+0xc0>)
  400772:	4798      	blx	r3
  400774:	4603      	mov	r3, r0
  400776:	461a      	mov	r2, r3
  400778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40077a:	4313      	orrs	r3, r2
  40077c:	637b      	str	r3, [r7, #52]	; 0x34

	return rc;
  40077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
  400780:	4618      	mov	r0, r3
  400782:	3738      	adds	r7, #56	; 0x38
  400784:	46bd      	mov	sp, r7
  400786:	bd80      	pop	{r7, pc}
  400788:	20003800 	.word	0x20003800
  40078c:	0040fa3d 	.word	0x0040fa3d
  400790:	20003848 	.word	0x20003848
  400794:	004010d9 	.word	0x004010d9
  400798:	1eeaf9d1 	.word	0x1eeaf9d1
  40079c:	20003908 	.word	0x20003908
  4007a0:	20003914 	.word	0x20003914
  4007a4:	20003920 	.word	0x20003920
  4007a8:	2000392c 	.word	0x2000392c
  4007ac:	20003930 	.word	0x20003930
  4007b0:	20003934 	.word	0x20003934
  4007b4:	0040a551 	.word	0x0040a551

004007b8 <GetDataFromInvDevice>:

int GetDataFromInvDevice(void)
{
  4007b8:	b580      	push	{r7, lr}
  4007ba:	af00      	add	r7, sp, #0
	/*
	 * Extract packets from FIFO. Callback defined at init time (i.e. 
	 * HandleInvDeviceFifoPacket) will be called for each valid packet extracted from 
	 * FIFO.
	 */
	return inv_icm426xx_get_data_from_fifo(&icm_driver);
  4007bc:	4802      	ldr	r0, [pc, #8]	; (4007c8 <GetDataFromInvDevice+0x10>)
  4007be:	4b03      	ldr	r3, [pc, #12]	; (4007cc <GetDataFromInvDevice+0x14>)
  4007c0:	4798      	blx	r3
  4007c2:	4603      	mov	r3, r0
}
  4007c4:	4618      	mov	r0, r3
  4007c6:	bd80      	pop	{r7, pc}
  4007c8:	20002ee8 	.word	0x20002ee8
  4007cc:	004025b9 	.word	0x004025b9

004007d0 <HandleInvDeviceFifoPacket>:


void HandleInvDeviceFifoPacket(inv_icm426xx_sensor_event_t * event)
{
  4007d0:	b590      	push	{r4, r7, lr}
  4007d2:	b08d      	sub	sp, #52	; 0x34
  4007d4:	af04      	add	r7, sp, #16
  4007d6:	6078      	str	r0, [r7, #4]
	uint64_t irq_timestamp = 0;
  4007d8:	f04f 0300 	mov.w	r3, #0
  4007dc:	f04f 0400 	mov.w	r4, #0
  4007e0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	 * Extract the timestamp that was buffered when current packet IRQ fired. See 
	 * ext_interrupt_cb() in main.c for more details.
	 * As timestamp buffer is filled in interrupt handler, we should pop it with
	 * interrupts disabled to avoid any concurrent access.
	 */
	inv_disable_irq();
  4007e4:	4b4b      	ldr	r3, [pc, #300]	; (400914 <HandleInvDeviceFifoPacket+0x144>)
  4007e6:	4798      	blx	r3
	if (!RINGBUFFER_VOLATILE_EMPTY(&timestamp_buffer_icm))
  4007e8:	484b      	ldr	r0, [pc, #300]	; (400918 <HandleInvDeviceFifoPacket+0x148>)
  4007ea:	4b4c      	ldr	r3, [pc, #304]	; (40091c <HandleInvDeviceFifoPacket+0x14c>)
  4007ec:	4798      	blx	r3
  4007ee:	4603      	mov	r3, r0
  4007f0:	2b00      	cmp	r3, #0
  4007f2:	d014      	beq.n	40081e <HandleInvDeviceFifoPacket+0x4e>
		RINGBUFFER_VOLATILE_POP(&timestamp_buffer_icm, &irq_timestamp);
  4007f4:	4b48      	ldr	r3, [pc, #288]	; (400918 <HandleInvDeviceFifoPacket+0x148>)
  4007f6:	881b      	ldrh	r3, [r3, #0]
  4007f8:	83fb      	strh	r3, [r7, #30]
  4007fa:	8bfb      	ldrh	r3, [r7, #30]
  4007fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400800:	4a45      	ldr	r2, [pc, #276]	; (400918 <HandleInvDeviceFifoPacket+0x148>)
  400802:	3301      	adds	r3, #1
  400804:	00db      	lsls	r3, r3, #3
  400806:	4413      	add	r3, r2
  400808:	e9d3 3400 	ldrd	r3, r4, [r3]
  40080c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  400810:	4b41      	ldr	r3, [pc, #260]	; (400918 <HandleInvDeviceFifoPacket+0x148>)
  400812:	881b      	ldrh	r3, [r3, #0]
  400814:	b29b      	uxth	r3, r3
  400816:	3301      	adds	r3, #1
  400818:	b29a      	uxth	r2, r3
  40081a:	4b3f      	ldr	r3, [pc, #252]	; (400918 <HandleInvDeviceFifoPacket+0x148>)
  40081c:	801a      	strh	r2, [r3, #0]
	inv_enable_irq();
  40081e:	4b40      	ldr	r3, [pc, #256]	; (400920 <HandleInvDeviceFifoPacket+0x150>)
  400820:	4798      	blx	r3

	/*
	 * Extend the 16-bit timestamp from the FIFO to get an accurate timestamping
	 */
	inv_helper_extend_timestamp_from_fifo(&icm_driver, &clk_calib, 
  400822:	687b      	ldr	r3, [r7, #4]
  400824:	8898      	ldrh	r0, [r3, #4]
  400826:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  40082a:	687a      	ldr	r2, [r7, #4]
  40082c:	6812      	ldr	r2, [r2, #0]
  40082e:	f107 0108 	add.w	r1, r7, #8
  400832:	9103      	str	r1, [sp, #12]
  400834:	9202      	str	r2, [sp, #8]
  400836:	e9cd 3400 	strd	r3, r4, [sp]
  40083a:	4602      	mov	r2, r0
  40083c:	4939      	ldr	r1, [pc, #228]	; (400924 <HandleInvDeviceFifoPacket+0x154>)
  40083e:	483a      	ldr	r0, [pc, #232]	; (400928 <HandleInvDeviceFifoPacket+0x158>)
  400840:	4b3a      	ldr	r3, [pc, #232]	; (40092c <HandleInvDeviceFifoPacket+0x15c>)
  400842:	4798      	blx	r3
		event->timestamp_fsync, irq_timestamp, event->sensor_mask, &extended_timestamp);

	input.mask = 0;
  400844:	4b3a      	ldr	r3, [pc, #232]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  400846:	2200      	movs	r2, #0
  400848:	601a      	str	r2, [r3, #0]

	/*
	 * Retrieve accel and gyro data
	 */
	if (event->sensor_mask & (1 << INV_ICM426XX_SENSOR_ACCEL)) {
  40084a:	687b      	ldr	r3, [r7, #4]
  40084c:	681b      	ldr	r3, [r3, #0]
  40084e:	f003 0301 	and.w	r3, r3, #1
  400852:	2b00      	cmp	r3, #0
  400854:	d01b      	beq.n	40088e <HandleInvDeviceFifoPacket+0xbe>
#if IS_HIGH_RES_MODE
		input.sRacc_data[0] = (((int32_t)event->accel[0] << 4)) | event->accel_high_res[0];
		input.sRacc_data[1] = (((int32_t)event->accel[1] << 4)) | event->accel_high_res[1];
		input.sRacc_data[2] = (((int32_t)event->accel[2] << 4)) | event->accel_high_res[2];
#else
		input.sRacc_data[0] = (int32_t)event->accel[0] << 4;
  400856:	687b      	ldr	r3, [r7, #4]
  400858:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  40085c:	011b      	lsls	r3, r3, #4
  40085e:	4a34      	ldr	r2, [pc, #208]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  400860:	6113      	str	r3, [r2, #16]
		input.sRacc_data[1] = (int32_t)event->accel[1] << 4;
  400862:	687b      	ldr	r3, [r7, #4]
  400864:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  400868:	011b      	lsls	r3, r3, #4
  40086a:	4a31      	ldr	r2, [pc, #196]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  40086c:	6153      	str	r3, [r2, #20]
		input.sRacc_data[2] = (int32_t)event->accel[2] << 4;
  40086e:	687b      	ldr	r3, [r7, #4]
  400870:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
  400874:	011b      	lsls	r3, r3, #4
  400876:	4a2e      	ldr	r2, [pc, #184]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  400878:	6193      	str	r3, [r2, #24]
#endif
		apply_mounting_matrix(icm_mounting_matrix, input.sRacc_data);
  40087a:	492e      	ldr	r1, [pc, #184]	; (400934 <HandleInvDeviceFifoPacket+0x164>)
  40087c:	482e      	ldr	r0, [pc, #184]	; (400938 <HandleInvDeviceFifoPacket+0x168>)
  40087e:	4b2f      	ldr	r3, [pc, #188]	; (40093c <HandleInvDeviceFifoPacket+0x16c>)
  400880:	4798      	blx	r3
		input.mask |= INVN_ALGO_AGM_INPUT_MASK_ACC;
  400882:	4b2b      	ldr	r3, [pc, #172]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  400884:	681b      	ldr	r3, [r3, #0]
  400886:	f043 0301 	orr.w	r3, r3, #1
  40088a:	4a29      	ldr	r2, [pc, #164]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  40088c:	6013      	str	r3, [r2, #0]
	}

	if (event->sensor_mask & (1 << INV_ICM426XX_SENSOR_GYRO)) {
  40088e:	687b      	ldr	r3, [r7, #4]
  400890:	681b      	ldr	r3, [r3, #0]
  400892:	f003 0302 	and.w	r3, r3, #2
  400896:	2b00      	cmp	r3, #0
  400898:	d01b      	beq.n	4008d2 <HandleInvDeviceFifoPacket+0x102>
#if IS_HIGH_RES_MODE	
		input.sRgyr_data[0] = (((int32_t)event->gyro[0] << 4)) | event->gyro_high_res[0];
		input.sRgyr_data[1] = (((int32_t)event->gyro[1] << 4)) | event->gyro_high_res[1];
		input.sRgyr_data[2] = (((int32_t)event->gyro[2] << 4)) | event->gyro_high_res[2];
#else
		input.sRgyr_data[0] = (int32_t)event->gyro[0] << 4;
  40089a:	687b      	ldr	r3, [r7, #4]
  40089c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  4008a0:	011b      	lsls	r3, r3, #4
  4008a2:	4a23      	ldr	r2, [pc, #140]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  4008a4:	61d3      	str	r3, [r2, #28]
		input.sRgyr_data[1] = (int32_t)event->gyro[1] << 4;
  4008a6:	687b      	ldr	r3, [r7, #4]
  4008a8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  4008ac:	011b      	lsls	r3, r3, #4
  4008ae:	4a20      	ldr	r2, [pc, #128]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  4008b0:	6213      	str	r3, [r2, #32]
		input.sRgyr_data[2] = (int32_t)event->gyro[2] << 4;
  4008b2:	687b      	ldr	r3, [r7, #4]
  4008b4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  4008b8:	011b      	lsls	r3, r3, #4
  4008ba:	4a1d      	ldr	r2, [pc, #116]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  4008bc:	6253      	str	r3, [r2, #36]	; 0x24
#endif
		apply_mounting_matrix(icm_mounting_matrix, input.sRgyr_data);
  4008be:	4920      	ldr	r1, [pc, #128]	; (400940 <HandleInvDeviceFifoPacket+0x170>)
  4008c0:	481d      	ldr	r0, [pc, #116]	; (400938 <HandleInvDeviceFifoPacket+0x168>)
  4008c2:	4b1e      	ldr	r3, [pc, #120]	; (40093c <HandleInvDeviceFifoPacket+0x16c>)
  4008c4:	4798      	blx	r3
		input.mask |= INVN_ALGO_AGM_INPUT_MASK_GYR;
  4008c6:	4b1a      	ldr	r3, [pc, #104]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  4008c8:	681b      	ldr	r3, [r3, #0]
  4008ca:	f043 0302 	orr.w	r3, r3, #2
  4008ce:	4a18      	ldr	r2, [pc, #96]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  4008d0:	6013      	str	r3, [r2, #0]
	}

	input.sRtemp_data = event->temperature;
  4008d2:	687b      	ldr	r3, [r7, #4]
  4008d4:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
  4008d8:	4b15      	ldr	r3, [pc, #84]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  4008da:	851a      	strh	r2, [r3, #40]	; 0x28
	input.sRimu_time_us = extended_timestamp;
  4008dc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4008e0:	4a13      	ldr	r2, [pc, #76]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  4008e2:	e9c2 3402 	strd	r3, r4, [r2, #8]

	/* Process the AgmFusion Algo */
	invn_algo_agm_process(&input, &output);
  4008e6:	4917      	ldr	r1, [pc, #92]	; (400944 <HandleInvDeviceFifoPacket+0x174>)
  4008e8:	4811      	ldr	r0, [pc, #68]	; (400930 <HandleInvDeviceFifoPacket+0x160>)
  4008ea:	4b17      	ldr	r3, [pc, #92]	; (400948 <HandleInvDeviceFifoPacket+0x178>)
  4008ec:	4798      	blx	r3
	
	store_biases();
  4008ee:	4b17      	ldr	r3, [pc, #92]	; (40094c <HandleInvDeviceFifoPacket+0x17c>)
  4008f0:	4798      	blx	r3

	/* Print data based on the gyro rate */
	if (output.mask & INVN_ALGO_AGM_OUTPUT_MASK_GYRO_CAL) {
  4008f2:	4b14      	ldr	r3, [pc, #80]	; (400944 <HandleInvDeviceFifoPacket+0x174>)
  4008f4:	681b      	ldr	r3, [r3, #0]
  4008f6:	f003 0302 	and.w	r3, r3, #2
  4008fa:	2b00      	cmp	r3, #0
  4008fc:	d006      	beq.n	40090c <HandleInvDeviceFifoPacket+0x13c>
		iter_algo++;
  4008fe:	4b14      	ldr	r3, [pc, #80]	; (400950 <HandleInvDeviceFifoPacket+0x180>)
  400900:	681b      	ldr	r3, [r3, #0]
  400902:	3301      	adds	r3, #1
  400904:	4a12      	ldr	r2, [pc, #72]	; (400950 <HandleInvDeviceFifoPacket+0x180>)
  400906:	6013      	str	r3, [r2, #0]

		//if (iter_algo % ((int)(print_period_us/odr_bitfield_to_us(GYRO_FREQ))) == 0)
		
		print_algo_inputs_outputs();
  400908:	4b12      	ldr	r3, [pc, #72]	; (400954 <HandleInvDeviceFifoPacket+0x184>)
  40090a:	4798      	blx	r3
	}
}
  40090c:	bf00      	nop
  40090e:	3724      	adds	r7, #36	; 0x24
  400910:	46bd      	mov	sp, r7
  400912:	bd90      	pop	{r4, r7, pc}
  400914:	00404949 	.word	0x00404949
  400918:	200048d0 	.word	0x200048d0
  40091c:	00400321 	.word	0x00400321
  400920:	00404971 	.word	0x00404971
  400924:	20003768 	.word	0x20003768
  400928:	20002ee8 	.word	0x20002ee8
  40092c:	00403d19 	.word	0x00403d19
  400930:	20003800 	.word	0x20003800
  400934:	20003810 	.word	0x20003810
  400938:	200000f4 	.word	0x200000f4
  40093c:	00400c91 	.word	0x00400c91
  400940:	2000381c 	.word	0x2000381c
  400944:	20003848 	.word	0x20003848
  400948:	00409f95 	.word	0x00409f95
  40094c:	00400bed 	.word	0x00400bed
  400950:	20003904 	.word	0x20003904
  400954:	00400959 	.word	0x00400959

00400958 <print_algo_inputs_outputs>:

/* --------------------------------------------------------------------------------------
 *  Static functions definition
 * -------------------------------------------------------------------------------------- */
static void print_algo_inputs_outputs(void)
{
  400958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40095c:	b0b3      	sub	sp, #204	; 0xcc
  40095e:	af0e      	add	r7, sp, #56	; 0x38
	float mag_cal[3], mag_bias[3];
	float rv_quat[4], angles_deg_rv[3], rv_heading_accuracy;
#endif
	
	/* Convert data to float before send it to the terminal */
	fixedpoint_to_float( output.acc_cal_q16,            acc_g,       16, 3);
  400960:	f107 0180 	add.w	r1, r7, #128	; 0x80
  400964:	2303      	movs	r3, #3
  400966:	2210      	movs	r2, #16
  400968:	484a      	ldr	r0, [pc, #296]	; (400a94 <print_algo_inputs_outputs+0x13c>)
  40096a:	4c4b      	ldr	r4, [pc, #300]	; (400a98 <print_algo_inputs_outputs+0x140>)
  40096c:	47a0      	blx	r4
	fixedpoint_to_float( output.acc_bias_q16,           acc_bias,    16, 3);
  40096e:	f107 0174 	add.w	r1, r7, #116	; 0x74
  400972:	2303      	movs	r3, #3
  400974:	2210      	movs	r2, #16
  400976:	4849      	ldr	r0, [pc, #292]	; (400a9c <print_algo_inputs_outputs+0x144>)
  400978:	4c47      	ldr	r4, [pc, #284]	; (400a98 <print_algo_inputs_outputs+0x140>)
  40097a:	47a0      	blx	r4
	fixedpoint_to_float( output.gyr_cal_q16,            gyr_dps,     16, 3);
  40097c:	f107 0168 	add.w	r1, r7, #104	; 0x68
  400980:	2303      	movs	r3, #3
  400982:	2210      	movs	r2, #16
  400984:	4846      	ldr	r0, [pc, #280]	; (400aa0 <print_algo_inputs_outputs+0x148>)
  400986:	4c44      	ldr	r4, [pc, #272]	; (400a98 <print_algo_inputs_outputs+0x140>)
  400988:	47a0      	blx	r4
	fixedpoint_to_float( output.gyr_bias_q16,           gyr_bias,    16, 3);
  40098a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
  40098e:	2303      	movs	r3, #3
  400990:	2210      	movs	r2, #16
  400992:	4844      	ldr	r0, [pc, #272]	; (400aa4 <print_algo_inputs_outputs+0x14c>)
  400994:	4c40      	ldr	r4, [pc, #256]	; (400a98 <print_algo_inputs_outputs+0x140>)
  400996:	47a0      	blx	r4
	fixedpoint_to_float( &output.temp_degC_q16,         &temp,       16, 1);
  400998:	f107 0158 	add.w	r1, r7, #88	; 0x58
  40099c:	2301      	movs	r3, #1
  40099e:	2210      	movs	r2, #16
  4009a0:	4841      	ldr	r0, [pc, #260]	; (400aa8 <print_algo_inputs_outputs+0x150>)
  4009a2:	4c3d      	ldr	r4, [pc, #244]	; (400a98 <print_algo_inputs_outputs+0x140>)
  4009a4:	47a0      	blx	r4
	fixedpoint_to_float( output.grv_quat_q30,           grv_quat,    30, 4);
  4009a6:	f107 0148 	add.w	r1, r7, #72	; 0x48
  4009aa:	2304      	movs	r3, #4
  4009ac:	221e      	movs	r2, #30
  4009ae:	483f      	ldr	r0, [pc, #252]	; (400aac <print_algo_inputs_outputs+0x154>)
  4009b0:	4c39      	ldr	r4, [pc, #228]	; (400a98 <print_algo_inputs_outputs+0x140>)
  4009b2:	47a0      	blx	r4
	fixedpoint_to_float( output.gravity_q16,            gravity,     16, 3);
  4009b4:	f107 0130 	add.w	r1, r7, #48	; 0x30
  4009b8:	2303      	movs	r3, #3
  4009ba:	2210      	movs	r2, #16
  4009bc:	483c      	ldr	r0, [pc, #240]	; (400ab0 <print_algo_inputs_outputs+0x158>)
  4009be:	4c36      	ldr	r4, [pc, #216]	; (400a98 <print_algo_inputs_outputs+0x140>)
  4009c0:	47a0      	blx	r4
	fixedpoint_to_float( output.linear_acc_q16,         linear_acc,  16, 3);
  4009c2:	f107 0124 	add.w	r1, r7, #36	; 0x24
  4009c6:	2303      	movs	r3, #3
  4009c8:	2210      	movs	r2, #16
  4009ca:	483a      	ldr	r0, [pc, #232]	; (400ab4 <print_algo_inputs_outputs+0x15c>)
  4009cc:	4c32      	ldr	r4, [pc, #200]	; (400a98 <print_algo_inputs_outputs+0x140>)
  4009ce:	47a0      	blx	r4
	quaternions_to_angles(grv_quat, angles_deg_grv);
  4009d0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
  4009d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
  4009d8:	4611      	mov	r1, r2
  4009da:	4618      	mov	r0, r3
  4009dc:	4b36      	ldr	r3, [pc, #216]	; (400ab8 <print_algo_inputs_outputs+0x160>)
  4009de:	4798      	blx	r3
				//);
		//}
//#endif
	//}

	char rchar = inv_uart_mngr_getc(INV_UART_SENSOR_CTRL);
  4009e0:	2000      	movs	r0, #0
  4009e2:	4b36      	ldr	r3, [pc, #216]	; (400abc <print_algo_inputs_outputs+0x164>)
  4009e4:	4798      	blx	r3
  4009e6:	4603      	mov	r3, r0
  4009e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	//INV_MSG(INV_MSG_LEVEL_INFO, "Input : %c\n", rchar);

	if(rchar != 's')
  4009ec:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
  4009f0:	2b73      	cmp	r3, #115	; 0x73
  4009f2:	d14a      	bne.n	400a8a <print_algo_inputs_outputs+0x132>
		return;

	// Print custom outputs when requested
	// [timestamp ax ay az temp gx gy gz]
	INV_MSG(INV_MSG_LEVEL_INFO, "%u %f %f %f %f %f %f %f",
  4009f4:	4b32      	ldr	r3, [pc, #200]	; (400ac0 <print_algo_inputs_outputs+0x168>)
  4009f6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  4009fa:	61fb      	str	r3, [r7, #28]
  4009fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
  400a00:	4b30      	ldr	r3, [pc, #192]	; (400ac4 <print_algo_inputs_outputs+0x16c>)
  400a02:	4610      	mov	r0, r2
  400a04:	4798      	blx	r3
  400a06:	4680      	mov	r8, r0
  400a08:	4689      	mov	r9, r1
  400a0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
  400a0e:	4b2d      	ldr	r3, [pc, #180]	; (400ac4 <print_algo_inputs_outputs+0x16c>)
  400a10:	4610      	mov	r0, r2
  400a12:	4798      	blx	r3
  400a14:	4682      	mov	sl, r0
  400a16:	468b      	mov	fp, r1
  400a18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
  400a1c:	4b29      	ldr	r3, [pc, #164]	; (400ac4 <print_algo_inputs_outputs+0x16c>)
  400a1e:	4610      	mov	r0, r2
  400a20:	4798      	blx	r3
  400a22:	e9c7 0104 	strd	r0, r1, [r7, #16]
  400a26:	6dba      	ldr	r2, [r7, #88]	; 0x58
  400a28:	4b26      	ldr	r3, [pc, #152]	; (400ac4 <print_algo_inputs_outputs+0x16c>)
  400a2a:	4610      	mov	r0, r2
  400a2c:	4798      	blx	r3
  400a2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
  400a32:	6eba      	ldr	r2, [r7, #104]	; 0x68
  400a34:	4b23      	ldr	r3, [pc, #140]	; (400ac4 <print_algo_inputs_outputs+0x16c>)
  400a36:	4610      	mov	r0, r2
  400a38:	4798      	blx	r3
  400a3a:	e9c7 0100 	strd	r0, r1, [r7]
  400a3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
  400a40:	4b20      	ldr	r3, [pc, #128]	; (400ac4 <print_algo_inputs_outputs+0x16c>)
  400a42:	4610      	mov	r0, r2
  400a44:	4798      	blx	r3
  400a46:	4605      	mov	r5, r0
  400a48:	460e      	mov	r6, r1
  400a4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
  400a4c:	4b1d      	ldr	r3, [pc, #116]	; (400ac4 <print_algo_inputs_outputs+0x16c>)
  400a4e:	4610      	mov	r0, r2
  400a50:	4798      	blx	r3
  400a52:	4603      	mov	r3, r0
  400a54:	460c      	mov	r4, r1
  400a56:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  400a5a:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
  400a5e:	ed97 7b00 	vldr	d7, [r7]
  400a62:	ed8d 7b08 	vstr	d7, [sp, #32]
  400a66:	ed97 7b02 	vldr	d7, [r7, #8]
  400a6a:	ed8d 7b06 	vstr	d7, [sp, #24]
  400a6e:	ed97 7b04 	vldr	d7, [r7, #16]
  400a72:	ed8d 7b04 	vstr	d7, [sp, #16]
  400a76:	e9cd ab02 	strd	sl, fp, [sp, #8]
  400a7a:	e9cd 8900 	strd	r8, r9, [sp]
  400a7e:	69fa      	ldr	r2, [r7, #28]
  400a80:	4911      	ldr	r1, [pc, #68]	; (400ac8 <print_algo_inputs_outputs+0x170>)
  400a82:	2003      	movs	r0, #3
  400a84:	4b11      	ldr	r3, [pc, #68]	; (400acc <print_algo_inputs_outputs+0x174>)
  400a86:	4798      	blx	r3
  400a88:	e000      	b.n	400a8c <print_algo_inputs_outputs+0x134>
		return;
  400a8a:	bf00      	nop
	//}
	//
	///* Print cariage return to ease reading, only if some data are printed */
	//if (data_to_print)
		//INV_MSG(INV_MSG_LEVEL_INFO, "");
}
  400a8c:	3794      	adds	r7, #148	; 0x94
  400a8e:	46bd      	mov	sp, r7
  400a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400a94:	20003858 	.word	0x20003858
  400a98:	00400e11 	.word	0x00400e11
  400a9c:	20003864 	.word	0x20003864
  400aa0:	20003880 	.word	0x20003880
  400aa4:	2000388c 	.word	0x2000388c
  400aa8:	20003900 	.word	0x20003900
  400aac:	200038c4 	.word	0x200038c4
  400ab0:	200038e8 	.word	0x200038e8
  400ab4:	200038f4 	.word	0x200038f4
  400ab8:	00400e89 	.word	0x00400e89
  400abc:	004077d1 	.word	0x004077d1
  400ac0:	20003800 	.word	0x20003800
  400ac4:	0040e531 	.word	0x0040e531
  400ac8:	00413140 	.word	0x00413140
  400acc:	00407925 	.word	0x00407925

00400ad0 <retrieve_stored_biases_from_flash>:
 * \param[out] gyr_bias_q16 Previously stored gyr bias
 * \param[out] mag_bias_q16 Previously stored mag bias
 * \return 0 on success, -1 if no bias are in NV, an error otherwise
 */
static int retrieve_stored_biases_from_flash(int32_t acc_bias_q16[3], int32_t gyr_bias_q16[3], int32_t mag_bias_q16[3])
{
  400ad0:	b580      	push	{r7, lr}
  400ad2:	b09c      	sub	sp, #112	; 0x70
  400ad4:	af00      	add	r7, sp, #0
  400ad6:	60f8      	str	r0, [r7, #12]
  400ad8:	60b9      	str	r1, [r7, #8]
  400ada:	607a      	str	r2, [r7, #4]
	uint8_t sensor_bias[84];
	uint8_t idx = 0;
  400adc:	2300      	movs	r3, #0
  400ade:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	int rc;
	
	/* Retrieve bias stored in NV memory */
	if ((rc = inv_flash_manager_readData(sensor_bias)) != 0) {
  400ae2:	f107 0314 	add.w	r3, r7, #20
  400ae6:	4618      	mov	r0, r3
  400ae8:	4b1a      	ldr	r3, [pc, #104]	; (400b54 <retrieve_stored_biases_from_flash+0x84>)
  400aea:	4798      	blx	r3
  400aec:	66b8      	str	r0, [r7, #104]	; 0x68
  400aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  400af0:	2b00      	cmp	r3, #0
  400af2:	d002      	beq.n	400afa <retrieve_stored_biases_from_flash+0x2a>
		return -1;
  400af4:	f04f 33ff 	mov.w	r3, #4294967295
  400af8:	e028      	b.n	400b4c <retrieve_stored_biases_from_flash+0x7c>
	}
	
	memcpy(acc_bias_q16, &sensor_bias[idx], sizeof(acc_bias_q16[0]) * 3);
  400afa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400afe:	f107 0214 	add.w	r2, r7, #20
  400b02:	4413      	add	r3, r2
  400b04:	220c      	movs	r2, #12
  400b06:	4619      	mov	r1, r3
  400b08:	68f8      	ldr	r0, [r7, #12]
  400b0a:	4b13      	ldr	r3, [pc, #76]	; (400b58 <retrieve_stored_biases_from_flash+0x88>)
  400b0c:	4798      	blx	r3
	idx += sizeof(acc_bias_q16[0]) * 3;
  400b0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400b12:	330c      	adds	r3, #12
  400b14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	
	memcpy(gyr_bias_q16, &sensor_bias[idx], sizeof(gyr_bias_q16[0]) * 3);
  400b18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400b1c:	f107 0214 	add.w	r2, r7, #20
  400b20:	4413      	add	r3, r2
  400b22:	220c      	movs	r2, #12
  400b24:	4619      	mov	r1, r3
  400b26:	68b8      	ldr	r0, [r7, #8]
  400b28:	4b0b      	ldr	r3, [pc, #44]	; (400b58 <retrieve_stored_biases_from_flash+0x88>)
  400b2a:	4798      	blx	r3
	idx += sizeof(gyr_bias_q16[0]) * 3;
  400b2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400b30:	330c      	adds	r3, #12
  400b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	
	memcpy(mag_bias_q16, &sensor_bias[idx], sizeof(mag_bias_q16[0]) * 3);
  400b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400b3a:	f107 0214 	add.w	r2, r7, #20
  400b3e:	4413      	add	r3, r2
  400b40:	220c      	movs	r2, #12
  400b42:	4619      	mov	r1, r3
  400b44:	6878      	ldr	r0, [r7, #4]
  400b46:	4b04      	ldr	r3, [pc, #16]	; (400b58 <retrieve_stored_biases_from_flash+0x88>)
  400b48:	4798      	blx	r3
		
	return rc;
  400b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
  400b4c:	4618      	mov	r0, r3
  400b4e:	3770      	adds	r7, #112	; 0x70
  400b50:	46bd      	mov	sp, r7
  400b52:	bd80      	pop	{r7, pc}
  400b54:	00404b31 	.word	0x00404b31
  400b58:	0040f841 	.word	0x0040f841

00400b5c <store_biases_in_flash>:
 * \param[in] acc_bias_q16 acc bias to be written
 * \param[in] gyr_bias_q16 gyr bias to be written
 * \param[in] mag_bias_q16 mag bias to be written
 */
static void store_biases_in_flash(const int32_t acc_bias_q16[3], const int32_t gyr_bias_q16[3], const int32_t mag_bias_q16[3])
{
  400b5c:	b580      	push	{r7, lr}
  400b5e:	b09a      	sub	sp, #104	; 0x68
  400b60:	af00      	add	r7, sp, #0
  400b62:	60f8      	str	r0, [r7, #12]
  400b64:	60b9      	str	r1, [r7, #8]
  400b66:	607a      	str	r2, [r7, #4]
	uint8_t sensors_biases[84] = {0};
  400b68:	f107 0310 	add.w	r3, r7, #16
  400b6c:	2254      	movs	r2, #84	; 0x54
  400b6e:	2100      	movs	r1, #0
  400b70:	4618      	mov	r0, r3
  400b72:	4b1b      	ldr	r3, [pc, #108]	; (400be0 <store_biases_in_flash+0x84>)
  400b74:	4798      	blx	r3
	uint8_t idx = 0;
  400b76:	2300      	movs	r3, #0
  400b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
	memcpy(&sensors_biases[idx], acc_bias_q16, sizeof(acc_bias_q16[0]) * 3);
  400b7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400b80:	f107 0210 	add.w	r2, r7, #16
  400b84:	4413      	add	r3, r2
  400b86:	220c      	movs	r2, #12
  400b88:	68f9      	ldr	r1, [r7, #12]
  400b8a:	4618      	mov	r0, r3
  400b8c:	4b15      	ldr	r3, [pc, #84]	; (400be4 <store_biases_in_flash+0x88>)
  400b8e:	4798      	blx	r3
	idx += sizeof(acc_bias_q16[0]) * 3;
  400b90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400b94:	330c      	adds	r3, #12
  400b96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
	memcpy(&sensors_biases[idx], gyr_bias_q16, sizeof(gyr_bias_q16[0]) * 3);
  400b9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400b9e:	f107 0210 	add.w	r2, r7, #16
  400ba2:	4413      	add	r3, r2
  400ba4:	220c      	movs	r2, #12
  400ba6:	68b9      	ldr	r1, [r7, #8]
  400ba8:	4618      	mov	r0, r3
  400baa:	4b0e      	ldr	r3, [pc, #56]	; (400be4 <store_biases_in_flash+0x88>)
  400bac:	4798      	blx	r3
	idx += sizeof(gyr_bias_q16[0]) * 3;
  400bae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400bb2:	330c      	adds	r3, #12
  400bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
	memcpy(&sensors_biases[idx], mag_bias_q16, sizeof(mag_bias_q16[0]) * 3);
  400bb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400bbc:	f107 0210 	add.w	r2, r7, #16
  400bc0:	4413      	add	r3, r2
  400bc2:	220c      	movs	r2, #12
  400bc4:	6879      	ldr	r1, [r7, #4]
  400bc6:	4618      	mov	r0, r3
  400bc8:	4b06      	ldr	r3, [pc, #24]	; (400be4 <store_biases_in_flash+0x88>)
  400bca:	4798      	blx	r3
	
	inv_flash_manager_writeData(sensors_biases);
  400bcc:	f107 0310 	add.w	r3, r7, #16
  400bd0:	4618      	mov	r0, r3
  400bd2:	4b05      	ldr	r3, [pc, #20]	; (400be8 <store_biases_in_flash+0x8c>)
  400bd4:	4798      	blx	r3
}
  400bd6:	bf00      	nop
  400bd8:	3768      	adds	r7, #104	; 0x68
  400bda:	46bd      	mov	sp, r7
  400bdc:	bd80      	pop	{r7, pc}
  400bde:	bf00      	nop
  400be0:	0040fa3d 	.word	0x0040fa3d
  400be4:	0040f841 	.word	0x0040f841
  400be8:	00404bcd 	.word	0x00404bcd

00400bec <store_biases>:

/*
 * \brief Evaluate wether biases needs to be written to flash depending on accuracies value
 */
static void store_biases(void)
{		
  400bec:	b598      	push	{r3, r4, r7, lr}
  400bee:	af00      	add	r7, sp, #0
	static sensor_biases_t acc_bias;
	static sensor_biases_t gyr_bias;
	static sensor_biases_t mag_bias;
	static uint8_t biases_stored = 0;
	
	if (!biases_stored) {
  400bf0:	4b20      	ldr	r3, [pc, #128]	; (400c74 <store_biases+0x88>)
  400bf2:	781b      	ldrb	r3, [r3, #0]
  400bf4:	2b00      	cmp	r3, #0
  400bf6:	d13b      	bne.n	400c70 <store_biases+0x84>
		if (output.acc_accuracy_flag == 3) {
  400bf8:	4b1f      	ldr	r3, [pc, #124]	; (400c78 <store_biases+0x8c>)
  400bfa:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
  400bfe:	2b03      	cmp	r3, #3
  400c00:	d10a      	bne.n	400c18 <store_biases+0x2c>
			memcpy(acc_bias.bias_q16, output.acc_bias_q16, sizeof(output.acc_bias_q16));
  400c02:	4a1e      	ldr	r2, [pc, #120]	; (400c7c <store_biases+0x90>)
  400c04:	4b1c      	ldr	r3, [pc, #112]	; (400c78 <store_biases+0x8c>)
  400c06:	4614      	mov	r4, r2
  400c08:	331c      	adds	r3, #28
  400c0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			acc_bias.is_saved = 1;
  400c12:	4b1a      	ldr	r3, [pc, #104]	; (400c7c <store_biases+0x90>)
  400c14:	2201      	movs	r2, #1
  400c16:	731a      	strb	r2, [r3, #12]
		}

		if (output.gyr_accuracy_flag == 3) {
  400c18:	4b17      	ldr	r3, [pc, #92]	; (400c78 <store_biases+0x8c>)
  400c1a:	f993 3050 	ldrsb.w	r3, [r3, #80]	; 0x50
  400c1e:	2b03      	cmp	r3, #3
  400c20:	d10a      	bne.n	400c38 <store_biases+0x4c>
			memcpy(gyr_bias.bias_q16, output.gyr_bias_q16, sizeof(output.gyr_bias_q16));
  400c22:	4a17      	ldr	r2, [pc, #92]	; (400c80 <store_biases+0x94>)
  400c24:	4b14      	ldr	r3, [pc, #80]	; (400c78 <store_biases+0x8c>)
  400c26:	4614      	mov	r4, r2
  400c28:	3344      	adds	r3, #68	; 0x44
  400c2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400c2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			gyr_bias.is_saved = 1;
  400c32:	4b13      	ldr	r3, [pc, #76]	; (400c80 <store_biases+0x94>)
  400c34:	2201      	movs	r2, #1
  400c36:	731a      	strb	r2, [r3, #12]
			memset(mag_bias.bias_q16, 0, sizeof(mag_bias.bias_q16));
			mag_bias.is_saved = 1;		
		}
#else
		/* Mag is not connected so let's put zeros */
		memset(mag_bias.bias_q16, 0, sizeof(mag_bias.bias_q16));
  400c38:	220c      	movs	r2, #12
  400c3a:	2100      	movs	r1, #0
  400c3c:	4811      	ldr	r0, [pc, #68]	; (400c84 <store_biases+0x98>)
  400c3e:	4b12      	ldr	r3, [pc, #72]	; (400c88 <store_biases+0x9c>)
  400c40:	4798      	blx	r3
		mag_bias.is_saved = 1;
  400c42:	4b10      	ldr	r3, [pc, #64]	; (400c84 <store_biases+0x98>)
  400c44:	2201      	movs	r2, #1
  400c46:	731a      	strb	r2, [r3, #12]
#endif

		if ((acc_bias.is_saved == 1) && (gyr_bias.is_saved == 1) && (mag_bias.is_saved == 1)) {
  400c48:	4b0c      	ldr	r3, [pc, #48]	; (400c7c <store_biases+0x90>)
  400c4a:	7b1b      	ldrb	r3, [r3, #12]
  400c4c:	2b01      	cmp	r3, #1
  400c4e:	d10f      	bne.n	400c70 <store_biases+0x84>
  400c50:	4b0b      	ldr	r3, [pc, #44]	; (400c80 <store_biases+0x94>)
  400c52:	7b1b      	ldrb	r3, [r3, #12]
  400c54:	2b01      	cmp	r3, #1
  400c56:	d10b      	bne.n	400c70 <store_biases+0x84>
  400c58:	4b0a      	ldr	r3, [pc, #40]	; (400c84 <store_biases+0x98>)
  400c5a:	7b1b      	ldrb	r3, [r3, #12]
  400c5c:	2b01      	cmp	r3, #1
  400c5e:	d107      	bne.n	400c70 <store_biases+0x84>
			 * WARNING: With this configuration, the bias can be stored up to 186 iterations in flash before erase sector.
			 * The erase procedure with the first write, can take up to 250ms.
			 * In this example, the erase is done dynamicly. Depending on the context, it could be better to do it 
			 * when the software go to shutdown.
			 */
			store_biases_in_flash(acc_bias.bias_q16, gyr_bias.bias_q16, mag_bias.bias_q16);
  400c60:	4a08      	ldr	r2, [pc, #32]	; (400c84 <store_biases+0x98>)
  400c62:	4907      	ldr	r1, [pc, #28]	; (400c80 <store_biases+0x94>)
  400c64:	4805      	ldr	r0, [pc, #20]	; (400c7c <store_biases+0x90>)
  400c66:	4b09      	ldr	r3, [pc, #36]	; (400c8c <store_biases+0xa0>)
  400c68:	4798      	blx	r3
			biases_stored = 1;
  400c6a:	4b02      	ldr	r3, [pc, #8]	; (400c74 <store_biases+0x88>)
  400c6c:	2201      	movs	r2, #1
  400c6e:	701a      	strb	r2, [r3, #0]
		}
	}
}
  400c70:	bf00      	nop
  400c72:	bd98      	pop	{r3, r4, r7, pc}
  400c74:	20003938 	.word	0x20003938
  400c78:	20003848 	.word	0x20003848
  400c7c:	2000393c 	.word	0x2000393c
  400c80:	2000394c 	.word	0x2000394c
  400c84:	2000395c 	.word	0x2000395c
  400c88:	0040fa3d 	.word	0x0040fa3d
  400c8c:	00400b5d 	.word	0x00400b5d

00400c90 <apply_mounting_matrix>:


static void apply_mounting_matrix(const int32_t matrix[9], int32_t raw[3])
{
  400c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c94:	b08d      	sub	sp, #52	; 0x34
  400c96:	af00      	add	r7, sp, #0
  400c98:	60f8      	str	r0, [r7, #12]
  400c9a:	60b9      	str	r1, [r7, #8]
	unsigned i;
	int64_t data_q30[3];
	
	for(i = 0; i < 3; i++) {
  400c9c:	2200      	movs	r2, #0
  400c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
  400ca0:	e08e      	b.n	400dc0 <apply_mounting_matrix+0x130>
		data_q30[i] =  ((int64_t)matrix[3*i+0] * raw[0]);
  400ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  400ca4:	460a      	mov	r2, r1
  400ca6:	0052      	lsls	r2, r2, #1
  400ca8:	440a      	add	r2, r1
  400caa:	0092      	lsls	r2, r2, #2
  400cac:	4611      	mov	r1, r2
  400cae:	68fa      	ldr	r2, [r7, #12]
  400cb0:	440a      	add	r2, r1
  400cb2:	6812      	ldr	r2, [r2, #0]
  400cb4:	4692      	mov	sl, r2
  400cb6:	ea4f 7bea 	mov.w	fp, sl, asr #31
  400cba:	68ba      	ldr	r2, [r7, #8]
  400cbc:	6812      	ldr	r2, [r2, #0]
  400cbe:	4611      	mov	r1, r2
  400cc0:	ea4f 72e1 	mov.w	r2, r1, asr #31
  400cc4:	fb01 fe0b 	mul.w	lr, r1, fp
  400cc8:	fb0a f002 	mul.w	r0, sl, r2
  400ccc:	4470      	add	r0, lr
  400cce:	fbaa 1201 	umull	r1, r2, sl, r1
  400cd2:	4410      	add	r0, r2
  400cd4:	4602      	mov	r2, r0
  400cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  400cd8:	00c0      	lsls	r0, r0, #3
  400cda:	f107 0e30 	add.w	lr, r7, #48	; 0x30
  400cde:	4470      	add	r0, lr
  400ce0:	3820      	subs	r0, #32
  400ce2:	e9c0 1200 	strd	r1, r2, [r0]
		data_q30[i] += ((int64_t)matrix[3*i+1] * raw[1]);
  400ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400ce8:	00d2      	lsls	r2, r2, #3
  400cea:	f107 0130 	add.w	r1, r7, #48	; 0x30
  400cee:	440a      	add	r2, r1
  400cf0:	3a20      	subs	r2, #32
  400cf2:	e9d2 1200 	ldrd	r1, r2, [r2]
  400cf6:	e9c7 1200 	strd	r1, r2, [r7]
  400cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  400cfc:	460a      	mov	r2, r1
  400cfe:	0052      	lsls	r2, r2, #1
  400d00:	440a      	add	r2, r1
  400d02:	0092      	lsls	r2, r2, #2
  400d04:	3204      	adds	r2, #4
  400d06:	68f9      	ldr	r1, [r7, #12]
  400d08:	440a      	add	r2, r1
  400d0a:	6812      	ldr	r2, [r2, #0]
  400d0c:	4692      	mov	sl, r2
  400d0e:	ea4f 7bea 	mov.w	fp, sl, asr #31
  400d12:	68ba      	ldr	r2, [r7, #8]
  400d14:	3204      	adds	r2, #4
  400d16:	6812      	ldr	r2, [r2, #0]
  400d18:	4611      	mov	r1, r2
  400d1a:	ea4f 72e1 	mov.w	r2, r1, asr #31
  400d1e:	fb01 fe0b 	mul.w	lr, r1, fp
  400d22:	fb0a f002 	mul.w	r0, sl, r2
  400d26:	4470      	add	r0, lr
  400d28:	fbaa 1201 	umull	r1, r2, sl, r1
  400d2c:	4410      	add	r0, r2
  400d2e:	4602      	mov	r2, r0
  400d30:	e9d7 ab00 	ldrd	sl, fp, [r7]
  400d34:	eb1a 0a01 	adds.w	sl, sl, r1
  400d38:	eb4b 0b02 	adc.w	fp, fp, r2
  400d3c:	4651      	mov	r1, sl
  400d3e:	465a      	mov	r2, fp
  400d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  400d42:	00c0      	lsls	r0, r0, #3
  400d44:	f107 0e30 	add.w	lr, r7, #48	; 0x30
  400d48:	4470      	add	r0, lr
  400d4a:	3820      	subs	r0, #32
  400d4c:	e9c0 1200 	strd	r1, r2, [r0]
		data_q30[i] += ((int64_t)matrix[3*i+2] * raw[2]);
  400d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400d52:	00d2      	lsls	r2, r2, #3
  400d54:	f107 0130 	add.w	r1, r7, #48	; 0x30
  400d58:	440a      	add	r2, r1
  400d5a:	3a20      	subs	r2, #32
  400d5c:	e9d2 1200 	ldrd	r1, r2, [r2]
  400d60:	e9c7 1200 	strd	r1, r2, [r7]
  400d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  400d66:	460a      	mov	r2, r1
  400d68:	0052      	lsls	r2, r2, #1
  400d6a:	440a      	add	r2, r1
  400d6c:	0092      	lsls	r2, r2, #2
  400d6e:	3208      	adds	r2, #8
  400d70:	68f9      	ldr	r1, [r7, #12]
  400d72:	440a      	add	r2, r1
  400d74:	6812      	ldr	r2, [r2, #0]
  400d76:	4692      	mov	sl, r2
  400d78:	ea4f 7bea 	mov.w	fp, sl, asr #31
  400d7c:	68ba      	ldr	r2, [r7, #8]
  400d7e:	3208      	adds	r2, #8
  400d80:	6812      	ldr	r2, [r2, #0]
  400d82:	4611      	mov	r1, r2
  400d84:	ea4f 72e1 	mov.w	r2, r1, asr #31
  400d88:	fb01 fe0b 	mul.w	lr, r1, fp
  400d8c:	fb0a f002 	mul.w	r0, sl, r2
  400d90:	4470      	add	r0, lr
  400d92:	fbaa 1201 	umull	r1, r2, sl, r1
  400d96:	4410      	add	r0, r2
  400d98:	4602      	mov	r2, r0
  400d9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
  400d9e:	eb1a 0a01 	adds.w	sl, sl, r1
  400da2:	eb4b 0b02 	adc.w	fp, fp, r2
  400da6:	4651      	mov	r1, sl
  400da8:	465a      	mov	r2, fp
  400daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  400dac:	00c0      	lsls	r0, r0, #3
  400dae:	f107 0e30 	add.w	lr, r7, #48	; 0x30
  400db2:	4470      	add	r0, lr
  400db4:	3820      	subs	r0, #32
  400db6:	e9c0 1200 	strd	r1, r2, [r0]
	for(i = 0; i < 3; i++) {
  400dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400dbc:	3201      	adds	r2, #1
  400dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
  400dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400dc2:	2a02      	cmp	r2, #2
  400dc4:	f67f af6d 	bls.w	400ca2 <apply_mounting_matrix+0x12>
	}
	raw[0] = (int32_t)(data_q30[0]>>30);
  400dc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
  400dcc:	ea4f 7891 	mov.w	r8, r1, lsr #30
  400dd0:	ea48 0882 	orr.w	r8, r8, r2, lsl #2
  400dd4:	ea4f 79a2 	mov.w	r9, r2, asr #30
  400dd8:	4641      	mov	r1, r8
  400dda:	68ba      	ldr	r2, [r7, #8]
  400ddc:	6011      	str	r1, [r2, #0]
	raw[1] = (int32_t)(data_q30[1]>>30);
  400dde:	68ba      	ldr	r2, [r7, #8]
  400de0:	1d10      	adds	r0, r2, #4
  400de2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
  400de6:	0f8d      	lsrs	r5, r1, #30
  400de8:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
  400dec:	1796      	asrs	r6, r2, #30
  400dee:	462a      	mov	r2, r5
  400df0:	6002      	str	r2, [r0, #0]
	raw[2] = (int32_t)(data_q30[2]>>30);
  400df2:	68ba      	ldr	r2, [r7, #8]
  400df4:	f102 0008 	add.w	r0, r2, #8
  400df8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
  400dfc:	0f8b      	lsrs	r3, r1, #30
  400dfe:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  400e02:	1794      	asrs	r4, r2, #30
  400e04:	6003      	str	r3, [r0, #0]
}
  400e06:	bf00      	nop
  400e08:	3734      	adds	r7, #52	; 0x34
  400e0a:	46bd      	mov	sp, r7
  400e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00400e10 <fixedpoint_to_float>:

static void fixedpoint_to_float(const int32_t *in, float *out, const uint8_t fxp_shift, const uint8_t dim)
{
  400e10:	b480      	push	{r7}
  400e12:	b087      	sub	sp, #28
  400e14:	af00      	add	r7, sp, #0
  400e16:	60f8      	str	r0, [r7, #12]
  400e18:	60b9      	str	r1, [r7, #8]
  400e1a:	4611      	mov	r1, r2
  400e1c:	461a      	mov	r2, r3
  400e1e:	460b      	mov	r3, r1
  400e20:	71fb      	strb	r3, [r7, #7]
  400e22:	4613      	mov	r3, r2
  400e24:	71bb      	strb	r3, [r7, #6]
	int i;
	float scale = 1.f / (1<<fxp_shift);
  400e26:	79fb      	ldrb	r3, [r7, #7]
  400e28:	2201      	movs	r2, #1
  400e2a:	fa02 f303 	lsl.w	r3, r2, r3
  400e2e:	ee07 3a90 	vmov	s15, r3
  400e32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  400e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  400e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
  400e3e:	edc7 7a04 	vstr	s15, [r7, #16]

	for (i = 0; i < dim; i++)
  400e42:	2300      	movs	r3, #0
  400e44:	617b      	str	r3, [r7, #20]
  400e46:	e015      	b.n	400e74 <fixedpoint_to_float+0x64>
		out[i] = scale * in[i];
  400e48:	697b      	ldr	r3, [r7, #20]
  400e4a:	009b      	lsls	r3, r3, #2
  400e4c:	68ba      	ldr	r2, [r7, #8]
  400e4e:	4413      	add	r3, r2
  400e50:	697a      	ldr	r2, [r7, #20]
  400e52:	0092      	lsls	r2, r2, #2
  400e54:	68f9      	ldr	r1, [r7, #12]
  400e56:	440a      	add	r2, r1
  400e58:	6812      	ldr	r2, [r2, #0]
  400e5a:	ee07 2a90 	vmov	s15, r2
  400e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  400e62:	edd7 7a04 	vldr	s15, [r7, #16]
  400e66:	ee67 7a27 	vmul.f32	s15, s14, s15
  400e6a:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < dim; i++)
  400e6e:	697b      	ldr	r3, [r7, #20]
  400e70:	3301      	adds	r3, #1
  400e72:	617b      	str	r3, [r7, #20]
  400e74:	79ba      	ldrb	r2, [r7, #6]
  400e76:	697b      	ldr	r3, [r7, #20]
  400e78:	429a      	cmp	r2, r3
  400e7a:	dce5      	bgt.n	400e48 <fixedpoint_to_float+0x38>
}
  400e7c:	bf00      	nop
  400e7e:	371c      	adds	r7, #28
  400e80:	46bd      	mov	sp, r7
  400e82:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e86:	4770      	bx	lr

00400e88 <quaternions_to_angles>:

static void quaternions_to_angles(const float quat[4], float angles[3])
{
  400e88:	b590      	push	{r4, r7, lr}
  400e8a:	b099      	sub	sp, #100	; 0x64
  400e8c:	af00      	add	r7, sp, #0
  400e8e:	6078      	str	r0, [r7, #4]
  400e90:	6039      	str	r1, [r7, #0]
	const float RAD_2_DEG = (180.f/3.14159265358979f);
  400e92:	4b8d      	ldr	r3, [pc, #564]	; (4010c8 <quaternions_to_angles+0x240>)
  400e94:	65fb      	str	r3, [r7, #92]	; 0x5c
	float rot_matrix[9];

	{ // quaternion_to_rotation_matrix
		const float dTx  = 2.0f * quat[1];
  400e96:	687b      	ldr	r3, [r7, #4]
  400e98:	3304      	adds	r3, #4
  400e9a:	edd3 7a00 	vldr	s15, [r3]
  400e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
  400ea2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		const float dTy  = 2.0f * quat[2];
  400ea6:	687b      	ldr	r3, [r7, #4]
  400ea8:	3308      	adds	r3, #8
  400eaa:	edd3 7a00 	vldr	s15, [r3]
  400eae:	ee77 7aa7 	vadd.f32	s15, s15, s15
  400eb2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		const float dTz  = 2.0f * quat[3];
  400eb6:	687b      	ldr	r3, [r7, #4]
  400eb8:	330c      	adds	r3, #12
  400eba:	edd3 7a00 	vldr	s15, [r3]
  400ebe:	ee77 7aa7 	vadd.f32	s15, s15, s15
  400ec2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		const float dTwx = dTx  * quat[0];
  400ec6:	687b      	ldr	r3, [r7, #4]
  400ec8:	ed93 7a00 	vldr	s14, [r3]
  400ecc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
  400ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
  400ed4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		const float dTwy = dTy  * quat[0];
  400ed8:	687b      	ldr	r3, [r7, #4]
  400eda:	ed93 7a00 	vldr	s14, [r3]
  400ede:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
  400ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
  400ee6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		const float dTwz = dTz  * quat[0];
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	ed93 7a00 	vldr	s14, [r3]
  400ef0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
  400ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
  400ef8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		const float dTxx = dTx  * quat[1];
  400efc:	687b      	ldr	r3, [r7, #4]
  400efe:	3304      	adds	r3, #4
  400f00:	ed93 7a00 	vldr	s14, [r3]
  400f04:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
  400f08:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f0c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		const float dTxy = dTy  * quat[1];
  400f10:	687b      	ldr	r3, [r7, #4]
  400f12:	3304      	adds	r3, #4
  400f14:	ed93 7a00 	vldr	s14, [r3]
  400f18:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
  400f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f20:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		const float dTxz = dTz  * quat[1];
  400f24:	687b      	ldr	r3, [r7, #4]
  400f26:	3304      	adds	r3, #4
  400f28:	ed93 7a00 	vldr	s14, [r3]
  400f2c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
  400f30:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f34:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		const float dTyy = dTy  * quat[2];
  400f38:	687b      	ldr	r3, [r7, #4]
  400f3a:	3308      	adds	r3, #8
  400f3c:	ed93 7a00 	vldr	s14, [r3]
  400f40:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
  400f44:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f48:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		const float dTyz = dTz  * quat[2];
  400f4c:	687b      	ldr	r3, [r7, #4]
  400f4e:	3308      	adds	r3, #8
  400f50:	ed93 7a00 	vldr	s14, [r3]
  400f54:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
  400f58:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f5c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		const float dTzz = dTz  * quat[3];
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	330c      	adds	r3, #12
  400f64:	ed93 7a00 	vldr	s14, [r3]
  400f68:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
  400f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f70:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		rot_matrix[0] = 1.0f - (dTyy + dTzz);
  400f74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
  400f78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
  400f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
  400f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  400f84:	ee77 7a67 	vsub.f32	s15, s14, s15
  400f88:	edc7 7a02 	vstr	s15, [r7, #8]
		rot_matrix[1] = dTxy - dTwz;
  400f8c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
  400f90:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
  400f94:	ee77 7a67 	vsub.f32	s15, s14, s15
  400f98:	edc7 7a03 	vstr	s15, [r7, #12]
		rot_matrix[2] = dTxz + dTwy;
  400f9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
  400fa0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
  400fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
  400fa8:	edc7 7a04 	vstr	s15, [r7, #16]
		rot_matrix[3] = dTxy + dTwz;
  400fac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
  400fb0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
  400fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
  400fb8:	edc7 7a05 	vstr	s15, [r7, #20]
		rot_matrix[4] = 1.0f - (dTxx + dTzz);
  400fbc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
  400fc0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
  400fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
  400fc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  400fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
  400fd0:	edc7 7a06 	vstr	s15, [r7, #24]
		rot_matrix[5] = dTyz - dTwx;
  400fd4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
  400fd8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
  400fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
  400fe0:	edc7 7a07 	vstr	s15, [r7, #28]
		rot_matrix[6] = dTxz - dTwy;
  400fe4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
  400fe8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
  400fec:	ee77 7a67 	vsub.f32	s15, s14, s15
  400ff0:	edc7 7a08 	vstr	s15, [r7, #32]
		rot_matrix[7] = dTyz + dTwx;
  400ff4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
  400ff8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
  400ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
  401000:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		rot_matrix[8] = 1.0f - (dTxx + dTyy);
  401004:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
  401008:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
  40100c:	ee77 7a27 	vadd.f32	s15, s14, s15
  401010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  401014:	ee77 7a67 	vsub.f32	s15, s14, s15
  401018:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	}

	angles[0] = atan2f(-rot_matrix[3], rot_matrix[0])*RAD_2_DEG;
  40101c:	edd7 7a05 	vldr	s15, [r7, #20]
  401020:	eef1 7a67 	vneg.f32	s15, s15
  401024:	ed97 7a02 	vldr	s14, [r7, #8]
  401028:	eef0 0a47 	vmov.f32	s1, s14
  40102c:	eeb0 0a67 	vmov.f32	s0, s15
  401030:	4b26      	ldr	r3, [pc, #152]	; (4010cc <quaternions_to_angles+0x244>)
  401032:	4798      	blx	r3
  401034:	eeb0 7a40 	vmov.f32	s14, s0
  401038:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
  40103c:	ee67 7a27 	vmul.f32	s15, s14, s15
  401040:	683b      	ldr	r3, [r7, #0]
  401042:	edc3 7a00 	vstr	s15, [r3]
	angles[1] = atan2f(-rot_matrix[7], rot_matrix[8])*RAD_2_DEG;
  401046:	683b      	ldr	r3, [r7, #0]
  401048:	1d1c      	adds	r4, r3, #4
  40104a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  40104e:	eef1 7a67 	vneg.f32	s15, s15
  401052:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
  401056:	eef0 0a47 	vmov.f32	s1, s14
  40105a:	eeb0 0a67 	vmov.f32	s0, s15
  40105e:	4b1b      	ldr	r3, [pc, #108]	; (4010cc <quaternions_to_angles+0x244>)
  401060:	4798      	blx	r3
  401062:	eeb0 7a40 	vmov.f32	s14, s0
  401066:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
  40106a:	ee67 7a27 	vmul.f32	s15, s14, s15
  40106e:	edc4 7a00 	vstr	s15, [r4]
	angles[2] = asinf(-rot_matrix[6])*RAD_2_DEG;
  401072:	683b      	ldr	r3, [r7, #0]
  401074:	f103 0408 	add.w	r4, r3, #8
  401078:	edd7 7a08 	vldr	s15, [r7, #32]
  40107c:	eef1 7a67 	vneg.f32	s15, s15
  401080:	eeb0 0a67 	vmov.f32	s0, s15
  401084:	4b12      	ldr	r3, [pc, #72]	; (4010d0 <quaternions_to_angles+0x248>)
  401086:	4798      	blx	r3
  401088:	eeb0 7a40 	vmov.f32	s14, s0
  40108c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
  401090:	ee67 7a27 	vmul.f32	s15, s14, s15
  401094:	edc4 7a00 	vstr	s15, [r4]

	if (angles[0] < 0.f)
  401098:	683b      	ldr	r3, [r7, #0]
  40109a:	edd3 7a00 	vldr	s15, [r3]
  40109e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4010a6:	d400      	bmi.n	4010aa <quaternions_to_angles+0x222>
		angles[0] += 360.f;
}
  4010a8:	e009      	b.n	4010be <quaternions_to_angles+0x236>
		angles[0] += 360.f;
  4010aa:	683b      	ldr	r3, [r7, #0]
  4010ac:	edd3 7a00 	vldr	s15, [r3]
  4010b0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 4010d4 <quaternions_to_angles+0x24c>
  4010b4:	ee77 7a87 	vadd.f32	s15, s15, s14
  4010b8:	683b      	ldr	r3, [r7, #0]
  4010ba:	edc3 7a00 	vstr	s15, [r3]
}
  4010be:	bf00      	nop
  4010c0:	3764      	adds	r7, #100	; 0x64
  4010c2:	46bd      	mov	sp, r7
  4010c4:	bd90      	pop	{r4, r7, pc}
  4010c6:	bf00      	nop
  4010c8:	42652ee0 	.word	0x42652ee0
  4010cc:	0040dd11 	.word	0x0040dd11
  4010d0:	0040dc59 	.word	0x0040dc59
  4010d4:	43b40000 	.word	0x43b40000

004010d8 <odr_bitfield_to_us>:

static uint32_t odr_bitfield_to_us(uint32_t odr_bitfield)
{
  4010d8:	b480      	push	{r7}
  4010da:	b083      	sub	sp, #12
  4010dc:	af00      	add	r7, sp, #0
  4010de:	6078      	str	r0, [r7, #4]
	switch ((ICM426XX_GYRO_CONFIG0_ODR_t)odr_bitfield) {
  4010e0:	687b      	ldr	r3, [r7, #4]
  4010e2:	b2db      	uxtb	r3, r3
  4010e4:	3b06      	subs	r3, #6
  4010e6:	2b09      	cmp	r3, #9
  4010e8:	d825      	bhi.n	401136 <odr_bitfield_to_us+0x5e>
  4010ea:	a201      	add	r2, pc, #4	; (adr r2, 4010f0 <odr_bitfield_to_us+0x18>)
  4010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4010f0:	00401119 	.word	0x00401119
  4010f4:	00401125 	.word	0x00401125
  4010f8:	0040112b 	.word	0x0040112b
  4010fc:	00401131 	.word	0x00401131
  401100:	00401137 	.word	0x00401137
  401104:	00401137 	.word	0x00401137
  401108:	00401137 	.word	0x00401137
  40110c:	00401137 	.word	0x00401137
  401110:	00401137 	.word	0x00401137
  401114:	0040111f 	.word	0x0040111f
		case ICM426XX_GYRO_CONFIG0_ODR_1_KHZ:      return 1000;
  401118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40111c:	e00c      	b.n	401138 <odr_bitfield_to_us+0x60>
		case ICM426XX_GYRO_CONFIG0_ODR_500_HZ:     return 2000;
  40111e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  401122:	e009      	b.n	401138 <odr_bitfield_to_us+0x60>
		case ICM426XX_GYRO_CONFIG0_ODR_200_HZ:     return 5000;
  401124:	f241 3388 	movw	r3, #5000	; 0x1388
  401128:	e006      	b.n	401138 <odr_bitfield_to_us+0x60>
		case ICM426XX_GYRO_CONFIG0_ODR_100_HZ:     return 10000;
  40112a:	f242 7310 	movw	r3, #10000	; 0x2710
  40112e:	e003      	b.n	401138 <odr_bitfield_to_us+0x60>
		case ICM426XX_GYRO_CONFIG0_ODR_50_HZ:      return 20000;
  401130:	f644 6320 	movw	r3, #20000	; 0x4e20
  401134:	e000      	b.n	401138 <odr_bitfield_to_us+0x60>
		default:                                   return 640000;
  401136:	4b03      	ldr	r3, [pc, #12]	; (401144 <odr_bitfield_to_us+0x6c>)
	}
}
  401138:	4618      	mov	r0, r3
  40113a:	370c      	adds	r7, #12
  40113c:	46bd      	mov	sp, r7
  40113e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401142:	4770      	bx	lr
  401144:	0009c400 	.word	0x0009c400

00401148 <gyro_fsr_dps_to_bitfield>:
#if !IS_HIGH_RES_MODE
static int gyro_fsr_dps_to_bitfield(int32_t fsr)
{
  401148:	b480      	push	{r7}
  40114a:	b083      	sub	sp, #12
  40114c:	af00      	add	r7, sp, #0
  40114e:	6078      	str	r0, [r7, #4]
	switch (fsr) {
  401150:	687b      	ldr	r3, [r7, #4]
  401152:	2b3f      	cmp	r3, #63	; 0x3f
  401154:	dc09      	bgt.n	40116a <gyro_fsr_dps_to_bitfield+0x22>
  401156:	2b3e      	cmp	r3, #62	; 0x3e
  401158:	da1d      	bge.n	401196 <gyro_fsr_dps_to_bitfield+0x4e>
  40115a:	2b0f      	cmp	r3, #15
  40115c:	db27      	blt.n	4011ae <gyro_fsr_dps_to_bitfield+0x66>
  40115e:	2b10      	cmp	r3, #16
  401160:	dd15      	ble.n	40118e <gyro_fsr_dps_to_bitfield+0x46>
  401162:	3b1f      	subs	r3, #31
  401164:	2b01      	cmp	r3, #1
  401166:	d822      	bhi.n	4011ae <gyro_fsr_dps_to_bitfield+0x66>
  401168:	e013      	b.n	401192 <gyro_fsr_dps_to_bitfield+0x4a>
  40116a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  40116e:	d018      	beq.n	4011a2 <gyro_fsr_dps_to_bitfield+0x5a>
  401170:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  401174:	dc04      	bgt.n	401180 <gyro_fsr_dps_to_bitfield+0x38>
  401176:	2b7d      	cmp	r3, #125	; 0x7d
  401178:	d00f      	beq.n	40119a <gyro_fsr_dps_to_bitfield+0x52>
  40117a:	2bfa      	cmp	r3, #250	; 0xfa
  40117c:	d00f      	beq.n	40119e <gyro_fsr_dps_to_bitfield+0x56>
  40117e:	e016      	b.n	4011ae <gyro_fsr_dps_to_bitfield+0x66>
  401180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401184:	d00f      	beq.n	4011a6 <gyro_fsr_dps_to_bitfield+0x5e>
  401186:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  40118a:	d00e      	beq.n	4011aa <gyro_fsr_dps_to_bitfield+0x62>
  40118c:	e00f      	b.n	4011ae <gyro_fsr_dps_to_bitfield+0x66>
#if !defined(ICM42686)
	case 15:
	case 16:   return ICM426XX_GYRO_CONFIG0_FS_SEL_16dps;
  40118e:	23e0      	movs	r3, #224	; 0xe0
  401190:	e00f      	b.n	4011b2 <gyro_fsr_dps_to_bitfield+0x6a>
#endif
	case 31:
	case 32:   return ICM426XX_GYRO_CONFIG0_FS_SEL_31dps;
  401192:	23c0      	movs	r3, #192	; 0xc0
  401194:	e00d      	b.n	4011b2 <gyro_fsr_dps_to_bitfield+0x6a>
	case 62:
	case 63:   return ICM426XX_GYRO_CONFIG0_FS_SEL_62dps;
  401196:	23a0      	movs	r3, #160	; 0xa0
  401198:	e00b      	b.n	4011b2 <gyro_fsr_dps_to_bitfield+0x6a>
	case 125:  return ICM426XX_GYRO_CONFIG0_FS_SEL_125dps;
  40119a:	2380      	movs	r3, #128	; 0x80
  40119c:	e009      	b.n	4011b2 <gyro_fsr_dps_to_bitfield+0x6a>
	case 250:  return ICM426XX_GYRO_CONFIG0_FS_SEL_250dps;
  40119e:	2360      	movs	r3, #96	; 0x60
  4011a0:	e007      	b.n	4011b2 <gyro_fsr_dps_to_bitfield+0x6a>
	case 500:  return ICM426XX_GYRO_CONFIG0_FS_SEL_500dps;
  4011a2:	2340      	movs	r3, #64	; 0x40
  4011a4:	e005      	b.n	4011b2 <gyro_fsr_dps_to_bitfield+0x6a>
	case 1000: return ICM426XX_GYRO_CONFIG0_FS_SEL_1000dps;
  4011a6:	2320      	movs	r3, #32
  4011a8:	e003      	b.n	4011b2 <gyro_fsr_dps_to_bitfield+0x6a>
	case 2000: return ICM426XX_GYRO_CONFIG0_FS_SEL_2000dps;
  4011aa:	2300      	movs	r3, #0
  4011ac:	e001      	b.n	4011b2 <gyro_fsr_dps_to_bitfield+0x6a>
#if defined(ICM42686)
	case 4000: return ICM426XX_GYRO_CONFIG0_FS_SEL_4000dps;
#endif
	default:   return -1;
  4011ae:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  4011b2:	4618      	mov	r0, r3
  4011b4:	370c      	adds	r7, #12
  4011b6:	46bd      	mov	sp, r7
  4011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011bc:	4770      	bx	lr
	...

004011c0 <accel_fsr_g_to_bitfield>:

static int accel_fsr_g_to_bitfield(int32_t fsr)
{
  4011c0:	b480      	push	{r7}
  4011c2:	b083      	sub	sp, #12
  4011c4:	af00      	add	r7, sp, #0
  4011c6:	6078      	str	r0, [r7, #4]
	switch (fsr) {
  4011c8:	687b      	ldr	r3, [r7, #4]
  4011ca:	3b02      	subs	r3, #2
  4011cc:	2b0e      	cmp	r3, #14
  4011ce:	d829      	bhi.n	401224 <accel_fsr_g_to_bitfield+0x64>
  4011d0:	a201      	add	r2, pc, #4	; (adr r2, 4011d8 <accel_fsr_g_to_bitfield+0x18>)
  4011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4011d6:	bf00      	nop
  4011d8:	00401215 	.word	0x00401215
  4011dc:	00401225 	.word	0x00401225
  4011e0:	00401219 	.word	0x00401219
  4011e4:	00401225 	.word	0x00401225
  4011e8:	00401225 	.word	0x00401225
  4011ec:	00401225 	.word	0x00401225
  4011f0:	0040121d 	.word	0x0040121d
  4011f4:	00401225 	.word	0x00401225
  4011f8:	00401225 	.word	0x00401225
  4011fc:	00401225 	.word	0x00401225
  401200:	00401225 	.word	0x00401225
  401204:	00401225 	.word	0x00401225
  401208:	00401225 	.word	0x00401225
  40120c:	00401225 	.word	0x00401225
  401210:	00401221 	.word	0x00401221
	case 2:  return ICM426XX_ACCEL_CONFIG0_FS_SEL_2g;
  401214:	2360      	movs	r3, #96	; 0x60
  401216:	e007      	b.n	401228 <accel_fsr_g_to_bitfield+0x68>
	case 4:  return ICM426XX_ACCEL_CONFIG0_FS_SEL_4g;
  401218:	2340      	movs	r3, #64	; 0x40
  40121a:	e005      	b.n	401228 <accel_fsr_g_to_bitfield+0x68>
	case 8:  return ICM426XX_ACCEL_CONFIG0_FS_SEL_8g;
  40121c:	2320      	movs	r3, #32
  40121e:	e003      	b.n	401228 <accel_fsr_g_to_bitfield+0x68>
	case 16: return ICM426XX_ACCEL_CONFIG0_FS_SEL_16g;
  401220:	2300      	movs	r3, #0
  401222:	e001      	b.n	401228 <accel_fsr_g_to_bitfield+0x68>
#if defined(ICM42686)
	case 32: return ICM426XX_ACCEL_CONFIG0_FS_SEL_32g;
#endif
	default:   return -1;
  401224:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  401228:	4618      	mov	r0, r3
  40122a:	370c      	adds	r7, #12
  40122c:	46bd      	mov	sp, r7
  40122e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401232:	4770      	bx	lr

00401234 <get_ringbuffer_volatile_size>:
{
  401234:	b480      	push	{r7}
  401236:	b085      	sub	sp, #20
  401238:	af00      	add	r7, sp, #0
  40123a:	6078      	str	r0, [r7, #4]
	memcpy(&rb_var, rb, sizeof(rb_var));
  40123c:	687b      	ldr	r3, [r7, #4]
  40123e:	681b      	ldr	r3, [r3, #0]
  401240:	60fb      	str	r3, [r7, #12]
	return (rb_var.write - rb_var.read);
  401242:	89fa      	ldrh	r2, [r7, #14]
  401244:	89bb      	ldrh	r3, [r7, #12]
  401246:	1ad3      	subs	r3, r2, r3
  401248:	b29b      	uxth	r3, r3
}
  40124a:	4618      	mov	r0, r3
  40124c:	3714      	adds	r7, #20
  40124e:	46bd      	mov	sp, r7
  401250:	f85d 7b04 	ldr.w	r7, [sp], #4
  401254:	4770      	bx	lr
	...

00401258 <main>:
/* --------------------------------------------------------------------------------------
 *  Main
 * -------------------------------------------------------------------------------------- */

int main(void)
{
  401258:	b580      	push	{r7, lr}
  40125a:	b08e      	sub	sp, #56	; 0x38
  40125c:	af00      	add	r7, sp, #0
	int rc = 0;
  40125e:	2300      	movs	r3, #0
  401260:	637b      	str	r3, [r7, #52]	; 0x34
	struct inv_icm426xx_serif icm426xx_serif;
	struct inv_ak0991x_serif ak09915_serif;

	/* Initialize MCU hardware */
	rc = SetupMCUHardware(&icm426xx_serif, &ak09915_serif);
  401262:	463a      	mov	r2, r7
  401264:	f107 0318 	add.w	r3, r7, #24
  401268:	4611      	mov	r1, r2
  40126a:	4618      	mov	r0, r3
  40126c:	4b4a      	ldr	r3, [pc, #296]	; (401398 <main+0x140>)
  40126e:	4798      	blx	r3
  401270:	6378      	str	r0, [r7, #52]	; 0x34
	check_rc(rc, "Error while setting up MCU");
  401272:	494a      	ldr	r1, [pc, #296]	; (40139c <main+0x144>)
  401274:	6b78      	ldr	r0, [r7, #52]	; 0x34
  401276:	4b4a      	ldr	r3, [pc, #296]	; (4013a0 <main+0x148>)
  401278:	4798      	blx	r3

	/* Initialize ICM device */
	INV_MSG(INV_MSG_LEVEL_INFO, "Initializing ICM device...");
  40127a:	494a      	ldr	r1, [pc, #296]	; (4013a4 <main+0x14c>)
  40127c:	2003      	movs	r0, #3
  40127e:	4b4a      	ldr	r3, [pc, #296]	; (4013a8 <main+0x150>)
  401280:	4798      	blx	r3
	rc = SetupInvDevice(&icm426xx_serif);
  401282:	f107 0318 	add.w	r3, r7, #24
  401286:	4618      	mov	r0, r3
  401288:	4b48      	ldr	r3, [pc, #288]	; (4013ac <main+0x154>)
  40128a:	4798      	blx	r3
  40128c:	6378      	str	r0, [r7, #52]	; 0x34
	check_rc(rc, "Error while setting up ICM device");
  40128e:	4948      	ldr	r1, [pc, #288]	; (4013b0 <main+0x158>)
  401290:	6b78      	ldr	r0, [r7, #52]	; 0x34
  401292:	4b43      	ldr	r3, [pc, #268]	; (4013a0 <main+0x148>)
  401294:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "OK");
  401296:	4947      	ldr	r1, [pc, #284]	; (4013b4 <main+0x15c>)
  401298:	2003      	movs	r0, #3
  40129a:	4b43      	ldr	r3, [pc, #268]	; (4013a8 <main+0x150>)
  40129c:	4798      	blx	r3

	/* Initialize algorithm */
	INV_MSG(INV_MSG_LEVEL_INFO, "Initializing algorithm...");
  40129e:	4946      	ldr	r1, [pc, #280]	; (4013b8 <main+0x160>)
  4012a0:	2003      	movs	r0, #3
  4012a2:	4b41      	ldr	r3, [pc, #260]	; (4013a8 <main+0x150>)
  4012a4:	4798      	blx	r3
	rc  = InitInvAGMBiases();
  4012a6:	4b45      	ldr	r3, [pc, #276]	; (4013bc <main+0x164>)
  4012a8:	4798      	blx	r3
  4012aa:	6378      	str	r0, [r7, #52]	; 0x34
	rc |= InitInvAGMAlgo();
  4012ac:	4b44      	ldr	r3, [pc, #272]	; (4013c0 <main+0x168>)
  4012ae:	4798      	blx	r3
  4012b0:	4602      	mov	r2, r0
  4012b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4012b4:	4313      	orrs	r3, r2
  4012b6:	637b      	str	r3, [r7, #52]	; 0x34
	check_rc(rc, "Error while initializing AGM algorithm");
  4012b8:	4942      	ldr	r1, [pc, #264]	; (4013c4 <main+0x16c>)
  4012ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4012bc:	4b38      	ldr	r3, [pc, #224]	; (4013a0 <main+0x148>)
  4012be:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "OK");
  4012c0:	493c      	ldr	r1, [pc, #240]	; (4013b4 <main+0x15c>)
  4012c2:	2003      	movs	r0, #3
  4012c4:	4b38      	ldr	r3, [pc, #224]	; (4013a8 <main+0x150>)
  4012c6:	4798      	blx	r3
	
	/* Configure ICM device */
	INV_MSG(INV_MSG_LEVEL_INFO, "Configuring ICM device...");
  4012c8:	493f      	ldr	r1, [pc, #252]	; (4013c8 <main+0x170>)
  4012ca:	2003      	movs	r0, #3
  4012cc:	4b36      	ldr	r3, [pc, #216]	; (4013a8 <main+0x150>)
  4012ce:	4798      	blx	r3
	rc = ConfigureInvDevice();
  4012d0:	4b3e      	ldr	r3, [pc, #248]	; (4013cc <main+0x174>)
  4012d2:	4798      	blx	r3
  4012d4:	6378      	str	r0, [r7, #52]	; 0x34
	check_rc(rc, "Error while configuring ICM device");
  4012d6:	493e      	ldr	r1, [pc, #248]	; (4013d0 <main+0x178>)
  4012d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4012da:	4b31      	ldr	r3, [pc, #196]	; (4013a0 <main+0x148>)
  4012dc:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "OK");
  4012de:	4935      	ldr	r1, [pc, #212]	; (4013b4 <main+0x15c>)
  4012e0:	2003      	movs	r0, #3
  4012e2:	4b31      	ldr	r3, [pc, #196]	; (4013a8 <main+0x150>)
  4012e4:	4798      	blx	r3
	}
	
#endif

	/* Welcome message*/
	INV_MSG(INV_MSG_LEVEL_INFO, "##################################################");
  4012e6:	493b      	ldr	r1, [pc, #236]	; (4013d4 <main+0x17c>)
  4012e8:	2003      	movs	r0, #3
  4012ea:	4b2f      	ldr	r3, [pc, #188]	; (4013a8 <main+0x150>)
  4012ec:	4798      	blx	r3

	INV_MSG(INV_MSG_LEVEL_INFO, "DK-42605 data streaming application");
  4012ee:	493a      	ldr	r1, [pc, #232]	; (4013d8 <main+0x180>)
  4012f0:	2003      	movs	r0, #3
  4012f2:	4b2d      	ldr	r3, [pc, #180]	; (4013a8 <main+0x150>)
  4012f4:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Slightly modified from the official example (example-algo)");
  4012f6:	4939      	ldr	r1, [pc, #228]	; (4013dc <main+0x184>)
  4012f8:	2003      	movs	r0, #3
  4012fa:	4b2b      	ldr	r3, [pc, #172]	; (4013a8 <main+0x150>)
  4012fc:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Jinsun Park (zzangjinsun@3secondz.com)");
  4012fe:	4938      	ldr	r1, [pc, #224]	; (4013e0 <main+0x188>)
  401300:	2003      	movs	r0, #3
  401302:	4b29      	ldr	r3, [pc, #164]	; (4013a8 <main+0x150>)
  401304:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  401306:	4937      	ldr	r1, [pc, #220]	; (4013e4 <main+0x18c>)
  401308:	2003      	movs	r0, #3
  40130a:	4b27      	ldr	r3, [pc, #156]	; (4013a8 <main+0x150>)
  40130c:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Current setup : ");
  40130e:	4936      	ldr	r1, [pc, #216]	; (4013e8 <main+0x190>)
  401310:	2003      	movs	r0, #3
  401312:	4b25      	ldr	r3, [pc, #148]	; (4013a8 <main+0x150>)
  401314:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Acc FSR : 2g");
  401316:	4935      	ldr	r1, [pc, #212]	; (4013ec <main+0x194>)
  401318:	2003      	movs	r0, #3
  40131a:	4b23      	ldr	r3, [pc, #140]	; (4013a8 <main+0x150>)
  40131c:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Acc ODR : 100Hz");
  40131e:	4934      	ldr	r1, [pc, #208]	; (4013f0 <main+0x198>)
  401320:	2003      	movs	r0, #3
  401322:	4b21      	ldr	r3, [pc, #132]	; (4013a8 <main+0x150>)
  401324:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Gyr FSR : 125dps");
  401326:	4933      	ldr	r1, [pc, #204]	; (4013f4 <main+0x19c>)
  401328:	2003      	movs	r0, #3
  40132a:	4b1f      	ldr	r3, [pc, #124]	; (4013a8 <main+0x150>)
  40132c:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Gyr ODR : 100Hz");
  40132e:	4932      	ldr	r1, [pc, #200]	; (4013f8 <main+0x1a0>)
  401330:	2003      	movs	r0, #3
  401332:	4b1d      	ldr	r3, [pc, #116]	; (4013a8 <main+0x150>)
  401334:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  401336:	492b      	ldr	r1, [pc, #172]	; (4013e4 <main+0x18c>)
  401338:	2003      	movs	r0, #3
  40133a:	4b1b      	ldr	r3, [pc, #108]	; (4013a8 <main+0x150>)
  40133c:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Output format : [timestamp AccX AccY AccZ Temp GyrX GyrY GyrZ");
  40133e:	492f      	ldr	r1, [pc, #188]	; (4013fc <main+0x1a4>)
  401340:	2003      	movs	r0, #3
  401342:	4b19      	ldr	r3, [pc, #100]	; (4013a8 <main+0x150>)
  401344:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  401346:	4927      	ldr	r1, [pc, #156]	; (4013e4 <main+0x18c>)
  401348:	2003      	movs	r0, #3
  40134a:	4b17      	ldr	r3, [pc, #92]	; (4013a8 <main+0x150>)
  40134c:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Last updated : 2020-05-28 15:57");
  40134e:	492c      	ldr	r1, [pc, #176]	; (401400 <main+0x1a8>)
  401350:	2003      	movs	r0, #3
  401352:	4b15      	ldr	r3, [pc, #84]	; (4013a8 <main+0x150>)
  401354:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  401356:	4923      	ldr	r1, [pc, #140]	; (4013e4 <main+0x18c>)
  401358:	2003      	movs	r0, #3
  40135a:	4b13      	ldr	r3, [pc, #76]	; (4013a8 <main+0x150>)
  40135c:	4798      	blx	r3

	/* Print reminder on how to use example */
	 //print_help();
	
	INV_MSG(INV_MSG_LEVEL_INFO, "Start processing");
  40135e:	4929      	ldr	r1, [pc, #164]	; (401404 <main+0x1ac>)
  401360:	2003      	movs	r0, #3
  401362:	4b11      	ldr	r3, [pc, #68]	; (4013a8 <main+0x150>)
  401364:	4798      	blx	r3
			}
		}
#endif

		/* Check Icm426xx IRQ */
		if (irq_from_device & TO_MASK(INV_GPIO_INT1)) {
  401366:	4b28      	ldr	r3, [pc, #160]	; (401408 <main+0x1b0>)
  401368:	681b      	ldr	r3, [r3, #0]
  40136a:	f003 0301 	and.w	r3, r3, #1
  40136e:	2b00      	cmp	r3, #0
  401370:	d0f9      	beq.n	401366 <main+0x10e>
			
			rc = GetDataFromInvDevice();
  401372:	4b26      	ldr	r3, [pc, #152]	; (40140c <main+0x1b4>)
  401374:	4798      	blx	r3
  401376:	6378      	str	r0, [r7, #52]	; 0x34
			check_rc(rc, "error while getting data from Icm426xx");
  401378:	4925      	ldr	r1, [pc, #148]	; (401410 <main+0x1b8>)
  40137a:	6b78      	ldr	r0, [r7, #52]	; 0x34
  40137c:	4b08      	ldr	r3, [pc, #32]	; (4013a0 <main+0x148>)
  40137e:	4798      	blx	r3

			inv_disable_irq();
  401380:	4b24      	ldr	r3, [pc, #144]	; (401414 <main+0x1bc>)
  401382:	4798      	blx	r3
			irq_from_device &= ~TO_MASK(INV_GPIO_INT1);
  401384:	4b20      	ldr	r3, [pc, #128]	; (401408 <main+0x1b0>)
  401386:	681b      	ldr	r3, [r3, #0]
  401388:	f023 0301 	bic.w	r3, r3, #1
  40138c:	4a1e      	ldr	r2, [pc, #120]	; (401408 <main+0x1b0>)
  40138e:	6013      	str	r3, [r2, #0]
			inv_enable_irq();
  401390:	4b21      	ldr	r3, [pc, #132]	; (401418 <main+0x1c0>)
  401392:	4798      	blx	r3
		if (irq_from_device & TO_MASK(INV_GPIO_INT1)) {
  401394:	e7e7      	b.n	401366 <main+0x10e>
  401396:	bf00      	nop
  401398:	0040141d 	.word	0x0040141d
  40139c:	00413158 	.word	0x00413158
  4013a0:	0040155d 	.word	0x0040155d
  4013a4:	00413174 	.word	0x00413174
  4013a8:	00407925 	.word	0x00407925
  4013ac:	00400345 	.word	0x00400345
  4013b0:	00413190 	.word	0x00413190
  4013b4:	004131b4 	.word	0x004131b4
  4013b8:	004131b8 	.word	0x004131b8
  4013bc:	004004e1 	.word	0x004004e1
  4013c0:	004006f5 	.word	0x004006f5
  4013c4:	004131d4 	.word	0x004131d4
  4013c8:	004131fc 	.word	0x004131fc
  4013cc:	004003fd 	.word	0x004003fd
  4013d0:	00413218 	.word	0x00413218
  4013d4:	0041323c 	.word	0x0041323c
  4013d8:	00413270 	.word	0x00413270
  4013dc:	00413294 	.word	0x00413294
  4013e0:	004132d0 	.word	0x004132d0
  4013e4:	004132f8 	.word	0x004132f8
  4013e8:	004132fc 	.word	0x004132fc
  4013ec:	00413310 	.word	0x00413310
  4013f0:	00413320 	.word	0x00413320
  4013f4:	00413334 	.word	0x00413334
  4013f8:	00413348 	.word	0x00413348
  4013fc:	0041335c 	.word	0x0041335c
  401400:	0041339c 	.word	0x0041339c
  401404:	004133bc 	.word	0x004133bc
  401408:	2000396c 	.word	0x2000396c
  40140c:	004007b9 	.word	0x004007b9
  401410:	004133d0 	.word	0x004133d0
  401414:	00404949 	.word	0x00404949
  401418:	00404971 	.word	0x00404971

0040141c <SetupMCUHardware>:
 *   - a microsecond timer used to periodically starts magneto data acquisition
 *   - a serial link to communicate from MCU to Icm426xx
 *   - a serial link to communicate from MCU to Akm09915
 */
static int SetupMCUHardware(struct inv_icm426xx_serif * icm_serif, struct inv_ak0991x_serif * akm_serif)
{
  40141c:	b580      	push	{r7, lr}
  40141e:	b084      	sub	sp, #16
  401420:	af00      	add	r7, sp, #0
  401422:	6078      	str	r0, [r7, #4]
  401424:	6039      	str	r1, [r7, #0]
	int rc = 0;
  401426:	2300      	movs	r3, #0
  401428:	60fb      	str	r3, [r7, #12]

	inv_board_hal_init();
  40142a:	4b1f      	ldr	r3, [pc, #124]	; (4014a8 <SetupMCUHardware+0x8c>)
  40142c:	4798      	blx	r3

	/* configure UART */
	config_uart(LOG_UART_ID);
  40142e:	2000      	movs	r0, #0
  401430:	4b1e      	ldr	r3, [pc, #120]	; (4014ac <SetupMCUHardware+0x90>)
  401432:	4798      	blx	r3

	/* Setup message facility to see internal traces from FW */
	INV_MSG_SETUP(MSG_LEVEL, msg_printer);
  401434:	491e      	ldr	r1, [pc, #120]	; (4014b0 <SetupMCUHardware+0x94>)
  401436:	2003      	movs	r0, #3
  401438:	4b1e      	ldr	r3, [pc, #120]	; (4014b4 <SetupMCUHardware+0x98>)
  40143a:	4798      	blx	r3
	 * This pin is connected to Icm426xx INT1 output and thus will receive interrupts 
	 * enabled on INT1 from the device.
	 * A callback function is also passed that will be executed each time an interrupt
	 * fires.
	*/
	inv_gpio_sensor_irq_init(INV_GPIO_INT1, ext_interrupt_inv_cb, 0);
  40143c:	2200      	movs	r2, #0
  40143e:	491e      	ldr	r1, [pc, #120]	; (4014b8 <SetupMCUHardware+0x9c>)
  401440:	2000      	movs	r0, #0
  401442:	4b1e      	ldr	r3, [pc, #120]	; (4014bc <SetupMCUHardware+0xa0>)
  401444:	4798      	blx	r3
	
	/* Init timer peripheral for delay */
	rc |= inv_delay_init(DELAY_TIMER);
  401446:	2001      	movs	r0, #1
  401448:	4b1d      	ldr	r3, [pc, #116]	; (4014c0 <SetupMCUHardware+0xa4>)
  40144a:	4798      	blx	r3
  40144c:	4602      	mov	r2, r0
  40144e:	68fb      	ldr	r3, [r7, #12]
  401450:	4313      	orrs	r3, r2
  401452:	60fb      	str	r3, [r7, #12]
	rtc_timer_init(NULL);
	/* Output 32kHz SLCK to PA17, it is up to user to connect it or not at board level to have CLKIN capability */
	rc |= inv_gpio_output_clk_on_pin(INV_GPIO_CLKIN);
#else
	/* Configure the timer for the timebase */
	rc |= inv_timer_configure_timebase(1000000);
  401454:	481b      	ldr	r0, [pc, #108]	; (4014c4 <SetupMCUHardware+0xa8>)
  401456:	4b1c      	ldr	r3, [pc, #112]	; (4014c8 <SetupMCUHardware+0xac>)
  401458:	4798      	blx	r3
  40145a:	4602      	mov	r2, r0
  40145c:	68fb      	ldr	r3, [r7, #12]
  40145e:	4313      	orrs	r3, r2
  401460:	60fb      	str	r3, [r7, #12]
	inv_timer_enable(TIMEBASE_TIMER);
  401462:	2000      	movs	r0, #0
  401464:	4b19      	ldr	r3, [pc, #100]	; (4014cc <SetupMCUHardware+0xb0>)
  401466:	4798      	blx	r3
#endif

	/* Initialize serial inteface between MCU and Icm426xx */
	icm_serif->context   = 0;        /* no need */
  401468:	687b      	ldr	r3, [r7, #4]
  40146a:	2200      	movs	r2, #0
  40146c:	601a      	str	r2, [r3, #0]
	icm_serif->read_reg  = inv_io_hal_read_reg;
  40146e:	687b      	ldr	r3, [r7, #4]
  401470:	4a17      	ldr	r2, [pc, #92]	; (4014d0 <SetupMCUHardware+0xb4>)
  401472:	605a      	str	r2, [r3, #4]
	icm_serif->write_reg = inv_io_hal_write_reg;
  401474:	687b      	ldr	r3, [r7, #4]
  401476:	4a17      	ldr	r2, [pc, #92]	; (4014d4 <SetupMCUHardware+0xb8>)
  401478:	609a      	str	r2, [r3, #8]
	icm_serif->max_read  = 1024*32;  /* maximum number of bytes allowed per serial read */
  40147a:	687b      	ldr	r3, [r7, #4]
  40147c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401480:	611a      	str	r2, [r3, #16]
	icm_serif->max_write = 1024*32;  /* maximum number of bytes allowed per serial write */
  401482:	687b      	ldr	r3, [r7, #4]
  401484:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401488:	615a      	str	r2, [r3, #20]
	icm_serif->serif_type = SERIF_TYPE;
  40148a:	687b      	ldr	r3, [r7, #4]
  40148c:	2201      	movs	r2, #1
  40148e:	761a      	strb	r2, [r3, #24]
	rc |= inv_io_hal_init(icm_serif);
  401490:	6878      	ldr	r0, [r7, #4]
  401492:	4b11      	ldr	r3, [pc, #68]	; (4014d8 <SetupMCUHardware+0xbc>)
  401494:	4798      	blx	r3
  401496:	4602      	mov	r2, r0
  401498:	68fb      	ldr	r3, [r7, #12]
  40149a:	4313      	orrs	r3, r2
  40149c:	60fb      	str	r3, [r7, #12]
	rc |= akm_io_hal_init(akm_serif);
#else
	(void)akm_serif;
#endif

	return rc;
  40149e:	68fb      	ldr	r3, [r7, #12]
}
  4014a0:	4618      	mov	r0, r3
  4014a2:	3710      	adds	r7, #16
  4014a4:	46bd      	mov	sp, r7
  4014a6:	bd80      	pop	{r7, pc}
  4014a8:	0040490d 	.word	0x0040490d
  4014ac:	004001b5 	.word	0x004001b5
  4014b0:	00401599 	.word	0x00401599
  4014b4:	004078e1 	.word	0x004078e1
  4014b8:	004014dd 	.word	0x004014dd
  4014bc:	00404d19 	.word	0x00404d19
  4014c0:	00404a31 	.word	0x00404a31
  4014c4:	000f4240 	.word	0x000f4240
  4014c8:	004061c5 	.word	0x004061c5
  4014cc:	00406145 	.word	0x00406145
  4014d0:	00400225 	.word	0x00400225
  4014d4:	0040028d 	.word	0x0040028d
  4014d8:	004001e5 	.word	0x004001e5

004014dc <ext_interrupt_inv_cb>:
 * This function get a timestamp and store it in a dedicated timestamp buffer.
 * Note that this function is executed in an interrupt handler and thus no protection
 * is implemented for shared variable timestamp_buffer.
 */
void ext_interrupt_inv_cb(void * context, unsigned int_num)
{
  4014dc:	b590      	push	{r4, r7, lr}
  4014de:	b087      	sub	sp, #28
  4014e0:	af00      	add	r7, sp, #0
  4014e2:	6078      	str	r0, [r7, #4]
  4014e4:	6039      	str	r1, [r7, #0]
#if USE_CLK_IN
	/* Read timestamp from the RTC derived from SLCK since CLKIN is used */
	uint64_t timestamp = rtc_timer_get_time_us();
#else /* ICM42686 */
	/* Read timestamp from the timer */
	uint64_t timestamp = inv_timer_get_counter(TIMEBASE_TIMER);
  4014e6:	2000      	movs	r0, #0
  4014e8:	4b18      	ldr	r3, [pc, #96]	; (40154c <ext_interrupt_inv_cb+0x70>)
  4014ea:	4798      	blx	r3
  4014ec:	4603      	mov	r3, r0
  4014ee:	460c      	mov	r4, r1
  4014f0:	e9c7 3402 	strd	r3, r4, [r7, #8]
#endif

	if (int_num == INV_GPIO_INT1) {
  4014f4:	683b      	ldr	r3, [r7, #0]
  4014f6:	2b00      	cmp	r3, #0
  4014f8:	d11a      	bne.n	401530 <ext_interrupt_inv_cb+0x54>
		if (!RINGBUFFER_VOLATILE_FULL(&timestamp_buffer_icm))
  4014fa:	4815      	ldr	r0, [pc, #84]	; (401550 <ext_interrupt_inv_cb+0x74>)
  4014fc:	4b15      	ldr	r3, [pc, #84]	; (401554 <ext_interrupt_inv_cb+0x78>)
  4014fe:	4798      	blx	r3
  401500:	4603      	mov	r3, r0
  401502:	2b40      	cmp	r3, #64	; 0x40
  401504:	d014      	beq.n	401530 <ext_interrupt_inv_cb+0x54>
			RINGBUFFER_VOLATILE_PUSH(&timestamp_buffer_icm, &timestamp);
  401506:	4b12      	ldr	r3, [pc, #72]	; (401550 <ext_interrupt_inv_cb+0x74>)
  401508:	885b      	ldrh	r3, [r3, #2]
  40150a:	82fb      	strh	r3, [r7, #22]
  40150c:	8afb      	ldrh	r3, [r7, #22]
  40150e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  401512:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  401516:	490e      	ldr	r1, [pc, #56]	; (401550 <ext_interrupt_inv_cb+0x74>)
  401518:	3201      	adds	r2, #1
  40151a:	00d2      	lsls	r2, r2, #3
  40151c:	440a      	add	r2, r1
  40151e:	e9c2 3400 	strd	r3, r4, [r2]
  401522:	4b0b      	ldr	r3, [pc, #44]	; (401550 <ext_interrupt_inv_cb+0x74>)
  401524:	885b      	ldrh	r3, [r3, #2]
  401526:	b29b      	uxth	r3, r3
  401528:	3301      	adds	r3, #1
  40152a:	b29a      	uxth	r2, r3
  40152c:	4b08      	ldr	r3, [pc, #32]	; (401550 <ext_interrupt_inv_cb+0x74>)
  40152e:	805a      	strh	r2, [r3, #2]
	}

	irq_from_device |= TO_MASK(int_num);
  401530:	2201      	movs	r2, #1
  401532:	683b      	ldr	r3, [r7, #0]
  401534:	fa02 f303 	lsl.w	r3, r2, r3
  401538:	4a07      	ldr	r2, [pc, #28]	; (401558 <ext_interrupt_inv_cb+0x7c>)
  40153a:	6812      	ldr	r2, [r2, #0]
  40153c:	4313      	orrs	r3, r2
  40153e:	461a      	mov	r2, r3
  401540:	4b05      	ldr	r3, [pc, #20]	; (401558 <ext_interrupt_inv_cb+0x7c>)
  401542:	601a      	str	r2, [r3, #0]
}
  401544:	bf00      	nop
  401546:	371c      	adds	r7, #28
  401548:	46bd      	mov	sp, r7
  40154a:	bd90      	pop	{r4, r7, pc}
  40154c:	004063d1 	.word	0x004063d1
  401550:	200048d0 	.word	0x200048d0
  401554:	00401235 	.word	0x00401235
  401558:	2000396c 	.word	0x2000396c

0040155c <check_rc>:

/*
 * Helper function to check RC value and block programm execution
 */
void check_rc(int rc, const char * msg_context)
{
  40155c:	b590      	push	{r4, r7, lr}
  40155e:	b085      	sub	sp, #20
  401560:	af02      	add	r7, sp, #8
  401562:	6078      	str	r0, [r7, #4]
  401564:	6039      	str	r1, [r7, #0]
	if (rc < 0) {
  401566:	687b      	ldr	r3, [r7, #4]
  401568:	2b00      	cmp	r3, #0
  40156a:	da0b      	bge.n	401584 <check_rc+0x28>
		INV_MSG(INV_MSG_LEVEL_ERROR, "%s: error %d (%s)\r\n", msg_context, rc, inv_error_str(rc));
  40156c:	6878      	ldr	r0, [r7, #4]
  40156e:	4b07      	ldr	r3, [pc, #28]	; (40158c <check_rc+0x30>)
  401570:	4798      	blx	r3
  401572:	4603      	mov	r3, r0
  401574:	9300      	str	r3, [sp, #0]
  401576:	687b      	ldr	r3, [r7, #4]
  401578:	683a      	ldr	r2, [r7, #0]
  40157a:	4905      	ldr	r1, [pc, #20]	; (401590 <check_rc+0x34>)
  40157c:	2001      	movs	r0, #1
  40157e:	4c05      	ldr	r4, [pc, #20]	; (401594 <check_rc+0x38>)
  401580:	47a0      	blx	r4
		while(1);
  401582:	e7fe      	b.n	401582 <check_rc+0x26>
	}
}
  401584:	bf00      	nop
  401586:	370c      	adds	r7, #12
  401588:	46bd      	mov	sp, r7
  40158a:	bd90      	pop	{r4, r7, pc}
  40158c:	004077f1 	.word	0x004077f1
  401590:	00413630 	.word	0x00413630
  401594:	00407925 	.word	0x00407925

00401598 <msg_printer>:

/*
 * Printer function for message facility
 */
void msg_printer(int level, const char * str, va_list ap)
{
  401598:	b590      	push	{r4, r7, lr}
  40159a:	b087      	sub	sp, #28
  40159c:	af00      	add	r7, sp, #0
  40159e:	60f8      	str	r0, [r7, #12]
  4015a0:	60b9      	str	r1, [r7, #8]
  4015a2:	607a      	str	r2, [r7, #4]
	static char out_str[256]; /* static to limit stack usage */
	unsigned idx = 0;
  4015a4:	2300      	movs	r3, #0
  4015a6:	617b      	str	r3, [r7, #20]

	//idx += snprintf(&out_str[idx], sizeof(out_str) - idx, "%s", s[level]);
	//if (idx >= (sizeof(out_str)))
		//return;

	idx += vsnprintf(&out_str[idx], sizeof(out_str) - idx, str, ap);
  4015a8:	697b      	ldr	r3, [r7, #20]
  4015aa:	4a18      	ldr	r2, [pc, #96]	; (40160c <msg_printer+0x74>)
  4015ac:	1898      	adds	r0, r3, r2
  4015ae:	697b      	ldr	r3, [r7, #20]
  4015b0:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
  4015b4:	687b      	ldr	r3, [r7, #4]
  4015b6:	68ba      	ldr	r2, [r7, #8]
  4015b8:	4c15      	ldr	r4, [pc, #84]	; (401610 <msg_printer+0x78>)
  4015ba:	47a0      	blx	r4
  4015bc:	4603      	mov	r3, r0
  4015be:	461a      	mov	r2, r3
  4015c0:	697b      	ldr	r3, [r7, #20]
  4015c2:	4413      	add	r3, r2
  4015c4:	617b      	str	r3, [r7, #20]
	if (idx >= (sizeof(out_str)))
  4015c6:	697b      	ldr	r3, [r7, #20]
  4015c8:	2bff      	cmp	r3, #255	; 0xff
  4015ca:	d819      	bhi.n	401600 <msg_printer+0x68>
		return;
	idx += snprintf(&out_str[idx], sizeof(out_str) - idx, "\r\n");
  4015cc:	697b      	ldr	r3, [r7, #20]
  4015ce:	4a0f      	ldr	r2, [pc, #60]	; (40160c <msg_printer+0x74>)
  4015d0:	1898      	adds	r0, r3, r2
  4015d2:	697b      	ldr	r3, [r7, #20]
  4015d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
  4015d8:	4a0e      	ldr	r2, [pc, #56]	; (401614 <msg_printer+0x7c>)
  4015da:	4619      	mov	r1, r3
  4015dc:	4b0e      	ldr	r3, [pc, #56]	; (401618 <msg_printer+0x80>)
  4015de:	4798      	blx	r3
  4015e0:	4603      	mov	r3, r0
  4015e2:	461a      	mov	r2, r3
  4015e4:	697b      	ldr	r3, [r7, #20]
  4015e6:	4413      	add	r3, r2
  4015e8:	617b      	str	r3, [r7, #20]
	if (idx >= (sizeof(out_str)))
  4015ea:	697b      	ldr	r3, [r7, #20]
  4015ec:	2bff      	cmp	r3, #255	; 0xff
  4015ee:	d809      	bhi.n	401604 <msg_printer+0x6c>
		return;

	inv_uart_mngr_puts(LOG_UART_ID, out_str, idx);
  4015f0:	697b      	ldr	r3, [r7, #20]
  4015f2:	b29b      	uxth	r3, r3
  4015f4:	461a      	mov	r2, r3
  4015f6:	4905      	ldr	r1, [pc, #20]	; (40160c <msg_printer+0x74>)
  4015f8:	2000      	movs	r0, #0
  4015fa:	4b08      	ldr	r3, [pc, #32]	; (40161c <msg_printer+0x84>)
  4015fc:	4798      	blx	r3
  4015fe:	e002      	b.n	401606 <msg_printer+0x6e>
		return;
  401600:	bf00      	nop
  401602:	e000      	b.n	401606 <msg_printer+0x6e>
		return;
  401604:	bf00      	nop
}
  401606:	371c      	adds	r7, #28
  401608:	46bd      	mov	sp, r7
  40160a:	bd90      	pop	{r4, r7, pc}
  40160c:	20003970 	.word	0x20003970
  401610:	004114e9 	.word	0x004114e9
  401614:	00413644 	.word	0x00413644
  401618:	0040fe61 	.word	0x0040fe61
  40161c:	004076c5 	.word	0x004076c5

00401620 <inv_icm426xx_get_time_us>:

/*
 * Icm426xx driver needs to get time in us. Let's give its implementation here.
 */
uint64_t inv_icm426xx_get_time_us(void)
{
  401620:	b598      	push	{r3, r4, r7, lr}
  401622:	af00      	add	r7, sp, #0
#if USE_CLK_IN
	return rtc_timer_get_time_us();
#else
	return inv_timer_get_counter(TIMEBASE_TIMER);
  401624:	2000      	movs	r0, #0
  401626:	4b03      	ldr	r3, [pc, #12]	; (401634 <inv_icm426xx_get_time_us+0x14>)
  401628:	4798      	blx	r3
  40162a:	4603      	mov	r3, r0
  40162c:	460c      	mov	r4, r1
#endif
}
  40162e:	4618      	mov	r0, r3
  401630:	4621      	mov	r1, r4
  401632:	bd98      	pop	{r3, r4, r7, pc}
  401634:	004063d1 	.word	0x004063d1

00401638 <inv_helper_disable_irq>:
 * Clock calibration module needs to disable IRQ. Thus inv_helper_disable_irq is
 * defined as extern symbol in clock calibration module. Let's give its implementation
 * here.
 */
void inv_helper_disable_irq(void)
{
  401638:	b580      	push	{r7, lr}
  40163a:	af00      	add	r7, sp, #0
	inv_disable_irq();
  40163c:	4b01      	ldr	r3, [pc, #4]	; (401644 <inv_helper_disable_irq+0xc>)
  40163e:	4798      	blx	r3
}
  401640:	bf00      	nop
  401642:	bd80      	pop	{r7, pc}
  401644:	00404949 	.word	0x00404949

00401648 <inv_helper_enable_irq>:
 * Clock calibration module needs to enable IRQ. Thus inv_helper_enable_irq is
 * defined as extern symbol in clock calibration module. Let's give its implementation
 * here.
 */
void inv_helper_enable_irq(void)
{
  401648:	b580      	push	{r7, lr}
  40164a:	af00      	add	r7, sp, #0
	inv_enable_irq();
  40164c:	4b01      	ldr	r3, [pc, #4]	; (401654 <inv_helper_enable_irq+0xc>)
  40164e:	4798      	blx	r3
}
  401650:	bf00      	nop
  401652:	bd80      	pop	{r7, pc}
  401654:	00404971 	.word	0x00404971

00401658 <inv_icm426xx_sleep_us>:
/*
 * Icm426xx driver needs a sleep feature from external device. Thus inv_icm426xx_sleep_us
 * is defined as extern symbol in driver. Let's give its implementation here.
 */
void inv_icm426xx_sleep_us(uint32_t us)
{
  401658:	b580      	push	{r7, lr}
  40165a:	b082      	sub	sp, #8
  40165c:	af00      	add	r7, sp, #0
  40165e:	6078      	str	r0, [r7, #4]
	inv_delay_us(us);
  401660:	6878      	ldr	r0, [r7, #4]
  401662:	4b03      	ldr	r3, [pc, #12]	; (401670 <inv_icm426xx_sleep_us+0x18>)
  401664:	4798      	blx	r3
}
  401666:	bf00      	nop
  401668:	3708      	adds	r7, #8
  40166a:	46bd      	mov	sp, r7
  40166c:	bd80      	pop	{r7, pc}
  40166e:	bf00      	nop
  401670:	00404a5d 	.word	0x00404a5d

00401674 <inv_icm426xx_set_reg_bank>:
static int inv_icm426xx_init_hardware_from_ui(struct inv_icm426xx * s);
static int inv_icm426xx_is_wu_osc_active(struct inv_icm426xx * s);
static void inv_icm426xx_format_data(const uint8_t endian, const uint8_t *in, uint16_t *out);

int inv_icm426xx_set_reg_bank(struct inv_icm426xx * s, uint8_t bank)
{
  401674:	b590      	push	{r4, r7, lr}
  401676:	b083      	sub	sp, #12
  401678:	af00      	add	r7, sp, #0
  40167a:	6078      	str	r0, [r7, #4]
  40167c:	460b      	mov	r3, r1
  40167e:	70fb      	strb	r3, [r7, #3]
	return inv_icm426xx_write_reg(s, MPUREG_REG_BANK_SEL, 1, &bank);
  401680:	1cfb      	adds	r3, r7, #3
  401682:	2201      	movs	r2, #1
  401684:	2176      	movs	r1, #118	; 0x76
  401686:	6878      	ldr	r0, [r7, #4]
  401688:	4c03      	ldr	r4, [pc, #12]	; (401698 <inv_icm426xx_set_reg_bank+0x24>)
  40168a:	47a0      	blx	r4
  40168c:	4603      	mov	r3, r0
}
  40168e:	4618      	mov	r0, r3
  401690:	370c      	adds	r7, #12
  401692:	46bd      	mov	sp, r7
  401694:	bd90      	pop	{r4, r7, pc}
  401696:	bf00      	nop
  401698:	004039fd 	.word	0x004039fd

0040169c <inv_icm426xx_init>:

int inv_icm426xx_init(struct inv_icm426xx * s, struct inv_icm426xx_serif * serif, void (*sensor_event_cb)(inv_icm426xx_sensor_event_t * event))
{
  40169c:	b5b0      	push	{r4, r5, r7, lr}
  40169e:	b086      	sub	sp, #24
  4016a0:	af00      	add	r7, sp, #0
  4016a2:	60f8      	str	r0, [r7, #12]
  4016a4:	60b9      	str	r1, [r7, #8]
  4016a6:	607a      	str	r2, [r7, #4]
	int status = 0;
  4016a8:	2300      	movs	r3, #0
  4016aa:	617b      	str	r3, [r7, #20]

	memset(s, 0, sizeof(*s));
  4016ac:	f44f 6208 	mov.w	r2, #2176	; 0x880
  4016b0:	2100      	movs	r1, #0
  4016b2:	68f8      	ldr	r0, [r7, #12]
  4016b4:	4b22      	ldr	r3, [pc, #136]	; (401740 <inv_icm426xx_init+0xa4>)
  4016b6:	4798      	blx	r3
	
	s->transport.serif = *serif;
  4016b8:	68fa      	ldr	r2, [r7, #12]
  4016ba:	68bb      	ldr	r3, [r7, #8]
  4016bc:	4614      	mov	r4, r2
  4016be:	461d      	mov	r5, r3
  4016c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4016c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4016c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4016c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	/* Wait some time for ICM to be properly supplied */
	inv_icm426xx_sleep_us(3000);
  4016cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4016d0:	4b1c      	ldr	r3, [pc, #112]	; (401744 <inv_icm426xx_init+0xa8>)
  4016d2:	4798      	blx	r3
	
	if((status |= inv_icm426xx_configure_serial_interface(s)) != 0 )
  4016d4:	68f8      	ldr	r0, [r7, #12]
  4016d6:	4b1c      	ldr	r3, [pc, #112]	; (401748 <inv_icm426xx_init+0xac>)
  4016d8:	4798      	blx	r3
  4016da:	4602      	mov	r2, r0
  4016dc:	697b      	ldr	r3, [r7, #20]
  4016de:	4313      	orrs	r3, r2
  4016e0:	617b      	str	r3, [r7, #20]
  4016e2:	697b      	ldr	r3, [r7, #20]
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	d001      	beq.n	4016ec <inv_icm426xx_init+0x50>
		return status;
  4016e8:	697b      	ldr	r3, [r7, #20]
  4016ea:	e025      	b.n	401738 <inv_icm426xx_init+0x9c>

	/* Register the callback to be executed each time inv_icm426xx_get_data_from_fifo extracts 
	 * a packet from fifo or inv_icm426xx_get_data_from_registers read data 
	 */
	s->sensor_event_cb = sensor_event_cb;
  4016ec:	68fb      	ldr	r3, [r7, #12]
  4016ee:	687a      	ldr	r2, [r7, #4]
  4016f0:	625a      	str	r2, [r3, #36]	; 0x24
	
	/* initialize hardware */
	status |= inv_icm426xx_init_hardware_from_ui(s);
  4016f2:	68f8      	ldr	r0, [r7, #12]
  4016f4:	4b15      	ldr	r3, [pc, #84]	; (40174c <inv_icm426xx_init+0xb0>)
  4016f6:	4798      	blx	r3
  4016f8:	4602      	mov	r2, r0
  4016fa:	697b      	ldr	r3, [r7, #20]
  4016fc:	4313      	orrs	r3, r2
  4016fe:	617b      	str	r3, [r7, #20]
		
	/* First data are noisy after enabling sensor
	 * This variable keeps track of gyro start time. Set to UINT32_MAX at init 
	 */
	s->gyro_start_time_us = UINT32_MAX;
  401700:	68fb      	ldr	r3, [r7, #12]
  401702:	f603 0258 	addw	r2, r3, #2136	; 0x858
  401706:	f04f 33ff 	mov.w	r3, #4294967295
  40170a:	f04f 0400 	mov.w	r4, #0
  40170e:	e9c2 3400 	strd	r3, r4, [r2]
	/* First data are noisy after enabling sensor
	 * This variable keeps track of accel start time. Set to UINT32_MAX at init 
	 */
	s->accel_start_time_us = UINT32_MAX;
  401712:	68fb      	ldr	r3, [r7, #12]
  401714:	f503 6206 	add.w	r2, r3, #2144	; 0x860
  401718:	f04f 33ff 	mov.w	r3, #4294967295
  40171c:	f04f 0400 	mov.w	r4, #0
  401720:	e9c2 3400 	strd	r3, r4, [r2]

	/* Gyro power-off to power-on transition can cause ring down issue
	 * This variable keeps track of timestamp when gyro is power off. Set to UINT32_MAX at init
	 */
	s->gyro_power_off_tmst = UINT32_MAX;
  401724:	68fb      	ldr	r3, [r7, #12]
  401726:	f603 0278 	addw	r2, r3, #2168	; 0x878
  40172a:	f04f 33ff 	mov.w	r3, #4294967295
  40172e:	f04f 0400 	mov.w	r4, #0
  401732:	e9c2 3400 	strd	r3, r4, [r2]

	return status;
  401736:	697b      	ldr	r3, [r7, #20]
}
  401738:	4618      	mov	r0, r3
  40173a:	3718      	adds	r7, #24
  40173c:	46bd      	mov	sp, r7
  40173e:	bdb0      	pop	{r4, r5, r7, pc}
  401740:	0040fa3d 	.word	0x0040fa3d
  401744:	00401659 	.word	0x00401659
  401748:	00403339 	.word	0x00403339
  40174c:	00403431 	.word	0x00403431

00401750 <inv_icm426xx_device_reset>:

int inv_icm426xx_device_reset(struct inv_icm426xx * s)
{
  401750:	b590      	push	{r4, r7, lr}
  401752:	b085      	sub	sp, #20
  401754:	af00      	add	r7, sp, #0
  401756:	6078      	str	r0, [r7, #4]
	int status = INV_ERROR_SUCCESS;
  401758:	2300      	movs	r3, #0
  40175a:	60fb      	str	r3, [r7, #12]
	uint8_t data;
	uint8_t intf_cfg4_reg, intf_cfg6_reg;

	/* Set memory bank 1 */
	status |= inv_icm426xx_set_reg_bank(s, 1);
  40175c:	2101      	movs	r1, #1
  40175e:	6878      	ldr	r0, [r7, #4]
  401760:	4b64      	ldr	r3, [pc, #400]	; (4018f4 <inv_icm426xx_device_reset+0x1a4>)
  401762:	4798      	blx	r3
  401764:	4602      	mov	r2, r0
  401766:	68fb      	ldr	r3, [r7, #12]
  401768:	4313      	orrs	r3, r2
  40176a:	60fb      	str	r3, [r7, #12]
	/* save registers necessary to perform soft reset while still keeping communication link alive */
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG4_B1, 1, &intf_cfg4_reg); // AUX SPI and AP SPI fields
  40176c:	f107 030a 	add.w	r3, r7, #10
  401770:	2201      	movs	r2, #1
  401772:	217a      	movs	r1, #122	; 0x7a
  401774:	6878      	ldr	r0, [r7, #4]
  401776:	4c60      	ldr	r4, [pc, #384]	; (4018f8 <inv_icm426xx_device_reset+0x1a8>)
  401778:	47a0      	blx	r4
  40177a:	4602      	mov	r2, r0
  40177c:	68fb      	ldr	r3, [r7, #12]
  40177e:	4313      	orrs	r3, r2
  401780:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &intf_cfg6_reg);
  401782:	f107 0309 	add.w	r3, r7, #9
  401786:	2201      	movs	r2, #1
  401788:	217c      	movs	r1, #124	; 0x7c
  40178a:	6878      	ldr	r0, [r7, #4]
  40178c:	4c5a      	ldr	r4, [pc, #360]	; (4018f8 <inv_icm426xx_device_reset+0x1a8>)
  40178e:	47a0      	blx	r4
  401790:	4602      	mov	r2, r0
  401792:	68fb      	ldr	r3, [r7, #12]
  401794:	4313      	orrs	r3, r2
  401796:	60fb      	str	r3, [r7, #12]
	/* Set memory bank 0 */
	status |= inv_icm426xx_set_reg_bank(s, 0);
  401798:	2100      	movs	r1, #0
  40179a:	6878      	ldr	r0, [r7, #4]
  40179c:	4b55      	ldr	r3, [pc, #340]	; (4018f4 <inv_icm426xx_device_reset+0x1a4>)
  40179e:	4798      	blx	r3
  4017a0:	4602      	mov	r2, r0
  4017a2:	68fb      	ldr	r3, [r7, #12]
  4017a4:	4313      	orrs	r3, r2
  4017a6:	60fb      	str	r3, [r7, #12]
	
	/* Reset the internal registers and restores the default settings.
	 * The bit automatically clears to 0 once the reset is done.
	 * Since soft-reset will trigger OTP reload, SPI mode (bit4) does not need saving
	 */
	data = ICM426XX_DEVICE_CONFIG_RESET_EN;
  4017a8:	2301      	movs	r3, #1
  4017aa:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_DEVICE_CONFIG, 1, &data);
  4017ac:	f107 030b 	add.w	r3, r7, #11
  4017b0:	2201      	movs	r2, #1
  4017b2:	2111      	movs	r1, #17
  4017b4:	6878      	ldr	r0, [r7, #4]
  4017b6:	4c51      	ldr	r4, [pc, #324]	; (4018fc <inv_icm426xx_device_reset+0x1ac>)
  4017b8:	47a0      	blx	r4
  4017ba:	4602      	mov	r2, r0
  4017bc:	68fb      	ldr	r3, [r7, #12]
  4017be:	4313      	orrs	r3, r2
  4017c0:	60fb      	str	r3, [r7, #12]
	if(status)
  4017c2:	68fb      	ldr	r3, [r7, #12]
  4017c4:	2b00      	cmp	r3, #0
  4017c6:	d001      	beq.n	4017cc <inv_icm426xx_device_reset+0x7c>
		return status;
  4017c8:	68fb      	ldr	r3, [r7, #12]
  4017ca:	e08e      	b.n	4018ea <inv_icm426xx_device_reset+0x19a>

	/* Wait 1000us for soft reset to be effective before trying to perform any further read */
	inv_icm426xx_sleep_us(1000);
  4017cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4017d0:	4b4b      	ldr	r3, [pc, #300]	; (401900 <inv_icm426xx_device_reset+0x1b0>)
  4017d2:	4798      	blx	r3

	status |= inv_icm426xx_set_reg_bank(s, 1);
  4017d4:	2101      	movs	r1, #1
  4017d6:	6878      	ldr	r0, [r7, #4]
  4017d8:	4b46      	ldr	r3, [pc, #280]	; (4018f4 <inv_icm426xx_device_reset+0x1a4>)
  4017da:	4798      	blx	r3
  4017dc:	4602      	mov	r2, r0
  4017de:	68fb      	ldr	r3, [r7, #12]
  4017e0:	4313      	orrs	r3, r2
  4017e2:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG4_B1, 1, &intf_cfg4_reg);
  4017e4:	f107 030a 	add.w	r3, r7, #10
  4017e8:	2201      	movs	r2, #1
  4017ea:	217a      	movs	r1, #122	; 0x7a
  4017ec:	6878      	ldr	r0, [r7, #4]
  4017ee:	4c43      	ldr	r4, [pc, #268]	; (4018fc <inv_icm426xx_device_reset+0x1ac>)
  4017f0:	47a0      	blx	r4
  4017f2:	4602      	mov	r2, r0
  4017f4:	68fb      	ldr	r3, [r7, #12]
  4017f6:	4313      	orrs	r3, r2
  4017f8:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  4017fa:	2100      	movs	r1, #0
  4017fc:	6878      	ldr	r0, [r7, #4]
  4017fe:	4b3d      	ldr	r3, [pc, #244]	; (4018f4 <inv_icm426xx_device_reset+0x1a4>)
  401800:	4798      	blx	r3
  401802:	4602      	mov	r2, r0
  401804:	68fb      	ldr	r3, [r7, #12]
  401806:	4313      	orrs	r3, r2
  401808:	60fb      	str	r3, [r7, #12]

	/* Check the Int Reset Done bit */
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_STATUS, 1, &data);
  40180a:	f107 030b 	add.w	r3, r7, #11
  40180e:	2201      	movs	r2, #1
  401810:	212d      	movs	r1, #45	; 0x2d
  401812:	6878      	ldr	r0, [r7, #4]
  401814:	4c38      	ldr	r4, [pc, #224]	; (4018f8 <inv_icm426xx_device_reset+0x1a8>)
  401816:	47a0      	blx	r4
  401818:	4602      	mov	r2, r0
  40181a:	68fb      	ldr	r3, [r7, #12]
  40181c:	4313      	orrs	r3, r2
  40181e:	60fb      	str	r3, [r7, #12]
	if (0 == (data & BIT_INT_STATUS_RESET_DONE)) {
  401820:	7afb      	ldrb	r3, [r7, #11]
  401822:	f003 0310 	and.w	r3, r3, #16
  401826:	2b00      	cmp	r3, #0
  401828:	d102      	bne.n	401830 <inv_icm426xx_device_reset+0xe0>
		return INV_ERROR_UNEXPECTED;
  40182a:	f06f 030b 	mvn.w	r3, #11
  40182e:	e05c      	b.n	4018ea <inv_icm426xx_device_reset+0x19a>
	}

	/* Init transport layer */
	inv_icm426xx_init_transport(s);
  401830:	6878      	ldr	r0, [r7, #4]
  401832:	4b34      	ldr	r3, [pc, #208]	; (401904 <inv_icm426xx_device_reset+0x1b4>)
  401834:	4798      	blx	r3
	
	status |= inv_icm426xx_set_reg_bank(s, 1);
  401836:	2101      	movs	r1, #1
  401838:	6878      	ldr	r0, [r7, #4]
  40183a:	4b2e      	ldr	r3, [pc, #184]	; (4018f4 <inv_icm426xx_device_reset+0x1a4>)
  40183c:	4798      	blx	r3
  40183e:	4602      	mov	r2, r0
  401840:	68fb      	ldr	r3, [r7, #12]
  401842:	4313      	orrs	r3, r2
  401844:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &intf_cfg6_reg);
  401846:	f107 0309 	add.w	r3, r7, #9
  40184a:	2201      	movs	r2, #1
  40184c:	217c      	movs	r1, #124	; 0x7c
  40184e:	6878      	ldr	r0, [r7, #4]
  401850:	4c2a      	ldr	r4, [pc, #168]	; (4018fc <inv_icm426xx_device_reset+0x1ac>)
  401852:	47a0      	blx	r4
  401854:	4602      	mov	r2, r0
  401856:	68fb      	ldr	r3, [r7, #12]
  401858:	4313      	orrs	r3, r2
  40185a:	60fb      	str	r3, [r7, #12]
	/* Configure FSYNC on INT2=pin 9 */
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG5_B1, 1, &data);
  40185c:	f107 030b 	add.w	r3, r7, #11
  401860:	2201      	movs	r2, #1
  401862:	217b      	movs	r1, #123	; 0x7b
  401864:	6878      	ldr	r0, [r7, #4]
  401866:	4c24      	ldr	r4, [pc, #144]	; (4018f8 <inv_icm426xx_device_reset+0x1a8>)
  401868:	47a0      	blx	r4
  40186a:	4602      	mov	r2, r0
  40186c:	68fb      	ldr	r3, [r7, #12]
  40186e:	4313      	orrs	r3, r2
  401870:	60fb      	str	r3, [r7, #12]
	data &= (uint8_t)~BIT_INTF_CONFIG5_GPIO_PAD_SEL_MASK;
  401872:	7afb      	ldrb	r3, [r7, #11]
  401874:	f023 0306 	bic.w	r3, r3, #6
  401878:	b2db      	uxtb	r3, r3
  40187a:	72fb      	strb	r3, [r7, #11]
	data |= (1 << BIT_INTF_CONFIG5_GPIO_PAD_SEL_POS);
  40187c:	7afb      	ldrb	r3, [r7, #11]
  40187e:	f043 0302 	orr.w	r3, r3, #2
  401882:	b2db      	uxtb	r3, r3
  401884:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG5_B1, 1, &data);
  401886:	f107 030b 	add.w	r3, r7, #11
  40188a:	2201      	movs	r2, #1
  40188c:	217b      	movs	r1, #123	; 0x7b
  40188e:	6878      	ldr	r0, [r7, #4]
  401890:	4c1a      	ldr	r4, [pc, #104]	; (4018fc <inv_icm426xx_device_reset+0x1ac>)
  401892:	47a0      	blx	r4
  401894:	4602      	mov	r2, r0
  401896:	68fb      	ldr	r3, [r7, #12]
  401898:	4313      	orrs	r3, r2
  40189a:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  40189c:	2100      	movs	r1, #0
  40189e:	6878      	ldr	r0, [r7, #4]
  4018a0:	4b14      	ldr	r3, [pc, #80]	; (4018f4 <inv_icm426xx_device_reset+0x1a4>)
  4018a2:	4798      	blx	r3
  4018a4:	4602      	mov	r2, r0
  4018a6:	68fb      	ldr	r3, [r7, #12]
  4018a8:	4313      	orrs	r3, r2
  4018aa:	60fb      	str	r3, [r7, #12]

	/* Read and set endianess for further processing */
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data);
  4018ac:	f107 030b 	add.w	r3, r7, #11
  4018b0:	2201      	movs	r2, #1
  4018b2:	214c      	movs	r1, #76	; 0x4c
  4018b4:	6878      	ldr	r0, [r7, #4]
  4018b6:	4c10      	ldr	r4, [pc, #64]	; (4018f8 <inv_icm426xx_device_reset+0x1a8>)
  4018b8:	47a0      	blx	r4
  4018ba:	4602      	mov	r2, r0
  4018bc:	68fb      	ldr	r3, [r7, #12]
  4018be:	4313      	orrs	r3, r2
  4018c0:	60fb      	str	r3, [r7, #12]
	s->endianess_data = data & BIT_DATA_ENDIAN_MASK;
  4018c2:	7afb      	ldrb	r3, [r7, #11]
  4018c4:	f003 0310 	and.w	r3, r3, #16
  4018c8:	b2da      	uxtb	r2, r3
  4018ca:	687b      	ldr	r3, [r7, #4]
  4018cc:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868

	if(s->transport.serif.serif_type == ICM426XX_UI_I3C){
  4018d0:	687b      	ldr	r3, [r7, #4]
  4018d2:	7e1b      	ldrb	r3, [r3, #24]
  4018d4:	2b02      	cmp	r3, #2
  4018d6:	d107      	bne.n	4018e8 <inv_icm426xx_device_reset+0x198>
		status |= s->transport.serif.configure((struct inv_icm426xx_serif *)s);
  4018d8:	687b      	ldr	r3, [r7, #4]
  4018da:	68db      	ldr	r3, [r3, #12]
  4018dc:	6878      	ldr	r0, [r7, #4]
  4018de:	4798      	blx	r3
  4018e0:	4602      	mov	r2, r0
  4018e2:	68fb      	ldr	r3, [r7, #12]
  4018e4:	4313      	orrs	r3, r2
  4018e6:	60fb      	str	r3, [r7, #12]
	}

	return status;
  4018e8:	68fb      	ldr	r3, [r7, #12]
}
  4018ea:	4618      	mov	r0, r3
  4018ec:	3714      	adds	r7, #20
  4018ee:	46bd      	mov	sp, r7
  4018f0:	bd90      	pop	{r4, r7, pc}
  4018f2:	bf00      	nop
  4018f4:	00401675 	.word	0x00401675
  4018f8:	00403931 	.word	0x00403931
  4018fc:	004039fd 	.word	0x004039fd
  401900:	00401659 	.word	0x00401659
  401904:	00403869 	.word	0x00403869

00401908 <inv_icm426xx_get_who_am_i>:

int inv_icm426xx_get_who_am_i(struct inv_icm426xx * s, uint8_t * who_am_i)
{
  401908:	b590      	push	{r4, r7, lr}
  40190a:	b083      	sub	sp, #12
  40190c:	af00      	add	r7, sp, #0
  40190e:	6078      	str	r0, [r7, #4]
  401910:	6039      	str	r1, [r7, #0]
	return inv_icm426xx_read_reg(s, MPUREG_WHO_AM_I, 1, who_am_i);
  401912:	683b      	ldr	r3, [r7, #0]
  401914:	2201      	movs	r2, #1
  401916:	2175      	movs	r1, #117	; 0x75
  401918:	6878      	ldr	r0, [r7, #4]
  40191a:	4c03      	ldr	r4, [pc, #12]	; (401928 <inv_icm426xx_get_who_am_i+0x20>)
  40191c:	47a0      	blx	r4
  40191e:	4603      	mov	r3, r0
}
  401920:	4618      	mov	r0, r3
  401922:	370c      	adds	r7, #12
  401924:	46bd      	mov	sp, r7
  401926:	bd90      	pop	{r4, r7, pc}
  401928:	00403931 	.word	0x00403931

0040192c <inv_icm426xx_force_clock_source>:

int inv_icm426xx_force_clock_source(struct inv_icm426xx * s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t clk_src)
{
  40192c:	b590      	push	{r4, r7, lr}
  40192e:	b085      	sub	sp, #20
  401930:	af00      	add	r7, sp, #0
  401932:	6078      	str	r0, [r7, #4]
  401934:	460b      	mov	r3, r1
  401936:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  401938:	2300      	movs	r3, #0
  40193a:	60fb      	str	r3, [r7, #12]
	uint8_t data;
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  40193c:	f107 030b 	add.w	r3, r7, #11
  401940:	2201      	movs	r2, #1
  401942:	214d      	movs	r1, #77	; 0x4d
  401944:	6878      	ldr	r0, [r7, #4]
  401946:	4c12      	ldr	r4, [pc, #72]	; (401990 <inv_icm426xx_force_clock_source+0x64>)
  401948:	47a0      	blx	r4
  40194a:	4602      	mov	r2, r0
  40194c:	68fb      	ldr	r3, [r7, #12]
  40194e:	4313      	orrs	r3, r2
  401950:	60fb      	str	r3, [r7, #12]
	if(clk_src == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC)
  401952:	78fb      	ldrb	r3, [r7, #3]
  401954:	2b00      	cmp	r3, #0
  401956:	d105      	bne.n	401964 <inv_icm426xx_force_clock_source+0x38>
		data &= (uint8_t)~BIT_ACCEL_LP_CLK_SEL_MASK;
  401958:	7afb      	ldrb	r3, [r7, #11]
  40195a:	f023 0308 	bic.w	r3, r3, #8
  40195e:	b2db      	uxtb	r3, r3
  401960:	72fb      	strb	r3, [r7, #11]
  401962:	e004      	b.n	40196e <inv_icm426xx_force_clock_source+0x42>
	else
		data |= (uint8_t)ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC;
  401964:	7afb      	ldrb	r3, [r7, #11]
  401966:	f043 0308 	orr.w	r3, r3, #8
  40196a:	b2db      	uxtb	r3, r3
  40196c:	72fb      	strb	r3, [r7, #11]

	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  40196e:	f107 030b 	add.w	r3, r7, #11
  401972:	2201      	movs	r2, #1
  401974:	214d      	movs	r1, #77	; 0x4d
  401976:	6878      	ldr	r0, [r7, #4]
  401978:	4c06      	ldr	r4, [pc, #24]	; (401994 <inv_icm426xx_force_clock_source+0x68>)
  40197a:	47a0      	blx	r4
  40197c:	4602      	mov	r2, r0
  40197e:	68fb      	ldr	r3, [r7, #12]
  401980:	4313      	orrs	r3, r2
  401982:	60fb      	str	r3, [r7, #12]
	
	return status;
  401984:	68fb      	ldr	r3, [r7, #12]
}
  401986:	4618      	mov	r0, r3
  401988:	3714      	adds	r7, #20
  40198a:	46bd      	mov	sp, r7
  40198c:	bd90      	pop	{r4, r7, pc}
  40198e:	bf00      	nop
  401990:	00403931 	.word	0x00403931
  401994:	004039fd 	.word	0x004039fd

00401998 <inv_icm426xx_enable_accel_low_noise_mode>:

	return status;
}

int inv_icm426xx_enable_accel_low_noise_mode(struct inv_icm426xx * s)
{
  401998:	b590      	push	{r4, r7, lr}
  40199a:	b087      	sub	sp, #28
  40199c:	af00      	add	r7, sp, #0
  40199e:	6078      	str	r0, [r7, #4]
	int status = 0;
  4019a0:	2300      	movs	r3, #0
  4019a2:	617b      	str	r3, [r7, #20]
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t  gyro_mode;
	ICM426XX_ACCEL_CONFIG0_ODR_t acc_odr_bitfield;
	uint32_t accel_odr_us;
	uint8_t accel_cfg_0_reg;

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  4019a4:	f107 030a 	add.w	r3, r7, #10
  4019a8:	2201      	movs	r2, #1
  4019aa:	214e      	movs	r1, #78	; 0x4e
  4019ac:	6878      	ldr	r0, [r7, #4]
  4019ae:	4c6c      	ldr	r4, [pc, #432]	; (401b60 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  4019b0:	47a0      	blx	r4
  4019b2:	4602      	mov	r2, r0
  4019b4:	697b      	ldr	r3, [r7, #20]
  4019b6:	4313      	orrs	r3, r2
  4019b8:	617b      	str	r3, [r7, #20]
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mgmt0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  4019ba:	7abb      	ldrb	r3, [r7, #10]
  4019bc:	f003 0303 	and.w	r3, r3, #3
  4019c0:	74fb      	strb	r3, [r7, #19]
	gyro_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mgmt0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  4019c2:	7abb      	ldrb	r3, [r7, #10]
  4019c4:	f003 030c 	and.w	r3, r3, #12
  4019c8:	74bb      	strb	r3, [r7, #18]

	/* Subroutines need to be followed when enabling or disabling sensor to ensure ODR regularity
	 * Check if the accelerometer is the only one enabled 
	 */
	if ((accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) && 
  4019ca:	7cfb      	ldrb	r3, [r7, #19]
  4019cc:	2b02      	cmp	r3, #2
  4019ce:	d124      	bne.n	401a1a <inv_icm426xx_enable_accel_low_noise_mode+0x82>
  4019d0:	7cbb      	ldrb	r3, [r7, #18]
  4019d2:	2b00      	cmp	r3, #0
  4019d4:	d002      	beq.n	4019dc <inv_icm426xx_enable_accel_low_noise_mode+0x44>
	    ((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY))){
  4019d6:	7cbb      	ldrb	r3, [r7, #18]
  4019d8:	2b04      	cmp	r3, #4
  4019da:	d11e      	bne.n	401a1a <inv_icm426xx_enable_accel_low_noise_mode+0x82>
		/* Get accelerometer's ODR for next required wait */
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  4019dc:	f107 0309 	add.w	r3, r7, #9
  4019e0:	2201      	movs	r2, #1
  4019e2:	2150      	movs	r1, #80	; 0x50
  4019e4:	6878      	ldr	r0, [r7, #4]
  4019e6:	4c5e      	ldr	r4, [pc, #376]	; (401b60 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  4019e8:	47a0      	blx	r4
  4019ea:	4602      	mov	r2, r0
  4019ec:	697b      	ldr	r3, [r7, #20]
  4019ee:	4313      	orrs	r3, r2
  4019f0:	617b      	str	r3, [r7, #20]
		acc_odr_bitfield = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  4019f2:	7a7b      	ldrb	r3, [r7, #9]
  4019f4:	f003 030f 	and.w	r3, r3, #15
  4019f8:	747b      	strb	r3, [r7, #17]
		accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(acc_odr_bitfield);
  4019fa:	7c7b      	ldrb	r3, [r7, #17]
  4019fc:	4618      	mov	r0, r3
  4019fe:	4b59      	ldr	r3, [pc, #356]	; (401b64 <inv_icm426xx_enable_accel_low_noise_mode+0x1cc>)
  401a00:	4798      	blx	r3
  401a02:	60f8      	str	r0, [r7, #12]
		/* Select the RC OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC);
  401a04:	2108      	movs	r1, #8
  401a06:	6878      	ldr	r0, [r7, #4]
  401a08:	4b57      	ldr	r3, [pc, #348]	; (401b68 <inv_icm426xx_enable_accel_low_noise_mode+0x1d0>)
  401a0a:	4798      	blx	r3
  401a0c:	4602      	mov	r2, r0
  401a0e:	697b      	ldr	r3, [r7, #20]
  401a10:	4313      	orrs	r3, r2
  401a12:	617b      	str	r3, [r7, #20]
		/* Wait one accel ODR before switching to low noise mode */
		inv_icm426xx_sleep_us(accel_odr_us);
  401a14:	68f8      	ldr	r0, [r7, #12]
  401a16:	4b55      	ldr	r3, [pc, #340]	; (401b6c <inv_icm426xx_enable_accel_low_noise_mode+0x1d4>)
  401a18:	4798      	blx	r3
	}

	/* FIFO contains Gyro and Accel data if enabled on the OIS path
	 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
	 */
	if(accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF && gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  401a1a:	7cfb      	ldrb	r3, [r7, #19]
  401a1c:	2b00      	cmp	r3, #0
  401a1e:	d143      	bne.n	401aa8 <inv_icm426xx_enable_accel_low_noise_mode+0x110>
  401a20:	7cbb      	ldrb	r3, [r7, #18]
  401a22:	2b00      	cmp	r3, #0
  401a24:	d140      	bne.n	401aa8 <inv_icm426xx_enable_accel_low_noise_mode+0x110>
		uint8_t data_endianess;
		
		if(s->fifo_is_used) {
  401a26:	687b      	ldr	r3, [r7, #4]
  401a28:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401a2c:	2b00      	cmp	r3, #0
  401a2e:	d029      	beq.n	401a84 <inv_icm426xx_enable_accel_low_noise_mode+0xec>
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401a30:	f107 030b 	add.w	r3, r7, #11
  401a34:	2201      	movs	r2, #1
  401a36:	215f      	movs	r1, #95	; 0x5f
  401a38:	6878      	ldr	r0, [r7, #4]
  401a3a:	4c49      	ldr	r4, [pc, #292]	; (401b60 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401a3c:	47a0      	blx	r4
  401a3e:	4602      	mov	r2, r0
  401a40:	697b      	ldr	r3, [r7, #20]
  401a42:	4313      	orrs	r3, r2
  401a44:	617b      	str	r3, [r7, #20]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_ACCEL_EN;
  401a46:	7afb      	ldrb	r3, [r7, #11]
  401a48:	f043 0301 	orr.w	r3, r3, #1
  401a4c:	b2db      	uxtb	r3, r3
  401a4e:	72fb      	strb	r3, [r7, #11]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_GYRO_EN;
  401a50:	7afb      	ldrb	r3, [r7, #11]
  401a52:	f043 0302 	orr.w	r3, r3, #2
  401a56:	b2db      	uxtb	r3, r3
  401a58:	72fb      	strb	r3, [r7, #11]
			if(s->fifo_highres_enabled)
  401a5a:	687b      	ldr	r3, [r7, #4]
  401a5c:	f893 3869 	ldrb.w	r3, [r3, #2153]	; 0x869
  401a60:	2b00      	cmp	r3, #0
  401a62:	d004      	beq.n	401a6e <inv_icm426xx_enable_accel_low_noise_mode+0xd6>
				data |= (uint8_t)ICM426XX_FIFO_CONFIG1_HIRES_EN;
  401a64:	7afb      	ldrb	r3, [r7, #11]
  401a66:	f043 0310 	orr.w	r3, r3, #16
  401a6a:	b2db      	uxtb	r3, r3
  401a6c:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401a6e:	f107 030b 	add.w	r3, r7, #11
  401a72:	2201      	movs	r2, #1
  401a74:	215f      	movs	r1, #95	; 0x5f
  401a76:	6878      	ldr	r0, [r7, #4]
  401a78:	4c3d      	ldr	r4, [pc, #244]	; (401b70 <inv_icm426xx_enable_accel_low_noise_mode+0x1d8>)
  401a7a:	47a0      	blx	r4
  401a7c:	4602      	mov	r2, r0
  401a7e:	697b      	ldr	r3, [r7, #20]
  401a80:	4313      	orrs	r3, r2
  401a82:	617b      	str	r3, [r7, #20]
		}
		/* Read data endianess in order to process correctly data */
		status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data_endianess);
  401a84:	f107 0308 	add.w	r3, r7, #8
  401a88:	2201      	movs	r2, #1
  401a8a:	214c      	movs	r1, #76	; 0x4c
  401a8c:	6878      	ldr	r0, [r7, #4]
  401a8e:	4c34      	ldr	r4, [pc, #208]	; (401b60 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401a90:	47a0      	blx	r4
  401a92:	4602      	mov	r2, r0
  401a94:	697b      	ldr	r3, [r7, #20]
  401a96:	4313      	orrs	r3, r2
  401a98:	617b      	str	r3, [r7, #20]
		s->endianess_data = data_endianess & BIT_DATA_ENDIAN_MASK;
  401a9a:	7a3b      	ldrb	r3, [r7, #8]
  401a9c:	f003 0310 	and.w	r3, r3, #16
  401aa0:	b2da      	uxtb	r2, r3
  401aa2:	687b      	ldr	r3, [r7, #4]
  401aa4:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
	}
#endif
	
	/* Restore filter BW settings */
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401aa8:	f107 030b 	add.w	r3, r7, #11
  401aac:	2201      	movs	r2, #1
  401aae:	2152      	movs	r1, #82	; 0x52
  401ab0:	6878      	ldr	r0, [r7, #4]
  401ab2:	4c2b      	ldr	r4, [pc, #172]	; (401b60 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401ab4:	47a0      	blx	r4
  401ab6:	4602      	mov	r2, r0
  401ab8:	697b      	ldr	r3, [r7, #20]
  401aba:	4313      	orrs	r3, r2
  401abc:	617b      	str	r3, [r7, #20]
	data &= (uint8_t)~BIT_GYRO_ACCEL_CONFIG0_ACCEL_FILT_MASK;
  401abe:	7afb      	ldrb	r3, [r7, #11]
  401ac0:	f003 030f 	and.w	r3, r3, #15
  401ac4:	b2db      	uxtb	r3, r3
  401ac6:	72fb      	strb	r3, [r7, #11]
	data |= s->avg_bw_setting.acc_ln_bw;
  401ac8:	687b      	ldr	r3, [r7, #4]
  401aca:	f893 2874 	ldrb.w	r2, [r3, #2164]	; 0x874
  401ace:	7afb      	ldrb	r3, [r7, #11]
  401ad0:	4313      	orrs	r3, r2
  401ad2:	b2db      	uxtb	r3, r3
  401ad4:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401ad6:	f107 030b 	add.w	r3, r7, #11
  401ada:	2201      	movs	r2, #1
  401adc:	2152      	movs	r1, #82	; 0x52
  401ade:	6878      	ldr	r0, [r7, #4]
  401ae0:	4c23      	ldr	r4, [pc, #140]	; (401b70 <inv_icm426xx_enable_accel_low_noise_mode+0x1d8>)
  401ae2:	47a0      	blx	r4
  401ae4:	4602      	mov	r2, r0
  401ae6:	697b      	ldr	r3, [r7, #20]
  401ae8:	4313      	orrs	r3, r2
  401aea:	617b      	str	r3, [r7, #20]
	
	/* Enable/Switch the accelerometer in/to low noise mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  401aec:	f107 030a 	add.w	r3, r7, #10
  401af0:	2201      	movs	r2, #1
  401af2:	214e      	movs	r1, #78	; 0x4e
  401af4:	6878      	ldr	r0, [r7, #4]
  401af6:	4c1a      	ldr	r4, [pc, #104]	; (401b60 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401af8:	47a0      	blx	r4
  401afa:	4602      	mov	r2, r0
  401afc:	697b      	ldr	r3, [r7, #20]
  401afe:	4313      	orrs	r3, r2
  401b00:	617b      	str	r3, [r7, #20]
	pwr_mgmt0_reg &= (uint8_t)~BIT_PWR_MGMT_0_ACCEL_MODE_MASK;
  401b02:	7abb      	ldrb	r3, [r7, #10]
  401b04:	f023 0303 	bic.w	r3, r3, #3
  401b08:	b2db      	uxtb	r3, r3
  401b0a:	72bb      	strb	r3, [r7, #10]
	pwr_mgmt0_reg |= (uint8_t)ICM426XX_PWR_MGMT_0_ACCEL_MODE_LN;
  401b0c:	7abb      	ldrb	r3, [r7, #10]
  401b0e:	f043 0303 	orr.w	r3, r3, #3
  401b12:	b2db      	uxtb	r3, r3
  401b14:	72bb      	strb	r3, [r7, #10]
	status |= inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  401b16:	f107 030a 	add.w	r3, r7, #10
  401b1a:	2201      	movs	r2, #1
  401b1c:	214e      	movs	r1, #78	; 0x4e
  401b1e:	6878      	ldr	r0, [r7, #4]
  401b20:	4c13      	ldr	r4, [pc, #76]	; (401b70 <inv_icm426xx_enable_accel_low_noise_mode+0x1d8>)
  401b22:	47a0      	blx	r4
  401b24:	4602      	mov	r2, r0
  401b26:	697b      	ldr	r3, [r7, #20]
  401b28:	4313      	orrs	r3, r2
  401b2a:	617b      	str	r3, [r7, #20]
	inv_icm426xx_sleep_us(200);
  401b2c:	20c8      	movs	r0, #200	; 0xc8
  401b2e:	4b0f      	ldr	r3, [pc, #60]	; (401b6c <inv_icm426xx_enable_accel_low_noise_mode+0x1d4>)
  401b30:	4798      	blx	r3

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if (accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF) {
  401b32:	7cfb      	ldrb	r3, [r7, #19]
  401b34:	2b00      	cmp	r3, #0
  401b36:	d10d      	bne.n	401b54 <inv_icm426xx_enable_accel_low_noise_mode+0x1bc>
		/* First data are noisy after enabling sensor 
		 * Keeps track of the start time to discard first sample
		 */
		if(s->fifo_is_used) {
  401b38:	687b      	ldr	r3, [r7, #4]
  401b3a:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d008      	beq.n	401b54 <inv_icm426xx_enable_accel_low_noise_mode+0x1bc>
			s->accel_start_time_us = inv_icm426xx_get_time_us();
  401b42:	4b0c      	ldr	r3, [pc, #48]	; (401b74 <inv_icm426xx_enable_accel_low_noise_mode+0x1dc>)
  401b44:	4798      	blx	r3
  401b46:	4603      	mov	r3, r0
  401b48:	460c      	mov	r4, r1
  401b4a:	687a      	ldr	r2, [r7, #4]
  401b4c:	f502 6206 	add.w	r2, r2, #2144	; 0x860
  401b50:	e9c2 3400 	strd	r3, r4, [r2]
		}
	}
#endif

	return status;
  401b54:	697b      	ldr	r3, [r7, #20]
}
  401b56:	4618      	mov	r0, r3
  401b58:	371c      	adds	r7, #28
  401b5a:	46bd      	mov	sp, r7
  401b5c:	bd90      	pop	{r4, r7, pc}
  401b5e:	bf00      	nop
  401b60:	00403931 	.word	0x00403931
  401b64:	00402b29 	.word	0x00402b29
  401b68:	0040192d 	.word	0x0040192d
  401b6c:	00401659 	.word	0x00401659
  401b70:	004039fd 	.word	0x004039fd
  401b74:	00401621 	.word	0x00401621

00401b78 <inv_icm426xx_disable_accel>:

int inv_icm426xx_disable_accel(struct inv_icm426xx * s)
{
  401b78:	b590      	push	{r4, r7, lr}
  401b7a:	b087      	sub	sp, #28
  401b7c:	af00      	add	r7, sp, #0
  401b7e:	6078      	str	r0, [r7, #4]
	int status=0;
  401b80:	2300      	movs	r3, #0
  401b82:	617b      	str	r3, [r7, #20]
	uint8_t pwr_mngt_0_reg;
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t gyro_mode;
	int stop_fifo_usage = 0;
  401b84:	2300      	movs	r3, #0
  401b86:	613b      	str	r3, [r7, #16]
	uint8_t data;
#endif
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401b88:	f107 030e 	add.w	r3, r7, #14
  401b8c:	2201      	movs	r2, #1
  401b8e:	214e      	movs	r1, #78	; 0x4e
  401b90:	6878      	ldr	r0, [r7, #4]
  401b92:	4c2f      	ldr	r4, [pc, #188]	; (401c50 <inv_icm426xx_disable_accel+0xd8>)
  401b94:	47a0      	blx	r4
  401b96:	4602      	mov	r2, r0
  401b98:	697b      	ldr	r3, [r7, #20]
  401b9a:	4313      	orrs	r3, r2
  401b9c:	617b      	str	r3, [r7, #20]
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	gyro_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  401b9e:	7bbb      	ldrb	r3, [r7, #14]
  401ba0:	f003 030c 	and.w	r3, r3, #12
  401ba4:	73fb      	strb	r3, [r7, #15]
	if((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) && s->fifo_is_used) {
  401ba6:	7bfb      	ldrb	r3, [r7, #15]
  401ba8:	2b00      	cmp	r3, #0
  401baa:	d10a      	bne.n	401bc2 <inv_icm426xx_disable_accel+0x4a>
  401bac:	687b      	ldr	r3, [r7, #4]
  401bae:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401bb2:	2b00      	cmp	r3, #0
  401bb4:	d005      	beq.n	401bc2 <inv_icm426xx_disable_accel+0x4a>
		/* First FSYNC event after enable is irrelevant */
		s->fsync_to_be_ignored = 1;
  401bb6:	687b      	ldr	r3, [r7, #4]
  401bb8:	2201      	movs	r2, #1
  401bba:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
		/* FIFO contains Gyro and Accel data if enabled on the OIS path
		 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
		 */
		stop_fifo_usage = 1;
  401bbe:	2301      	movs	r3, #1
  401bc0:	613b      	str	r3, [r7, #16]
	}
#endif
	
	pwr_mngt_0_reg &= (uint8_t)~BIT_PWR_MGMT_0_ACCEL_MODE_MASK;
  401bc2:	7bbb      	ldrb	r3, [r7, #14]
  401bc4:	f023 0303 	bic.w	r3, r3, #3
  401bc8:	b2db      	uxtb	r3, r3
  401bca:	73bb      	strb	r3, [r7, #14]
	pwr_mngt_0_reg |= (uint8_t) ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF;
  401bcc:	7bbb      	ldrb	r3, [r7, #14]
  401bce:	73bb      	strb	r3, [r7, #14]
	status = inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401bd0:	f107 030e 	add.w	r3, r7, #14
  401bd4:	2201      	movs	r2, #1
  401bd6:	214e      	movs	r1, #78	; 0x4e
  401bd8:	6878      	ldr	r0, [r7, #4]
  401bda:	4c1e      	ldr	r4, [pc, #120]	; (401c54 <inv_icm426xx_disable_accel+0xdc>)
  401bdc:	47a0      	blx	r4
  401bde:	6178      	str	r0, [r7, #20]
	
	/* Restore POR clock source for the accelerometer */
	status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC);
  401be0:	2100      	movs	r1, #0
  401be2:	6878      	ldr	r0, [r7, #4]
  401be4:	4b1c      	ldr	r3, [pc, #112]	; (401c58 <inv_icm426xx_disable_accel+0xe0>)
  401be6:	4798      	blx	r3
  401be8:	4602      	mov	r2, r0
  401bea:	697b      	ldr	r3, [r7, #20]
  401bec:	4313      	orrs	r3, r2
  401bee:	617b      	str	r3, [r7, #20]

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if(stop_fifo_usage && s->fifo_is_used) {
  401bf0:	693b      	ldr	r3, [r7, #16]
  401bf2:	2b00      	cmp	r3, #0
  401bf4:	d026      	beq.n	401c44 <inv_icm426xx_disable_accel+0xcc>
  401bf6:	687b      	ldr	r3, [r7, #4]
  401bf8:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401bfc:	2b00      	cmp	r3, #0
  401bfe:	d021      	beq.n	401c44 <inv_icm426xx_disable_accel+0xcc>
		status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401c00:	f107 030d 	add.w	r3, r7, #13
  401c04:	2201      	movs	r2, #1
  401c06:	215f      	movs	r1, #95	; 0x5f
  401c08:	6878      	ldr	r0, [r7, #4]
  401c0a:	4c11      	ldr	r4, [pc, #68]	; (401c50 <inv_icm426xx_disable_accel+0xd8>)
  401c0c:	47a0      	blx	r4
  401c0e:	4602      	mov	r2, r0
  401c10:	697b      	ldr	r3, [r7, #20]
  401c12:	4313      	orrs	r3, r2
  401c14:	617b      	str	r3, [r7, #20]
		data &= (uint8_t)~(BIT_FIFO_CONFIG1_ACCEL_MASK | BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_HIRES_MASK);
  401c16:	7b7b      	ldrb	r3, [r7, #13]
  401c18:	f023 0313 	bic.w	r3, r3, #19
  401c1c:	b2db      	uxtb	r3, r3
  401c1e:	737b      	strb	r3, [r7, #13]
		status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401c20:	f107 030d 	add.w	r3, r7, #13
  401c24:	2201      	movs	r2, #1
  401c26:	215f      	movs	r1, #95	; 0x5f
  401c28:	6878      	ldr	r0, [r7, #4]
  401c2a:	4c0a      	ldr	r4, [pc, #40]	; (401c54 <inv_icm426xx_disable_accel+0xdc>)
  401c2c:	47a0      	blx	r4
  401c2e:	4602      	mov	r2, r0
  401c30:	697b      	ldr	r3, [r7, #20]
  401c32:	4313      	orrs	r3, r2
  401c34:	617b      	str	r3, [r7, #20]

		/* Reset FIFO explicitely so the new configuration is taken into account */
		status |= inv_icm426xx_reset_fifo(s);
  401c36:	6878      	ldr	r0, [r7, #4]
  401c38:	4b08      	ldr	r3, [pc, #32]	; (401c5c <inv_icm426xx_disable_accel+0xe4>)
  401c3a:	4798      	blx	r3
  401c3c:	4602      	mov	r2, r0
  401c3e:	697b      	ldr	r3, [r7, #20]
  401c40:	4313      	orrs	r3, r2
  401c42:	617b      	str	r3, [r7, #20]
	}
#endif
	
	return status;
  401c44:	697b      	ldr	r3, [r7, #20]
}
  401c46:	4618      	mov	r0, r3
  401c48:	371c      	adds	r7, #28
  401c4a:	46bd      	mov	sp, r7
  401c4c:	bd90      	pop	{r4, r7, pc}
  401c4e:	bf00      	nop
  401c50:	00403931 	.word	0x00403931
  401c54:	004039fd 	.word	0x004039fd
  401c58:	0040192d 	.word	0x0040192d
  401c5c:	00402dad 	.word	0x00402dad

00401c60 <inv_icm426xx_enable_gyro_low_noise_mode>:

int inv_icm426xx_enable_gyro_low_noise_mode(struct inv_icm426xx * s)
{
  401c60:	b590      	push	{r4, r7, lr}
  401c62:	b08b      	sub	sp, #44	; 0x2c
  401c64:	af00      	add	r7, sp, #0
  401c66:	6078      	str	r0, [r7, #4]
	int status = 0;
  401c68:	2300      	movs	r3, #0
  401c6a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Powering the gyroscope on immediately after powering it off can result in device failure. 
	 * The gyroscope proof mass can continue vibrating after it has been powered off, 
	 * and powering it back on immediately can result in unpredictable proof mass movement.
	 * After powering the gyroscope off, a period of > 150ms should be allowed to elapse before it is powered back on. */
	if (s->gyro_power_off_tmst != UINT32_MAX) {
  401c6c:	687b      	ldr	r3, [r7, #4]
  401c6e:	f603 0378 	addw	r3, r3, #2168	; 0x878
  401c72:	e9d3 3400 	ldrd	r3, r4, [r3]
  401c76:	2c00      	cmp	r4, #0
  401c78:	bf08      	it	eq
  401c7a:	f1b3 3fff 	cmpeq.w	r3, #4294967295
  401c7e:	d02a      	beq.n	401cd6 <inv_icm426xx_enable_gyro_low_noise_mode+0x76>
		current_time = inv_icm426xx_get_time_us();
  401c80:	4b83      	ldr	r3, [pc, #524]	; (401e90 <inv_icm426xx_enable_gyro_low_noise_mode+0x230>)
  401c82:	4798      	blx	r3
  401c84:	e9c7 0106 	strd	r0, r1, [r7, #24]
		/* Handle rollover */
		if (current_time <= s->gyro_power_off_tmst)
  401c88:	687b      	ldr	r3, [r7, #4]
  401c8a:	f603 0378 	addw	r3, r3, #2168	; 0x878
  401c8e:	e9d3 1200 	ldrd	r1, r2, [r3]
  401c92:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  401c96:	42a2      	cmp	r2, r4
  401c98:	bf08      	it	eq
  401c9a:	4299      	cmpeq	r1, r3
  401c9c:	d307      	bcc.n	401cae <inv_icm426xx_enable_gyro_low_noise_mode+0x4e>
			current_time += UINT32_MAX;
  401c9e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  401ca2:	f113 33ff 	adds.w	r3, r3, #4294967295
  401ca6:	f144 0400 	adc.w	r4, r4, #0
  401caa:	e9c7 3406 	strd	r3, r4, [r7, #24]
		/* If 150 ms are not elapsed since power-off error is returned */
		if ((current_time - s->gyro_power_off_tmst) <= (150 * 1000))
  401cae:	687b      	ldr	r3, [r7, #4]
  401cb0:	f603 0378 	addw	r3, r3, #2168	; 0x878
  401cb4:	e9d3 3400 	ldrd	r3, r4, [r3]
  401cb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
  401cbc:	1acb      	subs	r3, r1, r3
  401cbe:	eb62 0404 	sbc.w	r4, r2, r4
  401cc2:	4974      	ldr	r1, [pc, #464]	; (401e94 <inv_icm426xx_enable_gyro_low_noise_mode+0x234>)
  401cc4:	f04f 0200 	mov.w	r2, #0
  401cc8:	42a2      	cmp	r2, r4
  401cca:	bf08      	it	eq
  401ccc:	4299      	cmpeq	r1, r3
  401cce:	d302      	bcc.n	401cd6 <inv_icm426xx_enable_gyro_low_noise_mode+0x76>
			return INV_ERROR_HW;
  401cd0:	f06f 0309 	mvn.w	r3, #9
  401cd4:	e0d8      	b.n	401e88 <inv_icm426xx_enable_gyro_low_noise_mode+0x228>
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t accel_mode;
	ICM426XX_ACCEL_CONFIG0_ODR_t acc_odr_bitfield;
	uint32_t accel_odr_us;
	uint8_t accel_cfg_0_reg;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401cd6:	f107 030e 	add.w	r3, r7, #14
  401cda:	2201      	movs	r2, #1
  401cdc:	214e      	movs	r1, #78	; 0x4e
  401cde:	6878      	ldr	r0, [r7, #4]
  401ce0:	4c6d      	ldr	r4, [pc, #436]	; (401e98 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401ce2:	47a0      	blx	r4
  401ce4:	4602      	mov	r2, r0
  401ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401ce8:	4313      	orrs	r3, r2
  401cea:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  401cec:	7bbb      	ldrb	r3, [r7, #14]
  401cee:	f003 030c 	and.w	r3, r3, #12
  401cf2:	75fb      	strb	r3, [r7, #23]
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  401cf4:	7bbb      	ldrb	r3, [r7, #14]
  401cf6:	f003 0303 	and.w	r3, r3, #3
  401cfa:	75bb      	strb	r3, [r7, #22]

	/* Subroutines need to be followed when enabling or disabling sensor to ensure ODR regularity
	 * Check if the accelerometer is the only one enabled 
	 */	
	if ((accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) &&
  401cfc:	7dbb      	ldrb	r3, [r7, #22]
  401cfe:	2b02      	cmp	r3, #2
  401d00:	d124      	bne.n	401d4c <inv_icm426xx_enable_gyro_low_noise_mode+0xec>
  401d02:	7dfb      	ldrb	r3, [r7, #23]
  401d04:	2b00      	cmp	r3, #0
  401d06:	d002      	beq.n	401d0e <inv_icm426xx_enable_gyro_low_noise_mode+0xae>
	    ((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY))) {
  401d08:	7dfb      	ldrb	r3, [r7, #23]
  401d0a:	2b04      	cmp	r3, #4
  401d0c:	d11e      	bne.n	401d4c <inv_icm426xx_enable_gyro_low_noise_mode+0xec>
		/* Get accelerometer's ODR for next required wait */
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  401d0e:	f107 030d 	add.w	r3, r7, #13
  401d12:	2201      	movs	r2, #1
  401d14:	2150      	movs	r1, #80	; 0x50
  401d16:	6878      	ldr	r0, [r7, #4]
  401d18:	4c5f      	ldr	r4, [pc, #380]	; (401e98 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401d1a:	47a0      	blx	r4
  401d1c:	4602      	mov	r2, r0
  401d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d20:	4313      	orrs	r3, r2
  401d22:	627b      	str	r3, [r7, #36]	; 0x24
		acc_odr_bitfield = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  401d24:	7b7b      	ldrb	r3, [r7, #13]
  401d26:	f003 030f 	and.w	r3, r3, #15
  401d2a:	757b      	strb	r3, [r7, #21]
		accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(acc_odr_bitfield);
  401d2c:	7d7b      	ldrb	r3, [r7, #21]
  401d2e:	4618      	mov	r0, r3
  401d30:	4b5a      	ldr	r3, [pc, #360]	; (401e9c <inv_icm426xx_enable_gyro_low_noise_mode+0x23c>)
  401d32:	4798      	blx	r3
  401d34:	6138      	str	r0, [r7, #16]
		/* Select the RC OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC);
  401d36:	2108      	movs	r1, #8
  401d38:	6878      	ldr	r0, [r7, #4]
  401d3a:	4b59      	ldr	r3, [pc, #356]	; (401ea0 <inv_icm426xx_enable_gyro_low_noise_mode+0x240>)
  401d3c:	4798      	blx	r3
  401d3e:	4602      	mov	r2, r0
  401d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d42:	4313      	orrs	r3, r2
  401d44:	627b      	str	r3, [r7, #36]	; 0x24
		/* Wait one accel ODR before enabling the gyroscope */
		inv_icm426xx_sleep_us(accel_odr_us);
  401d46:	6938      	ldr	r0, [r7, #16]
  401d48:	4b56      	ldr	r3, [pc, #344]	; (401ea4 <inv_icm426xx_enable_gyro_low_noise_mode+0x244>)
  401d4a:	4798      	blx	r3
	}

	/* FIFO contains Gyro and Accel data if enabled on the OIS path
	 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
	 */
	if(accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF && gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  401d4c:	7dbb      	ldrb	r3, [r7, #22]
  401d4e:	2b00      	cmp	r3, #0
  401d50:	d143      	bne.n	401dda <inv_icm426xx_enable_gyro_low_noise_mode+0x17a>
  401d52:	7dfb      	ldrb	r3, [r7, #23]
  401d54:	2b00      	cmp	r3, #0
  401d56:	d140      	bne.n	401dda <inv_icm426xx_enable_gyro_low_noise_mode+0x17a>
		uint8_t data_endianess;

		if(s->fifo_is_used) {
  401d58:	687b      	ldr	r3, [r7, #4]
  401d5a:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401d5e:	2b00      	cmp	r3, #0
  401d60:	d029      	beq.n	401db6 <inv_icm426xx_enable_gyro_low_noise_mode+0x156>
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401d62:	f107 030f 	add.w	r3, r7, #15
  401d66:	2201      	movs	r2, #1
  401d68:	215f      	movs	r1, #95	; 0x5f
  401d6a:	6878      	ldr	r0, [r7, #4]
  401d6c:	4c4a      	ldr	r4, [pc, #296]	; (401e98 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401d6e:	47a0      	blx	r4
  401d70:	4602      	mov	r2, r0
  401d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d74:	4313      	orrs	r3, r2
  401d76:	627b      	str	r3, [r7, #36]	; 0x24
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_ACCEL_EN;
  401d78:	7bfb      	ldrb	r3, [r7, #15]
  401d7a:	f043 0301 	orr.w	r3, r3, #1
  401d7e:	b2db      	uxtb	r3, r3
  401d80:	73fb      	strb	r3, [r7, #15]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_GYRO_EN;
  401d82:	7bfb      	ldrb	r3, [r7, #15]
  401d84:	f043 0302 	orr.w	r3, r3, #2
  401d88:	b2db      	uxtb	r3, r3
  401d8a:	73fb      	strb	r3, [r7, #15]
			if(s->fifo_highres_enabled)
  401d8c:	687b      	ldr	r3, [r7, #4]
  401d8e:	f893 3869 	ldrb.w	r3, [r3, #2153]	; 0x869
  401d92:	2b00      	cmp	r3, #0
  401d94:	d004      	beq.n	401da0 <inv_icm426xx_enable_gyro_low_noise_mode+0x140>
				data |= (uint8_t)ICM426XX_FIFO_CONFIG1_HIRES_EN;
  401d96:	7bfb      	ldrb	r3, [r7, #15]
  401d98:	f043 0310 	orr.w	r3, r3, #16
  401d9c:	b2db      	uxtb	r3, r3
  401d9e:	73fb      	strb	r3, [r7, #15]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401da0:	f107 030f 	add.w	r3, r7, #15
  401da4:	2201      	movs	r2, #1
  401da6:	215f      	movs	r1, #95	; 0x5f
  401da8:	6878      	ldr	r0, [r7, #4]
  401daa:	4c3f      	ldr	r4, [pc, #252]	; (401ea8 <inv_icm426xx_enable_gyro_low_noise_mode+0x248>)
  401dac:	47a0      	blx	r4
  401dae:	4602      	mov	r2, r0
  401db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401db2:	4313      	orrs	r3, r2
  401db4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		/* Read data endianess in order to process correctly data */
		status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data_endianess);
  401db6:	f107 030c 	add.w	r3, r7, #12
  401dba:	2201      	movs	r2, #1
  401dbc:	214c      	movs	r1, #76	; 0x4c
  401dbe:	6878      	ldr	r0, [r7, #4]
  401dc0:	4c35      	ldr	r4, [pc, #212]	; (401e98 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401dc2:	47a0      	blx	r4
  401dc4:	4602      	mov	r2, r0
  401dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401dc8:	4313      	orrs	r3, r2
  401dca:	627b      	str	r3, [r7, #36]	; 0x24
		s->endianess_data = data_endianess & BIT_DATA_ENDIAN_MASK;
  401dcc:	7b3b      	ldrb	r3, [r7, #12]
  401dce:	f003 0310 	and.w	r3, r3, #16
  401dd2:	b2da      	uxtb	r2, r3
  401dd4:	687b      	ldr	r3, [r7, #4]
  401dd6:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
	}
#endif

	/* Restore filter BW settings */
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401dda:	f107 030f 	add.w	r3, r7, #15
  401dde:	2201      	movs	r2, #1
  401de0:	2152      	movs	r1, #82	; 0x52
  401de2:	6878      	ldr	r0, [r7, #4]
  401de4:	4c2c      	ldr	r4, [pc, #176]	; (401e98 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401de6:	47a0      	blx	r4
  401de8:	4602      	mov	r2, r0
  401dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401dec:	4313      	orrs	r3, r2
  401dee:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_GYRO_ACCEL_CONFIG0_GYRO_FILT_MASK;
  401df0:	7bfb      	ldrb	r3, [r7, #15]
  401df2:	f023 030f 	bic.w	r3, r3, #15
  401df6:	b2db      	uxtb	r3, r3
  401df8:	73fb      	strb	r3, [r7, #15]
	data |= s->avg_bw_setting.gyr_ln_bw;
  401dfa:	687b      	ldr	r3, [r7, #4]
  401dfc:	f893 2875 	ldrb.w	r2, [r3, #2165]	; 0x875
  401e00:	7bfb      	ldrb	r3, [r7, #15]
  401e02:	4313      	orrs	r3, r2
  401e04:	b2db      	uxtb	r3, r3
  401e06:	73fb      	strb	r3, [r7, #15]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401e08:	f107 030f 	add.w	r3, r7, #15
  401e0c:	2201      	movs	r2, #1
  401e0e:	2152      	movs	r1, #82	; 0x52
  401e10:	6878      	ldr	r0, [r7, #4]
  401e12:	4c25      	ldr	r4, [pc, #148]	; (401ea8 <inv_icm426xx_enable_gyro_low_noise_mode+0x248>)
  401e14:	47a0      	blx	r4
  401e16:	4602      	mov	r2, r0
  401e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e1a:	4313      	orrs	r3, r2
  401e1c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enable/Switch the gyroscope in/to low noise mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401e1e:	f107 030e 	add.w	r3, r7, #14
  401e22:	2201      	movs	r2, #1
  401e24:	214e      	movs	r1, #78	; 0x4e
  401e26:	6878      	ldr	r0, [r7, #4]
  401e28:	4c1b      	ldr	r4, [pc, #108]	; (401e98 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401e2a:	47a0      	blx	r4
  401e2c:	4602      	mov	r2, r0
  401e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e30:	4313      	orrs	r3, r2
  401e32:	627b      	str	r3, [r7, #36]	; 0x24
	pwr_mngt_0_reg &= (uint8_t)~BIT_PWR_MGMT_0_GYRO_MODE_MASK;
  401e34:	7bbb      	ldrb	r3, [r7, #14]
  401e36:	f023 030c 	bic.w	r3, r3, #12
  401e3a:	b2db      	uxtb	r3, r3
  401e3c:	73bb      	strb	r3, [r7, #14]
	pwr_mngt_0_reg |= (uint8_t)ICM426XX_PWR_MGMT_0_GYRO_MODE_LN;
  401e3e:	7bbb      	ldrb	r3, [r7, #14]
  401e40:	f043 030c 	orr.w	r3, r3, #12
  401e44:	b2db      	uxtb	r3, r3
  401e46:	73bb      	strb	r3, [r7, #14]
	status |= inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401e48:	f107 030e 	add.w	r3, r7, #14
  401e4c:	2201      	movs	r2, #1
  401e4e:	214e      	movs	r1, #78	; 0x4e
  401e50:	6878      	ldr	r0, [r7, #4]
  401e52:	4c15      	ldr	r4, [pc, #84]	; (401ea8 <inv_icm426xx_enable_gyro_low_noise_mode+0x248>)
  401e54:	47a0      	blx	r4
  401e56:	4602      	mov	r2, r0
  401e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e5a:	4313      	orrs	r3, r2
  401e5c:	627b      	str	r3, [r7, #36]	; 0x24
	inv_icm426xx_sleep_us(200);
  401e5e:	20c8      	movs	r0, #200	; 0xc8
  401e60:	4b10      	ldr	r3, [pc, #64]	; (401ea4 <inv_icm426xx_enable_gyro_low_noise_mode+0x244>)
  401e62:	4798      	blx	r3
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  401e64:	7dfb      	ldrb	r3, [r7, #23]
  401e66:	2b00      	cmp	r3, #0
  401e68:	d10d      	bne.n	401e86 <inv_icm426xx_enable_gyro_low_noise_mode+0x226>
		/* First data are noisy after enabling sensor 
		 * Keeps track of the start time to discard first sample
		 */
		if(s->fifo_is_used) {
  401e6a:	687b      	ldr	r3, [r7, #4]
  401e6c:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401e70:	2b00      	cmp	r3, #0
  401e72:	d008      	beq.n	401e86 <inv_icm426xx_enable_gyro_low_noise_mode+0x226>
			s->gyro_start_time_us = inv_icm426xx_get_time_us();
  401e74:	4b06      	ldr	r3, [pc, #24]	; (401e90 <inv_icm426xx_enable_gyro_low_noise_mode+0x230>)
  401e76:	4798      	blx	r3
  401e78:	4603      	mov	r3, r0
  401e7a:	460c      	mov	r4, r1
  401e7c:	687a      	ldr	r2, [r7, #4]
  401e7e:	f602 0258 	addw	r2, r2, #2136	; 0x858
  401e82:	e9c2 3400 	strd	r3, r4, [r2]
		}
	}
#endif
	
	return status;
  401e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  401e88:	4618      	mov	r0, r3
  401e8a:	372c      	adds	r7, #44	; 0x2c
  401e8c:	46bd      	mov	sp, r7
  401e8e:	bd90      	pop	{r4, r7, pc}
  401e90:	00401621 	.word	0x00401621
  401e94:	000249f0 	.word	0x000249f0
  401e98:	00403931 	.word	0x00403931
  401e9c:	00402b29 	.word	0x00402b29
  401ea0:	0040192d 	.word	0x0040192d
  401ea4:	00401659 	.word	0x00401659
  401ea8:	004039fd 	.word	0x004039fd

00401eac <inv_icm426xx_disable_gyro>:

int inv_icm426xx_disable_gyro(struct inv_icm426xx * s)
{
  401eac:	b590      	push	{r4, r7, lr}
  401eae:	b087      	sub	sp, #28
  401eb0:	af00      	add	r7, sp, #0
  401eb2:	6078      	str	r0, [r7, #4]
	int status = 0;
  401eb4:	2300      	movs	r3, #0
  401eb6:	617b      	str	r3, [r7, #20]
	uint8_t pwr_mngt_0_reg;
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t accel_mode;
	int stop_fifo_usage = 0;
  401eb8:	2300      	movs	r3, #0
  401eba:	613b      	str	r3, [r7, #16]
	uint8_t data;
	uint8_t accel_cfg_0_reg;
	ICM426XX_ACCEL_CONFIG0_ODR_t acc_odr_bitfield;
#endif

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);	
  401ebc:	f107 030d 	add.w	r3, r7, #13
  401ec0:	2201      	movs	r2, #1
  401ec2:	214e      	movs	r1, #78	; 0x4e
  401ec4:	6878      	ldr	r0, [r7, #4]
  401ec6:	4c48      	ldr	r4, [pc, #288]	; (401fe8 <inv_icm426xx_disable_gyro+0x13c>)
  401ec8:	47a0      	blx	r4
  401eca:	4602      	mov	r2, r0
  401ecc:	697b      	ldr	r3, [r7, #20]
  401ece:	4313      	orrs	r3, r2
  401ed0:	617b      	str	r3, [r7, #20]
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  401ed2:	7b7b      	ldrb	r3, [r7, #13]
  401ed4:	f003 0303 	and.w	r3, r3, #3
  401ed8:	73fb      	strb	r3, [r7, #15]
	if((accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF) && s->fifo_is_used) {
  401eda:	7bfb      	ldrb	r3, [r7, #15]
  401edc:	2b00      	cmp	r3, #0
  401ede:	d10a      	bne.n	401ef6 <inv_icm426xx_disable_gyro+0x4a>
  401ee0:	687b      	ldr	r3, [r7, #4]
  401ee2:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d005      	beq.n	401ef6 <inv_icm426xx_disable_gyro+0x4a>
		/* First FSYNC event after enable is irrelevant */
		s->fsync_to_be_ignored = 1;
  401eea:	687b      	ldr	r3, [r7, #4]
  401eec:	2201      	movs	r2, #1
  401eee:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
		/* FIFO contains Gyro and Accel data if enabled on the OIS path
		 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
		 */
		stop_fifo_usage = 1;
  401ef2:	2301      	movs	r3, #1
  401ef4:	613b      	str	r3, [r7, #16]
	}
#endif
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	/* Check if the accelerometer is enabled in low power mode */
	if (accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) {
  401ef6:	7bfb      	ldrb	r3, [r7, #15]
  401ef8:	2b02      	cmp	r3, #2
  401efa:	d107      	bne.n	401f0c <inv_icm426xx_disable_gyro+0x60>
		/* Select the RC OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC);
  401efc:	2108      	movs	r1, #8
  401efe:	6878      	ldr	r0, [r7, #4]
  401f00:	4b3a      	ldr	r3, [pc, #232]	; (401fec <inv_icm426xx_disable_gyro+0x140>)
  401f02:	4798      	blx	r3
  401f04:	4602      	mov	r2, r0
  401f06:	697b      	ldr	r3, [r7, #20]
  401f08:	4313      	orrs	r3, r2
  401f0a:	617b      	str	r3, [r7, #20]
	}
#endif
	
	pwr_mngt_0_reg &= (uint8_t)~BIT_PWR_MGMT_0_GYRO_MODE_MASK;
  401f0c:	7b7b      	ldrb	r3, [r7, #13]
  401f0e:	f023 030c 	bic.w	r3, r3, #12
  401f12:	b2db      	uxtb	r3, r3
  401f14:	737b      	strb	r3, [r7, #13]
	pwr_mngt_0_reg |= ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF;
  401f16:	7b7b      	ldrb	r3, [r7, #13]
  401f18:	737b      	strb	r3, [r7, #13]
	status |= inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401f1a:	f107 030d 	add.w	r3, r7, #13
  401f1e:	2201      	movs	r2, #1
  401f20:	214e      	movs	r1, #78	; 0x4e
  401f22:	6878      	ldr	r0, [r7, #4]
  401f24:	4c32      	ldr	r4, [pc, #200]	; (401ff0 <inv_icm426xx_disable_gyro+0x144>)
  401f26:	47a0      	blx	r4
  401f28:	4602      	mov	r2, r0
  401f2a:	697b      	ldr	r3, [r7, #20]
  401f2c:	4313      	orrs	r3, r2
  401f2e:	617b      	str	r3, [r7, #20]
	/* keep track of gyro power-off time to check if gyro will be power-on after more than 150ms*/
	s->gyro_power_off_tmst = inv_icm426xx_get_time_us();
  401f30:	4b30      	ldr	r3, [pc, #192]	; (401ff4 <inv_icm426xx_disable_gyro+0x148>)
  401f32:	4798      	blx	r3
  401f34:	4603      	mov	r3, r0
  401f36:	460c      	mov	r4, r1
  401f38:	687a      	ldr	r2, [r7, #4]
  401f3a:	f602 0278 	addw	r2, r2, #2168	; 0x878
  401f3e:	e9c2 3400 	strd	r3, r4, [r2]

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if (accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) {
  401f42:	7bfb      	ldrb	r3, [r7, #15]
  401f44:	2b02      	cmp	r3, #2
  401f46:	d11f      	bne.n	401f88 <inv_icm426xx_disable_gyro+0xdc>
		/* Wait based on accelerometer ODR */
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  401f48:	f107 030b 	add.w	r3, r7, #11
  401f4c:	2201      	movs	r2, #1
  401f4e:	2150      	movs	r1, #80	; 0x50
  401f50:	6878      	ldr	r0, [r7, #4]
  401f52:	4c25      	ldr	r4, [pc, #148]	; (401fe8 <inv_icm426xx_disable_gyro+0x13c>)
  401f54:	47a0      	blx	r4
  401f56:	4602      	mov	r2, r0
  401f58:	697b      	ldr	r3, [r7, #20]
  401f5a:	4313      	orrs	r3, r2
  401f5c:	617b      	str	r3, [r7, #20]
		acc_odr_bitfield = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  401f5e:	7afb      	ldrb	r3, [r7, #11]
  401f60:	f003 030f 	and.w	r3, r3, #15
  401f64:	73bb      	strb	r3, [r7, #14]
		inv_icm426xx_sleep_us(2 * inv_icm426xx_convert_odr_bitfield_to_us(acc_odr_bitfield));
  401f66:	7bbb      	ldrb	r3, [r7, #14]
  401f68:	4618      	mov	r0, r3
  401f6a:	4b23      	ldr	r3, [pc, #140]	; (401ff8 <inv_icm426xx_disable_gyro+0x14c>)
  401f6c:	4798      	blx	r3
  401f6e:	4603      	mov	r3, r0
  401f70:	005b      	lsls	r3, r3, #1
  401f72:	4618      	mov	r0, r3
  401f74:	4b21      	ldr	r3, [pc, #132]	; (401ffc <inv_icm426xx_disable_gyro+0x150>)
  401f76:	4798      	blx	r3
		/* Select the WU OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC);
  401f78:	2100      	movs	r1, #0
  401f7a:	6878      	ldr	r0, [r7, #4]
  401f7c:	4b1b      	ldr	r3, [pc, #108]	; (401fec <inv_icm426xx_disable_gyro+0x140>)
  401f7e:	4798      	blx	r3
  401f80:	4602      	mov	r2, r0
  401f82:	697b      	ldr	r3, [r7, #20]
  401f84:	4313      	orrs	r3, r2
  401f86:	617b      	str	r3, [r7, #20]
	}

	if(stop_fifo_usage && s->fifo_is_used) {
  401f88:	693b      	ldr	r3, [r7, #16]
  401f8a:	2b00      	cmp	r3, #0
  401f8c:	d026      	beq.n	401fdc <inv_icm426xx_disable_gyro+0x130>
  401f8e:	687b      	ldr	r3, [r7, #4]
  401f90:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401f94:	2b00      	cmp	r3, #0
  401f96:	d021      	beq.n	401fdc <inv_icm426xx_disable_gyro+0x130>
		status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401f98:	f107 030c 	add.w	r3, r7, #12
  401f9c:	2201      	movs	r2, #1
  401f9e:	215f      	movs	r1, #95	; 0x5f
  401fa0:	6878      	ldr	r0, [r7, #4]
  401fa2:	4c11      	ldr	r4, [pc, #68]	; (401fe8 <inv_icm426xx_disable_gyro+0x13c>)
  401fa4:	47a0      	blx	r4
  401fa6:	4602      	mov	r2, r0
  401fa8:	697b      	ldr	r3, [r7, #20]
  401faa:	4313      	orrs	r3, r2
  401fac:	617b      	str	r3, [r7, #20]
		data &= (uint8_t)~(BIT_FIFO_CONFIG1_ACCEL_MASK | BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_HIRES_MASK);
  401fae:	7b3b      	ldrb	r3, [r7, #12]
  401fb0:	f023 0313 	bic.w	r3, r3, #19
  401fb4:	b2db      	uxtb	r3, r3
  401fb6:	733b      	strb	r3, [r7, #12]
		status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401fb8:	f107 030c 	add.w	r3, r7, #12
  401fbc:	2201      	movs	r2, #1
  401fbe:	215f      	movs	r1, #95	; 0x5f
  401fc0:	6878      	ldr	r0, [r7, #4]
  401fc2:	4c0b      	ldr	r4, [pc, #44]	; (401ff0 <inv_icm426xx_disable_gyro+0x144>)
  401fc4:	47a0      	blx	r4
  401fc6:	4602      	mov	r2, r0
  401fc8:	697b      	ldr	r3, [r7, #20]
  401fca:	4313      	orrs	r3, r2
  401fcc:	617b      	str	r3, [r7, #20]

		/* Reset FIFO explicitely so the new configuration is taken into account */
		status |= inv_icm426xx_reset_fifo(s);
  401fce:	6878      	ldr	r0, [r7, #4]
  401fd0:	4b0b      	ldr	r3, [pc, #44]	; (402000 <inv_icm426xx_disable_gyro+0x154>)
  401fd2:	4798      	blx	r3
  401fd4:	4602      	mov	r2, r0
  401fd6:	697b      	ldr	r3, [r7, #20]
  401fd8:	4313      	orrs	r3, r2
  401fda:	617b      	str	r3, [r7, #20]
	}
#endif
	
	return status;
  401fdc:	697b      	ldr	r3, [r7, #20]
}
  401fde:	4618      	mov	r0, r3
  401fe0:	371c      	adds	r7, #28
  401fe2:	46bd      	mov	sp, r7
  401fe4:	bd90      	pop	{r4, r7, pc}
  401fe6:	bf00      	nop
  401fe8:	00403931 	.word	0x00403931
  401fec:	0040192d 	.word	0x0040192d
  401ff0:	004039fd 	.word	0x004039fd
  401ff4:	00401621 	.word	0x00401621
  401ff8:	00402b29 	.word	0x00402b29
  401ffc:	00401659 	.word	0x00401659
  402000:	00402dad 	.word	0x00402dad

00402004 <inv_icm426xx_configure_timestamp_resolution>:

	return status;
}

int inv_icm426xx_configure_timestamp_resolution(struct inv_icm426xx * s, ICM426XX_TMST_CONFIG_RESOL_t resol)
{
  402004:	b590      	push	{r4, r7, lr}
  402006:	b085      	sub	sp, #20
  402008:	af00      	add	r7, sp, #0
  40200a:	6078      	str	r0, [r7, #4]
  40200c:	460b      	mov	r3, r1
  40200e:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402010:	2300      	movs	r3, #0
  402012:	60fb      	str	r3, [r7, #12]
	uint8_t value;

	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &value);
  402014:	f107 030b 	add.w	r3, r7, #11
  402018:	2201      	movs	r2, #1
  40201a:	2154      	movs	r1, #84	; 0x54
  40201c:	6878      	ldr	r0, [r7, #4]
  40201e:	4c10      	ldr	r4, [pc, #64]	; (402060 <inv_icm426xx_configure_timestamp_resolution+0x5c>)
  402020:	47a0      	blx	r4
  402022:	4602      	mov	r2, r0
  402024:	68fb      	ldr	r3, [r7, #12]
  402026:	4313      	orrs	r3, r2
  402028:	60fb      	str	r3, [r7, #12]
	value &= (uint8_t)~BIT_TMST_CONFIG_RESOL_MASK;
  40202a:	7afb      	ldrb	r3, [r7, #11]
  40202c:	f023 0308 	bic.w	r3, r3, #8
  402030:	b2db      	uxtb	r3, r3
  402032:	72fb      	strb	r3, [r7, #11]
	value |= (uint8_t)resol;
  402034:	7afa      	ldrb	r2, [r7, #11]
  402036:	78fb      	ldrb	r3, [r7, #3]
  402038:	4313      	orrs	r3, r2
  40203a:	b2db      	uxtb	r3, r3
  40203c:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &value);
  40203e:	f107 030b 	add.w	r3, r7, #11
  402042:	2201      	movs	r2, #1
  402044:	2154      	movs	r1, #84	; 0x54
  402046:	6878      	ldr	r0, [r7, #4]
  402048:	4c06      	ldr	r4, [pc, #24]	; (402064 <inv_icm426xx_configure_timestamp_resolution+0x60>)
  40204a:	47a0      	blx	r4
  40204c:	4602      	mov	r2, r0
  40204e:	68fb      	ldr	r3, [r7, #12]
  402050:	4313      	orrs	r3, r2
  402052:	60fb      	str	r3, [r7, #12]

	return status;
  402054:	68fb      	ldr	r3, [r7, #12]
}
  402056:	4618      	mov	r0, r3
  402058:	3714      	adds	r7, #20
  40205a:	46bd      	mov	sp, r7
  40205c:	bd90      	pop	{r4, r7, pc}
  40205e:	bf00      	nop
  402060:	00403931 	.word	0x00403931
  402064:	004039fd 	.word	0x004039fd

00402068 <inv_icm426xx_get_config_int1>:

	return status;
}

int inv_icm426xx_get_config_int1(struct inv_icm426xx * s, inv_icm426xx_interrupt_parameter_t * interrupt_to_configure)
{
  402068:	b590      	push	{r4, r7, lr}
  40206a:	b085      	sub	sp, #20
  40206c:	af00      	add	r7, sp, #0
  40206e:	6078      	str	r0, [r7, #4]
  402070:	6039      	str	r1, [r7, #0]
	int status = 0;
  402072:	2300      	movs	r3, #0
  402074:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {0};
  402076:	f107 0308 	add.w	r3, r7, #8
  40207a:	2100      	movs	r1, #0
  40207c:	460a      	mov	r2, r1
  40207e:	801a      	strh	r2, [r3, #0]
  402080:	460a      	mov	r2, r1
  402082:	709a      	strb	r2, [r3, #2]

	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE0, 2, data); /* burst read int_source0/int_source1 */
  402084:	f107 0308 	add.w	r3, r7, #8
  402088:	2202      	movs	r2, #2
  40208a:	2165      	movs	r1, #101	; 0x65
  40208c:	6878      	ldr	r0, [r7, #4]
  40208e:	4c43      	ldr	r4, [pc, #268]	; (40219c <inv_icm426xx_get_config_int1+0x134>)
  402090:	47a0      	blx	r4
  402092:	4602      	mov	r2, r0
  402094:	68fb      	ldr	r3, [r7, #12]
  402096:	4313      	orrs	r3, r2
  402098:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  40209a:	2104      	movs	r1, #4
  40209c:	6878      	ldr	r0, [r7, #4]
  40209e:	4b40      	ldr	r3, [pc, #256]	; (4021a0 <inv_icm426xx_get_config_int1+0x138>)
  4020a0:	4798      	blx	r3
  4020a2:	4602      	mov	r2, r0
  4020a4:	68fb      	ldr	r3, [r7, #12]
  4020a6:	4313      	orrs	r3, r2
  4020a8:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE6_B4, 1, &data[2]); /* int_source6 */
  4020aa:	f107 0308 	add.w	r3, r7, #8
  4020ae:	3302      	adds	r3, #2
  4020b0:	2201      	movs	r2, #1
  4020b2:	214d      	movs	r1, #77	; 0x4d
  4020b4:	6878      	ldr	r0, [r7, #4]
  4020b6:	4c39      	ldr	r4, [pc, #228]	; (40219c <inv_icm426xx_get_config_int1+0x134>)
  4020b8:	47a0      	blx	r4
  4020ba:	4602      	mov	r2, r0
  4020bc:	68fb      	ldr	r3, [r7, #12]
  4020be:	4313      	orrs	r3, r2
  4020c0:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  4020c2:	2100      	movs	r1, #0
  4020c4:	6878      	ldr	r0, [r7, #4]
  4020c6:	4b36      	ldr	r3, [pc, #216]	; (4021a0 <inv_icm426xx_get_config_int1+0x138>)
  4020c8:	4798      	blx	r3
  4020ca:	4602      	mov	r2, r0
  4020cc:	68fb      	ldr	r3, [r7, #12]
  4020ce:	4313      	orrs	r3, r2
  4020d0:	60fb      	str	r3, [r7, #12]

	/* Handles INT_SOURCE0 bits */
	interrupt_to_configure->INV_ICM426XX_UI_FSYNC  = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_UI_FSYNC_INT1_EN)  >> BIT_INT_UI_FSYNC_INT_EN_POS);
  4020d2:	7a3b      	ldrb	r3, [r7, #8]
  4020d4:	119b      	asrs	r3, r3, #6
  4020d6:	f003 0301 	and.w	r3, r3, #1
  4020da:	b2da      	uxtb	r2, r3
  4020dc:	683b      	ldr	r3, [r7, #0]
  4020de:	701a      	strb	r2, [r3, #0]
	interrupt_to_configure->INV_ICM426XX_UI_DRDY   = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_UI_DRDY_INT1_EN)   >> BIT_INT_UI_DRDY_INT_EN_POS);
  4020e0:	7a3b      	ldrb	r3, [r7, #8]
  4020e2:	10db      	asrs	r3, r3, #3
  4020e4:	f003 0301 	and.w	r3, r3, #1
  4020e8:	b2da      	uxtb	r2, r3
  4020ea:	683b      	ldr	r3, [r7, #0]
  4020ec:	705a      	strb	r2, [r3, #1]
	interrupt_to_configure->INV_ICM426XX_FIFO_THS  = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_FIFO_THS_INT1_EN)  >> BIT_INT_FIFO_THS_INT_EN_POS);
  4020ee:	7a3b      	ldrb	r3, [r7, #8]
  4020f0:	109b      	asrs	r3, r3, #2
  4020f2:	f003 0301 	and.w	r3, r3, #1
  4020f6:	b2da      	uxtb	r2, r3
  4020f8:	683b      	ldr	r3, [r7, #0]
  4020fa:	709a      	strb	r2, [r3, #2]
	interrupt_to_configure->INV_ICM426XX_FIFO_FULL = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_FIFO_FULL_INT1_EN) >> BIT_INT_FIFO_FULL_INT_EN_POS);
  4020fc:	7a3b      	ldrb	r3, [r7, #8]
  4020fe:	105b      	asrs	r3, r3, #1
  402100:	f003 0301 	and.w	r3, r3, #1
  402104:	b2da      	uxtb	r2, r3
  402106:	683b      	ldr	r3, [r7, #0]
  402108:	70da      	strb	r2, [r3, #3]

	/* Handles INT_SOURCE1 bits */
	interrupt_to_configure->INV_ICM426XX_SMD   = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_SMD_INT1_EN )   >> BIT_INT_SMD_INT_EN_POS);
  40210a:	7a7b      	ldrb	r3, [r7, #9]
  40210c:	10db      	asrs	r3, r3, #3
  40210e:	f003 0301 	and.w	r3, r3, #1
  402112:	b2da      	uxtb	r2, r3
  402114:	683b      	ldr	r3, [r7, #0]
  402116:	711a      	strb	r2, [r3, #4]
	interrupt_to_configure->INV_ICM426XX_WOM_X = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_WOM_X_INT1_EN ) >> BIT_INT_WOM_X_INT_EN_POS);
  402118:	7a7b      	ldrb	r3, [r7, #9]
  40211a:	f003 0301 	and.w	r3, r3, #1
  40211e:	b2da      	uxtb	r2, r3
  402120:	683b      	ldr	r3, [r7, #0]
  402122:	715a      	strb	r2, [r3, #5]
	interrupt_to_configure->INV_ICM426XX_WOM_Y = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_WOM_Y_INT1_EN ) >> BIT_INT_WOM_Y_INT_EN_POS);
  402124:	7a7b      	ldrb	r3, [r7, #9]
  402126:	105b      	asrs	r3, r3, #1
  402128:	f003 0301 	and.w	r3, r3, #1
  40212c:	b2da      	uxtb	r2, r3
  40212e:	683b      	ldr	r3, [r7, #0]
  402130:	719a      	strb	r2, [r3, #6]
	interrupt_to_configure->INV_ICM426XX_WOM_Z = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_WOM_Z_INT1_EN ) >> BIT_INT_WOM_Z_INT_EN_POS);
  402132:	7a7b      	ldrb	r3, [r7, #9]
  402134:	109b      	asrs	r3, r3, #2
  402136:	f003 0301 	and.w	r3, r3, #1
  40213a:	b2da      	uxtb	r2, r3
  40213c:	683b      	ldr	r3, [r7, #0]
  40213e:	71da      	strb	r2, [r3, #7]

	/* Handles INT_SOURCE6 bits */
	interrupt_to_configure->INV_ICM426XX_STEP_DET      = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_STEP_DET_INT1_EN)      >> BIT_INT_STEP_DET_INT_EN_POS);
  402140:	7abb      	ldrb	r3, [r7, #10]
  402142:	115b      	asrs	r3, r3, #5
  402144:	f003 0301 	and.w	r3, r3, #1
  402148:	b2da      	uxtb	r2, r3
  40214a:	683b      	ldr	r3, [r7, #0]
  40214c:	721a      	strb	r2, [r3, #8]
	interrupt_to_configure->INV_ICM426XX_STEP_CNT_OVFL = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_STEP_CNT_OVFL_INT1_EN) >> BIT_INT_STEP_CNT_OVFL_INT_EN_POS);
  40214e:	7abb      	ldrb	r3, [r7, #10]
  402150:	111b      	asrs	r3, r3, #4
  402152:	f003 0301 	and.w	r3, r3, #1
  402156:	b2da      	uxtb	r2, r3
  402158:	683b      	ldr	r3, [r7, #0]
  40215a:	725a      	strb	r2, [r3, #9]
	interrupt_to_configure->INV_ICM426XX_TILT_DET      = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_TILT_DET_INT1_EN)      >> BIT_INT_TILT_DET_INT_EN_POS);
  40215c:	7abb      	ldrb	r3, [r7, #10]
  40215e:	10db      	asrs	r3, r3, #3
  402160:	f003 0301 	and.w	r3, r3, #1
  402164:	b2da      	uxtb	r2, r3
  402166:	683b      	ldr	r3, [r7, #0]
  402168:	729a      	strb	r2, [r3, #10]
	interrupt_to_configure->INV_ICM426XX_SLEEP_DET     = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_SLEEP_DET_INT1_EN)     >> BIT_INT_SLEEP_DET_INT_EN_POS);
  40216a:	7abb      	ldrb	r3, [r7, #10]
  40216c:	105b      	asrs	r3, r3, #1
  40216e:	f003 0301 	and.w	r3, r3, #1
  402172:	b2da      	uxtb	r2, r3
  402174:	683b      	ldr	r3, [r7, #0]
  402176:	72da      	strb	r2, [r3, #11]
	interrupt_to_configure->INV_ICM426XX_WAKE_DET      = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_WAKE_DET_INT1_EN)      >> BIT_INT_WAKE_DET_INT_EN_POS);
  402178:	7abb      	ldrb	r3, [r7, #10]
  40217a:	109b      	asrs	r3, r3, #2
  40217c:	f003 0301 	and.w	r3, r3, #1
  402180:	b2da      	uxtb	r2, r3
  402182:	683b      	ldr	r3, [r7, #0]
  402184:	731a      	strb	r2, [r3, #12]
	interrupt_to_configure->INV_ICM426XX_TAP_DET       = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_TAP_DET_INT1_EN)       >> BIT_INT_TAP_DET_INT_EN_POS);
  402186:	7abb      	ldrb	r3, [r7, #10]
  402188:	f003 0301 	and.w	r3, r3, #1
  40218c:	b2da      	uxtb	r2, r3
  40218e:	683b      	ldr	r3, [r7, #0]
  402190:	735a      	strb	r2, [r3, #13]

	return status;
  402192:	68fb      	ldr	r3, [r7, #12]
}
  402194:	4618      	mov	r0, r3
  402196:	3714      	adds	r7, #20
  402198:	46bd      	mov	sp, r7
  40219a:	bd90      	pop	{r4, r7, pc}
  40219c:	00403931 	.word	0x00403931
  4021a0:	00401675 	.word	0x00401675

004021a4 <inv_icm426xx_set_config_ibi>:

	return status;
}

int inv_icm426xx_set_config_ibi(struct inv_icm426xx * s, inv_icm426xx_interrupt_parameter_t * interrupt_to_configure)
{
  4021a4:	b590      	push	{r4, r7, lr}
  4021a6:	b085      	sub	sp, #20
  4021a8:	af00      	add	r7, sp, #0
  4021aa:	6078      	str	r0, [r7, #4]
  4021ac:	6039      	str	r1, [r7, #0]
	int status = 0;
  4021ae:	2300      	movs	r3, #0
  4021b0:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {0};
  4021b2:	f107 0308 	add.w	r3, r7, #8
  4021b6:	2100      	movs	r1, #0
  4021b8:	460a      	mov	r2, r1
  4021ba:	801a      	strh	r2, [r3, #0]
  4021bc:	460a      	mov	r2, r1
  4021be:	709a      	strb	r2, [r3, #2]

	status |= inv_icm426xx_set_reg_bank(s, 4);
  4021c0:	2104      	movs	r1, #4
  4021c2:	6878      	ldr	r0, [r7, #4]
  4021c4:	4b6a      	ldr	r3, [pc, #424]	; (402370 <inv_icm426xx_set_config_ibi+0x1cc>)
  4021c6:	4798      	blx	r3
  4021c8:	4602      	mov	r2, r0
  4021ca:	68fb      	ldr	r3, [r7, #12]
  4021cc:	4313      	orrs	r3, r2
  4021ce:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE8_B4, 3, data); /* burst read int_source8/int_source9/int_source10 */
  4021d0:	f107 0308 	add.w	r3, r7, #8
  4021d4:	2203      	movs	r2, #3
  4021d6:	214f      	movs	r1, #79	; 0x4f
  4021d8:	6878      	ldr	r0, [r7, #4]
  4021da:	4c66      	ldr	r4, [pc, #408]	; (402374 <inv_icm426xx_set_config_ibi+0x1d0>)
  4021dc:	47a0      	blx	r4
  4021de:	4602      	mov	r2, r0
  4021e0:	68fb      	ldr	r3, [r7, #12]
  4021e2:	4313      	orrs	r3, r2
  4021e4:	60fb      	str	r3, [r7, #12]

	/* Set INT_SOURCE8 bits */
	data[0] &= (uint8_t)~(BIT_INT_SOURCE8_UI_FSYNC_IBI_EN 
  4021e6:	7a3b      	ldrb	r3, [r7, #8]
  4021e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
  4021ec:	b2db      	uxtb	r3, r3
  4021ee:	723b      	strb	r3, [r7, #8]
			| BIT_INT_SOURCE8_UI_DRDY_IBI_EN 
			| BIT_INT_SOURCE8_FIFO_THS_IBI_EN 
			| BIT_INT_SOURCE8_FIFO_FULL_IBI_EN);
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_FSYNC != 0)  << BIT_INT_UI_FSYNC_IBI_EN_POS);
  4021f0:	7a3b      	ldrb	r3, [r7, #8]
  4021f2:	b25a      	sxtb	r2, r3
  4021f4:	683b      	ldr	r3, [r7, #0]
  4021f6:	781b      	ldrb	r3, [r3, #0]
  4021f8:	2b00      	cmp	r3, #0
  4021fa:	d001      	beq.n	402200 <inv_icm426xx_set_config_ibi+0x5c>
  4021fc:	2320      	movs	r3, #32
  4021fe:	e000      	b.n	402202 <inv_icm426xx_set_config_ibi+0x5e>
  402200:	2300      	movs	r3, #0
  402202:	4313      	orrs	r3, r2
  402204:	b25b      	sxtb	r3, r3
  402206:	b2db      	uxtb	r3, r3
  402208:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_DRDY != 0)   << BIT_INT_UI_DRDY_IBI_EN_POS);
  40220a:	7a3b      	ldrb	r3, [r7, #8]
  40220c:	b25a      	sxtb	r2, r3
  40220e:	683b      	ldr	r3, [r7, #0]
  402210:	785b      	ldrb	r3, [r3, #1]
  402212:	2b00      	cmp	r3, #0
  402214:	d001      	beq.n	40221a <inv_icm426xx_set_config_ibi+0x76>
  402216:	2308      	movs	r3, #8
  402218:	e000      	b.n	40221c <inv_icm426xx_set_config_ibi+0x78>
  40221a:	2300      	movs	r3, #0
  40221c:	4313      	orrs	r3, r2
  40221e:	b25b      	sxtb	r3, r3
  402220:	b2db      	uxtb	r3, r3
  402222:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_THS != 0)  << BIT_INT_FIFO_THS_IBI_EN_POS);
  402224:	7a3b      	ldrb	r3, [r7, #8]
  402226:	b25a      	sxtb	r2, r3
  402228:	683b      	ldr	r3, [r7, #0]
  40222a:	789b      	ldrb	r3, [r3, #2]
  40222c:	2b00      	cmp	r3, #0
  40222e:	d001      	beq.n	402234 <inv_icm426xx_set_config_ibi+0x90>
  402230:	2304      	movs	r3, #4
  402232:	e000      	b.n	402236 <inv_icm426xx_set_config_ibi+0x92>
  402234:	2300      	movs	r3, #0
  402236:	4313      	orrs	r3, r2
  402238:	b25b      	sxtb	r3, r3
  40223a:	b2db      	uxtb	r3, r3
  40223c:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_FULL != 0) << BIT_INT_FIFO_FULL_IBI_EN_POS);
  40223e:	7a3b      	ldrb	r3, [r7, #8]
  402240:	b25a      	sxtb	r2, r3
  402242:	683b      	ldr	r3, [r7, #0]
  402244:	78db      	ldrb	r3, [r3, #3]
  402246:	2b00      	cmp	r3, #0
  402248:	d001      	beq.n	40224e <inv_icm426xx_set_config_ibi+0xaa>
  40224a:	2302      	movs	r3, #2
  40224c:	e000      	b.n	402250 <inv_icm426xx_set_config_ibi+0xac>
  40224e:	2300      	movs	r3, #0
  402250:	4313      	orrs	r3, r2
  402252:	b25b      	sxtb	r3, r3
  402254:	b2db      	uxtb	r3, r3
  402256:	723b      	strb	r3, [r7, #8]

	/* Set INT_SOURCE9 bits */
	data[1] &= (uint8_t)~(BIT_INT_SOURCE9_SMD_IBI_EN 
  402258:	7a7b      	ldrb	r3, [r7, #9]
  40225a:	f023 031e 	bic.w	r3, r3, #30
  40225e:	b2db      	uxtb	r3, r3
  402260:	727b      	strb	r3, [r7, #9]
			| BIT_INT_SOURCE9_WOM_X_IBI_EN 
			| BIT_INT_SOURCE9_WOM_Y_IBI_EN 
			| BIT_INT_SOURCE9_WOM_Z_IBI_EN);
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_SMD != 0)   << BIT_INT_SMD_IBI_EN_POS);
  402262:	7a7b      	ldrb	r3, [r7, #9]
  402264:	b25a      	sxtb	r2, r3
  402266:	683b      	ldr	r3, [r7, #0]
  402268:	791b      	ldrb	r3, [r3, #4]
  40226a:	2b00      	cmp	r3, #0
  40226c:	d001      	beq.n	402272 <inv_icm426xx_set_config_ibi+0xce>
  40226e:	2310      	movs	r3, #16
  402270:	e000      	b.n	402274 <inv_icm426xx_set_config_ibi+0xd0>
  402272:	2300      	movs	r3, #0
  402274:	4313      	orrs	r3, r2
  402276:	b25b      	sxtb	r3, r3
  402278:	b2db      	uxtb	r3, r3
  40227a:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_X != 0) << BIT_INT_WOM_X_IBI_EN_POS);
  40227c:	7a7b      	ldrb	r3, [r7, #9]
  40227e:	b25a      	sxtb	r2, r3
  402280:	683b      	ldr	r3, [r7, #0]
  402282:	795b      	ldrb	r3, [r3, #5]
  402284:	2b00      	cmp	r3, #0
  402286:	d001      	beq.n	40228c <inv_icm426xx_set_config_ibi+0xe8>
  402288:	2302      	movs	r3, #2
  40228a:	e000      	b.n	40228e <inv_icm426xx_set_config_ibi+0xea>
  40228c:	2300      	movs	r3, #0
  40228e:	4313      	orrs	r3, r2
  402290:	b25b      	sxtb	r3, r3
  402292:	b2db      	uxtb	r3, r3
  402294:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Y != 0) << BIT_INT_WOM_Y_IBI_EN_POS);
  402296:	7a7b      	ldrb	r3, [r7, #9]
  402298:	b25a      	sxtb	r2, r3
  40229a:	683b      	ldr	r3, [r7, #0]
  40229c:	799b      	ldrb	r3, [r3, #6]
  40229e:	2b00      	cmp	r3, #0
  4022a0:	d001      	beq.n	4022a6 <inv_icm426xx_set_config_ibi+0x102>
  4022a2:	2304      	movs	r3, #4
  4022a4:	e000      	b.n	4022a8 <inv_icm426xx_set_config_ibi+0x104>
  4022a6:	2300      	movs	r3, #0
  4022a8:	4313      	orrs	r3, r2
  4022aa:	b25b      	sxtb	r3, r3
  4022ac:	b2db      	uxtb	r3, r3
  4022ae:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Z != 0) << BIT_INT_WOM_Z_IBI_EN_POS);
  4022b0:	7a7b      	ldrb	r3, [r7, #9]
  4022b2:	b25a      	sxtb	r2, r3
  4022b4:	683b      	ldr	r3, [r7, #0]
  4022b6:	79db      	ldrb	r3, [r3, #7]
  4022b8:	2b00      	cmp	r3, #0
  4022ba:	d001      	beq.n	4022c0 <inv_icm426xx_set_config_ibi+0x11c>
  4022bc:	2308      	movs	r3, #8
  4022be:	e000      	b.n	4022c2 <inv_icm426xx_set_config_ibi+0x11e>
  4022c0:	2300      	movs	r3, #0
  4022c2:	4313      	orrs	r3, r2
  4022c4:	b25b      	sxtb	r3, r3
  4022c6:	b2db      	uxtb	r3, r3
  4022c8:	727b      	strb	r3, [r7, #9]

	/* Set INT_SOURCE10 bits */
	data[2] &= (uint8_t)~(BIT_INT_SOURCE10_STEP_DET_IBI_EN
  4022ca:	7abb      	ldrb	r3, [r7, #10]
  4022cc:	f023 0339 	bic.w	r3, r3, #57	; 0x39
  4022d0:	b2db      	uxtb	r3, r3
  4022d2:	72bb      	strb	r3, [r7, #10]
			| BIT_INT_SOURCE10_STEP_CNT_OVFL_IBI_EN
			| BIT_INT_SOURCE10_TILT_DET_IBI_EN
			| BIT_INT_SOURCE10_TAP_DET_IBI_EN);
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_DET != 0)      << BIT_INT_STEP_DET_IBI_EN_POS);
  4022d4:	7abb      	ldrb	r3, [r7, #10]
  4022d6:	b25a      	sxtb	r2, r3
  4022d8:	683b      	ldr	r3, [r7, #0]
  4022da:	7a1b      	ldrb	r3, [r3, #8]
  4022dc:	2b00      	cmp	r3, #0
  4022de:	d001      	beq.n	4022e4 <inv_icm426xx_set_config_ibi+0x140>
  4022e0:	2320      	movs	r3, #32
  4022e2:	e000      	b.n	4022e6 <inv_icm426xx_set_config_ibi+0x142>
  4022e4:	2300      	movs	r3, #0
  4022e6:	4313      	orrs	r3, r2
  4022e8:	b25b      	sxtb	r3, r3
  4022ea:	b2db      	uxtb	r3, r3
  4022ec:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_CNT_OVFL != 0) << BIT_INT_STEP_CNT_OVFL_IBI_EN_POS);
  4022ee:	7abb      	ldrb	r3, [r7, #10]
  4022f0:	b25a      	sxtb	r2, r3
  4022f2:	683b      	ldr	r3, [r7, #0]
  4022f4:	7a5b      	ldrb	r3, [r3, #9]
  4022f6:	2b00      	cmp	r3, #0
  4022f8:	d001      	beq.n	4022fe <inv_icm426xx_set_config_ibi+0x15a>
  4022fa:	2310      	movs	r3, #16
  4022fc:	e000      	b.n	402300 <inv_icm426xx_set_config_ibi+0x15c>
  4022fe:	2300      	movs	r3, #0
  402300:	4313      	orrs	r3, r2
  402302:	b25b      	sxtb	r3, r3
  402304:	b2db      	uxtb	r3, r3
  402306:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TILT_DET != 0)      << BIT_INT_TILT_DET_IBI_EN_POS);
  402308:	7abb      	ldrb	r3, [r7, #10]
  40230a:	b25a      	sxtb	r2, r3
  40230c:	683b      	ldr	r3, [r7, #0]
  40230e:	7a9b      	ldrb	r3, [r3, #10]
  402310:	2b00      	cmp	r3, #0
  402312:	d001      	beq.n	402318 <inv_icm426xx_set_config_ibi+0x174>
  402314:	2308      	movs	r3, #8
  402316:	e000      	b.n	40231a <inv_icm426xx_set_config_ibi+0x176>
  402318:	2300      	movs	r3, #0
  40231a:	4313      	orrs	r3, r2
  40231c:	b25b      	sxtb	r3, r3
  40231e:	b2db      	uxtb	r3, r3
  402320:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TAP_DET != 0)       << BIT_INT_TAP_DET_IBI_EN_POS);
  402322:	7abb      	ldrb	r3, [r7, #10]
  402324:	b25a      	sxtb	r2, r3
  402326:	683b      	ldr	r3, [r7, #0]
  402328:	7b5b      	ldrb	r3, [r3, #13]
  40232a:	2b00      	cmp	r3, #0
  40232c:	bf14      	ite	ne
  40232e:	2301      	movne	r3, #1
  402330:	2300      	moveq	r3, #0
  402332:	b2db      	uxtb	r3, r3
  402334:	b25b      	sxtb	r3, r3
  402336:	4313      	orrs	r3, r2
  402338:	b25b      	sxtb	r3, r3
  40233a:	b2db      	uxtb	r3, r3
  40233c:	72bb      	strb	r3, [r7, #10]

	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE8_B4, 3, data); /* burst write int_source8/int_source9/int_source10 */
  40233e:	f107 0308 	add.w	r3, r7, #8
  402342:	2203      	movs	r2, #3
  402344:	214f      	movs	r1, #79	; 0x4f
  402346:	6878      	ldr	r0, [r7, #4]
  402348:	4c0b      	ldr	r4, [pc, #44]	; (402378 <inv_icm426xx_set_config_ibi+0x1d4>)
  40234a:	47a0      	blx	r4
  40234c:	4602      	mov	r2, r0
  40234e:	68fb      	ldr	r3, [r7, #12]
  402350:	4313      	orrs	r3, r2
  402352:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  402354:	2100      	movs	r1, #0
  402356:	6878      	ldr	r0, [r7, #4]
  402358:	4b05      	ldr	r3, [pc, #20]	; (402370 <inv_icm426xx_set_config_ibi+0x1cc>)
  40235a:	4798      	blx	r3
  40235c:	4602      	mov	r2, r0
  40235e:	68fb      	ldr	r3, [r7, #12]
  402360:	4313      	orrs	r3, r2
  402362:	60fb      	str	r3, [r7, #12]
	
	return status;
  402364:	68fb      	ldr	r3, [r7, #12]
}
  402366:	4618      	mov	r0, r3
  402368:	3714      	adds	r7, #20
  40236a:	46bd      	mov	sp, r7
  40236c:	bd90      	pop	{r4, r7, pc}
  40236e:	bf00      	nop
  402370:	00401675 	.word	0x00401675
  402374:	00403931 	.word	0x00403931
  402378:	004039fd 	.word	0x004039fd

0040237c <inv_icm426xx_set_config_int1>:

int inv_icm426xx_set_config_int1(struct inv_icm426xx * s, inv_icm426xx_interrupt_parameter_t * interrupt_to_configure)
{
  40237c:	b590      	push	{r4, r7, lr}
  40237e:	b085      	sub	sp, #20
  402380:	af00      	add	r7, sp, #0
  402382:	6078      	str	r0, [r7, #4]
  402384:	6039      	str	r1, [r7, #0]
	int status = 0;
  402386:	2300      	movs	r3, #0
  402388:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {0};
  40238a:	f107 0308 	add.w	r3, r7, #8
  40238e:	2100      	movs	r1, #0
  402390:	460a      	mov	r2, r1
  402392:	801a      	strh	r2, [r3, #0]
  402394:	460a      	mov	r2, r1
  402396:	709a      	strb	r2, [r3, #2]

	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE0, 2, data); /* burst read int_source0/int_source1 */
  402398:	f107 0308 	add.w	r3, r7, #8
  40239c:	2202      	movs	r2, #2
  40239e:	2165      	movs	r1, #101	; 0x65
  4023a0:	6878      	ldr	r0, [r7, #4]
  4023a2:	4c82      	ldr	r4, [pc, #520]	; (4025ac <inv_icm426xx_set_config_int1+0x230>)
  4023a4:	47a0      	blx	r4
  4023a6:	4602      	mov	r2, r0
  4023a8:	68fb      	ldr	r3, [r7, #12]
  4023aa:	4313      	orrs	r3, r2
  4023ac:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  4023ae:	2104      	movs	r1, #4
  4023b0:	6878      	ldr	r0, [r7, #4]
  4023b2:	4b7f      	ldr	r3, [pc, #508]	; (4025b0 <inv_icm426xx_set_config_int1+0x234>)
  4023b4:	4798      	blx	r3
  4023b6:	4602      	mov	r2, r0
  4023b8:	68fb      	ldr	r3, [r7, #12]
  4023ba:	4313      	orrs	r3, r2
  4023bc:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE6_B4, 1, &data[2]); /* switch to bank4 for int_source6 */
  4023be:	f107 0308 	add.w	r3, r7, #8
  4023c2:	3302      	adds	r3, #2
  4023c4:	2201      	movs	r2, #1
  4023c6:	214d      	movs	r1, #77	; 0x4d
  4023c8:	6878      	ldr	r0, [r7, #4]
  4023ca:	4c78      	ldr	r4, [pc, #480]	; (4025ac <inv_icm426xx_set_config_int1+0x230>)
  4023cc:	47a0      	blx	r4
  4023ce:	4602      	mov	r2, r0
  4023d0:	68fb      	ldr	r3, [r7, #12]
  4023d2:	4313      	orrs	r3, r2
  4023d4:	60fb      	str	r3, [r7, #12]

	/* Set INT_SOURCE0 bits */
	data[0] &= (uint8_t)~(BIT_INT_SOURCE0_UI_FSYNC_INT1_EN 
  4023d6:	7a3b      	ldrb	r3, [r7, #8]
  4023d8:	f023 034e 	bic.w	r3, r3, #78	; 0x4e
  4023dc:	b2db      	uxtb	r3, r3
  4023de:	723b      	strb	r3, [r7, #8]
			| BIT_INT_SOURCE0_UI_DRDY_INT1_EN 
			| BIT_INT_SOURCE0_FIFO_THS_INT1_EN 
			| BIT_INT_SOURCE0_FIFO_FULL_INT1_EN);
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_FSYNC != 0)  << BIT_INT_UI_FSYNC_INT_EN_POS);
  4023e0:	7a3b      	ldrb	r3, [r7, #8]
  4023e2:	b25a      	sxtb	r2, r3
  4023e4:	683b      	ldr	r3, [r7, #0]
  4023e6:	781b      	ldrb	r3, [r3, #0]
  4023e8:	2b00      	cmp	r3, #0
  4023ea:	d001      	beq.n	4023f0 <inv_icm426xx_set_config_int1+0x74>
  4023ec:	2340      	movs	r3, #64	; 0x40
  4023ee:	e000      	b.n	4023f2 <inv_icm426xx_set_config_int1+0x76>
  4023f0:	2300      	movs	r3, #0
  4023f2:	4313      	orrs	r3, r2
  4023f4:	b25b      	sxtb	r3, r3
  4023f6:	b2db      	uxtb	r3, r3
  4023f8:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_DRDY != 0)   << BIT_INT_UI_DRDY_INT_EN_POS);
  4023fa:	7a3b      	ldrb	r3, [r7, #8]
  4023fc:	b25a      	sxtb	r2, r3
  4023fe:	683b      	ldr	r3, [r7, #0]
  402400:	785b      	ldrb	r3, [r3, #1]
  402402:	2b00      	cmp	r3, #0
  402404:	d001      	beq.n	40240a <inv_icm426xx_set_config_int1+0x8e>
  402406:	2308      	movs	r3, #8
  402408:	e000      	b.n	40240c <inv_icm426xx_set_config_int1+0x90>
  40240a:	2300      	movs	r3, #0
  40240c:	4313      	orrs	r3, r2
  40240e:	b25b      	sxtb	r3, r3
  402410:	b2db      	uxtb	r3, r3
  402412:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_THS != 0)  << BIT_INT_FIFO_THS_INT_EN_POS);
  402414:	7a3b      	ldrb	r3, [r7, #8]
  402416:	b25a      	sxtb	r2, r3
  402418:	683b      	ldr	r3, [r7, #0]
  40241a:	789b      	ldrb	r3, [r3, #2]
  40241c:	2b00      	cmp	r3, #0
  40241e:	d001      	beq.n	402424 <inv_icm426xx_set_config_int1+0xa8>
  402420:	2304      	movs	r3, #4
  402422:	e000      	b.n	402426 <inv_icm426xx_set_config_int1+0xaa>
  402424:	2300      	movs	r3, #0
  402426:	4313      	orrs	r3, r2
  402428:	b25b      	sxtb	r3, r3
  40242a:	b2db      	uxtb	r3, r3
  40242c:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_FULL != 0) << BIT_INT_FIFO_FULL_INT_EN_POS);
  40242e:	7a3b      	ldrb	r3, [r7, #8]
  402430:	b25a      	sxtb	r2, r3
  402432:	683b      	ldr	r3, [r7, #0]
  402434:	78db      	ldrb	r3, [r3, #3]
  402436:	2b00      	cmp	r3, #0
  402438:	d001      	beq.n	40243e <inv_icm426xx_set_config_int1+0xc2>
  40243a:	2302      	movs	r3, #2
  40243c:	e000      	b.n	402440 <inv_icm426xx_set_config_int1+0xc4>
  40243e:	2300      	movs	r3, #0
  402440:	4313      	orrs	r3, r2
  402442:	b25b      	sxtb	r3, r3
  402444:	b2db      	uxtb	r3, r3
  402446:	723b      	strb	r3, [r7, #8]

	/* Set INT_SOURCE1 bits */
	data[1] &= (uint8_t)~(BIT_INT_SOURCE1_SMD_INT1_EN 
  402448:	7a7b      	ldrb	r3, [r7, #9]
  40244a:	f023 030f 	bic.w	r3, r3, #15
  40244e:	b2db      	uxtb	r3, r3
  402450:	727b      	strb	r3, [r7, #9]
			| BIT_INT_SOURCE1_WOM_X_INT1_EN 
			| BIT_INT_SOURCE1_WOM_Y_INT1_EN 
			| BIT_INT_SOURCE1_WOM_Z_INT1_EN);
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_SMD   != 0) << BIT_INT_SMD_INT_EN_POS);
  402452:	7a7b      	ldrb	r3, [r7, #9]
  402454:	b25a      	sxtb	r2, r3
  402456:	683b      	ldr	r3, [r7, #0]
  402458:	791b      	ldrb	r3, [r3, #4]
  40245a:	2b00      	cmp	r3, #0
  40245c:	d001      	beq.n	402462 <inv_icm426xx_set_config_int1+0xe6>
  40245e:	2308      	movs	r3, #8
  402460:	e000      	b.n	402464 <inv_icm426xx_set_config_int1+0xe8>
  402462:	2300      	movs	r3, #0
  402464:	4313      	orrs	r3, r2
  402466:	b25b      	sxtb	r3, r3
  402468:	b2db      	uxtb	r3, r3
  40246a:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_X != 0) << BIT_INT_WOM_X_INT_EN_POS);
  40246c:	7a7b      	ldrb	r3, [r7, #9]
  40246e:	b25a      	sxtb	r2, r3
  402470:	683b      	ldr	r3, [r7, #0]
  402472:	795b      	ldrb	r3, [r3, #5]
  402474:	2b00      	cmp	r3, #0
  402476:	bf14      	ite	ne
  402478:	2301      	movne	r3, #1
  40247a:	2300      	moveq	r3, #0
  40247c:	b2db      	uxtb	r3, r3
  40247e:	b25b      	sxtb	r3, r3
  402480:	4313      	orrs	r3, r2
  402482:	b25b      	sxtb	r3, r3
  402484:	b2db      	uxtb	r3, r3
  402486:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Y != 0) << BIT_INT_WOM_Y_INT_EN_POS);
  402488:	7a7b      	ldrb	r3, [r7, #9]
  40248a:	b25a      	sxtb	r2, r3
  40248c:	683b      	ldr	r3, [r7, #0]
  40248e:	799b      	ldrb	r3, [r3, #6]
  402490:	2b00      	cmp	r3, #0
  402492:	d001      	beq.n	402498 <inv_icm426xx_set_config_int1+0x11c>
  402494:	2302      	movs	r3, #2
  402496:	e000      	b.n	40249a <inv_icm426xx_set_config_int1+0x11e>
  402498:	2300      	movs	r3, #0
  40249a:	4313      	orrs	r3, r2
  40249c:	b25b      	sxtb	r3, r3
  40249e:	b2db      	uxtb	r3, r3
  4024a0:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Z != 0) << BIT_INT_WOM_Z_INT_EN_POS);
  4024a2:	7a7b      	ldrb	r3, [r7, #9]
  4024a4:	b25a      	sxtb	r2, r3
  4024a6:	683b      	ldr	r3, [r7, #0]
  4024a8:	79db      	ldrb	r3, [r3, #7]
  4024aa:	2b00      	cmp	r3, #0
  4024ac:	d001      	beq.n	4024b2 <inv_icm426xx_set_config_int1+0x136>
  4024ae:	2304      	movs	r3, #4
  4024b0:	e000      	b.n	4024b4 <inv_icm426xx_set_config_int1+0x138>
  4024b2:	2300      	movs	r3, #0
  4024b4:	4313      	orrs	r3, r2
  4024b6:	b25b      	sxtb	r3, r3
  4024b8:	b2db      	uxtb	r3, r3
  4024ba:	727b      	strb	r3, [r7, #9]

	/* Set INT_SOURCE6 bits */
	data[2] &= (uint8_t)~(BIT_INT_SOURCE6_STEP_DET_INT1_EN
  4024bc:	7abb      	ldrb	r3, [r7, #10]
  4024be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  4024c2:	b2db      	uxtb	r3, r3
  4024c4:	72bb      	strb	r3, [r7, #10]
			| BIT_INT_SOURCE6_STEP_CNT_OVFL_INT1_EN
			| BIT_INT_SOURCE6_TILT_DET_INT1_EN
			| BIT_INT_SOURCE6_SLEEP_DET_INT1_EN
			| BIT_INT_SOURCE6_WAKE_DET_INT1_EN
			| BIT_INT_SOURCE6_TAP_DET_INT1_EN);
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_DET != 0)      << BIT_INT_STEP_DET_INT_EN_POS);
  4024c6:	7abb      	ldrb	r3, [r7, #10]
  4024c8:	b25a      	sxtb	r2, r3
  4024ca:	683b      	ldr	r3, [r7, #0]
  4024cc:	7a1b      	ldrb	r3, [r3, #8]
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d001      	beq.n	4024d6 <inv_icm426xx_set_config_int1+0x15a>
  4024d2:	2320      	movs	r3, #32
  4024d4:	e000      	b.n	4024d8 <inv_icm426xx_set_config_int1+0x15c>
  4024d6:	2300      	movs	r3, #0
  4024d8:	4313      	orrs	r3, r2
  4024da:	b25b      	sxtb	r3, r3
  4024dc:	b2db      	uxtb	r3, r3
  4024de:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_CNT_OVFL != 0) << BIT_INT_STEP_CNT_OVFL_INT_EN_POS);
  4024e0:	7abb      	ldrb	r3, [r7, #10]
  4024e2:	b25a      	sxtb	r2, r3
  4024e4:	683b      	ldr	r3, [r7, #0]
  4024e6:	7a5b      	ldrb	r3, [r3, #9]
  4024e8:	2b00      	cmp	r3, #0
  4024ea:	d001      	beq.n	4024f0 <inv_icm426xx_set_config_int1+0x174>
  4024ec:	2310      	movs	r3, #16
  4024ee:	e000      	b.n	4024f2 <inv_icm426xx_set_config_int1+0x176>
  4024f0:	2300      	movs	r3, #0
  4024f2:	4313      	orrs	r3, r2
  4024f4:	b25b      	sxtb	r3, r3
  4024f6:	b2db      	uxtb	r3, r3
  4024f8:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TILT_DET != 0)      << BIT_INT_TILT_DET_INT_EN_POS);
  4024fa:	7abb      	ldrb	r3, [r7, #10]
  4024fc:	b25a      	sxtb	r2, r3
  4024fe:	683b      	ldr	r3, [r7, #0]
  402500:	7a9b      	ldrb	r3, [r3, #10]
  402502:	2b00      	cmp	r3, #0
  402504:	d001      	beq.n	40250a <inv_icm426xx_set_config_int1+0x18e>
  402506:	2308      	movs	r3, #8
  402508:	e000      	b.n	40250c <inv_icm426xx_set_config_int1+0x190>
  40250a:	2300      	movs	r3, #0
  40250c:	4313      	orrs	r3, r2
  40250e:	b25b      	sxtb	r3, r3
  402510:	b2db      	uxtb	r3, r3
  402512:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_SLEEP_DET != 0)     << BIT_INT_SLEEP_DET_INT_EN_POS);
  402514:	7abb      	ldrb	r3, [r7, #10]
  402516:	b25a      	sxtb	r2, r3
  402518:	683b      	ldr	r3, [r7, #0]
  40251a:	7adb      	ldrb	r3, [r3, #11]
  40251c:	2b00      	cmp	r3, #0
  40251e:	d001      	beq.n	402524 <inv_icm426xx_set_config_int1+0x1a8>
  402520:	2302      	movs	r3, #2
  402522:	e000      	b.n	402526 <inv_icm426xx_set_config_int1+0x1aa>
  402524:	2300      	movs	r3, #0
  402526:	4313      	orrs	r3, r2
  402528:	b25b      	sxtb	r3, r3
  40252a:	b2db      	uxtb	r3, r3
  40252c:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_WAKE_DET != 0)      << BIT_INT_WAKE_DET_INT_EN_POS);
  40252e:	7abb      	ldrb	r3, [r7, #10]
  402530:	b25a      	sxtb	r2, r3
  402532:	683b      	ldr	r3, [r7, #0]
  402534:	7b1b      	ldrb	r3, [r3, #12]
  402536:	2b00      	cmp	r3, #0
  402538:	d001      	beq.n	40253e <inv_icm426xx_set_config_int1+0x1c2>
  40253a:	2304      	movs	r3, #4
  40253c:	e000      	b.n	402540 <inv_icm426xx_set_config_int1+0x1c4>
  40253e:	2300      	movs	r3, #0
  402540:	4313      	orrs	r3, r2
  402542:	b25b      	sxtb	r3, r3
  402544:	b2db      	uxtb	r3, r3
  402546:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TAP_DET != 0)       << BIT_INT_TAP_DET_INT_EN_POS);
  402548:	7abb      	ldrb	r3, [r7, #10]
  40254a:	b25a      	sxtb	r2, r3
  40254c:	683b      	ldr	r3, [r7, #0]
  40254e:	7b5b      	ldrb	r3, [r3, #13]
  402550:	2b00      	cmp	r3, #0
  402552:	bf14      	ite	ne
  402554:	2301      	movne	r3, #1
  402556:	2300      	moveq	r3, #0
  402558:	b2db      	uxtb	r3, r3
  40255a:	b25b      	sxtb	r3, r3
  40255c:	4313      	orrs	r3, r2
  40255e:	b25b      	sxtb	r3, r3
  402560:	b2db      	uxtb	r3, r3
  402562:	72bb      	strb	r3, [r7, #10]
	
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE6_B4, 1, &data[2]); /* start with int_source6 since we are still in bank4 */
  402564:	f107 0308 	add.w	r3, r7, #8
  402568:	3302      	adds	r3, #2
  40256a:	2201      	movs	r2, #1
  40256c:	214d      	movs	r1, #77	; 0x4d
  40256e:	6878      	ldr	r0, [r7, #4]
  402570:	4c10      	ldr	r4, [pc, #64]	; (4025b4 <inv_icm426xx_set_config_int1+0x238>)
  402572:	47a0      	blx	r4
  402574:	4602      	mov	r2, r0
  402576:	68fb      	ldr	r3, [r7, #12]
  402578:	4313      	orrs	r3, r2
  40257a:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  40257c:	2100      	movs	r1, #0
  40257e:	6878      	ldr	r0, [r7, #4]
  402580:	4b0b      	ldr	r3, [pc, #44]	; (4025b0 <inv_icm426xx_set_config_int1+0x234>)
  402582:	4798      	blx	r3
  402584:	4602      	mov	r2, r0
  402586:	68fb      	ldr	r3, [r7, #12]
  402588:	4313      	orrs	r3, r2
  40258a:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE0, 2, data); /* burst write int_source0/int_source1 */
  40258c:	f107 0308 	add.w	r3, r7, #8
  402590:	2202      	movs	r2, #2
  402592:	2165      	movs	r1, #101	; 0x65
  402594:	6878      	ldr	r0, [r7, #4]
  402596:	4c07      	ldr	r4, [pc, #28]	; (4025b4 <inv_icm426xx_set_config_int1+0x238>)
  402598:	47a0      	blx	r4
  40259a:	4602      	mov	r2, r0
  40259c:	68fb      	ldr	r3, [r7, #12]
  40259e:	4313      	orrs	r3, r2
  4025a0:	60fb      	str	r3, [r7, #12]

	return status;
  4025a2:	68fb      	ldr	r3, [r7, #12]
}
  4025a4:	4618      	mov	r0, r3
  4025a6:	3714      	adds	r7, #20
  4025a8:	46bd      	mov	sp, r7
  4025aa:	bd90      	pop	{r4, r7, pc}
  4025ac:	00403931 	.word	0x00403931
  4025b0:	00401675 	.word	0x00401675
  4025b4:	004039fd 	.word	0x004039fd

004025b8 <inv_icm426xx_get_data_from_fifo>:
	
	return status;
}

int inv_icm426xx_get_data_from_fifo(struct inv_icm426xx * s)
{
  4025b8:	b590      	push	{r4, r7, lr}
  4025ba:	b091      	sub	sp, #68	; 0x44
  4025bc:	af00      	add	r7, sp, #0
  4025be:	6078      	str	r0, [r7, #4]
	int status = 0; 
  4025c0:	2300      	movs	r3, #0
  4025c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t int_status;
	uint8_t data_reg = 0;
  4025c4:	2300      	movs	r3, #0
  4025c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t data[2];
	uint16_t packet_count_i, packet_count = 0;
  4025ca:	2300      	movs	r3, #0
  4025cc:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t packet_size = FIFO_HEADER_SIZE + FIFO_ACCEL_DATA_SIZE + FIFO_GYRO_DATA_SIZE + FIFO_TEMP_DATA_SIZE + FIFO_TS_FSYNC_SIZE;
  4025ce:	2310      	movs	r3, #16
  4025d0:	873b      	strh	r3, [r7, #56]	; 0x38
	fifo_header_t * header;

	/* Ensure data ready status bit is set */
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_STATUS, 1, &int_status);
  4025d2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
  4025d6:	2201      	movs	r2, #1
  4025d8:	212d      	movs	r1, #45	; 0x2d
  4025da:	6878      	ldr	r0, [r7, #4]
  4025dc:	4c99      	ldr	r4, [pc, #612]	; (402844 <inv_icm426xx_get_data_from_fifo+0x28c>)
  4025de:	47a0      	blx	r4
  4025e0:	4602      	mov	r2, r0
  4025e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4025e4:	4313      	orrs	r3, r2
  4025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(status)
  4025e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4025ea:	2b00      	cmp	r3, #0
  4025ec:	d001      	beq.n	4025f2 <inv_icm426xx_get_data_from_fifo+0x3a>
		return status;
  4025ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4025f0:	e290      	b.n	402b14 <inv_icm426xx_get_data_from_fifo+0x55c>

	if((int_status & BIT_INT_STATUS_FIFO_THS) || (int_status & BIT_INT_STATUS_FIFO_FULL)) {
  4025f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4025f6:	f003 0304 	and.w	r3, r3, #4
  4025fa:	2b00      	cmp	r3, #0
  4025fc:	d106      	bne.n	40260c <inv_icm426xx_get_data_from_fifo+0x54>
  4025fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402602:	f003 0302 	and.w	r3, r3, #2
  402606:	2b00      	cmp	r3, #0
  402608:	f000 8283 	beq.w	402b12 <inv_icm426xx_get_data_from_fifo+0x55a>
		
		/* FIFO record mode configured at driver init, so we read packet number, not byte count */
		status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_COUNTH, 2, data);
  40260c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  402610:	2202      	movs	r2, #2
  402612:	212e      	movs	r1, #46	; 0x2e
  402614:	6878      	ldr	r0, [r7, #4]
  402616:	4c8b      	ldr	r4, [pc, #556]	; (402844 <inv_icm426xx_get_data_from_fifo+0x28c>)
  402618:	47a0      	blx	r4
  40261a:	4602      	mov	r2, r0
  40261c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40261e:	4313      	orrs	r3, r2
  402620:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(status != INV_ERROR_SUCCESS)
  402622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402624:	2b00      	cmp	r3, #0
  402626:	d001      	beq.n	40262c <inv_icm426xx_get_data_from_fifo+0x74>
			return status;
  402628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40262a:	e273      	b.n	402b14 <inv_icm426xx_get_data_from_fifo+0x55c>
		inv_icm426xx_format_data(ICM426XX_INTF_CONFIG0_DATA_LITTLE_ENDIAN, data, &packet_count);
  40262c:	f107 022a 	add.w	r2, r7, #42	; 0x2a
  402630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  402634:	4619      	mov	r1, r3
  402636:	2000      	movs	r0, #0
  402638:	4b83      	ldr	r3, [pc, #524]	; (402848 <inv_icm426xx_get_data_from_fifo+0x290>)
  40263a:	4798      	blx	r3

		if (packet_count > 0) {
  40263c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40263e:	2b00      	cmp	r3, #0
  402640:	f000 8267 	beq.w	402b12 <inv_icm426xx_get_data_from_fifo+0x55a>
			/* Read FIFO only when data is expected in FIFO */
			/* fifo_idx type variable must be large enough to parse the FIFO_MIRRORING_SIZE */
			uint16_t fifo_idx = 0;
  402644:	2300      	movs	r3, #0
  402646:	86fb      	strh	r3, [r7, #54]	; 0x36

			if(s->fifo_highres_enabled)
  402648:	687b      	ldr	r3, [r7, #4]
  40264a:	f893 3869 	ldrb.w	r3, [r3, #2153]	; 0x869
  40264e:	2b00      	cmp	r3, #0
  402650:	d001      	beq.n	402656 <inv_icm426xx_get_data_from_fifo+0x9e>
				packet_size = FIFO_20BYTES_PACKET_SIZE;
  402652:	2314      	movs	r3, #20
  402654:	873b      	strh	r3, [r7, #56]	; 0x38

			if(s->transport.serif.serif_type == ICM426XX_UI_I3C) {
  402656:	687b      	ldr	r3, [r7, #4]
  402658:	7e1b      	ldrb	r3, [r3, #24]
  40265a:	2b02      	cmp	r3, #2
  40265c:	d124      	bne.n	4026a8 <inv_icm426xx_get_data_from_fifo+0xf0>
				To handle this, 2 solution :
				- handle fifo lost packet & partial read
				- read packet by packet
				2nd solution prefered here because less heavy from driver point of view but it is less optimal
				for the timing because we have to initiate N transactions in any case */
				for(packet_count_i = 0 ; packet_count_i < packet_count ; packet_count_i++) {
  40265e:	2300      	movs	r3, #0
  402660:	877b      	strh	r3, [r7, #58]	; 0x3a
  402662:	e01c      	b.n	40269e <inv_icm426xx_get_data_from_fifo+0xe6>
					status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_DATA, packet_size, &s->fifo_data[packet_count_i*packet_size]);
  402664:	8f39      	ldrh	r1, [r7, #56]	; 0x38
  402666:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  402668:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
  40266a:	fb02 f303 	mul.w	r3, r2, r3
  40266e:	3340      	adds	r3, #64	; 0x40
  402670:	687a      	ldr	r2, [r7, #4]
  402672:	4413      	add	r3, r2
  402674:	3304      	adds	r3, #4
  402676:	460a      	mov	r2, r1
  402678:	2130      	movs	r1, #48	; 0x30
  40267a:	6878      	ldr	r0, [r7, #4]
  40267c:	4c71      	ldr	r4, [pc, #452]	; (402844 <inv_icm426xx_get_data_from_fifo+0x28c>)
  40267e:	47a0      	blx	r4
  402680:	4602      	mov	r2, r0
  402682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402684:	4313      	orrs	r3, r2
  402686:	63fb      	str	r3, [r7, #60]	; 0x3c
					if(status) {
  402688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40268a:	2b00      	cmp	r3, #0
  40268c:	d004      	beq.n	402698 <inv_icm426xx_get_data_from_fifo+0xe0>
						/* sensor data is in FIFO according to FIFO_COUNT but failed to read FIFO,
							  reset FIFO and try next chance */
						inv_icm426xx_reset_fifo(s);
  40268e:	6878      	ldr	r0, [r7, #4]
  402690:	4b6e      	ldr	r3, [pc, #440]	; (40284c <inv_icm426xx_get_data_from_fifo+0x294>)
  402692:	4798      	blx	r3
						return status;
  402694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402696:	e23d      	b.n	402b14 <inv_icm426xx_get_data_from_fifo+0x55c>
				for(packet_count_i = 0 ; packet_count_i < packet_count ; packet_count_i++) {
  402698:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  40269a:	3301      	adds	r3, #1
  40269c:	877b      	strh	r3, [r7, #58]	; 0x3a
  40269e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4026a0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  4026a2:	429a      	cmp	r2, r3
  4026a4:	d3de      	bcc.n	402664 <inv_icm426xx_get_data_from_fifo+0xac>
  4026a6:	e016      	b.n	4026d6 <inv_icm426xx_get_data_from_fifo+0x11e>
					}
				}
			} else {
				status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_DATA, packet_size * packet_count, s->fifo_data);
  4026a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  4026aa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
  4026ac:	fb02 f303 	mul.w	r3, r2, r3
  4026b0:	461a      	mov	r2, r3
  4026b2:	687b      	ldr	r3, [r7, #4]
  4026b4:	3344      	adds	r3, #68	; 0x44
  4026b6:	2130      	movs	r1, #48	; 0x30
  4026b8:	6878      	ldr	r0, [r7, #4]
  4026ba:	4c62      	ldr	r4, [pc, #392]	; (402844 <inv_icm426xx_get_data_from_fifo+0x28c>)
  4026bc:	47a0      	blx	r4
  4026be:	4602      	mov	r2, r0
  4026c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4026c2:	4313      	orrs	r3, r2
  4026c4:	63fb      	str	r3, [r7, #60]	; 0x3c
				if(status) {
  4026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4026c8:	2b00      	cmp	r3, #0
  4026ca:	d004      	beq.n	4026d6 <inv_icm426xx_get_data_from_fifo+0x11e>
					/* sensor data is in FIFO according to FIFO_COUNT but failed to read FIFO,
						  reset FIFO and try next chance */
					inv_icm426xx_reset_fifo(s);
  4026cc:	6878      	ldr	r0, [r7, #4]
  4026ce:	4b5f      	ldr	r3, [pc, #380]	; (40284c <inv_icm426xx_get_data_from_fifo+0x294>)
  4026d0:	4798      	blx	r3
					return status;
  4026d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4026d4:	e21e      	b.n	402b14 <inv_icm426xx_get_data_from_fifo+0x55c>
				}
			}
			
			for(packet_count_i = 0; packet_count_i < packet_count; packet_count_i++) {
  4026d6:	2300      	movs	r3, #0
  4026d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  4026da:	e215      	b.n	402b08 <inv_icm426xx_get_data_from_fifo+0x550>
				inv_icm426xx_sensor_event_t event;
				event.sensor_mask = 0;
  4026dc:	2300      	movs	r3, #0
  4026de:	60fb      	str	r3, [r7, #12]
				
				header = (fifo_header_t *) &s->fifo_data[fifo_idx];
  4026e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4026e2:	3340      	adds	r3, #64	; 0x40
  4026e4:	687a      	ldr	r2, [r7, #4]
  4026e6:	4413      	add	r3, r2
  4026e8:	3304      	adds	r3, #4
  4026ea:	633b      	str	r3, [r7, #48]	; 0x30
				fifo_idx += FIFO_HEADER_SIZE;
  4026ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4026ee:	3301      	adds	r3, #1
  4026f0:	86fb      	strh	r3, [r7, #54]	; 0x36
				
				/* Decode packet */
				if (header->bits.msg_bit) {
  4026f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4026f4:	781b      	ldrb	r3, [r3, #0]
  4026f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4026fa:	b2db      	uxtb	r3, r3
  4026fc:	2b00      	cmp	r3, #0
  4026fe:	d005      	beq.n	40270c <inv_icm426xx_get_data_from_fifo+0x154>
					/* MSG BIT set in FIFO header, Resetting FIFO */
					inv_icm426xx_reset_fifo(s);
  402700:	6878      	ldr	r0, [r7, #4]
  402702:	4b52      	ldr	r3, [pc, #328]	; (40284c <inv_icm426xx_get_data_from_fifo+0x294>)
  402704:	4798      	blx	r3
					return INV_ERROR;
  402706:	f04f 33ff 	mov.w	r3, #4294967295
  40270a:	e203      	b.n	402b14 <inv_icm426xx_get_data_from_fifo+0x55c>
				}

				if(header->bits.accel_bit) {
  40270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40270e:	781b      	ldrb	r3, [r3, #0]
  402710:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402714:	b2db      	uxtb	r3, r3
  402716:	2b00      	cmp	r3, #0
  402718:	d02e      	beq.n	402778 <inv_icm426xx_get_data_from_fifo+0x1c0>
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[0+fifo_idx], (uint16_t *)&event.accel[0]);
  40271a:	687b      	ldr	r3, [r7, #4]
  40271c:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  402720:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402722:	3340      	adds	r3, #64	; 0x40
  402724:	687a      	ldr	r2, [r7, #4]
  402726:	4413      	add	r3, r2
  402728:	1d19      	adds	r1, r3, #4
  40272a:	f107 030c 	add.w	r3, r7, #12
  40272e:	3306      	adds	r3, #6
  402730:	461a      	mov	r2, r3
  402732:	4b45      	ldr	r3, [pc, #276]	; (402848 <inv_icm426xx_get_data_from_fifo+0x290>)
  402734:	4798      	blx	r3
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[2+fifo_idx], (uint16_t *)&event.accel[1]);
  402736:	687b      	ldr	r3, [r7, #4]
  402738:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  40273c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40273e:	3302      	adds	r3, #2
  402740:	3340      	adds	r3, #64	; 0x40
  402742:	687a      	ldr	r2, [r7, #4]
  402744:	4413      	add	r3, r2
  402746:	1d19      	adds	r1, r3, #4
  402748:	f107 030c 	add.w	r3, r7, #12
  40274c:	3308      	adds	r3, #8
  40274e:	461a      	mov	r2, r3
  402750:	4b3d      	ldr	r3, [pc, #244]	; (402848 <inv_icm426xx_get_data_from_fifo+0x290>)
  402752:	4798      	blx	r3
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[4+fifo_idx], (uint16_t *)&event.accel[2]);
  402754:	687b      	ldr	r3, [r7, #4]
  402756:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  40275a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40275c:	3304      	adds	r3, #4
  40275e:	3340      	adds	r3, #64	; 0x40
  402760:	687a      	ldr	r2, [r7, #4]
  402762:	4413      	add	r3, r2
  402764:	1d19      	adds	r1, r3, #4
  402766:	f107 030c 	add.w	r3, r7, #12
  40276a:	330a      	adds	r3, #10
  40276c:	461a      	mov	r2, r3
  40276e:	4b36      	ldr	r3, [pc, #216]	; (402848 <inv_icm426xx_get_data_from_fifo+0x290>)
  402770:	4798      	blx	r3
					fifo_idx += FIFO_ACCEL_DATA_SIZE;
  402772:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402774:	3306      	adds	r3, #6
  402776:	86fb      	strh	r3, [r7, #54]	; 0x36
				}

				if (header->bits.gyro_bit) {
  402778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40277a:	781b      	ldrb	r3, [r3, #0]
  40277c:	f003 0320 	and.w	r3, r3, #32
  402780:	b2db      	uxtb	r3, r3
  402782:	2b00      	cmp	r3, #0
  402784:	d02e      	beq.n	4027e4 <inv_icm426xx_get_data_from_fifo+0x22c>
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[0+fifo_idx], (uint16_t *)&event.gyro[0]);
  402786:	687b      	ldr	r3, [r7, #4]
  402788:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  40278c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40278e:	3340      	adds	r3, #64	; 0x40
  402790:	687a      	ldr	r2, [r7, #4]
  402792:	4413      	add	r3, r2
  402794:	1d19      	adds	r1, r3, #4
  402796:	f107 030c 	add.w	r3, r7, #12
  40279a:	330c      	adds	r3, #12
  40279c:	461a      	mov	r2, r3
  40279e:	4b2a      	ldr	r3, [pc, #168]	; (402848 <inv_icm426xx_get_data_from_fifo+0x290>)
  4027a0:	4798      	blx	r3
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[2+fifo_idx], (uint16_t *)&event.gyro[1]);
  4027a2:	687b      	ldr	r3, [r7, #4]
  4027a4:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  4027a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4027aa:	3302      	adds	r3, #2
  4027ac:	3340      	adds	r3, #64	; 0x40
  4027ae:	687a      	ldr	r2, [r7, #4]
  4027b0:	4413      	add	r3, r2
  4027b2:	1d19      	adds	r1, r3, #4
  4027b4:	f107 030c 	add.w	r3, r7, #12
  4027b8:	330e      	adds	r3, #14
  4027ba:	461a      	mov	r2, r3
  4027bc:	4b22      	ldr	r3, [pc, #136]	; (402848 <inv_icm426xx_get_data_from_fifo+0x290>)
  4027be:	4798      	blx	r3
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[4+fifo_idx], (uint16_t *)&event.gyro[2]);
  4027c0:	687b      	ldr	r3, [r7, #4]
  4027c2:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  4027c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4027c8:	3304      	adds	r3, #4
  4027ca:	3340      	adds	r3, #64	; 0x40
  4027cc:	687a      	ldr	r2, [r7, #4]
  4027ce:	4413      	add	r3, r2
  4027d0:	1d19      	adds	r1, r3, #4
  4027d2:	f107 030c 	add.w	r3, r7, #12
  4027d6:	3310      	adds	r3, #16
  4027d8:	461a      	mov	r2, r3
  4027da:	4b1b      	ldr	r3, [pc, #108]	; (402848 <inv_icm426xx_get_data_from_fifo+0x290>)
  4027dc:	4798      	blx	r3
					fifo_idx += FIFO_GYRO_DATA_SIZE;
  4027de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4027e0:	3306      	adds	r3, #6
  4027e2:	86fb      	strh	r3, [r7, #54]	; 0x36
				}

				if ((header->bits.accel_bit) || (header->bits.gyro_bit)) {
  4027e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4027e6:	781b      	ldrb	r3, [r3, #0]
  4027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4027ec:	b2db      	uxtb	r3, r3
  4027ee:	2b00      	cmp	r3, #0
  4027f0:	d106      	bne.n	402800 <inv_icm426xx_get_data_from_fifo+0x248>
  4027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4027f4:	781b      	ldrb	r3, [r3, #0]
  4027f6:	f003 0320 	and.w	r3, r3, #32
  4027fa:	b2db      	uxtb	r3, r3
  4027fc:	2b00      	cmp	r3, #0
  4027fe:	d03b      	beq.n	402878 <inv_icm426xx_get_data_from_fifo+0x2c0>
					if(header->bits.twentybits_bit) {
  402800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402802:	781b      	ldrb	r3, [r3, #0]
  402804:	f003 0310 	and.w	r3, r3, #16
  402808:	b2db      	uxtb	r3, r3
  40280a:	2b00      	cmp	r3, #0
  40280c:	d020      	beq.n	402850 <inv_icm426xx_get_data_from_fifo+0x298>
						inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[0+fifo_idx], (uint16_t *)&event.temperature);
  40280e:	687b      	ldr	r3, [r7, #4]
  402810:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  402814:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402816:	3340      	adds	r3, #64	; 0x40
  402818:	687a      	ldr	r2, [r7, #4]
  40281a:	4413      	add	r3, r2
  40281c:	1d19      	adds	r1, r3, #4
  40281e:	f107 030c 	add.w	r3, r7, #12
  402822:	3312      	adds	r3, #18
  402824:	461a      	mov	r2, r3
  402826:	4b08      	ldr	r3, [pc, #32]	; (402848 <inv_icm426xx_get_data_from_fifo+0x290>)
  402828:	4798      	blx	r3
						fifo_idx += FIFO_TEMP_DATA_SIZE + FIFO_TEMP_HIGH_RES_SIZE;
  40282a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40282c:	3302      	adds	r3, #2
  40282e:	86fb      	strh	r3, [r7, #54]	; 0x36

						/* new temperature data */
						if (event.temperature != INVALID_VALUE_FIFO)
  402830:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  402834:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  402838:	d01e      	beq.n	402878 <inv_icm426xx_get_data_from_fifo+0x2c0>
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_TEMPERATURE);
  40283a:	68fb      	ldr	r3, [r7, #12]
  40283c:	f043 0310 	orr.w	r3, r3, #16
  402840:	60fb      	str	r3, [r7, #12]
  402842:	e019      	b.n	402878 <inv_icm426xx_get_data_from_fifo+0x2c0>
  402844:	00403931 	.word	0x00403931
  402848:	00403811 	.word	0x00403811
  40284c:	00402dad 	.word	0x00402dad
					} else {
						event.temperature = (int8_t)s->fifo_data[0+fifo_idx]; /* cast to int8_t since FIFO is in 16 bits mode (temperature on 8 bits) */
  402850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402852:	687a      	ldr	r2, [r7, #4]
  402854:	4413      	add	r3, r2
  402856:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  40285a:	b25b      	sxtb	r3, r3
  40285c:	b21b      	sxth	r3, r3
  40285e:	83fb      	strh	r3, [r7, #30]
						fifo_idx += FIFO_TEMP_DATA_SIZE;
  402860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402862:	3301      	adds	r3, #1
  402864:	86fb      	strh	r3, [r7, #54]	; 0x36

						/* new temperature data */
						if (event.temperature != INVALID_VALUE_FIFO_1B)
  402866:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  40286a:	f113 0f80 	cmn.w	r3, #128	; 0x80
  40286e:	d003      	beq.n	402878 <inv_icm426xx_get_data_from_fifo+0x2c0>
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_TEMPERATURE);
  402870:	68fb      	ldr	r3, [r7, #12]
  402872:	f043 0310 	orr.w	r3, r3, #16
  402876:	60fb      	str	r3, [r7, #12]
					}
				}

				if ((header->bits.timestamp_bit) || (header->bits.fsync_bit)) {
  402878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40287a:	781b      	ldrb	r3, [r3, #0]
  40287c:	f003 0308 	and.w	r3, r3, #8
  402880:	b2db      	uxtb	r3, r3
  402882:	2b00      	cmp	r3, #0
  402884:	d106      	bne.n	402894 <inv_icm426xx_get_data_from_fifo+0x2dc>
  402886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402888:	781b      	ldrb	r3, [r3, #0]
  40288a:	f003 0304 	and.w	r3, r3, #4
  40288e:	b2db      	uxtb	r3, r3
  402890:	2b00      	cmp	r3, #0
  402892:	d024      	beq.n	4028de <inv_icm426xx_get_data_from_fifo+0x326>
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[0+fifo_idx], (uint16_t *)&event.timestamp_fsync);
  402894:	687b      	ldr	r3, [r7, #4]
  402896:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  40289a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40289c:	3340      	adds	r3, #64	; 0x40
  40289e:	687a      	ldr	r2, [r7, #4]
  4028a0:	4413      	add	r3, r2
  4028a2:	1d19      	adds	r1, r3, #4
  4028a4:	f107 030c 	add.w	r3, r7, #12
  4028a8:	3304      	adds	r3, #4
  4028aa:	461a      	mov	r2, r3
  4028ac:	4b9b      	ldr	r3, [pc, #620]	; (402b1c <inv_icm426xx_get_data_from_fifo+0x564>)
  4028ae:	4798      	blx	r3
					fifo_idx += FIFO_TS_FSYNC_SIZE;
  4028b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4028b2:	3302      	adds	r3, #2
  4028b4:	86fb      	strh	r3, [r7, #54]	; 0x36
					
					/* new fsync event */
					/* First FSYNC event after enable is irrelevant
					 * FSYNC tag and FSYNC data should be ignored on the first ODR after restart.
					 */
					if (header->bits.fsync_bit){
  4028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4028b8:	781b      	ldrb	r3, [r3, #0]
  4028ba:	f003 0304 	and.w	r3, r3, #4
  4028be:	b2db      	uxtb	r3, r3
  4028c0:	2b00      	cmp	r3, #0
  4028c2:	d008      	beq.n	4028d6 <inv_icm426xx_get_data_from_fifo+0x31e>
						#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
						if(s->fsync_to_be_ignored == 0)
  4028c4:	687b      	ldr	r3, [r7, #4]
  4028c6:	f893 386b 	ldrb.w	r3, [r3, #2155]	; 0x86b
  4028ca:	2b00      	cmp	r3, #0
  4028cc:	d103      	bne.n	4028d6 <inv_icm426xx_get_data_from_fifo+0x31e>
						#endif
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_FSYNC_EVENT);
  4028ce:	68fb      	ldr	r3, [r7, #12]
  4028d0:	f043 0304 	orr.w	r3, r3, #4
  4028d4:	60fb      	str	r3, [r7, #12]
					}
					#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
					s->fsync_to_be_ignored = 0;
  4028d6:	687b      	ldr	r3, [r7, #4]
  4028d8:	2200      	movs	r2, #0
  4028da:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
					#endif
				}
				
				if (header->bits.accel_bit) {
  4028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4028e0:	781b      	ldrb	r3, [r3, #0]
  4028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4028e6:	b2db      	uxtb	r3, r3
  4028e8:	2b00      	cmp	r3, #0
  4028ea:	d06c      	beq.n	4029c6 <inv_icm426xx_get_data_from_fifo+0x40e>
					if( (event.accel[0] != INVALID_VALUE_FIFO) &&
  4028ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
  4028f0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  4028f4:	d067      	beq.n	4029c6 <inv_icm426xx_get_data_from_fifo+0x40e>
					    (event.accel[1] != INVALID_VALUE_FIFO) &&
  4028f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
					if( (event.accel[0] != INVALID_VALUE_FIFO) &&
  4028fa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  4028fe:	d062      	beq.n	4029c6 <inv_icm426xx_get_data_from_fifo+0x40e>
					    (event.accel[2] != INVALID_VALUE_FIFO) ) {
  402900:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
					    (event.accel[1] != INVALID_VALUE_FIFO) &&
  402904:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  402908:	d05d      	beq.n	4029c6 <inv_icm426xx_get_data_from_fifo+0x40e>

						if (header->bits.twentybits_bit) {
  40290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40290c:	781b      	ldrb	r3, [r3, #0]
  40290e:	f003 0310 	and.w	r3, r3, #16
  402912:	b2db      	uxtb	r3, r3
  402914:	2b00      	cmp	r3, #0
  402916:	d01f      	beq.n	402958 <inv_icm426xx_get_data_from_fifo+0x3a0>
							event.accel_high_res[0] = (s->fifo_data[0+fifo_idx] >> 4) & 0xF;
  402918:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40291a:	687a      	ldr	r2, [r7, #4]
  40291c:	4413      	add	r3, r2
  40291e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402922:	091b      	lsrs	r3, r3, #4
  402924:	b2db      	uxtb	r3, r3
  402926:	b25b      	sxtb	r3, r3
  402928:	f887 3020 	strb.w	r3, [r7, #32]
							event.accel_high_res[1] = (s->fifo_data[1+fifo_idx] >> 4) & 0xF;
  40292c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40292e:	3301      	adds	r3, #1
  402930:	687a      	ldr	r2, [r7, #4]
  402932:	4413      	add	r3, r2
  402934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402938:	091b      	lsrs	r3, r3, #4
  40293a:	b2db      	uxtb	r3, r3
  40293c:	b25b      	sxtb	r3, r3
  40293e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							event.accel_high_res[2] = (s->fifo_data[2+fifo_idx] >> 4) & 0xF;
  402942:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402944:	3302      	adds	r3, #2
  402946:	687a      	ldr	r2, [r7, #4]
  402948:	4413      	add	r3, r2
  40294a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  40294e:	091b      	lsrs	r3, r3, #4
  402950:	b2db      	uxtb	r3, r3
  402952:	b25b      	sxtb	r3, r3
  402954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						}

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
						if (s->accel_start_time_us == UINT32_MAX) {
  402958:	687b      	ldr	r3, [r7, #4]
  40295a:	f503 6306 	add.w	r3, r3, #2144	; 0x860
  40295e:	e9d3 3400 	ldrd	r3, r4, [r3]
  402962:	2c00      	cmp	r4, #0
  402964:	bf08      	it	eq
  402966:	f1b3 3fff 	cmpeq.w	r3, #4294967295
  40296a:	d104      	bne.n	402976 <inv_icm426xx_get_data_from_fifo+0x3be>
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_ACCEL);
  40296c:	68fb      	ldr	r3, [r7, #12]
  40296e:	f043 0301 	orr.w	r3, r3, #1
  402972:	60fb      	str	r3, [r7, #12]
  402974:	e027      	b.n	4029c6 <inv_icm426xx_get_data_from_fifo+0x40e>
						} else {
							if (!header->bits.fsync_bit) {
  402976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402978:	781b      	ldrb	r3, [r3, #0]
  40297a:	f003 0304 	and.w	r3, r3, #4
  40297e:	b2db      	uxtb	r3, r3
  402980:	2b00      	cmp	r3, #0
  402982:	d120      	bne.n	4029c6 <inv_icm426xx_get_data_from_fifo+0x40e>
								/* First data are noisy after enabling sensor
								 * Compare start time with current time to notify the event
								 */
								if((inv_icm426xx_get_time_us() - s->accel_start_time_us) >= ICM426XX_ACC_STARTUP_TIME_US) {
  402984:	4b66      	ldr	r3, [pc, #408]	; (402b20 <inv_icm426xx_get_data_from_fifo+0x568>)
  402986:	4798      	blx	r3
  402988:	460a      	mov	r2, r1
  40298a:	4601      	mov	r1, r0
  40298c:	687b      	ldr	r3, [r7, #4]
  40298e:	f503 6306 	add.w	r3, r3, #2144	; 0x860
  402992:	e9d3 3400 	ldrd	r3, r4, [r3]
  402996:	1acb      	subs	r3, r1, r3
  402998:	eb62 0404 	sbc.w	r4, r2, r4
  40299c:	f644 611f 	movw	r1, #19999	; 0x4e1f
  4029a0:	f04f 0200 	mov.w	r2, #0
  4029a4:	42a2      	cmp	r2, r4
  4029a6:	bf08      	it	eq
  4029a8:	4299      	cmpeq	r1, r3
  4029aa:	d20c      	bcs.n	4029c6 <inv_icm426xx_get_data_from_fifo+0x40e>
									s->accel_start_time_us = UINT32_MAX;
  4029ac:	687b      	ldr	r3, [r7, #4]
  4029ae:	f503 6206 	add.w	r2, r3, #2144	; 0x860
  4029b2:	f04f 33ff 	mov.w	r3, #4294967295
  4029b6:	f04f 0400 	mov.w	r4, #0
  4029ba:	e9c2 3400 	strd	r3, r4, [r2]
									event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_ACCEL);
  4029be:	68fb      	ldr	r3, [r7, #12]
  4029c0:	f043 0301 	orr.w	r3, r3, #1
  4029c4:	60fb      	str	r3, [r7, #12]
						event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_ACCEL);
#endif
					}
				}
				
				if (header->bits.gyro_bit) {
  4029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4029c8:	781b      	ldrb	r3, [r3, #0]
  4029ca:	f003 0320 	and.w	r3, r3, #32
  4029ce:	b2db      	uxtb	r3, r3
  4029d0:	2b00      	cmp	r3, #0
  4029d2:	d06f      	beq.n	402ab4 <inv_icm426xx_get_data_from_fifo+0x4fc>
					if( (event.gyro[0] != INVALID_VALUE_FIFO) &&
  4029d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
  4029d8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  4029dc:	d06a      	beq.n	402ab4 <inv_icm426xx_get_data_from_fifo+0x4fc>
					    (event.gyro[1] != INVALID_VALUE_FIFO) &&
  4029de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
					if( (event.gyro[0] != INVALID_VALUE_FIFO) &&
  4029e2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  4029e6:	d065      	beq.n	402ab4 <inv_icm426xx_get_data_from_fifo+0x4fc>
					    (event.gyro[2] != INVALID_VALUE_FIFO) ) {
  4029e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
					    (event.gyro[1] != INVALID_VALUE_FIFO) &&
  4029ec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  4029f0:	d060      	beq.n	402ab4 <inv_icm426xx_get_data_from_fifo+0x4fc>

						if (header->bits.twentybits_bit) {
  4029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4029f4:	781b      	ldrb	r3, [r3, #0]
  4029f6:	f003 0310 	and.w	r3, r3, #16
  4029fa:	b2db      	uxtb	r3, r3
  4029fc:	2b00      	cmp	r3, #0
  4029fe:	d022      	beq.n	402a46 <inv_icm426xx_get_data_from_fifo+0x48e>
							event.gyro_high_res[0] = (s->fifo_data[0+fifo_idx]) & 0xF;
  402a00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402a02:	687a      	ldr	r2, [r7, #4]
  402a04:	4413      	add	r3, r2
  402a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402a0a:	b25b      	sxtb	r3, r3
  402a0c:	f003 030f 	and.w	r3, r3, #15
  402a10:	b25b      	sxtb	r3, r3
  402a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							event.gyro_high_res[1] = (s->fifo_data[1+fifo_idx]) & 0xF;
  402a16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402a18:	3301      	adds	r3, #1
  402a1a:	687a      	ldr	r2, [r7, #4]
  402a1c:	4413      	add	r3, r2
  402a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402a22:	b25b      	sxtb	r3, r3
  402a24:	f003 030f 	and.w	r3, r3, #15
  402a28:	b25b      	sxtb	r3, r3
  402a2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
							event.gyro_high_res[2] = (s->fifo_data[2+fifo_idx]) & 0xF;
  402a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402a30:	3302      	adds	r3, #2
  402a32:	687a      	ldr	r2, [r7, #4]
  402a34:	4413      	add	r3, r2
  402a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402a3a:	b25b      	sxtb	r3, r3
  402a3c:	f003 030f 	and.w	r3, r3, #15
  402a40:	b25b      	sxtb	r3, r3
  402a42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						}

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
						if (s->gyro_start_time_us == UINT32_MAX) {
  402a46:	687b      	ldr	r3, [r7, #4]
  402a48:	f603 0358 	addw	r3, r3, #2136	; 0x858
  402a4c:	e9d3 3400 	ldrd	r3, r4, [r3]
  402a50:	2c00      	cmp	r4, #0
  402a52:	bf08      	it	eq
  402a54:	f1b3 3fff 	cmpeq.w	r3, #4294967295
  402a58:	d104      	bne.n	402a64 <inv_icm426xx_get_data_from_fifo+0x4ac>
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_GYRO);
  402a5a:	68fb      	ldr	r3, [r7, #12]
  402a5c:	f043 0302 	orr.w	r3, r3, #2
  402a60:	60fb      	str	r3, [r7, #12]
  402a62:	e027      	b.n	402ab4 <inv_icm426xx_get_data_from_fifo+0x4fc>
						} else {
							if (!header->bits.fsync_bit) {
  402a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402a66:	781b      	ldrb	r3, [r3, #0]
  402a68:	f003 0304 	and.w	r3, r3, #4
  402a6c:	b2db      	uxtb	r3, r3
  402a6e:	2b00      	cmp	r3, #0
  402a70:	d120      	bne.n	402ab4 <inv_icm426xx_get_data_from_fifo+0x4fc>
								/* First data are noisy after enabling sensor
								 * Compare start time with current time to notify the event
								 */
								if((inv_icm426xx_get_time_us() - s->gyro_start_time_us) >= ICM426XX_GYR_STARTUP_TIME_US) {
  402a72:	4b2b      	ldr	r3, [pc, #172]	; (402b20 <inv_icm426xx_get_data_from_fifo+0x568>)
  402a74:	4798      	blx	r3
  402a76:	460a      	mov	r2, r1
  402a78:	4601      	mov	r1, r0
  402a7a:	687b      	ldr	r3, [r7, #4]
  402a7c:	f603 0358 	addw	r3, r3, #2136	; 0x858
  402a80:	e9d3 3400 	ldrd	r3, r4, [r3]
  402a84:	1acb      	subs	r3, r1, r3
  402a86:	eb62 0404 	sbc.w	r4, r2, r4
  402a8a:	f64e 215f 	movw	r1, #59999	; 0xea5f
  402a8e:	f04f 0200 	mov.w	r2, #0
  402a92:	42a2      	cmp	r2, r4
  402a94:	bf08      	it	eq
  402a96:	4299      	cmpeq	r1, r3
  402a98:	d20c      	bcs.n	402ab4 <inv_icm426xx_get_data_from_fifo+0x4fc>
									s->gyro_start_time_us = UINT32_MAX;
  402a9a:	687b      	ldr	r3, [r7, #4]
  402a9c:	f603 0258 	addw	r2, r3, #2136	; 0x858
  402aa0:	f04f 33ff 	mov.w	r3, #4294967295
  402aa4:	f04f 0400 	mov.w	r4, #0
  402aa8:	e9c2 3400 	strd	r3, r4, [r2]
									event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_GYRO);
  402aac:	68fb      	ldr	r3, [r7, #12]
  402aae:	f043 0302 	orr.w	r3, r3, #2
  402ab2:	60fb      	str	r3, [r7, #12]
						event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_GYRO);
#endif
					}
				}

				if (header->bits.twentybits_bit)
  402ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402ab6:	781b      	ldrb	r3, [r3, #0]
  402ab8:	f003 0310 	and.w	r3, r3, #16
  402abc:	b2db      	uxtb	r3, r3
  402abe:	2b00      	cmp	r3, #0
  402ac0:	d002      	beq.n	402ac8 <inv_icm426xx_get_data_from_fifo+0x510>
					fifo_idx += FIFO_ACCEL_GYRO_HIGH_RES_SIZE;
  402ac2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402ac4:	3303      	adds	r3, #3
  402ac6:	86fb      	strh	r3, [r7, #54]	; 0x36

				/* call sensor event callback */
				if(s->sensor_event_cb)
  402ac8:	687b      	ldr	r3, [r7, #4]
  402aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402acc:	2b00      	cmp	r3, #0
  402ace:	d005      	beq.n	402adc <inv_icm426xx_get_data_from_fifo+0x524>
					s->sensor_event_cb(&event);
  402ad0:	687b      	ldr	r3, [r7, #4]
  402ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402ad4:	f107 020c 	add.w	r2, r7, #12
  402ad8:	4610      	mov	r0, r2
  402ada:	4798      	blx	r3

				/* Device interrupts delayed when communicating with other slaves connected to same bus 
				 * Semi-Write to release interrupt in I2C
				 */
				if((s->transport.serif.serif_type == ICM426XX_UI_I2C) || (s->transport.serif.serif_type == ICM426XX_UI_I3C)) {					
  402adc:	687b      	ldr	r3, [r7, #4]
  402ade:	7e1b      	ldrb	r3, [r3, #24]
  402ae0:	2b00      	cmp	r3, #0
  402ae2:	d003      	beq.n	402aec <inv_icm426xx_get_data_from_fifo+0x534>
  402ae4:	687b      	ldr	r3, [r7, #4]
  402ae6:	7e1b      	ldrb	r3, [r3, #24]
  402ae8:	2b02      	cmp	r3, #2
  402aea:	d10a      	bne.n	402b02 <inv_icm426xx_get_data_from_fifo+0x54a>
					status |= inv_icm426xx_write_reg(s, MPUREG_WHO_AM_I, 1, &data_reg);
  402aec:	f107 032e 	add.w	r3, r7, #46	; 0x2e
  402af0:	2201      	movs	r2, #1
  402af2:	2175      	movs	r1, #117	; 0x75
  402af4:	6878      	ldr	r0, [r7, #4]
  402af6:	4c0b      	ldr	r4, [pc, #44]	; (402b24 <inv_icm426xx_get_data_from_fifo+0x56c>)
  402af8:	47a0      	blx	r4
  402afa:	4602      	mov	r2, r0
  402afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402afe:	4313      	orrs	r3, r2
  402b00:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(packet_count_i = 0; packet_count_i < packet_count; packet_count_i++) {
  402b02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  402b04:	3301      	adds	r3, #1
  402b06:	877b      	strh	r3, [r7, #58]	; 0x3a
  402b08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  402b0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  402b0c:	429a      	cmp	r2, r3
  402b0e:	f4ff ade5 	bcc.w	4026dc <inv_icm426xx_get_data_from_fifo+0x124>
		}
		/*else: packet_count was 0*/
	}
	/*else: FIFO threshold was not reached and FIFO was not full*/

	return packet_count;
  402b12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
  402b14:	4618      	mov	r0, r3
  402b16:	3744      	adds	r7, #68	; 0x44
  402b18:	46bd      	mov	sp, r7
  402b1a:	bd90      	pop	{r4, r7, pc}
  402b1c:	00403811 	.word	0x00403811
  402b20:	00401621 	.word	0x00401621
  402b24:	004039fd 	.word	0x004039fd

00402b28 <inv_icm426xx_convert_odr_bitfield_to_us>:

uint32_t inv_icm426xx_convert_odr_bitfield_to_us(uint32_t odr_bitfield)
{
  402b28:	b480      	push	{r7}
  402b2a:	b083      	sub	sp, #12
  402b2c:	af00      	add	r7, sp, #0
  402b2e:	6078      	str	r0, [r7, #4]
			13 - 3.125    : 320 ms
			14 - 1.5625   : 640 ms
			15 - 500      : 2 ms
		*/
	
	switch(odr_bitfield ) {
  402b30:	687b      	ldr	r3, [r7, #4]
  402b32:	3b01      	subs	r3, #1
  402b34:	2b0e      	cmp	r3, #14
  402b36:	d844      	bhi.n	402bc2 <inv_icm426xx_convert_odr_bitfield_to_us+0x9a>
  402b38:	a201      	add	r2, pc, #4	; (adr r2, 402b40 <inv_icm426xx_convert_odr_bitfield_to_us+0x18>)
  402b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402b3e:	bf00      	nop
  402b40:	00402b7d 	.word	0x00402b7d
  402b44:	00402b81 	.word	0x00402b81
  402b48:	00402b85 	.word	0x00402b85
  402b4c:	00402b89 	.word	0x00402b89
  402b50:	00402b8d 	.word	0x00402b8d
  402b54:	00402b93 	.word	0x00402b93
  402b58:	00402b9f 	.word	0x00402b9f
  402b5c:	00402ba5 	.word	0x00402ba5
  402b60:	00402bab 	.word	0x00402bab
  402b64:	00402bb1 	.word	0x00402bb1
  402b68:	00402bb7 	.word	0x00402bb7
  402b6c:	00402bbb 	.word	0x00402bbb
  402b70:	00402bbf 	.word	0x00402bbf
  402b74:	00402bc3 	.word	0x00402bc3
  402b78:	00402b99 	.word	0x00402b99
		case ICM426XX_ACCEL_CONFIG0_ODR_32_KHZ:      return 32;
  402b7c:	2320      	movs	r3, #32
  402b7e:	e021      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_16_KHZ:      return 63;
  402b80:	233f      	movs	r3, #63	; 0x3f
  402b82:	e01f      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_8_KHZ:      return 125;
  402b84:	237d      	movs	r3, #125	; 0x7d
  402b86:	e01d      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_4_KHZ:      return 250;
  402b88:	23fa      	movs	r3, #250	; 0xfa
  402b8a:	e01b      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_2_KHZ:      return 500;
  402b8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  402b90:	e018      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_1_KHZ:      return 1000;
  402b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402b96:	e015      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_500_HZ:     return 2000;
  402b98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  402b9c:	e012      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_200_HZ:     return 5000;
  402b9e:	f241 3388 	movw	r3, #5000	; 0x1388
  402ba2:	e00f      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_100_HZ:     return 10000;
  402ba4:	f242 7310 	movw	r3, #10000	; 0x2710
  402ba8:	e00c      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_50_HZ:      return 20000;
  402baa:	f644 6320 	movw	r3, #20000	; 0x4e20
  402bae:	e009      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_25_HZ:      return 40000;
  402bb0:	f649 4340 	movw	r3, #40000	; 0x9c40
  402bb4:	e006      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_12_5_HZ:    return 80000;
  402bb6:	4b06      	ldr	r3, [pc, #24]	; (402bd0 <inv_icm426xx_convert_odr_bitfield_to_us+0xa8>)
  402bb8:	e004      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_6_25_HZ:    return 160000;
  402bba:	4b06      	ldr	r3, [pc, #24]	; (402bd4 <inv_icm426xx_convert_odr_bitfield_to_us+0xac>)
  402bbc:	e002      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_3_125_HZ:   return 320000;
  402bbe:	4b06      	ldr	r3, [pc, #24]	; (402bd8 <inv_icm426xx_convert_odr_bitfield_to_us+0xb0>)
  402bc0:	e000      	b.n	402bc4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_1_5625_HZ:
		default:                                    return 640000;
  402bc2:	4b06      	ldr	r3, [pc, #24]	; (402bdc <inv_icm426xx_convert_odr_bitfield_to_us+0xb4>)
	}
}
  402bc4:	4618      	mov	r0, r3
  402bc6:	370c      	adds	r7, #12
  402bc8:	46bd      	mov	sp, r7
  402bca:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bce:	4770      	bx	lr
  402bd0:	00013880 	.word	0x00013880
  402bd4:	00027100 	.word	0x00027100
  402bd8:	0004e200 	.word	0x0004e200
  402bdc:	0009c400 	.word	0x0009c400

00402be0 <inv_icm426xx_set_accel_frequency>:

int inv_icm426xx_set_accel_frequency(struct inv_icm426xx * s, const ICM426XX_ACCEL_CONFIG0_ODR_t frequency)
{
  402be0:	b590      	push	{r4, r7, lr}
  402be2:	b085      	sub	sp, #20
  402be4:	af00      	add	r7, sp, #0
  402be6:	6078      	str	r0, [r7, #4]
  402be8:	460b      	mov	r3, r1
  402bea:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402bec:	2300      	movs	r3, #0
  402bee:	60fb      	str	r3, [r7, #12]
	 * Update software counter to handle the overflow
	 */
	uint8_t pwr_mngt_0_reg;
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t accel_pwr_mode;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  402bf0:	f107 0309 	add.w	r3, r7, #9
  402bf4:	2201      	movs	r2, #1
  402bf6:	214e      	movs	r1, #78	; 0x4e
  402bf8:	6878      	ldr	r0, [r7, #4]
  402bfa:	4c1f      	ldr	r4, [pc, #124]	; (402c78 <inv_icm426xx_set_accel_frequency+0x98>)
  402bfc:	47a0      	blx	r4
  402bfe:	4602      	mov	r2, r0
  402c00:	68fb      	ldr	r3, [r7, #12]
  402c02:	4313      	orrs	r3, r2
  402c04:	60fb      	str	r3, [r7, #12]
	accel_pwr_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  402c06:	7a7b      	ldrb	r3, [r7, #9]
  402c08:	f003 0303 	and.w	r3, r3, #3
  402c0c:	72fb      	strb	r3, [r7, #11]
	if(ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP != accel_pwr_mode)
  402c0e:	7afb      	ldrb	r3, [r7, #11]
  402c10:	2b02      	cmp	r3, #2
  402c12:	d007      	beq.n	402c24 <inv_icm426xx_set_accel_frequency+0x44>
		s->wu_off_acc_odr_changes++; /* WUOSC is not clock source, this ODR change could be missed */
  402c14:	687b      	ldr	r3, [r7, #4]
  402c16:	f8d3 386c 	ldr.w	r3, [r3, #2156]	; 0x86c
  402c1a:	1c5a      	adds	r2, r3, #1
  402c1c:	687b      	ldr	r3, [r7, #4]
  402c1e:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  402c22:	e003      	b.n	402c2c <inv_icm426xx_set_accel_frequency+0x4c>
	else
		s->wu_off_acc_odr_changes = 0; /* WUOSC is on and acc is running, ODR change will be taken into account */
  402c24:	687b      	ldr	r3, [r7, #4]
  402c26:	2200      	movs	r2, #0
  402c28:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
#endif
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  402c2c:	f107 030a 	add.w	r3, r7, #10
  402c30:	2201      	movs	r2, #1
  402c32:	2150      	movs	r1, #80	; 0x50
  402c34:	6878      	ldr	r0, [r7, #4]
  402c36:	4c10      	ldr	r4, [pc, #64]	; (402c78 <inv_icm426xx_set_accel_frequency+0x98>)
  402c38:	47a0      	blx	r4
  402c3a:	4602      	mov	r2, r0
  402c3c:	68fb      	ldr	r3, [r7, #12]
  402c3e:	4313      	orrs	r3, r2
  402c40:	60fb      	str	r3, [r7, #12]
	accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_ODR_MASK;
  402c42:	7abb      	ldrb	r3, [r7, #10]
  402c44:	f023 030f 	bic.w	r3, r3, #15
  402c48:	b2db      	uxtb	r3, r3
  402c4a:	72bb      	strb	r3, [r7, #10]
	accel_cfg_0_reg |= (uint8_t)frequency;
  402c4c:	7aba      	ldrb	r2, [r7, #10]
  402c4e:	78fb      	ldrb	r3, [r7, #3]
  402c50:	4313      	orrs	r3, r2
  402c52:	b2db      	uxtb	r3, r3
  402c54:	72bb      	strb	r3, [r7, #10]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  402c56:	f107 030a 	add.w	r3, r7, #10
  402c5a:	2201      	movs	r2, #1
  402c5c:	2150      	movs	r1, #80	; 0x50
  402c5e:	6878      	ldr	r0, [r7, #4]
  402c60:	4c06      	ldr	r4, [pc, #24]	; (402c7c <inv_icm426xx_set_accel_frequency+0x9c>)
  402c62:	47a0      	blx	r4
  402c64:	4602      	mov	r2, r0
  402c66:	68fb      	ldr	r3, [r7, #12]
  402c68:	4313      	orrs	r3, r2
  402c6a:	60fb      	str	r3, [r7, #12]
	
	return status;
  402c6c:	68fb      	ldr	r3, [r7, #12]
}
  402c6e:	4618      	mov	r0, r3
  402c70:	3714      	adds	r7, #20
  402c72:	46bd      	mov	sp, r7
  402c74:	bd90      	pop	{r4, r7, pc}
  402c76:	bf00      	nop
  402c78:	00403931 	.word	0x00403931
  402c7c:	004039fd 	.word	0x004039fd

00402c80 <inv_icm426xx_set_gyro_frequency>:

int inv_icm426xx_set_gyro_frequency(struct inv_icm426xx * s, const ICM426XX_GYRO_CONFIG0_ODR_t frequency)
{
  402c80:	b590      	push	{r4, r7, lr}
  402c82:	b085      	sub	sp, #20
  402c84:	af00      	add	r7, sp, #0
  402c86:	6078      	str	r0, [r7, #4]
  402c88:	460b      	mov	r3, r1
  402c8a:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402c8c:	2300      	movs	r3, #0
  402c8e:	60fb      	str	r3, [r7, #12]
	uint8_t gyro_cfg_0_reg;
	status |= inv_icm426xx_read_reg( s, MPUREG_GYRO_CONFIG0 , 1, &gyro_cfg_0_reg);
  402c90:	f107 030b 	add.w	r3, r7, #11
  402c94:	2201      	movs	r2, #1
  402c96:	214f      	movs	r1, #79	; 0x4f
  402c98:	6878      	ldr	r0, [r7, #4]
  402c9a:	4c10      	ldr	r4, [pc, #64]	; (402cdc <inv_icm426xx_set_gyro_frequency+0x5c>)
  402c9c:	47a0      	blx	r4
  402c9e:	4602      	mov	r2, r0
  402ca0:	68fb      	ldr	r3, [r7, #12]
  402ca2:	4313      	orrs	r3, r2
  402ca4:	60fb      	str	r3, [r7, #12]
	gyro_cfg_0_reg &= (uint8_t)~BIT_GYRO_CONFIG0_ODR_MASK;
  402ca6:	7afb      	ldrb	r3, [r7, #11]
  402ca8:	f023 030f 	bic.w	r3, r3, #15
  402cac:	b2db      	uxtb	r3, r3
  402cae:	72fb      	strb	r3, [r7, #11]
	gyro_cfg_0_reg |= (uint8_t)frequency;
  402cb0:	7afa      	ldrb	r2, [r7, #11]
  402cb2:	78fb      	ldrb	r3, [r7, #3]
  402cb4:	4313      	orrs	r3, r2
  402cb6:	b2db      	uxtb	r3, r3
  402cb8:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  402cba:	f107 030b 	add.w	r3, r7, #11
  402cbe:	2201      	movs	r2, #1
  402cc0:	214f      	movs	r1, #79	; 0x4f
  402cc2:	6878      	ldr	r0, [r7, #4]
  402cc4:	4c06      	ldr	r4, [pc, #24]	; (402ce0 <inv_icm426xx_set_gyro_frequency+0x60>)
  402cc6:	47a0      	blx	r4
  402cc8:	4602      	mov	r2, r0
  402cca:	68fb      	ldr	r3, [r7, #12]
  402ccc:	4313      	orrs	r3, r2
  402cce:	60fb      	str	r3, [r7, #12]
	
	return status;
  402cd0:	68fb      	ldr	r3, [r7, #12]
}
  402cd2:	4618      	mov	r0, r3
  402cd4:	3714      	adds	r7, #20
  402cd6:	46bd      	mov	sp, r7
  402cd8:	bd90      	pop	{r4, r7, pc}
  402cda:	bf00      	nop
  402cdc:	00403931 	.word	0x00403931
  402ce0:	004039fd 	.word	0x004039fd

00402ce4 <inv_icm426xx_set_accel_fsr>:

int inv_icm426xx_set_accel_fsr(struct inv_icm426xx * s, ICM426XX_ACCEL_CONFIG0_FS_SEL_t accel_fsr_g)
{
  402ce4:	b590      	push	{r4, r7, lr}
  402ce6:	b085      	sub	sp, #20
  402ce8:	af00      	add	r7, sp, #0
  402cea:	6078      	str	r0, [r7, #4]
  402cec:	460b      	mov	r3, r1
  402cee:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402cf0:	2300      	movs	r3, #0
  402cf2:	60fb      	str	r3, [r7, #12]
	uint8_t accel_cfg_0_reg;
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  402cf4:	f107 030b 	add.w	r3, r7, #11
  402cf8:	2201      	movs	r2, #1
  402cfa:	2150      	movs	r1, #80	; 0x50
  402cfc:	6878      	ldr	r0, [r7, #4]
  402cfe:	4c10      	ldr	r4, [pc, #64]	; (402d40 <inv_icm426xx_set_accel_fsr+0x5c>)
  402d00:	47a0      	blx	r4
  402d02:	4602      	mov	r2, r0
  402d04:	68fb      	ldr	r3, [r7, #12]
  402d06:	4313      	orrs	r3, r2
  402d08:	60fb      	str	r3, [r7, #12]
	accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_FS_SEL_MASK;
  402d0a:	7afb      	ldrb	r3, [r7, #11]
  402d0c:	f003 031f 	and.w	r3, r3, #31
  402d10:	b2db      	uxtb	r3, r3
  402d12:	72fb      	strb	r3, [r7, #11]
	accel_cfg_0_reg |= (uint8_t)accel_fsr_g;
  402d14:	7afa      	ldrb	r2, [r7, #11]
  402d16:	78fb      	ldrb	r3, [r7, #3]
  402d18:	4313      	orrs	r3, r2
  402d1a:	b2db      	uxtb	r3, r3
  402d1c:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  402d1e:	f107 030b 	add.w	r3, r7, #11
  402d22:	2201      	movs	r2, #1
  402d24:	2150      	movs	r1, #80	; 0x50
  402d26:	6878      	ldr	r0, [r7, #4]
  402d28:	4c06      	ldr	r4, [pc, #24]	; (402d44 <inv_icm426xx_set_accel_fsr+0x60>)
  402d2a:	47a0      	blx	r4
  402d2c:	4602      	mov	r2, r0
  402d2e:	68fb      	ldr	r3, [r7, #12]
  402d30:	4313      	orrs	r3, r2
  402d32:	60fb      	str	r3, [r7, #12]
	
	return status;
  402d34:	68fb      	ldr	r3, [r7, #12]
}
  402d36:	4618      	mov	r0, r3
  402d38:	3714      	adds	r7, #20
  402d3a:	46bd      	mov	sp, r7
  402d3c:	bd90      	pop	{r4, r7, pc}
  402d3e:	bf00      	nop
  402d40:	00403931 	.word	0x00403931
  402d44:	004039fd 	.word	0x004039fd

00402d48 <inv_icm426xx_set_gyro_fsr>:

int inv_icm426xx_set_gyro_fsr(struct inv_icm426xx * s, ICM426XX_GYRO_CONFIG0_FS_SEL_t gyro_fsr_dps)
{
  402d48:	b590      	push	{r4, r7, lr}
  402d4a:	b085      	sub	sp, #20
  402d4c:	af00      	add	r7, sp, #0
  402d4e:	6078      	str	r0, [r7, #4]
  402d50:	460b      	mov	r3, r1
  402d52:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402d54:	2300      	movs	r3, #0
  402d56:	60fb      	str	r3, [r7, #12]
	uint8_t gyro_cfg_0_reg;
	status |= inv_icm426xx_read_reg( s, MPUREG_GYRO_CONFIG0 , 1, &gyro_cfg_0_reg);
  402d58:	f107 030b 	add.w	r3, r7, #11
  402d5c:	2201      	movs	r2, #1
  402d5e:	214f      	movs	r1, #79	; 0x4f
  402d60:	6878      	ldr	r0, [r7, #4]
  402d62:	4c10      	ldr	r4, [pc, #64]	; (402da4 <inv_icm426xx_set_gyro_fsr+0x5c>)
  402d64:	47a0      	blx	r4
  402d66:	4602      	mov	r2, r0
  402d68:	68fb      	ldr	r3, [r7, #12]
  402d6a:	4313      	orrs	r3, r2
  402d6c:	60fb      	str	r3, [r7, #12]
	gyro_cfg_0_reg &= (uint8_t)~BIT_GYRO_CONFIG0_FS_SEL_MASK;
  402d6e:	7afb      	ldrb	r3, [r7, #11]
  402d70:	f003 031f 	and.w	r3, r3, #31
  402d74:	b2db      	uxtb	r3, r3
  402d76:	72fb      	strb	r3, [r7, #11]
	gyro_cfg_0_reg |= (uint8_t)gyro_fsr_dps;
  402d78:	7afa      	ldrb	r2, [r7, #11]
  402d7a:	78fb      	ldrb	r3, [r7, #3]
  402d7c:	4313      	orrs	r3, r2
  402d7e:	b2db      	uxtb	r3, r3
  402d80:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  402d82:	f107 030b 	add.w	r3, r7, #11
  402d86:	2201      	movs	r2, #1
  402d88:	214f      	movs	r1, #79	; 0x4f
  402d8a:	6878      	ldr	r0, [r7, #4]
  402d8c:	4c06      	ldr	r4, [pc, #24]	; (402da8 <inv_icm426xx_set_gyro_fsr+0x60>)
  402d8e:	47a0      	blx	r4
  402d90:	4602      	mov	r2, r0
  402d92:	68fb      	ldr	r3, [r7, #12]
  402d94:	4313      	orrs	r3, r2
  402d96:	60fb      	str	r3, [r7, #12]
	
	return status;
  402d98:	68fb      	ldr	r3, [r7, #12]
}
  402d9a:	4618      	mov	r0, r3
  402d9c:	3714      	adds	r7, #20
  402d9e:	46bd      	mov	sp, r7
  402da0:	bd90      	pop	{r4, r7, pc}
  402da2:	bf00      	nop
  402da4:	00403931 	.word	0x00403931
  402da8:	004039fd 	.word	0x004039fd

00402dac <inv_icm426xx_reset_fifo>:

	return status;
}

int inv_icm426xx_reset_fifo(struct inv_icm426xx * s)
{
  402dac:	b590      	push	{r4, r7, lr}
  402dae:	b087      	sub	sp, #28
  402db0:	af00      	add	r7, sp, #0
  402db2:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t saved_fifo_config;
	int status = 0;
  402db4:	2300      	movs	r3, #0
  402db6:	617b      	str	r3, [r7, #20]
	uint8_t pwr_mngt_0_reg;
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t acc_mode;
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t gyr_mode;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  402db8:	f107 030f 	add.w	r3, r7, #15
  402dbc:	2201      	movs	r2, #1
  402dbe:	214e      	movs	r1, #78	; 0x4e
  402dc0:	6878      	ldr	r0, [r7, #4]
  402dc2:	4c2c      	ldr	r4, [pc, #176]	; (402e74 <inv_icm426xx_reset_fifo+0xc8>)
  402dc4:	47a0      	blx	r4
  402dc6:	4602      	mov	r2, r0
  402dc8:	697b      	ldr	r3, [r7, #20]
  402dca:	4313      	orrs	r3, r2
  402dcc:	617b      	str	r3, [r7, #20]
	gyr_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  402dce:	7bfb      	ldrb	r3, [r7, #15]
  402dd0:	f003 030c 	and.w	r3, r3, #12
  402dd4:	74fb      	strb	r3, [r7, #19]
	acc_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  402dd6:	7bfb      	ldrb	r3, [r7, #15]
  402dd8:	f003 0303 	and.w	r3, r3, #3
  402ddc:	74bb      	strb	r3, [r7, #18]
	
	if ( ( (gyr_mode != ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (acc_mode != ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF) )
  402dde:	7cfb      	ldrb	r3, [r7, #19]
  402de0:	2b00      	cmp	r3, #0
  402de2:	d102      	bne.n	402dea <inv_icm426xx_reset_fifo+0x3e>
  402de4:	7cbb      	ldrb	r3, [r7, #18]
  402de6:	2b00      	cmp	r3, #0
  402de8:	d010      	beq.n	402e0c <inv_icm426xx_reset_fifo+0x60>
		&& (acc_mode != ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) ) {
  402dea:	7cbb      	ldrb	r3, [r7, #18]
  402dec:	2b02      	cmp	r3, #2
  402dee:	d00d      	beq.n	402e0c <inv_icm426xx_reset_fifo+0x60>
		data = (uint8_t)ICM426XX_SIGNAL_PATH_RESET_FIFO_FLUSH_EN;
  402df0:	2302      	movs	r3, #2
  402df2:	747b      	strb	r3, [r7, #17]
		status |= inv_icm426xx_write_reg(s, MPUREG_SIGNAL_PATH_RESET, 1, &data);
  402df4:	f107 0311 	add.w	r3, r7, #17
  402df8:	2201      	movs	r2, #1
  402dfa:	214b      	movs	r1, #75	; 0x4b
  402dfc:	6878      	ldr	r0, [r7, #4]
  402dfe:	4c1e      	ldr	r4, [pc, #120]	; (402e78 <inv_icm426xx_reset_fifo+0xcc>)
  402e00:	47a0      	blx	r4
  402e02:	4602      	mov	r2, r0
  402e04:	697b      	ldr	r3, [r7, #20]
  402e06:	4313      	orrs	r3, r2
  402e08:	617b      	str	r3, [r7, #20]
  402e0a:	e02d      	b.n	402e68 <inv_icm426xx_reset_fifo+0xbc>
	else {
		/* In case no sensor is enabled or in accel low power mode, change the FIFO_MODE to “bypass” (00) mode to force the FIFO reset,
		 * potentials remaining data will be flushed 
		 * Then proceed to a dummy read to released the FIFO reset synchronously with the serial clock
		 */
		status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG, 1, &saved_fifo_config);
  402e0c:	f107 0310 	add.w	r3, r7, #16
  402e10:	2201      	movs	r2, #1
  402e12:	2116      	movs	r1, #22
  402e14:	6878      	ldr	r0, [r7, #4]
  402e16:	4c17      	ldr	r4, [pc, #92]	; (402e74 <inv_icm426xx_reset_fifo+0xc8>)
  402e18:	47a0      	blx	r4
  402e1a:	4602      	mov	r2, r0
  402e1c:	697b      	ldr	r3, [r7, #20]
  402e1e:	4313      	orrs	r3, r2
  402e20:	617b      	str	r3, [r7, #20]
		data = (uint8_t)ICM426XX_FIFO_CONFIG_MODE_BYPASS;
  402e22:	2300      	movs	r3, #0
  402e24:	747b      	strb	r3, [r7, #17]
		status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  402e26:	f107 0311 	add.w	r3, r7, #17
  402e2a:	2201      	movs	r2, #1
  402e2c:	2116      	movs	r1, #22
  402e2e:	6878      	ldr	r0, [r7, #4]
  402e30:	4c11      	ldr	r4, [pc, #68]	; (402e78 <inv_icm426xx_reset_fifo+0xcc>)
  402e32:	47a0      	blx	r4
  402e34:	4602      	mov	r2, r0
  402e36:	697b      	ldr	r3, [r7, #20]
  402e38:	4313      	orrs	r3, r2
  402e3a:	617b      	str	r3, [r7, #20]
		status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &saved_fifo_config);
  402e3c:	f107 0310 	add.w	r3, r7, #16
  402e40:	2201      	movs	r2, #1
  402e42:	2116      	movs	r1, #22
  402e44:	6878      	ldr	r0, [r7, #4]
  402e46:	4c0c      	ldr	r4, [pc, #48]	; (402e78 <inv_icm426xx_reset_fifo+0xcc>)
  402e48:	47a0      	blx	r4
  402e4a:	4602      	mov	r2, r0
  402e4c:	697b      	ldr	r3, [r7, #20]
  402e4e:	4313      	orrs	r3, r2
  402e50:	617b      	str	r3, [r7, #20]
		status |= inv_icm426xx_read_reg(s, MPUREG_WHO_AM_I, 1, &data);
  402e52:	f107 0311 	add.w	r3, r7, #17
  402e56:	2201      	movs	r2, #1
  402e58:	2175      	movs	r1, #117	; 0x75
  402e5a:	6878      	ldr	r0, [r7, #4]
  402e5c:	4c05      	ldr	r4, [pc, #20]	; (402e74 <inv_icm426xx_reset_fifo+0xc8>)
  402e5e:	47a0      	blx	r4
  402e60:	4602      	mov	r2, r0
  402e62:	697b      	ldr	r3, [r7, #20]
  402e64:	4313      	orrs	r3, r2
  402e66:	617b      	str	r3, [r7, #20]
	}
	
	return status;
  402e68:	697b      	ldr	r3, [r7, #20]
}
  402e6a:	4618      	mov	r0, r3
  402e6c:	371c      	adds	r7, #28
  402e6e:	46bd      	mov	sp, r7
  402e70:	bd90      	pop	{r4, r7, pc}
  402e72:	bf00      	nop
  402e74:	00403931 	.word	0x00403931
  402e78:	004039fd 	.word	0x004039fd

00402e7c <inv_icm426xx_enable_timestamp_to_register>:

int inv_icm426xx_enable_timestamp_to_register(struct inv_icm426xx * s)
{
  402e7c:	b590      	push	{r4, r7, lr}
  402e7e:	b085      	sub	sp, #20
  402e80:	af00      	add	r7, sp, #0
  402e82:	6078      	str	r0, [r7, #4]
	int status = 0;
  402e84:	2300      	movs	r3, #0
  402e86:	60fb      	str	r3, [r7, #12]
	uint8_t tmst_cfg_reg;
	
	if(!s->tmst_to_reg_en_cnt) {
  402e88:	687b      	ldr	r3, [r7, #4]
  402e8a:	f893 3854 	ldrb.w	r3, [r3, #2132]	; 0x854
  402e8e:	2b00      	cmp	r3, #0
  402e90:	d122      	bne.n	402ed8 <inv_icm426xx_enable_timestamp_to_register+0x5c>
		/* Enable the 20-bits timestamp register reading
		 * It's needed to wait at least 200us before doing the strobe 
		 */
		status |= inv_icm426xx_read_reg( s, MPUREG_TMST_CONFIG , 1, &tmst_cfg_reg);
  402e92:	f107 030b 	add.w	r3, r7, #11
  402e96:	2201      	movs	r2, #1
  402e98:	2154      	movs	r1, #84	; 0x54
  402e9a:	6878      	ldr	r0, [r7, #4]
  402e9c:	4c15      	ldr	r4, [pc, #84]	; (402ef4 <inv_icm426xx_enable_timestamp_to_register+0x78>)
  402e9e:	47a0      	blx	r4
  402ea0:	4602      	mov	r2, r0
  402ea2:	68fb      	ldr	r3, [r7, #12]
  402ea4:	4313      	orrs	r3, r2
  402ea6:	60fb      	str	r3, [r7, #12]
		tmst_cfg_reg &= ~(uint8_t)BIT_TMST_CONFIG_TMST_TO_REGS_EN_MASK;
  402ea8:	7afb      	ldrb	r3, [r7, #11]
  402eaa:	f023 0310 	bic.w	r3, r3, #16
  402eae:	b2db      	uxtb	r3, r3
  402eb0:	72fb      	strb	r3, [r7, #11]
		tmst_cfg_reg |= (uint8_t)ICM426XX_TMST_CONFIG_TMST_TO_REGS_EN;
  402eb2:	7afb      	ldrb	r3, [r7, #11]
  402eb4:	f043 0310 	orr.w	r3, r3, #16
  402eb8:	b2db      	uxtb	r3, r3
  402eba:	72fb      	strb	r3, [r7, #11]
		status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  402ebc:	f107 030b 	add.w	r3, r7, #11
  402ec0:	2201      	movs	r2, #1
  402ec2:	2154      	movs	r1, #84	; 0x54
  402ec4:	6878      	ldr	r0, [r7, #4]
  402ec6:	4c0c      	ldr	r4, [pc, #48]	; (402ef8 <inv_icm426xx_enable_timestamp_to_register+0x7c>)
  402ec8:	47a0      	blx	r4
  402eca:	4602      	mov	r2, r0
  402ecc:	68fb      	ldr	r3, [r7, #12]
  402ece:	4313      	orrs	r3, r2
  402ed0:	60fb      	str	r3, [r7, #12]
		
		inv_icm426xx_sleep_us(200);
  402ed2:	20c8      	movs	r0, #200	; 0xc8
  402ed4:	4b09      	ldr	r3, [pc, #36]	; (402efc <inv_icm426xx_enable_timestamp_to_register+0x80>)
  402ed6:	4798      	blx	r3
	}
	s->tmst_to_reg_en_cnt ++;
  402ed8:	687b      	ldr	r3, [r7, #4]
  402eda:	f893 3854 	ldrb.w	r3, [r3, #2132]	; 0x854
  402ede:	3301      	adds	r3, #1
  402ee0:	b2da      	uxtb	r2, r3
  402ee2:	687b      	ldr	r3, [r7, #4]
  402ee4:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
	
	return status;
  402ee8:	68fb      	ldr	r3, [r7, #12]
}
  402eea:	4618      	mov	r0, r3
  402eec:	3714      	adds	r7, #20
  402eee:	46bd      	mov	sp, r7
  402ef0:	bd90      	pop	{r4, r7, pc}
  402ef2:	bf00      	nop
  402ef4:	00403931 	.word	0x00403931
  402ef8:	004039fd 	.word	0x004039fd
  402efc:	00401659 	.word	0x00401659

00402f00 <inv_icm426xx_disable_timestamp_to_register>:

int inv_icm426xx_disable_timestamp_to_register(struct inv_icm426xx * s)
{
  402f00:	b590      	push	{r4, r7, lr}
  402f02:	b085      	sub	sp, #20
  402f04:	af00      	add	r7, sp, #0
  402f06:	6078      	str	r0, [r7, #4]
	int status = 0;
  402f08:	2300      	movs	r3, #0
  402f0a:	60fb      	str	r3, [r7, #12]
	uint8_t tmst_cfg_reg;

	if(!s->tmst_to_reg_en_cnt) {
  402f0c:	687b      	ldr	r3, [r7, #4]
  402f0e:	f893 3854 	ldrb.w	r3, [r3, #2132]	; 0x854
  402f12:	2b00      	cmp	r3, #0
  402f14:	d11c      	bne.n	402f50 <inv_icm426xx_disable_timestamp_to_register+0x50>
		/* Disable the 20-bits timestamp register reading */
		status |= inv_icm426xx_read_reg( s, MPUREG_TMST_CONFIG , 1, &tmst_cfg_reg);
  402f16:	f107 030b 	add.w	r3, r7, #11
  402f1a:	2201      	movs	r2, #1
  402f1c:	2154      	movs	r1, #84	; 0x54
  402f1e:	6878      	ldr	r0, [r7, #4]
  402f20:	4c12      	ldr	r4, [pc, #72]	; (402f6c <inv_icm426xx_disable_timestamp_to_register+0x6c>)
  402f22:	47a0      	blx	r4
  402f24:	4602      	mov	r2, r0
  402f26:	68fb      	ldr	r3, [r7, #12]
  402f28:	4313      	orrs	r3, r2
  402f2a:	60fb      	str	r3, [r7, #12]
		tmst_cfg_reg &= (uint8_t)~BIT_TMST_CONFIG_TMST_TO_REGS_EN_MASK;
  402f2c:	7afb      	ldrb	r3, [r7, #11]
  402f2e:	f023 0310 	bic.w	r3, r3, #16
  402f32:	b2db      	uxtb	r3, r3
  402f34:	72fb      	strb	r3, [r7, #11]
		tmst_cfg_reg |=(uint8_t) ICM426XX_TMST_CONFIG_TMST_TO_REGS_DIS;
  402f36:	7afb      	ldrb	r3, [r7, #11]
  402f38:	72fb      	strb	r3, [r7, #11]
		status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  402f3a:	f107 030b 	add.w	r3, r7, #11
  402f3e:	2201      	movs	r2, #1
  402f40:	2154      	movs	r1, #84	; 0x54
  402f42:	6878      	ldr	r0, [r7, #4]
  402f44:	4c0a      	ldr	r4, [pc, #40]	; (402f70 <inv_icm426xx_disable_timestamp_to_register+0x70>)
  402f46:	47a0      	blx	r4
  402f48:	4602      	mov	r2, r0
  402f4a:	68fb      	ldr	r3, [r7, #12]
  402f4c:	4313      	orrs	r3, r2
  402f4e:	60fb      	str	r3, [r7, #12]
	}
	s->tmst_to_reg_en_cnt --;
  402f50:	687b      	ldr	r3, [r7, #4]
  402f52:	f893 3854 	ldrb.w	r3, [r3, #2132]	; 0x854
  402f56:	3b01      	subs	r3, #1
  402f58:	b2da      	uxtb	r2, r3
  402f5a:	687b      	ldr	r3, [r7, #4]
  402f5c:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
	
	return status;
  402f60:	68fb      	ldr	r3, [r7, #12]
}
  402f62:	4618      	mov	r0, r3
  402f64:	3714      	adds	r7, #20
  402f66:	46bd      	mov	sp, r7
  402f68:	bd90      	pop	{r4, r7, pc}
  402f6a:	bf00      	nop
  402f6c:	00403931 	.word	0x00403931
  402f70:	004039fd 	.word	0x004039fd

00402f74 <inv_icm426xx_get_current_timestamp>:

int inv_icm426xx_get_current_timestamp(struct inv_icm426xx * s, uint32_t * icm_time)
{
  402f74:	b590      	push	{r4, r7, lr}
  402f76:	b085      	sub	sp, #20
  402f78:	af00      	add	r7, sp, #0
  402f7a:	6078      	str	r0, [r7, #4]
  402f7c:	6039      	str	r1, [r7, #0]
	int status = 0;
  402f7e:	2300      	movs	r3, #0
  402f80:	60fb      	str	r3, [r7, #12]
	uint8_t data[3];
	
	/* Enable timestamp counter to be latched in timestamp register */
	data[0] = (uint8_t)ICM426XX_SIGNAL_PATH_RESET_TMST_STROBE_EN;
  402f82:	2304      	movs	r3, #4
  402f84:	723b      	strb	r3, [r7, #8]
	status |= inv_icm426xx_write_reg(s, MPUREG_SIGNAL_PATH_RESET, 1, &data[0]);
  402f86:	f107 0308 	add.w	r3, r7, #8
  402f8a:	2201      	movs	r2, #1
  402f8c:	214b      	movs	r1, #75	; 0x4b
  402f8e:	6878      	ldr	r0, [r7, #4]
  402f90:	4c18      	ldr	r4, [pc, #96]	; (402ff4 <inv_icm426xx_get_current_timestamp+0x80>)
  402f92:	47a0      	blx	r4
  402f94:	4602      	mov	r2, r0
  402f96:	68fb      	ldr	r3, [r7, #12]
  402f98:	4313      	orrs	r3, r2
  402f9a:	60fb      	str	r3, [r7, #12]
	
	/* Get ICM timestamp */
	status |= inv_icm426xx_set_reg_bank(s, 1);
  402f9c:	2101      	movs	r1, #1
  402f9e:	6878      	ldr	r0, [r7, #4]
  402fa0:	4b15      	ldr	r3, [pc, #84]	; (402ff8 <inv_icm426xx_get_current_timestamp+0x84>)
  402fa2:	4798      	blx	r3
  402fa4:	4602      	mov	r2, r0
  402fa6:	68fb      	ldr	r3, [r7, #12]
  402fa8:	4313      	orrs	r3, r2
  402faa:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_VAL0_B1, 3, data);
  402fac:	f107 0308 	add.w	r3, r7, #8
  402fb0:	2203      	movs	r2, #3
  402fb2:	2162      	movs	r1, #98	; 0x62
  402fb4:	6878      	ldr	r0, [r7, #4]
  402fb6:	4c11      	ldr	r4, [pc, #68]	; (402ffc <inv_icm426xx_get_current_timestamp+0x88>)
  402fb8:	47a0      	blx	r4
  402fba:	4602      	mov	r2, r0
  402fbc:	68fb      	ldr	r3, [r7, #12]
  402fbe:	4313      	orrs	r3, r2
  402fc0:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  402fc2:	2100      	movs	r1, #0
  402fc4:	6878      	ldr	r0, [r7, #4]
  402fc6:	4b0c      	ldr	r3, [pc, #48]	; (402ff8 <inv_icm426xx_get_current_timestamp+0x84>)
  402fc8:	4798      	blx	r3
  402fca:	4602      	mov	r2, r0
  402fcc:	68fb      	ldr	r3, [r7, #12]
  402fce:	4313      	orrs	r3, r2
  402fd0:	60fb      	str	r3, [r7, #12]
	*icm_time = ((uint32_t)(data[2] & 0x0F) << 16) + ((uint32_t)data[1] << 8) + data[0];
  402fd2:	7abb      	ldrb	r3, [r7, #10]
  402fd4:	041b      	lsls	r3, r3, #16
  402fd6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
  402fda:	7a7b      	ldrb	r3, [r7, #9]
  402fdc:	021b      	lsls	r3, r3, #8
  402fde:	4413      	add	r3, r2
  402fe0:	7a3a      	ldrb	r2, [r7, #8]
  402fe2:	441a      	add	r2, r3
  402fe4:	683b      	ldr	r3, [r7, #0]
  402fe6:	601a      	str	r2, [r3, #0]
	
	return status;
  402fe8:	68fb      	ldr	r3, [r7, #12]
}
  402fea:	4618      	mov	r0, r3
  402fec:	3714      	adds	r7, #20
  402fee:	46bd      	mov	sp, r7
  402ff0:	bd90      	pop	{r4, r7, pc}
  402ff2:	bf00      	nop
  402ff4:	004039fd 	.word	0x004039fd
  402ff8:	00401675 	.word	0x00401675
  402ffc:	00403931 	.word	0x00403931

00403000 <inv_icm426xx_get_clkin_rtc_status>:
	
	return status;
}

int inv_icm426xx_get_clkin_rtc_status(struct inv_icm426xx * s)
{
  403000:	b590      	push	{r4, r7, lr}
  403002:	b085      	sub	sp, #20
  403004:	af00      	add	r7, sp, #0
  403006:	6078      	str	r0, [r7, #4]
	uint8_t data;
	int status=0;
  403008:	2300      	movs	r3, #0
  40300a:	60fb      	str	r3, [r7, #12]
	
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  40300c:	f107 030b 	add.w	r3, r7, #11
  403010:	2201      	movs	r2, #1
  403012:	214d      	movs	r1, #77	; 0x4d
  403014:	6878      	ldr	r0, [r7, #4]
  403016:	4c09      	ldr	r4, [pc, #36]	; (40303c <inv_icm426xx_get_clkin_rtc_status+0x3c>)
  403018:	47a0      	blx	r4
  40301a:	4602      	mov	r2, r0
  40301c:	68fb      	ldr	r3, [r7, #12]
  40301e:	4313      	orrs	r3, r2
  403020:	60fb      	str	r3, [r7, #12]
	if ((data & BIT_RTC_MODE_MASK) == ICM426XX_INTF_CONFIG1_RTC_MODE_EN)
  403022:	7afb      	ldrb	r3, [r7, #11]
  403024:	f003 0304 	and.w	r3, r3, #4
  403028:	2b00      	cmp	r3, #0
  40302a:	d001      	beq.n	403030 <inv_icm426xx_get_clkin_rtc_status+0x30>
		return 1;
  40302c:	2301      	movs	r3, #1
  40302e:	e000      	b.n	403032 <inv_icm426xx_get_clkin_rtc_status+0x32>
	else
		return 0;
  403030:	2300      	movs	r3, #0
}
  403032:	4618      	mov	r0, r3
  403034:	3714      	adds	r7, #20
  403036:	46bd      	mov	sp, r7
  403038:	bd90      	pop	{r4, r7, pc}
  40303a:	bf00      	nop
  40303c:	00403931 	.word	0x00403931

00403040 <inv_icm426xx_disable_high_resolution_fifo>:
	
	return 0;
}

int inv_icm426xx_disable_high_resolution_fifo(struct inv_icm426xx * s)
{
  403040:	b480      	push	{r7}
  403042:	b083      	sub	sp, #12
  403044:	af00      	add	r7, sp, #0
  403046:	6078      	str	r0, [r7, #4]
	data |= (uint8_t)~BIT_FIFO_CONFIG1_HIRES_MASK; /* == ICM426XX_FIFO_CONFIG1_HIRES_DIS */
	status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
#endif

	/* set FIFO packets to 16bit format (i.e. high res is disabled) */
	s->fifo_highres_enabled = 0;
  403048:	687b      	ldr	r3, [r7, #4]
  40304a:	2200      	movs	r2, #0
  40304c:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
	
	return 0;
  403050:	2300      	movs	r3, #0
}
  403052:	4618      	mov	r0, r3
  403054:	370c      	adds	r7, #12
  403056:	46bd      	mov	sp, r7
  403058:	f85d 7b04 	ldr.w	r7, [sp], #4
  40305c:	4770      	bx	lr
	...

00403060 <inv_icm426xx_configure_fifo>:

int inv_icm426xx_configure_fifo(struct inv_icm426xx * s, INV_ICM426XX_FIFO_CONFIG_t fifo_config)
{
  403060:	b590      	push	{r4, r7, lr}
  403062:	b089      	sub	sp, #36	; 0x24
  403064:	af00      	add	r7, sp, #0
  403066:	6078      	str	r0, [r7, #4]
  403068:	460b      	mov	r3, r1
  40306a:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  40306c:	2300      	movs	r3, #0
  40306e:	61fb      	str	r3, [r7, #28]
	uint8_t data;
	inv_icm426xx_interrupt_parameter_t config_int = {(inv_icm426xx_interrupt_value)0};
  403070:	f107 030c 	add.w	r3, r7, #12
  403074:	2200      	movs	r2, #0
  403076:	601a      	str	r2, [r3, #0]
  403078:	605a      	str	r2, [r3, #4]
  40307a:	609a      	str	r2, [r3, #8]
  40307c:	819a      	strh	r2, [r3, #12]
	
	s->fifo_is_used = fifo_config;
  40307e:	687b      	ldr	r3, [r7, #4]
  403080:	78fa      	ldrb	r2, [r7, #3]
  403082:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
	
	switch (fifo_config) {
  403086:	78fb      	ldrb	r3, [r7, #3]
  403088:	2b00      	cmp	r3, #0
  40308a:	f000 8094 	beq.w	4031b6 <inv_icm426xx_configure_fifo+0x156>
  40308e:	2b01      	cmp	r3, #1
  403090:	f040 80d5 	bne.w	40323e <inv_icm426xx_configure_fifo+0x1de>
			 * - FIFO record mode i.e FIFO count unit is packet 
			 * - FIFO snapshot mode i.e drop the data when the FIFO overflows
			 * - Timestamp is logged in FIFO
			 * - Little Endian fifo_count
			*/
			status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data);
  403094:	f107 031b 	add.w	r3, r7, #27
  403098:	2201      	movs	r2, #1
  40309a:	214c      	movs	r1, #76	; 0x4c
  40309c:	6878      	ldr	r0, [r7, #4]
  40309e:	4c6c      	ldr	r4, [pc, #432]	; (403250 <inv_icm426xx_configure_fifo+0x1f0>)
  4030a0:	47a0      	blx	r4
  4030a2:	4602      	mov	r2, r0
  4030a4:	69fb      	ldr	r3, [r7, #28]
  4030a6:	4313      	orrs	r3, r2
  4030a8:	61fb      	str	r3, [r7, #28]
			data |= (uint8_t)ICM426XX_INTF_CONFIG0_FIFO_COUNT_REC_RECORD;
  4030aa:	7efb      	ldrb	r3, [r7, #27]
  4030ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030b0:	b2db      	uxtb	r3, r3
  4030b2:	76fb      	strb	r3, [r7, #27]
			data &= (uint8_t)~BIT_FIFO_COUNT_ENDIAN_MASK; // little endian
  4030b4:	7efb      	ldrb	r3, [r7, #27]
  4030b6:	f023 0320 	bic.w	r3, r3, #32
  4030ba:	b2db      	uxtb	r3, r3
  4030bc:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG0, 1, &data);
  4030be:	f107 031b 	add.w	r3, r7, #27
  4030c2:	2201      	movs	r2, #1
  4030c4:	214c      	movs	r1, #76	; 0x4c
  4030c6:	6878      	ldr	r0, [r7, #4]
  4030c8:	4c62      	ldr	r4, [pc, #392]	; (403254 <inv_icm426xx_configure_fifo+0x1f4>)
  4030ca:	47a0      	blx	r4
  4030cc:	4602      	mov	r2, r0
  4030ce:	69fb      	ldr	r3, [r7, #28]
  4030d0:	4313      	orrs	r3, r2
  4030d2:	61fb      	str	r3, [r7, #28]
			data = (uint8_t)ICM426XX_FIFO_CONFIG_MODE_STOP_ON_FULL;
  4030d4:	2380      	movs	r3, #128	; 0x80
  4030d6:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  4030d8:	f107 031b 	add.w	r3, r7, #27
  4030dc:	2201      	movs	r2, #1
  4030de:	2116      	movs	r1, #22
  4030e0:	6878      	ldr	r0, [r7, #4]
  4030e2:	4c5c      	ldr	r4, [pc, #368]	; (403254 <inv_icm426xx_configure_fifo+0x1f4>)
  4030e4:	47a0      	blx	r4
  4030e6:	4602      	mov	r2, r0
  4030e8:	69fb      	ldr	r3, [r7, #28]
  4030ea:	4313      	orrs	r3, r2
  4030ec:	61fb      	str	r3, [r7, #28]
			status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &data);
  4030ee:	f107 031b 	add.w	r3, r7, #27
  4030f2:	2201      	movs	r2, #1
  4030f4:	2154      	movs	r1, #84	; 0x54
  4030f6:	6878      	ldr	r0, [r7, #4]
  4030f8:	4c55      	ldr	r4, [pc, #340]	; (403250 <inv_icm426xx_configure_fifo+0x1f0>)
  4030fa:	47a0      	blx	r4
  4030fc:	4602      	mov	r2, r0
  4030fe:	69fb      	ldr	r3, [r7, #28]
  403100:	4313      	orrs	r3, r2
  403102:	61fb      	str	r3, [r7, #28]
			data |= ICM426XX_TMST_CONFIG_TMST_EN;
  403104:	7efb      	ldrb	r3, [r7, #27]
  403106:	f043 0301 	orr.w	r3, r3, #1
  40310a:	b2db      	uxtb	r3, r3
  40310c:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &data);
  40310e:	f107 031b 	add.w	r3, r7, #27
  403112:	2201      	movs	r2, #1
  403114:	2154      	movs	r1, #84	; 0x54
  403116:	6878      	ldr	r0, [r7, #4]
  403118:	4c4e      	ldr	r4, [pc, #312]	; (403254 <inv_icm426xx_configure_fifo+0x1f4>)
  40311a:	47a0      	blx	r4
  40311c:	4602      	mov	r2, r0
  40311e:	69fb      	ldr	r3, [r7, #28]
  403120:	4313      	orrs	r3, r2
  403122:	61fb      	str	r3, [r7, #28]

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
			/* restart and reset FIFO configuration */
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  403124:	f107 031b 	add.w	r3, r7, #27
  403128:	2201      	movs	r2, #1
  40312a:	215f      	movs	r1, #95	; 0x5f
  40312c:	6878      	ldr	r0, [r7, #4]
  40312e:	4c48      	ldr	r4, [pc, #288]	; (403250 <inv_icm426xx_configure_fifo+0x1f0>)
  403130:	47a0      	blx	r4
  403132:	4602      	mov	r2, r0
  403134:	69fb      	ldr	r3, [r7, #28]
  403136:	4313      	orrs	r3, r2
  403138:	61fb      	str	r3, [r7, #28]
			data &= (uint8_t)~(BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_ACCEL_MASK);
  40313a:	7efb      	ldrb	r3, [r7, #27]
  40313c:	f023 0303 	bic.w	r3, r3, #3
  403140:	b2db      	uxtb	r3, r3
  403142:	76fb      	strb	r3, [r7, #27]
			data |= (BIT_FIFO_CONFIG1_TEMP_MASK | BIT_FIFO_CONFIG1_TMST_FSYNC_MASK);
  403144:	7efb      	ldrb	r3, [r7, #27]
  403146:	f043 030c 	orr.w	r3, r3, #12
  40314a:	b2db      	uxtb	r3, r3
  40314c:	76fb      	strb	r3, [r7, #27]
#else
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
			data |= (BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_ACCEL_MASK | BIT_FIFO_CONFIG1_TEMP_MASK | BIT_FIFO_CONFIG1_TMST_FSYNC_MASK);
#endif
			/* Set fifo_wm_int_w generating condition : fifo_wm_int_w generated when counter >= threshold */
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_WM_GT_TH_EN;
  40314e:	7efb      	ldrb	r3, [r7, #27]
  403150:	f043 0320 	orr.w	r3, r3, #32
  403154:	b2db      	uxtb	r3, r3
  403156:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  403158:	f107 031b 	add.w	r3, r7, #27
  40315c:	2201      	movs	r2, #1
  40315e:	215f      	movs	r1, #95	; 0x5f
  403160:	6878      	ldr	r0, [r7, #4]
  403162:	4c3c      	ldr	r4, [pc, #240]	; (403254 <inv_icm426xx_configure_fifo+0x1f4>)
  403164:	47a0      	blx	r4
  403166:	4602      	mov	r2, r0
  403168:	69fb      	ldr	r3, [r7, #28]
  40316a:	4313      	orrs	r3, r2
  40316c:	61fb      	str	r3, [r7, #28]
			/* Configure FIFO WM so that INT is triggered for each packet */
			data = 0x1;
  40316e:	2301      	movs	r3, #1
  403170:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG2, 1, &data);
  403172:	f107 031b 	add.w	r3, r7, #27
  403176:	2201      	movs	r2, #1
  403178:	2160      	movs	r1, #96	; 0x60
  40317a:	6878      	ldr	r0, [r7, #4]
  40317c:	4c35      	ldr	r4, [pc, #212]	; (403254 <inv_icm426xx_configure_fifo+0x1f4>)
  40317e:	47a0      	blx	r4
  403180:	4602      	mov	r2, r0
  403182:	69fb      	ldr	r3, [r7, #28]
  403184:	4313      	orrs	r3, r2
  403186:	61fb      	str	r3, [r7, #28]

			/* Disable Data Ready Interrupt */
			status |= inv_icm426xx_get_config_int1(s, &config_int);
  403188:	f107 030c 	add.w	r3, r7, #12
  40318c:	4619      	mov	r1, r3
  40318e:	6878      	ldr	r0, [r7, #4]
  403190:	4b31      	ldr	r3, [pc, #196]	; (403258 <inv_icm426xx_configure_fifo+0x1f8>)
  403192:	4798      	blx	r3
  403194:	4602      	mov	r2, r0
  403196:	69fb      	ldr	r3, [r7, #28]
  403198:	4313      	orrs	r3, r2
  40319a:	61fb      	str	r3, [r7, #28]
			config_int.INV_ICM426XX_UI_DRDY = INV_ICM426XX_DISABLE;
  40319c:	2300      	movs	r3, #0
  40319e:	737b      	strb	r3, [r7, #13]
			status |= inv_icm426xx_set_config_int1(s, &config_int);
  4031a0:	f107 030c 	add.w	r3, r7, #12
  4031a4:	4619      	mov	r1, r3
  4031a6:	6878      	ldr	r0, [r7, #4]
  4031a8:	4b2c      	ldr	r3, [pc, #176]	; (40325c <inv_icm426xx_configure_fifo+0x1fc>)
  4031aa:	4798      	blx	r3
  4031ac:	4602      	mov	r2, r0
  4031ae:	69fb      	ldr	r3, [r7, #28]
  4031b0:	4313      	orrs	r3, r2
  4031b2:	61fb      	str	r3, [r7, #28]
			break;
  4031b4:	e046      	b.n	403244 <inv_icm426xx_configure_fifo+0x1e4>
		
		case INV_ICM426XX_FIFO_DISABLED :
			/* make sure FIFO is disabled */
			data = ICM426XX_FIFO_CONFIG_MODE_BYPASS;
  4031b6:	2300      	movs	r3, #0
  4031b8:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  4031ba:	f107 031b 	add.w	r3, r7, #27
  4031be:	2201      	movs	r2, #1
  4031c0:	2116      	movs	r1, #22
  4031c2:	6878      	ldr	r0, [r7, #4]
  4031c4:	4c23      	ldr	r4, [pc, #140]	; (403254 <inv_icm426xx_configure_fifo+0x1f4>)
  4031c6:	47a0      	blx	r4
  4031c8:	4602      	mov	r2, r0
  4031ca:	69fb      	ldr	r3, [r7, #28]
  4031cc:	4313      	orrs	r3, r2
  4031ce:	61fb      	str	r3, [r7, #28]
			
			/* restart and reset FIFO configuration */
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  4031d0:	f107 031b 	add.w	r3, r7, #27
  4031d4:	2201      	movs	r2, #1
  4031d6:	215f      	movs	r1, #95	; 0x5f
  4031d8:	6878      	ldr	r0, [r7, #4]
  4031da:	4c1d      	ldr	r4, [pc, #116]	; (403250 <inv_icm426xx_configure_fifo+0x1f0>)
  4031dc:	47a0      	blx	r4
  4031de:	4602      	mov	r2, r0
  4031e0:	69fb      	ldr	r3, [r7, #28]
  4031e2:	4313      	orrs	r3, r2
  4031e4:	61fb      	str	r3, [r7, #28]
			data &= (uint8_t)~(BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_ACCEL_MASK);
  4031e6:	7efb      	ldrb	r3, [r7, #27]
  4031e8:	f023 0303 	bic.w	r3, r3, #3
  4031ec:	b2db      	uxtb	r3, r3
  4031ee:	76fb      	strb	r3, [r7, #27]
			data |= (BIT_FIFO_CONFIG1_TEMP_MASK | BIT_FIFO_CONFIG1_TMST_FSYNC_MASK);
  4031f0:	7efb      	ldrb	r3, [r7, #27]
  4031f2:	f043 030c 	orr.w	r3, r3, #12
  4031f6:	b2db      	uxtb	r3, r3
  4031f8:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  4031fa:	f107 031b 	add.w	r3, r7, #27
  4031fe:	2201      	movs	r2, #1
  403200:	215f      	movs	r1, #95	; 0x5f
  403202:	6878      	ldr	r0, [r7, #4]
  403204:	4c13      	ldr	r4, [pc, #76]	; (403254 <inv_icm426xx_configure_fifo+0x1f4>)
  403206:	47a0      	blx	r4
  403208:	4602      	mov	r2, r0
  40320a:	69fb      	ldr	r3, [r7, #28]
  40320c:	4313      	orrs	r3, r2
  40320e:	61fb      	str	r3, [r7, #28]
			
			/* Enable Data Ready Interrupt */
			status |= inv_icm426xx_get_config_int1(s, &config_int);
  403210:	f107 030c 	add.w	r3, r7, #12
  403214:	4619      	mov	r1, r3
  403216:	6878      	ldr	r0, [r7, #4]
  403218:	4b0f      	ldr	r3, [pc, #60]	; (403258 <inv_icm426xx_configure_fifo+0x1f8>)
  40321a:	4798      	blx	r3
  40321c:	4602      	mov	r2, r0
  40321e:	69fb      	ldr	r3, [r7, #28]
  403220:	4313      	orrs	r3, r2
  403222:	61fb      	str	r3, [r7, #28]
			config_int.INV_ICM426XX_UI_DRDY = INV_ICM426XX_ENABLE;
  403224:	2301      	movs	r3, #1
  403226:	737b      	strb	r3, [r7, #13]
			status |= inv_icm426xx_set_config_int1(s, &config_int);
  403228:	f107 030c 	add.w	r3, r7, #12
  40322c:	4619      	mov	r1, r3
  40322e:	6878      	ldr	r0, [r7, #4]
  403230:	4b0a      	ldr	r3, [pc, #40]	; (40325c <inv_icm426xx_configure_fifo+0x1fc>)
  403232:	4798      	blx	r3
  403234:	4602      	mov	r2, r0
  403236:	69fb      	ldr	r3, [r7, #28]
  403238:	4313      	orrs	r3, r2
  40323a:	61fb      	str	r3, [r7, #28]
			break;
  40323c:	e002      	b.n	403244 <inv_icm426xx_configure_fifo+0x1e4>

		default :
			status = -1;
  40323e:	f04f 33ff 	mov.w	r3, #4294967295
  403242:	61fb      	str	r3, [r7, #28]
	}
	return status;
  403244:	69fb      	ldr	r3, [r7, #28]
}
  403246:	4618      	mov	r0, r3
  403248:	3724      	adds	r7, #36	; 0x24
  40324a:	46bd      	mov	sp, r7
  40324c:	bd90      	pop	{r4, r7, pc}
  40324e:	bf00      	nop
  403250:	00403931 	.word	0x00403931
  403254:	004039fd 	.word	0x004039fd
  403258:	00402069 	.word	0x00402069
  40325c:	0040237d 	.word	0x0040237d

00403260 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24>:

	return status;
}

uint32_t inv_icm426xx_get_fifo_timestamp_resolution_us_q24(struct inv_icm426xx * s)
{
  403260:	b590      	push	{r4, r7, lr}
  403262:	b087      	sub	sp, #28
  403264:	af00      	add	r7, sp, #0
  403266:	6078      	str	r0, [r7, #4]
	int status = 0;
  403268:	2300      	movs	r3, #0
  40326a:	613b      	str	r3, [r7, #16]
	uint8_t tmst_cfg_reg;
	ICM426XX_TMST_CONFIG_RESOL_t tmst_resol;
	uint32_t scale_factor_q24 = 1<<24;
  40326c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  403270:	617b      	str	r3, [r7, #20]
	
	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  403272:	f107 030e 	add.w	r3, r7, #14
  403276:	2201      	movs	r2, #1
  403278:	2154      	movs	r1, #84	; 0x54
  40327a:	6878      	ldr	r0, [r7, #4]
  40327c:	4c18      	ldr	r4, [pc, #96]	; (4032e0 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x80>)
  40327e:	47a0      	blx	r4
  403280:	4602      	mov	r2, r0
  403282:	693b      	ldr	r3, [r7, #16]
  403284:	4313      	orrs	r3, r2
  403286:	613b      	str	r3, [r7, #16]
	if (status < 0)
  403288:	693b      	ldr	r3, [r7, #16]
  40328a:	2b00      	cmp	r3, #0
  40328c:	da02      	bge.n	403294 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x34>
		return INV_ERROR;
  40328e:	f04f 33ff 	mov.w	r3, #4294967295
  403292:	e020      	b.n	4032d6 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x76>
		
	tmst_resol = (ICM426XX_TMST_CONFIG_RESOL_t)(tmst_cfg_reg & BIT_TMST_CONFIG_RESOL_MASK);
  403294:	7bbb      	ldrb	r3, [r7, #14]
  403296:	f003 0308 	and.w	r3, r3, #8
  40329a:	73fb      	strb	r3, [r7, #15]

	/* RTC is enabled, the resolution of the timestamp is one tick of RTC
	 * RTC runs at 32768 Hz, so resolution is 1/32768 s, or 1000000/32768 us	
	 */
	if (inv_icm426xx_get_clkin_rtc_status(s))
  40329c:	6878      	ldr	r0, [r7, #4]
  40329e:	4b11      	ldr	r3, [pc, #68]	; (4032e4 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x84>)
  4032a0:	4798      	blx	r3
  4032a2:	4603      	mov	r3, r0
  4032a4:	2b00      	cmp	r3, #0
  4032a6:	d001      	beq.n	4032ac <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x4c>
		return ((1000000UL<<12)/32768UL)<<(24-12);
  4032a8:	4b0f      	ldr	r3, [pc, #60]	; (4032e8 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x88>)
  4032aa:	e014      	b.n	4032d6 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x76>

	/* PLL scale factor doesn't apply when WU oscillator is in use */
	if (!inv_icm426xx_is_wu_osc_active(s))
  4032ac:	6878      	ldr	r0, [r7, #4]
  4032ae:	4b0f      	ldr	r3, [pc, #60]	; (4032ec <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x8c>)
  4032b0:	4798      	blx	r3
  4032b2:	4603      	mov	r3, r0
  4032b4:	2b00      	cmp	r3, #0
  4032b6:	d102      	bne.n	4032be <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x5e>
		scale_factor_q24 = PLL_SCALE_FACTOR_Q24;
  4032b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4032bc:	617b      	str	r3, [r7, #20]
	
	if (tmst_resol == ICM426XX_TMST_CONFIG_RESOL_16us)
  4032be:	7bfb      	ldrb	r3, [r7, #15]
  4032c0:	2b08      	cmp	r3, #8
  4032c2:	d102      	bne.n	4032ca <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x6a>
		return 16 * scale_factor_q24;
  4032c4:	697b      	ldr	r3, [r7, #20]
  4032c6:	011b      	lsls	r3, r3, #4
  4032c8:	e005      	b.n	4032d6 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x76>
	else if (tmst_resol == ICM426XX_TMST_CONFIG_RESOL_1us)
  4032ca:	7bfb      	ldrb	r3, [r7, #15]
  4032cc:	2b00      	cmp	r3, #0
  4032ce:	d101      	bne.n	4032d4 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x74>
		return 1 * scale_factor_q24;
  4032d0:	697b      	ldr	r3, [r7, #20]
  4032d2:	e000      	b.n	4032d6 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x76>

	/* Should not happen, return 0 */
	return 0; 
  4032d4:	2300      	movs	r3, #0
}
  4032d6:	4618      	mov	r0, r3
  4032d8:	371c      	adds	r7, #28
  4032da:	46bd      	mov	sp, r7
  4032dc:	bd90      	pop	{r4, r7, pc}
  4032de:	bf00      	nop
  4032e0:	00403931 	.word	0x00403931
  4032e4:	00403001 	.word	0x00403001
  4032e8:	1e848000 	.word	0x1e848000
  4032ec:	00403795 	.word	0x00403795

004032f0 <inv_icm426xx_get_reg_timestamp_resolution_us_q24>:

uint32_t inv_icm426xx_get_reg_timestamp_resolution_us_q24(struct inv_icm426xx * s)
{
  4032f0:	b580      	push	{r7, lr}
  4032f2:	b084      	sub	sp, #16
  4032f4:	af00      	add	r7, sp, #0
  4032f6:	6078      	str	r0, [r7, #4]
	uint32_t scale_factor_q24 = 1<<24;
  4032f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4032fc:	60fb      	str	r3, [r7, #12]

	/* RTC is enabled, the resolution of the timestamp is one tick of RTC
	 * Our RTC runs at 32768 Hz, so resolution is 1/32768 s, or 1000000/32768 us	
	 */
	if (inv_icm426xx_get_clkin_rtc_status(s))
  4032fe:	6878      	ldr	r0, [r7, #4]
  403300:	4b0a      	ldr	r3, [pc, #40]	; (40332c <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x3c>)
  403302:	4798      	blx	r3
  403304:	4603      	mov	r3, r0
  403306:	2b00      	cmp	r3, #0
  403308:	d001      	beq.n	40330e <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x1e>
		return ((1000000UL<<12)/32768UL)<<(24-12);
  40330a:	4b09      	ldr	r3, [pc, #36]	; (403330 <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x40>)
  40330c:	e009      	b.n	403322 <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x32>

	/* PLL scale factor doesn't apply when WU oscillator is in use */
	if (!inv_icm426xx_is_wu_osc_active(s))
  40330e:	6878      	ldr	r0, [r7, #4]
  403310:	4b08      	ldr	r3, [pc, #32]	; (403334 <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x44>)
  403312:	4798      	blx	r3
  403314:	4603      	mov	r3, r0
  403316:	2b00      	cmp	r3, #0
  403318:	d102      	bne.n	403320 <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x30>
		scale_factor_q24 = PLL_SCALE_FACTOR_Q24;
  40331a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40331e:	60fb      	str	r3, [r7, #12]
	
	return 1 * scale_factor_q24;
  403320:	68fb      	ldr	r3, [r7, #12]
}
  403322:	4618      	mov	r0, r3
  403324:	3710      	adds	r7, #16
  403326:	46bd      	mov	sp, r7
  403328:	bd80      	pop	{r7, pc}
  40332a:	bf00      	nop
  40332c:	00403001 	.word	0x00403001
  403330:	1e848000 	.word	0x1e848000
  403334:	00403795 	.word	0x00403795

00403338 <inv_icm426xx_configure_serial_interface>:

/*
 * Static functions definition
 */
static int inv_icm426xx_configure_serial_interface(struct inv_icm426xx * s)
{
  403338:	b590      	push	{r4, r7, lr}
  40333a:	b085      	sub	sp, #20
  40333c:	af00      	add	r7, sp, #0
  40333e:	6078      	str	r0, [r7, #4]
	int status = 0;
  403340:	2300      	movs	r3, #0
  403342:	60fb      	str	r3, [r7, #12]
	uint8_t value;

	/* Set memory bank 1 */
	status |= inv_icm426xx_set_reg_bank(s, 1);
  403344:	2101      	movs	r1, #1
  403346:	6878      	ldr	r0, [r7, #4]
  403348:	4b36      	ldr	r3, [pc, #216]	; (403424 <inv_icm426xx_configure_serial_interface+0xec>)
  40334a:	4798      	blx	r3
  40334c:	4602      	mov	r2, r0
  40334e:	68fb      	ldr	r3, [r7, #12]
  403350:	4313      	orrs	r3, r2
  403352:	60fb      	str	r3, [r7, #12]

	switch(s->transport.serif.serif_type) {
  403354:	687b      	ldr	r3, [r7, #4]
  403356:	7e1b      	ldrb	r3, [r3, #24]
  403358:	2b01      	cmp	r3, #1
  40335a:	d043      	beq.n	4033e4 <inv_icm426xx_configure_serial_interface+0xac>
  40335c:	2b02      	cmp	r3, #2
  40335e:	d01d      	beq.n	40339c <inv_icm426xx_configure_serial_interface+0x64>
  403360:	2b00      	cmp	r3, #0
  403362:	d14d      	bne.n	403400 <inv_icm426xx_configure_serial_interface+0xc8>
	
		case ICM426XX_UI_I2C:
			/* Enable I2C 50ns spike filtering */
			status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  403364:	f107 030b 	add.w	r3, r7, #11
  403368:	2201      	movs	r2, #1
  40336a:	217c      	movs	r1, #124	; 0x7c
  40336c:	6878      	ldr	r0, [r7, #4]
  40336e:	4c2e      	ldr	r4, [pc, #184]	; (403428 <inv_icm426xx_configure_serial_interface+0xf0>)
  403370:	47a0      	blx	r4
  403372:	4602      	mov	r2, r0
  403374:	68fb      	ldr	r3, [r7, #12]
  403376:	4313      	orrs	r3, r2
  403378:	60fb      	str	r3, [r7, #12]
			value &= (uint8_t)~(BIT_INTF_CONFIG6_I3C_SDR_EN_MASK | BIT_INTF_CONFIG6_I3C_DDR_EN_MASK);
  40337a:	7afb      	ldrb	r3, [r7, #11]
  40337c:	f023 0303 	bic.w	r3, r3, #3
  403380:	b2db      	uxtb	r3, r3
  403382:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  403384:	f107 030b 	add.w	r3, r7, #11
  403388:	2201      	movs	r2, #1
  40338a:	217c      	movs	r1, #124	; 0x7c
  40338c:	6878      	ldr	r0, [r7, #4]
  40338e:	4c27      	ldr	r4, [pc, #156]	; (40342c <inv_icm426xx_configure_serial_interface+0xf4>)
  403390:	47a0      	blx	r4
  403392:	4602      	mov	r2, r0
  403394:	68fb      	ldr	r3, [r7, #12]
  403396:	4313      	orrs	r3, r2
  403398:	60fb      	str	r3, [r7, #12]
			break;
  40339a:	e035      	b.n	403408 <inv_icm426xx_configure_serial_interface+0xd0>
			
		case ICM426XX_UI_I3C:
			/* Enable In Band Interrupt for I3C UI interface and associated payload byte and assign dynamic address */
			status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  40339c:	f107 030b 	add.w	r3, r7, #11
  4033a0:	2201      	movs	r2, #1
  4033a2:	217c      	movs	r1, #124	; 0x7c
  4033a4:	6878      	ldr	r0, [r7, #4]
  4033a6:	4c20      	ldr	r4, [pc, #128]	; (403428 <inv_icm426xx_configure_serial_interface+0xf0>)
  4033a8:	47a0      	blx	r4
  4033aa:	4602      	mov	r2, r0
  4033ac:	68fb      	ldr	r3, [r7, #12]
  4033ae:	4313      	orrs	r3, r2
  4033b0:	60fb      	str	r3, [r7, #12]
			value |= (BIT_INTF_CONFIG6_I3C_IBI_BYTE_EN_MASK | BIT_INTF_CONFIG6_I3C_IBI_EN_MASK);
  4033b2:	7afb      	ldrb	r3, [r7, #11]
  4033b4:	f043 030c 	orr.w	r3, r3, #12
  4033b8:	b2db      	uxtb	r3, r3
  4033ba:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  4033bc:	f107 030b 	add.w	r3, r7, #11
  4033c0:	2201      	movs	r2, #1
  4033c2:	217c      	movs	r1, #124	; 0x7c
  4033c4:	6878      	ldr	r0, [r7, #4]
  4033c6:	4c19      	ldr	r4, [pc, #100]	; (40342c <inv_icm426xx_configure_serial_interface+0xf4>)
  4033c8:	47a0      	blx	r4
  4033ca:	4602      	mov	r2, r0
  4033cc:	68fb      	ldr	r3, [r7, #12]
  4033ce:	4313      	orrs	r3, r2
  4033d0:	60fb      	str	r3, [r7, #12]
			status |= s->transport.serif.configure((struct inv_icm426xx_serif *)s);
  4033d2:	687b      	ldr	r3, [r7, #4]
  4033d4:	68db      	ldr	r3, [r3, #12]
  4033d6:	6878      	ldr	r0, [r7, #4]
  4033d8:	4798      	blx	r3
  4033da:	4602      	mov	r2, r0
  4033dc:	68fb      	ldr	r3, [r7, #12]
  4033de:	4313      	orrs	r3, r2
  4033e0:	60fb      	str	r3, [r7, #12]
			break;
  4033e2:	e011      	b.n	403408 <inv_icm426xx_configure_serial_interface+0xd0>
			
		case ICM426XX_UI_SPI4:
			value = ICM426XX_INTF_CONFIG4_AP_SPI4W;
  4033e4:	2302      	movs	r3, #2
  4033e6:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG4_B1, 1, &value);
  4033e8:	f107 030b 	add.w	r3, r7, #11
  4033ec:	2201      	movs	r2, #1
  4033ee:	217a      	movs	r1, #122	; 0x7a
  4033f0:	6878      	ldr	r0, [r7, #4]
  4033f2:	4c0e      	ldr	r4, [pc, #56]	; (40342c <inv_icm426xx_configure_serial_interface+0xf4>)
  4033f4:	47a0      	blx	r4
  4033f6:	4602      	mov	r2, r0
  4033f8:	68fb      	ldr	r3, [r7, #12]
  4033fa:	4313      	orrs	r3, r2
  4033fc:	60fb      	str	r3, [r7, #12]
			break;
  4033fe:	e003      	b.n	403408 <inv_icm426xx_configure_serial_interface+0xd0>
			
		default:
			status |= INV_ERROR_BAD_ARG;
  403400:	68fb      	ldr	r3, [r7, #12]
  403402:	f063 030a 	orn	r3, r3, #10
  403406:	60fb      	str	r3, [r7, #12]
	}

	/* Set memory bank 0 */
	status |= inv_icm426xx_set_reg_bank(s, 0);
  403408:	2100      	movs	r1, #0
  40340a:	6878      	ldr	r0, [r7, #4]
  40340c:	4b05      	ldr	r3, [pc, #20]	; (403424 <inv_icm426xx_configure_serial_interface+0xec>)
  40340e:	4798      	blx	r3
  403410:	4602      	mov	r2, r0
  403412:	68fb      	ldr	r3, [r7, #12]
  403414:	4313      	orrs	r3, r2
  403416:	60fb      	str	r3, [r7, #12]
	
	return status;
  403418:	68fb      	ldr	r3, [r7, #12]
}
  40341a:	4618      	mov	r0, r3
  40341c:	3714      	adds	r7, #20
  40341e:	46bd      	mov	sp, r7
  403420:	bd90      	pop	{r4, r7, pc}
  403422:	bf00      	nop
  403424:	00401675 	.word	0x00401675
  403428:	00403931 	.word	0x00403931
  40342c:	004039fd 	.word	0x004039fd

00403430 <inv_icm426xx_init_hardware_from_ui>:

static int inv_icm426xx_init_hardware_from_ui(struct inv_icm426xx * s)
{
  403430:	b590      	push	{r4, r7, lr}
  403432:	b08b      	sub	sp, #44	; 0x2c
  403434:	af00      	add	r7, sp, #0
  403436:	6078      	str	r0, [r7, #4]
	uint8_t data;
	int status = 0;
  403438:	2300      	movs	r3, #0
  40343a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t wom_threshold[3];
	uint8_t gyro_cfg_0_reg, accel_cfg_0_reg, tmst_cfg_reg; 
	inv_icm426xx_interrupt_parameter_t config_int = {
  40343c:	4bb4      	ldr	r3, [pc, #720]	; (403710 <inv_icm426xx_init_hardware_from_ui+0x2e0>)
  40343e:	f107 040c 	add.w	r4, r7, #12
  403442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403444:	c407      	stmia	r4!, {r0, r1, r2}
  403446:	8023      	strh	r3, [r4, #0]
		.INV_ICM426XX_SLEEP_DET     = INV_ICM426XX_ENABLE,	
		.INV_ICM426XX_WAKE_DET      = INV_ICM426XX_ENABLE,	
		.INV_ICM426XX_TAP_DET       = INV_ICM426XX_ENABLE,	
	};

	status |= inv_icm426xx_device_reset(s);
  403448:	6878      	ldr	r0, [r7, #4]
  40344a:	4bb2      	ldr	r3, [pc, #712]	; (403714 <inv_icm426xx_init_hardware_from_ui+0x2e4>)
  40344c:	4798      	blx	r3
  40344e:	4602      	mov	r2, r0
  403450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403452:	4313      	orrs	r3, r2
  403454:	627b      	str	r3, [r7, #36]	; 0x24

	/* Setup MEMs properties */
	status |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  403456:	f107 031f 	add.w	r3, r7, #31
  40345a:	2201      	movs	r2, #1
  40345c:	214f      	movs	r1, #79	; 0x4f
  40345e:	6878      	ldr	r0, [r7, #4]
  403460:	4cad      	ldr	r4, [pc, #692]	; (403718 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403462:	47a0      	blx	r4
  403464:	4602      	mov	r2, r0
  403466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403468:	4313      	orrs	r3, r2
  40346a:	627b      	str	r3, [r7, #36]	; 0x24
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  40346c:	f107 031e 	add.w	r3, r7, #30
  403470:	2201      	movs	r2, #1
  403472:	2150      	movs	r1, #80	; 0x50
  403474:	6878      	ldr	r0, [r7, #4]
  403476:	4ca8      	ldr	r4, [pc, #672]	; (403718 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403478:	47a0      	blx	r4
  40347a:	4602      	mov	r2, r0
  40347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40347e:	4313      	orrs	r3, r2
  403480:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_cfg_0_reg &= (uint8_t)~BIT_GYRO_CONFIG0_FS_SEL_MASK;
  403482:	7ffb      	ldrb	r3, [r7, #31]
  403484:	f003 031f 	and.w	r3, r3, #31
  403488:	b2db      	uxtb	r3, r3
  40348a:	77fb      	strb	r3, [r7, #31]
	gyro_cfg_0_reg |= (uint8_t)ICM426XX_GYRO_CONFIG0_FS_SEL_2000dps;
  40348c:	7ffb      	ldrb	r3, [r7, #31]
  40348e:	77fb      	strb	r3, [r7, #31]
	accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_FS_SEL_MASK;
  403490:	7fbb      	ldrb	r3, [r7, #30]
  403492:	f003 031f 	and.w	r3, r3, #31
  403496:	b2db      	uxtb	r3, r3
  403498:	77bb      	strb	r3, [r7, #30]
	accel_cfg_0_reg |= (uint8_t)ICM426XX_ACCEL_CONFIG0_FS_SEL_4g;
  40349a:	7fbb      	ldrb	r3, [r7, #30]
  40349c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4034a0:	b2db      	uxtb	r3, r3
  4034a2:	77bb      	strb	r3, [r7, #30]
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  4034a4:	f107 031f 	add.w	r3, r7, #31
  4034a8:	2201      	movs	r2, #1
  4034aa:	214f      	movs	r1, #79	; 0x4f
  4034ac:	6878      	ldr	r0, [r7, #4]
  4034ae:	4c9b      	ldr	r4, [pc, #620]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4034b0:	47a0      	blx	r4
  4034b2:	4602      	mov	r2, r0
  4034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4034b6:	4313      	orrs	r3, r2
  4034b8:	627b      	str	r3, [r7, #36]	; 0x24
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  4034ba:	f107 031e 	add.w	r3, r7, #30
  4034be:	2201      	movs	r2, #1
  4034c0:	2150      	movs	r1, #80	; 0x50
  4034c2:	6878      	ldr	r0, [r7, #4]
  4034c4:	4c95      	ldr	r4, [pc, #596]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4034c6:	47a0      	blx	r4
  4034c8:	4602      	mov	r2, r0
  4034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4034cc:	4313      	orrs	r3, r2
  4034ce:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* make sure FIFO is disabled */
	data = ICM426XX_FIFO_CONFIG_MODE_BYPASS;
  4034d0:	2300      	movs	r3, #0
  4034d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  4034d6:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4034da:	2201      	movs	r2, #1
  4034dc:	2116      	movs	r1, #22
  4034de:	6878      	ldr	r0, [r7, #4]
  4034e0:	4c8e      	ldr	r4, [pc, #568]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4034e2:	47a0      	blx	r4
  4034e4:	4602      	mov	r2, r0
  4034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4034e8:	4313      	orrs	r3, r2
  4034ea:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Deactivate FSYNC by default */
	status |= inv_icm426xx_read_reg(s, MPUREG_FSYNC_CONFIG, 1, &data);
  4034ec:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4034f0:	2201      	movs	r2, #1
  4034f2:	2162      	movs	r1, #98	; 0x62
  4034f4:	6878      	ldr	r0, [r7, #4]
  4034f6:	4c88      	ldr	r4, [pc, #544]	; (403718 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  4034f8:	47a0      	blx	r4
  4034fa:	4602      	mov	r2, r0
  4034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4034fe:	4313      	orrs	r3, r2
  403500:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_FSYNC_CONFIG_UI_SEL_MASK;
  403502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40350a:	b2db      	uxtb	r3, r3
  40350c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_FSYNC_CONFIG, 1, &data);
  403510:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403514:	2201      	movs	r2, #1
  403516:	2162      	movs	r1, #98	; 0x62
  403518:	6878      	ldr	r0, [r7, #4]
  40351a:	4c80      	ldr	r4, [pc, #512]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  40351c:	47a0      	blx	r4
  40351e:	4602      	mov	r2, r0
  403520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403522:	4313      	orrs	r3, r2
  403524:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  403526:	f107 031d 	add.w	r3, r7, #29
  40352a:	2201      	movs	r2, #1
  40352c:	2154      	movs	r1, #84	; 0x54
  40352e:	6878      	ldr	r0, [r7, #4]
  403530:	4c79      	ldr	r4, [pc, #484]	; (403718 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403532:	47a0      	blx	r4
  403534:	4602      	mov	r2, r0
  403536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403538:	4313      	orrs	r3, r2
  40353a:	627b      	str	r3, [r7, #36]	; 0x24
	tmst_cfg_reg &= (uint8_t)~BIT_TMST_CONFIG_TMST_FSYNC_MASK; // == ICM426XX_FSYNC_CONFIG_UI_SEL_NO
  40353c:	7f7b      	ldrb	r3, [r7, #29]
  40353e:	f023 0302 	bic.w	r3, r3, #2
  403542:	b2db      	uxtb	r3, r3
  403544:	777b      	strb	r3, [r7, #29]
	status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  403546:	f107 031d 	add.w	r3, r7, #29
  40354a:	2201      	movs	r2, #1
  40354c:	2154      	movs	r1, #84	; 0x54
  40354e:	6878      	ldr	r0, [r7, #4]
  403550:	4c72      	ldr	r4, [pc, #456]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  403552:	47a0      	blx	r4
  403554:	4602      	mov	r2, r0
  403556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403558:	4313      	orrs	r3, r2
  40355a:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Set default timestamp resolution 16us (Mobile use cases) */
	status |= inv_icm426xx_configure_timestamp_resolution(s, ICM426XX_TMST_CONFIG_RESOL_16us);
  40355c:	2108      	movs	r1, #8
  40355e:	6878      	ldr	r0, [r7, #4]
  403560:	4b6f      	ldr	r3, [pc, #444]	; (403720 <inv_icm426xx_init_hardware_from_ui+0x2f0>)
  403562:	4798      	blx	r3
  403564:	4602      	mov	r2, r0
  403566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403568:	4313      	orrs	r3, r2
  40356a:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_configure_fifo(s, INV_ICM426XX_FIFO_ENABLED);
  40356c:	2101      	movs	r1, #1
  40356e:	6878      	ldr	r0, [r7, #4]
  403570:	4b6c      	ldr	r3, [pc, #432]	; (403724 <inv_icm426xx_init_hardware_from_ui+0x2f4>)
  403572:	4798      	blx	r3
  403574:	4602      	mov	r2, r0
  403576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403578:	4313      	orrs	r3, r2
  40357a:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_CONFIG, 1, &data);
  40357c:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403580:	2201      	movs	r2, #1
  403582:	2114      	movs	r1, #20
  403584:	6878      	ldr	r0, [r7, #4]
  403586:	4c64      	ldr	r4, [pc, #400]	; (403718 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403588:	47a0      	blx	r4
  40358a:	4602      	mov	r2, r0
  40358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40358e:	4313      	orrs	r3, r2
  403590:	627b      	str	r3, [r7, #36]	; 0x24
	/* Enable push pull on INT1 to avoid moving in Test Mode after a soft reset */
	data |= (uint8_t)ICM426XX_INT_CONFIG_INT1_DRIVE_CIRCUIT_PP;
  403592:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403596:	f043 0302 	orr.w	r3, r3, #2
  40359a:	b2db      	uxtb	r3, r3
  40359c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Configure the INT1 interrupt pulse as active high */
	data |= (uint8_t)ICM426XX_INT_CONFIG_INT1_POLARITY_HIGH;
  4035a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4035a4:	f043 0301 	orr.w	r3, r3, #1
  4035a8:	b2db      	uxtb	r3, r3
  4035aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_CONFIG, 1, &data);
  4035ae:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4035b2:	2201      	movs	r2, #1
  4035b4:	2114      	movs	r1, #20
  4035b6:	6878      	ldr	r0, [r7, #4]
  4035b8:	4c58      	ldr	r4, [pc, #352]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4035ba:	47a0      	blx	r4
  4035bc:	4602      	mov	r2, r0
  4035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035c0:	4313      	orrs	r3, r2
  4035c2:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Set interrupt config */
	status |= inv_icm426xx_set_config_int1(s,&config_int);
  4035c4:	f107 030c 	add.w	r3, r7, #12
  4035c8:	4619      	mov	r1, r3
  4035ca:	6878      	ldr	r0, [r7, #4]
  4035cc:	4b56      	ldr	r3, [pc, #344]	; (403728 <inv_icm426xx_init_hardware_from_ui+0x2f8>)
  4035ce:	4798      	blx	r3
  4035d0:	4602      	mov	r2, r0
  4035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035d4:	4313      	orrs	r3, r2
  4035d6:	627b      	str	r3, [r7, #36]	; 0x24
	config_int.INV_ICM426XX_UI_DRDY  = INV_ICM426XX_ENABLE;
  4035d8:	2301      	movs	r3, #1
  4035da:	737b      	strb	r3, [r7, #13]
	config_int.INV_ICM426XX_FIFO_THS = INV_ICM426XX_DISABLE;
  4035dc:	2300      	movs	r3, #0
  4035de:	73bb      	strb	r3, [r7, #14]
	status |= inv_icm426xx_set_config_ibi(s,&config_int);
  4035e0:	f107 030c 	add.w	r3, r7, #12
  4035e4:	4619      	mov	r1, r3
  4035e6:	6878      	ldr	r0, [r7, #4]
  4035e8:	4b50      	ldr	r3, [pc, #320]	; (40372c <inv_icm426xx_init_hardware_from_ui+0x2fc>)
  4035ea:	4798      	blx	r3
  4035ec:	4602      	mov	r2, r0
  4035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035f0:	4313      	orrs	r3, r2
  4035f2:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Set the ASY_RESET_DISABLE bit to 0 (async enabled) in order to chop Tpulse as soon as interrupt status is read
	 * Guideline is to set the ASY_RESET_DISABLE bit to 0 in pulse mode
	 * No effect in latch mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_CONFIG1, 1, &data);
  4035f4:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4035f8:	2201      	movs	r2, #1
  4035fa:	2164      	movs	r1, #100	; 0x64
  4035fc:	6878      	ldr	r0, [r7, #4]
  4035fe:	4c46      	ldr	r4, [pc, #280]	; (403718 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403600:	47a0      	blx	r4
  403602:	4602      	mov	r2, r0
  403604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403606:	4313      	orrs	r3, r2
  403608:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_INT_CONFIG1_ASY_RST_MASK;
  40360a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40360e:	f023 0310 	bic.w	r3, r3, #16
  403612:	b2db      	uxtb	r3, r3
  403614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	data |= (uint8_t)ICM426XX_INT_CONFIG1_ASY_RST_ENABLED;
  403618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40361c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_CONFIG1, 1, &data);
  403620:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403624:	2201      	movs	r2, #1
  403626:	2164      	movs	r1, #100	; 0x64
  403628:	6878      	ldr	r0, [r7, #4]
  40362a:	4c3c      	ldr	r4, [pc, #240]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  40362c:	47a0      	blx	r4
  40362e:	4602      	mov	r2, r0
  403630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403632:	4313      	orrs	r3, r2
  403634:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set the UI filter order to 2 for both gyro and accel */
	status |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG1, 1, &data);
  403636:	f107 0323 	add.w	r3, r7, #35	; 0x23
  40363a:	2201      	movs	r2, #1
  40363c:	2151      	movs	r1, #81	; 0x51
  40363e:	6878      	ldr	r0, [r7, #4]
  403640:	4c35      	ldr	r4, [pc, #212]	; (403718 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403642:	47a0      	blx	r4
  403644:	4602      	mov	r2, r0
  403646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403648:	4313      	orrs	r3, r2
  40364a:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_GYRO_CONFIG1_GYRO_UI_FILT_ORD_MASK;
  40364c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403650:	f023 030c 	bic.w	r3, r3, #12
  403654:	b2db      	uxtb	r3, r3
  403656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	data |= (uint8_t)ICM426XX_GYRO_CONFIG_GYRO_UI_FILT_ORD_2ND_ORDER;
  40365a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40365e:	f043 0304 	orr.w	r3, r3, #4
  403662:	b2db      	uxtb	r3, r3
  403664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG1, 1, &data);
  403668:	f107 0323 	add.w	r3, r7, #35	; 0x23
  40366c:	2201      	movs	r2, #1
  40366e:	2151      	movs	r1, #81	; 0x51
  403670:	6878      	ldr	r0, [r7, #4]
  403672:	4c2a      	ldr	r4, [pc, #168]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  403674:	47a0      	blx	r4
  403676:	4602      	mov	r2, r0
  403678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40367a:	4313      	orrs	r3, r2
  40367c:	627b      	str	r3, [r7, #36]	; 0x24
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG1, 1, &data);
  40367e:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403682:	2201      	movs	r2, #1
  403684:	2153      	movs	r1, #83	; 0x53
  403686:	6878      	ldr	r0, [r7, #4]
  403688:	4c23      	ldr	r4, [pc, #140]	; (403718 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  40368a:	47a0      	blx	r4
  40368c:	4602      	mov	r2, r0
  40368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403690:	4313      	orrs	r3, r2
  403692:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_ACCEL_CONFIG1_ACCEL_UI_FILT_ORD_MASK;
  403694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403698:	f023 0318 	bic.w	r3, r3, #24
  40369c:	b2db      	uxtb	r3, r3
  40369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	data |= (uint8_t)ICM426XX_ACCEL_CONFIG_ACCEL_UI_FILT_ORD_2ND_ORDER;
  4036a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4036a6:	f043 0308 	orr.w	r3, r3, #8
  4036aa:	b2db      	uxtb	r3, r3
  4036ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG1, 1, &data);
  4036b0:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4036b4:	2201      	movs	r2, #1
  4036b6:	2153      	movs	r1, #83	; 0x53
  4036b8:	6878      	ldr	r0, [r7, #4]
  4036ba:	4c18      	ldr	r4, [pc, #96]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4036bc:	47a0      	blx	r4
  4036be:	4602      	mov	r2, r0
  4036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4036c2:	4313      	orrs	r3, r2
  4036c4:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* FIFO packets are 16bit format by default (i.e. high res is disabled) */
	status |= inv_icm426xx_disable_high_resolution_fifo(s);
  4036c6:	6878      	ldr	r0, [r7, #4]
  4036c8:	4b19      	ldr	r3, [pc, #100]	; (403730 <inv_icm426xx_init_hardware_from_ui+0x300>)
  4036ca:	4798      	blx	r3
  4036cc:	4602      	mov	r2, r0
  4036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4036d0:	4313      	orrs	r3, r2
  4036d2:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* For retro-compatibility, configure WOM to compare current sample with the previous sample and to produce signal when all axis exceed 52 mg */
	status |= inv_icm426xx_set_reg_bank(s, 4); /* Set memory bank 4 */
  4036d4:	2104      	movs	r1, #4
  4036d6:	6878      	ldr	r0, [r7, #4]
  4036d8:	4b16      	ldr	r3, [pc, #88]	; (403734 <inv_icm426xx_init_hardware_from_ui+0x304>)
  4036da:	4798      	blx	r3
  4036dc:	4602      	mov	r2, r0
  4036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4036e0:	4313      	orrs	r3, r2
  4036e2:	627b      	str	r3, [r7, #36]	; 0x24
	wom_threshold[0] = ICM426XX_DEFAULT_WOM_THS_MG; /* Set X threshold */
  4036e4:	230d      	movs	r3, #13
  4036e6:	f887 3020 	strb.w	r3, [r7, #32]
	wom_threshold[1] = ICM426XX_DEFAULT_WOM_THS_MG; /* Set Y threshold */
  4036ea:	230d      	movs	r3, #13
  4036ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	wom_threshold[2] = ICM426XX_DEFAULT_WOM_THS_MG; /* Set Z threshold */
  4036f0:	230d      	movs	r3, #13
  4036f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_WOM_X_THR_B4, sizeof(wom_threshold), &wom_threshold[0]);
  4036f6:	f107 0320 	add.w	r3, r7, #32
  4036fa:	2203      	movs	r2, #3
  4036fc:	214a      	movs	r1, #74	; 0x4a
  4036fe:	6878      	ldr	r0, [r7, #4]
  403700:	4c06      	ldr	r4, [pc, #24]	; (40371c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  403702:	47a0      	blx	r4
  403704:	4602      	mov	r2, r0
  403706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403708:	4313      	orrs	r3, r2
  40370a:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_set_reg_bank(s, 0); /* Set memory bank 0 */
  40370c:	2100      	movs	r1, #0
  40370e:	e013      	b.n	403738 <inv_icm426xx_init_hardware_from_ui+0x308>
  403710:	00413650 	.word	0x00413650
  403714:	00401751 	.word	0x00401751
  403718:	00403931 	.word	0x00403931
  40371c:	004039fd 	.word	0x004039fd
  403720:	00402005 	.word	0x00402005
  403724:	00403061 	.word	0x00403061
  403728:	0040237d 	.word	0x0040237d
  40372c:	004021a5 	.word	0x004021a5
  403730:	00403041 	.word	0x00403041
  403734:	00401675 	.word	0x00401675
  403738:	6878      	ldr	r0, [r7, #4]
  40373a:	4b14      	ldr	r3, [pc, #80]	; (40378c <inv_icm426xx_init_hardware_from_ui+0x35c>)
  40373c:	4798      	blx	r3
  40373e:	4602      	mov	r2, r0
  403740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403742:	4313      	orrs	r3, r2
  403744:	627b      	str	r3, [r7, #36]	; 0x24
	data = ((uint8_t)ICM426XX_SMD_CONFIG_WOM_INT_MODE_ANDED) | ((uint8_t)ICM426XX_SMD_CONFIG_WOM_MODE_CMP_PREV);
  403746:	230c      	movs	r3, #12
  403748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_SMD_CONFIG, 1, &data);
  40374c:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403750:	2201      	movs	r2, #1
  403752:	2157      	movs	r1, #87	; 0x57
  403754:	6878      	ldr	r0, [r7, #4]
  403756:	4c0e      	ldr	r4, [pc, #56]	; (403790 <inv_icm426xx_init_hardware_from_ui+0x360>)
  403758:	47a0      	blx	r4
  40375a:	4602      	mov	r2, r0
  40375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40375e:	4313      	orrs	r3, r2
  403760:	627b      	str	r3, [r7, #36]	; 0x24

	/* by default, set IIR filter BW to ODR/4 for LN, 16x averaging for GLP, 16x averaging for ALP */
	s->avg_bw_setting.acc_ln_bw = (uint8_t)ICM426XX_GYRO_ACCEL_CONFIG0_ACCEL_FILT_BW_4;
  403762:	687b      	ldr	r3, [r7, #4]
  403764:	2210      	movs	r2, #16
  403766:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	s->avg_bw_setting.gyr_ln_bw = (uint8_t)ICM426XX_GYRO_ACCEL_CONFIG0_GYRO_FILT_BW_4;
  40376a:	687b      	ldr	r3, [r7, #4]
  40376c:	2201      	movs	r2, #1
  40376e:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
	s->avg_bw_setting.acc_lp_avg = (uint8_t)ICM426XX_GYRO_ACCEL_CONFIG0_ACCEL_FILT_AVG_16;
  403772:	687b      	ldr	r3, [r7, #4]
  403774:	2260      	movs	r2, #96	; 0x60
  403776:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872

	/* Reset self-test result variable*/
	s->st_result = 0;
  40377a:	687b      	ldr	r3, [r7, #4]
  40377c:	2200      	movs	r2, #0
  40377e:	641a      	str	r2, [r3, #64]	; 0x40

	return status;
  403780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  403782:	4618      	mov	r0, r3
  403784:	372c      	adds	r7, #44	; 0x2c
  403786:	46bd      	mov	sp, r7
  403788:	bd90      	pop	{r4, r7, pc}
  40378a:	bf00      	nop
  40378c:	00401675 	.word	0x00401675
  403790:	004039fd 	.word	0x004039fd

00403794 <inv_icm426xx_is_wu_osc_active>:

static int inv_icm426xx_is_wu_osc_active(struct inv_icm426xx * s)
{
  403794:	b590      	push	{r4, r7, lr}
  403796:	b087      	sub	sp, #28
  403798:	af00      	add	r7, sp, #0
  40379a:	6078      	str	r0, [r7, #4]
	int status = 0;
  40379c:	2300      	movs	r3, #0
  40379e:	617b      	str	r3, [r7, #20]
	/* WU oscillator is active is Accel is enabled alone, in LP, with lp_clk_sel sets to WU_OSC */
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t      gyr_mode;
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t     acc_mode;
	ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t lp_clk;

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt0_reg);
  4037a0:	f107 0310 	add.w	r3, r7, #16
  4037a4:	2201      	movs	r2, #1
  4037a6:	214e      	movs	r1, #78	; 0x4e
  4037a8:	6878      	ldr	r0, [r7, #4]
  4037aa:	4c18      	ldr	r4, [pc, #96]	; (40380c <inv_icm426xx_is_wu_osc_active+0x78>)
  4037ac:	47a0      	blx	r4
  4037ae:	4602      	mov	r2, r0
  4037b0:	697b      	ldr	r3, [r7, #20]
  4037b2:	4313      	orrs	r3, r2
  4037b4:	617b      	str	r3, [r7, #20]
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &intf_cfg_1_reg);
  4037b6:	f107 030f 	add.w	r3, r7, #15
  4037ba:	2201      	movs	r2, #1
  4037bc:	214d      	movs	r1, #77	; 0x4d
  4037be:	6878      	ldr	r0, [r7, #4]
  4037c0:	4c12      	ldr	r4, [pc, #72]	; (40380c <inv_icm426xx_is_wu_osc_active+0x78>)
  4037c2:	47a0      	blx	r4
  4037c4:	4602      	mov	r2, r0
  4037c6:	697b      	ldr	r3, [r7, #20]
  4037c8:	4313      	orrs	r3, r2
  4037ca:	617b      	str	r3, [r7, #20]
	gyr_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)      (pwr_mngt0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  4037cc:	7c3b      	ldrb	r3, [r7, #16]
  4037ce:	f003 030c 	and.w	r3, r3, #12
  4037d2:	74fb      	strb	r3, [r7, #19]
	acc_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)     (pwr_mngt0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  4037d4:	7c3b      	ldrb	r3, [r7, #16]
  4037d6:	f003 0303 	and.w	r3, r3, #3
  4037da:	74bb      	strb	r3, [r7, #18]
	lp_clk   = (ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t) (intf_cfg_1_reg & BIT_ACCEL_LP_CLK_SEL_MASK);
  4037dc:	7bfb      	ldrb	r3, [r7, #15]
  4037de:	f003 0308 	and.w	r3, r3, #8
  4037e2:	747b      	strb	r3, [r7, #17]


	return (  (gyr_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF || gyr_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY) /* Gyro is off or standby */
	       && (acc_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) /* Accel is enabled in LP */
	       && (lp_clk == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC)); /* WU oscillator is selected */
  4037e4:	7cfb      	ldrb	r3, [r7, #19]
  4037e6:	2b00      	cmp	r3, #0
  4037e8:	d002      	beq.n	4037f0 <inv_icm426xx_is_wu_osc_active+0x5c>
	return (  (gyr_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF || gyr_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY) /* Gyro is off or standby */
  4037ea:	7cfb      	ldrb	r3, [r7, #19]
  4037ec:	2b04      	cmp	r3, #4
  4037ee:	d107      	bne.n	403800 <inv_icm426xx_is_wu_osc_active+0x6c>
	       && (acc_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) /* Accel is enabled in LP */
  4037f0:	7cbb      	ldrb	r3, [r7, #18]
  4037f2:	2b02      	cmp	r3, #2
  4037f4:	d104      	bne.n	403800 <inv_icm426xx_is_wu_osc_active+0x6c>
	       && (lp_clk == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC)); /* WU oscillator is selected */
  4037f6:	7c7b      	ldrb	r3, [r7, #17]
  4037f8:	2b00      	cmp	r3, #0
  4037fa:	d101      	bne.n	403800 <inv_icm426xx_is_wu_osc_active+0x6c>
  4037fc:	2301      	movs	r3, #1
  4037fe:	e000      	b.n	403802 <inv_icm426xx_is_wu_osc_active+0x6e>
  403800:	2300      	movs	r3, #0
}
  403802:	4618      	mov	r0, r3
  403804:	371c      	adds	r7, #28
  403806:	46bd      	mov	sp, r7
  403808:	bd90      	pop	{r4, r7, pc}
  40380a:	bf00      	nop
  40380c:	00403931 	.word	0x00403931

00403810 <inv_icm426xx_format_data>:

/* Default implementation converts ICM endian to little endian */
static void inv_icm426xx_format_data(const uint8_t endian, const uint8_t *in, uint16_t *out)
{
  403810:	b480      	push	{r7}
  403812:	b085      	sub	sp, #20
  403814:	af00      	add	r7, sp, #0
  403816:	4603      	mov	r3, r0
  403818:	60b9      	str	r1, [r7, #8]
  40381a:	607a      	str	r2, [r7, #4]
  40381c:	73fb      	strb	r3, [r7, #15]
	if(endian == ICM426XX_INTF_CONFIG0_DATA_BIG_ENDIAN)
  40381e:	7bfb      	ldrb	r3, [r7, #15]
  403820:	2b10      	cmp	r3, #16
  403822:	d10d      	bne.n	403840 <inv_icm426xx_format_data+0x30>
		*out = (in[0] << 8) | in[1];
  403824:	68bb      	ldr	r3, [r7, #8]
  403826:	781b      	ldrb	r3, [r3, #0]
  403828:	021b      	lsls	r3, r3, #8
  40382a:	b21a      	sxth	r2, r3
  40382c:	68bb      	ldr	r3, [r7, #8]
  40382e:	3301      	adds	r3, #1
  403830:	781b      	ldrb	r3, [r3, #0]
  403832:	b21b      	sxth	r3, r3
  403834:	4313      	orrs	r3, r2
  403836:	b21b      	sxth	r3, r3
  403838:	b29a      	uxth	r2, r3
  40383a:	687b      	ldr	r3, [r7, #4]
  40383c:	801a      	strh	r2, [r3, #0]
	else
		*out = (in[1] << 8) | in[0];
}
  40383e:	e00c      	b.n	40385a <inv_icm426xx_format_data+0x4a>
		*out = (in[1] << 8) | in[0];
  403840:	68bb      	ldr	r3, [r7, #8]
  403842:	3301      	adds	r3, #1
  403844:	781b      	ldrb	r3, [r3, #0]
  403846:	021b      	lsls	r3, r3, #8
  403848:	b21a      	sxth	r2, r3
  40384a:	68bb      	ldr	r3, [r7, #8]
  40384c:	781b      	ldrb	r3, [r3, #0]
  40384e:	b21b      	sxth	r3, r3
  403850:	4313      	orrs	r3, r2
  403852:	b21b      	sxth	r3, r3
  403854:	b29a      	uxth	r2, r3
  403856:	687b      	ldr	r3, [r7, #4]
  403858:	801a      	strh	r2, [r3, #0]
}
  40385a:	bf00      	nop
  40385c:	3714      	adds	r7, #20
  40385e:	46bd      	mov	sp, r7
  403860:	f85d 7b04 	ldr.w	r7, [sp], #4
  403864:	4770      	bx	lr
	...

00403868 <inv_icm426xx_init_transport>:
static uint8_t * get_register_cache_addr(struct inv_icm426xx * s, uint8_t reg);
static uint8_t is_aux_interface(struct inv_icm426xx_transport *t);


int inv_icm426xx_init_transport(struct inv_icm426xx * s)
{
  403868:	b590      	push	{r4, r7, lr}
  40386a:	b085      	sub	sp, #20
  40386c:	af00      	add	r7, sp, #0
  40386e:	6078      	str	r0, [r7, #4]
	// Registers in cache must be in bank 0
	int status = 0;
  403870:	2300      	movs	r3, #0
  403872:	60fb      	str	r3, [r7, #12]
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  403874:	687b      	ldr	r3, [r7, #4]
  403876:	60bb      	str	r3, [r7, #8]

	if(!is_aux_interface(t)){
  403878:	68b8      	ldr	r0, [r7, #8]
  40387a:	4b2c      	ldr	r3, [pc, #176]	; (40392c <inv_icm426xx_init_transport+0xc4>)
  40387c:	4798      	blx	r3
  40387e:	4603      	mov	r3, r0
  403880:	2b00      	cmp	r3, #0
  403882:	d140      	bne.n	403906 <inv_icm426xx_init_transport+0x9e>
		status |= t->serif.read_reg(&(t->serif), MPUREG_INTF_CONFIG1,  &(t->register_cache.intf_cfg_1_reg), 1);
  403884:	68bb      	ldr	r3, [r7, #8]
  403886:	685c      	ldr	r4, [r3, #4]
  403888:	68b8      	ldr	r0, [r7, #8]
  40388a:	68bb      	ldr	r3, [r7, #8]
  40388c:	f103 021c 	add.w	r2, r3, #28
  403890:	2301      	movs	r3, #1
  403892:	214d      	movs	r1, #77	; 0x4d
  403894:	47a0      	blx	r4
  403896:	4602      	mov	r2, r0
  403898:	68fb      	ldr	r3, [r7, #12]
  40389a:	4313      	orrs	r3, r2
  40389c:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_PWR_MGMT_0,    &(t->register_cache.pwr_mngt_0_reg), 1);
  40389e:	68bb      	ldr	r3, [r7, #8]
  4038a0:	685c      	ldr	r4, [r3, #4]
  4038a2:	68b8      	ldr	r0, [r7, #8]
  4038a4:	68bb      	ldr	r3, [r7, #8]
  4038a6:	f103 021d 	add.w	r2, r3, #29
  4038aa:	2301      	movs	r3, #1
  4038ac:	214e      	movs	r1, #78	; 0x4e
  4038ae:	47a0      	blx	r4
  4038b0:	4602      	mov	r2, r0
  4038b2:	68fb      	ldr	r3, [r7, #12]
  4038b4:	4313      	orrs	r3, r2
  4038b6:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_GYRO_CONFIG0,  &(t->register_cache.gyro_cfg_0_reg), 1);
  4038b8:	68bb      	ldr	r3, [r7, #8]
  4038ba:	685c      	ldr	r4, [r3, #4]
  4038bc:	68b8      	ldr	r0, [r7, #8]
  4038be:	68bb      	ldr	r3, [r7, #8]
  4038c0:	f103 021e 	add.w	r2, r3, #30
  4038c4:	2301      	movs	r3, #1
  4038c6:	214f      	movs	r1, #79	; 0x4f
  4038c8:	47a0      	blx	r4
  4038ca:	4602      	mov	r2, r0
  4038cc:	68fb      	ldr	r3, [r7, #12]
  4038ce:	4313      	orrs	r3, r2
  4038d0:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_ACCEL_CONFIG0, &(t->register_cache.accel_cfg_0_reg), 1);
  4038d2:	68bb      	ldr	r3, [r7, #8]
  4038d4:	685c      	ldr	r4, [r3, #4]
  4038d6:	68b8      	ldr	r0, [r7, #8]
  4038d8:	68bb      	ldr	r3, [r7, #8]
  4038da:	f103 021f 	add.w	r2, r3, #31
  4038de:	2301      	movs	r3, #1
  4038e0:	2150      	movs	r1, #80	; 0x50
  4038e2:	47a0      	blx	r4
  4038e4:	4602      	mov	r2, r0
  4038e6:	68fb      	ldr	r3, [r7, #12]
  4038e8:	4313      	orrs	r3, r2
  4038ea:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_TMST_CONFIG,   &(t->register_cache.tmst_cfg_reg), 1);
  4038ec:	68bb      	ldr	r3, [r7, #8]
  4038ee:	685c      	ldr	r4, [r3, #4]
  4038f0:	68b8      	ldr	r0, [r7, #8]
  4038f2:	68bb      	ldr	r3, [r7, #8]
  4038f4:	f103 0220 	add.w	r2, r3, #32
  4038f8:	2301      	movs	r3, #1
  4038fa:	2154      	movs	r1, #84	; 0x54
  4038fc:	47a0      	blx	r4
  4038fe:	4602      	mov	r2, r0
  403900:	68fb      	ldr	r3, [r7, #12]
  403902:	4313      	orrs	r3, r2
  403904:	60fb      	str	r3, [r7, #12]
	}
	
	status |= t->serif.read_reg(&(t->serif), MPUREG_REG_BANK_SEL,  &(t->register_cache.bank_sel_reg), 1);
  403906:	68bb      	ldr	r3, [r7, #8]
  403908:	685c      	ldr	r4, [r3, #4]
  40390a:	68b8      	ldr	r0, [r7, #8]
  40390c:	68bb      	ldr	r3, [r7, #8]
  40390e:	f103 0221 	add.w	r2, r3, #33	; 0x21
  403912:	2301      	movs	r3, #1
  403914:	2176      	movs	r1, #118	; 0x76
  403916:	47a0      	blx	r4
  403918:	4602      	mov	r2, r0
  40391a:	68fb      	ldr	r3, [r7, #12]
  40391c:	4313      	orrs	r3, r2
  40391e:	60fb      	str	r3, [r7, #12]

	return status;
  403920:	68fb      	ldr	r3, [r7, #12]
}
  403922:	4618      	mov	r0, r3
  403924:	3714      	adds	r7, #20
  403926:	46bd      	mov	sp, r7
  403928:	bd90      	pop	{r4, r7, pc}
  40392a:	bf00      	nop
  40392c:	00403b29 	.word	0x00403b29

00403930 <inv_icm426xx_read_reg>:

int inv_icm426xx_read_reg(struct inv_icm426xx * s, uint8_t reg, uint32_t len, uint8_t * buf)
{
  403930:	b5b0      	push	{r4, r5, r7, lr}
  403932:	b088      	sub	sp, #32
  403934:	af00      	add	r7, sp, #0
  403936:	60f8      	str	r0, [r7, #12]
  403938:	607a      	str	r2, [r7, #4]
  40393a:	603b      	str	r3, [r7, #0]
  40393c:	460b      	mov	r3, r1
  40393e:	72fb      	strb	r3, [r7, #11]
	// First field of struct inv_icm426xx is assumed to be a struct inv_icm426xx_transport object.
	// So let's cast s to struct inv_icm426xx_transport and ignore the rest of struct inv_icm426xx.
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  403940:	68fb      	ldr	r3, [r7, #12]
  403942:	61bb      	str	r3, [r7, #24]
	uint32_t i=0;
  403944:	2300      	movs	r3, #0
  403946:	61fb      	str	r3, [r7, #28]
	
	// Registers in cache are only in bank 0
	// Check if bank0 is used because of duplicate register addresses between banks
	// For AUX interface, register cache must not be used
	if((t->register_cache.bank_sel_reg == 0) && (is_aux_interface(t) == 0)) {
  403948:	69bb      	ldr	r3, [r7, #24]
  40394a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  40394e:	2b00      	cmp	r3, #0
  403950:	d12a      	bne.n	4039a8 <inv_icm426xx_read_reg+0x78>
  403952:	69b8      	ldr	r0, [r7, #24]
  403954:	4b27      	ldr	r3, [pc, #156]	; (4039f4 <inv_icm426xx_read_reg+0xc4>)
  403956:	4798      	blx	r3
  403958:	4603      	mov	r3, r0
  40395a:	2b00      	cmp	r3, #0
  40395c:	d124      	bne.n	4039a8 <inv_icm426xx_read_reg+0x78>
		for(i=0; i<len ; i++) {
  40395e:	2300      	movs	r3, #0
  403960:	61fb      	str	r3, [r7, #28]
  403962:	e015      	b.n	403990 <inv_icm426xx_read_reg+0x60>
			uint8_t * cache_addr  = get_register_cache_addr(s, reg+i);
  403964:	69fb      	ldr	r3, [r7, #28]
  403966:	b2da      	uxtb	r2, r3
  403968:	7afb      	ldrb	r3, [r7, #11]
  40396a:	4413      	add	r3, r2
  40396c:	b2db      	uxtb	r3, r3
  40396e:	4619      	mov	r1, r3
  403970:	68f8      	ldr	r0, [r7, #12]
  403972:	4b21      	ldr	r3, [pc, #132]	; (4039f8 <inv_icm426xx_read_reg+0xc8>)
  403974:	4798      	blx	r3
  403976:	6178      	str	r0, [r7, #20]
			if(cache_addr)
  403978:	697b      	ldr	r3, [r7, #20]
  40397a:	2b00      	cmp	r3, #0
  40397c:	d00d      	beq.n	40399a <inv_icm426xx_read_reg+0x6a>
				buf[i] = *cache_addr;
  40397e:	683a      	ldr	r2, [r7, #0]
  403980:	69fb      	ldr	r3, [r7, #28]
  403982:	4413      	add	r3, r2
  403984:	697a      	ldr	r2, [r7, #20]
  403986:	7812      	ldrb	r2, [r2, #0]
  403988:	701a      	strb	r2, [r3, #0]
		for(i=0; i<len ; i++) {
  40398a:	69fb      	ldr	r3, [r7, #28]
  40398c:	3301      	adds	r3, #1
  40398e:	61fb      	str	r3, [r7, #28]
  403990:	69fa      	ldr	r2, [r7, #28]
  403992:	687b      	ldr	r3, [r7, #4]
  403994:	429a      	cmp	r2, r3
  403996:	d3e5      	bcc.n	403964 <inv_icm426xx_read_reg+0x34>
  403998:	e000      	b.n	40399c <inv_icm426xx_read_reg+0x6c>
			else
				break; // If one register isn't in cache, exit the loop and proceed a physical access
  40399a:	bf00      	nop
		}
		
		if(i==len) // If the end of loop is reached, then all registers have been read in cache so return
  40399c:	69fa      	ldr	r2, [r7, #28]
  40399e:	687b      	ldr	r3, [r7, #4]
  4039a0:	429a      	cmp	r2, r3
  4039a2:	d101      	bne.n	4039a8 <inv_icm426xx_read_reg+0x78>
			return 0;
  4039a4:	2300      	movs	r3, #0
  4039a6:	e020      	b.n	4039ea <inv_icm426xx_read_reg+0xba>
	}
	
	// Physical access to read registers
	if((len-i) > t->serif.max_read)
  4039a8:	687a      	ldr	r2, [r7, #4]
  4039aa:	69fb      	ldr	r3, [r7, #28]
  4039ac:	1ad2      	subs	r2, r2, r3
  4039ae:	69bb      	ldr	r3, [r7, #24]
  4039b0:	691b      	ldr	r3, [r3, #16]
  4039b2:	429a      	cmp	r2, r3
  4039b4:	d902      	bls.n	4039bc <inv_icm426xx_read_reg+0x8c>
		return INV_ERROR_SIZE;
  4039b6:	f06f 0304 	mvn.w	r3, #4
  4039ba:	e016      	b.n	4039ea <inv_icm426xx_read_reg+0xba>
	if(t->serif.read_reg(&(t->serif), reg+i, &buf[i], len-i) != 0)
  4039bc:	69bb      	ldr	r3, [r7, #24]
  4039be:	685c      	ldr	r4, [r3, #4]
  4039c0:	69b8      	ldr	r0, [r7, #24]
  4039c2:	69fb      	ldr	r3, [r7, #28]
  4039c4:	b2da      	uxtb	r2, r3
  4039c6:	7afb      	ldrb	r3, [r7, #11]
  4039c8:	4413      	add	r3, r2
  4039ca:	b2d9      	uxtb	r1, r3
  4039cc:	683a      	ldr	r2, [r7, #0]
  4039ce:	69fb      	ldr	r3, [r7, #28]
  4039d0:	18d5      	adds	r5, r2, r3
  4039d2:	687a      	ldr	r2, [r7, #4]
  4039d4:	69fb      	ldr	r3, [r7, #28]
  4039d6:	1ad3      	subs	r3, r2, r3
  4039d8:	462a      	mov	r2, r5
  4039da:	47a0      	blx	r4
  4039dc:	4603      	mov	r3, r0
  4039de:	2b00      	cmp	r3, #0
  4039e0:	d002      	beq.n	4039e8 <inv_icm426xx_read_reg+0xb8>
		return INV_ERROR_TRANSPORT;
  4039e2:	f06f 0302 	mvn.w	r3, #2
  4039e6:	e000      	b.n	4039ea <inv_icm426xx_read_reg+0xba>
	
	return 0;
  4039e8:	2300      	movs	r3, #0
}
  4039ea:	4618      	mov	r0, r3
  4039ec:	3720      	adds	r7, #32
  4039ee:	46bd      	mov	sp, r7
  4039f0:	bdb0      	pop	{r4, r5, r7, pc}
  4039f2:	bf00      	nop
  4039f4:	00403b29 	.word	0x00403b29
  4039f8:	00403abd 	.word	0x00403abd

004039fc <inv_icm426xx_write_reg>:

int inv_icm426xx_write_reg(struct inv_icm426xx * s, uint8_t reg, uint32_t len, const uint8_t * buf)
{
  4039fc:	b590      	push	{r4, r7, lr}
  4039fe:	b089      	sub	sp, #36	; 0x24
  403a00:	af00      	add	r7, sp, #0
  403a02:	60f8      	str	r0, [r7, #12]
  403a04:	607a      	str	r2, [r7, #4]
  403a06:	603b      	str	r3, [r7, #0]
  403a08:	460b      	mov	r3, r1
  403a0a:	72fb      	strb	r3, [r7, #11]
	// First field of struct inv_icm426xx is assumed to be a struct inv_icm426xx_transport object.
	// So let's cast s to struct inv_icm426xx_transport and ignore the rest of struct inv_icm426xx.
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  403a0c:	68fb      	ldr	r3, [r7, #12]
  403a0e:	61bb      	str	r3, [r7, #24]
	uint32_t i;
	
	if(len > t->serif.max_write)
  403a10:	69bb      	ldr	r3, [r7, #24]
  403a12:	695a      	ldr	r2, [r3, #20]
  403a14:	687b      	ldr	r3, [r7, #4]
  403a16:	429a      	cmp	r2, r3
  403a18:	d202      	bcs.n	403a20 <inv_icm426xx_write_reg+0x24>
		return INV_ERROR_SIZE;
  403a1a:	f06f 0304 	mvn.w	r3, #4
  403a1e:	e045      	b.n	403aac <inv_icm426xx_write_reg+0xb0>
	
	
	for(i=0; i<len; i++) {
  403a20:	2300      	movs	r3, #0
  403a22:	61fb      	str	r3, [r7, #28]
  403a24:	e030      	b.n	403a88 <inv_icm426xx_write_reg+0x8c>
		// Update bank_sel_reg in the cache
		if((reg+i) == MPUREG_REG_BANK_SEL){
  403a26:	7afa      	ldrb	r2, [r7, #11]
  403a28:	69fb      	ldr	r3, [r7, #28]
  403a2a:	4413      	add	r3, r2
  403a2c:	2b76      	cmp	r3, #118	; 0x76
  403a2e:	d107      	bne.n	403a40 <inv_icm426xx_write_reg+0x44>
			t->register_cache.bank_sel_reg = buf[i];
  403a30:	683a      	ldr	r2, [r7, #0]
  403a32:	69fb      	ldr	r3, [r7, #28]
  403a34:	4413      	add	r3, r2
  403a36:	781a      	ldrb	r2, [r3, #0]
  403a38:	69bb      	ldr	r3, [r7, #24]
  403a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  403a3e:	e020      	b.n	403a82 <inv_icm426xx_write_reg+0x86>
		}
		else {
			uint8_t * cache_addr  = get_register_cache_addr(s, reg+i);
  403a40:	69fb      	ldr	r3, [r7, #28]
  403a42:	b2da      	uxtb	r2, r3
  403a44:	7afb      	ldrb	r3, [r7, #11]
  403a46:	4413      	add	r3, r2
  403a48:	b2db      	uxtb	r3, r3
  403a4a:	4619      	mov	r1, r3
  403a4c:	68f8      	ldr	r0, [r7, #12]
  403a4e:	4b19      	ldr	r3, [pc, #100]	; (403ab4 <inv_icm426xx_write_reg+0xb8>)
  403a50:	4798      	blx	r3
  403a52:	6178      	str	r0, [r7, #20]
			if(cache_addr){
  403a54:	697b      	ldr	r3, [r7, #20]
  403a56:	2b00      	cmp	r3, #0
  403a58:	d013      	beq.n	403a82 <inv_icm426xx_write_reg+0x86>
				if (t->register_cache.bank_sel_reg == 0){
  403a5a:	69bb      	ldr	r3, [r7, #24]
  403a5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  403a60:	2b00      	cmp	r3, #0
  403a62:	d10e      	bne.n	403a82 <inv_icm426xx_write_reg+0x86>
					if(is_aux_interface(t) == 1)
  403a64:	69b8      	ldr	r0, [r7, #24]
  403a66:	4b14      	ldr	r3, [pc, #80]	; (403ab8 <inv_icm426xx_write_reg+0xbc>)
  403a68:	4798      	blx	r3
  403a6a:	4603      	mov	r3, r0
  403a6c:	2b01      	cmp	r3, #1
  403a6e:	d102      	bne.n	403a76 <inv_icm426xx_write_reg+0x7a>
						return INV_ERROR_BAD_ARG; // Cached registers must not be written from AUX interface
  403a70:	f06f 030a 	mvn.w	r3, #10
  403a74:	e01a      	b.n	403aac <inv_icm426xx_write_reg+0xb0>
					else
						*cache_addr = buf[i]; // Update register cache if the current bank is 0
  403a76:	683a      	ldr	r2, [r7, #0]
  403a78:	69fb      	ldr	r3, [r7, #28]
  403a7a:	4413      	add	r3, r2
  403a7c:	781a      	ldrb	r2, [r3, #0]
  403a7e:	697b      	ldr	r3, [r7, #20]
  403a80:	701a      	strb	r2, [r3, #0]
	for(i=0; i<len; i++) {
  403a82:	69fb      	ldr	r3, [r7, #28]
  403a84:	3301      	adds	r3, #1
  403a86:	61fb      	str	r3, [r7, #28]
  403a88:	69fa      	ldr	r2, [r7, #28]
  403a8a:	687b      	ldr	r3, [r7, #4]
  403a8c:	429a      	cmp	r2, r3
  403a8e:	d3ca      	bcc.n	403a26 <inv_icm426xx_write_reg+0x2a>
			}
		}
	}
	
	// Physical access to write registers
	if(t->serif.write_reg(&(t->serif), reg, buf, len) != 0)
  403a90:	69bb      	ldr	r3, [r7, #24]
  403a92:	689c      	ldr	r4, [r3, #8]
  403a94:	69b8      	ldr	r0, [r7, #24]
  403a96:	7af9      	ldrb	r1, [r7, #11]
  403a98:	687b      	ldr	r3, [r7, #4]
  403a9a:	683a      	ldr	r2, [r7, #0]
  403a9c:	47a0      	blx	r4
  403a9e:	4603      	mov	r3, r0
  403aa0:	2b00      	cmp	r3, #0
  403aa2:	d002      	beq.n	403aaa <inv_icm426xx_write_reg+0xae>
		return INV_ERROR_TRANSPORT;
  403aa4:	f06f 0302 	mvn.w	r3, #2
  403aa8:	e000      	b.n	403aac <inv_icm426xx_write_reg+0xb0>

	return 0;
  403aaa:	2300      	movs	r3, #0
}
  403aac:	4618      	mov	r0, r3
  403aae:	3724      	adds	r7, #36	; 0x24
  403ab0:	46bd      	mov	sp, r7
  403ab2:	bd90      	pop	{r4, r7, pc}
  403ab4:	00403abd 	.word	0x00403abd
  403ab8:	00403b29 	.word	0x00403b29

00403abc <get_register_cache_addr>:

/* Static function */

/* MPUREG_REG_BANK_SEL shall never be added to the function get_register_cache_addr() */
static uint8_t * get_register_cache_addr(struct inv_icm426xx * s, uint8_t reg)
{
  403abc:	b480      	push	{r7}
  403abe:	b085      	sub	sp, #20
  403ac0:	af00      	add	r7, sp, #0
  403ac2:	6078      	str	r0, [r7, #4]
  403ac4:	460b      	mov	r3, r1
  403ac6:	70fb      	strb	r3, [r7, #3]
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  403ac8:	687b      	ldr	r3, [r7, #4]
  403aca:	60fb      	str	r3, [r7, #12]

	switch(reg) {
  403acc:	78fb      	ldrb	r3, [r7, #3]
  403ace:	3b4d      	subs	r3, #77	; 0x4d
  403ad0:	2b07      	cmp	r3, #7
  403ad2:	d822      	bhi.n	403b1a <get_register_cache_addr+0x5e>
  403ad4:	a201      	add	r2, pc, #4	; (adr r2, 403adc <get_register_cache_addr+0x20>)
  403ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403ada:	bf00      	nop
  403adc:	00403afd 	.word	0x00403afd
  403ae0:	00403b03 	.word	0x00403b03
  403ae4:	00403b09 	.word	0x00403b09
  403ae8:	00403b0f 	.word	0x00403b0f
  403aec:	00403b1b 	.word	0x00403b1b
  403af0:	00403b1b 	.word	0x00403b1b
  403af4:	00403b1b 	.word	0x00403b1b
  403af8:	00403b15 	.word	0x00403b15
		case MPUREG_INTF_CONFIG1:     return &(t->register_cache.intf_cfg_1_reg);
  403afc:	68fb      	ldr	r3, [r7, #12]
  403afe:	331c      	adds	r3, #28
  403b00:	e00c      	b.n	403b1c <get_register_cache_addr+0x60>
		case MPUREG_PWR_MGMT_0:       return &(t->register_cache.pwr_mngt_0_reg);
  403b02:	68fb      	ldr	r3, [r7, #12]
  403b04:	331d      	adds	r3, #29
  403b06:	e009      	b.n	403b1c <get_register_cache_addr+0x60>
		case MPUREG_GYRO_CONFIG0:     return &(t->register_cache.gyro_cfg_0_reg);
  403b08:	68fb      	ldr	r3, [r7, #12]
  403b0a:	331e      	adds	r3, #30
  403b0c:	e006      	b.n	403b1c <get_register_cache_addr+0x60>
		case MPUREG_ACCEL_CONFIG0:    return &(t->register_cache.accel_cfg_0_reg);
  403b0e:	68fb      	ldr	r3, [r7, #12]
  403b10:	331f      	adds	r3, #31
  403b12:	e003      	b.n	403b1c <get_register_cache_addr+0x60>
		case MPUREG_TMST_CONFIG:      return &(t->register_cache.tmst_cfg_reg);
  403b14:	68fb      	ldr	r3, [r7, #12]
  403b16:	3320      	adds	r3, #32
  403b18:	e000      	b.n	403b1c <get_register_cache_addr+0x60>
		default:                      return (uint8_t *)0; // Not found
  403b1a:	2300      	movs	r3, #0
	}
}
  403b1c:	4618      	mov	r0, r3
  403b1e:	3714      	adds	r7, #20
  403b20:	46bd      	mov	sp, r7
  403b22:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b26:	4770      	bx	lr

00403b28 <is_aux_interface>:

static uint8_t is_aux_interface(struct inv_icm426xx_transport *t)
{
  403b28:	b480      	push	{r7}
  403b2a:	b083      	sub	sp, #12
  403b2c:	af00      	add	r7, sp, #0
  403b2e:	6078      	str	r0, [r7, #4]
	if ((t->serif.serif_type == ICM426XX_AUX1_SPI3) || (t->serif.serif_type == ICM426XX_AUX2_SPI3))
  403b30:	687b      	ldr	r3, [r7, #4]
  403b32:	7e1b      	ldrb	r3, [r3, #24]
  403b34:	2b03      	cmp	r3, #3
  403b36:	d003      	beq.n	403b40 <is_aux_interface+0x18>
  403b38:	687b      	ldr	r3, [r7, #4]
  403b3a:	7e1b      	ldrb	r3, [r3, #24]
  403b3c:	2b04      	cmp	r3, #4
  403b3e:	d101      	bne.n	403b44 <is_aux_interface+0x1c>
		return 1;
  403b40:	2301      	movs	r3, #1
  403b42:	e000      	b.n	403b46 <is_aux_interface+0x1e>
	else
		return 0;
  403b44:	2300      	movs	r3, #0
}
  403b46:	4618      	mov	r0, r3
  403b48:	370c      	adds	r7, #12
  403b4a:	46bd      	mov	sp, r7
  403b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b50:	4770      	bx	lr
	...

00403b54 <get_current_clock_source>:
static int clock_calibration_update_coef(struct inv_icm426xx * s, struct clk_calib *clk_cal, uint8_t *on_going, uint64_t irq_timestamp, uint16_t fifo_timestamp);
static int get_fastest_running_odr(struct inv_icm426xx * s, uint32_t *odr);
static enum inv_icm426xx_sensor get_fastest_sensor(struct inv_icm426xx * s);

static enum inv_icm426xx_clock_source get_current_clock_source(struct inv_icm426xx * s)
{
  403b54:	b590      	push	{r4, r7, lr}
  403b56:	b087      	sub	sp, #28
  403b58:	af00      	add	r7, sp, #0
  403b5a:	6078      	str	r0, [r7, #4]
	// WU oscillator is active if Accel is enabled alone, in LP, with lp_clk_sel sets to WU_OSC 
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t      gyr_mode;
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t     acc_mode;
	ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t lp_clk;
	int status = 0;
  403b5c:	2300      	movs	r3, #0
  403b5e:	617b      	str	r3, [r7, #20]
	uint8_t pwr_mngt_0_reg, intf_cfg_1_reg;

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  403b60:	f107 0310 	add.w	r3, r7, #16
  403b64:	2201      	movs	r2, #1
  403b66:	214e      	movs	r1, #78	; 0x4e
  403b68:	6878      	ldr	r0, [r7, #4]
  403b6a:	4c1d      	ldr	r4, [pc, #116]	; (403be0 <get_current_clock_source+0x8c>)
  403b6c:	47a0      	blx	r4
  403b6e:	4602      	mov	r2, r0
  403b70:	697b      	ldr	r3, [r7, #20]
  403b72:	4313      	orrs	r3, r2
  403b74:	617b      	str	r3, [r7, #20]
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &intf_cfg_1_reg);
  403b76:	f107 030f 	add.w	r3, r7, #15
  403b7a:	2201      	movs	r2, #1
  403b7c:	214d      	movs	r1, #77	; 0x4d
  403b7e:	6878      	ldr	r0, [r7, #4]
  403b80:	4c17      	ldr	r4, [pc, #92]	; (403be0 <get_current_clock_source+0x8c>)
  403b82:	47a0      	blx	r4
  403b84:	4602      	mov	r2, r0
  403b86:	697b      	ldr	r3, [r7, #20]
  403b88:	4313      	orrs	r3, r2
  403b8a:	617b      	str	r3, [r7, #20]
	
	if (0 > status)
  403b8c:	697b      	ldr	r3, [r7, #20]
  403b8e:	2b00      	cmp	r3, #0
  403b90:	da01      	bge.n	403b96 <get_current_clock_source+0x42>
		return INV_ICM426XX_CLOCK_SOURCE_MAX; // error
  403b92:	2303      	movs	r3, #3
  403b94:	e01f      	b.n	403bd6 <get_current_clock_source+0x82>
		
	gyr_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)      (pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  403b96:	7c3b      	ldrb	r3, [r7, #16]
  403b98:	f003 030c 	and.w	r3, r3, #12
  403b9c:	74fb      	strb	r3, [r7, #19]
	acc_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)     (pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  403b9e:	7c3b      	ldrb	r3, [r7, #16]
  403ba0:	f003 0303 	and.w	r3, r3, #3
  403ba4:	74bb      	strb	r3, [r7, #18]
	lp_clk   = (ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t) (intf_cfg_1_reg & BIT_ACCEL_LP_CLK_SEL_MASK);
  403ba6:	7bfb      	ldrb	r3, [r7, #15]
  403ba8:	f003 0308 	and.w	r3, r3, #8
  403bac:	747b      	strb	r3, [r7, #17]

	if (gyr_mode != ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF && gyr_mode != ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY)
  403bae:	7cfb      	ldrb	r3, [r7, #19]
  403bb0:	2b00      	cmp	r3, #0
  403bb2:	d004      	beq.n	403bbe <get_current_clock_source+0x6a>
  403bb4:	7cfb      	ldrb	r3, [r7, #19]
  403bb6:	2b04      	cmp	r3, #4
  403bb8:	d001      	beq.n	403bbe <get_current_clock_source+0x6a>
		return INV_ICM426XX_PLL;
  403bba:	2300      	movs	r3, #0
  403bbc:	e00b      	b.n	403bd6 <get_current_clock_source+0x82>
	else if ((acc_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LN)
  403bbe:	7cbb      	ldrb	r3, [r7, #18]
  403bc0:	2b03      	cmp	r3, #3
  403bc2:	d005      	beq.n	403bd0 <get_current_clock_source+0x7c>
		  || (acc_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP && lp_clk == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC))
  403bc4:	7cbb      	ldrb	r3, [r7, #18]
  403bc6:	2b02      	cmp	r3, #2
  403bc8:	d104      	bne.n	403bd4 <get_current_clock_source+0x80>
  403bca:	7c7b      	ldrb	r3, [r7, #17]
  403bcc:	2b08      	cmp	r3, #8
  403bce:	d101      	bne.n	403bd4 <get_current_clock_source+0x80>
		return INV_ICM426XX_RC_OSC;
  403bd0:	2301      	movs	r3, #1
  403bd2:	e000      	b.n	403bd6 <get_current_clock_source+0x82>
	else 
		return INV_ICM426XX_WU_OSC;
  403bd4:	2302      	movs	r3, #2
}
  403bd6:	4618      	mov	r0, r3
  403bd8:	371c      	adds	r7, #28
  403bda:	46bd      	mov	sp, r7
  403bdc:	bd90      	pop	{r4, r7, pc}
  403bde:	bf00      	nop
  403be0:	00403931 	.word	0x00403931

00403be4 <get_current_clock_source_name>:

static char * get_current_clock_source_name(struct inv_icm426xx * s)
{
  403be4:	b580      	push	{r7, lr}
  403be6:	b082      	sub	sp, #8
  403be8:	af00      	add	r7, sp, #0
  403bea:	6078      	str	r0, [r7, #4]
	switch(get_current_clock_source(s)) {
  403bec:	6878      	ldr	r0, [r7, #4]
  403bee:	4b0a      	ldr	r3, [pc, #40]	; (403c18 <get_current_clock_source_name+0x34>)
  403bf0:	4798      	blx	r3
  403bf2:	4603      	mov	r3, r0
  403bf4:	2b01      	cmp	r3, #1
  403bf6:	d005      	beq.n	403c04 <get_current_clock_source_name+0x20>
  403bf8:	2b02      	cmp	r3, #2
  403bfa:	d005      	beq.n	403c08 <get_current_clock_source_name+0x24>
  403bfc:	2b00      	cmp	r3, #0
  403bfe:	d105      	bne.n	403c0c <get_current_clock_source_name+0x28>
		case INV_ICM426XX_PLL:    return "PLL";
  403c00:	4b06      	ldr	r3, [pc, #24]	; (403c1c <get_current_clock_source_name+0x38>)
  403c02:	e004      	b.n	403c0e <get_current_clock_source_name+0x2a>
		case INV_ICM426XX_RC_OSC: return "RC_OSC";
  403c04:	4b06      	ldr	r3, [pc, #24]	; (403c20 <get_current_clock_source_name+0x3c>)
  403c06:	e002      	b.n	403c0e <get_current_clock_source_name+0x2a>
		case INV_ICM426XX_WU_OSC: return "WU_OSC";
  403c08:	4b06      	ldr	r3, [pc, #24]	; (403c24 <get_current_clock_source_name+0x40>)
  403c0a:	e000      	b.n	403c0e <get_current_clock_source_name+0x2a>
		default:                  return "No source";
  403c0c:	4b06      	ldr	r3, [pc, #24]	; (403c28 <get_current_clock_source_name+0x44>)
	}
}
  403c0e:	4618      	mov	r0, r3
  403c10:	3708      	adds	r7, #8
  403c12:	46bd      	mov	sp, r7
  403c14:	bd80      	pop	{r7, pc}
  403c16:	bf00      	nop
  403c18:	00403b55 	.word	0x00403b55
  403c1c:	00413660 	.word	0x00413660
  403c20:	00413664 	.word	0x00413664
  403c24:	0041366c 	.word	0x0041366c
  403c28:	00413674 	.word	0x00413674

00403c2c <apply_time_factor>:

static int64_t apply_time_factor(struct inv_icm426xx * s, struct clk_calib *clk_cal, float dt_fifo)
{
  403c2c:	b590      	push	{r4, r7, lr}
  403c2e:	b087      	sub	sp, #28
  403c30:	af00      	add	r7, sp, #0
  403c32:	60f8      	str	r0, [r7, #12]
  403c34:	60b9      	str	r1, [r7, #8]
  403c36:	ed87 0a01 	vstr	s0, [r7, #4]
	// Retrieve coef that needs to be applied
	float time_factor = clk_cal->coef[get_current_clock_source(s)];
  403c3a:	68f8      	ldr	r0, [r7, #12]
  403c3c:	4b19      	ldr	r3, [pc, #100]	; (403ca4 <apply_time_factor+0x78>)
  403c3e:	4798      	blx	r3
  403c40:	4603      	mov	r3, r0
  403c42:	68ba      	ldr	r2, [r7, #8]
  403c44:	3302      	adds	r3, #2
  403c46:	009b      	lsls	r3, r3, #2
  403c48:	4413      	add	r3, r2
  403c4a:	3304      	adds	r3, #4
  403c4c:	681b      	ldr	r3, [r3, #0]
  403c4e:	617b      	str	r3, [r7, #20]

	float dt_float = ((dt_fifo) * (time_factor)) + clk_cal->dt_error;
  403c50:	ed97 7a01 	vldr	s14, [r7, #4]
  403c54:	edd7 7a05 	vldr	s15, [r7, #20]
  403c58:	ee27 7a27 	vmul.f32	s14, s14, s15
  403c5c:	68bb      	ldr	r3, [r7, #8]
  403c5e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
  403c62:	ee77 7a27 	vadd.f32	s15, s14, s15
  403c66:	edc7 7a04 	vstr	s15, [r7, #16]
	clk_cal->dt_error = dt_float - (int64_t)(dt_float);
  403c6a:	4b0f      	ldr	r3, [pc, #60]	; (403ca8 <apply_time_factor+0x7c>)
  403c6c:	6938      	ldr	r0, [r7, #16]
  403c6e:	4798      	blx	r3
  403c70:	460a      	mov	r2, r1
  403c72:	4601      	mov	r1, r0
  403c74:	4b0d      	ldr	r3, [pc, #52]	; (403cac <apply_time_factor+0x80>)
  403c76:	4608      	mov	r0, r1
  403c78:	4611      	mov	r1, r2
  403c7a:	4798      	blx	r3
  403c7c:	ee07 0a10 	vmov	s14, r0
  403c80:	edd7 7a04 	vldr	s15, [r7, #16]
  403c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403c88:	68bb      	ldr	r3, [r7, #8]
  403c8a:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	return (int64_t)(dt_float);
  403c8e:	4b06      	ldr	r3, [pc, #24]	; (403ca8 <apply_time_factor+0x7c>)
  403c90:	6938      	ldr	r0, [r7, #16]
  403c92:	4798      	blx	r3
  403c94:	4603      	mov	r3, r0
  403c96:	460c      	mov	r4, r1
}
  403c98:	4618      	mov	r0, r3
  403c9a:	4621      	mov	r1, r4
  403c9c:	371c      	adds	r7, #28
  403c9e:	46bd      	mov	sp, r7
  403ca0:	bd90      	pop	{r4, r7, pc}
  403ca2:	bf00      	nop
  403ca4:	00403b55 	.word	0x00403b55
  403ca8:	0040ee85 	.word	0x0040ee85
  403cac:	0040ee09 	.word	0x0040ee09

00403cb0 <get_fifo_timestamp_resolution>:

static float get_fifo_timestamp_resolution(struct inv_icm426xx * s)
{
  403cb0:	b580      	push	{r7, lr}
  403cb2:	b082      	sub	sp, #8
  403cb4:	af00      	add	r7, sp, #0
  403cb6:	6078      	str	r0, [r7, #4]
	return (float)inv_icm426xx_get_fifo_timestamp_resolution_us_q24(s)/(1UL<<24);
  403cb8:	6878      	ldr	r0, [r7, #4]
  403cba:	4b08      	ldr	r3, [pc, #32]	; (403cdc <get_fifo_timestamp_resolution+0x2c>)
  403cbc:	4798      	blx	r3
  403cbe:	ee07 0a90 	vmov	s15, r0
  403cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  403cc6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 403ce0 <get_fifo_timestamp_resolution+0x30>
  403cca:	eec7 6a87 	vdiv.f32	s13, s15, s14
  403cce:	eef0 7a66 	vmov.f32	s15, s13
}
  403cd2:	eeb0 0a67 	vmov.f32	s0, s15
  403cd6:	3708      	adds	r7, #8
  403cd8:	46bd      	mov	sp, r7
  403cda:	bd80      	pop	{r7, pc}
  403cdc:	00403261 	.word	0x00403261
  403ce0:	4b800000 	.word	0x4b800000

00403ce4 <get_reg_timestamp_resolution>:

static float get_reg_timestamp_resolution(struct inv_icm426xx * s)
{
  403ce4:	b580      	push	{r7, lr}
  403ce6:	b082      	sub	sp, #8
  403ce8:	af00      	add	r7, sp, #0
  403cea:	6078      	str	r0, [r7, #4]
	return (float)inv_icm426xx_get_reg_timestamp_resolution_us_q24(s)/(1UL<<24);
  403cec:	6878      	ldr	r0, [r7, #4]
  403cee:	4b08      	ldr	r3, [pc, #32]	; (403d10 <get_reg_timestamp_resolution+0x2c>)
  403cf0:	4798      	blx	r3
  403cf2:	ee07 0a90 	vmov	s15, r0
  403cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
  403cfa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 403d14 <get_reg_timestamp_resolution+0x30>
  403cfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
  403d02:	eef0 7a66 	vmov.f32	s15, s13
}
  403d06:	eeb0 0a67 	vmov.f32	s0, s15
  403d0a:	3708      	adds	r7, #8
  403d0c:	46bd      	mov	sp, r7
  403d0e:	bd80      	pop	{r7, pc}
  403d10:	004032f1 	.word	0x004032f1
  403d14:	4b800000 	.word	0x4b800000

00403d18 <inv_helper_extend_timestamp_from_fifo>:
	                                      struct clk_calib *clk_cal, 
	                                      uint16_t cur_fifo_timestamp, 
	                                      uint64_t irq_timestamp, 
	                                      int sensor_mask, 
	                                      uint64_t * timestamp)
{
  403d18:	b590      	push	{r4, r7, lr}
  403d1a:	b08b      	sub	sp, #44	; 0x2c
  403d1c:	af02      	add	r7, sp, #8
  403d1e:	60f8      	str	r0, [r7, #12]
  403d20:	60b9      	str	r1, [r7, #8]
  403d22:	4613      	mov	r3, r2
  403d24:	80fb      	strh	r3, [r7, #6]
	enum inv_icm426xx_sensor sensor_ref;
	float dt_fifo;
	int64_t dt_us;

	// by default we assume there is nothing in FIFO. timestamp is reset.
	*timestamp = 0;
  403d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403d28:	f04f 0300 	mov.w	r3, #0
  403d2c:	f04f 0400 	mov.w	r4, #0
  403d30:	e9c2 3400 	strd	r3, r4, [r2]

	// If FSYNC event is received, the FSYNC delay will replace the timestamp field
	if (sensor_mask & (1 << INV_ICM426XX_SENSOR_FSYNC_EVENT)) { 
  403d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403d36:	f003 0304 	and.w	r3, r3, #4
  403d3a:	2b00      	cmp	r3, #0
  403d3c:	d011      	beq.n	403d62 <inv_helper_extend_timestamp_from_fifo+0x4a>
		// Use timestamp from MCU
		*timestamp = irq_timestamp;
  403d3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403d40:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  403d44:	e9c2 3400 	strd	r3, r4, [r2]
		clk_cal->last_fifo_timestamp[INV_ICM426XX_SENSOR_ACCEL] = 0xDEADBEEF;
  403d48:	68bb      	ldr	r3, [r7, #8]
  403d4a:	4a5c      	ldr	r2, [pc, #368]	; (403ebc <inv_helper_extend_timestamp_from_fifo+0x1a4>)
  403d4c:	669a      	str	r2, [r3, #104]	; 0x68
		clk_cal->last_fifo_timestamp[INV_ICM426XX_SENSOR_GYRO] = 0xDEADBEEF;
  403d4e:	68bb      	ldr	r3, [r7, #8]
  403d50:	4a5a      	ldr	r2, [pc, #360]	; (403ebc <inv_helper_extend_timestamp_from_fifo+0x1a4>)
  403d52:	66da      	str	r2, [r3, #108]	; 0x6c
		clk_cal->dt_error = 0; // reset error on deltatime*/
  403d54:	68bb      	ldr	r3, [r7, #8]
  403d56:	f04f 0200 	mov.w	r2, #0
  403d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return 0;
  403d5e:	2300      	movs	r3, #0
  403d60:	e0a8      	b.n	403eb4 <inv_helper_extend_timestamp_from_fifo+0x19c>
	} else if (!inv_icm426xx_get_clkin_rtc_status(s)) { 
  403d62:	68f8      	ldr	r0, [r7, #12]
  403d64:	4b56      	ldr	r3, [pc, #344]	; (403ec0 <inv_helper_extend_timestamp_from_fifo+0x1a8>)
  403d66:	4798      	blx	r3
  403d68:	4603      	mov	r3, r0
  403d6a:	2b00      	cmp	r3, #0
  403d6c:	d107      	bne.n	403d7e <inv_helper_extend_timestamp_from_fifo+0x66>
		// Update calibration coefficient unless RTC is enabled
		clock_calibration_update(s, clk_cal, irq_timestamp, cur_fifo_timestamp);	
  403d6e:	88fb      	ldrh	r3, [r7, #6]
  403d70:	9300      	str	r3, [sp, #0]
  403d72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
  403d76:	68b9      	ldr	r1, [r7, #8]
  403d78:	68f8      	ldr	r0, [r7, #12]
  403d7a:	4c52      	ldr	r4, [pc, #328]	; (403ec4 <inv_helper_extend_timestamp_from_fifo+0x1ac>)
  403d7c:	47a0      	blx	r4
	}

	// Select which sensor to use for reference (sensor_ref) depending on FIFO content
	if ((sensor_mask & (1 << INV_ICM426XX_SENSOR_ACCEL)) && (sensor_mask & (1 << INV_ICM426XX_SENSOR_GYRO))) {
  403d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403d80:	f003 0301 	and.w	r3, r3, #1
  403d84:	2b00      	cmp	r3, #0
  403d86:	d00a      	beq.n	403d9e <inv_helper_extend_timestamp_from_fifo+0x86>
  403d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403d8a:	f003 0302 	and.w	r3, r3, #2
  403d8e:	2b00      	cmp	r3, #0
  403d90:	d005      	beq.n	403d9e <inv_helper_extend_timestamp_from_fifo+0x86>
		// ACC and GYR are in FIFO, use the fastest sensor
		sensor_ref = get_fastest_sensor(s);
  403d92:	68f8      	ldr	r0, [r7, #12]
  403d94:	4b4c      	ldr	r3, [pc, #304]	; (403ec8 <inv_helper_extend_timestamp_from_fifo+0x1b0>)
  403d96:	4798      	blx	r3
  403d98:	4603      	mov	r3, r0
  403d9a:	77fb      	strb	r3, [r7, #31]
  403d9c:	e01b      	b.n	403dd6 <inv_helper_extend_timestamp_from_fifo+0xbe>
	} else if (sensor_mask & (1 << INV_ICM426XX_SENSOR_ACCEL)) {
  403d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403da0:	f003 0301 	and.w	r3, r3, #1
  403da4:	2b00      	cmp	r3, #0
  403da6:	d002      	beq.n	403dae <inv_helper_extend_timestamp_from_fifo+0x96>
		// ACC in FIFO
		sensor_ref = INV_ICM426XX_SENSOR_ACCEL; 
  403da8:	2300      	movs	r3, #0
  403daa:	77fb      	strb	r3, [r7, #31]
  403dac:	e013      	b.n	403dd6 <inv_helper_extend_timestamp_from_fifo+0xbe>
	} else if (sensor_mask & (1 << INV_ICM426XX_SENSOR_GYRO)) {
  403dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403db0:	f003 0302 	and.w	r3, r3, #2
  403db4:	2b00      	cmp	r3, #0
  403db6:	d002      	beq.n	403dbe <inv_helper_extend_timestamp_from_fifo+0xa6>
		// GYR in FIFO
		sensor_ref = INV_ICM426XX_SENSOR_GYRO; 
  403db8:	2301      	movs	r3, #1
  403dba:	77fb      	strb	r3, [r7, #31]
  403dbc:	e00b      	b.n	403dd6 <inv_helper_extend_timestamp_from_fifo+0xbe>
	} else {
		// Only temperature is in the FIFO, use MCU timestamp
		*timestamp = irq_timestamp;
  403dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403dc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  403dc4:	e9c2 3400 	strd	r3, r4, [r2]
		clk_cal->dt_error = 0; // reset error on deltatime
  403dc8:	68bb      	ldr	r3, [r7, #8]
  403dca:	f04f 0200 	mov.w	r2, #0
  403dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return 0; // return here, no need to execute the rest
  403dd2:	2300      	movs	r3, #0
  403dd4:	e06e      	b.n	403eb4 <inv_helper_extend_timestamp_from_fifo+0x19c>
	}

	if(clk_cal->last_fifo_timestamp[sensor_ref] == 0xDEADBEEF) {
  403dd6:	7ffa      	ldrb	r2, [r7, #31]
  403dd8:	68bb      	ldr	r3, [r7, #8]
  403dda:	321a      	adds	r2, #26
  403ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403de0:	4a36      	ldr	r2, [pc, #216]	; (403ebc <inv_helper_extend_timestamp_from_fifo+0x1a4>)
  403de2:	4293      	cmp	r3, r2
  403de4:	d10a      	bne.n	403dfc <inv_helper_extend_timestamp_from_fifo+0xe4>
		// no last timestamp from FIFO to compute a valid delta, so timestamp from FIFO not used
		*timestamp = irq_timestamp;
  403de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403de8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  403dec:	e9c2 3400 	strd	r3, r4, [r2]
		clk_cal->dt_error = 0; // reset error on deltatime
  403df0:	68bb      	ldr	r3, [r7, #8]
  403df2:	f04f 0200 	mov.w	r2, #0
  403df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  403dfa:	e03e      	b.n	403e7a <inv_helper_extend_timestamp_from_fifo+0x162>
	} else {
		// last timestamp from FIFO is available to compute a valid dt based on read timestamp from FIFO
		dt_fifo = (float)(cur_fifo_timestamp - (uint16_t)clk_cal->last_fifo_timestamp[sensor_ref]);
  403dfc:	88fb      	ldrh	r3, [r7, #6]
  403dfe:	7ff9      	ldrb	r1, [r7, #31]
  403e00:	68ba      	ldr	r2, [r7, #8]
  403e02:	311a      	adds	r1, #26
  403e04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403e08:	b292      	uxth	r2, r2
  403e0a:	1a9b      	subs	r3, r3, r2
  403e0c:	ee07 3a90 	vmov	s15, r3
  403e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403e14:	edc7 7a06 	vstr	s15, [r7, #24]
		
		// Handle rollover
		if (dt_fifo <= 0)
  403e18:	edd7 7a06 	vldr	s15, [r7, #24]
  403e1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  403e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403e24:	d807      	bhi.n	403e36 <inv_helper_extend_timestamp_from_fifo+0x11e>
			dt_fifo += (UINT16_MAX+1);
  403e26:	edd7 7a06 	vldr	s15, [r7, #24]
  403e2a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 403ecc <inv_helper_extend_timestamp_from_fifo+0x1b4>
  403e2e:	ee77 7a87 	vadd.f32	s15, s15, s14
  403e32:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply proper timestamp resolution
		dt_fifo *= get_fifo_timestamp_resolution(s);
  403e36:	68f8      	ldr	r0, [r7, #12]
  403e38:	4b25      	ldr	r3, [pc, #148]	; (403ed0 <inv_helper_extend_timestamp_from_fifo+0x1b8>)
  403e3a:	4798      	blx	r3
  403e3c:	eeb0 7a40 	vmov.f32	s14, s0
  403e40:	edd7 7a06 	vldr	s15, [r7, #24]
  403e44:	ee67 7a87 	vmul.f32	s15, s15, s14
  403e48:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply calibration coefficient
		dt_us = apply_time_factor(s, clk_cal, dt_fifo);
  403e4c:	ed97 0a06 	vldr	s0, [r7, #24]
  403e50:	68b9      	ldr	r1, [r7, #8]
  403e52:	68f8      	ldr	r0, [r7, #12]
  403e54:	4b1f      	ldr	r3, [pc, #124]	; (403ed4 <inv_helper_extend_timestamp_from_fifo+0x1bc>)
  403e56:	4798      	blx	r3
  403e58:	e9c7 0104 	strd	r0, r1, [r7, #16]

		// Compute timestamp
		*timestamp = clk_cal->last_timestamp_sent[sensor_ref] + dt_us;
  403e5c:	7ffb      	ldrb	r3, [r7, #31]
  403e5e:	68ba      	ldr	r2, [r7, #8]
  403e60:	3303      	adds	r3, #3
  403e62:	00db      	lsls	r3, r3, #3
  403e64:	4413      	add	r3, r2
  403e66:	e9d3 1200 	ldrd	r1, r2, [r3]
  403e6a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  403e6e:	185b      	adds	r3, r3, r1
  403e70:	eb44 0402 	adc.w	r4, r4, r2
  403e74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403e76:	e9c2 3400 	strd	r3, r4, [r2]
	}
	
	if (sensor_mask & (1 << INV_ICM426XX_SENSOR_ACCEL)) {
  403e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403e7c:	f003 0301 	and.w	r3, r3, #1
  403e80:	2b00      	cmp	r3, #0
  403e82:	d008      	beq.n	403e96 <inv_helper_extend_timestamp_from_fifo+0x17e>
		clk_cal->last_fifo_timestamp[INV_ICM426XX_SENSOR_ACCEL] = cur_fifo_timestamp;
  403e84:	88fa      	ldrh	r2, [r7, #6]
  403e86:	68bb      	ldr	r3, [r7, #8]
  403e88:	669a      	str	r2, [r3, #104]	; 0x68
		clk_cal->last_timestamp_sent[INV_ICM426XX_SENSOR_ACCEL] = *timestamp;
  403e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403e8c:	e9d3 3400 	ldrd	r3, r4, [r3]
  403e90:	68ba      	ldr	r2, [r7, #8]
  403e92:	e9c2 3406 	strd	r3, r4, [r2, #24]
	}

	if (sensor_mask & (1 << INV_ICM426XX_SENSOR_GYRO)) {
  403e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403e98:	f003 0302 	and.w	r3, r3, #2
  403e9c:	2b00      	cmp	r3, #0
  403e9e:	d008      	beq.n	403eb2 <inv_helper_extend_timestamp_from_fifo+0x19a>
		clk_cal->last_fifo_timestamp[INV_ICM426XX_SENSOR_GYRO] = cur_fifo_timestamp;
  403ea0:	88fa      	ldrh	r2, [r7, #6]
  403ea2:	68bb      	ldr	r3, [r7, #8]
  403ea4:	66da      	str	r2, [r3, #108]	; 0x6c
		clk_cal->last_timestamp_sent[INV_ICM426XX_SENSOR_GYRO] = *timestamp;
  403ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403ea8:	e9d3 3400 	ldrd	r3, r4, [r3]
  403eac:	68ba      	ldr	r2, [r7, #8]
  403eae:	e9c2 3408 	strd	r3, r4, [r2, #32]
	}

	return 0;
  403eb2:	2300      	movs	r3, #0
}
  403eb4:	4618      	mov	r0, r3
  403eb6:	3724      	adds	r7, #36	; 0x24
  403eb8:	46bd      	mov	sp, r7
  403eba:	bd90      	pop	{r4, r7, pc}
  403ebc:	deadbeef 	.word	0xdeadbeef
  403ec0:	00403001 	.word	0x00403001
  403ec4:	00404389 	.word	0x00404389
  403ec8:	00404761 	.word	0x00404761
  403ecc:	47800000 	.word	0x47800000
  403ed0:	00403cb1 	.word	0x00403cb1
  403ed4:	00403c2d 	.word	0x00403c2d

00403ed8 <clock_calibration_reset>:

void clock_calibration_reset(struct inv_icm426xx * s, struct clk_calib *clk_cal)
{
  403ed8:	b590      	push	{r4, r7, lr}
  403eda:	b083      	sub	sp, #12
  403edc:	af00      	add	r7, sp, #0
  403ede:	6078      	str	r0, [r7, #4]
  403ee0:	6039      	str	r1, [r7, #0]
	/* Let's compute the number of samples before calibration based on the ODR configured at POR */
	clk_cal->initial_recalib_after_n_samples = NUMBER_OF_SAMPLES_FOR_ODR(inv_icm426xx_convert_odr_bitfield_to_us(ICM426XX_ACCEL_CONFIG0_ODR_200_HZ));
  403ee2:	2007      	movs	r0, #7
  403ee4:	4b16      	ldr	r3, [pc, #88]	; (403f40 <clock_calibration_reset+0x68>)
  403ee6:	4798      	blx	r3
  403ee8:	4602      	mov	r2, r0
  403eea:	4b16      	ldr	r3, [pc, #88]	; (403f44 <clock_calibration_reset+0x6c>)
  403eec:	fbb3 f4f2 	udiv	r4, r3, r2
  403ef0:	2007      	movs	r0, #7
  403ef2:	4b13      	ldr	r3, [pc, #76]	; (403f40 <clock_calibration_reset+0x68>)
  403ef4:	4798      	blx	r3
  403ef6:	4602      	mov	r2, r0
  403ef8:	4b12      	ldr	r3, [pc, #72]	; (403f44 <clock_calibration_reset+0x6c>)
  403efa:	fbb3 f1f2 	udiv	r1, r3, r2
  403efe:	fb02 f201 	mul.w	r2, r2, r1
  403f02:	1a9b      	subs	r3, r3, r2
  403f04:	4423      	add	r3, r4
  403f06:	461a      	mov	r2, r3
  403f08:	683b      	ldr	r3, [r7, #0]
  403f0a:	601a      	str	r2, [r3, #0]
	clk_cal->recalib_after_n_samples = clk_cal->initial_recalib_after_n_samples;
  403f0c:	683b      	ldr	r3, [r7, #0]
  403f0e:	681a      	ldr	r2, [r3, #0]
  403f10:	683b      	ldr	r3, [r7, #0]
  403f12:	605a      	str	r2, [r3, #4]
	clk_cal->on_going = 0;
  403f14:	683b      	ldr	r3, [r7, #0]
  403f16:	2200      	movs	r2, #0
  403f18:	721a      	strb	r2, [r3, #8]
	clk_cal->dt_error = 0;
  403f1a:	683b      	ldr	r3, [r7, #0]
  403f1c:	f04f 0200 	mov.w	r2, #0
  403f20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	clock_calibration_reset_sensors_stats(s, clk_cal, INV_ICM426XX_SENSOR_ACCEL);
  403f24:	2200      	movs	r2, #0
  403f26:	6839      	ldr	r1, [r7, #0]
  403f28:	6878      	ldr	r0, [r7, #4]
  403f2a:	4b07      	ldr	r3, [pc, #28]	; (403f48 <clock_calibration_reset+0x70>)
  403f2c:	4798      	blx	r3
	clock_calibration_reset_sensors_stats(s, clk_cal, INV_ICM426XX_SENSOR_GYRO);
  403f2e:	2201      	movs	r2, #1
  403f30:	6839      	ldr	r1, [r7, #0]
  403f32:	6878      	ldr	r0, [r7, #4]
  403f34:	4b04      	ldr	r3, [pc, #16]	; (403f48 <clock_calibration_reset+0x70>)
  403f36:	4798      	blx	r3
}
  403f38:	bf00      	nop
  403f3a:	370c      	adds	r7, #12
  403f3c:	46bd      	mov	sp, r7
  403f3e:	bd90      	pop	{r4, r7, pc}
  403f40:	00402b29 	.word	0x00402b29
  403f44:	00124f80 	.word	0x00124f80
  403f48:	00403f4d 	.word	0x00403f4d

00403f4c <clock_calibration_reset_sensors_stats>:

void clock_calibration_reset_sensors_stats(struct inv_icm426xx * s, struct clk_calib *clk_cal, enum inv_icm426xx_sensor sensor)
{
  403f4c:	b490      	push	{r4, r7}
  403f4e:	b084      	sub	sp, #16
  403f50:	af00      	add	r7, sp, #0
  403f52:	60f8      	str	r0, [r7, #12]
  403f54:	60b9      	str	r1, [r7, #8]
  403f56:	4613      	mov	r3, r2
  403f58:	71fb      	strb	r3, [r7, #7]
	clk_cal->last_timestamp_sent[sensor] = 0;
  403f5a:	79fb      	ldrb	r3, [r7, #7]
  403f5c:	68ba      	ldr	r2, [r7, #8]
  403f5e:	3303      	adds	r3, #3
  403f60:	00db      	lsls	r3, r3, #3
  403f62:	441a      	add	r2, r3
  403f64:	f04f 0300 	mov.w	r3, #0
  403f68:	f04f 0400 	mov.w	r4, #0
  403f6c:	e9c2 3400 	strd	r3, r4, [r2]
	clk_cal->last_fifo_timestamp[sensor] = 0xDEADBEEF;
  403f70:	79fa      	ldrb	r2, [r7, #7]
  403f72:	68bb      	ldr	r3, [r7, #8]
  403f74:	321a      	adds	r2, #26
  403f76:	4904      	ldr	r1, [pc, #16]	; (403f88 <clock_calibration_reset_sensors_stats+0x3c>)
  403f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403f7c:	bf00      	nop
  403f7e:	3710      	adds	r7, #16
  403f80:	46bd      	mov	sp, r7
  403f82:	bc90      	pop	{r4, r7}
  403f84:	4770      	bx	lr
  403f86:	bf00      	nop
  403f88:	deadbeef 	.word	0xdeadbeef

00403f8c <clock_calibration_init>:
	return rc;
}


int clock_calibration_init(struct inv_icm426xx * s, struct clk_calib *clk_cal)
{
  403f8c:	b580      	push	{r7, lr}
  403f8e:	b084      	sub	sp, #16
  403f90:	af00      	add	r7, sp, #0
  403f92:	6078      	str	r0, [r7, #4]
  403f94:	6039      	str	r1, [r7, #0]
	int rc;
	
	clock_calibration_reset(s, clk_cal);
  403f96:	6839      	ldr	r1, [r7, #0]
  403f98:	6878      	ldr	r0, [r7, #4]
  403f9a:	4b06      	ldr	r3, [pc, #24]	; (403fb4 <clock_calibration_init+0x28>)
  403f9c:	4798      	blx	r3
	rc = clock_calibration_initial(s, clk_cal);
  403f9e:	6839      	ldr	r1, [r7, #0]
  403fa0:	6878      	ldr	r0, [r7, #4]
  403fa2:	4b05      	ldr	r3, [pc, #20]	; (403fb8 <clock_calibration_init+0x2c>)
  403fa4:	4798      	blx	r3
  403fa6:	60f8      	str	r0, [r7, #12]
	
	return rc;
  403fa8:	68fb      	ldr	r3, [r7, #12]
}
  403faa:	4618      	mov	r0, r3
  403fac:	3710      	adds	r7, #16
  403fae:	46bd      	mov	sp, r7
  403fb0:	bd80      	pop	{r7, pc}
  403fb2:	bf00      	nop
  403fb4:	00403ed9 	.word	0x00403ed9
  403fb8:	00404131 	.word	0x00404131

00403fbc <compute_calibration_coefficient>:

static float compute_calibration_coefficient(struct inv_icm426xx * s, uint32_t duration_us)
{
  403fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  403fbe:	ed2d 8b02 	vpush	{d8}
  403fc2:	b091      	sub	sp, #68	; 0x44
  403fc4:	af00      	add	r7, sp, #0
  403fc6:	60f8      	str	r0, [r7, #12]
  403fc8:	60b9      	str	r1, [r7, #8]
	uint8_t nb_rollover;
	float tICM_rollover;
	float tICM_1f, tICM_2f;

	/* Get the MCU and ICM time */
	inv_helper_disable_irq();
  403fca:	4b52      	ldr	r3, [pc, #328]	; (404114 <compute_calibration_coefficient+0x158>)
  403fcc:	4798      	blx	r3
	tMCU_1 = inv_icm426xx_get_time_us();
  403fce:	4b52      	ldr	r3, [pc, #328]	; (404118 <compute_calibration_coefficient+0x15c>)
  403fd0:	4798      	blx	r3
  403fd2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	inv_icm426xx_get_current_timestamp(s, &tICM_1);
  403fd6:	f107 0318 	add.w	r3, r7, #24
  403fda:	4619      	mov	r1, r3
  403fdc:	68f8      	ldr	r0, [r7, #12]
  403fde:	4b4f      	ldr	r3, [pc, #316]	; (40411c <compute_calibration_coefficient+0x160>)
  403fe0:	4798      	blx	r3
	inv_helper_enable_irq();
  403fe2:	4b4f      	ldr	r3, [pc, #316]	; (404120 <compute_calibration_coefficient+0x164>)
  403fe4:	4798      	blx	r3

	/* Wait 200ms */
	while(inv_icm426xx_get_time_us() < (tMCU_1 + duration_us));
  403fe6:	bf00      	nop
  403fe8:	4b4b      	ldr	r3, [pc, #300]	; (404118 <compute_calibration_coefficient+0x15c>)
  403fea:	4798      	blx	r3
  403fec:	4605      	mov	r5, r0
  403fee:	460e      	mov	r6, r1
  403ff0:	68bb      	ldr	r3, [r7, #8]
  403ff2:	4619      	mov	r1, r3
  403ff4:	f04f 0200 	mov.w	r2, #0
  403ff8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  403ffc:	185b      	adds	r3, r3, r1
  403ffe:	eb44 0402 	adc.w	r4, r4, r2
  404002:	42a6      	cmp	r6, r4
  404004:	bf08      	it	eq
  404006:	429d      	cmpeq	r5, r3
  404008:	d3ee      	bcc.n	403fe8 <compute_calibration_coefficient+0x2c>

	/* Get the MCU and ICM time once again */
	inv_helper_disable_irq();
  40400a:	4b42      	ldr	r3, [pc, #264]	; (404114 <compute_calibration_coefficient+0x158>)
  40400c:	4798      	blx	r3
	tMCU_2 = inv_icm426xx_get_time_us();
  40400e:	4b42      	ldr	r3, [pc, #264]	; (404118 <compute_calibration_coefficient+0x15c>)
  404010:	4798      	blx	r3
  404012:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	inv_icm426xx_get_current_timestamp(s, &tICM_2);
  404016:	f107 0314 	add.w	r3, r7, #20
  40401a:	4619      	mov	r1, r3
  40401c:	68f8      	ldr	r0, [r7, #12]
  40401e:	4b3f      	ldr	r3, [pc, #252]	; (40411c <compute_calibration_coefficient+0x160>)
  404020:	4798      	blx	r3
	inv_helper_enable_irq();
  404022:	4b3f      	ldr	r3, [pc, #252]	; (404120 <compute_calibration_coefficient+0x164>)
  404024:	4798      	blx	r3
	
	tICM_2f = (float)tICM_2 * get_reg_timestamp_resolution(s);
  404026:	697b      	ldr	r3, [r7, #20]
  404028:	ee07 3a90 	vmov	s15, r3
  40402c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  404030:	68f8      	ldr	r0, [r7, #12]
  404032:	4b3c      	ldr	r3, [pc, #240]	; (404124 <compute_calibration_coefficient+0x168>)
  404034:	4798      	blx	r3
  404036:	eef0 7a40 	vmov.f32	s15, s0
  40403a:	ee68 7a27 	vmul.f32	s15, s16, s15
  40403e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	tICM_1f = (float)tICM_1 * get_reg_timestamp_resolution(s);
  404042:	69bb      	ldr	r3, [r7, #24]
  404044:	ee07 3a90 	vmov	s15, r3
  404048:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  40404c:	68f8      	ldr	r0, [r7, #12]
  40404e:	4b35      	ldr	r3, [pc, #212]	; (404124 <compute_calibration_coefficient+0x168>)
  404050:	4798      	blx	r3
  404052:	eef0 7a40 	vmov.f32	s15, s0
  404056:	ee68 7a27 	vmul.f32	s15, s16, s15
  40405a:	edc7 7a08 	vstr	s15, [r7, #32]
	tICM_rollover = (float) ROLLOVER_20BITS * get_reg_timestamp_resolution(s);
  40405e:	68f8      	ldr	r0, [r7, #12]
  404060:	4b30      	ldr	r3, [pc, #192]	; (404124 <compute_calibration_coefficient+0x168>)
  404062:	4798      	blx	r3
  404064:	eeb0 7a40 	vmov.f32	s14, s0
  404068:	eddf 7a2f 	vldr	s15, [pc, #188]	; 404128 <compute_calibration_coefficient+0x16c>
  40406c:	ee67 7a27 	vmul.f32	s15, s14, s15
  404070:	edc7 7a07 	vstr	s15, [r7, #28]

	/* Compute the time factor in order to align the MCU time to the icm426xx timestamp outputted from the FIFO */
	nb_rollover = (uint8_t)((tMCU_2 - tMCU_1) / tICM_rollover);
  404074:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
  404078:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  40407c:	1acb      	subs	r3, r1, r3
  40407e:	eb62 0404 	sbc.w	r4, r2, r4
  404082:	4a2a      	ldr	r2, [pc, #168]	; (40412c <compute_calibration_coefficient+0x170>)
  404084:	4618      	mov	r0, r3
  404086:	4621      	mov	r1, r4
  404088:	4790      	blx	r2
  40408a:	ee06 0a90 	vmov	s13, r0
  40408e:	ed97 7a07 	vldr	s14, [r7, #28]
  404092:	eec6 7a87 	vdiv.f32	s15, s13, s14
  404096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  40409a:	edc7 7a01 	vstr	s15, [r7, #4]
  40409e:	793b      	ldrb	r3, [r7, #4]
  4040a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* If tICM_2 is smaller than tICM_1, there was one more rollover than what we estimated */
	if (tICM_2f < tICM_1f)
  4040a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
  4040a8:	edd7 7a08 	vldr	s15, [r7, #32]
  4040ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4040b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4040b4:	d504      	bpl.n	4040c0 <compute_calibration_coefficient+0x104>
		nb_rollover += 1;
  4040b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
  4040ba:	3301      	adds	r3, #1
  4040bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	return (float) (tMCU_2 - tMCU_1) / (float) (nb_rollover * tICM_rollover + tICM_2f - tICM_1f);
  4040c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
  4040c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  4040c8:	1acb      	subs	r3, r1, r3
  4040ca:	eb62 0404 	sbc.w	r4, r2, r4
  4040ce:	4a17      	ldr	r2, [pc, #92]	; (40412c <compute_calibration_coefficient+0x170>)
  4040d0:	4618      	mov	r0, r3
  4040d2:	4621      	mov	r1, r4
  4040d4:	4790      	blx	r2
  4040d6:	ee06 0a90 	vmov	s13, r0
  4040da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
  4040de:	ee07 3a90 	vmov	s15, r3
  4040e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  4040e6:	edd7 7a07 	vldr	s15, [r7, #28]
  4040ea:	ee27 7a27 	vmul.f32	s14, s14, s15
  4040ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  4040f2:	ee37 7a27 	vadd.f32	s14, s14, s15
  4040f6:	edd7 7a08 	vldr	s15, [r7, #32]
  4040fa:	ee77 7a67 	vsub.f32	s15, s14, s15
  4040fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  404102:	eef0 7a47 	vmov.f32	s15, s14
}
  404106:	eeb0 0a67 	vmov.f32	s0, s15
  40410a:	3744      	adds	r7, #68	; 0x44
  40410c:	46bd      	mov	sp, r7
  40410e:	ecbd 8b02 	vpop	{d8}
  404112:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404114:	00401639 	.word	0x00401639
  404118:	00401621 	.word	0x00401621
  40411c:	00402f75 	.word	0x00402f75
  404120:	00401649 	.word	0x00401649
  404124:	00403ce5 	.word	0x00403ce5
  404128:	49800000 	.word	0x49800000
  40412c:	0040edf9 	.word	0x0040edf9

00404130 <clock_calibration_initial>:

static int clock_calibration_initial(struct inv_icm426xx * s, struct clk_calib *clk_cal)
{
  404130:	b5f0      	push	{r4, r5, r6, r7, lr}
  404132:	b089      	sub	sp, #36	; 0x24
  404134:	af00      	add	r7, sp, #0
  404136:	6078      	str	r0, [r7, #4]
  404138:	6039      	str	r1, [r7, #0]
	int status = 0;
  40413a:	2300      	movs	r3, #0
  40413c:	61fb      	str	r3, [r7, #28]
	uint8_t prev_src0, prev_src8, data;
	
	/*
	 * Enable the ICM time register reading
	 */
	status |= inv_icm426xx_enable_timestamp_to_register(s);
  40413e:	6878      	ldr	r0, [r7, #4]
  404140:	4b7f      	ldr	r3, [pc, #508]	; (404340 <clock_calibration_initial+0x210>)
  404142:	4798      	blx	r3
  404144:	4602      	mov	r2, r0
  404146:	69fb      	ldr	r3, [r7, #28]
  404148:	4313      	orrs	r3, r2
  40414a:	61fb      	str	r3, [r7, #28]
	/*
	 * Power ON the ICM
	 * Enable gyro (the gyro clock is used for combo accel/gyro clocking)
	 * But disable interrupt since we don't want the data here
	 */
	data = 0;
  40414c:	2300      	movs	r3, #0
  40414e:	737b      	strb	r3, [r7, #13]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE0, 1, &prev_src0);
  404150:	f107 030f 	add.w	r3, r7, #15
  404154:	2201      	movs	r2, #1
  404156:	2165      	movs	r1, #101	; 0x65
  404158:	6878      	ldr	r0, [r7, #4]
  40415a:	4c7a      	ldr	r4, [pc, #488]	; (404344 <clock_calibration_initial+0x214>)
  40415c:	47a0      	blx	r4
  40415e:	4602      	mov	r2, r0
  404160:	69fb      	ldr	r3, [r7, #28]
  404162:	4313      	orrs	r3, r2
  404164:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE0, 1, &data);
  404166:	f107 030d 	add.w	r3, r7, #13
  40416a:	2201      	movs	r2, #1
  40416c:	2165      	movs	r1, #101	; 0x65
  40416e:	6878      	ldr	r0, [r7, #4]
  404170:	4c75      	ldr	r4, [pc, #468]	; (404348 <clock_calibration_initial+0x218>)
  404172:	47a0      	blx	r4
  404174:	4602      	mov	r2, r0
  404176:	69fb      	ldr	r3, [r7, #28]
  404178:	4313      	orrs	r3, r2
  40417a:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  40417c:	2104      	movs	r1, #4
  40417e:	6878      	ldr	r0, [r7, #4]
  404180:	4b72      	ldr	r3, [pc, #456]	; (40434c <clock_calibration_initial+0x21c>)
  404182:	4798      	blx	r3
  404184:	4602      	mov	r2, r0
  404186:	69fb      	ldr	r3, [r7, #28]
  404188:	4313      	orrs	r3, r2
  40418a:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE8_B4, 1, &prev_src8);
  40418c:	f107 030e 	add.w	r3, r7, #14
  404190:	2201      	movs	r2, #1
  404192:	214f      	movs	r1, #79	; 0x4f
  404194:	6878      	ldr	r0, [r7, #4]
  404196:	4c6b      	ldr	r4, [pc, #428]	; (404344 <clock_calibration_initial+0x214>)
  404198:	47a0      	blx	r4
  40419a:	4602      	mov	r2, r0
  40419c:	69fb      	ldr	r3, [r7, #28]
  40419e:	4313      	orrs	r3, r2
  4041a0:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE8_B4, 1, &data);
  4041a2:	f107 030d 	add.w	r3, r7, #13
  4041a6:	2201      	movs	r2, #1
  4041a8:	214f      	movs	r1, #79	; 0x4f
  4041aa:	6878      	ldr	r0, [r7, #4]
  4041ac:	4c66      	ldr	r4, [pc, #408]	; (404348 <clock_calibration_initial+0x218>)
  4041ae:	47a0      	blx	r4
  4041b0:	4602      	mov	r2, r0
  4041b2:	69fb      	ldr	r3, [r7, #28]
  4041b4:	4313      	orrs	r3, r2
  4041b6:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  4041b8:	2100      	movs	r1, #0
  4041ba:	6878      	ldr	r0, [r7, #4]
  4041bc:	4b63      	ldr	r3, [pc, #396]	; (40434c <clock_calibration_initial+0x21c>)
  4041be:	4798      	blx	r3
  4041c0:	4602      	mov	r2, r0
  4041c2:	69fb      	ldr	r3, [r7, #28]
  4041c4:	4313      	orrs	r3, r2
  4041c6:	61fb      	str	r3, [r7, #28]

	/* Compute coefficient for PLL */ 
	status |= inv_icm426xx_enable_gyro_low_noise_mode(s);
  4041c8:	6878      	ldr	r0, [r7, #4]
  4041ca:	4b61      	ldr	r3, [pc, #388]	; (404350 <clock_calibration_initial+0x220>)
  4041cc:	4798      	blx	r3
  4041ce:	4602      	mov	r2, r0
  4041d0:	69fb      	ldr	r3, [r7, #28]
  4041d2:	4313      	orrs	r3, r2
  4041d4:	61fb      	str	r3, [r7, #28]
	/* Wait 40 ms for MEMS start-up */
	time = inv_icm426xx_get_time_us();
  4041d6:	4b5f      	ldr	r3, [pc, #380]	; (404354 <clock_calibration_initial+0x224>)
  4041d8:	4798      	blx	r3
  4041da:	e9c7 0104 	strd	r0, r1, [r7, #16]
	while(inv_icm426xx_get_time_us() < (time + (40 * 1000)));
  4041de:	bf00      	nop
  4041e0:	4b5c      	ldr	r3, [pc, #368]	; (404354 <clock_calibration_initial+0x224>)
  4041e2:	4798      	blx	r3
  4041e4:	4605      	mov	r5, r0
  4041e6:	460e      	mov	r6, r1
  4041e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  4041ec:	f649 4140 	movw	r1, #40000	; 0x9c40
  4041f0:	f04f 0200 	mov.w	r2, #0
  4041f4:	185b      	adds	r3, r3, r1
  4041f6:	eb44 0402 	adc.w	r4, r4, r2
  4041fa:	42a6      	cmp	r6, r4
  4041fc:	bf08      	it	eq
  4041fe:	429d      	cmpeq	r5, r3
  404200:	d3ee      	bcc.n	4041e0 <clock_calibration_initial+0xb0>
	clk_cal->coef[INV_ICM426XX_PLL] = compute_calibration_coefficient(s, 200000); // 200 msec
  404202:	4955      	ldr	r1, [pc, #340]	; (404358 <clock_calibration_initial+0x228>)
  404204:	6878      	ldr	r0, [r7, #4]
  404206:	4b55      	ldr	r3, [pc, #340]	; (40435c <clock_calibration_initial+0x22c>)
  404208:	4798      	blx	r3
  40420a:	eef0 7a40 	vmov.f32	s15, s0
  40420e:	683b      	ldr	r3, [r7, #0]
  404210:	edc3 7a03 	vstr	s15, [r3, #12]
	status |= inv_icm426xx_disable_gyro(s);
  404214:	6878      	ldr	r0, [r7, #4]
  404216:	4b52      	ldr	r3, [pc, #328]	; (404360 <clock_calibration_initial+0x230>)
  404218:	4798      	blx	r3
  40421a:	4602      	mov	r2, r0
  40421c:	69fb      	ldr	r3, [r7, #28]
  40421e:	4313      	orrs	r3, r2
  404220:	61fb      	str	r3, [r7, #28]

	/* Compute coefficient for RC osc*/
	status |= inv_icm426xx_enable_accel_low_noise_mode(s);
  404222:	6878      	ldr	r0, [r7, #4]
  404224:	4b4f      	ldr	r3, [pc, #316]	; (404364 <clock_calibration_initial+0x234>)
  404226:	4798      	blx	r3
  404228:	4602      	mov	r2, r0
  40422a:	69fb      	ldr	r3, [r7, #28]
  40422c:	4313      	orrs	r3, r2
  40422e:	61fb      	str	r3, [r7, #28]
	/* Wait 40 ms for MEMS start-up */
	time = inv_icm426xx_get_time_us();
  404230:	4b48      	ldr	r3, [pc, #288]	; (404354 <clock_calibration_initial+0x224>)
  404232:	4798      	blx	r3
  404234:	e9c7 0104 	strd	r0, r1, [r7, #16]
	while(inv_icm426xx_get_time_us() < (time + (40 * 1000)));
  404238:	bf00      	nop
  40423a:	4b46      	ldr	r3, [pc, #280]	; (404354 <clock_calibration_initial+0x224>)
  40423c:	4798      	blx	r3
  40423e:	4605      	mov	r5, r0
  404240:	460e      	mov	r6, r1
  404242:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  404246:	f649 4140 	movw	r1, #40000	; 0x9c40
  40424a:	f04f 0200 	mov.w	r2, #0
  40424e:	185b      	adds	r3, r3, r1
  404250:	eb44 0402 	adc.w	r4, r4, r2
  404254:	42a6      	cmp	r6, r4
  404256:	bf08      	it	eq
  404258:	429d      	cmpeq	r5, r3
  40425a:	d3ee      	bcc.n	40423a <clock_calibration_initial+0x10a>
	clk_cal->coef[INV_ICM426XX_RC_OSC] = compute_calibration_coefficient(s, 200000); // 200 msec
  40425c:	493e      	ldr	r1, [pc, #248]	; (404358 <clock_calibration_initial+0x228>)
  40425e:	6878      	ldr	r0, [r7, #4]
  404260:	4b3e      	ldr	r3, [pc, #248]	; (40435c <clock_calibration_initial+0x22c>)
  404262:	4798      	blx	r3
  404264:	eef0 7a40 	vmov.f32	s15, s0
  404268:	683b      	ldr	r3, [r7, #0]
  40426a:	edc3 7a04 	vstr	s15, [r3, #16]
	status |= inv_icm426xx_disable_accel(s);
  40426e:	6878      	ldr	r0, [r7, #4]
  404270:	4b3d      	ldr	r3, [pc, #244]	; (404368 <clock_calibration_initial+0x238>)
  404272:	4798      	blx	r3
  404274:	4602      	mov	r2, r0
  404276:	69fb      	ldr	r3, [r7, #28]
  404278:	4313      	orrs	r3, r2
  40427a:	61fb      	str	r3, [r7, #28]

	/* Coefficient for WU osc can't be measured as timestamp register is not reliable in this mode */
	clk_cal->coef[INV_ICM426XX_WU_OSC] = clk_cal->coef[INV_ICM426XX_RC_OSC];
  40427c:	683b      	ldr	r3, [r7, #0]
  40427e:	691a      	ldr	r2, [r3, #16]
  404280:	683b      	ldr	r3, [r7, #0]
  404282:	615a      	str	r2, [r3, #20]

	INV_MSG(INV_MSG_LEVEL_DEBUG, "HelperClockCalib: Initial coefficient computed:");
  404284:	4939      	ldr	r1, [pc, #228]	; (40436c <clock_calibration_initial+0x23c>)
  404286:	2005      	movs	r0, #5
  404288:	4b39      	ldr	r3, [pc, #228]	; (404370 <clock_calibration_initial+0x240>)
  40428a:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_DEBUG, "HelperClockCalib:    - PLL:    %f", clk_cal->coef[INV_ICM426XX_PLL]);
  40428c:	683b      	ldr	r3, [r7, #0]
  40428e:	68da      	ldr	r2, [r3, #12]
  404290:	4b38      	ldr	r3, [pc, #224]	; (404374 <clock_calibration_initial+0x244>)
  404292:	4610      	mov	r0, r2
  404294:	4798      	blx	r3
  404296:	4603      	mov	r3, r0
  404298:	460c      	mov	r4, r1
  40429a:	461a      	mov	r2, r3
  40429c:	4623      	mov	r3, r4
  40429e:	4936      	ldr	r1, [pc, #216]	; (404378 <clock_calibration_initial+0x248>)
  4042a0:	2005      	movs	r0, #5
  4042a2:	4c33      	ldr	r4, [pc, #204]	; (404370 <clock_calibration_initial+0x240>)
  4042a4:	47a0      	blx	r4
	INV_MSG(INV_MSG_LEVEL_DEBUG, "HelperClockCalib:    - RC_OSC: %f", clk_cal->coef[INV_ICM426XX_RC_OSC]);
  4042a6:	683b      	ldr	r3, [r7, #0]
  4042a8:	691a      	ldr	r2, [r3, #16]
  4042aa:	4b32      	ldr	r3, [pc, #200]	; (404374 <clock_calibration_initial+0x244>)
  4042ac:	4610      	mov	r0, r2
  4042ae:	4798      	blx	r3
  4042b0:	4603      	mov	r3, r0
  4042b2:	460c      	mov	r4, r1
  4042b4:	461a      	mov	r2, r3
  4042b6:	4623      	mov	r3, r4
  4042b8:	4930      	ldr	r1, [pc, #192]	; (40437c <clock_calibration_initial+0x24c>)
  4042ba:	2005      	movs	r0, #5
  4042bc:	4c2c      	ldr	r4, [pc, #176]	; (404370 <clock_calibration_initial+0x240>)
  4042be:	47a0      	blx	r4
	INV_MSG(INV_MSG_LEVEL_DEBUG, "HelperClockCalib:    - WU_OSC: %f", clk_cal->coef[INV_ICM426XX_WU_OSC]);
  4042c0:	683b      	ldr	r3, [r7, #0]
  4042c2:	695a      	ldr	r2, [r3, #20]
  4042c4:	4b2b      	ldr	r3, [pc, #172]	; (404374 <clock_calibration_initial+0x244>)
  4042c6:	4610      	mov	r0, r2
  4042c8:	4798      	blx	r3
  4042ca:	4603      	mov	r3, r0
  4042cc:	460c      	mov	r4, r1
  4042ce:	461a      	mov	r2, r3
  4042d0:	4623      	mov	r3, r4
  4042d2:	492b      	ldr	r1, [pc, #172]	; (404380 <clock_calibration_initial+0x250>)
  4042d4:	2005      	movs	r0, #5
  4042d6:	4c26      	ldr	r4, [pc, #152]	; (404370 <clock_calibration_initial+0x240>)
  4042d8:	47a0      	blx	r4

	/* Disable the 20-bits timestamp register reading */
	status |= inv_icm426xx_disable_timestamp_to_register(s);
  4042da:	6878      	ldr	r0, [r7, #4]
  4042dc:	4b29      	ldr	r3, [pc, #164]	; (404384 <clock_calibration_initial+0x254>)
  4042de:	4798      	blx	r3
  4042e0:	4602      	mov	r2, r0
  4042e2:	69fb      	ldr	r3, [r7, #28]
  4042e4:	4313      	orrs	r3, r2
  4042e6:	61fb      	str	r3, [r7, #28]

	/* Re-enable interrupts */
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE0, 1, &prev_src0);
  4042e8:	f107 030f 	add.w	r3, r7, #15
  4042ec:	2201      	movs	r2, #1
  4042ee:	2165      	movs	r1, #101	; 0x65
  4042f0:	6878      	ldr	r0, [r7, #4]
  4042f2:	4c15      	ldr	r4, [pc, #84]	; (404348 <clock_calibration_initial+0x218>)
  4042f4:	47a0      	blx	r4
  4042f6:	4602      	mov	r2, r0
  4042f8:	69fb      	ldr	r3, [r7, #28]
  4042fa:	4313      	orrs	r3, r2
  4042fc:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  4042fe:	2104      	movs	r1, #4
  404300:	6878      	ldr	r0, [r7, #4]
  404302:	4b12      	ldr	r3, [pc, #72]	; (40434c <clock_calibration_initial+0x21c>)
  404304:	4798      	blx	r3
  404306:	4602      	mov	r2, r0
  404308:	69fb      	ldr	r3, [r7, #28]
  40430a:	4313      	orrs	r3, r2
  40430c:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE8_B4, 1, &prev_src8);
  40430e:	f107 030e 	add.w	r3, r7, #14
  404312:	2201      	movs	r2, #1
  404314:	214f      	movs	r1, #79	; 0x4f
  404316:	6878      	ldr	r0, [r7, #4]
  404318:	4c0b      	ldr	r4, [pc, #44]	; (404348 <clock_calibration_initial+0x218>)
  40431a:	47a0      	blx	r4
  40431c:	4602      	mov	r2, r0
  40431e:	69fb      	ldr	r3, [r7, #28]
  404320:	4313      	orrs	r3, r2
  404322:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  404324:	2100      	movs	r1, #0
  404326:	6878      	ldr	r0, [r7, #4]
  404328:	4b08      	ldr	r3, [pc, #32]	; (40434c <clock_calibration_initial+0x21c>)
  40432a:	4798      	blx	r3
  40432c:	4602      	mov	r2, r0
  40432e:	69fb      	ldr	r3, [r7, #28]
  404330:	4313      	orrs	r3, r2
  404332:	61fb      	str	r3, [r7, #28]
	
	return status;
  404334:	69fb      	ldr	r3, [r7, #28]
}
  404336:	4618      	mov	r0, r3
  404338:	3724      	adds	r7, #36	; 0x24
  40433a:	46bd      	mov	sp, r7
  40433c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40433e:	bf00      	nop
  404340:	00402e7d 	.word	0x00402e7d
  404344:	00403931 	.word	0x00403931
  404348:	004039fd 	.word	0x004039fd
  40434c:	00401675 	.word	0x00401675
  404350:	00401c61 	.word	0x00401c61
  404354:	00401621 	.word	0x00401621
  404358:	00030d40 	.word	0x00030d40
  40435c:	00403fbd 	.word	0x00403fbd
  404360:	00401ead 	.word	0x00401ead
  404364:	00401999 	.word	0x00401999
  404368:	00401b79 	.word	0x00401b79
  40436c:	00413680 	.word	0x00413680
  404370:	00407925 	.word	0x00407925
  404374:	0040e531 	.word	0x0040e531
  404378:	004136b0 	.word	0x004136b0
  40437c:	004136d4 	.word	0x004136d4
  404380:	004136f8 	.word	0x004136f8
  404384:	00402f01 	.word	0x00402f01

00404388 <clock_calibration_update>:

/*
 * Update the calibration factor after N samples (60 x 20ms at default ODR, every 1200ms)
 */
int clock_calibration_update(struct inv_icm426xx * s, struct clk_calib *clk_cal, uint64_t irq_timestamp, uint16_t fifo_timestamp)
{
  404388:	b590      	push	{r4, r7, lr}
  40438a:	b08b      	sub	sp, #44	; 0x2c
  40438c:	af04      	add	r7, sp, #16
  40438e:	60f8      	str	r0, [r7, #12]
  404390:	60b9      	str	r1, [r7, #8]
  404392:	e9c7 2300 	strd	r2, r3, [r7]
	int rc = 0;
  404396:	2300      	movs	r3, #0
  404398:	617b      	str	r3, [r7, #20]

	if((--clk_cal->recalib_after_n_samples) == 0) {
  40439a:	68bb      	ldr	r3, [r7, #8]
  40439c:	685b      	ldr	r3, [r3, #4]
  40439e:	1e5a      	subs	r2, r3, #1
  4043a0:	68bb      	ldr	r3, [r7, #8]
  4043a2:	605a      	str	r2, [r3, #4]
  4043a4:	68bb      	ldr	r3, [r7, #8]
  4043a6:	685b      	ldr	r3, [r3, #4]
  4043a8:	2b00      	cmp	r3, #0
  4043aa:	d132      	bne.n	404412 <clock_calibration_update+0x8a>
		uint32_t smallest_running_odr_us;
		
		rc = clock_calibration_update_coef(s, clk_cal, &clk_cal->on_going, irq_timestamp, fifo_timestamp);
  4043ac:	68bb      	ldr	r3, [r7, #8]
  4043ae:	f103 0208 	add.w	r2, r3, #8
  4043b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  4043b4:	9302      	str	r3, [sp, #8]
  4043b6:	e9d7 3400 	ldrd	r3, r4, [r7]
  4043ba:	e9cd 3400 	strd	r3, r4, [sp]
  4043be:	68b9      	ldr	r1, [r7, #8]
  4043c0:	68f8      	ldr	r0, [r7, #12]
  4043c2:	4b16      	ldr	r3, [pc, #88]	; (40441c <clock_calibration_update+0x94>)
  4043c4:	4798      	blx	r3
  4043c6:	6178      	str	r0, [r7, #20]
		
		/* now find the smallest running odr to program new calibration */
		if ((rc = get_fastest_running_odr(s, &smallest_running_odr_us)) != 0) {
  4043c8:	f107 0310 	add.w	r3, r7, #16
  4043cc:	4619      	mov	r1, r3
  4043ce:	68f8      	ldr	r0, [r7, #12]
  4043d0:	4b13      	ldr	r3, [pc, #76]	; (404420 <clock_calibration_update+0x98>)
  4043d2:	4798      	blx	r3
  4043d4:	6178      	str	r0, [r7, #20]
  4043d6:	697b      	ldr	r3, [r7, #20]
  4043d8:	2b00      	cmp	r3, #0
  4043da:	d005      	beq.n	4043e8 <clock_calibration_update+0x60>
			/* in case off error we set recalib n sample to the initial one */
			clk_cal->recalib_after_n_samples = clk_cal->initial_recalib_after_n_samples;
  4043dc:	68bb      	ldr	r3, [r7, #8]
  4043de:	681a      	ldr	r2, [r3, #0]
  4043e0:	68bb      	ldr	r3, [r7, #8]
  4043e2:	605a      	str	r2, [r3, #4]
			return rc;
  4043e4:	697b      	ldr	r3, [r7, #20]
  4043e6:	e015      	b.n	404414 <clock_calibration_update+0x8c>
		}
		/* in case no valid odr was returned, let's use the default odr value */
		if(smallest_running_odr_us == 0xffffffff)
  4043e8:	693b      	ldr	r3, [r7, #16]
  4043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4043ee:	d101      	bne.n	4043f4 <clock_calibration_update+0x6c>
			smallest_running_odr_us = 10;	
  4043f0:	230a      	movs	r3, #10
  4043f2:	613b      	str	r3, [r7, #16]
		
		clk_cal->recalib_after_n_samples = NUMBER_OF_SAMPLES_FOR_ODR(smallest_running_odr_us);
  4043f4:	693b      	ldr	r3, [r7, #16]
  4043f6:	4a0b      	ldr	r2, [pc, #44]	; (404424 <clock_calibration_update+0x9c>)
  4043f8:	fbb2 f1f3 	udiv	r1, r2, r3
  4043fc:	693b      	ldr	r3, [r7, #16]
  4043fe:	4a09      	ldr	r2, [pc, #36]	; (404424 <clock_calibration_update+0x9c>)
  404400:	fbb2 f0f3 	udiv	r0, r2, r3
  404404:	fb03 f300 	mul.w	r3, r3, r0
  404408:	1ad3      	subs	r3, r2, r3
  40440a:	440b      	add	r3, r1
  40440c:	461a      	mov	r2, r3
  40440e:	68bb      	ldr	r3, [r7, #8]
  404410:	605a      	str	r2, [r3, #4]
	}
	
	return rc;
  404412:	697b      	ldr	r3, [r7, #20]
}
  404414:	4618      	mov	r0, r3
  404416:	371c      	adds	r7, #28
  404418:	46bd      	mov	sp, r7
  40441a:	bd90      	pop	{r4, r7, pc}
  40441c:	00404429 	.word	0x00404429
  404420:	004046a1 	.word	0x004046a1
  404424:	00124f80 	.word	0x00124f80

00404428 <clock_calibration_update_coef>:

static int clock_calibration_update_coef(struct inv_icm426xx * s, struct clk_calib *clk_cal, uint8_t *on_going, uint64_t irq_timestamp, uint16_t fifo_timestamp)
{
  404428:	b5f0      	push	{r4, r5, r6, r7, lr}
  40442a:	ed2d 8b02 	vpush	{d8}
  40442e:	b093      	sub	sp, #76	; 0x4c
  404430:	af04      	add	r7, sp, #16
  404432:	60f8      	str	r0, [r7, #12]
  404434:	60b9      	str	r1, [r7, #8]
  404436:	607a      	str	r2, [r7, #4]
	int status = 0;
  404438:	2300      	movs	r3, #0
  40443a:	633b      	str	r3, [r7, #48]	; 0x30
	static uint64_t tMCU_1;
	static uint32_t tICM_1;
	static enum inv_icm426xx_clock_source cur_source;
	
	
	if(*on_going == 0) {
  40443c:	687b      	ldr	r3, [r7, #4]
  40443e:	781b      	ldrb	r3, [r3, #0]
  404440:	2b00      	cmp	r3, #0
  404442:	d113      	bne.n	40446c <clock_calibration_update_coef+0x44>
		/* Stage 1 */ 

		/* Set initial MCU and ICM time */
		tICM_1 = fifo_timestamp;
  404444:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
  404448:	4a87      	ldr	r2, [pc, #540]	; (404668 <clock_calibration_update_coef+0x240>)
  40444a:	6013      	str	r3, [r2, #0]
		tMCU_1 = irq_timestamp;
  40444c:	4a87      	ldr	r2, [pc, #540]	; (40466c <clock_calibration_update_coef+0x244>)
  40444e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
  404452:	e9c2 3400 	strd	r3, r4, [r2]
		*on_going = 1;
  404456:	687b      	ldr	r3, [r7, #4]
  404458:	2201      	movs	r2, #1
  40445a:	701a      	strb	r2, [r3, #0]
		cur_source = get_current_clock_source(s);
  40445c:	68f8      	ldr	r0, [r7, #12]
  40445e:	4b84      	ldr	r3, [pc, #528]	; (404670 <clock_calibration_update_coef+0x248>)
  404460:	4798      	blx	r3
  404462:	4603      	mov	r3, r0
  404464:	461a      	mov	r2, r3
  404466:	4b83      	ldr	r3, [pc, #524]	; (404674 <clock_calibration_update_coef+0x24c>)
  404468:	701a      	strb	r2, [r3, #0]
  40446a:	e0ec      	b.n	404646 <clock_calibration_update_coef+0x21e>
	} else if(*on_going == 1) {
  40446c:	687b      	ldr	r3, [r7, #4]
  40446e:	781b      	ldrb	r3, [r3, #0]
  404470:	2b01      	cmp	r3, #1
  404472:	f040 80e8 	bne.w	404646 <clock_calibration_update_coef+0x21e>
		/* Stage 2 */ 

		/* If the clock source has changed between both stages, do not compute new coef */
		if (cur_source != get_current_clock_source(s)) {
  404476:	68f8      	ldr	r0, [r7, #12]
  404478:	4b7d      	ldr	r3, [pc, #500]	; (404670 <clock_calibration_update_coef+0x248>)
  40447a:	4798      	blx	r3
  40447c:	4603      	mov	r3, r0
  40447e:	461a      	mov	r2, r3
  404480:	4b7c      	ldr	r3, [pc, #496]	; (404674 <clock_calibration_update_coef+0x24c>)
  404482:	781b      	ldrb	r3, [r3, #0]
  404484:	429a      	cmp	r2, r3
  404486:	d004      	beq.n	404492 <clock_calibration_update_coef+0x6a>
			*on_going = 0;
  404488:	687b      	ldr	r3, [r7, #4]
  40448a:	2200      	movs	r2, #0
  40448c:	701a      	strb	r2, [r3, #0]
			return status;
  40448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404490:	e0da      	b.n	404648 <clock_calibration_update_coef+0x220>
		}

		/* Set second MCU and ICM time */
		tICM_2 = fifo_timestamp;
  404492:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
  404496:	62fb      	str	r3, [r7, #44]	; 0x2c
		tMCU_2 = irq_timestamp;
  404498:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
  40449c:	e9c7 3408 	strd	r3, r4, [r7, #32]

		tICM_1f = (float)tICM_1 * get_fifo_timestamp_resolution(s);
  4044a0:	4b71      	ldr	r3, [pc, #452]	; (404668 <clock_calibration_update_coef+0x240>)
  4044a2:	681b      	ldr	r3, [r3, #0]
  4044a4:	ee07 3a90 	vmov	s15, r3
  4044a8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  4044ac:	68f8      	ldr	r0, [r7, #12]
  4044ae:	4b72      	ldr	r3, [pc, #456]	; (404678 <clock_calibration_update_coef+0x250>)
  4044b0:	4798      	blx	r3
  4044b2:	eef0 7a40 	vmov.f32	s15, s0
  4044b6:	ee68 7a27 	vmul.f32	s15, s16, s15
  4044ba:	edc7 7a07 	vstr	s15, [r7, #28]
		tICM_2f = (float)tICM_2 * get_fifo_timestamp_resolution(s);
  4044be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4044c0:	ee07 3a90 	vmov	s15, r3
  4044c4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  4044c8:	68f8      	ldr	r0, [r7, #12]
  4044ca:	4b6b      	ldr	r3, [pc, #428]	; (404678 <clock_calibration_update_coef+0x250>)
  4044cc:	4798      	blx	r3
  4044ce:	eef0 7a40 	vmov.f32	s15, s0
  4044d2:	ee68 7a27 	vmul.f32	s15, s16, s15
  4044d6:	edc7 7a06 	vstr	s15, [r7, #24]
		tICM_rollover = (float) ROLLOVER_16BITS * get_fifo_timestamp_resolution(s);
  4044da:	68f8      	ldr	r0, [r7, #12]
  4044dc:	4b66      	ldr	r3, [pc, #408]	; (404678 <clock_calibration_update_coef+0x250>)
  4044de:	4798      	blx	r3
  4044e0:	eeb0 7a40 	vmov.f32	s14, s0
  4044e4:	eddf 7a65 	vldr	s15, [pc, #404]	; 40467c <clock_calibration_update_coef+0x254>
  4044e8:	ee67 7a27 	vmul.f32	s15, s14, s15
  4044ec:	edc7 7a05 	vstr	s15, [r7, #20]

		/* Estimate number of rollover of the FIFO timestamp */
		nb_rollover = (uint8_t)((tMCU_2 - tMCU_1) / tICM_rollover);
  4044f0:	4b5e      	ldr	r3, [pc, #376]	; (40466c <clock_calibration_update_coef+0x244>)
  4044f2:	e9d3 3400 	ldrd	r3, r4, [r3]
  4044f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
  4044fa:	1acb      	subs	r3, r1, r3
  4044fc:	eb62 0404 	sbc.w	r4, r2, r4
  404500:	4a5f      	ldr	r2, [pc, #380]	; (404680 <clock_calibration_update_coef+0x258>)
  404502:	4618      	mov	r0, r3
  404504:	4621      	mov	r1, r4
  404506:	4790      	blx	r2
  404508:	ee06 0a90 	vmov	s13, r0
  40450c:	ed97 7a05 	vldr	s14, [r7, #20]
  404510:	eec6 7a87 	vdiv.f32	s15, s13, s14
  404514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  404518:	edc7 7a00 	vstr	s15, [r7]
  40451c:	783b      	ldrb	r3, [r7, #0]
  40451e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		/* If tICM_2 is smaller than tICM_1, there was one more rollover than what we estimated */
		if (tICM_2f < tICM_1f)
  404522:	ed97 7a06 	vldr	s14, [r7, #24]
  404526:	edd7 7a07 	vldr	s15, [r7, #28]
  40452a:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404532:	d504      	bpl.n	40453e <clock_calibration_update_coef+0x116>
			nb_rollover += 1;
  404534:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404538:	3301      	adds	r3, #1
  40453a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		computed_coef_time = (tMCU_2 - tMCU_1) / (float) (nb_rollover * tICM_rollover + tICM_2f - tICM_1f);
  40453e:	4b4b      	ldr	r3, [pc, #300]	; (40466c <clock_calibration_update_coef+0x244>)
  404540:	e9d3 3400 	ldrd	r3, r4, [r3]
  404544:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
  404548:	1acb      	subs	r3, r1, r3
  40454a:	eb62 0404 	sbc.w	r4, r2, r4
  40454e:	4a4c      	ldr	r2, [pc, #304]	; (404680 <clock_calibration_update_coef+0x258>)
  404550:	4618      	mov	r0, r3
  404552:	4621      	mov	r1, r4
  404554:	4790      	blx	r2
  404556:	ee06 0a90 	vmov	s13, r0
  40455a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40455e:	ee07 3a90 	vmov	s15, r3
  404562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  404566:	edd7 7a05 	vldr	s15, [r7, #20]
  40456a:	ee27 7a27 	vmul.f32	s14, s14, s15
  40456e:	edd7 7a06 	vldr	s15, [r7, #24]
  404572:	ee37 7a27 	vadd.f32	s14, s14, s15
  404576:	edd7 7a07 	vldr	s15, [r7, #28]
  40457a:	ee37 7a67 	vsub.f32	s14, s14, s15
  40457e:	eec6 7a87 	vdiv.f32	s15, s13, s14
  404582:	edc7 7a04 	vstr	s15, [r7, #16]

		/* error management : only allow 90-110% variation */
		if ( (computed_coef_time < 1.1) && (computed_coef_time > 0.9) ) {
  404586:	4b3f      	ldr	r3, [pc, #252]	; (404684 <clock_calibration_update_coef+0x25c>)
  404588:	6938      	ldr	r0, [r7, #16]
  40458a:	4798      	blx	r3
  40458c:	4c3e      	ldr	r4, [pc, #248]	; (404688 <clock_calibration_update_coef+0x260>)
  40458e:	a332      	add	r3, pc, #200	; (adr r3, 404658 <clock_calibration_update_coef+0x230>)
  404590:	e9d3 2300 	ldrd	r2, r3, [r3]
  404594:	47a0      	blx	r4
  404596:	4603      	mov	r3, r0
  404598:	2b00      	cmp	r3, #0
  40459a:	d030      	beq.n	4045fe <clock_calibration_update_coef+0x1d6>
  40459c:	4b39      	ldr	r3, [pc, #228]	; (404684 <clock_calibration_update_coef+0x25c>)
  40459e:	6938      	ldr	r0, [r7, #16]
  4045a0:	4798      	blx	r3
  4045a2:	4c3a      	ldr	r4, [pc, #232]	; (40468c <clock_calibration_update_coef+0x264>)
  4045a4:	a32e      	add	r3, pc, #184	; (adr r3, 404660 <clock_calibration_update_coef+0x238>)
  4045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045aa:	47a0      	blx	r4
  4045ac:	4603      	mov	r3, r0
  4045ae:	2b00      	cmp	r3, #0
  4045b0:	d025      	beq.n	4045fe <clock_calibration_update_coef+0x1d6>
			clk_cal->coef[get_current_clock_source(s)] = computed_coef_time;
  4045b2:	68f8      	ldr	r0, [r7, #12]
  4045b4:	4b2e      	ldr	r3, [pc, #184]	; (404670 <clock_calibration_update_coef+0x248>)
  4045b6:	4798      	blx	r3
  4045b8:	4603      	mov	r3, r0
  4045ba:	68ba      	ldr	r2, [r7, #8]
  4045bc:	3302      	adds	r3, #2
  4045be:	009b      	lsls	r3, r3, #2
  4045c0:	4413      	add	r3, r2
  4045c2:	3304      	adds	r3, #4
  4045c4:	693a      	ldr	r2, [r7, #16]
  4045c6:	601a      	str	r2, [r3, #0]
			INV_MSG(INV_MSG_LEVEL_DEBUG, "helperClockCalib: New coefficient computed for %s: %f", 
  4045c8:	68f8      	ldr	r0, [r7, #12]
  4045ca:	4b31      	ldr	r3, [pc, #196]	; (404690 <clock_calibration_update_coef+0x268>)
  4045cc:	4798      	blx	r3
  4045ce:	4605      	mov	r5, r0
  4045d0:	68f8      	ldr	r0, [r7, #12]
  4045d2:	4b27      	ldr	r3, [pc, #156]	; (404670 <clock_calibration_update_coef+0x248>)
  4045d4:	4798      	blx	r3
  4045d6:	4603      	mov	r3, r0
  4045d8:	68ba      	ldr	r2, [r7, #8]
  4045da:	3302      	adds	r3, #2
  4045dc:	009b      	lsls	r3, r3, #2
  4045de:	4413      	add	r3, r2
  4045e0:	3304      	adds	r3, #4
  4045e2:	681a      	ldr	r2, [r3, #0]
  4045e4:	4b27      	ldr	r3, [pc, #156]	; (404684 <clock_calibration_update_coef+0x25c>)
  4045e6:	4610      	mov	r0, r2
  4045e8:	4798      	blx	r3
  4045ea:	4603      	mov	r3, r0
  4045ec:	460c      	mov	r4, r1
  4045ee:	e9cd 3400 	strd	r3, r4, [sp]
  4045f2:	462a      	mov	r2, r5
  4045f4:	4927      	ldr	r1, [pc, #156]	; (404694 <clock_calibration_update_coef+0x26c>)
  4045f6:	2005      	movs	r0, #5
  4045f8:	4b27      	ldr	r3, [pc, #156]	; (404698 <clock_calibration_update_coef+0x270>)
  4045fa:	4798      	blx	r3
  4045fc:	e020      	b.n	404640 <clock_calibration_update_coef+0x218>
				get_current_clock_source_name(s), clk_cal->coef[get_current_clock_source(s)]);
		} else
			INV_MSG(INV_MSG_LEVEL_ERROR, "helperClockCalib: Bad coefficient computed for %s: %f, skipping it and keeping %f", 
  4045fe:	68f8      	ldr	r0, [r7, #12]
  404600:	4b23      	ldr	r3, [pc, #140]	; (404690 <clock_calibration_update_coef+0x268>)
  404602:	4798      	blx	r3
  404604:	4606      	mov	r6, r0
  404606:	4b1f      	ldr	r3, [pc, #124]	; (404684 <clock_calibration_update_coef+0x25c>)
  404608:	6938      	ldr	r0, [r7, #16]
  40460a:	4798      	blx	r3
  40460c:	4604      	mov	r4, r0
  40460e:	460d      	mov	r5, r1
  404610:	68f8      	ldr	r0, [r7, #12]
  404612:	4b17      	ldr	r3, [pc, #92]	; (404670 <clock_calibration_update_coef+0x248>)
  404614:	4798      	blx	r3
  404616:	4603      	mov	r3, r0
  404618:	68ba      	ldr	r2, [r7, #8]
  40461a:	3302      	adds	r3, #2
  40461c:	009b      	lsls	r3, r3, #2
  40461e:	4413      	add	r3, r2
  404620:	3304      	adds	r3, #4
  404622:	681a      	ldr	r2, [r3, #0]
  404624:	4b17      	ldr	r3, [pc, #92]	; (404684 <clock_calibration_update_coef+0x25c>)
  404626:	4610      	mov	r0, r2
  404628:	4798      	blx	r3
  40462a:	4602      	mov	r2, r0
  40462c:	460b      	mov	r3, r1
  40462e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404632:	e9cd 4500 	strd	r4, r5, [sp]
  404636:	4632      	mov	r2, r6
  404638:	4918      	ldr	r1, [pc, #96]	; (40469c <clock_calibration_update_coef+0x274>)
  40463a:	2001      	movs	r0, #1
  40463c:	4b16      	ldr	r3, [pc, #88]	; (404698 <clock_calibration_update_coef+0x270>)
  40463e:	4798      	blx	r3
				get_current_clock_source_name(s), computed_coef_time, clk_cal->coef[get_current_clock_source(s)]);

		*on_going = 0;
  404640:	687b      	ldr	r3, [r7, #4]
  404642:	2200      	movs	r2, #0
  404644:	701a      	strb	r2, [r3, #0]
	}
	return status;
  404646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
  404648:	4618      	mov	r0, r3
  40464a:	373c      	adds	r7, #60	; 0x3c
  40464c:	46bd      	mov	sp, r7
  40464e:	ecbd 8b02 	vpop	{d8}
  404652:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404654:	f3af 8000 	nop.w
  404658:	9999999a 	.word	0x9999999a
  40465c:	3ff19999 	.word	0x3ff19999
  404660:	cccccccd 	.word	0xcccccccd
  404664:	3feccccc 	.word	0x3feccccc
  404668:	20003a70 	.word	0x20003a70
  40466c:	20003a78 	.word	0x20003a78
  404670:	00403b55 	.word	0x00403b55
  404674:	20003a80 	.word	0x20003a80
  404678:	00403cb1 	.word	0x00403cb1
  40467c:	47800000 	.word	0x47800000
  404680:	0040edf9 	.word	0x0040edf9
  404684:	0040e531 	.word	0x0040e531
  404688:	0040eabd 	.word	0x0040eabd
  40468c:	0040eaf9 	.word	0x0040eaf9
  404690:	00403be5 	.word	0x00403be5
  404694:	0041371c 	.word	0x0041371c
  404698:	00407925 	.word	0x00407925
  40469c:	00413754 	.word	0x00413754

004046a0 <get_fastest_running_odr>:

static int get_fastest_running_odr(struct inv_icm426xx * s, uint32_t *odr)
{
  4046a0:	b590      	push	{r4, r7, lr}
  4046a2:	b089      	sub	sp, #36	; 0x24
  4046a4:	af00      	add	r7, sp, #0
  4046a6:	6078      	str	r0, [r7, #4]
  4046a8:	6039      	str	r1, [r7, #0]
	int rc = 0;
  4046aa:	2300      	movs	r3, #0
  4046ac:	61bb      	str	r3, [r7, #24]
	uint8_t accel_cfg_0_reg, gyro_cfg_0_reg, pwr_mngt_0_reg;

	uint32_t smallest_odr = 0xffffffff, accel_odr_us, gyro_odr_us;
  4046ae:	f04f 33ff 	mov.w	r3, #4294967295
  4046b2:	61fb      	str	r3, [r7, #28]
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t gyro_mode;
	ICM426XX_ACCEL_CONFIG0_ODR_t accel_odr;
	ICM426XX_GYRO_CONFIG0_ODR_t gyro_odr;

	/* Access current sensors ODR */
	rc |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  4046b4:	f107 030b 	add.w	r3, r7, #11
  4046b8:	2201      	movs	r2, #1
  4046ba:	2150      	movs	r1, #80	; 0x50
  4046bc:	6878      	ldr	r0, [r7, #4]
  4046be:	4c26      	ldr	r4, [pc, #152]	; (404758 <get_fastest_running_odr+0xb8>)
  4046c0:	47a0      	blx	r4
  4046c2:	4602      	mov	r2, r0
  4046c4:	69bb      	ldr	r3, [r7, #24]
  4046c6:	4313      	orrs	r3, r2
  4046c8:	61bb      	str	r3, [r7, #24]
	rc |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  4046ca:	f107 030a 	add.w	r3, r7, #10
  4046ce:	2201      	movs	r2, #1
  4046d0:	214f      	movs	r1, #79	; 0x4f
  4046d2:	6878      	ldr	r0, [r7, #4]
  4046d4:	4c20      	ldr	r4, [pc, #128]	; (404758 <get_fastest_running_odr+0xb8>)
  4046d6:	47a0      	blx	r4
  4046d8:	4602      	mov	r2, r0
  4046da:	69bb      	ldr	r3, [r7, #24]
  4046dc:	4313      	orrs	r3, r2
  4046de:	61bb      	str	r3, [r7, #24]
	rc |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  4046e0:	f107 0309 	add.w	r3, r7, #9
  4046e4:	2201      	movs	r2, #1
  4046e6:	214e      	movs	r1, #78	; 0x4e
  4046e8:	6878      	ldr	r0, [r7, #4]
  4046ea:	4c1b      	ldr	r4, [pc, #108]	; (404758 <get_fastest_running_odr+0xb8>)
  4046ec:	47a0      	blx	r4
  4046ee:	4602      	mov	r2, r0
  4046f0:	69bb      	ldr	r3, [r7, #24]
  4046f2:	4313      	orrs	r3, r2
  4046f4:	61bb      	str	r3, [r7, #24]
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  4046f6:	7a7b      	ldrb	r3, [r7, #9]
  4046f8:	f003 0303 	and.w	r3, r3, #3
  4046fc:	75fb      	strb	r3, [r7, #23]
	gyro_mode  = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  4046fe:	7a7b      	ldrb	r3, [r7, #9]
  404700:	f003 030c 	and.w	r3, r3, #12
  404704:	75bb      	strb	r3, [r7, #22]
	gyro_odr   = (ICM426XX_GYRO_CONFIG0_ODR_t)(gyro_cfg_0_reg & BIT_GYRO_CONFIG0_ODR_MASK);
  404706:	7abb      	ldrb	r3, [r7, #10]
  404708:	f003 030f 	and.w	r3, r3, #15
  40470c:	757b      	strb	r3, [r7, #21]
	accel_odr  = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  40470e:	7afb      	ldrb	r3, [r7, #11]
  404710:	f003 030f 	and.w	r3, r3, #15
  404714:	753b      	strb	r3, [r7, #20]
	accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(accel_odr);
  404716:	7d3b      	ldrb	r3, [r7, #20]
  404718:	4618      	mov	r0, r3
  40471a:	4b10      	ldr	r3, [pc, #64]	; (40475c <get_fastest_running_odr+0xbc>)
  40471c:	4798      	blx	r3
  40471e:	6138      	str	r0, [r7, #16]
	gyro_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(gyro_odr);
  404720:	7d7b      	ldrb	r3, [r7, #21]
  404722:	4618      	mov	r0, r3
  404724:	4b0d      	ldr	r3, [pc, #52]	; (40475c <get_fastest_running_odr+0xbc>)
  404726:	4798      	blx	r3
  404728:	60f8      	str	r0, [r7, #12]

	/* now let's find the smallest ODR of running sensors among ACC and GYR */
	if (accel_mode != ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF)
  40472a:	7dfb      	ldrb	r3, [r7, #23]
  40472c:	2b00      	cmp	r3, #0
  40472e:	d001      	beq.n	404734 <get_fastest_running_odr+0x94>
		smallest_odr = accel_odr_us;
  404730:	693b      	ldr	r3, [r7, #16]
  404732:	61fb      	str	r3, [r7, #28]

	if (gyro_mode != ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF)
  404734:	7dbb      	ldrb	r3, [r7, #22]
  404736:	2b00      	cmp	r3, #0
  404738:	d005      	beq.n	404746 <get_fastest_running_odr+0xa6>
		if (gyro_odr_us < smallest_odr)
  40473a:	68fa      	ldr	r2, [r7, #12]
  40473c:	69fb      	ldr	r3, [r7, #28]
  40473e:	429a      	cmp	r2, r3
  404740:	d201      	bcs.n	404746 <get_fastest_running_odr+0xa6>
			smallest_odr = gyro_odr_us;
  404742:	68fb      	ldr	r3, [r7, #12]
  404744:	61fb      	str	r3, [r7, #28]

	*odr = smallest_odr;
  404746:	683b      	ldr	r3, [r7, #0]
  404748:	69fa      	ldr	r2, [r7, #28]
  40474a:	601a      	str	r2, [r3, #0]

	return rc;
  40474c:	69bb      	ldr	r3, [r7, #24]
}
  40474e:	4618      	mov	r0, r3
  404750:	3724      	adds	r7, #36	; 0x24
  404752:	46bd      	mov	sp, r7
  404754:	bd90      	pop	{r4, r7, pc}
  404756:	bf00      	nop
  404758:	00403931 	.word	0x00403931
  40475c:	00402b29 	.word	0x00402b29

00404760 <get_fastest_sensor>:

static enum inv_icm426xx_sensor get_fastest_sensor(struct inv_icm426xx * s)
{
  404760:	b590      	push	{r4, r7, lr}
  404762:	b089      	sub	sp, #36	; 0x24
  404764:	af00      	add	r7, sp, #0
  404766:	6078      	str	r0, [r7, #4]
	int status = 0;
  404768:	2300      	movs	r3, #0
  40476a:	61fb      	str	r3, [r7, #28]
	uint8_t accel_cfg_0_reg, gyro_cfg_0_reg;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  40476c:	f107 030f 	add.w	r3, r7, #15
  404770:	2201      	movs	r2, #1
  404772:	2150      	movs	r1, #80	; 0x50
  404774:	6878      	ldr	r0, [r7, #4]
  404776:	4c19      	ldr	r4, [pc, #100]	; (4047dc <get_fastest_sensor+0x7c>)
  404778:	47a0      	blx	r4
  40477a:	4602      	mov	r2, r0
  40477c:	69fb      	ldr	r3, [r7, #28]
  40477e:	4313      	orrs	r3, r2
  404780:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  404782:	f107 030e 	add.w	r3, r7, #14
  404786:	2201      	movs	r2, #1
  404788:	214f      	movs	r1, #79	; 0x4f
  40478a:	6878      	ldr	r0, [r7, #4]
  40478c:	4c13      	ldr	r4, [pc, #76]	; (4047dc <get_fastest_sensor+0x7c>)
  40478e:	47a0      	blx	r4
  404790:	4602      	mov	r2, r0
  404792:	69fb      	ldr	r3, [r7, #28]
  404794:	4313      	orrs	r3, r2
  404796:	61fb      	str	r3, [r7, #28]
	
	if (0 > status)
  404798:	69fb      	ldr	r3, [r7, #28]
  40479a:	2b00      	cmp	r3, #0
  40479c:	da01      	bge.n	4047a2 <get_fastest_sensor+0x42>
		return INV_ICM426XX_SENSOR_MAX; // error
  40479e:	230a      	movs	r3, #10
  4047a0:	e018      	b.n	4047d4 <get_fastest_sensor+0x74>
	
	ICM426XX_ACCEL_CONFIG0_ODR_t accel_odr = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  4047a2:	7bfb      	ldrb	r3, [r7, #15]
  4047a4:	f003 030f 	and.w	r3, r3, #15
  4047a8:	76fb      	strb	r3, [r7, #27]
	ICM426XX_GYRO_CONFIG0_ODR_t gyro_odr   = (ICM426XX_GYRO_CONFIG0_ODR_t)(gyro_cfg_0_reg & BIT_GYRO_CONFIG0_ODR_MASK);
  4047aa:	7bbb      	ldrb	r3, [r7, #14]
  4047ac:	f003 030f 	and.w	r3, r3, #15
  4047b0:	76bb      	strb	r3, [r7, #26]
	uint32_t accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(accel_odr);
  4047b2:	7efb      	ldrb	r3, [r7, #27]
  4047b4:	4618      	mov	r0, r3
  4047b6:	4b0a      	ldr	r3, [pc, #40]	; (4047e0 <get_fastest_sensor+0x80>)
  4047b8:	4798      	blx	r3
  4047ba:	6178      	str	r0, [r7, #20]
	uint32_t gyro_odr_us  = inv_icm426xx_convert_odr_bitfield_to_us(gyro_odr);
  4047bc:	7ebb      	ldrb	r3, [r7, #26]
  4047be:	4618      	mov	r0, r3
  4047c0:	4b07      	ldr	r3, [pc, #28]	; (4047e0 <get_fastest_sensor+0x80>)
  4047c2:	4798      	blx	r3
  4047c4:	6138      	str	r0, [r7, #16]

	return (accel_odr_us > gyro_odr_us) ? INV_ICM426XX_SENSOR_GYRO : INV_ICM426XX_SENSOR_ACCEL;
  4047c6:	697a      	ldr	r2, [r7, #20]
  4047c8:	693b      	ldr	r3, [r7, #16]
  4047ca:	429a      	cmp	r2, r3
  4047cc:	bf8c      	ite	hi
  4047ce:	2301      	movhi	r3, #1
  4047d0:	2300      	movls	r3, #0
  4047d2:	b2db      	uxtb	r3, r3
}
  4047d4:	4618      	mov	r0, r3
  4047d6:	3724      	adds	r7, #36	; 0x24
  4047d8:	46bd      	mov	sp, r7
  4047da:	bd90      	pop	{r4, r7, pc}
  4047dc:	00403931 	.word	0x00403931
  4047e0:	00402b29 	.word	0x00402b29

004047e4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4047e4:	b580      	push	{r7, lr}
  4047e6:	b082      	sub	sp, #8
  4047e8:	af00      	add	r7, sp, #0
  4047ea:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4047ec:	6878      	ldr	r0, [r7, #4]
  4047ee:	4b03      	ldr	r3, [pc, #12]	; (4047fc <sysclk_enable_peripheral_clock+0x18>)
  4047f0:	4798      	blx	r3
}
  4047f2:	bf00      	nop
  4047f4:	3708      	adds	r7, #8
  4047f6:	46bd      	mov	sp, r7
  4047f8:	bd80      	pop	{r7, pc}
  4047fa:	bf00      	nop
  4047fc:	00408a95 	.word	0x00408a95

00404800 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  404800:	b580      	push	{r7, lr}
  404802:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  404804:	200b      	movs	r0, #11
  404806:	4b03      	ldr	r3, [pc, #12]	; (404814 <ioport_init+0x14>)
  404808:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40480a:	200c      	movs	r0, #12
  40480c:	4b01      	ldr	r3, [pc, #4]	; (404814 <ioport_init+0x14>)
  40480e:	4798      	blx	r3
	arch_ioport_init();
}
  404810:	bf00      	nop
  404812:	bd80      	pop	{r7, pc}
  404814:	004047e5 	.word	0x004047e5

00404818 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  404818:	b480      	push	{r7}
  40481a:	b08d      	sub	sp, #52	; 0x34
  40481c:	af00      	add	r7, sp, #0
  40481e:	6078      	str	r0, [r7, #4]
  404820:	460b      	mov	r3, r1
  404822:	70fb      	strb	r3, [r7, #3]
  404824:	687b      	ldr	r3, [r7, #4]
  404826:	62fb      	str	r3, [r7, #44]	; 0x2c
  404828:	78fb      	ldrb	r3, [r7, #3]
  40482a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404830:	627b      	str	r3, [r7, #36]	; 0x24
  404832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404834:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  404836:	6a3b      	ldr	r3, [r7, #32]
  404838:	095b      	lsrs	r3, r3, #5
  40483a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40483c:	69fb      	ldr	r3, [r7, #28]
  40483e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404842:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404846:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404848:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40484a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40484e:	2b01      	cmp	r3, #1
  404850:	d109      	bne.n	404866 <ioport_set_pin_dir+0x4e>
  404852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404854:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404856:	697b      	ldr	r3, [r7, #20]
  404858:	f003 031f 	and.w	r3, r3, #31
  40485c:	2201      	movs	r2, #1
  40485e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404860:	69bb      	ldr	r3, [r7, #24]
  404862:	611a      	str	r2, [r3, #16]
  404864:	e00c      	b.n	404880 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  404866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40486a:	2b00      	cmp	r3, #0
  40486c:	d108      	bne.n	404880 <ioport_set_pin_dir+0x68>
  40486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404870:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  404872:	693b      	ldr	r3, [r7, #16]
  404874:	f003 031f 	and.w	r3, r3, #31
  404878:	2201      	movs	r2, #1
  40487a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40487c:	69bb      	ldr	r3, [r7, #24]
  40487e:	615a      	str	r2, [r3, #20]
  404880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404882:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  404884:	68fb      	ldr	r3, [r7, #12]
  404886:	f003 031f 	and.w	r3, r3, #31
  40488a:	2201      	movs	r2, #1
  40488c:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40488e:	69bb      	ldr	r3, [r7, #24]
  404890:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  404894:	bf00      	nop
  404896:	3734      	adds	r7, #52	; 0x34
  404898:	46bd      	mov	sp, r7
  40489a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40489e:	4770      	bx	lr

004048a0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4048a0:	b480      	push	{r7}
  4048a2:	b08b      	sub	sp, #44	; 0x2c
  4048a4:	af00      	add	r7, sp, #0
  4048a6:	6078      	str	r0, [r7, #4]
  4048a8:	460b      	mov	r3, r1
  4048aa:	70fb      	strb	r3, [r7, #3]
  4048ac:	687b      	ldr	r3, [r7, #4]
  4048ae:	627b      	str	r3, [r7, #36]	; 0x24
  4048b0:	78fb      	ldrb	r3, [r7, #3]
  4048b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4048b8:	61fb      	str	r3, [r7, #28]
  4048ba:	69fb      	ldr	r3, [r7, #28]
  4048bc:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4048be:	69bb      	ldr	r3, [r7, #24]
  4048c0:	095b      	lsrs	r3, r3, #5
  4048c2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4048c4:	697b      	ldr	r3, [r7, #20]
  4048c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4048ca:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4048ce:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4048d0:	613b      	str	r3, [r7, #16]

	if (level) {
  4048d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4048d6:	2b00      	cmp	r3, #0
  4048d8:	d009      	beq.n	4048ee <ioport_set_pin_level+0x4e>
  4048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4048dc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4048de:	68fb      	ldr	r3, [r7, #12]
  4048e0:	f003 031f 	and.w	r3, r3, #31
  4048e4:	2201      	movs	r2, #1
  4048e6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4048e8:	693b      	ldr	r3, [r7, #16]
  4048ea:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4048ec:	e008      	b.n	404900 <ioport_set_pin_level+0x60>
  4048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4048f0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4048f2:	68bb      	ldr	r3, [r7, #8]
  4048f4:	f003 031f 	and.w	r3, r3, #31
  4048f8:	2201      	movs	r2, #1
  4048fa:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4048fc:	693b      	ldr	r3, [r7, #16]
  4048fe:	635a      	str	r2, [r3, #52]	; 0x34
  404900:	bf00      	nop
  404902:	372c      	adds	r7, #44	; 0x2c
  404904:	46bd      	mov	sp, r7
  404906:	f85d 7b04 	ldr.w	r7, [sp], #4
  40490a:	4770      	bx	lr

0040490c <inv_board_hal_init>:

/* This variable contains the number of nested calls to disable_irq */
static uint32_t sDisableIntCount = 0;

void inv_board_hal_init(void)
{
  40490c:	b580      	push	{r7, lr}
  40490e:	af00      	add	r7, sp, #0
	/* Initialize the SAM system */
	sysclk_init();
  404910:	4b08      	ldr	r3, [pc, #32]	; (404934 <inv_board_hal_init+0x28>)
  404912:	4798      	blx	r3
	
	ioport_init();
  404914:	4b08      	ldr	r3, [pc, #32]	; (404938 <inv_board_hal_init+0x2c>)
  404916:	4798      	blx	r3
	
	/* Initialize LED0, turned off */
	ioport_set_pin_dir(PIO_PA6_IDX, IOPORT_DIR_OUTPUT);
  404918:	2101      	movs	r1, #1
  40491a:	2006      	movs	r0, #6
  40491c:	4b07      	ldr	r3, [pc, #28]	; (40493c <inv_board_hal_init+0x30>)
  40491e:	4798      	blx	r3
	ioport_set_pin_level(PIO_PA6_IDX, IOPORT_PIN_LEVEL_HIGH);
  404920:	2101      	movs	r1, #1
  404922:	2006      	movs	r0, #6
  404924:	4b06      	ldr	r3, [pc, #24]	; (404940 <inv_board_hal_init+0x34>)
  404926:	4798      	blx	r3
	
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404928:	4b06      	ldr	r3, [pc, #24]	; (404944 <inv_board_hal_init+0x38>)
  40492a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40492e:	605a      	str	r2, [r3, #4]
}
  404930:	bf00      	nop
  404932:	bd80      	pop	{r7, pc}
  404934:	00407c61 	.word	0x00407c61
  404938:	00404801 	.word	0x00404801
  40493c:	00404819 	.word	0x00404819
  404940:	004048a1 	.word	0x004048a1
  404944:	400e1450 	.word	0x400e1450

00404948 <inv_disable_irq>:

void inv_disable_irq(void)
{
  404948:	b480      	push	{r7}
  40494a:	af00      	add	r7, sp, #0
	if(sDisableIntCount == 0) {
  40494c:	4b07      	ldr	r3, [pc, #28]	; (40496c <inv_disable_irq+0x24>)
  40494e:	681b      	ldr	r3, [r3, #0]
  404950:	2b00      	cmp	r3, #0
  404952:	d100      	bne.n	404956 <inv_disable_irq+0xe>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  404954:	b672      	cpsid	i
		__disable_irq();
	}
	sDisableIntCount ++;
  404956:	4b05      	ldr	r3, [pc, #20]	; (40496c <inv_disable_irq+0x24>)
  404958:	681b      	ldr	r3, [r3, #0]
  40495a:	3301      	adds	r3, #1
  40495c:	4a03      	ldr	r2, [pc, #12]	; (40496c <inv_disable_irq+0x24>)
  40495e:	6013      	str	r3, [r2, #0]
}
  404960:	bf00      	nop
  404962:	46bd      	mov	sp, r7
  404964:	f85d 7b04 	ldr.w	r7, [sp], #4
  404968:	4770      	bx	lr
  40496a:	bf00      	nop
  40496c:	20003a84 	.word	0x20003a84

00404970 <inv_enable_irq>:

void inv_enable_irq(void)
{
  404970:	b480      	push	{r7}
  404972:	af00      	add	r7, sp, #0
	sDisableIntCount --;
  404974:	4b07      	ldr	r3, [pc, #28]	; (404994 <inv_enable_irq+0x24>)
  404976:	681b      	ldr	r3, [r3, #0]
  404978:	3b01      	subs	r3, #1
  40497a:	4a06      	ldr	r2, [pc, #24]	; (404994 <inv_enable_irq+0x24>)
  40497c:	6013      	str	r3, [r2, #0]
	if(sDisableIntCount == 0) {
  40497e:	4b05      	ldr	r3, [pc, #20]	; (404994 <inv_enable_irq+0x24>)
  404980:	681b      	ldr	r3, [r3, #0]
  404982:	2b00      	cmp	r3, #0
  404984:	d100      	bne.n	404988 <inv_enable_irq+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
  404986:	b662      	cpsie	i
		__enable_irq();
	}
}
  404988:	bf00      	nop
  40498a:	46bd      	mov	sp, r7
  40498c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404990:	4770      	bx	lr
  404992:	bf00      	nop
  404994:	20003a84 	.word	0x20003a84

00404998 <start_timer>:
#include <stdint.h>

static unsigned timer_num;

static void start_timer(void) 
{
  404998:	b580      	push	{r7, lr}
  40499a:	af00      	add	r7, sp, #0
	inv_timer_enable(timer_num);
  40499c:	4b03      	ldr	r3, [pc, #12]	; (4049ac <start_timer+0x14>)
  40499e:	681b      	ldr	r3, [r3, #0]
  4049a0:	4618      	mov	r0, r3
  4049a2:	4b03      	ldr	r3, [pc, #12]	; (4049b0 <start_timer+0x18>)
  4049a4:	4798      	blx	r3
}
  4049a6:	bf00      	nop
  4049a8:	bd80      	pop	{r7, pc}
  4049aa:	bf00      	nop
  4049ac:	20003a88 	.word	0x20003a88
  4049b0:	00406145 	.word	0x00406145

004049b4 <stop_timer>:

static void stop_timer(void) 
{
  4049b4:	b580      	push	{r7, lr}
  4049b6:	af00      	add	r7, sp, #0
	inv_timer_channel_stop(timer_num, 0);
  4049b8:	4b03      	ldr	r3, [pc, #12]	; (4049c8 <stop_timer+0x14>)
  4049ba:	681b      	ldr	r3, [r3, #0]
  4049bc:	2100      	movs	r1, #0
  4049be:	4618      	mov	r0, r3
  4049c0:	4b02      	ldr	r3, [pc, #8]	; (4049cc <stop_timer+0x18>)
  4049c2:	4798      	blx	r3
}
  4049c4:	bf00      	nop
  4049c6:	bd80      	pop	{r7, pc}
  4049c8:	20003a88 	.word	0x20003a88
  4049cc:	00406505 	.word	0x00406505

004049d0 <internal_delay>:

static void internal_delay(uint16_t us)
{
  4049d0:	b590      	push	{r4, r7, lr}
  4049d2:	b087      	sub	sp, #28
  4049d4:	af00      	add	r7, sp, #0
  4049d6:	4603      	mov	r3, r0
  4049d8:	80fb      	strh	r3, [r7, #6]
	const uint32_t start = (uint32_t)inv_timer_get_counter(timer_num);
  4049da:	4b13      	ldr	r3, [pc, #76]	; (404a28 <internal_delay+0x58>)
  4049dc:	681b      	ldr	r3, [r3, #0]
  4049de:	4618      	mov	r0, r3
  4049e0:	4b12      	ldr	r3, [pc, #72]	; (404a2c <internal_delay+0x5c>)
  4049e2:	4798      	blx	r3
  4049e4:	4603      	mov	r3, r0
  4049e6:	460c      	mov	r4, r1
  4049e8:	60fb      	str	r3, [r7, #12]

	uint32_t now, prev = 0;
  4049ea:	2300      	movs	r3, #0
  4049ec:	613b      	str	r3, [r7, #16]
	do{
		now = (uint32_t)inv_timer_get_counter(timer_num);
  4049ee:	4b0e      	ldr	r3, [pc, #56]	; (404a28 <internal_delay+0x58>)
  4049f0:	681b      	ldr	r3, [r3, #0]
  4049f2:	4618      	mov	r0, r3
  4049f4:	4b0d      	ldr	r3, [pc, #52]	; (404a2c <internal_delay+0x5c>)
  4049f6:	4798      	blx	r3
  4049f8:	4603      	mov	r3, r0
  4049fa:	460c      	mov	r4, r1
  4049fc:	617b      	str	r3, [r7, #20]

		/* handle rollover */
		if(now < prev)
  4049fe:	697a      	ldr	r2, [r7, #20]
  404a00:	693b      	ldr	r3, [r7, #16]
  404a02:	429a      	cmp	r2, r3
  404a04:	d204      	bcs.n	404a10 <internal_delay+0x40>
			now = UINT16_MAX + now;
  404a06:	697b      	ldr	r3, [r7, #20]
  404a08:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  404a0c:	33ff      	adds	r3, #255	; 0xff
  404a0e:	617b      	str	r3, [r7, #20]
		prev = now;
  404a10:	697b      	ldr	r3, [r7, #20]
  404a12:	613b      	str	r3, [r7, #16]

	}while((now - start) <= us);
  404a14:	697a      	ldr	r2, [r7, #20]
  404a16:	68fb      	ldr	r3, [r7, #12]
  404a18:	1ad2      	subs	r2, r2, r3
  404a1a:	88fb      	ldrh	r3, [r7, #6]
  404a1c:	429a      	cmp	r2, r3
  404a1e:	d9e6      	bls.n	4049ee <internal_delay+0x1e>
}
  404a20:	bf00      	nop
  404a22:	371c      	adds	r7, #28
  404a24:	46bd      	mov	sp, r7
  404a26:	bd90      	pop	{r4, r7, pc}
  404a28:	20003a88 	.word	0x20003a88
  404a2c:	004063d1 	.word	0x004063d1

00404a30 <inv_delay_init>:

int inv_delay_init(unsigned tim_num)
{
  404a30:	b580      	push	{r7, lr}
  404a32:	b082      	sub	sp, #8
  404a34:	af00      	add	r7, sp, #0
  404a36:	6078      	str	r0, [r7, #4]
	timer_num = tim_num;
  404a38:	4a05      	ldr	r2, [pc, #20]	; (404a50 <inv_delay_init+0x20>)
  404a3a:	687b      	ldr	r3, [r7, #4]
  404a3c:	6013      	str	r3, [r2, #0]
	
	/* Timer configuration at 1MHz frequency */
	return inv_timer_configure_timebase(1000000);
  404a3e:	4805      	ldr	r0, [pc, #20]	; (404a54 <inv_delay_init+0x24>)
  404a40:	4b05      	ldr	r3, [pc, #20]	; (404a58 <inv_delay_init+0x28>)
  404a42:	4798      	blx	r3
  404a44:	4603      	mov	r3, r0
}
  404a46:	4618      	mov	r0, r3
  404a48:	3708      	adds	r7, #8
  404a4a:	46bd      	mov	sp, r7
  404a4c:	bd80      	pop	{r7, pc}
  404a4e:	bf00      	nop
  404a50:	20003a88 	.word	0x20003a88
  404a54:	000f4240 	.word	0x000f4240
  404a58:	004061c5 	.word	0x004061c5

00404a5c <inv_delay_us>:

void inv_delay_us(uint32_t us)
{
  404a5c:	b580      	push	{r7, lr}
  404a5e:	b084      	sub	sp, #16
  404a60:	af00      	add	r7, sp, #0
  404a62:	6078      	str	r0, [r7, #4]
	start_timer();
  404a64:	4b18      	ldr	r3, [pc, #96]	; (404ac8 <inv_delay_us+0x6c>)
  404a66:	4798      	blx	r3

	/* in case the delay is up to UINT16_MAX */
	if(us >= UINT16_MAX) {
  404a68:	687b      	ldr	r3, [r7, #4]
  404a6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  404a6e:	4293      	cmp	r3, r2
  404a70:	d91f      	bls.n	404ab2 <inv_delay_us+0x56>
		/* go to the loop as the internal_delay function only support uint16_t argument type */
		for(uint32_t i = 0; i < (uint32_t)(us / UINT16_MAX); i++) {
  404a72:	2300      	movs	r3, #0
  404a74:	60fb      	str	r3, [r7, #12]
  404a76:	e006      	b.n	404a86 <inv_delay_us+0x2a>
			internal_delay(UINT16_MAX);
  404a78:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404a7c:	4b13      	ldr	r3, [pc, #76]	; (404acc <inv_delay_us+0x70>)
  404a7e:	4798      	blx	r3
		for(uint32_t i = 0; i < (uint32_t)(us / UINT16_MAX); i++) {
  404a80:	68fb      	ldr	r3, [r7, #12]
  404a82:	3301      	adds	r3, #1
  404a84:	60fb      	str	r3, [r7, #12]
  404a86:	687b      	ldr	r3, [r7, #4]
  404a88:	4a11      	ldr	r2, [pc, #68]	; (404ad0 <inv_delay_us+0x74>)
  404a8a:	fba2 2303 	umull	r2, r3, r2, r3
  404a8e:	0bda      	lsrs	r2, r3, #15
  404a90:	68fb      	ldr	r3, [r7, #12]
  404a92:	429a      	cmp	r2, r3
  404a94:	d8f0      	bhi.n	404a78 <inv_delay_us+0x1c>
		}
		internal_delay(us % UINT16_MAX);
  404a96:	6879      	ldr	r1, [r7, #4]
  404a98:	4b0d      	ldr	r3, [pc, #52]	; (404ad0 <inv_delay_us+0x74>)
  404a9a:	fba3 2301 	umull	r2, r3, r3, r1
  404a9e:	0bda      	lsrs	r2, r3, #15
  404aa0:	4613      	mov	r3, r2
  404aa2:	041b      	lsls	r3, r3, #16
  404aa4:	1a9b      	subs	r3, r3, r2
  404aa6:	1aca      	subs	r2, r1, r3
  404aa8:	b293      	uxth	r3, r2
  404aaa:	4618      	mov	r0, r3
  404aac:	4b07      	ldr	r3, [pc, #28]	; (404acc <inv_delay_us+0x70>)
  404aae:	4798      	blx	r3
  404ab0:	e004      	b.n	404abc <inv_delay_us+0x60>
	}
	else
		internal_delay(us);
  404ab2:	687b      	ldr	r3, [r7, #4]
  404ab4:	b29b      	uxth	r3, r3
  404ab6:	4618      	mov	r0, r3
  404ab8:	4b04      	ldr	r3, [pc, #16]	; (404acc <inv_delay_us+0x70>)
  404aba:	4798      	blx	r3

	stop_timer();
  404abc:	4b05      	ldr	r3, [pc, #20]	; (404ad4 <inv_delay_us+0x78>)
  404abe:	4798      	blx	r3
}
  404ac0:	bf00      	nop
  404ac2:	3710      	adds	r7, #16
  404ac4:	46bd      	mov	sp, r7
  404ac6:	bd80      	pop	{r7, pc}
  404ac8:	00404999 	.word	0x00404999
  404acc:	004049d1 	.word	0x004049d1
  404ad0:	80008001 	.word	0x80008001
  404ad4:	004049b5 	.word	0x004049b5

00404ad8 <inv_flash_manager_init>:
uint32_t ul_test_page_addr = FLASH_PAGE_ADDRESS_START;

/** Public functions **/

int inv_flash_manager_init(void)
{
  404ad8:	b590      	push	{r4, r7, lr}
  404ada:	b083      	sub	sp, #12
  404adc:	af00      	add	r7, sp, #0
	uint32_t rc;

	/* Lock the flash in default case */
	if (flash_is_locked(ul_test_page_addr, ul_test_page_addr+IFLASH_PAGE_SIZE-1) == 0) {
  404ade:	4b10      	ldr	r3, [pc, #64]	; (404b20 <inv_flash_manager_init+0x48>)
  404ae0:	681a      	ldr	r2, [r3, #0]
  404ae2:	4b0f      	ldr	r3, [pc, #60]	; (404b20 <inv_flash_manager_init+0x48>)
  404ae4:	681b      	ldr	r3, [r3, #0]
  404ae6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  404aea:	4619      	mov	r1, r3
  404aec:	4610      	mov	r0, r2
  404aee:	4b0d      	ldr	r3, [pc, #52]	; (404b24 <inv_flash_manager_init+0x4c>)
  404af0:	4798      	blx	r3
  404af2:	4603      	mov	r3, r0
  404af4:	2b00      	cmp	r3, #0
  404af6:	d109      	bne.n	404b0c <inv_flash_manager_init+0x34>
		flash_lock(ul_test_page_addr,
  404af8:	4b09      	ldr	r3, [pc, #36]	; (404b20 <inv_flash_manager_init+0x48>)
  404afa:	6818      	ldr	r0, [r3, #0]
  404afc:	4b08      	ldr	r3, [pc, #32]	; (404b20 <inv_flash_manager_init+0x48>)
  404afe:	681b      	ldr	r3, [r3, #0]
  404b00:	f203 11ff 	addw	r1, r3, #511	; 0x1ff
  404b04:	2300      	movs	r3, #0
  404b06:	2200      	movs	r2, #0
  404b08:	4c07      	ldr	r4, [pc, #28]	; (404b28 <inv_flash_manager_init+0x50>)
  404b0a:	47a0      	blx	r4
			ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	}

	/* Initialize flash: 6 wait states for flash writing. */
	rc = flash_init(FLASH_ACCESS_MODE_128, 6);
  404b0c:	2106      	movs	r1, #6
  404b0e:	2000      	movs	r0, #0
  404b10:	4b06      	ldr	r3, [pc, #24]	; (404b2c <inv_flash_manager_init+0x54>)
  404b12:	4798      	blx	r3
  404b14:	6078      	str	r0, [r7, #4]

	return rc;
  404b16:	687b      	ldr	r3, [r7, #4]
}
  404b18:	4618      	mov	r0, r3
  404b1a:	370c      	adds	r7, #12
  404b1c:	46bd      	mov	sp, r7
  404b1e:	bd90      	pop	{r4, r7, pc}
  404b20:	20000118 	.word	0x20000118
  404b24:	00409e95 	.word	0x00409e95
  404b28:	00409d5d 	.word	0x00409d5d
  404b2c:	00409bc1 	.word	0x00409bc1

00404b30 <inv_flash_manager_readData>:

	return rc;
}

int inv_flash_manager_readData(uint8_t* pData)
{
  404b30:	b580      	push	{r7, lr}
  404b32:	b088      	sub	sp, #32
  404b34:	af00      	add	r7, sp, #0
  404b36:	6078      	str	r0, [r7, #4]
	uint32_t *pul_test_page = (uint32_t *) ul_test_page_addr;
  404b38:	4b21      	ldr	r3, [pc, #132]	; (404bc0 <inv_flash_manager_readData+0x90>)
  404b3a:	681b      	ldr	r3, [r3, #0]
  404b3c:	60fb      	str	r3, [r7, #12]
	uint32_t FlashHeader = 0;
  404b3e:	2300      	movs	r3, #0
  404b40:	61fb      	str	r3, [r7, #28]
	int rc = 0;
  404b42:	2300      	movs	r3, #0
  404b44:	61bb      	str	r3, [r7, #24]

	/* check Header */
	for (int i = 0; i < FLASH_HEADER_SIZE; i++)
  404b46:	2300      	movs	r3, #0
  404b48:	617b      	str	r3, [r7, #20]
  404b4a:	e00e      	b.n	404b6a <inv_flash_manager_readData+0x3a>
		FlashHeader |= pul_test_page[i] << i * 8;
  404b4c:	697b      	ldr	r3, [r7, #20]
  404b4e:	009b      	lsls	r3, r3, #2
  404b50:	68fa      	ldr	r2, [r7, #12]
  404b52:	4413      	add	r3, r2
  404b54:	681a      	ldr	r2, [r3, #0]
  404b56:	697b      	ldr	r3, [r7, #20]
  404b58:	00db      	lsls	r3, r3, #3
  404b5a:	fa02 f303 	lsl.w	r3, r2, r3
  404b5e:	69fa      	ldr	r2, [r7, #28]
  404b60:	4313      	orrs	r3, r2
  404b62:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < FLASH_HEADER_SIZE; i++)
  404b64:	697b      	ldr	r3, [r7, #20]
  404b66:	3301      	adds	r3, #1
  404b68:	617b      	str	r3, [r7, #20]
  404b6a:	697b      	ldr	r3, [r7, #20]
  404b6c:	2b03      	cmp	r3, #3
  404b6e:	dded      	ble.n	404b4c <inv_flash_manager_readData+0x1c>
		
	if (FlashHeader == FLASH_HEADER) {
  404b70:	69fb      	ldr	r3, [r7, #28]
  404b72:	4a14      	ldr	r2, [pc, #80]	; (404bc4 <inv_flash_manager_readData+0x94>)
  404b74:	4293      	cmp	r3, r2
  404b76:	d114      	bne.n	404ba2 <inv_flash_manager_readData+0x72>
		for (int i = 0; i < FLASH_DATA_SIZE; i++)
  404b78:	2300      	movs	r3, #0
  404b7a:	613b      	str	r3, [r7, #16]
  404b7c:	e00d      	b.n	404b9a <inv_flash_manager_readData+0x6a>
			pData[i] = pul_test_page[i + FLASH_HEADER_SIZE];
  404b7e:	693b      	ldr	r3, [r7, #16]
  404b80:	687a      	ldr	r2, [r7, #4]
  404b82:	4413      	add	r3, r2
  404b84:	693a      	ldr	r2, [r7, #16]
  404b86:	3204      	adds	r2, #4
  404b88:	0092      	lsls	r2, r2, #2
  404b8a:	68f9      	ldr	r1, [r7, #12]
  404b8c:	440a      	add	r2, r1
  404b8e:	6812      	ldr	r2, [r2, #0]
  404b90:	b2d2      	uxtb	r2, r2
  404b92:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < FLASH_DATA_SIZE; i++)
  404b94:	693b      	ldr	r3, [r7, #16]
  404b96:	3301      	adds	r3, #1
  404b98:	613b      	str	r3, [r7, #16]
  404b9a:	693b      	ldr	r3, [r7, #16]
  404b9c:	2b53      	cmp	r3, #83	; 0x53
  404b9e:	ddee      	ble.n	404b7e <inv_flash_manager_readData+0x4e>
  404ba0:	e008      	b.n	404bb4 <inv_flash_manager_readData+0x84>
	}
	else {
		memset(pData, 0, FLASH_DATA_SIZE);
  404ba2:	2254      	movs	r2, #84	; 0x54
  404ba4:	2100      	movs	r1, #0
  404ba6:	6878      	ldr	r0, [r7, #4]
  404ba8:	4b07      	ldr	r3, [pc, #28]	; (404bc8 <inv_flash_manager_readData+0x98>)
  404baa:	4798      	blx	r3
		rc |= FLASH_HEADER_MISSING_RC;
  404bac:	69bb      	ldr	r3, [r7, #24]
  404bae:	f043 0301 	orr.w	r3, r3, #1
  404bb2:	61bb      	str	r3, [r7, #24]
	}

	return rc;
  404bb4:	69bb      	ldr	r3, [r7, #24]
}
  404bb6:	4618      	mov	r0, r3
  404bb8:	3720      	adds	r7, #32
  404bba:	46bd      	mov	sp, r7
  404bbc:	bd80      	pop	{r7, pc}
  404bbe:	bf00      	nop
  404bc0:	20000118 	.word	0x20000118
  404bc4:	0a0b0b0a 	.word	0x0a0b0b0a
  404bc8:	0040fa3d 	.word	0x0040fa3d

00404bcc <inv_flash_manager_writeData>:


int inv_flash_manager_writeData(const uint8_t* pData)
{
  404bcc:	b590      	push	{r4, r7, lr}
  404bce:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
  404bd2:	af00      	add	r7, sp, #0
  404bd4:	1d3b      	adds	r3, r7, #4
  404bd6:	6018      	str	r0, [r3, #0]
	uint32_t rc;
	uint32_t ul_idx;
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)] = {0};
  404bd8:	f107 0308 	add.w	r3, r7, #8
  404bdc:	4618      	mov	r0, r3
  404bde:	f44f 7300 	mov.w	r3, #512	; 0x200
  404be2:	461a      	mov	r2, r3
  404be4:	2100      	movs	r1, #0
  404be6:	4b45      	ldr	r3, [pc, #276]	; (404cfc <inv_flash_manager_writeData+0x130>)
  404be8:	4798      	blx	r3

	/* Unlock page */
	rc = flash_unlock(ul_test_page_addr,
  404bea:	4b45      	ldr	r3, [pc, #276]	; (404d00 <inv_flash_manager_writeData+0x134>)
  404bec:	6818      	ldr	r0, [r3, #0]
  404bee:	4b44      	ldr	r3, [pc, #272]	; (404d00 <inv_flash_manager_writeData+0x134>)
  404bf0:	681b      	ldr	r3, [r3, #0]
  404bf2:	f203 11ff 	addw	r1, r3, #511	; 0x1ff
  404bf6:	2300      	movs	r3, #0
  404bf8:	2200      	movs	r2, #0
  404bfa:	4c42      	ldr	r4, [pc, #264]	; (404d04 <inv_flash_manager_writeData+0x138>)
  404bfc:	47a0      	blx	r4
  404bfe:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
			ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (rc != FLASH_RC_OK) {
  404c02:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404c06:	2b00      	cmp	r3, #0
  404c08:	d15d      	bne.n	404cc6 <inv_flash_manager_writeData+0xfa>
		goto LOCK_FLASH;
	}
		
	/* Write Header */
	for (ul_idx = 0; ul_idx < FLASH_HEADER_SIZE; ul_idx++)
  404c0a:	2300      	movs	r3, #0
  404c0c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  404c10:	e016      	b.n	404c40 <inv_flash_manager_writeData+0x74>
		ul_page_buffer[ul_idx] = (FLASH_HEADER & (0xFF << ul_idx * 8)) >> ul_idx * 8;
  404c12:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c16:	00db      	lsls	r3, r3, #3
  404c18:	22ff      	movs	r2, #255	; 0xff
  404c1a:	409a      	lsls	r2, r3
  404c1c:	4b3a      	ldr	r3, [pc, #232]	; (404d08 <inv_flash_manager_writeData+0x13c>)
  404c1e:	4013      	ands	r3, r2
  404c20:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
  404c24:	00d2      	lsls	r2, r2, #3
  404c26:	4113      	asrs	r3, r2
  404c28:	4619      	mov	r1, r3
  404c2a:	f107 0308 	add.w	r3, r7, #8
  404c2e:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
  404c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_idx = 0; ul_idx < FLASH_HEADER_SIZE; ul_idx++)
  404c36:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c3a:	3301      	adds	r3, #1
  404c3c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  404c40:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c44:	2b03      	cmp	r3, #3
  404c46:	d9e4      	bls.n	404c12 <inv_flash_manager_writeData+0x46>

	/* Write page */
	for (ul_idx = 0; ul_idx < FLASH_DATA_SIZE; ul_idx++) {
  404c48:	2300      	movs	r3, #0
  404c4a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  404c4e:	e014      	b.n	404c7a <inv_flash_manager_writeData+0xae>
		ul_page_buffer[ul_idx + FLASH_HEADER_SIZE] = *pData;
  404c50:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c54:	1d1a      	adds	r2, r3, #4
  404c56:	1d3b      	adds	r3, r7, #4
  404c58:	681b      	ldr	r3, [r3, #0]
  404c5a:	781b      	ldrb	r3, [r3, #0]
  404c5c:	4619      	mov	r1, r3
  404c5e:	f107 0308 	add.w	r3, r7, #8
  404c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pData ++;
  404c66:	1d3b      	adds	r3, r7, #4
  404c68:	1d3a      	adds	r2, r7, #4
  404c6a:	6812      	ldr	r2, [r2, #0]
  404c6c:	3201      	adds	r2, #1
  404c6e:	601a      	str	r2, [r3, #0]
	for (ul_idx = 0; ul_idx < FLASH_DATA_SIZE; ul_idx++) {
  404c70:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c74:	3301      	adds	r3, #1
  404c76:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  404c7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c7e:	2b53      	cmp	r3, #83	; 0x53
  404c80:	d9e6      	bls.n	404c50 <inv_flash_manager_writeData+0x84>
	}

	/* The EWP command is not supported for non-8KByte sectors in all devices
	 *  SAM4 series, so an erase command is requried before the write operation.
	 */
	rc |= flash_erase_sector(ul_test_page_addr);
  404c82:	4b1f      	ldr	r3, [pc, #124]	; (404d00 <inv_flash_manager_writeData+0x134>)
  404c84:	681b      	ldr	r3, [r3, #0]
  404c86:	4618      	mov	r0, r3
  404c88:	4b20      	ldr	r3, [pc, #128]	; (404d0c <inv_flash_manager_writeData+0x140>)
  404c8a:	4798      	blx	r3
  404c8c:	4602      	mov	r2, r0
  404c8e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404c92:	4313      	orrs	r3, r2
  404c94:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	if (rc != FLASH_RC_OK) {
  404c98:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404c9c:	2b00      	cmp	r3, #0
  404c9e:	d114      	bne.n	404cca <inv_flash_manager_writeData+0xfe>
		goto LOCK_FLASH;
	}

	rc |= flash_write(ul_test_page_addr, ul_page_buffer,
  404ca0:	4b17      	ldr	r3, [pc, #92]	; (404d00 <inv_flash_manager_writeData+0x134>)
  404ca2:	6818      	ldr	r0, [r3, #0]
  404ca4:	f107 0108 	add.w	r1, r7, #8
  404ca8:	2300      	movs	r3, #0
  404caa:	f44f 7200 	mov.w	r2, #512	; 0x200
  404cae:	4c18      	ldr	r4, [pc, #96]	; (404d10 <inv_flash_manager_writeData+0x144>)
  404cb0:	47a0      	blx	r4
  404cb2:	4602      	mov	r2, r0
  404cb4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404cb8:	4313      	orrs	r3, r2
  404cba:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		IFLASH_PAGE_SIZE, 0);

	if (rc != FLASH_RC_OK) {
  404cbe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404cc2:	2b00      	cmp	r3, #0
  404cc4:	e002      	b.n	404ccc <inv_flash_manager_writeData+0x100>
		goto LOCK_FLASH;
  404cc6:	bf00      	nop
  404cc8:	e000      	b.n	404ccc <inv_flash_manager_writeData+0x100>
		goto LOCK_FLASH;
  404cca:	bf00      	nop
		goto LOCK_FLASH;
	}

LOCK_FLASH :
	rc |= flash_lock(ul_test_page_addr,
  404ccc:	4b0c      	ldr	r3, [pc, #48]	; (404d00 <inv_flash_manager_writeData+0x134>)
  404cce:	6818      	ldr	r0, [r3, #0]
  404cd0:	4b0b      	ldr	r3, [pc, #44]	; (404d00 <inv_flash_manager_writeData+0x134>)
  404cd2:	681b      	ldr	r3, [r3, #0]
  404cd4:	f203 11ff 	addw	r1, r3, #511	; 0x1ff
  404cd8:	2300      	movs	r3, #0
  404cda:	2200      	movs	r2, #0
  404cdc:	4c0d      	ldr	r4, [pc, #52]	; (404d14 <inv_flash_manager_writeData+0x148>)
  404cde:	47a0      	blx	r4
  404ce0:	4602      	mov	r2, r0
  404ce2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404ce6:	4313      	orrs	r3, r2
  404ce8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
			ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);

	return rc;
  404cec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404cf0:	4618      	mov	r0, r3
  404cf2:	f507 7705 	add.w	r7, r7, #532	; 0x214
  404cf6:	46bd      	mov	sp, r7
  404cf8:	bd90      	pop	{r4, r7, pc}
  404cfa:	bf00      	nop
  404cfc:	0040fa3d 	.word	0x0040fa3d
  404d00:	20000118 	.word	0x20000118
  404d04:	00409df9 	.word	0x00409df9
  404d08:	0a0b0b0a 	.word	0x0a0b0b0a
  404d0c:	00409be9 	.word	0x00409be9
  404d10:	00409c29 	.word	0x00409c29
  404d14:	00409d5d 	.word	0x00409d5d

00404d18 <inv_gpio_sensor_irq_init>:
	return 0;
}

void inv_gpio_sensor_irq_init(unsigned pin_num,
		void (*interrupt_cb)(void * context, unsigned pin_num), void * context)
{
  404d18:	b5b0      	push	{r4, r5, r7, lr}
  404d1a:	b086      	sub	sp, #24
  404d1c:	af02      	add	r7, sp, #8
  404d1e:	60f8      	str	r0, [r7, #12]
  404d20:	60b9      	str	r1, [r7, #8]
  404d22:	607a      	str	r2, [r7, #4]
	if(pin_num >= INV_GPIO_MAX)
  404d24:	68fb      	ldr	r3, [r7, #12]
  404d26:	2b05      	cmp	r3, #5
  404d28:	f200 809c 	bhi.w	404e64 <inv_gpio_sensor_irq_init+0x14c>
		return;
	
	gm[pin_num].callback = interrupt_cb;
  404d2c:	494f      	ldr	r1, [pc, #316]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404d2e:	68fa      	ldr	r2, [r7, #12]
  404d30:	4613      	mov	r3, r2
  404d32:	00db      	lsls	r3, r3, #3
  404d34:	4413      	add	r3, r2
  404d36:	009b      	lsls	r3, r3, #2
  404d38:	440b      	add	r3, r1
  404d3a:	331c      	adds	r3, #28
  404d3c:	68ba      	ldr	r2, [r7, #8]
  404d3e:	601a      	str	r2, [r3, #0]
	gm[pin_num].context = context;
  404d40:	494a      	ldr	r1, [pc, #296]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404d42:	68fa      	ldr	r2, [r7, #12]
  404d44:	4613      	mov	r3, r2
  404d46:	00db      	lsls	r3, r3, #3
  404d48:	4413      	add	r3, r2
  404d4a:	009b      	lsls	r3, r3, #2
  404d4c:	440b      	add	r3, r1
  404d4e:	3320      	adds	r3, #32
  404d50:	687a      	ldr	r2, [r7, #4]
  404d52:	601a      	str	r2, [r3, #0]
	
	pmc_enable_periph_clk(gm[pin_num].pio_id);
  404d54:	4945      	ldr	r1, [pc, #276]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404d56:	68fa      	ldr	r2, [r7, #12]
  404d58:	4613      	mov	r3, r2
  404d5a:	00db      	lsls	r3, r3, #3
  404d5c:	4413      	add	r3, r2
  404d5e:	009b      	lsls	r3, r3, #2
  404d60:	440b      	add	r3, r1
  404d62:	3304      	adds	r3, #4
  404d64:	681b      	ldr	r3, [r3, #0]
  404d66:	4618      	mov	r0, r3
  404d68:	4b41      	ldr	r3, [pc, #260]	; (404e70 <inv_gpio_sensor_irq_init+0x158>)
  404d6a:	4798      	blx	r3
	
	pio_configure(gm[pin_num].p_pio, gm[pin_num].pio_type, gm[pin_num].pio_mask, 
  404d6c:	493f      	ldr	r1, [pc, #252]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404d6e:	68fa      	ldr	r2, [r7, #12]
  404d70:	4613      	mov	r3, r2
  404d72:	00db      	lsls	r3, r3, #3
  404d74:	4413      	add	r3, r2
  404d76:	009b      	lsls	r3, r3, #2
  404d78:	440b      	add	r3, r1
  404d7a:	6818      	ldr	r0, [r3, #0]
  404d7c:	493b      	ldr	r1, [pc, #236]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404d7e:	68fa      	ldr	r2, [r7, #12]
  404d80:	4613      	mov	r3, r2
  404d82:	00db      	lsls	r3, r3, #3
  404d84:	4413      	add	r3, r2
  404d86:	009b      	lsls	r3, r3, #2
  404d88:	440b      	add	r3, r1
  404d8a:	3310      	adds	r3, #16
  404d8c:	681c      	ldr	r4, [r3, #0]
  404d8e:	4937      	ldr	r1, [pc, #220]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404d90:	68fa      	ldr	r2, [r7, #12]
  404d92:	4613      	mov	r3, r2
  404d94:	00db      	lsls	r3, r3, #3
  404d96:	4413      	add	r3, r2
  404d98:	009b      	lsls	r3, r3, #2
  404d9a:	440b      	add	r3, r1
  404d9c:	330c      	adds	r3, #12
  404d9e:	681d      	ldr	r5, [r3, #0]
  404da0:	4932      	ldr	r1, [pc, #200]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404da2:	68fa      	ldr	r2, [r7, #12]
  404da4:	4613      	mov	r3, r2
  404da6:	00db      	lsls	r3, r3, #3
  404da8:	4413      	add	r3, r2
  404daa:	009b      	lsls	r3, r3, #2
  404dac:	440b      	add	r3, r1
  404dae:	3314      	adds	r3, #20
  404db0:	681b      	ldr	r3, [r3, #0]
  404db2:	462a      	mov	r2, r5
  404db4:	4621      	mov	r1, r4
  404db6:	4c2f      	ldr	r4, [pc, #188]	; (404e74 <inv_gpio_sensor_irq_init+0x15c>)
  404db8:	47a0      	blx	r4
			 gm[pin_num].pio_attributes);
	
	pio_handler_set(gm[pin_num].p_pio, gm[pin_num].pio_id, gm[pin_num].pio_mask, 
  404dba:	492c      	ldr	r1, [pc, #176]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404dbc:	68fa      	ldr	r2, [r7, #12]
  404dbe:	4613      	mov	r3, r2
  404dc0:	00db      	lsls	r3, r3, #3
  404dc2:	4413      	add	r3, r2
  404dc4:	009b      	lsls	r3, r3, #2
  404dc6:	440b      	add	r3, r1
  404dc8:	6818      	ldr	r0, [r3, #0]
  404dca:	4928      	ldr	r1, [pc, #160]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404dcc:	68fa      	ldr	r2, [r7, #12]
  404dce:	4613      	mov	r3, r2
  404dd0:	00db      	lsls	r3, r3, #3
  404dd2:	4413      	add	r3, r2
  404dd4:	009b      	lsls	r3, r3, #2
  404dd6:	440b      	add	r3, r1
  404dd8:	3304      	adds	r3, #4
  404dda:	681c      	ldr	r4, [r3, #0]
  404ddc:	4923      	ldr	r1, [pc, #140]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404dde:	68fa      	ldr	r2, [r7, #12]
  404de0:	4613      	mov	r3, r2
  404de2:	00db      	lsls	r3, r3, #3
  404de4:	4413      	add	r3, r2
  404de6:	009b      	lsls	r3, r3, #2
  404de8:	440b      	add	r3, r1
  404dea:	330c      	adds	r3, #12
  404dec:	681d      	ldr	r5, [r3, #0]
  404dee:	491f      	ldr	r1, [pc, #124]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404df0:	68fa      	ldr	r2, [r7, #12]
  404df2:	4613      	mov	r3, r2
  404df4:	00db      	lsls	r3, r3, #3
  404df6:	4413      	add	r3, r2
  404df8:	009b      	lsls	r3, r3, #2
  404dfa:	440b      	add	r3, r1
  404dfc:	3314      	adds	r3, #20
  404dfe:	681a      	ldr	r2, [r3, #0]
  404e00:	4b1d      	ldr	r3, [pc, #116]	; (404e78 <inv_gpio_sensor_irq_init+0x160>)
  404e02:	9300      	str	r3, [sp, #0]
  404e04:	4613      	mov	r3, r2
  404e06:	462a      	mov	r2, r5
  404e08:	4621      	mov	r1, r4
  404e0a:	4c1c      	ldr	r4, [pc, #112]	; (404e7c <inv_gpio_sensor_irq_init+0x164>)
  404e0c:	47a0      	blx	r4
			gm[pin_num].pio_attributes, gpio_common_callback);
	
	pio_enable_interrupt(gm[pin_num].p_pio, gm[pin_num].pio_mask);
  404e0e:	4917      	ldr	r1, [pc, #92]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404e10:	68fa      	ldr	r2, [r7, #12]
  404e12:	4613      	mov	r3, r2
  404e14:	00db      	lsls	r3, r3, #3
  404e16:	4413      	add	r3, r2
  404e18:	009b      	lsls	r3, r3, #2
  404e1a:	440b      	add	r3, r1
  404e1c:	6818      	ldr	r0, [r3, #0]
  404e1e:	4913      	ldr	r1, [pc, #76]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404e20:	68fa      	ldr	r2, [r7, #12]
  404e22:	4613      	mov	r3, r2
  404e24:	00db      	lsls	r3, r3, #3
  404e26:	4413      	add	r3, r2
  404e28:	009b      	lsls	r3, r3, #2
  404e2a:	440b      	add	r3, r1
  404e2c:	330c      	adds	r3, #12
  404e2e:	681b      	ldr	r3, [r3, #0]
  404e30:	4619      	mov	r1, r3
  404e32:	4b13      	ldr	r3, [pc, #76]	; (404e80 <inv_gpio_sensor_irq_init+0x168>)
  404e34:	4798      	blx	r3
	
	pio_handler_set_priority(gm[pin_num].p_pio, gm[pin_num].pio_irqn, 0);// TODO: make the priority configurable
  404e36:	490d      	ldr	r1, [pc, #52]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404e38:	68fa      	ldr	r2, [r7, #12]
  404e3a:	4613      	mov	r3, r2
  404e3c:	00db      	lsls	r3, r3, #3
  404e3e:	4413      	add	r3, r2
  404e40:	009b      	lsls	r3, r3, #2
  404e42:	440b      	add	r3, r1
  404e44:	6818      	ldr	r0, [r3, #0]
  404e46:	4909      	ldr	r1, [pc, #36]	; (404e6c <inv_gpio_sensor_irq_init+0x154>)
  404e48:	68fa      	ldr	r2, [r7, #12]
  404e4a:	4613      	mov	r3, r2
  404e4c:	00db      	lsls	r3, r3, #3
  404e4e:	4413      	add	r3, r2
  404e50:	009b      	lsls	r3, r3, #2
  404e52:	440b      	add	r3, r1
  404e54:	3318      	adds	r3, #24
  404e56:	f993 3000 	ldrsb.w	r3, [r3]
  404e5a:	2200      	movs	r2, #0
  404e5c:	4619      	mov	r1, r3
  404e5e:	4b09      	ldr	r3, [pc, #36]	; (404e84 <inv_gpio_sensor_irq_init+0x16c>)
  404e60:	4798      	blx	r3
  404e62:	e000      	b.n	404e66 <inv_gpio_sensor_irq_init+0x14e>
		return;
  404e64:	bf00      	nop
}
  404e66:	3710      	adds	r7, #16
  404e68:	46bd      	mov	sp, r7
  404e6a:	bdb0      	pop	{r4, r5, r7, pc}
  404e6c:	2000011c 	.word	0x2000011c
  404e70:	00408a95 	.word	0x00408a95
  404e74:	004083ad 	.word	0x004083ad
  404e78:	00404e89 	.word	0x00404e89
  404e7c:	004086e5 	.word	0x004086e5
  404e80:	004084d9 	.word	0x004084d9
  404e84:	004087b5 	.word	0x004087b5

00404e88 <gpio_common_callback>:

static void gpio_common_callback(const uint32_t id, const uint32_t index)
{
  404e88:	b590      	push	{r4, r7, lr}
  404e8a:	b085      	sub	sp, #20
  404e8c:	af00      	add	r7, sp, #0
  404e8e:	6078      	str	r0, [r7, #4]
  404e90:	6039      	str	r1, [r7, #0]
	for(unsigned i=0; i<sizeof(gm)/sizeof(gm[0]); i++) {
  404e92:	2300      	movs	r3, #0
  404e94:	60fb      	str	r3, [r7, #12]
  404e96:	e03b      	b.n	404f10 <gpio_common_callback+0x88>
		if((gm[i].pio_id == id) && (gm[i].pio_mask == index)) {
  404e98:	4922      	ldr	r1, [pc, #136]	; (404f24 <gpio_common_callback+0x9c>)
  404e9a:	68fa      	ldr	r2, [r7, #12]
  404e9c:	4613      	mov	r3, r2
  404e9e:	00db      	lsls	r3, r3, #3
  404ea0:	4413      	add	r3, r2
  404ea2:	009b      	lsls	r3, r3, #2
  404ea4:	440b      	add	r3, r1
  404ea6:	3304      	adds	r3, #4
  404ea8:	681a      	ldr	r2, [r3, #0]
  404eaa:	687b      	ldr	r3, [r7, #4]
  404eac:	429a      	cmp	r2, r3
  404eae:	d12c      	bne.n	404f0a <gpio_common_callback+0x82>
  404eb0:	491c      	ldr	r1, [pc, #112]	; (404f24 <gpio_common_callback+0x9c>)
  404eb2:	68fa      	ldr	r2, [r7, #12]
  404eb4:	4613      	mov	r3, r2
  404eb6:	00db      	lsls	r3, r3, #3
  404eb8:	4413      	add	r3, r2
  404eba:	009b      	lsls	r3, r3, #2
  404ebc:	440b      	add	r3, r1
  404ebe:	330c      	adds	r3, #12
  404ec0:	681a      	ldr	r2, [r3, #0]
  404ec2:	683b      	ldr	r3, [r7, #0]
  404ec4:	429a      	cmp	r2, r3
  404ec6:	d120      	bne.n	404f0a <gpio_common_callback+0x82>
			if(gm[i].callback)
  404ec8:	4916      	ldr	r1, [pc, #88]	; (404f24 <gpio_common_callback+0x9c>)
  404eca:	68fa      	ldr	r2, [r7, #12]
  404ecc:	4613      	mov	r3, r2
  404ece:	00db      	lsls	r3, r3, #3
  404ed0:	4413      	add	r3, r2
  404ed2:	009b      	lsls	r3, r3, #2
  404ed4:	440b      	add	r3, r1
  404ed6:	331c      	adds	r3, #28
  404ed8:	681b      	ldr	r3, [r3, #0]
  404eda:	2b00      	cmp	r3, #0
  404edc:	d01c      	beq.n	404f18 <gpio_common_callback+0x90>
				gm[i].callback(gm[i].context, i);
  404ede:	4911      	ldr	r1, [pc, #68]	; (404f24 <gpio_common_callback+0x9c>)
  404ee0:	68fa      	ldr	r2, [r7, #12]
  404ee2:	4613      	mov	r3, r2
  404ee4:	00db      	lsls	r3, r3, #3
  404ee6:	4413      	add	r3, r2
  404ee8:	009b      	lsls	r3, r3, #2
  404eea:	440b      	add	r3, r1
  404eec:	331c      	adds	r3, #28
  404eee:	681c      	ldr	r4, [r3, #0]
  404ef0:	490c      	ldr	r1, [pc, #48]	; (404f24 <gpio_common_callback+0x9c>)
  404ef2:	68fa      	ldr	r2, [r7, #12]
  404ef4:	4613      	mov	r3, r2
  404ef6:	00db      	lsls	r3, r3, #3
  404ef8:	4413      	add	r3, r2
  404efa:	009b      	lsls	r3, r3, #2
  404efc:	440b      	add	r3, r1
  404efe:	3320      	adds	r3, #32
  404f00:	681b      	ldr	r3, [r3, #0]
  404f02:	68f9      	ldr	r1, [r7, #12]
  404f04:	4618      	mov	r0, r3
  404f06:	47a0      	blx	r4
			break;
  404f08:	e006      	b.n	404f18 <gpio_common_callback+0x90>
	for(unsigned i=0; i<sizeof(gm)/sizeof(gm[0]); i++) {
  404f0a:	68fb      	ldr	r3, [r7, #12]
  404f0c:	3301      	adds	r3, #1
  404f0e:	60fb      	str	r3, [r7, #12]
  404f10:	68fb      	ldr	r3, [r7, #12]
  404f12:	2b05      	cmp	r3, #5
  404f14:	d9c0      	bls.n	404e98 <gpio_common_callback+0x10>
		}
	}
  404f16:	e000      	b.n	404f1a <gpio_common_callback+0x92>
			break;
  404f18:	bf00      	nop
  404f1a:	bf00      	nop
  404f1c:	3714      	adds	r7, #20
  404f1e:	46bd      	mov	sp, r7
  404f20:	bd90      	pop	{r4, r7, pc}
  404f22:	bf00      	nop
  404f24:	2000011c 	.word	0x2000011c

00404f28 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  404f28:	b480      	push	{r7}
  404f2a:	b083      	sub	sp, #12
  404f2c:	af00      	add	r7, sp, #0
  404f2e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404f30:	687b      	ldr	r3, [r7, #4]
  404f32:	2b07      	cmp	r3, #7
  404f34:	d825      	bhi.n	404f82 <osc_get_rate+0x5a>
  404f36:	a201      	add	r2, pc, #4	; (adr r2, 404f3c <osc_get_rate+0x14>)
  404f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404f3c:	00404f5d 	.word	0x00404f5d
  404f40:	00404f63 	.word	0x00404f63
  404f44:	00404f69 	.word	0x00404f69
  404f48:	00404f6f 	.word	0x00404f6f
  404f4c:	00404f73 	.word	0x00404f73
  404f50:	00404f77 	.word	0x00404f77
  404f54:	00404f7b 	.word	0x00404f7b
  404f58:	00404f7f 	.word	0x00404f7f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  404f5c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404f60:	e010      	b.n	404f84 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  404f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404f66:	e00d      	b.n	404f84 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  404f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404f6c:	e00a      	b.n	404f84 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  404f6e:	4b08      	ldr	r3, [pc, #32]	; (404f90 <osc_get_rate+0x68>)
  404f70:	e008      	b.n	404f84 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  404f72:	4b08      	ldr	r3, [pc, #32]	; (404f94 <osc_get_rate+0x6c>)
  404f74:	e006      	b.n	404f84 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  404f76:	4b08      	ldr	r3, [pc, #32]	; (404f98 <osc_get_rate+0x70>)
  404f78:	e004      	b.n	404f84 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  404f7a:	2300      	movs	r3, #0
  404f7c:	e002      	b.n	404f84 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  404f7e:	2300      	movs	r3, #0
  404f80:	e000      	b.n	404f84 <osc_get_rate+0x5c>
#endif
	}

	return 0;
  404f82:	2300      	movs	r3, #0
}
  404f84:	4618      	mov	r0, r3
  404f86:	370c      	adds	r7, #12
  404f88:	46bd      	mov	sp, r7
  404f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f8e:	4770      	bx	lr
  404f90:	007a1200 	.word	0x007a1200
  404f94:	00f42400 	.word	0x00f42400
  404f98:	016e3600 	.word	0x016e3600

00404f9c <sysclk_get_main_hz>:
{
  404f9c:	b580      	push	{r7, lr}
  404f9e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  404fa0:	2001      	movs	r0, #1
  404fa2:	4b04      	ldr	r3, [pc, #16]	; (404fb4 <sysclk_get_main_hz+0x18>)
  404fa4:	4798      	blx	r3
  404fa6:	4602      	mov	r2, r0
  404fa8:	f640 634e 	movw	r3, #3662	; 0xe4e
  404fac:	fb03 f302 	mul.w	r3, r3, r2
}
  404fb0:	4618      	mov	r0, r3
  404fb2:	bd80      	pop	{r7, pc}
  404fb4:	00404f29 	.word	0x00404f29

00404fb8 <sysclk_get_peripheral_hz>:
{
  404fb8:	b580      	push	{r7, lr}
  404fba:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  404fbc:	4b02      	ldr	r3, [pc, #8]	; (404fc8 <sysclk_get_peripheral_hz+0x10>)
  404fbe:	4798      	blx	r3
  404fc0:	4603      	mov	r3, r0
}
  404fc2:	4618      	mov	r0, r3
  404fc4:	bd80      	pop	{r7, pc}
  404fc6:	bf00      	nop
  404fc8:	00404f9d 	.word	0x00404f9d

00404fcc <ioport_disable_pin>:
{
  404fcc:	b480      	push	{r7}
  404fce:	b089      	sub	sp, #36	; 0x24
  404fd0:	af00      	add	r7, sp, #0
  404fd2:	6078      	str	r0, [r7, #4]
  404fd4:	687b      	ldr	r3, [r7, #4]
  404fd6:	61fb      	str	r3, [r7, #28]
  404fd8:	69fb      	ldr	r3, [r7, #28]
  404fda:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  404fdc:	69bb      	ldr	r3, [r7, #24]
  404fde:	095a      	lsrs	r2, r3, #5
  404fe0:	69fb      	ldr	r3, [r7, #28]
  404fe2:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404fe4:	697b      	ldr	r3, [r7, #20]
  404fe6:	f003 031f 	and.w	r3, r3, #31
  404fea:	2101      	movs	r1, #1
  404fec:	fa01 f303 	lsl.w	r3, r1, r3
  404ff0:	613a      	str	r2, [r7, #16]
  404ff2:	60fb      	str	r3, [r7, #12]
  404ff4:	693b      	ldr	r3, [r7, #16]
  404ff6:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404ff8:	68bb      	ldr	r3, [r7, #8]
  404ffa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404ffe:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405002:	025b      	lsls	r3, r3, #9
  405004:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405006:	68fb      	ldr	r3, [r7, #12]
  405008:	6053      	str	r3, [r2, #4]
}
  40500a:	bf00      	nop
  40500c:	3724      	adds	r7, #36	; 0x24
  40500e:	46bd      	mov	sp, r7
  405010:	f85d 7b04 	ldr.w	r7, [sp], #4
  405014:	4770      	bx	lr

00405016 <ioport_set_pin_mode>:
{
  405016:	b480      	push	{r7}
  405018:	b08d      	sub	sp, #52	; 0x34
  40501a:	af00      	add	r7, sp, #0
  40501c:	6078      	str	r0, [r7, #4]
  40501e:	6039      	str	r1, [r7, #0]
  405020:	687b      	ldr	r3, [r7, #4]
  405022:	62fb      	str	r3, [r7, #44]	; 0x2c
  405024:	683b      	ldr	r3, [r7, #0]
  405026:	62bb      	str	r3, [r7, #40]	; 0x28
  405028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40502a:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40502e:	095a      	lsrs	r2, r3, #5
  405030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405032:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  405034:	6a3b      	ldr	r3, [r7, #32]
  405036:	f003 031f 	and.w	r3, r3, #31
  40503a:	2101      	movs	r1, #1
  40503c:	fa01 f303 	lsl.w	r3, r1, r3
  405040:	61fa      	str	r2, [r7, #28]
  405042:	61bb      	str	r3, [r7, #24]
  405044:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405046:	617b      	str	r3, [r7, #20]
  405048:	69fb      	ldr	r3, [r7, #28]
  40504a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40504c:	693b      	ldr	r3, [r7, #16]
  40504e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405052:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405056:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  405058:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  40505a:	697b      	ldr	r3, [r7, #20]
  40505c:	f003 0308 	and.w	r3, r3, #8
  405060:	2b00      	cmp	r3, #0
  405062:	d003      	beq.n	40506c <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  405064:	68fb      	ldr	r3, [r7, #12]
  405066:	69ba      	ldr	r2, [r7, #24]
  405068:	665a      	str	r2, [r3, #100]	; 0x64
  40506a:	e002      	b.n	405072 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  40506c:	68fb      	ldr	r3, [r7, #12]
  40506e:	69ba      	ldr	r2, [r7, #24]
  405070:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  405072:	697b      	ldr	r3, [r7, #20]
  405074:	f003 0310 	and.w	r3, r3, #16
  405078:	2b00      	cmp	r3, #0
  40507a:	d004      	beq.n	405086 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40507c:	68fb      	ldr	r3, [r7, #12]
  40507e:	69ba      	ldr	r2, [r7, #24]
  405080:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  405084:	e003      	b.n	40508e <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  405086:	68fb      	ldr	r3, [r7, #12]
  405088:	69ba      	ldr	r2, [r7, #24]
  40508a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40508e:	697b      	ldr	r3, [r7, #20]
  405090:	f003 0320 	and.w	r3, r3, #32
  405094:	2b00      	cmp	r3, #0
  405096:	d003      	beq.n	4050a0 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  405098:	68fb      	ldr	r3, [r7, #12]
  40509a:	69ba      	ldr	r2, [r7, #24]
  40509c:	651a      	str	r2, [r3, #80]	; 0x50
  40509e:	e002      	b.n	4050a6 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  4050a0:	68fb      	ldr	r3, [r7, #12]
  4050a2:	69ba      	ldr	r2, [r7, #24]
  4050a4:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4050a6:	697b      	ldr	r3, [r7, #20]
  4050a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4050ac:	2b00      	cmp	r3, #0
  4050ae:	d003      	beq.n	4050b8 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4050b0:	68fb      	ldr	r3, [r7, #12]
  4050b2:	69ba      	ldr	r2, [r7, #24]
  4050b4:	621a      	str	r2, [r3, #32]
  4050b6:	e002      	b.n	4050be <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  4050b8:	68fb      	ldr	r3, [r7, #12]
  4050ba:	69ba      	ldr	r2, [r7, #24]
  4050bc:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4050be:	697b      	ldr	r3, [r7, #20]
  4050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4050c4:	2b00      	cmp	r3, #0
  4050c6:	d004      	beq.n	4050d2 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  4050c8:	68fb      	ldr	r3, [r7, #12]
  4050ca:	69ba      	ldr	r2, [r7, #24]
  4050cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4050d0:	e003      	b.n	4050da <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  4050d2:	68fb      	ldr	r3, [r7, #12]
  4050d4:	69ba      	ldr	r2, [r7, #24]
  4050d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4050da:	697b      	ldr	r3, [r7, #20]
  4050dc:	f003 0301 	and.w	r3, r3, #1
  4050e0:	2b00      	cmp	r3, #0
  4050e2:	d006      	beq.n	4050f2 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  4050e4:	68fb      	ldr	r3, [r7, #12]
  4050e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4050e8:	69bb      	ldr	r3, [r7, #24]
  4050ea:	431a      	orrs	r2, r3
  4050ec:	68fb      	ldr	r3, [r7, #12]
  4050ee:	671a      	str	r2, [r3, #112]	; 0x70
  4050f0:	e006      	b.n	405100 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  4050f2:	68fb      	ldr	r3, [r7, #12]
  4050f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4050f6:	69bb      	ldr	r3, [r7, #24]
  4050f8:	43db      	mvns	r3, r3
  4050fa:	401a      	ands	r2, r3
  4050fc:	68fb      	ldr	r3, [r7, #12]
  4050fe:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  405100:	697b      	ldr	r3, [r7, #20]
  405102:	f003 0302 	and.w	r3, r3, #2
  405106:	2b00      	cmp	r3, #0
  405108:	d006      	beq.n	405118 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  40510a:	68fb      	ldr	r3, [r7, #12]
  40510c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40510e:	69bb      	ldr	r3, [r7, #24]
  405110:	431a      	orrs	r2, r3
  405112:	68fb      	ldr	r3, [r7, #12]
  405114:	675a      	str	r2, [r3, #116]	; 0x74
}
  405116:	e006      	b.n	405126 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  405118:	68fb      	ldr	r3, [r7, #12]
  40511a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40511c:	69bb      	ldr	r3, [r7, #24]
  40511e:	43db      	mvns	r3, r3
  405120:	401a      	ands	r2, r3
  405122:	68fb      	ldr	r3, [r7, #12]
  405124:	675a      	str	r2, [r3, #116]	; 0x74
  405126:	bf00      	nop
  405128:	3734      	adds	r7, #52	; 0x34
  40512a:	46bd      	mov	sp, r7
  40512c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405130:	4770      	bx	lr
	...

00405134 <inv_i2c_master_init>:
};

/********************************* Prototypes *********************************/

void inv_i2c_master_init(void)
{
  405134:	b580      	push	{r7, lr}
  405136:	b084      	sub	sp, #16
  405138:	af00      	add	r7, sp, #0
	twi_options_t opt;
	if (i2cm.is_inited != 0)
  40513a:	4b25      	ldr	r3, [pc, #148]	; (4051d0 <inv_i2c_master_init+0x9c>)
  40513c:	781b      	ldrb	r3, [r3, #0]
  40513e:	2b00      	cmp	r3, #0
  405140:	d13f      	bne.n	4051c2 <inv_i2c_master_init+0x8e>
		return;

	memset(&opt, 0, sizeof(twi_options_t));
  405142:	1d3b      	adds	r3, r7, #4
  405144:	220c      	movs	r2, #12
  405146:	2100      	movs	r1, #0
  405148:	4618      	mov	r0, r3
  40514a:	4b22      	ldr	r3, [pc, #136]	; (4051d4 <inv_i2c_master_init+0xa0>)
  40514c:	4798      	blx	r3
	
	ioport_set_pin_mode(i2cm.sda_pin, i2cm.sda_pin_mode);
  40514e:	4b20      	ldr	r3, [pc, #128]	; (4051d0 <inv_i2c_master_init+0x9c>)
  405150:	695a      	ldr	r2, [r3, #20]
  405152:	4b1f      	ldr	r3, [pc, #124]	; (4051d0 <inv_i2c_master_init+0x9c>)
  405154:	699b      	ldr	r3, [r3, #24]
  405156:	4619      	mov	r1, r3
  405158:	4610      	mov	r0, r2
  40515a:	4b1f      	ldr	r3, [pc, #124]	; (4051d8 <inv_i2c_master_init+0xa4>)
  40515c:	4798      	blx	r3
	ioport_disable_pin(i2cm.sda_pin);
  40515e:	4b1c      	ldr	r3, [pc, #112]	; (4051d0 <inv_i2c_master_init+0x9c>)
  405160:	695b      	ldr	r3, [r3, #20]
  405162:	4618      	mov	r0, r3
  405164:	4b1d      	ldr	r3, [pc, #116]	; (4051dc <inv_i2c_master_init+0xa8>)
  405166:	4798      	blx	r3
	ioport_set_pin_mode(i2cm.clk_pin, i2cm.clk_pin_mode);
  405168:	4b19      	ldr	r3, [pc, #100]	; (4051d0 <inv_i2c_master_init+0x9c>)
  40516a:	68da      	ldr	r2, [r3, #12]
  40516c:	4b18      	ldr	r3, [pc, #96]	; (4051d0 <inv_i2c_master_init+0x9c>)
  40516e:	691b      	ldr	r3, [r3, #16]
  405170:	4619      	mov	r1, r3
  405172:	4610      	mov	r0, r2
  405174:	4b18      	ldr	r3, [pc, #96]	; (4051d8 <inv_i2c_master_init+0xa4>)
  405176:	4798      	blx	r3
	ioport_disable_pin(i2cm.clk_pin);
  405178:	4b15      	ldr	r3, [pc, #84]	; (4051d0 <inv_i2c_master_init+0x9c>)
  40517a:	68db      	ldr	r3, [r3, #12]
  40517c:	4618      	mov	r0, r3
  40517e:	4b17      	ldr	r3, [pc, #92]	; (4051dc <inv_i2c_master_init+0xa8>)
  405180:	4798      	blx	r3

	/* Enable the peripheral and set TWI mode. */
	flexcom_enable(i2cm.p_flexcom);
  405182:	4b13      	ldr	r3, [pc, #76]	; (4051d0 <inv_i2c_master_init+0x9c>)
  405184:	689b      	ldr	r3, [r3, #8]
  405186:	4618      	mov	r0, r3
  405188:	4b15      	ldr	r3, [pc, #84]	; (4051e0 <inv_i2c_master_init+0xac>)
  40518a:	4798      	blx	r3
	flexcom_set_opmode(i2cm.p_flexcom, FLEXCOM_TWI);
  40518c:	4b10      	ldr	r3, [pc, #64]	; (4051d0 <inv_i2c_master_init+0x9c>)
  40518e:	689b      	ldr	r3, [r3, #8]
  405190:	2103      	movs	r1, #3
  405192:	4618      	mov	r0, r3
  405194:	4b13      	ldr	r3, [pc, #76]	; (4051e4 <inv_i2c_master_init+0xb0>)
  405196:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  405198:	4b13      	ldr	r3, [pc, #76]	; (4051e8 <inv_i2c_master_init+0xb4>)
  40519a:	4798      	blx	r3
  40519c:	4603      	mov	r3, r0
  40519e:	607b      	str	r3, [r7, #4]
	opt.speed      = i2cm.clk_speed;
  4051a0:	4b0b      	ldr	r3, [pc, #44]	; (4051d0 <inv_i2c_master_init+0x9c>)
  4051a2:	69db      	ldr	r3, [r3, #28]
  4051a4:	60bb      	str	r3, [r7, #8]

	if (twi_master_init(i2cm.p_i2c, &opt) != TWI_SUCCESS)
  4051a6:	4b0a      	ldr	r3, [pc, #40]	; (4051d0 <inv_i2c_master_init+0x9c>)
  4051a8:	685b      	ldr	r3, [r3, #4]
  4051aa:	1d3a      	adds	r2, r7, #4
  4051ac:	4611      	mov	r1, r2
  4051ae:	4618      	mov	r0, r3
  4051b0:	4b0e      	ldr	r3, [pc, #56]	; (4051ec <inv_i2c_master_init+0xb8>)
  4051b2:	4798      	blx	r3
  4051b4:	4603      	mov	r3, r0
  4051b6:	2b00      	cmp	r3, #0
  4051b8:	d105      	bne.n	4051c6 <inv_i2c_master_init+0x92>
		return;
	
	i2cm.is_inited = 1;
  4051ba:	4b05      	ldr	r3, [pc, #20]	; (4051d0 <inv_i2c_master_init+0x9c>)
  4051bc:	2201      	movs	r2, #1
  4051be:	701a      	strb	r2, [r3, #0]
  4051c0:	e002      	b.n	4051c8 <inv_i2c_master_init+0x94>
		return;
  4051c2:	bf00      	nop
  4051c4:	e000      	b.n	4051c8 <inv_i2c_master_init+0x94>
		return;
  4051c6:	bf00      	nop
}
  4051c8:	3710      	adds	r7, #16
  4051ca:	46bd      	mov	sp, r7
  4051cc:	bd80      	pop	{r7, pc}
  4051ce:	bf00      	nop
  4051d0:	200001f4 	.word	0x200001f4
  4051d4:	0040fa3d 	.word	0x0040fa3d
  4051d8:	00405017 	.word	0x00405017
  4051dc:	00404fcd 	.word	0x00404fcd
  4051e0:	00407f49 	.word	0x00407f49
  4051e4:	004080b1 	.word	0x004080b1
  4051e8:	00404fb9 	.word	0x00404fb9
  4051ec:	00409061 	.word	0x00409061

004051f0 <inv_i2c_master_write_register>:

unsigned long inv_i2c_master_write_register(unsigned char Address, unsigned char RegisterAddr, unsigned short RegisterLen, const unsigned char *RegisterValue)
{
  4051f0:	b580      	push	{r7, lr}
  4051f2:	b088      	sub	sp, #32
  4051f4:	af00      	add	r7, sp, #0
  4051f6:	603b      	str	r3, [r7, #0]
  4051f8:	4603      	mov	r3, r0
  4051fa:	71fb      	strb	r3, [r7, #7]
  4051fc:	460b      	mov	r3, r1
  4051fe:	71bb      	strb	r3, [r7, #6]
  405200:	4613      	mov	r3, r2
  405202:	80bb      	strh	r3, [r7, #4]
	uint8_t data = 0;
  405204:	2300      	movs	r3, #0
  405206:	77fb      	strb	r3, [r7, #31]
	twi_packet_t packet_tx;
	
	/* Configure the data packet to be transmitted */
	packet_tx.chip        = Address;
  405208:	79fb      	ldrb	r3, [r7, #7]
  40520a:	763b      	strb	r3, [r7, #24]
	packet_tx.addr[0]     = RegisterAddr;
  40520c:	79bb      	ldrb	r3, [r7, #6]
  40520e:	723b      	strb	r3, [r7, #8]
	packet_tx.addr_length = 1;
  405210:	2301      	movs	r3, #1
  405212:	60fb      	str	r3, [r7, #12]

	/* I2C Semi-Write is basically not supported
	 * Force packet length to 1 and 0 in packet buffer in case of I2C Semi-Write needed */
	if (RegisterLen == 0) {
  405214:	88bb      	ldrh	r3, [r7, #4]
  405216:	2b00      	cmp	r3, #0
  405218:	d105      	bne.n	405226 <inv_i2c_master_write_register+0x36>
		packet_tx.buffer  = &data;
  40521a:	f107 031f 	add.w	r3, r7, #31
  40521e:	613b      	str	r3, [r7, #16]
		packet_tx.length  = 1;
  405220:	2301      	movs	r3, #1
  405222:	617b      	str	r3, [r7, #20]
  405224:	e003      	b.n	40522e <inv_i2c_master_write_register+0x3e>
	} else {
		packet_tx.buffer  = (uint8_t *) RegisterValue;
  405226:	683b      	ldr	r3, [r7, #0]
  405228:	613b      	str	r3, [r7, #16]
		packet_tx.length  = RegisterLen;
  40522a:	88bb      	ldrh	r3, [r7, #4]
  40522c:	617b      	str	r3, [r7, #20]
	}

	/* Send data to attached I2C slave */
	if (twi_master_write(i2cm.p_i2c, &packet_tx) != TWI_SUCCESS)
  40522e:	4b09      	ldr	r3, [pc, #36]	; (405254 <inv_i2c_master_write_register+0x64>)
  405230:	685b      	ldr	r3, [r3, #4]
  405232:	f107 0208 	add.w	r2, r7, #8
  405236:	4611      	mov	r1, r2
  405238:	4618      	mov	r0, r3
  40523a:	4b07      	ldr	r3, [pc, #28]	; (405258 <inv_i2c_master_write_register+0x68>)
  40523c:	4798      	blx	r3
  40523e:	4603      	mov	r3, r0
  405240:	2b00      	cmp	r3, #0
  405242:	d002      	beq.n	40524a <inv_i2c_master_write_register+0x5a>
		return -1;
  405244:	f04f 33ff 	mov.w	r3, #4294967295
  405248:	e000      	b.n	40524c <inv_i2c_master_write_register+0x5c>
	else
		return 0;
  40524a:	2300      	movs	r3, #0
}
  40524c:	4618      	mov	r0, r3
  40524e:	3720      	adds	r7, #32
  405250:	46bd      	mov	sp, r7
  405252:	bd80      	pop	{r7, pc}
  405254:	200001f4 	.word	0x200001f4
  405258:	00409321 	.word	0x00409321

0040525c <inv_i2c_master_read_register>:
	else
		return 0;    
}

unsigned long inv_i2c_master_read_register(unsigned char Address, unsigned char RegisterAddr, unsigned short RegisterLen, unsigned char *RegisterValue)
{
  40525c:	b580      	push	{r7, lr}
  40525e:	b088      	sub	sp, #32
  405260:	af00      	add	r7, sp, #0
  405262:	603b      	str	r3, [r7, #0]
  405264:	4603      	mov	r3, r0
  405266:	71fb      	strb	r3, [r7, #7]
  405268:	460b      	mov	r3, r1
  40526a:	71bb      	strb	r3, [r7, #6]
  40526c:	4613      	mov	r3, r2
  40526e:	80bb      	strh	r3, [r7, #4]
	twi_packet_t packet_rx;
	
	/* Configure the data packet to be received */
	packet_rx.chip        = Address;
  405270:	79fb      	ldrb	r3, [r7, #7]
  405272:	773b      	strb	r3, [r7, #28]
	packet_rx.addr[0]     = RegisterAddr;
  405274:	79bb      	ldrb	r3, [r7, #6]
  405276:	733b      	strb	r3, [r7, #12]
	packet_rx.addr_length = 1;
  405278:	2301      	movs	r3, #1
  40527a:	613b      	str	r3, [r7, #16]
	packet_rx.buffer      = RegisterValue;
  40527c:	683b      	ldr	r3, [r7, #0]
  40527e:	617b      	str	r3, [r7, #20]
	packet_rx.length      = RegisterLen;
  405280:	88bb      	ldrh	r3, [r7, #4]
  405282:	61bb      	str	r3, [r7, #24]

	/* Get data out of attached I2C slave */
	if (twi_master_read(i2cm.p_i2c, &packet_rx) != TWI_SUCCESS)
  405284:	4b09      	ldr	r3, [pc, #36]	; (4052ac <inv_i2c_master_read_register+0x50>)
  405286:	685b      	ldr	r3, [r3, #4]
  405288:	f107 020c 	add.w	r2, r7, #12
  40528c:	4611      	mov	r1, r2
  40528e:	4618      	mov	r0, r3
  405290:	4b07      	ldr	r3, [pc, #28]	; (4052b0 <inv_i2c_master_read_register+0x54>)
  405292:	4798      	blx	r3
  405294:	4603      	mov	r3, r0
  405296:	2b00      	cmp	r3, #0
  405298:	d002      	beq.n	4052a0 <inv_i2c_master_read_register+0x44>
		return -1;
  40529a:	f04f 33ff 	mov.w	r3, #4294967295
  40529e:	e000      	b.n	4052a2 <inv_i2c_master_read_register+0x46>
	else
		return 0;
  4052a0:	2300      	movs	r3, #0
}
  4052a2:	4618      	mov	r0, r3
  4052a4:	3720      	adds	r7, #32
  4052a6:	46bd      	mov	sp, r7
  4052a8:	bd80      	pop	{r7, pc}
  4052aa:	bf00      	nop
  4052ac:	200001f4 	.word	0x200001f4
  4052b0:	00409215 	.word	0x00409215

004052b4 <RTC_Handler>:

/**
 * \brief Interrupt handler for the RTC.
 */
void RTC_Handler(void)
{
  4052b4:	b580      	push	{r7, lr}
  4052b6:	b082      	sub	sp, #8
  4052b8:	af00      	add	r7, sp, #0
	uint32_t ul_status = rtc_get_status(RTC);
  4052ba:	4810      	ldr	r0, [pc, #64]	; (4052fc <RTC_Handler+0x48>)
  4052bc:	4b10      	ldr	r3, [pc, #64]	; (405300 <RTC_Handler+0x4c>)
  4052be:	4798      	blx	r3
  4052c0:	6078      	str	r0, [r7, #4]

	/* Time event interrupt */
	if ((ul_status & RTC_SR_TIMEV) == RTC_SR_TIMEV) {
  4052c2:	687b      	ldr	r3, [r7, #4]
  4052c4:	f003 0308 	and.w	r3, r3, #8
  4052c8:	2b00      	cmp	r3, #0
  4052ca:	d012      	beq.n	4052f2 <RTC_Handler+0x3e>
		/* Disable RTC interrupt */
		rtc_disable_interrupt(RTC, RTC_IDR_TIMDIS);
  4052cc:	2108      	movs	r1, #8
  4052ce:	480b      	ldr	r0, [pc, #44]	; (4052fc <RTC_Handler+0x48>)
  4052d0:	4b0c      	ldr	r3, [pc, #48]	; (405304 <RTC_Handler+0x50>)
  4052d2:	4798      	blx	r3

		rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  4052d4:	2108      	movs	r1, #8
  4052d6:	4809      	ldr	r0, [pc, #36]	; (4052fc <RTC_Handler+0x48>)
  4052d8:	4b0b      	ldr	r3, [pc, #44]	; (405308 <RTC_Handler+0x54>)
  4052da:	4798      	blx	r3

		rtc_enable_interrupt(RTC, RTC_IER_TIMEN);
  4052dc:	2108      	movs	r1, #8
  4052de:	4807      	ldr	r0, [pc, #28]	; (4052fc <RTC_Handler+0x48>)
  4052e0:	4b0a      	ldr	r3, [pc, #40]	; (40530c <RTC_Handler+0x58>)
  4052e2:	4798      	blx	r3
	
		if (sRtc_irq_handler_cb != NULL)
  4052e4:	4b0a      	ldr	r3, [pc, #40]	; (405310 <RTC_Handler+0x5c>)
  4052e6:	681b      	ldr	r3, [r3, #0]
  4052e8:	2b00      	cmp	r3, #0
  4052ea:	d002      	beq.n	4052f2 <RTC_Handler+0x3e>
			sRtc_irq_handler_cb();
  4052ec:	4b08      	ldr	r3, [pc, #32]	; (405310 <RTC_Handler+0x5c>)
  4052ee:	681b      	ldr	r3, [r3, #0]
  4052f0:	4798      	blx	r3
	}
}
  4052f2:	bf00      	nop
  4052f4:	3708      	adds	r7, #8
  4052f6:	46bd      	mov	sp, r7
  4052f8:	bd80      	pop	{r7, pc}
  4052fa:	bf00      	nop
  4052fc:	400e1460 	.word	0x400e1460
  405300:	00408bf9 	.word	0x00408bf9
  405304:	00408bdd 	.word	0x00408bdd
  405308:	00408c11 	.word	0x00408c11
  40530c:	00408bc1 	.word	0x00408bc1
  405310:	20003a8c 	.word	0x20003a8c

00405314 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  405314:	b480      	push	{r7}
  405316:	b083      	sub	sp, #12
  405318:	af00      	add	r7, sp, #0
  40531a:	4603      	mov	r3, r0
  40531c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40531e:	4909      	ldr	r1, [pc, #36]	; (405344 <NVIC_ClearPendingIRQ+0x30>)
  405320:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405324:	095b      	lsrs	r3, r3, #5
  405326:	79fa      	ldrb	r2, [r7, #7]
  405328:	f002 021f 	and.w	r2, r2, #31
  40532c:	2001      	movs	r0, #1
  40532e:	fa00 f202 	lsl.w	r2, r0, r2
  405332:	3360      	adds	r3, #96	; 0x60
  405334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405338:	bf00      	nop
  40533a:	370c      	adds	r7, #12
  40533c:	46bd      	mov	sp, r7
  40533e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405342:	4770      	bx	lr
  405344:	e000e100 	.word	0xe000e100

00405348 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  405348:	b480      	push	{r7}
  40534a:	b083      	sub	sp, #12
  40534c:	af00      	add	r7, sp, #0
  40534e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  405350:	687b      	ldr	r3, [r7, #4]
  405352:	2280      	movs	r2, #128	; 0x80
  405354:	601a      	str	r2, [r3, #0]
}
  405356:	bf00      	nop
  405358:	370c      	adds	r7, #12
  40535a:	46bd      	mov	sp, r7
  40535c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405360:	4770      	bx	lr

00405362 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
  405362:	b480      	push	{r7}
  405364:	b083      	sub	sp, #12
  405366:	af00      	add	r7, sp, #0
  405368:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40536a:	687b      	ldr	r3, [r7, #4]
  40536c:	2201      	movs	r2, #1
  40536e:	601a      	str	r2, [r3, #0]
}
  405370:	bf00      	nop
  405372:	370c      	adds	r7, #12
  405374:	46bd      	mov	sp, r7
  405376:	f85d 7b04 	ldr.w	r7, [sp], #4
  40537a:	4770      	bx	lr

0040537c <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
  40537c:	b480      	push	{r7}
  40537e:	b083      	sub	sp, #12
  405380:	af00      	add	r7, sp, #0
  405382:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  405384:	687b      	ldr	r3, [r7, #4]
  405386:	2202      	movs	r2, #2
  405388:	601a      	str	r2, [r3, #0]
}
  40538a:	bf00      	nop
  40538c:	370c      	adds	r7, #12
  40538e:	46bd      	mov	sp, r7
  405390:	f85d 7b04 	ldr.w	r7, [sp], #4
  405394:	4770      	bx	lr

00405396 <spi_set_lastxfer>:
 *  The next transfer is the last transfer and after that CS is de-asserted.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
  405396:	b480      	push	{r7}
  405398:	b083      	sub	sp, #12
  40539a:	af00      	add	r7, sp, #0
  40539c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  40539e:	687b      	ldr	r3, [r7, #4]
  4053a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4053a4:	601a      	str	r2, [r3, #0]
}
  4053a6:	bf00      	nop
  4053a8:	370c      	adds	r7, #12
  4053aa:	46bd      	mov	sp, r7
  4053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053b0:	4770      	bx	lr

004053b2 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  4053b2:	b480      	push	{r7}
  4053b4:	b083      	sub	sp, #12
  4053b6:	af00      	add	r7, sp, #0
  4053b8:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4053ba:	687b      	ldr	r3, [r7, #4]
  4053bc:	685b      	ldr	r3, [r3, #4]
  4053be:	f043 0201 	orr.w	r2, r3, #1
  4053c2:	687b      	ldr	r3, [r7, #4]
  4053c4:	605a      	str	r2, [r3, #4]
}
  4053c6:	bf00      	nop
  4053c8:	370c      	adds	r7, #12
  4053ca:	46bd      	mov	sp, r7
  4053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053d0:	4770      	bx	lr

004053d2 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  4053d2:	b480      	push	{r7}
  4053d4:	b083      	sub	sp, #12
  4053d6:	af00      	add	r7, sp, #0
  4053d8:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4053da:	687b      	ldr	r3, [r7, #4]
  4053dc:	685b      	ldr	r3, [r3, #4]
  4053de:	f043 0210 	orr.w	r2, r3, #16
  4053e2:	687b      	ldr	r3, [r7, #4]
  4053e4:	605a      	str	r2, [r3, #4]
}
  4053e6:	bf00      	nop
  4053e8:	370c      	adds	r7, #12
  4053ea:	46bd      	mov	sp, r7
  4053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053f0:	4770      	bx	lr

004053f2 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
  4053f2:	b480      	push	{r7}
  4053f4:	b083      	sub	sp, #12
  4053f6:	af00      	add	r7, sp, #0
  4053f8:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
  4053fa:	687b      	ldr	r3, [r7, #4]
  4053fc:	691b      	ldr	r3, [r3, #16]
}
  4053fe:	4618      	mov	r0, r3
  405400:	370c      	adds	r7, #12
  405402:	46bd      	mov	sp, r7
  405404:	f85d 7b04 	ldr.w	r7, [sp], #4
  405408:	4770      	bx	lr

0040540a <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  40540a:	b480      	push	{r7}
  40540c:	b083      	sub	sp, #12
  40540e:	af00      	add	r7, sp, #0
  405410:	6078      	str	r0, [r7, #4]
  405412:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
  405414:	687b      	ldr	r3, [r7, #4]
  405416:	683a      	ldr	r2, [r7, #0]
  405418:	615a      	str	r2, [r3, #20]
}
  40541a:	bf00      	nop
  40541c:	370c      	adds	r7, #12
  40541e:	46bd      	mov	sp, r7
  405420:	f85d 7b04 	ldr.w	r7, [sp], #4
  405424:	4770      	bx	lr

00405426 <spi_disable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be disabled.
 */
static inline void spi_disable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  405426:	b480      	push	{r7}
  405428:	b083      	sub	sp, #12
  40542a:	af00      	add	r7, sp, #0
  40542c:	6078      	str	r0, [r7, #4]
  40542e:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IDR = ul_sources;
  405430:	687b      	ldr	r3, [r7, #4]
  405432:	683a      	ldr	r2, [r7, #0]
  405434:	619a      	str	r2, [r3, #24]
}
  405436:	bf00      	nop
  405438:	370c      	adds	r7, #12
  40543a:	46bd      	mov	sp, r7
  40543c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405440:	4770      	bx	lr

00405442 <spi_get_pdc_base>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return PDC registers base for PDC driver to access.
 */
static inline Pdc *spi_get_pdc_base(Spi *p_spi)
{
  405442:	b480      	push	{r7}
  405444:	b083      	sub	sp, #12
  405446:	af00      	add	r7, sp, #0
  405448:	6078      	str	r0, [r7, #4]
	return (Pdc *)&(p_spi->SPI_RPR);
  40544a:	687b      	ldr	r3, [r7, #4]
  40544c:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
  405450:	4618      	mov	r0, r3
  405452:	370c      	adds	r7, #12
  405454:	46bd      	mov	sp, r7
  405456:	f85d 7b04 	ldr.w	r7, [sp], #4
  40545a:	4770      	bx	lr

0040545c <osc_get_rate>:
{
  40545c:	b480      	push	{r7}
  40545e:	b083      	sub	sp, #12
  405460:	af00      	add	r7, sp, #0
  405462:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405464:	687b      	ldr	r3, [r7, #4]
  405466:	2b07      	cmp	r3, #7
  405468:	d825      	bhi.n	4054b6 <osc_get_rate+0x5a>
  40546a:	a201      	add	r2, pc, #4	; (adr r2, 405470 <osc_get_rate+0x14>)
  40546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405470:	00405491 	.word	0x00405491
  405474:	00405497 	.word	0x00405497
  405478:	0040549d 	.word	0x0040549d
  40547c:	004054a3 	.word	0x004054a3
  405480:	004054a7 	.word	0x004054a7
  405484:	004054ab 	.word	0x004054ab
  405488:	004054af 	.word	0x004054af
  40548c:	004054b3 	.word	0x004054b3
		return OSC_SLCK_32K_RC_HZ;
  405490:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  405494:	e010      	b.n	4054b8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  405496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40549a:	e00d      	b.n	4054b8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40549c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4054a0:	e00a      	b.n	4054b8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4054a2:	4b08      	ldr	r3, [pc, #32]	; (4054c4 <osc_get_rate+0x68>)
  4054a4:	e008      	b.n	4054b8 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  4054a6:	4b08      	ldr	r3, [pc, #32]	; (4054c8 <osc_get_rate+0x6c>)
  4054a8:	e006      	b.n	4054b8 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  4054aa:	4b08      	ldr	r3, [pc, #32]	; (4054cc <osc_get_rate+0x70>)
  4054ac:	e004      	b.n	4054b8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4054ae:	2300      	movs	r3, #0
  4054b0:	e002      	b.n	4054b8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4054b2:	2300      	movs	r3, #0
  4054b4:	e000      	b.n	4054b8 <osc_get_rate+0x5c>
	return 0;
  4054b6:	2300      	movs	r3, #0
}
  4054b8:	4618      	mov	r0, r3
  4054ba:	370c      	adds	r7, #12
  4054bc:	46bd      	mov	sp, r7
  4054be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054c2:	4770      	bx	lr
  4054c4:	007a1200 	.word	0x007a1200
  4054c8:	00f42400 	.word	0x00f42400
  4054cc:	016e3600 	.word	0x016e3600

004054d0 <sysclk_get_main_hz>:
{
  4054d0:	b580      	push	{r7, lr}
  4054d2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4054d4:	2001      	movs	r0, #1
  4054d6:	4b04      	ldr	r3, [pc, #16]	; (4054e8 <sysclk_get_main_hz+0x18>)
  4054d8:	4798      	blx	r3
  4054da:	4602      	mov	r2, r0
  4054dc:	f640 634e 	movw	r3, #3662	; 0xe4e
  4054e0:	fb03 f302 	mul.w	r3, r3, r2
}
  4054e4:	4618      	mov	r0, r3
  4054e6:	bd80      	pop	{r7, pc}
  4054e8:	0040545d 	.word	0x0040545d

004054ec <sysclk_get_peripheral_hz>:
{
  4054ec:	b580      	push	{r7, lr}
  4054ee:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4054f0:	4b02      	ldr	r3, [pc, #8]	; (4054fc <sysclk_get_peripheral_hz+0x10>)
  4054f2:	4798      	blx	r3
  4054f4:	4603      	mov	r3, r0
}
  4054f6:	4618      	mov	r0, r3
  4054f8:	bd80      	pop	{r7, pc}
  4054fa:	bf00      	nop
  4054fc:	004054d1 	.word	0x004054d1

00405500 <ioport_disable_pin>:
{
  405500:	b480      	push	{r7}
  405502:	b089      	sub	sp, #36	; 0x24
  405504:	af00      	add	r7, sp, #0
  405506:	6078      	str	r0, [r7, #4]
  405508:	687b      	ldr	r3, [r7, #4]
  40550a:	61fb      	str	r3, [r7, #28]
  40550c:	69fb      	ldr	r3, [r7, #28]
  40550e:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  405510:	69bb      	ldr	r3, [r7, #24]
  405512:	095a      	lsrs	r2, r3, #5
  405514:	69fb      	ldr	r3, [r7, #28]
  405516:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  405518:	697b      	ldr	r3, [r7, #20]
  40551a:	f003 031f 	and.w	r3, r3, #31
  40551e:	2101      	movs	r1, #1
  405520:	fa01 f303 	lsl.w	r3, r1, r3
  405524:	613a      	str	r2, [r7, #16]
  405526:	60fb      	str	r3, [r7, #12]
  405528:	693b      	ldr	r3, [r7, #16]
  40552a:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40552c:	68bb      	ldr	r3, [r7, #8]
  40552e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405532:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405536:	025b      	lsls	r3, r3, #9
  405538:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40553a:	68fb      	ldr	r3, [r7, #12]
  40553c:	6053      	str	r3, [r2, #4]
}
  40553e:	bf00      	nop
  405540:	3724      	adds	r7, #36	; 0x24
  405542:	46bd      	mov	sp, r7
  405544:	f85d 7b04 	ldr.w	r7, [sp], #4
  405548:	4770      	bx	lr

0040554a <ioport_set_pin_mode>:
{
  40554a:	b480      	push	{r7}
  40554c:	b08d      	sub	sp, #52	; 0x34
  40554e:	af00      	add	r7, sp, #0
  405550:	6078      	str	r0, [r7, #4]
  405552:	6039      	str	r1, [r7, #0]
  405554:	687b      	ldr	r3, [r7, #4]
  405556:	62fb      	str	r3, [r7, #44]	; 0x2c
  405558:	683b      	ldr	r3, [r7, #0]
  40555a:	62bb      	str	r3, [r7, #40]	; 0x28
  40555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40555e:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  405560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405562:	095a      	lsrs	r2, r3, #5
  405564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405566:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  405568:	6a3b      	ldr	r3, [r7, #32]
  40556a:	f003 031f 	and.w	r3, r3, #31
  40556e:	2101      	movs	r1, #1
  405570:	fa01 f303 	lsl.w	r3, r1, r3
  405574:	61fa      	str	r2, [r7, #28]
  405576:	61bb      	str	r3, [r7, #24]
  405578:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40557a:	617b      	str	r3, [r7, #20]
  40557c:	69fb      	ldr	r3, [r7, #28]
  40557e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405580:	693b      	ldr	r3, [r7, #16]
  405582:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405586:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40558a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  40558c:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  40558e:	697b      	ldr	r3, [r7, #20]
  405590:	f003 0308 	and.w	r3, r3, #8
  405594:	2b00      	cmp	r3, #0
  405596:	d003      	beq.n	4055a0 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  405598:	68fb      	ldr	r3, [r7, #12]
  40559a:	69ba      	ldr	r2, [r7, #24]
  40559c:	665a      	str	r2, [r3, #100]	; 0x64
  40559e:	e002      	b.n	4055a6 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  4055a0:	68fb      	ldr	r3, [r7, #12]
  4055a2:	69ba      	ldr	r2, [r7, #24]
  4055a4:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4055a6:	697b      	ldr	r3, [r7, #20]
  4055a8:	f003 0310 	and.w	r3, r3, #16
  4055ac:	2b00      	cmp	r3, #0
  4055ae:	d004      	beq.n	4055ba <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4055b0:	68fb      	ldr	r3, [r7, #12]
  4055b2:	69ba      	ldr	r2, [r7, #24]
  4055b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4055b8:	e003      	b.n	4055c2 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  4055ba:	68fb      	ldr	r3, [r7, #12]
  4055bc:	69ba      	ldr	r2, [r7, #24]
  4055be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4055c2:	697b      	ldr	r3, [r7, #20]
  4055c4:	f003 0320 	and.w	r3, r3, #32
  4055c8:	2b00      	cmp	r3, #0
  4055ca:	d003      	beq.n	4055d4 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4055cc:	68fb      	ldr	r3, [r7, #12]
  4055ce:	69ba      	ldr	r2, [r7, #24]
  4055d0:	651a      	str	r2, [r3, #80]	; 0x50
  4055d2:	e002      	b.n	4055da <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  4055d4:	68fb      	ldr	r3, [r7, #12]
  4055d6:	69ba      	ldr	r2, [r7, #24]
  4055d8:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4055da:	697b      	ldr	r3, [r7, #20]
  4055dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4055e0:	2b00      	cmp	r3, #0
  4055e2:	d003      	beq.n	4055ec <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4055e4:	68fb      	ldr	r3, [r7, #12]
  4055e6:	69ba      	ldr	r2, [r7, #24]
  4055e8:	621a      	str	r2, [r3, #32]
  4055ea:	e002      	b.n	4055f2 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  4055ec:	68fb      	ldr	r3, [r7, #12]
  4055ee:	69ba      	ldr	r2, [r7, #24]
  4055f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4055f2:	697b      	ldr	r3, [r7, #20]
  4055f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4055f8:	2b00      	cmp	r3, #0
  4055fa:	d004      	beq.n	405606 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  4055fc:	68fb      	ldr	r3, [r7, #12]
  4055fe:	69ba      	ldr	r2, [r7, #24]
  405600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  405604:	e003      	b.n	40560e <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  405606:	68fb      	ldr	r3, [r7, #12]
  405608:	69ba      	ldr	r2, [r7, #24]
  40560a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40560e:	697b      	ldr	r3, [r7, #20]
  405610:	f003 0301 	and.w	r3, r3, #1
  405614:	2b00      	cmp	r3, #0
  405616:	d006      	beq.n	405626 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  405618:	68fb      	ldr	r3, [r7, #12]
  40561a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40561c:	69bb      	ldr	r3, [r7, #24]
  40561e:	431a      	orrs	r2, r3
  405620:	68fb      	ldr	r3, [r7, #12]
  405622:	671a      	str	r2, [r3, #112]	; 0x70
  405624:	e006      	b.n	405634 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  405626:	68fb      	ldr	r3, [r7, #12]
  405628:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40562a:	69bb      	ldr	r3, [r7, #24]
  40562c:	43db      	mvns	r3, r3
  40562e:	401a      	ands	r2, r3
  405630:	68fb      	ldr	r3, [r7, #12]
  405632:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  405634:	697b      	ldr	r3, [r7, #20]
  405636:	f003 0302 	and.w	r3, r3, #2
  40563a:	2b00      	cmp	r3, #0
  40563c:	d006      	beq.n	40564c <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  40563e:	68fb      	ldr	r3, [r7, #12]
  405640:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405642:	69bb      	ldr	r3, [r7, #24]
  405644:	431a      	orrs	r2, r3
  405646:	68fb      	ldr	r3, [r7, #12]
  405648:	675a      	str	r2, [r3, #116]	; 0x74
}
  40564a:	e006      	b.n	40565a <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  40564c:	68fb      	ldr	r3, [r7, #12]
  40564e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405650:	69bb      	ldr	r3, [r7, #24]
  405652:	43db      	mvns	r3, r3
  405654:	401a      	ands	r2, r3
  405656:	68fb      	ldr	r3, [r7, #12]
  405658:	675a      	str	r2, [r3, #116]	; 0x74
  40565a:	bf00      	nop
  40565c:	3734      	adds	r7, #52	; 0x34
  40565e:	46bd      	mov	sp, r7
  405660:	f85d 7b04 	ldr.w	r7, [sp], #4
  405664:	4770      	bx	lr
	...

00405668 <spi_master_irq_handler>:

/**
 * \brief Interrupt handler for the SPI master.
 */
static void spi_master_irq_handler(unsigned spi_num)
{
  405668:	b590      	push	{r4, r7, lr}
  40566a:	b083      	sub	sp, #12
  40566c:	af00      	add	r7, sp, #0
  40566e:	6078      	str	r0, [r7, #4]
	/* Disable the RX and TX PDC transfer requests */
	pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS |
  405670:	4a3a      	ldr	r2, [pc, #232]	; (40575c <spi_master_irq_handler+0xf4>)
  405672:	687b      	ldr	r3, [r7, #4]
  405674:	f241 018c 	movw	r1, #4236	; 0x108c
  405678:	fb01 f303 	mul.w	r3, r1, r3
  40567c:	4413      	add	r3, r2
  40567e:	3304      	adds	r3, #4
  405680:	681b      	ldr	r3, [r3, #0]
  405682:	f240 2102 	movw	r1, #514	; 0x202
  405686:	4618      	mov	r0, r3
  405688:	4b35      	ldr	r3, [pc, #212]	; (405760 <spi_master_irq_handler+0xf8>)
  40568a:	4798      	blx	r3
			PERIPH_PTCR_TXTDIS);
			
	NVIC_ClearPendingIRQ(sm[spi_num].irqn);
  40568c:	4a33      	ldr	r2, [pc, #204]	; (40575c <spi_master_irq_handler+0xf4>)
  40568e:	687b      	ldr	r3, [r7, #4]
  405690:	f241 018c 	movw	r1, #4236	; 0x108c
  405694:	fb01 f303 	mul.w	r3, r1, r3
  405698:	4413      	add	r3, r2
  40569a:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
  40569e:	331c      	adds	r3, #28
  4056a0:	f993 3000 	ldrsb.w	r3, [r3]
  4056a4:	4618      	mov	r0, r3
  4056a6:	4b2f      	ldr	r3, [pc, #188]	; (405764 <spi_master_irq_handler+0xfc>)
  4056a8:	4798      	blx	r3

	if(sm[spi_num].p_spi->SPI_SR & SPI_SR_RXBUFF) {
  4056aa:	4a2c      	ldr	r2, [pc, #176]	; (40575c <spi_master_irq_handler+0xf4>)
  4056ac:	687b      	ldr	r3, [r7, #4]
  4056ae:	f241 018c 	movw	r1, #4236	; 0x108c
  4056b2:	fb01 f303 	mul.w	r3, r1, r3
  4056b6:	4413      	add	r3, r2
  4056b8:	681b      	ldr	r3, [r3, #0]
  4056ba:	691b      	ldr	r3, [r3, #16]
  4056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4056c0:	2b00      	cmp	r3, #0
  4056c2:	d047      	beq.n	405754 <spi_master_irq_handler+0xec>
		memcpy(sm[spi_num].rx_dest_addr, &sm[spi_num].rx_buffer[1], sm[spi_num].rx_len);
  4056c4:	4a25      	ldr	r2, [pc, #148]	; (40575c <spi_master_irq_handler+0xf4>)
  4056c6:	687b      	ldr	r3, [r7, #4]
  4056c8:	f241 018c 	movw	r1, #4236	; 0x108c
  4056cc:	fb01 f303 	mul.w	r3, r1, r3
  4056d0:	4413      	add	r3, r2
  4056d2:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  4056d6:	3304      	adds	r3, #4
  4056d8:	6818      	ldr	r0, [r3, #0]
  4056da:	687b      	ldr	r3, [r7, #4]
  4056dc:	f241 028c 	movw	r2, #4236	; 0x108c
  4056e0:	fb02 f303 	mul.w	r3, r2, r3
  4056e4:	f603 0359 	addw	r3, r3, #2137	; 0x859
  4056e8:	4a1c      	ldr	r2, [pc, #112]	; (40575c <spi_master_irq_handler+0xf4>)
  4056ea:	4413      	add	r3, r2
  4056ec:	1d1c      	adds	r4, r3, #4
  4056ee:	4a1b      	ldr	r2, [pc, #108]	; (40575c <spi_master_irq_handler+0xf4>)
  4056f0:	687b      	ldr	r3, [r7, #4]
  4056f2:	f241 018c 	movw	r1, #4236	; 0x108c
  4056f6:	fb01 f303 	mul.w	r3, r1, r3
  4056fa:	4413      	add	r3, r2
  4056fc:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405700:	3308      	adds	r3, #8
  405702:	881b      	ldrh	r3, [r3, #0]
  405704:	461a      	mov	r2, r3
  405706:	4621      	mov	r1, r4
  405708:	4b17      	ldr	r3, [pc, #92]	; (405768 <spi_master_irq_handler+0x100>)
  40570a:	4798      	blx	r3

		/* Disable SPI IRQ */
		spi_disable_interrupt(sm[spi_num].p_spi, SPI_IDR_RXBUFF);
  40570c:	4a13      	ldr	r2, [pc, #76]	; (40575c <spi_master_irq_handler+0xf4>)
  40570e:	687b      	ldr	r3, [r7, #4]
  405710:	f241 018c 	movw	r1, #4236	; 0x108c
  405714:	fb01 f303 	mul.w	r3, r1, r3
  405718:	4413      	add	r3, r2
  40571a:	681b      	ldr	r3, [r3, #0]
  40571c:	2140      	movs	r1, #64	; 0x40
  40571e:	4618      	mov	r0, r3
  405720:	4b12      	ldr	r3, [pc, #72]	; (40576c <spi_master_irq_handler+0x104>)
  405722:	4798      	blx	r3

		if(sm[spi_num].transfer_done_cb)
  405724:	4a0d      	ldr	r2, [pc, #52]	; (40575c <spi_master_irq_handler+0xf4>)
  405726:	687b      	ldr	r3, [r7, #4]
  405728:	f241 018c 	movw	r1, #4236	; 0x108c
  40572c:	fb01 f303 	mul.w	r3, r1, r3
  405730:	4413      	add	r3, r2
  405732:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405736:	681b      	ldr	r3, [r3, #0]
  405738:	2b00      	cmp	r3, #0
  40573a:	d00b      	beq.n	405754 <spi_master_irq_handler+0xec>
			sm[spi_num].transfer_done_cb(0);
  40573c:	4a07      	ldr	r2, [pc, #28]	; (40575c <spi_master_irq_handler+0xf4>)
  40573e:	687b      	ldr	r3, [r7, #4]
  405740:	f241 018c 	movw	r1, #4236	; 0x108c
  405744:	fb01 f303 	mul.w	r3, r1, r3
  405748:	4413      	add	r3, r2
  40574a:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  40574e:	681b      	ldr	r3, [r3, #0]
  405750:	2000      	movs	r0, #0
  405752:	4798      	blx	r3
	}
}
  405754:	bf00      	nop
  405756:	370c      	adds	r7, #12
  405758:	46bd      	mov	sp, r7
  40575a:	bd90      	pop	{r4, r7, pc}
  40575c:	20000214 	.word	0x20000214
  405760:	00408199 	.word	0x00408199
  405764:	00405315 	.word	0x00405315
  405768:	0040f841 	.word	0x0040f841
  40576c:	00405427 	.word	0x00405427

00405770 <inv_spi_master_init>:


/********************************* Public Prototypes **************************/

void inv_spi_master_init(unsigned spi_num, uint32_t speed_hz)
{
  405770:	b5b0      	push	{r4, r5, r7, lr}
  405772:	b082      	sub	sp, #8
  405774:	af00      	add	r7, sp, #0
  405776:	6078      	str	r0, [r7, #4]
  405778:	6039      	str	r1, [r7, #0]
	ioport_set_pin_mode(sm[spi_num].clk_pin,  sm[spi_num].clk_pin_mode);
  40577a:	4ab5      	ldr	r2, [pc, #724]	; (405a50 <inv_spi_master_init+0x2e0>)
  40577c:	687b      	ldr	r3, [r7, #4]
  40577e:	f241 018c 	movw	r1, #4236	; 0x108c
  405782:	fb01 f303 	mul.w	r3, r1, r3
  405786:	4413      	add	r3, r2
  405788:	331c      	adds	r3, #28
  40578a:	6818      	ldr	r0, [r3, #0]
  40578c:	4ab0      	ldr	r2, [pc, #704]	; (405a50 <inv_spi_master_init+0x2e0>)
  40578e:	687b      	ldr	r3, [r7, #4]
  405790:	f241 018c 	movw	r1, #4236	; 0x108c
  405794:	fb01 f303 	mul.w	r3, r1, r3
  405798:	4413      	add	r3, r2
  40579a:	3320      	adds	r3, #32
  40579c:	681b      	ldr	r3, [r3, #0]
  40579e:	4619      	mov	r1, r3
  4057a0:	4bac      	ldr	r3, [pc, #688]	; (405a54 <inv_spi_master_init+0x2e4>)
  4057a2:	4798      	blx	r3
	ioport_set_pin_mode(sm[spi_num].mosi_pin, sm[spi_num].mosi_pin_mode);
  4057a4:	4aaa      	ldr	r2, [pc, #680]	; (405a50 <inv_spi_master_init+0x2e0>)
  4057a6:	687b      	ldr	r3, [r7, #4]
  4057a8:	f241 018c 	movw	r1, #4236	; 0x108c
  4057ac:	fb01 f303 	mul.w	r3, r1, r3
  4057b0:	4413      	add	r3, r2
  4057b2:	3324      	adds	r3, #36	; 0x24
  4057b4:	6818      	ldr	r0, [r3, #0]
  4057b6:	4aa6      	ldr	r2, [pc, #664]	; (405a50 <inv_spi_master_init+0x2e0>)
  4057b8:	687b      	ldr	r3, [r7, #4]
  4057ba:	f241 018c 	movw	r1, #4236	; 0x108c
  4057be:	fb01 f303 	mul.w	r3, r1, r3
  4057c2:	4413      	add	r3, r2
  4057c4:	3328      	adds	r3, #40	; 0x28
  4057c6:	681b      	ldr	r3, [r3, #0]
  4057c8:	4619      	mov	r1, r3
  4057ca:	4ba2      	ldr	r3, [pc, #648]	; (405a54 <inv_spi_master_init+0x2e4>)
  4057cc:	4798      	blx	r3
	ioport_set_pin_mode(sm[spi_num].miso_pin, sm[spi_num].miso_pin_mode);
  4057ce:	4aa0      	ldr	r2, [pc, #640]	; (405a50 <inv_spi_master_init+0x2e0>)
  4057d0:	687b      	ldr	r3, [r7, #4]
  4057d2:	f241 018c 	movw	r1, #4236	; 0x108c
  4057d6:	fb01 f303 	mul.w	r3, r1, r3
  4057da:	4413      	add	r3, r2
  4057dc:	332c      	adds	r3, #44	; 0x2c
  4057de:	6818      	ldr	r0, [r3, #0]
  4057e0:	4a9b      	ldr	r2, [pc, #620]	; (405a50 <inv_spi_master_init+0x2e0>)
  4057e2:	687b      	ldr	r3, [r7, #4]
  4057e4:	f241 018c 	movw	r1, #4236	; 0x108c
  4057e8:	fb01 f303 	mul.w	r3, r1, r3
  4057ec:	4413      	add	r3, r2
  4057ee:	3330      	adds	r3, #48	; 0x30
  4057f0:	681b      	ldr	r3, [r3, #0]
  4057f2:	4619      	mov	r1, r3
  4057f4:	4b97      	ldr	r3, [pc, #604]	; (405a54 <inv_spi_master_init+0x2e4>)
  4057f6:	4798      	blx	r3
	ioport_set_pin_mode(sm[spi_num].cs_pin,   sm[spi_num].cs_pin_mode);
  4057f8:	4a95      	ldr	r2, [pc, #596]	; (405a50 <inv_spi_master_init+0x2e0>)
  4057fa:	687b      	ldr	r3, [r7, #4]
  4057fc:	f241 018c 	movw	r1, #4236	; 0x108c
  405800:	fb01 f303 	mul.w	r3, r1, r3
  405804:	4413      	add	r3, r2
  405806:	3334      	adds	r3, #52	; 0x34
  405808:	6818      	ldr	r0, [r3, #0]
  40580a:	4a91      	ldr	r2, [pc, #580]	; (405a50 <inv_spi_master_init+0x2e0>)
  40580c:	687b      	ldr	r3, [r7, #4]
  40580e:	f241 018c 	movw	r1, #4236	; 0x108c
  405812:	fb01 f303 	mul.w	r3, r1, r3
  405816:	4413      	add	r3, r2
  405818:	3338      	adds	r3, #56	; 0x38
  40581a:	681b      	ldr	r3, [r3, #0]
  40581c:	4619      	mov	r1, r3
  40581e:	4b8d      	ldr	r3, [pc, #564]	; (405a54 <inv_spi_master_init+0x2e4>)
  405820:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].clk_pin);
  405822:	4a8b      	ldr	r2, [pc, #556]	; (405a50 <inv_spi_master_init+0x2e0>)
  405824:	687b      	ldr	r3, [r7, #4]
  405826:	f241 018c 	movw	r1, #4236	; 0x108c
  40582a:	fb01 f303 	mul.w	r3, r1, r3
  40582e:	4413      	add	r3, r2
  405830:	331c      	adds	r3, #28
  405832:	681b      	ldr	r3, [r3, #0]
  405834:	4618      	mov	r0, r3
  405836:	4b88      	ldr	r3, [pc, #544]	; (405a58 <inv_spi_master_init+0x2e8>)
  405838:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].mosi_pin);
  40583a:	4a85      	ldr	r2, [pc, #532]	; (405a50 <inv_spi_master_init+0x2e0>)
  40583c:	687b      	ldr	r3, [r7, #4]
  40583e:	f241 018c 	movw	r1, #4236	; 0x108c
  405842:	fb01 f303 	mul.w	r3, r1, r3
  405846:	4413      	add	r3, r2
  405848:	3324      	adds	r3, #36	; 0x24
  40584a:	681b      	ldr	r3, [r3, #0]
  40584c:	4618      	mov	r0, r3
  40584e:	4b82      	ldr	r3, [pc, #520]	; (405a58 <inv_spi_master_init+0x2e8>)
  405850:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].miso_pin);
  405852:	4a7f      	ldr	r2, [pc, #508]	; (405a50 <inv_spi_master_init+0x2e0>)
  405854:	687b      	ldr	r3, [r7, #4]
  405856:	f241 018c 	movw	r1, #4236	; 0x108c
  40585a:	fb01 f303 	mul.w	r3, r1, r3
  40585e:	4413      	add	r3, r2
  405860:	332c      	adds	r3, #44	; 0x2c
  405862:	681b      	ldr	r3, [r3, #0]
  405864:	4618      	mov	r0, r3
  405866:	4b7c      	ldr	r3, [pc, #496]	; (405a58 <inv_spi_master_init+0x2e8>)
  405868:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].cs_pin);
  40586a:	4a79      	ldr	r2, [pc, #484]	; (405a50 <inv_spi_master_init+0x2e0>)
  40586c:	687b      	ldr	r3, [r7, #4]
  40586e:	f241 018c 	movw	r1, #4236	; 0x108c
  405872:	fb01 f303 	mul.w	r3, r1, r3
  405876:	4413      	add	r3, r2
  405878:	3334      	adds	r3, #52	; 0x34
  40587a:	681b      	ldr	r3, [r3, #0]
  40587c:	4618      	mov	r0, r3
  40587e:	4b76      	ldr	r3, [pc, #472]	; (405a58 <inv_spi_master_init+0x2e8>)
  405880:	4798      	blx	r3
	
	/* Get pointer to SPI master PDC register base */
	sm[spi_num].p_pdc = spi_get_pdc_base(sm[spi_num].p_spi);
  405882:	4a73      	ldr	r2, [pc, #460]	; (405a50 <inv_spi_master_init+0x2e0>)
  405884:	687b      	ldr	r3, [r7, #4]
  405886:	f241 018c 	movw	r1, #4236	; 0x108c
  40588a:	fb01 f303 	mul.w	r3, r1, r3
  40588e:	4413      	add	r3, r2
  405890:	681b      	ldr	r3, [r3, #0]
  405892:	4618      	mov	r0, r3
  405894:	4b71      	ldr	r3, [pc, #452]	; (405a5c <inv_spi_master_init+0x2ec>)
  405896:	4798      	blx	r3
  405898:	4a6d      	ldr	r2, [pc, #436]	; (405a50 <inv_spi_master_init+0x2e0>)
  40589a:	687b      	ldr	r3, [r7, #4]
  40589c:	f241 018c 	movw	r1, #4236	; 0x108c
  4058a0:	fb01 f303 	mul.w	r3, r1, r3
  4058a4:	4413      	add	r3, r2
  4058a6:	3304      	adds	r3, #4
  4058a8:	6018      	str	r0, [r3, #0]

	/* Enable the peripheral and set SPI mode. */
	flexcom_enable(sm[spi_num].p_flexcom);
  4058aa:	4a69      	ldr	r2, [pc, #420]	; (405a50 <inv_spi_master_init+0x2e0>)
  4058ac:	687b      	ldr	r3, [r7, #4]
  4058ae:	f241 018c 	movw	r1, #4236	; 0x108c
  4058b2:	fb01 f303 	mul.w	r3, r1, r3
  4058b6:	4413      	add	r3, r2
  4058b8:	3308      	adds	r3, #8
  4058ba:	681b      	ldr	r3, [r3, #0]
  4058bc:	4618      	mov	r0, r3
  4058be:	4b68      	ldr	r3, [pc, #416]	; (405a60 <inv_spi_master_init+0x2f0>)
  4058c0:	4798      	blx	r3
	flexcom_set_opmode(sm[spi_num].p_flexcom, FLEXCOM_SPI);
  4058c2:	4a63      	ldr	r2, [pc, #396]	; (405a50 <inv_spi_master_init+0x2e0>)
  4058c4:	687b      	ldr	r3, [r7, #4]
  4058c6:	f241 018c 	movw	r1, #4236	; 0x108c
  4058ca:	fb01 f303 	mul.w	r3, r1, r3
  4058ce:	4413      	add	r3, r2
  4058d0:	3308      	adds	r3, #8
  4058d2:	681b      	ldr	r3, [r3, #0]
  4058d4:	2102      	movs	r1, #2
  4058d6:	4618      	mov	r0, r3
  4058d8:	4b62      	ldr	r3, [pc, #392]	; (405a64 <inv_spi_master_init+0x2f4>)
  4058da:	4798      	blx	r3

	spi_disable(sm[spi_num].p_spi);
  4058dc:	4a5c      	ldr	r2, [pc, #368]	; (405a50 <inv_spi_master_init+0x2e0>)
  4058de:	687b      	ldr	r3, [r7, #4]
  4058e0:	f241 018c 	movw	r1, #4236	; 0x108c
  4058e4:	fb01 f303 	mul.w	r3, r1, r3
  4058e8:	4413      	add	r3, r2
  4058ea:	681b      	ldr	r3, [r3, #0]
  4058ec:	4618      	mov	r0, r3
  4058ee:	4b5e      	ldr	r3, [pc, #376]	; (405a68 <inv_spi_master_init+0x2f8>)
  4058f0:	4798      	blx	r3
	spi_reset(sm[spi_num].p_spi);
  4058f2:	4a57      	ldr	r2, [pc, #348]	; (405a50 <inv_spi_master_init+0x2e0>)
  4058f4:	687b      	ldr	r3, [r7, #4]
  4058f6:	f241 018c 	movw	r1, #4236	; 0x108c
  4058fa:	fb01 f303 	mul.w	r3, r1, r3
  4058fe:	4413      	add	r3, r2
  405900:	681b      	ldr	r3, [r3, #0]
  405902:	4618      	mov	r0, r3
  405904:	4b59      	ldr	r3, [pc, #356]	; (405a6c <inv_spi_master_init+0x2fc>)
  405906:	4798      	blx	r3
	spi_set_lastxfer(sm[spi_num].p_spi);
  405908:	4a51      	ldr	r2, [pc, #324]	; (405a50 <inv_spi_master_init+0x2e0>)
  40590a:	687b      	ldr	r3, [r7, #4]
  40590c:	f241 018c 	movw	r1, #4236	; 0x108c
  405910:	fb01 f303 	mul.w	r3, r1, r3
  405914:	4413      	add	r3, r2
  405916:	681b      	ldr	r3, [r3, #0]
  405918:	4618      	mov	r0, r3
  40591a:	4b55      	ldr	r3, [pc, #340]	; (405a70 <inv_spi_master_init+0x300>)
  40591c:	4798      	blx	r3
	spi_set_master_mode(sm[spi_num].p_spi);
  40591e:	4a4c      	ldr	r2, [pc, #304]	; (405a50 <inv_spi_master_init+0x2e0>)
  405920:	687b      	ldr	r3, [r7, #4]
  405922:	f241 018c 	movw	r1, #4236	; 0x108c
  405926:	fb01 f303 	mul.w	r3, r1, r3
  40592a:	4413      	add	r3, r2
  40592c:	681b      	ldr	r3, [r3, #0]
  40592e:	4618      	mov	r0, r3
  405930:	4b50      	ldr	r3, [pc, #320]	; (405a74 <inv_spi_master_init+0x304>)
  405932:	4798      	blx	r3
	spi_disable_mode_fault_detect(sm[spi_num].p_spi);
  405934:	4a46      	ldr	r2, [pc, #280]	; (405a50 <inv_spi_master_init+0x2e0>)
  405936:	687b      	ldr	r3, [r7, #4]
  405938:	f241 018c 	movw	r1, #4236	; 0x108c
  40593c:	fb01 f303 	mul.w	r3, r1, r3
  405940:	4413      	add	r3, r2
  405942:	681b      	ldr	r3, [r3, #0]
  405944:	4618      	mov	r0, r3
  405946:	4b4c      	ldr	r3, [pc, #304]	; (405a78 <inv_spi_master_init+0x308>)
  405948:	4798      	blx	r3
	
	spi_configure_cs_behavior(sm[spi_num].p_spi, sm[spi_num].chip_sel, SPI_CS_RISE_NO_TX);
  40594a:	4a41      	ldr	r2, [pc, #260]	; (405a50 <inv_spi_master_init+0x2e0>)
  40594c:	687b      	ldr	r3, [r7, #4]
  40594e:	f241 018c 	movw	r1, #4236	; 0x108c
  405952:	fb01 f303 	mul.w	r3, r1, r3
  405956:	4413      	add	r3, r2
  405958:	6818      	ldr	r0, [r3, #0]
  40595a:	4a3d      	ldr	r2, [pc, #244]	; (405a50 <inv_spi_master_init+0x2e0>)
  40595c:	687b      	ldr	r3, [r7, #4]
  40595e:	f241 018c 	movw	r1, #4236	; 0x108c
  405962:	fb01 f303 	mul.w	r3, r1, r3
  405966:	4413      	add	r3, r2
  405968:	330c      	adds	r3, #12
  40596a:	681b      	ldr	r3, [r3, #0]
  40596c:	2200      	movs	r2, #0
  40596e:	4619      	mov	r1, r3
  405970:	4b42      	ldr	r3, [pc, #264]	; (405a7c <inv_spi_master_init+0x30c>)
  405972:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(sm[spi_num].p_spi, sm[spi_num].chip_sel);
  405974:	4a36      	ldr	r2, [pc, #216]	; (405a50 <inv_spi_master_init+0x2e0>)
  405976:	687b      	ldr	r3, [r7, #4]
  405978:	f241 018c 	movw	r1, #4236	; 0x108c
  40597c:	fb01 f303 	mul.w	r3, r1, r3
  405980:	4413      	add	r3, r2
  405982:	6818      	ldr	r0, [r3, #0]
  405984:	4a32      	ldr	r2, [pc, #200]	; (405a50 <inv_spi_master_init+0x2e0>)
  405986:	687b      	ldr	r3, [r7, #4]
  405988:	f241 018c 	movw	r1, #4236	; 0x108c
  40598c:	fb01 f303 	mul.w	r3, r1, r3
  405990:	4413      	add	r3, r2
  405992:	330c      	adds	r3, #12
  405994:	681b      	ldr	r3, [r3, #0]
  405996:	4619      	mov	r1, r3
  405998:	4b39      	ldr	r3, [pc, #228]	; (405a80 <inv_spi_master_init+0x310>)
  40599a:	4798      	blx	r3
	
	spi_set_clock_polarity(sm[spi_num].p_spi, sm[spi_num].chip_sel, sm[spi_num].clk_pol);
  40599c:	4a2c      	ldr	r2, [pc, #176]	; (405a50 <inv_spi_master_init+0x2e0>)
  40599e:	687b      	ldr	r3, [r7, #4]
  4059a0:	f241 018c 	movw	r1, #4236	; 0x108c
  4059a4:	fb01 f303 	mul.w	r3, r1, r3
  4059a8:	4413      	add	r3, r2
  4059aa:	6818      	ldr	r0, [r3, #0]
  4059ac:	4a28      	ldr	r2, [pc, #160]	; (405a50 <inv_spi_master_init+0x2e0>)
  4059ae:	687b      	ldr	r3, [r7, #4]
  4059b0:	f241 018c 	movw	r1, #4236	; 0x108c
  4059b4:	fb01 f303 	mul.w	r3, r1, r3
  4059b8:	4413      	add	r3, r2
  4059ba:	330c      	adds	r3, #12
  4059bc:	681c      	ldr	r4, [r3, #0]
  4059be:	4a24      	ldr	r2, [pc, #144]	; (405a50 <inv_spi_master_init+0x2e0>)
  4059c0:	687b      	ldr	r3, [r7, #4]
  4059c2:	f241 018c 	movw	r1, #4236	; 0x108c
  4059c6:	fb01 f303 	mul.w	r3, r1, r3
  4059ca:	4413      	add	r3, r2
  4059cc:	3310      	adds	r3, #16
  4059ce:	681b      	ldr	r3, [r3, #0]
  4059d0:	461a      	mov	r2, r3
  4059d2:	4621      	mov	r1, r4
  4059d4:	4b2b      	ldr	r3, [pc, #172]	; (405a84 <inv_spi_master_init+0x314>)
  4059d6:	4798      	blx	r3
	spi_set_clock_phase(sm[spi_num].p_spi, sm[spi_num].chip_sel, sm[spi_num].clk_ph);
  4059d8:	4a1d      	ldr	r2, [pc, #116]	; (405a50 <inv_spi_master_init+0x2e0>)
  4059da:	687b      	ldr	r3, [r7, #4]
  4059dc:	f241 018c 	movw	r1, #4236	; 0x108c
  4059e0:	fb01 f303 	mul.w	r3, r1, r3
  4059e4:	4413      	add	r3, r2
  4059e6:	6818      	ldr	r0, [r3, #0]
  4059e8:	4a19      	ldr	r2, [pc, #100]	; (405a50 <inv_spi_master_init+0x2e0>)
  4059ea:	687b      	ldr	r3, [r7, #4]
  4059ec:	f241 018c 	movw	r1, #4236	; 0x108c
  4059f0:	fb01 f303 	mul.w	r3, r1, r3
  4059f4:	4413      	add	r3, r2
  4059f6:	330c      	adds	r3, #12
  4059f8:	681c      	ldr	r4, [r3, #0]
  4059fa:	4a15      	ldr	r2, [pc, #84]	; (405a50 <inv_spi_master_init+0x2e0>)
  4059fc:	687b      	ldr	r3, [r7, #4]
  4059fe:	f241 018c 	movw	r1, #4236	; 0x108c
  405a02:	fb01 f303 	mul.w	r3, r1, r3
  405a06:	4413      	add	r3, r2
  405a08:	3314      	adds	r3, #20
  405a0a:	681b      	ldr	r3, [r3, #0]
  405a0c:	461a      	mov	r2, r3
  405a0e:	4621      	mov	r1, r4
  405a10:	4b1d      	ldr	r3, [pc, #116]	; (405a88 <inv_spi_master_init+0x318>)
  405a12:	4798      	blx	r3
	spi_set_bits_per_transfer(sm[spi_num].p_spi, sm[spi_num].chip_sel, SPI_CSR_BITS_8_BIT);
  405a14:	4a0e      	ldr	r2, [pc, #56]	; (405a50 <inv_spi_master_init+0x2e0>)
  405a16:	687b      	ldr	r3, [r7, #4]
  405a18:	f241 018c 	movw	r1, #4236	; 0x108c
  405a1c:	fb01 f303 	mul.w	r3, r1, r3
  405a20:	4413      	add	r3, r2
  405a22:	6818      	ldr	r0, [r3, #0]
  405a24:	4a0a      	ldr	r2, [pc, #40]	; (405a50 <inv_spi_master_init+0x2e0>)
  405a26:	687b      	ldr	r3, [r7, #4]
  405a28:	f241 018c 	movw	r1, #4236	; 0x108c
  405a2c:	fb01 f303 	mul.w	r3, r1, r3
  405a30:	4413      	add	r3, r2
  405a32:	330c      	adds	r3, #12
  405a34:	681b      	ldr	r3, [r3, #0]
  405a36:	2200      	movs	r2, #0
  405a38:	4619      	mov	r1, r3
  405a3a:	4b14      	ldr	r3, [pc, #80]	; (405a8c <inv_spi_master_init+0x31c>)
  405a3c:	4798      	blx	r3
	spi_set_baudrate_div(sm[spi_num].p_spi, sm[spi_num].chip_sel, 
  405a3e:	4a04      	ldr	r2, [pc, #16]	; (405a50 <inv_spi_master_init+0x2e0>)
  405a40:	687b      	ldr	r3, [r7, #4]
  405a42:	f241 018c 	movw	r1, #4236	; 0x108c
  405a46:	fb01 f303 	mul.w	r3, r1, r3
  405a4a:	4413      	add	r3, r2
  405a4c:	681c      	ldr	r4, [r3, #0]
  405a4e:	e01f      	b.n	405a90 <inv_spi_master_init+0x320>
  405a50:	20000214 	.word	0x20000214
  405a54:	0040554b 	.word	0x0040554b
  405a58:	00405501 	.word	0x00405501
  405a5c:	00405443 	.word	0x00405443
  405a60:	00407f49 	.word	0x00407f49
  405a64:	004080b1 	.word	0x004080b1
  405a68:	0040537d 	.word	0x0040537d
  405a6c:	00405349 	.word	0x00405349
  405a70:	00405397 	.word	0x00405397
  405a74:	004053b3 	.word	0x004053b3
  405a78:	004053d3 	.word	0x004053d3
  405a7c:	00408d01 	.word	0x00408d01
  405a80:	00408c2d 	.word	0x00408c2d
  405a84:	00408c61 	.word	0x00408c61
  405a88:	00408cb1 	.word	0x00408cb1
  405a8c:	00408da7 	.word	0x00408da7
  405a90:	4a31      	ldr	r2, [pc, #196]	; (405b58 <inv_spi_master_init+0x3e8>)
  405a92:	687b      	ldr	r3, [r7, #4]
  405a94:	f241 018c 	movw	r1, #4236	; 0x108c
  405a98:	fb01 f303 	mul.w	r3, r1, r3
  405a9c:	4413      	add	r3, r2
  405a9e:	330c      	adds	r3, #12
  405aa0:	681d      	ldr	r5, [r3, #0]
			(sysclk_get_peripheral_hz() / speed_hz));
  405aa2:	4b2e      	ldr	r3, [pc, #184]	; (405b5c <inv_spi_master_init+0x3ec>)
  405aa4:	4798      	blx	r3
  405aa6:	4602      	mov	r2, r0
  405aa8:	683b      	ldr	r3, [r7, #0]
  405aaa:	fbb2 f3f3 	udiv	r3, r2, r3
	spi_set_baudrate_div(sm[spi_num].p_spi, sm[spi_num].chip_sel, 
  405aae:	b2db      	uxtb	r3, r3
  405ab0:	461a      	mov	r2, r3
  405ab2:	4629      	mov	r1, r5
  405ab4:	4620      	mov	r0, r4
  405ab6:	4b2a      	ldr	r3, [pc, #168]	; (405b60 <inv_spi_master_init+0x3f0>)
  405ab8:	4798      	blx	r3
	spi_set_transfer_delay(sm[spi_num].p_spi, sm[spi_num].chip_sel, sm[spi_num].dlybs, 
  405aba:	4a27      	ldr	r2, [pc, #156]	; (405b58 <inv_spi_master_init+0x3e8>)
  405abc:	687b      	ldr	r3, [r7, #4]
  405abe:	f241 018c 	movw	r1, #4236	; 0x108c
  405ac2:	fb01 f303 	mul.w	r3, r1, r3
  405ac6:	4413      	add	r3, r2
  405ac8:	6818      	ldr	r0, [r3, #0]
  405aca:	4a23      	ldr	r2, [pc, #140]	; (405b58 <inv_spi_master_init+0x3e8>)
  405acc:	687b      	ldr	r3, [r7, #4]
  405ace:	f241 018c 	movw	r1, #4236	; 0x108c
  405ad2:	fb01 f303 	mul.w	r3, r1, r3
  405ad6:	4413      	add	r3, r2
  405ad8:	330c      	adds	r3, #12
  405ada:	681c      	ldr	r4, [r3, #0]
  405adc:	4a1e      	ldr	r2, [pc, #120]	; (405b58 <inv_spi_master_init+0x3e8>)
  405ade:	687b      	ldr	r3, [r7, #4]
  405ae0:	f241 018c 	movw	r1, #4236	; 0x108c
  405ae4:	fb01 f303 	mul.w	r3, r1, r3
  405ae8:	4413      	add	r3, r2
  405aea:	3318      	adds	r3, #24
  405aec:	781d      	ldrb	r5, [r3, #0]
  405aee:	4a1a      	ldr	r2, [pc, #104]	; (405b58 <inv_spi_master_init+0x3e8>)
  405af0:	687b      	ldr	r3, [r7, #4]
  405af2:	f241 018c 	movw	r1, #4236	; 0x108c
  405af6:	fb01 f303 	mul.w	r3, r1, r3
  405afa:	4413      	add	r3, r2
  405afc:	3319      	adds	r3, #25
  405afe:	781b      	ldrb	r3, [r3, #0]
  405b00:	462a      	mov	r2, r5
  405b02:	4621      	mov	r1, r4
  405b04:	4c17      	ldr	r4, [pc, #92]	; (405b64 <inv_spi_master_init+0x3f4>)
  405b06:	47a0      	blx	r4
			sm[spi_num].dlybct);

	spi_enable(sm[spi_num].p_spi);
  405b08:	4a13      	ldr	r2, [pc, #76]	; (405b58 <inv_spi_master_init+0x3e8>)
  405b0a:	687b      	ldr	r3, [r7, #4]
  405b0c:	f241 018c 	movw	r1, #4236	; 0x108c
  405b10:	fb01 f303 	mul.w	r3, r1, r3
  405b14:	4413      	add	r3, r2
  405b16:	681b      	ldr	r3, [r3, #0]
  405b18:	4618      	mov	r0, r3
  405b1a:	4b13      	ldr	r3, [pc, #76]	; (405b68 <inv_spi_master_init+0x3f8>)
  405b1c:	4798      	blx	r3

	pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  405b1e:	4a0e      	ldr	r2, [pc, #56]	; (405b58 <inv_spi_master_init+0x3e8>)
  405b20:	687b      	ldr	r3, [r7, #4]
  405b22:	f241 018c 	movw	r1, #4236	; 0x108c
  405b26:	fb01 f303 	mul.w	r3, r1, r3
  405b2a:	4413      	add	r3, r2
  405b2c:	3304      	adds	r3, #4
  405b2e:	681b      	ldr	r3, [r3, #0]
  405b30:	f240 2102 	movw	r1, #514	; 0x202
  405b34:	4618      	mov	r0, r3
  405b36:	4b0d      	ldr	r3, [pc, #52]	; (405b6c <inv_spi_master_init+0x3fc>)
  405b38:	4798      	blx	r3
	
	sm[spi_num].transfer_done_cb = 0;
  405b3a:	4a07      	ldr	r2, [pc, #28]	; (405b58 <inv_spi_master_init+0x3e8>)
  405b3c:	687b      	ldr	r3, [r7, #4]
  405b3e:	f241 018c 	movw	r1, #4236	; 0x108c
  405b42:	fb01 f303 	mul.w	r3, r1, r3
  405b46:	4413      	add	r3, r2
  405b48:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405b4c:	2200      	movs	r2, #0
  405b4e:	601a      	str	r2, [r3, #0]
}
  405b50:	bf00      	nop
  405b52:	3708      	adds	r7, #8
  405b54:	46bd      	mov	sp, r7
  405b56:	bdb0      	pop	{r4, r5, r7, pc}
  405b58:	20000214 	.word	0x20000214
  405b5c:	004054ed 	.word	0x004054ed
  405b60:	00408df1 	.word	0x00408df1
  405b64:	00408e4f 	.word	0x00408e4f
  405b68:	00405363 	.word	0x00405363
  405b6c:	00408199 	.word	0x00408199

00405b70 <inv_spi_master_write_register>:
	NVIC_ClearPendingIRQ(sm[spi_num].irqn);
}

unsigned long inv_spi_master_write_register(unsigned spi_num, unsigned char register_addr,
		unsigned short len, const unsigned char *value)
{
  405b70:	b580      	push	{r7, lr}
  405b72:	b086      	sub	sp, #24
  405b74:	af00      	add	r7, sp, #0
  405b76:	60f8      	str	r0, [r7, #12]
  405b78:	607b      	str	r3, [r7, #4]
  405b7a:	460b      	mov	r3, r1
  405b7c:	72fb      	strb	r3, [r7, #11]
  405b7e:	4613      	mov	r3, r2
  405b80:	813b      	strh	r3, [r7, #8]
	if(len+1 > SPI_BUFFER_SIZE)
  405b82:	893b      	ldrh	r3, [r7, #8]
  405b84:	3301      	adds	r3, #1
  405b86:	f5b3 6f02 	cmp.w	r3, #2080	; 0x820
  405b8a:	dd01      	ble.n	405b90 <inv_spi_master_write_register+0x20>
		return 1;
  405b8c:	2301      	movs	r3, #1
  405b8e:	e082      	b.n	405c96 <inv_spi_master_write_register+0x126>
	
	pdc_packet_t pdc_spi_packet;
	
	/* Desactivate Irq during buffer write*/
	inv_disable_irq();
  405b90:	4b43      	ldr	r3, [pc, #268]	; (405ca0 <inv_spi_master_write_register+0x130>)
  405b92:	4798      	blx	r3
	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].rx_buffer[0];
  405b94:	68fb      	ldr	r3, [r7, #12]
  405b96:	f241 028c 	movw	r2, #4236	; 0x108c
  405b9a:	fb02 f303 	mul.w	r3, r2, r3
  405b9e:	f603 0358 	addw	r3, r3, #2136	; 0x858
  405ba2:	4a40      	ldr	r2, [pc, #256]	; (405ca4 <inv_spi_master_write_register+0x134>)
  405ba4:	4413      	add	r3, r2
  405ba6:	3304      	adds	r3, #4
  405ba8:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  405baa:	893b      	ldrh	r3, [r7, #8]
  405bac:	3301      	adds	r3, #1
  405bae:	617b      	str	r3, [r7, #20]
	pdc_rx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  405bb0:	4a3c      	ldr	r2, [pc, #240]	; (405ca4 <inv_spi_master_write_register+0x134>)
  405bb2:	68fb      	ldr	r3, [r7, #12]
  405bb4:	f241 018c 	movw	r1, #4236	; 0x108c
  405bb8:	fb01 f303 	mul.w	r3, r1, r3
  405bbc:	4413      	add	r3, r2
  405bbe:	3304      	adds	r3, #4
  405bc0:	681b      	ldr	r3, [r3, #0]
  405bc2:	f107 0110 	add.w	r1, r7, #16
  405bc6:	2200      	movs	r2, #0
  405bc8:	4618      	mov	r0, r3
  405bca:	4b37      	ldr	r3, [pc, #220]	; (405ca8 <inv_spi_master_write_register+0x138>)
  405bcc:	4798      	blx	r3

	sm[spi_num].tx_buffer[0] = (uint8_t) register_addr;
  405bce:	4a35      	ldr	r2, [pc, #212]	; (405ca4 <inv_spi_master_write_register+0x134>)
  405bd0:	68fb      	ldr	r3, [r7, #12]
  405bd2:	f241 018c 	movw	r1, #4236	; 0x108c
  405bd6:	fb01 f303 	mul.w	r3, r1, r3
  405bda:	4413      	add	r3, r2
  405bdc:	333c      	adds	r3, #60	; 0x3c
  405bde:	7afa      	ldrb	r2, [r7, #11]
  405be0:	701a      	strb	r2, [r3, #0]
	memcpy(&sm[spi_num].tx_buffer[1], (uint8_t *)value, len);
  405be2:	68fb      	ldr	r3, [r7, #12]
  405be4:	f241 028c 	movw	r2, #4236	; 0x108c
  405be8:	fb02 f303 	mul.w	r3, r2, r3
  405bec:	3339      	adds	r3, #57	; 0x39
  405bee:	4a2d      	ldr	r2, [pc, #180]	; (405ca4 <inv_spi_master_write_register+0x134>)
  405bf0:	4413      	add	r3, r2
  405bf2:	3304      	adds	r3, #4
  405bf4:	893a      	ldrh	r2, [r7, #8]
  405bf6:	6879      	ldr	r1, [r7, #4]
  405bf8:	4618      	mov	r0, r3
  405bfa:	4b2c      	ldr	r3, [pc, #176]	; (405cac <inv_spi_master_write_register+0x13c>)
  405bfc:	4798      	blx	r3

	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].tx_buffer[0];
  405bfe:	68fb      	ldr	r3, [r7, #12]
  405c00:	f241 028c 	movw	r2, #4236	; 0x108c
  405c04:	fb02 f303 	mul.w	r3, r2, r3
  405c08:	3338      	adds	r3, #56	; 0x38
  405c0a:	4a26      	ldr	r2, [pc, #152]	; (405ca4 <inv_spi_master_write_register+0x134>)
  405c0c:	4413      	add	r3, r2
  405c0e:	3304      	adds	r3, #4
  405c10:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  405c12:	893b      	ldrh	r3, [r7, #8]
  405c14:	3301      	adds	r3, #1
  405c16:	617b      	str	r3, [r7, #20]
	pdc_tx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  405c18:	4a22      	ldr	r2, [pc, #136]	; (405ca4 <inv_spi_master_write_register+0x134>)
  405c1a:	68fb      	ldr	r3, [r7, #12]
  405c1c:	f241 018c 	movw	r1, #4236	; 0x108c
  405c20:	fb01 f303 	mul.w	r3, r1, r3
  405c24:	4413      	add	r3, r2
  405c26:	3304      	adds	r3, #4
  405c28:	681b      	ldr	r3, [r3, #0]
  405c2a:	f107 0110 	add.w	r1, r7, #16
  405c2e:	2200      	movs	r2, #0
  405c30:	4618      	mov	r0, r3
  405c32:	4b1f      	ldr	r3, [pc, #124]	; (405cb0 <inv_spi_master_write_register+0x140>)
  405c34:	4798      	blx	r3
	
	/* Enable the RX and TX PDC transfer requests */
	pdc_enable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  405c36:	4a1b      	ldr	r2, [pc, #108]	; (405ca4 <inv_spi_master_write_register+0x134>)
  405c38:	68fb      	ldr	r3, [r7, #12]
  405c3a:	f241 018c 	movw	r1, #4236	; 0x108c
  405c3e:	fb01 f303 	mul.w	r3, r1, r3
  405c42:	4413      	add	r3, r2
  405c44:	3304      	adds	r3, #4
  405c46:	681b      	ldr	r3, [r3, #0]
  405c48:	f240 1101 	movw	r1, #257	; 0x101
  405c4c:	4618      	mov	r0, r3
  405c4e:	4b19      	ldr	r3, [pc, #100]	; (405cb4 <inv_spi_master_write_register+0x144>)
  405c50:	4798      	blx	r3
	/* Re activate Irq */
	inv_enable_irq();
  405c52:	4b19      	ldr	r3, [pc, #100]	; (405cb8 <inv_spi_master_write_register+0x148>)
  405c54:	4798      	blx	r3
	/* Waiting transfer done*/
	while((spi_read_status(sm[spi_num].p_spi) & SPI_SR_TXEMPTY) == 0);
  405c56:	bf00      	nop
  405c58:	4a12      	ldr	r2, [pc, #72]	; (405ca4 <inv_spi_master_write_register+0x134>)
  405c5a:	68fb      	ldr	r3, [r7, #12]
  405c5c:	f241 018c 	movw	r1, #4236	; 0x108c
  405c60:	fb01 f303 	mul.w	r3, r1, r3
  405c64:	4413      	add	r3, r2
  405c66:	681b      	ldr	r3, [r3, #0]
  405c68:	4618      	mov	r0, r3
  405c6a:	4b14      	ldr	r3, [pc, #80]	; (405cbc <inv_spi_master_write_register+0x14c>)
  405c6c:	4798      	blx	r3
  405c6e:	4603      	mov	r3, r0
  405c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
  405c74:	2b00      	cmp	r3, #0
  405c76:	d0ef      	beq.n	405c58 <inv_spi_master_write_register+0xe8>
		
	/* Disable the RX and TX PDC transfer requests */
	pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS |
  405c78:	4a0a      	ldr	r2, [pc, #40]	; (405ca4 <inv_spi_master_write_register+0x134>)
  405c7a:	68fb      	ldr	r3, [r7, #12]
  405c7c:	f241 018c 	movw	r1, #4236	; 0x108c
  405c80:	fb01 f303 	mul.w	r3, r1, r3
  405c84:	4413      	add	r3, r2
  405c86:	3304      	adds	r3, #4
  405c88:	681b      	ldr	r3, [r3, #0]
  405c8a:	f240 2102 	movw	r1, #514	; 0x202
  405c8e:	4618      	mov	r0, r3
  405c90:	4b0b      	ldr	r3, [pc, #44]	; (405cc0 <inv_spi_master_write_register+0x150>)
  405c92:	4798      	blx	r3
			PERIPH_PTCR_TXTDIS);
	
	return 0;
  405c94:	2300      	movs	r3, #0
}
  405c96:	4618      	mov	r0, r3
  405c98:	3718      	adds	r7, #24
  405c9a:	46bd      	mov	sp, r7
  405c9c:	bd80      	pop	{r7, pc}
  405c9e:	bf00      	nop
  405ca0:	00404949 	.word	0x00404949
  405ca4:	20000214 	.word	0x20000214
  405ca8:	00408113 	.word	0x00408113
  405cac:	0040f841 	.word	0x0040f841
  405cb0:	004080cf 	.word	0x004080cf
  405cb4:	00408177 	.word	0x00408177
  405cb8:	00404971 	.word	0x00404971
  405cbc:	004053f3 	.word	0x004053f3
  405cc0:	00408199 	.word	0x00408199

00405cc4 <inv_spi_master_read_register>:

unsigned long inv_spi_master_read_register(unsigned spi_num, unsigned char register_addr,
		unsigned short len, unsigned char *value)
{
  405cc4:	b580      	push	{r7, lr}
  405cc6:	b086      	sub	sp, #24
  405cc8:	af00      	add	r7, sp, #0
  405cca:	60f8      	str	r0, [r7, #12]
  405ccc:	607b      	str	r3, [r7, #4]
  405cce:	460b      	mov	r3, r1
  405cd0:	72fb      	strb	r3, [r7, #11]
  405cd2:	4613      	mov	r3, r2
  405cd4:	813b      	strh	r3, [r7, #8]
	if(len+1 > SPI_BUFFER_SIZE)
  405cd6:	893b      	ldrh	r3, [r7, #8]
  405cd8:	3301      	adds	r3, #1
  405cda:	f5b3 6f02 	cmp.w	r3, #2080	; 0x820
  405cde:	dd01      	ble.n	405ce4 <inv_spi_master_read_register+0x20>
		return 1;
  405ce0:	2301      	movs	r3, #1
  405ce2:	e0ec      	b.n	405ebe <inv_spi_master_read_register+0x1fa>
	
	pdc_packet_t pdc_spi_packet;
	
	if(sm[spi_num].transfer_done_cb)
  405ce4:	4a78      	ldr	r2, [pc, #480]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405ce6:	68fb      	ldr	r3, [r7, #12]
  405ce8:	f241 018c 	movw	r1, #4236	; 0x108c
  405cec:	fb01 f303 	mul.w	r3, r1, r3
  405cf0:	4413      	add	r3, r2
  405cf2:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405cf6:	681b      	ldr	r3, [r3, #0]
  405cf8:	2b00      	cmp	r3, #0
  405cfa:	d00b      	beq.n	405d14 <inv_spi_master_read_register+0x50>
		pdc_rx_clear_cnt(sm[spi_num].p_pdc);
  405cfc:	4a72      	ldr	r2, [pc, #456]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405cfe:	68fb      	ldr	r3, [r7, #12]
  405d00:	f241 018c 	movw	r1, #4236	; 0x108c
  405d04:	fb01 f303 	mul.w	r3, r1, r3
  405d08:	4413      	add	r3, r2
  405d0a:	3304      	adds	r3, #4
  405d0c:	681b      	ldr	r3, [r3, #0]
  405d0e:	4618      	mov	r0, r3
  405d10:	4b6e      	ldr	r3, [pc, #440]	; (405ecc <inv_spi_master_read_register+0x208>)
  405d12:	4798      	blx	r3
	/* Desactivate Irq during buffer write*/
	inv_disable_irq();
  405d14:	4b6e      	ldr	r3, [pc, #440]	; (405ed0 <inv_spi_master_read_register+0x20c>)
  405d16:	4798      	blx	r3
	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].rx_buffer[0];
  405d18:	68fb      	ldr	r3, [r7, #12]
  405d1a:	f241 028c 	movw	r2, #4236	; 0x108c
  405d1e:	fb02 f303 	mul.w	r3, r2, r3
  405d22:	f603 0358 	addw	r3, r3, #2136	; 0x858
  405d26:	4a68      	ldr	r2, [pc, #416]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405d28:	4413      	add	r3, r2
  405d2a:	3304      	adds	r3, #4
  405d2c:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  405d2e:	893b      	ldrh	r3, [r7, #8]
  405d30:	3301      	adds	r3, #1
  405d32:	617b      	str	r3, [r7, #20]
	pdc_rx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  405d34:	4a64      	ldr	r2, [pc, #400]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405d36:	68fb      	ldr	r3, [r7, #12]
  405d38:	f241 018c 	movw	r1, #4236	; 0x108c
  405d3c:	fb01 f303 	mul.w	r3, r1, r3
  405d40:	4413      	add	r3, r2
  405d42:	3304      	adds	r3, #4
  405d44:	681b      	ldr	r3, [r3, #0]
  405d46:	f107 0110 	add.w	r1, r7, #16
  405d4a:	2200      	movs	r2, #0
  405d4c:	4618      	mov	r0, r3
  405d4e:	4b61      	ldr	r3, [pc, #388]	; (405ed4 <inv_spi_master_read_register+0x210>)
  405d50:	4798      	blx	r3
	
	sm[spi_num].tx_buffer[0] = (uint8_t) register_addr | 0x80;
  405d52:	7afb      	ldrb	r3, [r7, #11]
  405d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405d58:	b2d8      	uxtb	r0, r3
  405d5a:	4a5b      	ldr	r2, [pc, #364]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405d5c:	68fb      	ldr	r3, [r7, #12]
  405d5e:	f241 018c 	movw	r1, #4236	; 0x108c
  405d62:	fb01 f303 	mul.w	r3, r1, r3
  405d66:	4413      	add	r3, r2
  405d68:	333c      	adds	r3, #60	; 0x3c
  405d6a:	4602      	mov	r2, r0
  405d6c:	701a      	strb	r2, [r3, #0]
	memset(&sm[spi_num].tx_buffer[1], 0x00, len);
  405d6e:	68fb      	ldr	r3, [r7, #12]
  405d70:	f241 028c 	movw	r2, #4236	; 0x108c
  405d74:	fb02 f303 	mul.w	r3, r2, r3
  405d78:	3339      	adds	r3, #57	; 0x39
  405d7a:	4a53      	ldr	r2, [pc, #332]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405d7c:	4413      	add	r3, r2
  405d7e:	3304      	adds	r3, #4
  405d80:	893a      	ldrh	r2, [r7, #8]
  405d82:	2100      	movs	r1, #0
  405d84:	4618      	mov	r0, r3
  405d86:	4b54      	ldr	r3, [pc, #336]	; (405ed8 <inv_spi_master_read_register+0x214>)
  405d88:	4798      	blx	r3

	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].tx_buffer[0];
  405d8a:	68fb      	ldr	r3, [r7, #12]
  405d8c:	f241 028c 	movw	r2, #4236	; 0x108c
  405d90:	fb02 f303 	mul.w	r3, r2, r3
  405d94:	3338      	adds	r3, #56	; 0x38
  405d96:	4a4c      	ldr	r2, [pc, #304]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405d98:	4413      	add	r3, r2
  405d9a:	3304      	adds	r3, #4
  405d9c:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  405d9e:	893b      	ldrh	r3, [r7, #8]
  405da0:	3301      	adds	r3, #1
  405da2:	617b      	str	r3, [r7, #20]
	pdc_tx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  405da4:	4a48      	ldr	r2, [pc, #288]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405da6:	68fb      	ldr	r3, [r7, #12]
  405da8:	f241 018c 	movw	r1, #4236	; 0x108c
  405dac:	fb01 f303 	mul.w	r3, r1, r3
  405db0:	4413      	add	r3, r2
  405db2:	3304      	adds	r3, #4
  405db4:	681b      	ldr	r3, [r3, #0]
  405db6:	f107 0110 	add.w	r1, r7, #16
  405dba:	2200      	movs	r2, #0
  405dbc:	4618      	mov	r0, r3
  405dbe:	4b47      	ldr	r3, [pc, #284]	; (405edc <inv_spi_master_read_register+0x218>)
  405dc0:	4798      	blx	r3
	/* Re activate Irq */
	inv_enable_irq();
  405dc2:	4b47      	ldr	r3, [pc, #284]	; (405ee0 <inv_spi_master_read_register+0x21c>)
  405dc4:	4798      	blx	r3

	if (sm[spi_num].transfer_done_cb == 0) {
  405dc6:	4a40      	ldr	r2, [pc, #256]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405dc8:	68fb      	ldr	r3, [r7, #12]
  405dca:	f241 018c 	movw	r1, #4236	; 0x108c
  405dce:	fb01 f303 	mul.w	r3, r1, r3
  405dd2:	4413      	add	r3, r2
  405dd4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405dd8:	681b      	ldr	r3, [r3, #0]
  405dda:	2b00      	cmp	r3, #0
  405ddc:	d13c      	bne.n	405e58 <inv_spi_master_read_register+0x194>
		/* Enable the RX and TX PDC transfer requests */
		pdc_enable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  405dde:	4a3a      	ldr	r2, [pc, #232]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405de0:	68fb      	ldr	r3, [r7, #12]
  405de2:	f241 018c 	movw	r1, #4236	; 0x108c
  405de6:	fb01 f303 	mul.w	r3, r1, r3
  405dea:	4413      	add	r3, r2
  405dec:	3304      	adds	r3, #4
  405dee:	681b      	ldr	r3, [r3, #0]
  405df0:	f240 1101 	movw	r1, #257	; 0x101
  405df4:	4618      	mov	r0, r3
  405df6:	4b3b      	ldr	r3, [pc, #236]	; (405ee4 <inv_spi_master_read_register+0x220>)
  405df8:	4798      	blx	r3
		
		/* Waiting transfer done*/
		while((spi_read_status(sm[spi_num].p_spi) & SPI_SR_ENDRX) == 0);
  405dfa:	bf00      	nop
  405dfc:	4a32      	ldr	r2, [pc, #200]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405dfe:	68fb      	ldr	r3, [r7, #12]
  405e00:	f241 018c 	movw	r1, #4236	; 0x108c
  405e04:	fb01 f303 	mul.w	r3, r1, r3
  405e08:	4413      	add	r3, r2
  405e0a:	681b      	ldr	r3, [r3, #0]
  405e0c:	4618      	mov	r0, r3
  405e0e:	4b36      	ldr	r3, [pc, #216]	; (405ee8 <inv_spi_master_read_register+0x224>)
  405e10:	4798      	blx	r3
  405e12:	4603      	mov	r3, r0
  405e14:	f003 0310 	and.w	r3, r3, #16
  405e18:	2b00      	cmp	r3, #0
  405e1a:	d0ef      	beq.n	405dfc <inv_spi_master_read_register+0x138>
		
		/* Disable the RX and TX PDC transfer requests */
		pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS |
  405e1c:	4a2a      	ldr	r2, [pc, #168]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405e1e:	68fb      	ldr	r3, [r7, #12]
  405e20:	f241 018c 	movw	r1, #4236	; 0x108c
  405e24:	fb01 f303 	mul.w	r3, r1, r3
  405e28:	4413      	add	r3, r2
  405e2a:	3304      	adds	r3, #4
  405e2c:	681b      	ldr	r3, [r3, #0]
  405e2e:	f240 2102 	movw	r1, #514	; 0x202
  405e32:	4618      	mov	r0, r3
  405e34:	4b2d      	ldr	r3, [pc, #180]	; (405eec <inv_spi_master_read_register+0x228>)
  405e36:	4798      	blx	r3
				PERIPH_PTCR_TXTDIS);
				
		memcpy(value, &sm[spi_num].rx_buffer[1], len);
  405e38:	68fb      	ldr	r3, [r7, #12]
  405e3a:	f241 028c 	movw	r2, #4236	; 0x108c
  405e3e:	fb02 f303 	mul.w	r3, r2, r3
  405e42:	f603 0359 	addw	r3, r3, #2137	; 0x859
  405e46:	4a20      	ldr	r2, [pc, #128]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405e48:	4413      	add	r3, r2
  405e4a:	3304      	adds	r3, #4
  405e4c:	893a      	ldrh	r2, [r7, #8]
  405e4e:	4619      	mov	r1, r3
  405e50:	6878      	ldr	r0, [r7, #4]
  405e52:	4b27      	ldr	r3, [pc, #156]	; (405ef0 <inv_spi_master_read_register+0x22c>)
  405e54:	4798      	blx	r3
  405e56:	e031      	b.n	405ebc <inv_spi_master_read_register+0x1f8>
	} else {
		sm[spi_num].rx_dest_addr = value;
  405e58:	4a1b      	ldr	r2, [pc, #108]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405e5a:	68fb      	ldr	r3, [r7, #12]
  405e5c:	f241 018c 	movw	r1, #4236	; 0x108c
  405e60:	fb01 f303 	mul.w	r3, r1, r3
  405e64:	4413      	add	r3, r2
  405e66:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405e6a:	3304      	adds	r3, #4
  405e6c:	687a      	ldr	r2, [r7, #4]
  405e6e:	601a      	str	r2, [r3, #0]
		sm[spi_num].rx_len = len;
  405e70:	4a15      	ldr	r2, [pc, #84]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405e72:	68fb      	ldr	r3, [r7, #12]
  405e74:	f241 018c 	movw	r1, #4236	; 0x108c
  405e78:	fb01 f303 	mul.w	r3, r1, r3
  405e7c:	4413      	add	r3, r2
  405e7e:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405e82:	3308      	adds	r3, #8
  405e84:	893a      	ldrh	r2, [r7, #8]
  405e86:	801a      	strh	r2, [r3, #0]

		/* Transfer done handler is in ISR */
		spi_enable_interrupt(sm[spi_num].p_spi, SPI_IER_RXBUFF) ;
  405e88:	4a0f      	ldr	r2, [pc, #60]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405e8a:	68fb      	ldr	r3, [r7, #12]
  405e8c:	f241 018c 	movw	r1, #4236	; 0x108c
  405e90:	fb01 f303 	mul.w	r3, r1, r3
  405e94:	4413      	add	r3, r2
  405e96:	681b      	ldr	r3, [r3, #0]
  405e98:	2140      	movs	r1, #64	; 0x40
  405e9a:	4618      	mov	r0, r3
  405e9c:	4b15      	ldr	r3, [pc, #84]	; (405ef4 <inv_spi_master_read_register+0x230>)
  405e9e:	4798      	blx	r3

		/* Enable the RX and TX PDC transfer requests */
		pdc_enable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  405ea0:	4a09      	ldr	r2, [pc, #36]	; (405ec8 <inv_spi_master_read_register+0x204>)
  405ea2:	68fb      	ldr	r3, [r7, #12]
  405ea4:	f241 018c 	movw	r1, #4236	; 0x108c
  405ea8:	fb01 f303 	mul.w	r3, r1, r3
  405eac:	4413      	add	r3, r2
  405eae:	3304      	adds	r3, #4
  405eb0:	681b      	ldr	r3, [r3, #0]
  405eb2:	f240 1101 	movw	r1, #257	; 0x101
  405eb6:	4618      	mov	r0, r3
  405eb8:	4b0a      	ldr	r3, [pc, #40]	; (405ee4 <inv_spi_master_read_register+0x220>)
  405eba:	4798      	blx	r3
	}

	return 0;
  405ebc:	2300      	movs	r3, #0
}
  405ebe:	4618      	mov	r0, r3
  405ec0:	3718      	adds	r7, #24
  405ec2:	46bd      	mov	sp, r7
  405ec4:	bd80      	pop	{r7, pc}
  405ec6:	bf00      	nop
  405ec8:	20000214 	.word	0x20000214
  405ecc:	00408157 	.word	0x00408157
  405ed0:	00404949 	.word	0x00404949
  405ed4:	00408113 	.word	0x00408113
  405ed8:	0040fa3d 	.word	0x0040fa3d
  405edc:	004080cf 	.word	0x004080cf
  405ee0:	00404971 	.word	0x00404971
  405ee4:	00408177 	.word	0x00408177
  405ee8:	004053f3 	.word	0x004053f3
  405eec:	00408199 	.word	0x00408199
  405ef0:	0040f841 	.word	0x0040f841
  405ef4:	0040540b 	.word	0x0040540b

00405ef8 <FLEXCOM5_Handler>:
	}
}


void FLEXCOM5_Handler(void)
{
  405ef8:	b580      	push	{r7, lr}
  405efa:	af00      	add	r7, sp, #0
#ifdef INV_SENSOR_DB
	spi_master_irq_handler(INV_SPI_DB);
#else
	spi_master_irq_handler(INV_SPI_ONBOARD);
  405efc:	2001      	movs	r0, #1
  405efe:	4b02      	ldr	r3, [pc, #8]	; (405f08 <FLEXCOM5_Handler+0x10>)
  405f00:	4798      	blx	r3
#endif
}
  405f02:	bf00      	nop
  405f04:	bd80      	pop	{r7, pc}
  405f06:	bf00      	nop
  405f08:	00405669 	.word	0x00405669

00405f0c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  405f0c:	b580      	push	{r7, lr}
  405f0e:	af00      	add	r7, sp, #0
	if(sSystick_irq_handler_cb != 0)
  405f10:	4b04      	ldr	r3, [pc, #16]	; (405f24 <SysTick_Handler+0x18>)
  405f12:	681b      	ldr	r3, [r3, #0]
  405f14:	2b00      	cmp	r3, #0
  405f16:	d002      	beq.n	405f1e <SysTick_Handler+0x12>
		sSystick_irq_handler_cb();
  405f18:	4b02      	ldr	r3, [pc, #8]	; (405f24 <SysTick_Handler+0x18>)
  405f1a:	681b      	ldr	r3, [r3, #0]
  405f1c:	4798      	blx	r3
}
  405f1e:	bf00      	nop
  405f20:	bd80      	pop	{r7, pc}
  405f22:	bf00      	nop
  405f24:	20003a90 	.word	0x20003a90

00405f28 <NVIC_EnableIRQ>:
{
  405f28:	b480      	push	{r7}
  405f2a:	b083      	sub	sp, #12
  405f2c:	af00      	add	r7, sp, #0
  405f2e:	4603      	mov	r3, r0
  405f30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405f32:	4909      	ldr	r1, [pc, #36]	; (405f58 <NVIC_EnableIRQ+0x30>)
  405f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405f38:	095b      	lsrs	r3, r3, #5
  405f3a:	79fa      	ldrb	r2, [r7, #7]
  405f3c:	f002 021f 	and.w	r2, r2, #31
  405f40:	2001      	movs	r0, #1
  405f42:	fa00 f202 	lsl.w	r2, r0, r2
  405f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405f4a:	bf00      	nop
  405f4c:	370c      	adds	r7, #12
  405f4e:	46bd      	mov	sp, r7
  405f50:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f54:	4770      	bx	lr
  405f56:	bf00      	nop
  405f58:	e000e100 	.word	0xe000e100

00405f5c <NVIC_DisableIRQ>:
{
  405f5c:	b480      	push	{r7}
  405f5e:	b083      	sub	sp, #12
  405f60:	af00      	add	r7, sp, #0
  405f62:	4603      	mov	r3, r0
  405f64:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405f66:	4909      	ldr	r1, [pc, #36]	; (405f8c <NVIC_DisableIRQ+0x30>)
  405f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405f6c:	095b      	lsrs	r3, r3, #5
  405f6e:	79fa      	ldrb	r2, [r7, #7]
  405f70:	f002 021f 	and.w	r2, r2, #31
  405f74:	2001      	movs	r0, #1
  405f76:	fa00 f202 	lsl.w	r2, r0, r2
  405f7a:	3320      	adds	r3, #32
  405f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405f80:	bf00      	nop
  405f82:	370c      	adds	r7, #12
  405f84:	46bd      	mov	sp, r7
  405f86:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f8a:	4770      	bx	lr
  405f8c:	e000e100 	.word	0xe000e100

00405f90 <NVIC_ClearPendingIRQ>:
{
  405f90:	b480      	push	{r7}
  405f92:	b083      	sub	sp, #12
  405f94:	af00      	add	r7, sp, #0
  405f96:	4603      	mov	r3, r0
  405f98:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405f9a:	4909      	ldr	r1, [pc, #36]	; (405fc0 <NVIC_ClearPendingIRQ+0x30>)
  405f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405fa0:	095b      	lsrs	r3, r3, #5
  405fa2:	79fa      	ldrb	r2, [r7, #7]
  405fa4:	f002 021f 	and.w	r2, r2, #31
  405fa8:	2001      	movs	r0, #1
  405faa:	fa00 f202 	lsl.w	r2, r0, r2
  405fae:	3360      	adds	r3, #96	; 0x60
  405fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405fb4:	bf00      	nop
  405fb6:	370c      	adds	r7, #12
  405fb8:	46bd      	mov	sp, r7
  405fba:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fbe:	4770      	bx	lr
  405fc0:	e000e100 	.word	0xe000e100

00405fc4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  405fc4:	b480      	push	{r7}
  405fc6:	b083      	sub	sp, #12
  405fc8:	af00      	add	r7, sp, #0
  405fca:	4603      	mov	r3, r0
  405fcc:	6039      	str	r1, [r7, #0]
  405fce:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  405fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405fd4:	2b00      	cmp	r3, #0
  405fd6:	da0b      	bge.n	405ff0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  405fd8:	490d      	ldr	r1, [pc, #52]	; (406010 <NVIC_SetPriority+0x4c>)
  405fda:	79fb      	ldrb	r3, [r7, #7]
  405fdc:	f003 030f 	and.w	r3, r3, #15
  405fe0:	3b04      	subs	r3, #4
  405fe2:	683a      	ldr	r2, [r7, #0]
  405fe4:	b2d2      	uxtb	r2, r2
  405fe6:	0112      	lsls	r2, r2, #4
  405fe8:	b2d2      	uxtb	r2, r2
  405fea:	440b      	add	r3, r1
  405fec:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  405fee:	e009      	b.n	406004 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  405ff0:	4908      	ldr	r1, [pc, #32]	; (406014 <NVIC_SetPriority+0x50>)
  405ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405ff6:	683a      	ldr	r2, [r7, #0]
  405ff8:	b2d2      	uxtb	r2, r2
  405ffa:	0112      	lsls	r2, r2, #4
  405ffc:	b2d2      	uxtb	r2, r2
  405ffe:	440b      	add	r3, r1
  406000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  406004:	bf00      	nop
  406006:	370c      	adds	r7, #12
  406008:	46bd      	mov	sp, r7
  40600a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40600e:	4770      	bx	lr
  406010:	e000ed00 	.word	0xe000ed00
  406014:	e000e100 	.word	0xe000e100

00406018 <osc_get_rate>:
{
  406018:	b480      	push	{r7}
  40601a:	b083      	sub	sp, #12
  40601c:	af00      	add	r7, sp, #0
  40601e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  406020:	687b      	ldr	r3, [r7, #4]
  406022:	2b07      	cmp	r3, #7
  406024:	d825      	bhi.n	406072 <osc_get_rate+0x5a>
  406026:	a201      	add	r2, pc, #4	; (adr r2, 40602c <osc_get_rate+0x14>)
  406028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40602c:	0040604d 	.word	0x0040604d
  406030:	00406053 	.word	0x00406053
  406034:	00406059 	.word	0x00406059
  406038:	0040605f 	.word	0x0040605f
  40603c:	00406063 	.word	0x00406063
  406040:	00406067 	.word	0x00406067
  406044:	0040606b 	.word	0x0040606b
  406048:	0040606f 	.word	0x0040606f
		return OSC_SLCK_32K_RC_HZ;
  40604c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  406050:	e010      	b.n	406074 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  406052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406056:	e00d      	b.n	406074 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  406058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40605c:	e00a      	b.n	406074 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40605e:	4b08      	ldr	r3, [pc, #32]	; (406080 <osc_get_rate+0x68>)
  406060:	e008      	b.n	406074 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  406062:	4b08      	ldr	r3, [pc, #32]	; (406084 <osc_get_rate+0x6c>)
  406064:	e006      	b.n	406074 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  406066:	4b08      	ldr	r3, [pc, #32]	; (406088 <osc_get_rate+0x70>)
  406068:	e004      	b.n	406074 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40606a:	2300      	movs	r3, #0
  40606c:	e002      	b.n	406074 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40606e:	2300      	movs	r3, #0
  406070:	e000      	b.n	406074 <osc_get_rate+0x5c>
	return 0;
  406072:	2300      	movs	r3, #0
}
  406074:	4618      	mov	r0, r3
  406076:	370c      	adds	r7, #12
  406078:	46bd      	mov	sp, r7
  40607a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40607e:	4770      	bx	lr
  406080:	007a1200 	.word	0x007a1200
  406084:	00f42400 	.word	0x00f42400
  406088:	016e3600 	.word	0x016e3600

0040608c <sysclk_get_main_hz>:
{
  40608c:	b580      	push	{r7, lr}
  40608e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  406090:	2001      	movs	r0, #1
  406092:	4b04      	ldr	r3, [pc, #16]	; (4060a4 <sysclk_get_main_hz+0x18>)
  406094:	4798      	blx	r3
  406096:	4602      	mov	r2, r0
  406098:	f640 634e 	movw	r3, #3662	; 0xe4e
  40609c:	fb03 f302 	mul.w	r3, r3, r2
}
  4060a0:	4618      	mov	r0, r3
  4060a2:	bd80      	pop	{r7, pc}
  4060a4:	00406019 	.word	0x00406019

004060a8 <sysclk_get_peripheral_hz>:
{
  4060a8:	b580      	push	{r7, lr}
  4060aa:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4060ac:	4b02      	ldr	r3, [pc, #8]	; (4060b8 <sysclk_get_peripheral_hz+0x10>)
  4060ae:	4798      	blx	r3
  4060b0:	4603      	mov	r3, r0
}
  4060b2:	4618      	mov	r0, r3
  4060b4:	bd80      	pop	{r7, pc}
  4060b6:	bf00      	nop
  4060b8:	0040608d 	.word	0x0040608d

004060bc <sysclk_get_peripheral_bus_hz>:
{
  4060bc:	b580      	push	{r7, lr}
  4060be:	b082      	sub	sp, #8
  4060c0:	af00      	add	r7, sp, #0
  4060c2:	6078      	str	r0, [r7, #4]
	return sysclk_get_peripheral_hz();
  4060c4:	4b03      	ldr	r3, [pc, #12]	; (4060d4 <sysclk_get_peripheral_bus_hz+0x18>)
  4060c6:	4798      	blx	r3
  4060c8:	4603      	mov	r3, r0
}
  4060ca:	4618      	mov	r0, r3
  4060cc:	3708      	adds	r7, #8
  4060ce:	46bd      	mov	sp, r7
  4060d0:	bd80      	pop	{r7, pc}
  4060d2:	bf00      	nop
  4060d4:	004060a9 	.word	0x004060a9

004060d8 <sysclk_enable_peripheral_clock>:
{
  4060d8:	b580      	push	{r7, lr}
  4060da:	b082      	sub	sp, #8
  4060dc:	af00      	add	r7, sp, #0
  4060de:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4060e0:	6878      	ldr	r0, [r7, #4]
  4060e2:	4b03      	ldr	r3, [pc, #12]	; (4060f0 <sysclk_enable_peripheral_clock+0x18>)
  4060e4:	4798      	blx	r3
}
  4060e6:	bf00      	nop
  4060e8:	3708      	adds	r7, #8
  4060ea:	46bd      	mov	sp, r7
  4060ec:	bd80      	pop	{r7, pc}
  4060ee:	bf00      	nop
  4060f0:	00408a95 	.word	0x00408a95

004060f4 <fusion_16bit_into_32bit>:
 * The two timers have to be read lsb then msb. Reading them in another order might prevent this function from 
 * detecting an overflow that took place between two timer reads.
 */
static uint32_t fusion_16bit_into_32bit(uint16_t lsb_1, uint16_t msb_1, uint16_t lsb_2,
		uint16_t msb_2)
{
  4060f4:	b490      	push	{r4, r7}
  4060f6:	b084      	sub	sp, #16
  4060f8:	af00      	add	r7, sp, #0
  4060fa:	4604      	mov	r4, r0
  4060fc:	4608      	mov	r0, r1
  4060fe:	4611      	mov	r1, r2
  406100:	461a      	mov	r2, r3
  406102:	4623      	mov	r3, r4
  406104:	80fb      	strh	r3, [r7, #6]
  406106:	4603      	mov	r3, r0
  406108:	80bb      	strh	r3, [r7, #4]
  40610a:	460b      	mov	r3, r1
  40610c:	807b      	strh	r3, [r7, #2]
  40610e:	4613      	mov	r3, r2
  406110:	803b      	strh	r3, [r7, #0]
	uint32_t ret_val;
	
	/* Detect if the first counter rolled-over between the moments when the 
	* two counters were read
	*/
	if((lsb_2 < lsb_1) && (msb_2 == msb_1))
  406112:	887a      	ldrh	r2, [r7, #2]
  406114:	88fb      	ldrh	r3, [r7, #6]
  406116:	429a      	cmp	r2, r3
  406118:	d206      	bcs.n	406128 <fusion_16bit_into_32bit+0x34>
  40611a:	883a      	ldrh	r2, [r7, #0]
  40611c:	88bb      	ldrh	r3, [r7, #4]
  40611e:	429a      	cmp	r2, r3
  406120:	d102      	bne.n	406128 <fusion_16bit_into_32bit+0x34>
		msb_1--;
  406122:	88bb      	ldrh	r3, [r7, #4]
  406124:	3b01      	subs	r3, #1
  406126:	80bb      	strh	r3, [r7, #4]
	
	ret_val  = (uint32_t)lsb_1;
  406128:	88fb      	ldrh	r3, [r7, #6]
  40612a:	60fb      	str	r3, [r7, #12]
	ret_val |= (uint32_t)msb_1 << 16;
  40612c:	88bb      	ldrh	r3, [r7, #4]
  40612e:	041b      	lsls	r3, r3, #16
  406130:	68fa      	ldr	r2, [r7, #12]
  406132:	4313      	orrs	r3, r2
  406134:	60fb      	str	r3, [r7, #12]
	
	return ret_val;
  406136:	68fb      	ldr	r3, [r7, #12]
}
  406138:	4618      	mov	r0, r3
  40613a:	3710      	adds	r7, #16
  40613c:	46bd      	mov	sp, r7
  40613e:	bc90      	pop	{r4, r7}
  406140:	4770      	bx	lr
	...

00406144 <inv_timer_enable>:

void inv_timer_enable(unsigned timer_num)
{
  406144:	b580      	push	{r7, lr}
  406146:	b082      	sub	sp, #8
  406148:	af00      	add	r7, sp, #0
  40614a:	6078      	str	r0, [r7, #4]
	if(timer_num >= INV_TIMER_MAX)
  40614c:	687b      	ldr	r3, [r7, #4]
  40614e:	2b04      	cmp	r3, #4
  406150:	d82d      	bhi.n	4061ae <inv_timer_enable+0x6a>
		return;
	
	/* If timer is not already running, start it */
	if((tc_get_status(tm[timer_num].timer_periph, tm[timer_num].timer_channel) & TC_SR_CLKSTA) == 0)
  406152:	4919      	ldr	r1, [pc, #100]	; (4061b8 <inv_timer_enable+0x74>)
  406154:	687a      	ldr	r2, [r7, #4]
  406156:	4613      	mov	r3, r2
  406158:	009b      	lsls	r3, r3, #2
  40615a:	4413      	add	r3, r2
  40615c:	00db      	lsls	r3, r3, #3
  40615e:	440b      	add	r3, r1
  406160:	6818      	ldr	r0, [r3, #0]
  406162:	4915      	ldr	r1, [pc, #84]	; (4061b8 <inv_timer_enable+0x74>)
  406164:	687a      	ldr	r2, [r7, #4]
  406166:	4613      	mov	r3, r2
  406168:	009b      	lsls	r3, r3, #2
  40616a:	4413      	add	r3, r2
  40616c:	00db      	lsls	r3, r3, #3
  40616e:	440b      	add	r3, r1
  406170:	3304      	adds	r3, #4
  406172:	681b      	ldr	r3, [r3, #0]
  406174:	4619      	mov	r1, r3
  406176:	4b11      	ldr	r3, [pc, #68]	; (4061bc <inv_timer_enable+0x78>)
  406178:	4798      	blx	r3
  40617a:	4603      	mov	r3, r0
  40617c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  406180:	2b00      	cmp	r3, #0
  406182:	d115      	bne.n	4061b0 <inv_timer_enable+0x6c>
		tc_start(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  406184:	490c      	ldr	r1, [pc, #48]	; (4061b8 <inv_timer_enable+0x74>)
  406186:	687a      	ldr	r2, [r7, #4]
  406188:	4613      	mov	r3, r2
  40618a:	009b      	lsls	r3, r3, #2
  40618c:	4413      	add	r3, r2
  40618e:	00db      	lsls	r3, r3, #3
  406190:	440b      	add	r3, r1
  406192:	6818      	ldr	r0, [r3, #0]
  406194:	4908      	ldr	r1, [pc, #32]	; (4061b8 <inv_timer_enable+0x74>)
  406196:	687a      	ldr	r2, [r7, #4]
  406198:	4613      	mov	r3, r2
  40619a:	009b      	lsls	r3, r3, #2
  40619c:	4413      	add	r3, r2
  40619e:	00db      	lsls	r3, r3, #3
  4061a0:	440b      	add	r3, r1
  4061a2:	3304      	adds	r3, #4
  4061a4:	681b      	ldr	r3, [r3, #0]
  4061a6:	4619      	mov	r1, r3
  4061a8:	4b05      	ldr	r3, [pc, #20]	; (4061c0 <inv_timer_enable+0x7c>)
  4061aa:	4798      	blx	r3
  4061ac:	e000      	b.n	4061b0 <inv_timer_enable+0x6c>
		return;
  4061ae:	bf00      	nop
}
  4061b0:	3708      	adds	r7, #8
  4061b2:	46bd      	mov	sp, r7
  4061b4:	bd80      	pop	{r7, pc}
  4061b6:	bf00      	nop
  4061b8:	2000232c 	.word	0x2000232c
  4061bc:	00409017 	.word	0x00409017
  4061c0:	00408f3d 	.word	0x00408f3d

004061c4 <inv_timer_configure_timebase>:

int inv_timer_configure_timebase(uint32_t frequency)
{
  4061c4:	b590      	push	{r4, r7, lr}
  4061c6:	b085      	sub	sp, #20
  4061c8:	af00      	add	r7, sp, #0
  4061ca:	6078      	str	r0, [r7, #4]
	/* 
	 * Compute the prescaler value for the requested frequency,
	 * knowing that TC0 and TC1 are fed by the same clock.
	 */
	timer_prescaler = DIV_ROUND_UINT(sysclk_get_peripheral_bus_hz(TC0), frequency) - 1;
  4061cc:	4870      	ldr	r0, [pc, #448]	; (406390 <inv_timer_configure_timebase+0x1cc>)
  4061ce:	4b71      	ldr	r3, [pc, #452]	; (406394 <inv_timer_configure_timebase+0x1d0>)
  4061d0:	4798      	blx	r3
  4061d2:	4602      	mov	r2, r0
  4061d4:	687b      	ldr	r3, [r7, #4]
  4061d6:	085b      	lsrs	r3, r3, #1
  4061d8:	441a      	add	r2, r3
  4061da:	687b      	ldr	r3, [r7, #4]
  4061dc:	fbb2 f3f3 	udiv	r3, r2, r3
  4061e0:	3b01      	subs	r3, #1
  4061e2:	4a6d      	ldr	r2, [pc, #436]	; (406398 <inv_timer_configure_timebase+0x1d4>)
  4061e4:	6013      	str	r3, [r2, #0]
	if(timer_prescaler > UINT8_MAX)
  4061e6:	4b6c      	ldr	r3, [pc, #432]	; (406398 <inv_timer_configure_timebase+0x1d4>)
  4061e8:	681b      	ldr	r3, [r3, #0]
  4061ea:	2bff      	cmp	r3, #255	; 0xff
  4061ec:	d902      	bls.n	4061f4 <inv_timer_configure_timebase+0x30>
		return -1;
  4061ee:	f04f 33ff 	mov.w	r3, #4294967295
  4061f2:	e0c8      	b.n	406386 <inv_timer_configure_timebase+0x1c2>
	
	/* Configure the PMC to enable the TC modules. */
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  4061f4:	2300      	movs	r3, #0
  4061f6:	60fb      	str	r3, [r7, #12]
  4061f8:	e00e      	b.n	406218 <inv_timer_configure_timebase+0x54>
		sysclk_enable_peripheral_clock(tm[i].timer_id);
  4061fa:	4968      	ldr	r1, [pc, #416]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  4061fc:	68fa      	ldr	r2, [r7, #12]
  4061fe:	4613      	mov	r3, r2
  406200:	009b      	lsls	r3, r3, #2
  406202:	4413      	add	r3, r2
  406204:	00db      	lsls	r3, r3, #3
  406206:	440b      	add	r3, r1
  406208:	3308      	adds	r3, #8
  40620a:	681b      	ldr	r3, [r3, #0]
  40620c:	4618      	mov	r0, r3
  40620e:	4b64      	ldr	r3, [pc, #400]	; (4063a0 <inv_timer_configure_timebase+0x1dc>)
  406210:	4798      	blx	r3
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  406212:	68fb      	ldr	r3, [r7, #12]
  406214:	3301      	adds	r3, #1
  406216:	60fb      	str	r3, [r7, #12]
  406218:	68fb      	ldr	r3, [r7, #12]
  40621a:	2b05      	cmp	r3, #5
  40621c:	d9ed      	bls.n	4061fa <inv_timer_configure_timebase+0x36>
	}
	/* Enable PCK output and configure prescaler */
	pmc_disable_pck(PMC_PCK_3);
  40621e:	2003      	movs	r0, #3
  406220:	4b60      	ldr	r3, [pc, #384]	; (4063a4 <inv_timer_configure_timebase+0x1e0>)
  406222:	4798      	blx	r3
	if(pmc_switch_pck_to_mck(PMC_PCK_3, PMC_PCK_PRES(timer_prescaler)))
  406224:	4b5c      	ldr	r3, [pc, #368]	; (406398 <inv_timer_configure_timebase+0x1d4>)
  406226:	681b      	ldr	r3, [r3, #0]
  406228:	011b      	lsls	r3, r3, #4
  40622a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
  40622e:	4619      	mov	r1, r3
  406230:	2003      	movs	r0, #3
  406232:	4b5d      	ldr	r3, [pc, #372]	; (4063a8 <inv_timer_configure_timebase+0x1e4>)
  406234:	4798      	blx	r3
  406236:	4603      	mov	r3, r0
  406238:	2b00      	cmp	r3, #0
  40623a:	d002      	beq.n	406242 <inv_timer_configure_timebase+0x7e>
		return -1;
  40623c:	f04f 33ff 	mov.w	r3, #4294967295
  406240:	e0a1      	b.n	406386 <inv_timer_configure_timebase+0x1c2>
	pmc_enable_pck(PMC_PCK_3);
  406242:	2003      	movs	r0, #3
  406244:	4b59      	ldr	r3, [pc, #356]	; (4063ac <inv_timer_configure_timebase+0x1e8>)
  406246:	4798      	blx	r3
	
	/* Init all channels with PCK3 as clock source */
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  406248:	2300      	movs	r3, #0
  40624a:	60bb      	str	r3, [r7, #8]
  40624c:	e096      	b.n	40637c <inv_timer_configure_timebase+0x1b8>
		tc_init(tm[i].timer_periph, tm[i].timer_channel, tm[i].timer_mode);
  40624e:	4953      	ldr	r1, [pc, #332]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  406250:	68ba      	ldr	r2, [r7, #8]
  406252:	4613      	mov	r3, r2
  406254:	009b      	lsls	r3, r3, #2
  406256:	4413      	add	r3, r2
  406258:	00db      	lsls	r3, r3, #3
  40625a:	440b      	add	r3, r1
  40625c:	6818      	ldr	r0, [r3, #0]
  40625e:	494f      	ldr	r1, [pc, #316]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  406260:	68ba      	ldr	r2, [r7, #8]
  406262:	4613      	mov	r3, r2
  406264:	009b      	lsls	r3, r3, #2
  406266:	4413      	add	r3, r2
  406268:	00db      	lsls	r3, r3, #3
  40626a:	440b      	add	r3, r1
  40626c:	3304      	adds	r3, #4
  40626e:	681c      	ldr	r4, [r3, #0]
  406270:	494a      	ldr	r1, [pc, #296]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  406272:	68ba      	ldr	r2, [r7, #8]
  406274:	4613      	mov	r3, r2
  406276:	009b      	lsls	r3, r3, #2
  406278:	4413      	add	r3, r2
  40627a:	00db      	lsls	r3, r3, #3
  40627c:	440b      	add	r3, r1
  40627e:	330c      	adds	r3, #12
  406280:	681b      	ldr	r3, [r3, #0]
  406282:	461a      	mov	r2, r3
  406284:	4621      	mov	r1, r4
  406286:	4b4a      	ldr	r3, [pc, #296]	; (4063b0 <inv_timer_configure_timebase+0x1ec>)
  406288:	4798      	blx	r3
		
		tc_write_ra(tm[i].timer_periph, tm[i].timer_channel, tm[i].ra);
  40628a:	4944      	ldr	r1, [pc, #272]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  40628c:	68ba      	ldr	r2, [r7, #8]
  40628e:	4613      	mov	r3, r2
  406290:	009b      	lsls	r3, r3, #2
  406292:	4413      	add	r3, r2
  406294:	00db      	lsls	r3, r3, #3
  406296:	440b      	add	r3, r1
  406298:	6818      	ldr	r0, [r3, #0]
  40629a:	4940      	ldr	r1, [pc, #256]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  40629c:	68ba      	ldr	r2, [r7, #8]
  40629e:	4613      	mov	r3, r2
  4062a0:	009b      	lsls	r3, r3, #2
  4062a2:	4413      	add	r3, r2
  4062a4:	00db      	lsls	r3, r3, #3
  4062a6:	440b      	add	r3, r1
  4062a8:	3304      	adds	r3, #4
  4062aa:	681c      	ldr	r4, [r3, #0]
  4062ac:	493b      	ldr	r1, [pc, #236]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  4062ae:	68ba      	ldr	r2, [r7, #8]
  4062b0:	4613      	mov	r3, r2
  4062b2:	009b      	lsls	r3, r3, #2
  4062b4:	4413      	add	r3, r2
  4062b6:	00db      	lsls	r3, r3, #3
  4062b8:	440b      	add	r3, r1
  4062ba:	3310      	adds	r3, #16
  4062bc:	681b      	ldr	r3, [r3, #0]
  4062be:	461a      	mov	r2, r3
  4062c0:	4621      	mov	r1, r4
  4062c2:	4b3c      	ldr	r3, [pc, #240]	; (4063b4 <inv_timer_configure_timebase+0x1f0>)
  4062c4:	4798      	blx	r3
		
		if(i == INV_TIMER_MAX) {
  4062c6:	68bb      	ldr	r3, [r7, #8]
  4062c8:	2b05      	cmp	r3, #5
  4062ca:	d11f      	bne.n	40630c <inv_timer_configure_timebase+0x148>
			tc_set_block_mode(tm[i].timer_periph, TC_BMR_TC0XC0S_TIOA1);
  4062cc:	4933      	ldr	r1, [pc, #204]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  4062ce:	68ba      	ldr	r2, [r7, #8]
  4062d0:	4613      	mov	r3, r2
  4062d2:	009b      	lsls	r3, r3, #2
  4062d4:	4413      	add	r3, r2
  4062d6:	00db      	lsls	r3, r3, #3
  4062d8:	440b      	add	r3, r1
  4062da:	681b      	ldr	r3, [r3, #0]
  4062dc:	2102      	movs	r1, #2
  4062de:	4618      	mov	r0, r3
  4062e0:	4b35      	ldr	r3, [pc, #212]	; (4063b8 <inv_timer_configure_timebase+0x1f4>)
  4062e2:	4798      	blx	r3
			/* Can be started since it will not count until TC0 channel 1 will be started */
			tc_start(tm[i].timer_periph, tm[i].timer_channel);
  4062e4:	492d      	ldr	r1, [pc, #180]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  4062e6:	68ba      	ldr	r2, [r7, #8]
  4062e8:	4613      	mov	r3, r2
  4062ea:	009b      	lsls	r3, r3, #2
  4062ec:	4413      	add	r3, r2
  4062ee:	00db      	lsls	r3, r3, #3
  4062f0:	440b      	add	r3, r1
  4062f2:	6818      	ldr	r0, [r3, #0]
  4062f4:	4929      	ldr	r1, [pc, #164]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  4062f6:	68ba      	ldr	r2, [r7, #8]
  4062f8:	4613      	mov	r3, r2
  4062fa:	009b      	lsls	r3, r3, #2
  4062fc:	4413      	add	r3, r2
  4062fe:	00db      	lsls	r3, r3, #3
  406300:	440b      	add	r3, r1
  406302:	3304      	adds	r3, #4
  406304:	681b      	ldr	r3, [r3, #0]
  406306:	4619      	mov	r1, r3
  406308:	4b2c      	ldr	r3, [pc, #176]	; (4063bc <inv_timer_configure_timebase+0x1f8>)
  40630a:	4798      	blx	r3
		}
		
		NVIC_DisableIRQ(tm[i].irq);
  40630c:	4923      	ldr	r1, [pc, #140]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  40630e:	68ba      	ldr	r2, [r7, #8]
  406310:	4613      	mov	r3, r2
  406312:	009b      	lsls	r3, r3, #2
  406314:	4413      	add	r3, r2
  406316:	00db      	lsls	r3, r3, #3
  406318:	440b      	add	r3, r1
  40631a:	3320      	adds	r3, #32
  40631c:	f993 3000 	ldrsb.w	r3, [r3]
  406320:	4618      	mov	r0, r3
  406322:	4b27      	ldr	r3, [pc, #156]	; (4063c0 <inv_timer_configure_timebase+0x1fc>)
  406324:	4798      	blx	r3
		NVIC_ClearPendingIRQ(tm[i].irq);
  406326:	491d      	ldr	r1, [pc, #116]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  406328:	68ba      	ldr	r2, [r7, #8]
  40632a:	4613      	mov	r3, r2
  40632c:	009b      	lsls	r3, r3, #2
  40632e:	4413      	add	r3, r2
  406330:	00db      	lsls	r3, r3, #3
  406332:	440b      	add	r3, r1
  406334:	3320      	adds	r3, #32
  406336:	f993 3000 	ldrsb.w	r3, [r3]
  40633a:	4618      	mov	r0, r3
  40633c:	4b21      	ldr	r3, [pc, #132]	; (4063c4 <inv_timer_configure_timebase+0x200>)
  40633e:	4798      	blx	r3
		NVIC_SetPriority(tm[i].irq, 0); // TODO: make the priority configurable
  406340:	4916      	ldr	r1, [pc, #88]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  406342:	68ba      	ldr	r2, [r7, #8]
  406344:	4613      	mov	r3, r2
  406346:	009b      	lsls	r3, r3, #2
  406348:	4413      	add	r3, r2
  40634a:	00db      	lsls	r3, r3, #3
  40634c:	440b      	add	r3, r1
  40634e:	3320      	adds	r3, #32
  406350:	f993 3000 	ldrsb.w	r3, [r3]
  406354:	2100      	movs	r1, #0
  406356:	4618      	mov	r0, r3
  406358:	4b1b      	ldr	r3, [pc, #108]	; (4063c8 <inv_timer_configure_timebase+0x204>)
  40635a:	4798      	blx	r3
		NVIC_EnableIRQ(tm[i].irq);
  40635c:	490f      	ldr	r1, [pc, #60]	; (40639c <inv_timer_configure_timebase+0x1d8>)
  40635e:	68ba      	ldr	r2, [r7, #8]
  406360:	4613      	mov	r3, r2
  406362:	009b      	lsls	r3, r3, #2
  406364:	4413      	add	r3, r2
  406366:	00db      	lsls	r3, r3, #3
  406368:	440b      	add	r3, r1
  40636a:	3320      	adds	r3, #32
  40636c:	f993 3000 	ldrsb.w	r3, [r3]
  406370:	4618      	mov	r0, r3
  406372:	4b16      	ldr	r3, [pc, #88]	; (4063cc <inv_timer_configure_timebase+0x208>)
  406374:	4798      	blx	r3
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  406376:	68bb      	ldr	r3, [r7, #8]
  406378:	3301      	adds	r3, #1
  40637a:	60bb      	str	r3, [r7, #8]
  40637c:	68bb      	ldr	r3, [r7, #8]
  40637e:	2b05      	cmp	r3, #5
  406380:	f67f af65 	bls.w	40624e <inv_timer_configure_timebase+0x8a>
	}

	return 0;
  406384:	2300      	movs	r3, #0
}
  406386:	4618      	mov	r0, r3
  406388:	3714      	adds	r7, #20
  40638a:	46bd      	mov	sp, r7
  40638c:	bd90      	pop	{r4, r7, pc}
  40638e:	bf00      	nop
  406390:	40010000 	.word	0x40010000
  406394:	004060bd 	.word	0x004060bd
  406398:	20003a94 	.word	0x20003a94
  40639c:	2000232c 	.word	0x2000232c
  4063a0:	004060d9 	.word	0x004060d9
  4063a4:	00408b99 	.word	0x00408b99
  4063a8:	00408b19 	.word	0x00408b19
  4063ac:	00408b71 	.word	0x00408b71
  4063b0:	00408ee5 	.word	0x00408ee5
  4063b4:	00408fa3 	.word	0x00408fa3
  4063b8:	00408f1f 	.word	0x00408f1f
  4063bc:	00408f3d 	.word	0x00408f3d
  4063c0:	00405f5d 	.word	0x00405f5d
  4063c4:	00405f91 	.word	0x00405f91
  4063c8:	00405fc5 	.word	0x00405fc5
  4063cc:	00405f29 	.word	0x00405f29

004063d0 <inv_timer_get_counter>:

uint64_t inv_timer_get_counter(unsigned timer_num)
{
  4063d0:	b590      	push	{r4, r7, lr}
  4063d2:	b087      	sub	sp, #28
  4063d4:	af00      	add	r7, sp, #0
  4063d6:	6078      	str	r0, [r7, #4]
	uint64_t ret_value;
	uint16_t lsb_1, msb_1, lsb_2, msb_2;
	
	/* Sanity check */
	if(timer_num >= INV_TIMER_MAX)
  4063d8:	687b      	ldr	r3, [r7, #4]
  4063da:	2b04      	cmp	r3, #4
  4063dc:	d904      	bls.n	4063e8 <inv_timer_get_counter+0x18>
		return 0;
  4063de:	f04f 0300 	mov.w	r3, #0
  4063e2:	f04f 0400 	mov.w	r4, #0
  4063e6:	e080      	b.n	4064ea <inv_timer_get_counter+0x11a>
	
	if((tm[timer_num].timer_periph == TC0) && (tm[timer_num].timer_channel == 1)) {
  4063e8:	4942      	ldr	r1, [pc, #264]	; (4064f4 <inv_timer_get_counter+0x124>)
  4063ea:	687a      	ldr	r2, [r7, #4]
  4063ec:	4613      	mov	r3, r2
  4063ee:	009b      	lsls	r3, r3, #2
  4063f0:	4413      	add	r3, r2
  4063f2:	00db      	lsls	r3, r3, #3
  4063f4:	440b      	add	r3, r1
  4063f6:	681b      	ldr	r3, [r3, #0]
  4063f8:	4a3f      	ldr	r2, [pc, #252]	; (4064f8 <inv_timer_get_counter+0x128>)
  4063fa:	4293      	cmp	r3, r2
  4063fc:	d15a      	bne.n	4064b4 <inv_timer_get_counter+0xe4>
  4063fe:	493d      	ldr	r1, [pc, #244]	; (4064f4 <inv_timer_get_counter+0x124>)
  406400:	687a      	ldr	r2, [r7, #4]
  406402:	4613      	mov	r3, r2
  406404:	009b      	lsls	r3, r3, #2
  406406:	4413      	add	r3, r2
  406408:	00db      	lsls	r3, r3, #3
  40640a:	440b      	add	r3, r1
  40640c:	3304      	adds	r3, #4
  40640e:	681b      	ldr	r3, [r3, #0]
  406410:	2b01      	cmp	r3, #1
  406412:	d14f      	bne.n	4064b4 <inv_timer_get_counter+0xe4>
		lsb_1 = tc_read_cv(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  406414:	4937      	ldr	r1, [pc, #220]	; (4064f4 <inv_timer_get_counter+0x124>)
  406416:	687a      	ldr	r2, [r7, #4]
  406418:	4613      	mov	r3, r2
  40641a:	009b      	lsls	r3, r3, #2
  40641c:	4413      	add	r3, r2
  40641e:	00db      	lsls	r3, r3, #3
  406420:	440b      	add	r3, r1
  406422:	6818      	ldr	r0, [r3, #0]
  406424:	4933      	ldr	r1, [pc, #204]	; (4064f4 <inv_timer_get_counter+0x124>)
  406426:	687a      	ldr	r2, [r7, #4]
  406428:	4613      	mov	r3, r2
  40642a:	009b      	lsls	r3, r3, #2
  40642c:	4413      	add	r3, r2
  40642e:	00db      	lsls	r3, r3, #3
  406430:	440b      	add	r3, r1
  406432:	3304      	adds	r3, #4
  406434:	681b      	ldr	r3, [r3, #0]
  406436:	4619      	mov	r1, r3
  406438:	4b30      	ldr	r3, [pc, #192]	; (4064fc <inv_timer_get_counter+0x12c>)
  40643a:	4798      	blx	r3
  40643c:	4603      	mov	r3, r0
  40643e:	81fb      	strh	r3, [r7, #14]
		msb_1 = tc_read_cv(tm[INV_TIMER_MAX].timer_periph, tm[INV_TIMER_MAX].timer_channel);
  406440:	4b2c      	ldr	r3, [pc, #176]	; (4064f4 <inv_timer_get_counter+0x124>)
  406442:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  406446:	4b2b      	ldr	r3, [pc, #172]	; (4064f4 <inv_timer_get_counter+0x124>)
  406448:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  40644c:	4619      	mov	r1, r3
  40644e:	4610      	mov	r0, r2
  406450:	4b2a      	ldr	r3, [pc, #168]	; (4064fc <inv_timer_get_counter+0x12c>)
  406452:	4798      	blx	r3
  406454:	4603      	mov	r3, r0
  406456:	81bb      	strh	r3, [r7, #12]
		lsb_2 = tc_read_cv(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  406458:	4926      	ldr	r1, [pc, #152]	; (4064f4 <inv_timer_get_counter+0x124>)
  40645a:	687a      	ldr	r2, [r7, #4]
  40645c:	4613      	mov	r3, r2
  40645e:	009b      	lsls	r3, r3, #2
  406460:	4413      	add	r3, r2
  406462:	00db      	lsls	r3, r3, #3
  406464:	440b      	add	r3, r1
  406466:	6818      	ldr	r0, [r3, #0]
  406468:	4922      	ldr	r1, [pc, #136]	; (4064f4 <inv_timer_get_counter+0x124>)
  40646a:	687a      	ldr	r2, [r7, #4]
  40646c:	4613      	mov	r3, r2
  40646e:	009b      	lsls	r3, r3, #2
  406470:	4413      	add	r3, r2
  406472:	00db      	lsls	r3, r3, #3
  406474:	440b      	add	r3, r1
  406476:	3304      	adds	r3, #4
  406478:	681b      	ldr	r3, [r3, #0]
  40647a:	4619      	mov	r1, r3
  40647c:	4b1f      	ldr	r3, [pc, #124]	; (4064fc <inv_timer_get_counter+0x12c>)
  40647e:	4798      	blx	r3
  406480:	4603      	mov	r3, r0
  406482:	817b      	strh	r3, [r7, #10]
		msb_2 = tc_read_cv(tm[INV_TIMER_MAX].timer_periph, tm[INV_TIMER_MAX].timer_channel);
  406484:	4b1b      	ldr	r3, [pc, #108]	; (4064f4 <inv_timer_get_counter+0x124>)
  406486:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  40648a:	4b1a      	ldr	r3, [pc, #104]	; (4064f4 <inv_timer_get_counter+0x124>)
  40648c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  406490:	4619      	mov	r1, r3
  406492:	4610      	mov	r0, r2
  406494:	4b19      	ldr	r3, [pc, #100]	; (4064fc <inv_timer_get_counter+0x12c>)
  406496:	4798      	blx	r3
  406498:	4603      	mov	r3, r0
  40649a:	813b      	strh	r3, [r7, #8]
		ret_value = (uint64_t)fusion_16bit_into_32bit(lsb_1, msb_1, lsb_2, msb_2);
  40649c:	893b      	ldrh	r3, [r7, #8]
  40649e:	897a      	ldrh	r2, [r7, #10]
  4064a0:	89b9      	ldrh	r1, [r7, #12]
  4064a2:	89f8      	ldrh	r0, [r7, #14]
  4064a4:	4c16      	ldr	r4, [pc, #88]	; (406500 <inv_timer_get_counter+0x130>)
  4064a6:	47a0      	blx	r4
  4064a8:	4603      	mov	r3, r0
  4064aa:	f04f 0400 	mov.w	r4, #0
  4064ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
  4064b2:	e018      	b.n	4064e6 <inv_timer_get_counter+0x116>
	} else {
		ret_value = (uint64_t)tc_read_cv(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  4064b4:	490f      	ldr	r1, [pc, #60]	; (4064f4 <inv_timer_get_counter+0x124>)
  4064b6:	687a      	ldr	r2, [r7, #4]
  4064b8:	4613      	mov	r3, r2
  4064ba:	009b      	lsls	r3, r3, #2
  4064bc:	4413      	add	r3, r2
  4064be:	00db      	lsls	r3, r3, #3
  4064c0:	440b      	add	r3, r1
  4064c2:	6818      	ldr	r0, [r3, #0]
  4064c4:	490b      	ldr	r1, [pc, #44]	; (4064f4 <inv_timer_get_counter+0x124>)
  4064c6:	687a      	ldr	r2, [r7, #4]
  4064c8:	4613      	mov	r3, r2
  4064ca:	009b      	lsls	r3, r3, #2
  4064cc:	4413      	add	r3, r2
  4064ce:	00db      	lsls	r3, r3, #3
  4064d0:	440b      	add	r3, r1
  4064d2:	3304      	adds	r3, #4
  4064d4:	681b      	ldr	r3, [r3, #0]
  4064d6:	4619      	mov	r1, r3
  4064d8:	4b08      	ldr	r3, [pc, #32]	; (4064fc <inv_timer_get_counter+0x12c>)
  4064da:	4798      	blx	r3
  4064dc:	4603      	mov	r3, r0
  4064de:	f04f 0400 	mov.w	r4, #0
  4064e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}
	
	return ret_value;
  4064e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
  4064ea:	4618      	mov	r0, r3
  4064ec:	4621      	mov	r1, r4
  4064ee:	371c      	adds	r7, #28
  4064f0:	46bd      	mov	sp, r7
  4064f2:	bd90      	pop	{r4, r7, pc}
  4064f4:	2000232c 	.word	0x2000232c
  4064f8:	40010000 	.word	0x40010000
  4064fc:	00408f5f 	.word	0x00408f5f
  406500:	004060f5 	.word	0x004060f5

00406504 <inv_timer_channel_stop>:

	return 0;
}

int inv_timer_channel_stop(unsigned timer_num, uint8_t channel)
{
  406504:	b580      	push	{r7, lr}
  406506:	b082      	sub	sp, #8
  406508:	af00      	add	r7, sp, #0
  40650a:	6078      	str	r0, [r7, #4]
  40650c:	460b      	mov	r3, r1
  40650e:	70fb      	strb	r3, [r7, #3]
	(void) channel;

	if(timer_num >= INV_TIMER_MAX)
  406510:	687b      	ldr	r3, [r7, #4]
  406512:	2b04      	cmp	r3, #4
  406514:	d902      	bls.n	40651c <inv_timer_channel_stop+0x18>
		return -1;
  406516:	f04f 33ff 	mov.w	r3, #4294967295
  40651a:	e029      	b.n	406570 <inv_timer_channel_stop+0x6c>

	tc_disable_interrupt(tm[timer_num].timer_periph, tm[timer_num].timer_channel, TC_SR_CPCS);
  40651c:	4916      	ldr	r1, [pc, #88]	; (406578 <inv_timer_channel_stop+0x74>)
  40651e:	687a      	ldr	r2, [r7, #4]
  406520:	4613      	mov	r3, r2
  406522:	009b      	lsls	r3, r3, #2
  406524:	4413      	add	r3, r2
  406526:	00db      	lsls	r3, r3, #3
  406528:	440b      	add	r3, r1
  40652a:	6818      	ldr	r0, [r3, #0]
  40652c:	4912      	ldr	r1, [pc, #72]	; (406578 <inv_timer_channel_stop+0x74>)
  40652e:	687a      	ldr	r2, [r7, #4]
  406530:	4613      	mov	r3, r2
  406532:	009b      	lsls	r3, r3, #2
  406534:	4413      	add	r3, r2
  406536:	00db      	lsls	r3, r3, #3
  406538:	440b      	add	r3, r1
  40653a:	3304      	adds	r3, #4
  40653c:	681b      	ldr	r3, [r3, #0]
  40653e:	2210      	movs	r2, #16
  406540:	4619      	mov	r1, r3
  406542:	4b0e      	ldr	r3, [pc, #56]	; (40657c <inv_timer_channel_stop+0x78>)
  406544:	4798      	blx	r3

	tm[timer_num].callback = 0;
  406546:	490c      	ldr	r1, [pc, #48]	; (406578 <inv_timer_channel_stop+0x74>)
  406548:	687a      	ldr	r2, [r7, #4]
  40654a:	4613      	mov	r3, r2
  40654c:	009b      	lsls	r3, r3, #2
  40654e:	4413      	add	r3, r2
  406550:	00db      	lsls	r3, r3, #3
  406552:	440b      	add	r3, r1
  406554:	3318      	adds	r3, #24
  406556:	2200      	movs	r2, #0
  406558:	601a      	str	r2, [r3, #0]
	tm[timer_num].context  = 0;
  40655a:	4907      	ldr	r1, [pc, #28]	; (406578 <inv_timer_channel_stop+0x74>)
  40655c:	687a      	ldr	r2, [r7, #4]
  40655e:	4613      	mov	r3, r2
  406560:	009b      	lsls	r3, r3, #2
  406562:	4413      	add	r3, r2
  406564:	00db      	lsls	r3, r3, #3
  406566:	440b      	add	r3, r1
  406568:	331c      	adds	r3, #28
  40656a:	2200      	movs	r2, #0
  40656c:	601a      	str	r2, [r3, #0]

	return 0;
  40656e:	2300      	movs	r3, #0
}
  406570:	4618      	mov	r0, r3
  406572:	3708      	adds	r7, #8
  406574:	46bd      	mov	sp, r7
  406576:	bd80      	pop	{r7, pc}
  406578:	2000232c 	.word	0x2000232c
  40657c:	00408fef 	.word	0x00408fef

00406580 <timer_irq_handler>:

	return 0;
}

static void timer_irq_handler(void (*caller)(void))
{
  406580:	b5b0      	push	{r4, r5, r7, lr}
  406582:	b084      	sub	sp, #16
  406584:	af00      	add	r7, sp, #0
  406586:	6078      	str	r0, [r7, #4]
	for(int i=INV_TIMER1; i<INV_TIMER_MAX; i++) {
  406588:	2300      	movs	r3, #0
  40658a:	60fb      	str	r3, [r7, #12]
  40658c:	e07a      	b.n	406684 <timer_irq_handler+0x104>
		if(caller == tm[i].irq_handler) {
  40658e:	4941      	ldr	r1, [pc, #260]	; (406694 <timer_irq_handler+0x114>)
  406590:	68fa      	ldr	r2, [r7, #12]
  406592:	4613      	mov	r3, r2
  406594:	009b      	lsls	r3, r3, #2
  406596:	4413      	add	r3, r2
  406598:	00db      	lsls	r3, r3, #3
  40659a:	440b      	add	r3, r1
  40659c:	3324      	adds	r3, #36	; 0x24
  40659e:	681a      	ldr	r2, [r3, #0]
  4065a0:	687b      	ldr	r3, [r7, #4]
  4065a2:	429a      	cmp	r2, r3
  4065a4:	d16b      	bne.n	40667e <timer_irq_handler+0xfe>
			if((tc_get_status(tm[i].timer_periph, tm[i].timer_channel) & TC_SR_CPCS) == TC_SR_CPCS) {
  4065a6:	493b      	ldr	r1, [pc, #236]	; (406694 <timer_irq_handler+0x114>)
  4065a8:	68fa      	ldr	r2, [r7, #12]
  4065aa:	4613      	mov	r3, r2
  4065ac:	009b      	lsls	r3, r3, #2
  4065ae:	4413      	add	r3, r2
  4065b0:	00db      	lsls	r3, r3, #3
  4065b2:	440b      	add	r3, r1
  4065b4:	6818      	ldr	r0, [r3, #0]
  4065b6:	4937      	ldr	r1, [pc, #220]	; (406694 <timer_irq_handler+0x114>)
  4065b8:	68fa      	ldr	r2, [r7, #12]
  4065ba:	4613      	mov	r3, r2
  4065bc:	009b      	lsls	r3, r3, #2
  4065be:	4413      	add	r3, r2
  4065c0:	00db      	lsls	r3, r3, #3
  4065c2:	440b      	add	r3, r1
  4065c4:	3304      	adds	r3, #4
  4065c6:	681b      	ldr	r3, [r3, #0]
  4065c8:	4619      	mov	r1, r3
  4065ca:	4b33      	ldr	r3, [pc, #204]	; (406698 <timer_irq_handler+0x118>)
  4065cc:	4798      	blx	r3
  4065ce:	4603      	mov	r3, r0
  4065d0:	f003 0310 	and.w	r3, r3, #16
  4065d4:	2b10      	cmp	r3, #16
  4065d6:	d152      	bne.n	40667e <timer_irq_handler+0xfe>
				tc_write_rc(tm[i].timer_periph, tm[i].timer_channel, 
  4065d8:	492e      	ldr	r1, [pc, #184]	; (406694 <timer_irq_handler+0x114>)
  4065da:	68fa      	ldr	r2, [r7, #12]
  4065dc:	4613      	mov	r3, r2
  4065de:	009b      	lsls	r3, r3, #2
  4065e0:	4413      	add	r3, r2
  4065e2:	00db      	lsls	r3, r3, #3
  4065e4:	440b      	add	r3, r1
  4065e6:	681c      	ldr	r4, [r3, #0]
  4065e8:	492a      	ldr	r1, [pc, #168]	; (406694 <timer_irq_handler+0x114>)
  4065ea:	68fa      	ldr	r2, [r7, #12]
  4065ec:	4613      	mov	r3, r2
  4065ee:	009b      	lsls	r3, r3, #2
  4065f0:	4413      	add	r3, r2
  4065f2:	00db      	lsls	r3, r3, #3
  4065f4:	440b      	add	r3, r1
  4065f6:	3304      	adds	r3, #4
  4065f8:	681d      	ldr	r5, [r3, #0]
						tc_read_rc(tm[i].timer_periph, tm[i].timer_channel) + tm[i].rc);
  4065fa:	4926      	ldr	r1, [pc, #152]	; (406694 <timer_irq_handler+0x114>)
  4065fc:	68fa      	ldr	r2, [r7, #12]
  4065fe:	4613      	mov	r3, r2
  406600:	009b      	lsls	r3, r3, #2
  406602:	4413      	add	r3, r2
  406604:	00db      	lsls	r3, r3, #3
  406606:	440b      	add	r3, r1
  406608:	6818      	ldr	r0, [r3, #0]
  40660a:	4922      	ldr	r1, [pc, #136]	; (406694 <timer_irq_handler+0x114>)
  40660c:	68fa      	ldr	r2, [r7, #12]
  40660e:	4613      	mov	r3, r2
  406610:	009b      	lsls	r3, r3, #2
  406612:	4413      	add	r3, r2
  406614:	00db      	lsls	r3, r3, #3
  406616:	440b      	add	r3, r1
  406618:	3304      	adds	r3, #4
  40661a:	681b      	ldr	r3, [r3, #0]
  40661c:	4619      	mov	r1, r3
  40661e:	4b1f      	ldr	r3, [pc, #124]	; (40669c <timer_irq_handler+0x11c>)
  406620:	4798      	blx	r3
  406622:	491c      	ldr	r1, [pc, #112]	; (406694 <timer_irq_handler+0x114>)
  406624:	68fa      	ldr	r2, [r7, #12]
  406626:	4613      	mov	r3, r2
  406628:	009b      	lsls	r3, r3, #2
  40662a:	4413      	add	r3, r2
  40662c:	00db      	lsls	r3, r3, #3
  40662e:	440b      	add	r3, r1
  406630:	3314      	adds	r3, #20
  406632:	681b      	ldr	r3, [r3, #0]
				tc_write_rc(tm[i].timer_periph, tm[i].timer_channel, 
  406634:	4403      	add	r3, r0
  406636:	461a      	mov	r2, r3
  406638:	4629      	mov	r1, r5
  40663a:	4620      	mov	r0, r4
  40663c:	4b18      	ldr	r3, [pc, #96]	; (4066a0 <timer_irq_handler+0x120>)
  40663e:	4798      	blx	r3
				
				if(tm[i].callback)
  406640:	4914      	ldr	r1, [pc, #80]	; (406694 <timer_irq_handler+0x114>)
  406642:	68fa      	ldr	r2, [r7, #12]
  406644:	4613      	mov	r3, r2
  406646:	009b      	lsls	r3, r3, #2
  406648:	4413      	add	r3, r2
  40664a:	00db      	lsls	r3, r3, #3
  40664c:	440b      	add	r3, r1
  40664e:	3318      	adds	r3, #24
  406650:	681b      	ldr	r3, [r3, #0]
  406652:	2b00      	cmp	r3, #0
  406654:	d013      	beq.n	40667e <timer_irq_handler+0xfe>
					tm[i].callback(tm[i].context);
  406656:	490f      	ldr	r1, [pc, #60]	; (406694 <timer_irq_handler+0x114>)
  406658:	68fa      	ldr	r2, [r7, #12]
  40665a:	4613      	mov	r3, r2
  40665c:	009b      	lsls	r3, r3, #2
  40665e:	4413      	add	r3, r2
  406660:	00db      	lsls	r3, r3, #3
  406662:	440b      	add	r3, r1
  406664:	3318      	adds	r3, #24
  406666:	6819      	ldr	r1, [r3, #0]
  406668:	480a      	ldr	r0, [pc, #40]	; (406694 <timer_irq_handler+0x114>)
  40666a:	68fa      	ldr	r2, [r7, #12]
  40666c:	4613      	mov	r3, r2
  40666e:	009b      	lsls	r3, r3, #2
  406670:	4413      	add	r3, r2
  406672:	00db      	lsls	r3, r3, #3
  406674:	4403      	add	r3, r0
  406676:	331c      	adds	r3, #28
  406678:	681b      	ldr	r3, [r3, #0]
  40667a:	4618      	mov	r0, r3
  40667c:	4788      	blx	r1
	for(int i=INV_TIMER1; i<INV_TIMER_MAX; i++) {
  40667e:	68fb      	ldr	r3, [r7, #12]
  406680:	3301      	adds	r3, #1
  406682:	60fb      	str	r3, [r7, #12]
  406684:	68fb      	ldr	r3, [r7, #12]
  406686:	2b04      	cmp	r3, #4
  406688:	dd81      	ble.n	40658e <timer_irq_handler+0xe>
			}
		}
	}
}
  40668a:	bf00      	nop
  40668c:	3710      	adds	r7, #16
  40668e:	46bd      	mov	sp, r7
  406690:	bdb0      	pop	{r4, r5, r7, pc}
  406692:	bf00      	nop
  406694:	2000232c 	.word	0x2000232c
  406698:	00409017 	.word	0x00409017
  40669c:	00408f81 	.word	0x00408f81
  4066a0:	00408fc9 	.word	0x00408fc9

004066a4 <TC0_Handler>:

void TC0_Handler(void)
{
  4066a4:	b580      	push	{r7, lr}
  4066a6:	af00      	add	r7, sp, #0
	tc_get_status(tm[INV_TIMER_MAX].timer_periph, tm[INV_TIMER_MAX].timer_channel);
  4066a8:	4b05      	ldr	r3, [pc, #20]	; (4066c0 <TC0_Handler+0x1c>)
  4066aa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  4066ae:	4b04      	ldr	r3, [pc, #16]	; (4066c0 <TC0_Handler+0x1c>)
  4066b0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  4066b4:	4619      	mov	r1, r3
  4066b6:	4610      	mov	r0, r2
  4066b8:	4b02      	ldr	r3, [pc, #8]	; (4066c4 <TC0_Handler+0x20>)
  4066ba:	4798      	blx	r3
}
  4066bc:	bf00      	nop
  4066be:	bd80      	pop	{r7, pc}
  4066c0:	2000232c 	.word	0x2000232c
  4066c4:	00409017 	.word	0x00409017

004066c8 <TC1_Handler>:

void TC1_Handler(void)
{
  4066c8:	b580      	push	{r7, lr}
  4066ca:	af00      	add	r7, sp, #0
	timer_irq_handler(TC1_Handler);
  4066cc:	4802      	ldr	r0, [pc, #8]	; (4066d8 <TC1_Handler+0x10>)
  4066ce:	4b03      	ldr	r3, [pc, #12]	; (4066dc <TC1_Handler+0x14>)
  4066d0:	4798      	blx	r3
}
  4066d2:	bf00      	nop
  4066d4:	bd80      	pop	{r7, pc}
  4066d6:	bf00      	nop
  4066d8:	004066c9 	.word	0x004066c9
  4066dc:	00406581 	.word	0x00406581

004066e0 <TC2_Handler>:

void TC2_Handler(void)
{
  4066e0:	b580      	push	{r7, lr}
  4066e2:	af00      	add	r7, sp, #0
	timer_irq_handler(TC2_Handler);
  4066e4:	4802      	ldr	r0, [pc, #8]	; (4066f0 <TC2_Handler+0x10>)
  4066e6:	4b03      	ldr	r3, [pc, #12]	; (4066f4 <TC2_Handler+0x14>)
  4066e8:	4798      	blx	r3
}
  4066ea:	bf00      	nop
  4066ec:	bd80      	pop	{r7, pc}
  4066ee:	bf00      	nop
  4066f0:	004066e1 	.word	0x004066e1
  4066f4:	00406581 	.word	0x00406581

004066f8 <TC3_Handler>:

void TC3_Handler(void)
{
  4066f8:	b580      	push	{r7, lr}
  4066fa:	af00      	add	r7, sp, #0
	timer_irq_handler(TC3_Handler);
  4066fc:	4802      	ldr	r0, [pc, #8]	; (406708 <TC3_Handler+0x10>)
  4066fe:	4b03      	ldr	r3, [pc, #12]	; (40670c <TC3_Handler+0x14>)
  406700:	4798      	blx	r3
}
  406702:	bf00      	nop
  406704:	bd80      	pop	{r7, pc}
  406706:	bf00      	nop
  406708:	004066f9 	.word	0x004066f9
  40670c:	00406581 	.word	0x00406581

00406710 <TC4_Handler>:

void TC4_Handler(void)
{
  406710:	b580      	push	{r7, lr}
  406712:	af00      	add	r7, sp, #0
	timer_irq_handler(TC4_Handler);
  406714:	4802      	ldr	r0, [pc, #8]	; (406720 <TC4_Handler+0x10>)
  406716:	4b03      	ldr	r3, [pc, #12]	; (406724 <TC4_Handler+0x14>)
  406718:	4798      	blx	r3
}
  40671a:	bf00      	nop
  40671c:	bd80      	pop	{r7, pc}
  40671e:	bf00      	nop
  406720:	00406711 	.word	0x00406711
  406724:	00406581 	.word	0x00406581

00406728 <TC5_Handler>:

void TC5_Handler(void)
{
  406728:	b580      	push	{r7, lr}
  40672a:	af00      	add	r7, sp, #0
	timer_irq_handler(TC5_Handler);
  40672c:	4802      	ldr	r0, [pc, #8]	; (406738 <TC5_Handler+0x10>)
  40672e:	4b03      	ldr	r3, [pc, #12]	; (40673c <TC5_Handler+0x14>)
  406730:	4798      	blx	r3
  406732:	bf00      	nop
  406734:	bd80      	pop	{r7, pc}
  406736:	bf00      	nop
  406738:	00406729 	.word	0x00406729
  40673c:	00406581 	.word	0x00406581

00406740 <NVIC_EnableIRQ>:
{
  406740:	b480      	push	{r7}
  406742:	b083      	sub	sp, #12
  406744:	af00      	add	r7, sp, #0
  406746:	4603      	mov	r3, r0
  406748:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40674a:	4909      	ldr	r1, [pc, #36]	; (406770 <NVIC_EnableIRQ+0x30>)
  40674c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406750:	095b      	lsrs	r3, r3, #5
  406752:	79fa      	ldrb	r2, [r7, #7]
  406754:	f002 021f 	and.w	r2, r2, #31
  406758:	2001      	movs	r0, #1
  40675a:	fa00 f202 	lsl.w	r2, r0, r2
  40675e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  406762:	bf00      	nop
  406764:	370c      	adds	r7, #12
  406766:	46bd      	mov	sp, r7
  406768:	f85d 7b04 	ldr.w	r7, [sp], #4
  40676c:	4770      	bx	lr
  40676e:	bf00      	nop
  406770:	e000e100 	.word	0xe000e100

00406774 <osc_get_rate>:
{
  406774:	b480      	push	{r7}
  406776:	b083      	sub	sp, #12
  406778:	af00      	add	r7, sp, #0
  40677a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40677c:	687b      	ldr	r3, [r7, #4]
  40677e:	2b07      	cmp	r3, #7
  406780:	d825      	bhi.n	4067ce <osc_get_rate+0x5a>
  406782:	a201      	add	r2, pc, #4	; (adr r2, 406788 <osc_get_rate+0x14>)
  406784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406788:	004067a9 	.word	0x004067a9
  40678c:	004067af 	.word	0x004067af
  406790:	004067b5 	.word	0x004067b5
  406794:	004067bb 	.word	0x004067bb
  406798:	004067bf 	.word	0x004067bf
  40679c:	004067c3 	.word	0x004067c3
  4067a0:	004067c7 	.word	0x004067c7
  4067a4:	004067cb 	.word	0x004067cb
		return OSC_SLCK_32K_RC_HZ;
  4067a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4067ac:	e010      	b.n	4067d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4067ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4067b2:	e00d      	b.n	4067d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4067b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4067b8:	e00a      	b.n	4067d0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4067ba:	4b08      	ldr	r3, [pc, #32]	; (4067dc <osc_get_rate+0x68>)
  4067bc:	e008      	b.n	4067d0 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  4067be:	4b08      	ldr	r3, [pc, #32]	; (4067e0 <osc_get_rate+0x6c>)
  4067c0:	e006      	b.n	4067d0 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  4067c2:	4b08      	ldr	r3, [pc, #32]	; (4067e4 <osc_get_rate+0x70>)
  4067c4:	e004      	b.n	4067d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4067c6:	2300      	movs	r3, #0
  4067c8:	e002      	b.n	4067d0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4067ca:	2300      	movs	r3, #0
  4067cc:	e000      	b.n	4067d0 <osc_get_rate+0x5c>
	return 0;
  4067ce:	2300      	movs	r3, #0
}
  4067d0:	4618      	mov	r0, r3
  4067d2:	370c      	adds	r7, #12
  4067d4:	46bd      	mov	sp, r7
  4067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067da:	4770      	bx	lr
  4067dc:	007a1200 	.word	0x007a1200
  4067e0:	00f42400 	.word	0x00f42400
  4067e4:	016e3600 	.word	0x016e3600

004067e8 <sysclk_get_main_hz>:
{
  4067e8:	b580      	push	{r7, lr}
  4067ea:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4067ec:	2001      	movs	r0, #1
  4067ee:	4b04      	ldr	r3, [pc, #16]	; (406800 <sysclk_get_main_hz+0x18>)
  4067f0:	4798      	blx	r3
  4067f2:	4602      	mov	r2, r0
  4067f4:	f640 634e 	movw	r3, #3662	; 0xe4e
  4067f8:	fb03 f302 	mul.w	r3, r3, r2
}
  4067fc:	4618      	mov	r0, r3
  4067fe:	bd80      	pop	{r7, pc}
  406800:	00406775 	.word	0x00406775

00406804 <sysclk_get_peripheral_hz>:
{
  406804:	b580      	push	{r7, lr}
  406806:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  406808:	4b02      	ldr	r3, [pc, #8]	; (406814 <sysclk_get_peripheral_hz+0x10>)
  40680a:	4798      	blx	r3
  40680c:	4603      	mov	r3, r0
}
  40680e:	4618      	mov	r0, r3
  406810:	bd80      	pop	{r7, pc}
  406812:	bf00      	nop
  406814:	004067e9 	.word	0x004067e9

00406818 <sysclk_enable_peripheral_clock>:
{
  406818:	b580      	push	{r7, lr}
  40681a:	b082      	sub	sp, #8
  40681c:	af00      	add	r7, sp, #0
  40681e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  406820:	6878      	ldr	r0, [r7, #4]
  406822:	4b03      	ldr	r3, [pc, #12]	; (406830 <sysclk_enable_peripheral_clock+0x18>)
  406824:	4798      	blx	r3
}
  406826:	bf00      	nop
  406828:	3708      	adds	r7, #8
  40682a:	46bd      	mov	sp, r7
  40682c:	bd80      	pop	{r7, pc}
  40682e:	bf00      	nop
  406830:	00408a95 	.word	0x00408a95

00406834 <ioport_disable_port>:
{
  406834:	b480      	push	{r7}
  406836:	b087      	sub	sp, #28
  406838:	af00      	add	r7, sp, #0
  40683a:	6078      	str	r0, [r7, #4]
  40683c:	6039      	str	r1, [r7, #0]
  40683e:	687b      	ldr	r3, [r7, #4]
  406840:	617b      	str	r3, [r7, #20]
  406842:	683b      	ldr	r3, [r7, #0]
  406844:	613b      	str	r3, [r7, #16]
  406846:	697b      	ldr	r3, [r7, #20]
  406848:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40684a:	68fb      	ldr	r3, [r7, #12]
  40684c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  406850:	f203 7307 	addw	r3, r3, #1799	; 0x707
  406854:	025b      	lsls	r3, r3, #9
  406856:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  406858:	693b      	ldr	r3, [r7, #16]
  40685a:	6053      	str	r3, [r2, #4]
}
  40685c:	bf00      	nop
  40685e:	371c      	adds	r7, #28
  406860:	46bd      	mov	sp, r7
  406862:	f85d 7b04 	ldr.w	r7, [sp], #4
  406866:	4770      	bx	lr

00406868 <ioport_set_port_mode>:
{
  406868:	b480      	push	{r7}
  40686a:	b08b      	sub	sp, #44	; 0x2c
  40686c:	af00      	add	r7, sp, #0
  40686e:	60f8      	str	r0, [r7, #12]
  406870:	60b9      	str	r1, [r7, #8]
  406872:	607a      	str	r2, [r7, #4]
  406874:	68fb      	ldr	r3, [r7, #12]
  406876:	627b      	str	r3, [r7, #36]	; 0x24
  406878:	68bb      	ldr	r3, [r7, #8]
  40687a:	623b      	str	r3, [r7, #32]
  40687c:	687b      	ldr	r3, [r7, #4]
  40687e:	61fb      	str	r3, [r7, #28]
  406880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  406882:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  406884:	69bb      	ldr	r3, [r7, #24]
  406886:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40688a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40688e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  406890:	617b      	str	r3, [r7, #20]
	if (mode & IOPORT_MODE_PULLUP) {
  406892:	69fb      	ldr	r3, [r7, #28]
  406894:	f003 0308 	and.w	r3, r3, #8
  406898:	2b00      	cmp	r3, #0
  40689a:	d003      	beq.n	4068a4 <ioport_set_port_mode+0x3c>
		base->PIO_PUER = mask;
  40689c:	697b      	ldr	r3, [r7, #20]
  40689e:	6a3a      	ldr	r2, [r7, #32]
  4068a0:	665a      	str	r2, [r3, #100]	; 0x64
  4068a2:	e002      	b.n	4068aa <ioport_set_port_mode+0x42>
		base->PIO_PUDR = mask;
  4068a4:	697b      	ldr	r3, [r7, #20]
  4068a6:	6a3a      	ldr	r2, [r7, #32]
  4068a8:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4068aa:	69fb      	ldr	r3, [r7, #28]
  4068ac:	f003 0310 	and.w	r3, r3, #16
  4068b0:	2b00      	cmp	r3, #0
  4068b2:	d004      	beq.n	4068be <ioport_set_port_mode+0x56>
		base->PIO_PPDER = mask;
  4068b4:	697b      	ldr	r3, [r7, #20]
  4068b6:	6a3a      	ldr	r2, [r7, #32]
  4068b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4068bc:	e003      	b.n	4068c6 <ioport_set_port_mode+0x5e>
		base->PIO_PPDDR = mask;
  4068be:	697b      	ldr	r3, [r7, #20]
  4068c0:	6a3a      	ldr	r2, [r7, #32]
  4068c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4068c6:	69fb      	ldr	r3, [r7, #28]
  4068c8:	f003 0320 	and.w	r3, r3, #32
  4068cc:	2b00      	cmp	r3, #0
  4068ce:	d003      	beq.n	4068d8 <ioport_set_port_mode+0x70>
		base->PIO_MDER = mask;
  4068d0:	697b      	ldr	r3, [r7, #20]
  4068d2:	6a3a      	ldr	r2, [r7, #32]
  4068d4:	651a      	str	r2, [r3, #80]	; 0x50
  4068d6:	e002      	b.n	4068de <ioport_set_port_mode+0x76>
		base->PIO_MDDR = mask;
  4068d8:	697b      	ldr	r3, [r7, #20]
  4068da:	6a3a      	ldr	r2, [r7, #32]
  4068dc:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4068de:	69fb      	ldr	r3, [r7, #28]
  4068e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4068e4:	2b00      	cmp	r3, #0
  4068e6:	d003      	beq.n	4068f0 <ioport_set_port_mode+0x88>
		base->PIO_IFER = mask;
  4068e8:	697b      	ldr	r3, [r7, #20]
  4068ea:	6a3a      	ldr	r2, [r7, #32]
  4068ec:	621a      	str	r2, [r3, #32]
  4068ee:	e002      	b.n	4068f6 <ioport_set_port_mode+0x8e>
		base->PIO_IFDR = mask;
  4068f0:	697b      	ldr	r3, [r7, #20]
  4068f2:	6a3a      	ldr	r2, [r7, #32]
  4068f4:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4068f6:	69fb      	ldr	r3, [r7, #28]
  4068f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4068fc:	2b00      	cmp	r3, #0
  4068fe:	d004      	beq.n	40690a <ioport_set_port_mode+0xa2>
		base->PIO_IFSCER = mask;
  406900:	697b      	ldr	r3, [r7, #20]
  406902:	6a3a      	ldr	r2, [r7, #32]
  406904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  406908:	e003      	b.n	406912 <ioport_set_port_mode+0xaa>
		base->PIO_IFSCDR = mask;
  40690a:	697b      	ldr	r3, [r7, #20]
  40690c:	6a3a      	ldr	r2, [r7, #32]
  40690e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  406912:	69fb      	ldr	r3, [r7, #28]
  406914:	f003 0301 	and.w	r3, r3, #1
  406918:	2b00      	cmp	r3, #0
  40691a:	d006      	beq.n	40692a <ioport_set_port_mode+0xc2>
		base->PIO_ABCDSR[0] |= mask;
  40691c:	697b      	ldr	r3, [r7, #20]
  40691e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  406920:	6a3b      	ldr	r3, [r7, #32]
  406922:	431a      	orrs	r2, r3
  406924:	697b      	ldr	r3, [r7, #20]
  406926:	671a      	str	r2, [r3, #112]	; 0x70
  406928:	e006      	b.n	406938 <ioport_set_port_mode+0xd0>
		base->PIO_ABCDSR[0] &= ~mask;
  40692a:	697b      	ldr	r3, [r7, #20]
  40692c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40692e:	6a3b      	ldr	r3, [r7, #32]
  406930:	43db      	mvns	r3, r3
  406932:	401a      	ands	r2, r3
  406934:	697b      	ldr	r3, [r7, #20]
  406936:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  406938:	69fb      	ldr	r3, [r7, #28]
  40693a:	f003 0302 	and.w	r3, r3, #2
  40693e:	2b00      	cmp	r3, #0
  406940:	d006      	beq.n	406950 <ioport_set_port_mode+0xe8>
		base->PIO_ABCDSR[1] |= mask;
  406942:	697b      	ldr	r3, [r7, #20]
  406944:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  406946:	6a3b      	ldr	r3, [r7, #32]
  406948:	431a      	orrs	r2, r3
  40694a:	697b      	ldr	r3, [r7, #20]
  40694c:	675a      	str	r2, [r3, #116]	; 0x74
}
  40694e:	e006      	b.n	40695e <ioport_set_port_mode+0xf6>
		base->PIO_ABCDSR[1] &= ~mask;
  406950:	697b      	ldr	r3, [r7, #20]
  406952:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  406954:	6a3b      	ldr	r3, [r7, #32]
  406956:	43db      	mvns	r3, r3
  406958:	401a      	ands	r2, r3
  40695a:	697b      	ldr	r3, [r7, #20]
  40695c:	675a      	str	r2, [r3, #116]	; 0x74
  40695e:	bf00      	nop
  406960:	372c      	adds	r7, #44	; 0x2c
  406962:	46bd      	mov	sp, r7
  406964:	f85d 7b04 	ldr.w	r7, [sp], #4
  406968:	4770      	bx	lr
	...

0040696c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40696c:	b580      	push	{r7, lr}
  40696e:	b088      	sub	sp, #32
  406970:	af00      	add	r7, sp, #0
  406972:	6078      	str	r0, [r7, #4]
  406974:	6039      	str	r1, [r7, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  406976:	683b      	ldr	r3, [r7, #0]
  406978:	681b      	ldr	r3, [r3, #0]
  40697a:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
  40697c:	683b      	ldr	r3, [r7, #0]
  40697e:	685b      	ldr	r3, [r3, #4]
  406980:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
  406982:	683b      	ldr	r3, [r7, #0]
  406984:	689b      	ldr	r3, [r3, #8]
  406986:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
  406988:	683b      	ldr	r3, [r7, #0]
  40698a:	68db      	ldr	r3, [r3, #12]
  40698c:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40698e:	2300      	movs	r3, #0
  406990:	61bb      	str	r3, [r7, #24]
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  406992:	687b      	ldr	r3, [r7, #4]
  406994:	4a69      	ldr	r2, [pc, #420]	; (406b3c <usart_serial_init+0x1d0>)
  406996:	4293      	cmp	r3, r2
  406998:	d115      	bne.n	4069c6 <usart_serial_init+0x5a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
  40699a:	4869      	ldr	r0, [pc, #420]	; (406b40 <usart_serial_init+0x1d4>)
  40699c:	4b69      	ldr	r3, [pc, #420]	; (406b44 <usart_serial_init+0x1d8>)
  40699e:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
  4069a0:	2101      	movs	r1, #1
  4069a2:	4867      	ldr	r0, [pc, #412]	; (406b40 <usart_serial_init+0x1d4>)
  4069a4:	4b68      	ldr	r3, [pc, #416]	; (406b48 <usart_serial_init+0x1dc>)
  4069a6:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART0);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4069a8:	4b68      	ldr	r3, [pc, #416]	; (406b4c <usart_serial_init+0x1e0>)
  4069aa:	4798      	blx	r3
  4069ac:	4602      	mov	r2, r0
  4069ae:	f107 0308 	add.w	r3, r7, #8
  4069b2:	4619      	mov	r1, r3
  4069b4:	6878      	ldr	r0, [r7, #4]
  4069b6:	4b66      	ldr	r3, [pc, #408]	; (406b50 <usart_serial_init+0x1e4>)
  4069b8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4069ba:	6878      	ldr	r0, [r7, #4]
  4069bc:	4b65      	ldr	r3, [pc, #404]	; (406b54 <usart_serial_init+0x1e8>)
  4069be:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4069c0:	6878      	ldr	r0, [r7, #4]
  4069c2:	4b65      	ldr	r3, [pc, #404]	; (406b58 <usart_serial_init+0x1ec>)
  4069c4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4069c6:	687b      	ldr	r3, [r7, #4]
  4069c8:	4a64      	ldr	r2, [pc, #400]	; (406b5c <usart_serial_init+0x1f0>)
  4069ca:	4293      	cmp	r3, r2
  4069cc:	d115      	bne.n	4069fa <usart_serial_init+0x8e>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
  4069ce:	4864      	ldr	r0, [pc, #400]	; (406b60 <usart_serial_init+0x1f4>)
  4069d0:	4b5c      	ldr	r3, [pc, #368]	; (406b44 <usart_serial_init+0x1d8>)
  4069d2:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
  4069d4:	2101      	movs	r1, #1
  4069d6:	4862      	ldr	r0, [pc, #392]	; (406b60 <usart_serial_init+0x1f4>)
  4069d8:	4b5b      	ldr	r3, [pc, #364]	; (406b48 <usart_serial_init+0x1dc>)
  4069da:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4069dc:	4b5b      	ldr	r3, [pc, #364]	; (406b4c <usart_serial_init+0x1e0>)
  4069de:	4798      	blx	r3
  4069e0:	4602      	mov	r2, r0
  4069e2:	f107 0308 	add.w	r3, r7, #8
  4069e6:	4619      	mov	r1, r3
  4069e8:	6878      	ldr	r0, [r7, #4]
  4069ea:	4b59      	ldr	r3, [pc, #356]	; (406b50 <usart_serial_init+0x1e4>)
  4069ec:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4069ee:	6878      	ldr	r0, [r7, #4]
  4069f0:	4b58      	ldr	r3, [pc, #352]	; (406b54 <usart_serial_init+0x1e8>)
  4069f2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4069f4:	6878      	ldr	r0, [r7, #4]
  4069f6:	4b58      	ldr	r3, [pc, #352]	; (406b58 <usart_serial_init+0x1ec>)
  4069f8:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4069fa:	687b      	ldr	r3, [r7, #4]
  4069fc:	4a59      	ldr	r2, [pc, #356]	; (406b64 <usart_serial_init+0x1f8>)
  4069fe:	4293      	cmp	r3, r2
  406a00:	d115      	bne.n	406a2e <usart_serial_init+0xc2>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
  406a02:	4859      	ldr	r0, [pc, #356]	; (406b68 <usart_serial_init+0x1fc>)
  406a04:	4b4f      	ldr	r3, [pc, #316]	; (406b44 <usart_serial_init+0x1d8>)
  406a06:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
  406a08:	2101      	movs	r1, #1
  406a0a:	4857      	ldr	r0, [pc, #348]	; (406b68 <usart_serial_init+0x1fc>)
  406a0c:	4b4e      	ldr	r3, [pc, #312]	; (406b48 <usart_serial_init+0x1dc>)
  406a0e:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART2);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406a10:	4b4e      	ldr	r3, [pc, #312]	; (406b4c <usart_serial_init+0x1e0>)
  406a12:	4798      	blx	r3
  406a14:	4602      	mov	r2, r0
  406a16:	f107 0308 	add.w	r3, r7, #8
  406a1a:	4619      	mov	r1, r3
  406a1c:	6878      	ldr	r0, [r7, #4]
  406a1e:	4b4c      	ldr	r3, [pc, #304]	; (406b50 <usart_serial_init+0x1e4>)
  406a20:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406a22:	6878      	ldr	r0, [r7, #4]
  406a24:	4b4b      	ldr	r3, [pc, #300]	; (406b54 <usart_serial_init+0x1e8>)
  406a26:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406a28:	6878      	ldr	r0, [r7, #4]
  406a2a:	4b4b      	ldr	r3, [pc, #300]	; (406b58 <usart_serial_init+0x1ec>)
  406a2c:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  406a2e:	687b      	ldr	r3, [r7, #4]
  406a30:	4a4e      	ldr	r2, [pc, #312]	; (406b6c <usart_serial_init+0x200>)
  406a32:	4293      	cmp	r3, r2
  406a34:	d115      	bne.n	406a62 <usart_serial_init+0xf6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM3);
  406a36:	484e      	ldr	r0, [pc, #312]	; (406b70 <usart_serial_init+0x204>)
  406a38:	4b42      	ldr	r3, [pc, #264]	; (406b44 <usart_serial_init+0x1d8>)
  406a3a:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM3, FLEXCOM_USART);
  406a3c:	2101      	movs	r1, #1
  406a3e:	484c      	ldr	r0, [pc, #304]	; (406b70 <usart_serial_init+0x204>)
  406a40:	4b41      	ldr	r3, [pc, #260]	; (406b48 <usart_serial_init+0x1dc>)
  406a42:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART3);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406a44:	4b41      	ldr	r3, [pc, #260]	; (406b4c <usart_serial_init+0x1e0>)
  406a46:	4798      	blx	r3
  406a48:	4602      	mov	r2, r0
  406a4a:	f107 0308 	add.w	r3, r7, #8
  406a4e:	4619      	mov	r1, r3
  406a50:	6878      	ldr	r0, [r7, #4]
  406a52:	4b3f      	ldr	r3, [pc, #252]	; (406b50 <usart_serial_init+0x1e4>)
  406a54:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406a56:	6878      	ldr	r0, [r7, #4]
  406a58:	4b3e      	ldr	r3, [pc, #248]	; (406b54 <usart_serial_init+0x1e8>)
  406a5a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406a5c:	6878      	ldr	r0, [r7, #4]
  406a5e:	4b3e      	ldr	r3, [pc, #248]	; (406b58 <usart_serial_init+0x1ec>)
  406a60:	4798      	blx	r3
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  406a62:	687b      	ldr	r3, [r7, #4]
  406a64:	4a43      	ldr	r2, [pc, #268]	; (406b74 <usart_serial_init+0x208>)
  406a66:	4293      	cmp	r3, r2
  406a68:	d115      	bne.n	406a96 <usart_serial_init+0x12a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM4);
  406a6a:	4843      	ldr	r0, [pc, #268]	; (406b78 <usart_serial_init+0x20c>)
  406a6c:	4b35      	ldr	r3, [pc, #212]	; (406b44 <usart_serial_init+0x1d8>)
  406a6e:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM4, FLEXCOM_USART);
  406a70:	2101      	movs	r1, #1
  406a72:	4841      	ldr	r0, [pc, #260]	; (406b78 <usart_serial_init+0x20c>)
  406a74:	4b34      	ldr	r3, [pc, #208]	; (406b48 <usart_serial_init+0x1dc>)
  406a76:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART4);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406a78:	4b34      	ldr	r3, [pc, #208]	; (406b4c <usart_serial_init+0x1e0>)
  406a7a:	4798      	blx	r3
  406a7c:	4602      	mov	r2, r0
  406a7e:	f107 0308 	add.w	r3, r7, #8
  406a82:	4619      	mov	r1, r3
  406a84:	6878      	ldr	r0, [r7, #4]
  406a86:	4b32      	ldr	r3, [pc, #200]	; (406b50 <usart_serial_init+0x1e4>)
  406a88:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406a8a:	6878      	ldr	r0, [r7, #4]
  406a8c:	4b31      	ldr	r3, [pc, #196]	; (406b54 <usart_serial_init+0x1e8>)
  406a8e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406a90:	6878      	ldr	r0, [r7, #4]
  406a92:	4b31      	ldr	r3, [pc, #196]	; (406b58 <usart_serial_init+0x1ec>)
  406a94:	4798      	blx	r3
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  406a96:	687b      	ldr	r3, [r7, #4]
  406a98:	4a38      	ldr	r2, [pc, #224]	; (406b7c <usart_serial_init+0x210>)
  406a9a:	4293      	cmp	r3, r2
  406a9c:	d115      	bne.n	406aca <usart_serial_init+0x15e>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM5);
  406a9e:	4838      	ldr	r0, [pc, #224]	; (406b80 <usart_serial_init+0x214>)
  406aa0:	4b28      	ldr	r3, [pc, #160]	; (406b44 <usart_serial_init+0x1d8>)
  406aa2:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM5, FLEXCOM_USART);
  406aa4:	2101      	movs	r1, #1
  406aa6:	4836      	ldr	r0, [pc, #216]	; (406b80 <usart_serial_init+0x214>)
  406aa8:	4b27      	ldr	r3, [pc, #156]	; (406b48 <usart_serial_init+0x1dc>)
  406aaa:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART5);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406aac:	4b27      	ldr	r3, [pc, #156]	; (406b4c <usart_serial_init+0x1e0>)
  406aae:	4798      	blx	r3
  406ab0:	4602      	mov	r2, r0
  406ab2:	f107 0308 	add.w	r3, r7, #8
  406ab6:	4619      	mov	r1, r3
  406ab8:	6878      	ldr	r0, [r7, #4]
  406aba:	4b25      	ldr	r3, [pc, #148]	; (406b50 <usart_serial_init+0x1e4>)
  406abc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406abe:	6878      	ldr	r0, [r7, #4]
  406ac0:	4b24      	ldr	r3, [pc, #144]	; (406b54 <usart_serial_init+0x1e8>)
  406ac2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406ac4:	6878      	ldr	r0, [r7, #4]
  406ac6:	4b24      	ldr	r3, [pc, #144]	; (406b58 <usart_serial_init+0x1ec>)
  406ac8:	4798      	blx	r3
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  406aca:	687b      	ldr	r3, [r7, #4]
  406acc:	4a2d      	ldr	r2, [pc, #180]	; (406b84 <usart_serial_init+0x218>)
  406ace:	4293      	cmp	r3, r2
  406ad0:	d115      	bne.n	406afe <usart_serial_init+0x192>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM6);
  406ad2:	482d      	ldr	r0, [pc, #180]	; (406b88 <usart_serial_init+0x21c>)
  406ad4:	4b1b      	ldr	r3, [pc, #108]	; (406b44 <usart_serial_init+0x1d8>)
  406ad6:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM6, FLEXCOM_USART);
  406ad8:	2101      	movs	r1, #1
  406ada:	482b      	ldr	r0, [pc, #172]	; (406b88 <usart_serial_init+0x21c>)
  406adc:	4b1a      	ldr	r3, [pc, #104]	; (406b48 <usart_serial_init+0x1dc>)
  406ade:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART6);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406ae0:	4b1a      	ldr	r3, [pc, #104]	; (406b4c <usart_serial_init+0x1e0>)
  406ae2:	4798      	blx	r3
  406ae4:	4602      	mov	r2, r0
  406ae6:	f107 0308 	add.w	r3, r7, #8
  406aea:	4619      	mov	r1, r3
  406aec:	6878      	ldr	r0, [r7, #4]
  406aee:	4b18      	ldr	r3, [pc, #96]	; (406b50 <usart_serial_init+0x1e4>)
  406af0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406af2:	6878      	ldr	r0, [r7, #4]
  406af4:	4b17      	ldr	r3, [pc, #92]	; (406b54 <usart_serial_init+0x1e8>)
  406af6:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406af8:	6878      	ldr	r0, [r7, #4]
  406afa:	4b17      	ldr	r3, [pc, #92]	; (406b58 <usart_serial_init+0x1ec>)
  406afc:	4798      	blx	r3
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  406afe:	687b      	ldr	r3, [r7, #4]
  406b00:	4a22      	ldr	r2, [pc, #136]	; (406b8c <usart_serial_init+0x220>)
  406b02:	4293      	cmp	r3, r2
  406b04:	d115      	bne.n	406b32 <usart_serial_init+0x1c6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM7);
  406b06:	4822      	ldr	r0, [pc, #136]	; (406b90 <usart_serial_init+0x224>)
  406b08:	4b0e      	ldr	r3, [pc, #56]	; (406b44 <usart_serial_init+0x1d8>)
  406b0a:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM7, FLEXCOM_USART);
  406b0c:	2101      	movs	r1, #1
  406b0e:	4820      	ldr	r0, [pc, #128]	; (406b90 <usart_serial_init+0x224>)
  406b10:	4b0d      	ldr	r3, [pc, #52]	; (406b48 <usart_serial_init+0x1dc>)
  406b12:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART7);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406b14:	4b0d      	ldr	r3, [pc, #52]	; (406b4c <usart_serial_init+0x1e0>)
  406b16:	4798      	blx	r3
  406b18:	4602      	mov	r2, r0
  406b1a:	f107 0308 	add.w	r3, r7, #8
  406b1e:	4619      	mov	r1, r3
  406b20:	6878      	ldr	r0, [r7, #4]
  406b22:	4b0b      	ldr	r3, [pc, #44]	; (406b50 <usart_serial_init+0x1e4>)
  406b24:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406b26:	6878      	ldr	r0, [r7, #4]
  406b28:	4b0a      	ldr	r3, [pc, #40]	; (406b54 <usart_serial_init+0x1e8>)
  406b2a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406b2c:	6878      	ldr	r0, [r7, #4]
  406b2e:	4b0a      	ldr	r3, [pc, #40]	; (406b58 <usart_serial_init+0x1ec>)
  406b30:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  406b32:	bf00      	nop
  406b34:	3720      	adds	r7, #32
  406b36:	46bd      	mov	sp, r7
  406b38:	bd80      	pop	{r7, pc}
  406b3a:	bf00      	nop
  406b3c:	4000c200 	.word	0x4000c200
  406b40:	4000c000 	.word	0x4000c000
  406b44:	00407f49 	.word	0x00407f49
  406b48:	004080b1 	.word	0x004080b1
  406b4c:	00406805 	.word	0x00406805
  406b50:	004094f9 	.word	0x004094f9
  406b54:	0040957d 	.word	0x0040957d
  406b58:	004095b1 	.word	0x004095b1
  406b5c:	40020200 	.word	0x40020200
  406b60:	40020000 	.word	0x40020000
  406b64:	40024200 	.word	0x40024200
  406b68:	40024000 	.word	0x40024000
  406b6c:	40018200 	.word	0x40018200
  406b70:	40018000 	.word	0x40018000
  406b74:	4001c200 	.word	0x4001c200
  406b78:	4001c000 	.word	0x4001c000
  406b7c:	40008200 	.word	0x40008200
  406b80:	40008000 	.word	0x40008000
  406b84:	40040200 	.word	0x40040200
  406b88:	40040000 	.word	0x40040000
  406b8c:	40034200 	.word	0x40034200
  406b90:	40034000 	.word	0x40034000

00406b94 <inv_uart_init>:
static int uart_dma_rx(inv_uart_num_t uart);


/****************************** Public Functions ******************************/
int inv_uart_init(inv_uart_init_struct_t * uart_init)
{
  406b94:	b5b0      	push	{r4, r5, r7, lr}
  406b96:	b088      	sub	sp, #32
  406b98:	af00      	add	r7, sp, #0
  406b9a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	usart_serial_options_t USART_InitStructure;
	inv_uart_num_t uart = uart_init->uart_num;
  406b9c:	687b      	ldr	r3, [r7, #4]
  406b9e:	781b      	ldrb	r3, [r3, #0]
  406ba0:	76fb      	strb	r3, [r7, #27]
	
	/* Don't execute this function if UART is not under reset state */
	if( (um[uart].uart_tx_state != INV_UART_STATE_RESET) ||
  406ba2:	7efb      	ldrb	r3, [r7, #27]
  406ba4:	4aa1      	ldr	r2, [pc, #644]	; (406e2c <inv_uart_init+0x298>)
  406ba6:	215c      	movs	r1, #92	; 0x5c
  406ba8:	fb01 f303 	mul.w	r3, r1, r3
  406bac:	4413      	add	r3, r2
  406bae:	3340      	adds	r3, #64	; 0x40
  406bb0:	781b      	ldrb	r3, [r3, #0]
  406bb2:	b2db      	uxtb	r3, r3
  406bb4:	2b00      	cmp	r3, #0
  406bb6:	d109      	bne.n	406bcc <inv_uart_init+0x38>
		(um[uart].uart_rx_state != INV_UART_STATE_RESET))
  406bb8:	7efb      	ldrb	r3, [r7, #27]
  406bba:	4a9c      	ldr	r2, [pc, #624]	; (406e2c <inv_uart_init+0x298>)
  406bbc:	215c      	movs	r1, #92	; 0x5c
  406bbe:	fb01 f303 	mul.w	r3, r1, r3
  406bc2:	4413      	add	r3, r2
  406bc4:	3341      	adds	r3, #65	; 0x41
  406bc6:	781b      	ldrb	r3, [r3, #0]
	if( (um[uart].uart_tx_state != INV_UART_STATE_RESET) ||
  406bc8:	2b00      	cmp	r3, #0
  406bca:	d001      	beq.n	406bd0 <inv_uart_init+0x3c>
		return INV_UART_ERROR_SUCCES;
  406bcc:	2300      	movs	r3, #0
  406bce:	e129      	b.n	406e24 <inv_uart_init+0x290>
	
	/* Check memory is passed in parameter for tx and rx  */
	if ((uart_init->tx_size == 0) && (uart_init->rx_size == 0))
  406bd0:	687b      	ldr	r3, [r7, #4]
  406bd2:	899b      	ldrh	r3, [r3, #12]
  406bd4:	2b00      	cmp	r3, #0
  406bd6:	d106      	bne.n	406be6 <inv_uart_init+0x52>
  406bd8:	687b      	ldr	r3, [r7, #4]
  406bda:	89db      	ldrh	r3, [r3, #14]
  406bdc:	2b00      	cmp	r3, #0
  406bde:	d102      	bne.n	406be6 <inv_uart_init+0x52>
			return INV_UART_ERROR_BAD_ARG;
  406be0:	f06f 0303 	mvn.w	r3, #3
  406be4:	e11e      	b.n	406e24 <inv_uart_init+0x290>

	/* init structure */
	um[uart].uart_pdc = usart_get_pdc_base(um[uart].uart_ip);
  406be6:	7efc      	ldrb	r4, [r7, #27]
  406be8:	7efb      	ldrb	r3, [r7, #27]
  406bea:	4a90      	ldr	r2, [pc, #576]	; (406e2c <inv_uart_init+0x298>)
  406bec:	215c      	movs	r1, #92	; 0x5c
  406bee:	fb01 f303 	mul.w	r3, r1, r3
  406bf2:	4413      	add	r3, r2
  406bf4:	681b      	ldr	r3, [r3, #0]
  406bf6:	4618      	mov	r0, r3
  406bf8:	4b8d      	ldr	r3, [pc, #564]	; (406e30 <inv_uart_init+0x29c>)
  406bfa:	4798      	blx	r3
  406bfc:	4601      	mov	r1, r0
  406bfe:	4a8b      	ldr	r2, [pc, #556]	; (406e2c <inv_uart_init+0x298>)
  406c00:	235c      	movs	r3, #92	; 0x5c
  406c02:	fb03 f304 	mul.w	r3, r3, r4
  406c06:	4413      	add	r3, r2
  406c08:	3304      	adds	r3, #4
  406c0a:	6019      	str	r1, [r3, #0]
	um[uart].uart_tx_state = INV_UART_STATE_IDLE;	
  406c0c:	7efb      	ldrb	r3, [r7, #27]
  406c0e:	4a87      	ldr	r2, [pc, #540]	; (406e2c <inv_uart_init+0x298>)
  406c10:	215c      	movs	r1, #92	; 0x5c
  406c12:	fb01 f303 	mul.w	r3, r1, r3
  406c16:	4413      	add	r3, r2
  406c18:	3340      	adds	r3, #64	; 0x40
  406c1a:	2201      	movs	r2, #1
  406c1c:	701a      	strb	r2, [r3, #0]
	um[uart].uart_rx_state = INV_UART_STATE_IDLE;
  406c1e:	7efb      	ldrb	r3, [r7, #27]
  406c20:	4a82      	ldr	r2, [pc, #520]	; (406e2c <inv_uart_init+0x298>)
  406c22:	215c      	movs	r1, #92	; 0x5c
  406c24:	fb01 f303 	mul.w	r3, r1, r3
  406c28:	4413      	add	r3, r2
  406c2a:	3341      	adds	r3, #65	; 0x41
  406c2c:	2201      	movs	r2, #1
  406c2e:	701a      	strb	r2, [r3, #0]
	um[uart].uart_rx_buffer = uart_init->rx_buffer;
  406c30:	7efb      	ldrb	r3, [r7, #27]
  406c32:	687a      	ldr	r2, [r7, #4]
  406c34:	6892      	ldr	r2, [r2, #8]
  406c36:	497d      	ldr	r1, [pc, #500]	; (406e2c <inv_uart_init+0x298>)
  406c38:	205c      	movs	r0, #92	; 0x5c
  406c3a:	fb00 f303 	mul.w	r3, r0, r3
  406c3e:	440b      	add	r3, r1
  406c40:	3344      	adds	r3, #68	; 0x44
  406c42:	601a      	str	r2, [r3, #0]
	um[uart].uart_tx_buffer = uart_init->tx_buffer;
  406c44:	7efb      	ldrb	r3, [r7, #27]
  406c46:	687a      	ldr	r2, [r7, #4]
  406c48:	6852      	ldr	r2, [r2, #4]
  406c4a:	4978      	ldr	r1, [pc, #480]	; (406e2c <inv_uart_init+0x298>)
  406c4c:	205c      	movs	r0, #92	; 0x5c
  406c4e:	fb00 f303 	mul.w	r3, r0, r3
  406c52:	440b      	add	r3, r1
  406c54:	3348      	adds	r3, #72	; 0x48
  406c56:	601a      	str	r2, [r3, #0]
	um[uart].uart_rx_buffer_size = uart_init->rx_size;
  406c58:	7efb      	ldrb	r3, [r7, #27]
  406c5a:	687a      	ldr	r2, [r7, #4]
  406c5c:	89d0      	ldrh	r0, [r2, #14]
  406c5e:	4a73      	ldr	r2, [pc, #460]	; (406e2c <inv_uart_init+0x298>)
  406c60:	215c      	movs	r1, #92	; 0x5c
  406c62:	fb01 f303 	mul.w	r3, r1, r3
  406c66:	4413      	add	r3, r2
  406c68:	334c      	adds	r3, #76	; 0x4c
  406c6a:	4602      	mov	r2, r0
  406c6c:	801a      	strh	r2, [r3, #0]
	um[uart].uart_tx_buffer_size = uart_init->tx_size;
  406c6e:	7efb      	ldrb	r3, [r7, #27]
  406c70:	687a      	ldr	r2, [r7, #4]
  406c72:	8990      	ldrh	r0, [r2, #12]
  406c74:	4a6d      	ldr	r2, [pc, #436]	; (406e2c <inv_uart_init+0x298>)
  406c76:	215c      	movs	r1, #92	; 0x5c
  406c78:	fb01 f303 	mul.w	r3, r1, r3
  406c7c:	4413      	add	r3, r2
  406c7e:	334e      	adds	r3, #78	; 0x4e
  406c80:	4602      	mov	r2, r0
  406c82:	801a      	strh	r2, [r3, #0]
	um[uart].tx_done_cb = uart_init->tx_done_cb;
  406c84:	7efb      	ldrb	r3, [r7, #27]
  406c86:	687a      	ldr	r2, [r7, #4]
  406c88:	6992      	ldr	r2, [r2, #24]
  406c8a:	4968      	ldr	r1, [pc, #416]	; (406e2c <inv_uart_init+0x298>)
  406c8c:	205c      	movs	r0, #92	; 0x5c
  406c8e:	fb00 f303 	mul.w	r3, r0, r3
  406c92:	440b      	add	r3, r1
  406c94:	3354      	adds	r3, #84	; 0x54
  406c96:	601a      	str	r2, [r3, #0]
	um[uart].tx_context = uart_init->tx_context;
  406c98:	7efb      	ldrb	r3, [r7, #27]
  406c9a:	687a      	ldr	r2, [r7, #4]
  406c9c:	69d2      	ldr	r2, [r2, #28]
  406c9e:	4963      	ldr	r1, [pc, #396]	; (406e2c <inv_uart_init+0x298>)
  406ca0:	205c      	movs	r0, #92	; 0x5c
  406ca2:	fb00 f303 	mul.w	r3, r0, r3
  406ca6:	440b      	add	r3, r1
  406ca8:	3358      	adds	r3, #88	; 0x58
  406caa:	601a      	str	r2, [r3, #0]
	
	/* Configure GPIO pins */
	for(i=0 ; i < (uint32_t) (sizeof(um[uart].uart_gpio)/sizeof(um[uart].uart_gpio[0])) ; i++) {
  406cac:	2300      	movs	r3, #0
  406cae:	61fb      	str	r3, [r7, #28]
  406cb0:	e062      	b.n	406d78 <inv_uart_init+0x1e4>
		/* gpio port )= 0xffffffff means ignore this pin */
		if(um[uart].uart_gpio[i].port != 0xffffffff) {
  406cb2:	7ef9      	ldrb	r1, [r7, #27]
  406cb4:	485d      	ldr	r0, [pc, #372]	; (406e2c <inv_uart_init+0x298>)
  406cb6:	69fa      	ldr	r2, [r7, #28]
  406cb8:	4613      	mov	r3, r2
  406cba:	005b      	lsls	r3, r3, #1
  406cbc:	4413      	add	r3, r2
  406cbe:	009b      	lsls	r3, r3, #2
  406cc0:	225c      	movs	r2, #92	; 0x5c
  406cc2:	fb02 f201 	mul.w	r2, r2, r1
  406cc6:	4413      	add	r3, r2
  406cc8:	4403      	add	r3, r0
  406cca:	3310      	adds	r3, #16
  406ccc:	681b      	ldr	r3, [r3, #0]
  406cce:	f1b3 3fff 	cmp.w	r3, #4294967295
  406cd2:	d04e      	beq.n	406d72 <inv_uart_init+0x1de>
			ioport_set_port_mode(um[uart].uart_gpio[i].port,
  406cd4:	7ef9      	ldrb	r1, [r7, #27]
  406cd6:	4855      	ldr	r0, [pc, #340]	; (406e2c <inv_uart_init+0x298>)
  406cd8:	69fa      	ldr	r2, [r7, #28]
  406cda:	4613      	mov	r3, r2
  406cdc:	005b      	lsls	r3, r3, #1
  406cde:	4413      	add	r3, r2
  406ce0:	009b      	lsls	r3, r3, #2
  406ce2:	225c      	movs	r2, #92	; 0x5c
  406ce4:	fb02 f201 	mul.w	r2, r2, r1
  406ce8:	4413      	add	r3, r2
  406cea:	4403      	add	r3, r0
  406cec:	3310      	adds	r3, #16
  406cee:	681c      	ldr	r4, [r3, #0]
  406cf0:	7ef9      	ldrb	r1, [r7, #27]
  406cf2:	484e      	ldr	r0, [pc, #312]	; (406e2c <inv_uart_init+0x298>)
  406cf4:	69fa      	ldr	r2, [r7, #28]
  406cf6:	4613      	mov	r3, r2
  406cf8:	005b      	lsls	r3, r3, #1
  406cfa:	4413      	add	r3, r2
  406cfc:	009b      	lsls	r3, r3, #2
  406cfe:	225c      	movs	r2, #92	; 0x5c
  406d00:	fb02 f201 	mul.w	r2, r2, r1
  406d04:	4413      	add	r3, r2
  406d06:	4403      	add	r3, r0
  406d08:	3314      	adds	r3, #20
  406d0a:	681d      	ldr	r5, [r3, #0]
  406d0c:	7ef9      	ldrb	r1, [r7, #27]
  406d0e:	4847      	ldr	r0, [pc, #284]	; (406e2c <inv_uart_init+0x298>)
  406d10:	69fa      	ldr	r2, [r7, #28]
  406d12:	4613      	mov	r3, r2
  406d14:	005b      	lsls	r3, r3, #1
  406d16:	4413      	add	r3, r2
  406d18:	009b      	lsls	r3, r3, #2
  406d1a:	225c      	movs	r2, #92	; 0x5c
  406d1c:	fb02 f201 	mul.w	r2, r2, r1
  406d20:	4413      	add	r3, r2
  406d22:	4403      	add	r3, r0
  406d24:	3318      	adds	r3, #24
  406d26:	681b      	ldr	r3, [r3, #0]
  406d28:	461a      	mov	r2, r3
  406d2a:	4629      	mov	r1, r5
  406d2c:	4620      	mov	r0, r4
  406d2e:	4b41      	ldr	r3, [pc, #260]	; (406e34 <inv_uart_init+0x2a0>)
  406d30:	4798      	blx	r3
								 um[uart].uart_gpio[i].pin_id,
								 um[uart].uart_gpio[i].mode_mux);
			ioport_disable_port(um[uart].uart_gpio[i].port,
  406d32:	7ef9      	ldrb	r1, [r7, #27]
  406d34:	483d      	ldr	r0, [pc, #244]	; (406e2c <inv_uart_init+0x298>)
  406d36:	69fa      	ldr	r2, [r7, #28]
  406d38:	4613      	mov	r3, r2
  406d3a:	005b      	lsls	r3, r3, #1
  406d3c:	4413      	add	r3, r2
  406d3e:	009b      	lsls	r3, r3, #2
  406d40:	225c      	movs	r2, #92	; 0x5c
  406d42:	fb02 f201 	mul.w	r2, r2, r1
  406d46:	4413      	add	r3, r2
  406d48:	4403      	add	r3, r0
  406d4a:	3310      	adds	r3, #16
  406d4c:	681c      	ldr	r4, [r3, #0]
  406d4e:	7ef9      	ldrb	r1, [r7, #27]
  406d50:	4836      	ldr	r0, [pc, #216]	; (406e2c <inv_uart_init+0x298>)
  406d52:	69fa      	ldr	r2, [r7, #28]
  406d54:	4613      	mov	r3, r2
  406d56:	005b      	lsls	r3, r3, #1
  406d58:	4413      	add	r3, r2
  406d5a:	009b      	lsls	r3, r3, #2
  406d5c:	225c      	movs	r2, #92	; 0x5c
  406d5e:	fb02 f201 	mul.w	r2, r2, r1
  406d62:	4413      	add	r3, r2
  406d64:	4403      	add	r3, r0
  406d66:	3314      	adds	r3, #20
  406d68:	681b      	ldr	r3, [r3, #0]
  406d6a:	4619      	mov	r1, r3
  406d6c:	4620      	mov	r0, r4
  406d6e:	4b32      	ldr	r3, [pc, #200]	; (406e38 <inv_uart_init+0x2a4>)
  406d70:	4798      	blx	r3
	for(i=0 ; i < (uint32_t) (sizeof(um[uart].uart_gpio)/sizeof(um[uart].uart_gpio[0])) ; i++) {
  406d72:	69fb      	ldr	r3, [r7, #28]
  406d74:	3301      	adds	r3, #1
  406d76:	61fb      	str	r3, [r7, #28]
  406d78:	69fb      	ldr	r3, [r7, #28]
  406d7a:	2b03      	cmp	r3, #3
  406d7c:	d999      	bls.n	406cb2 <inv_uart_init+0x11e>
	 *  - 8bits
	 *  - 1Stop
	 *  - No parity
	 *  - baudrate from input parameter
	 */
	USART_InitStructure.baudrate = uart_init->baudrate;
  406d7e:	687b      	ldr	r3, [r7, #4]
  406d80:	691b      	ldr	r3, [r3, #16]
  406d82:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.charlength = US_MR_CHRL_8_BIT;
  406d84:	23c0      	movs	r3, #192	; 0xc0
  406d86:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.stopbits = US_MR_NBSTOP_1_BIT;
  406d88:	2300      	movs	r3, #0
  406d8a:	617b      	str	r3, [r7, #20]
	USART_InitStructure.paritytype = US_MR_PAR_NO;
  406d8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406d90:	613b      	str	r3, [r7, #16]

	
	sysclk_enable_peripheral_clock(um[uart].uart_periph_id);
  406d92:	7efb      	ldrb	r3, [r7, #27]
  406d94:	4a25      	ldr	r2, [pc, #148]	; (406e2c <inv_uart_init+0x298>)
  406d96:	215c      	movs	r1, #92	; 0x5c
  406d98:	fb01 f303 	mul.w	r3, r1, r3
  406d9c:	4413      	add	r3, r2
  406d9e:	330c      	adds	r3, #12
  406da0:	681b      	ldr	r3, [r3, #0]
  406da2:	4618      	mov	r0, r3
  406da4:	4b25      	ldr	r3, [pc, #148]	; (406e3c <inv_uart_init+0x2a8>)
  406da6:	4798      	blx	r3
	
	/* initialize and enable UART */
	usart_serial_init(um[uart].uart_ip, &USART_InitStructure);
  406da8:	7efb      	ldrb	r3, [r7, #27]
  406daa:	4a20      	ldr	r2, [pc, #128]	; (406e2c <inv_uart_init+0x298>)
  406dac:	215c      	movs	r1, #92	; 0x5c
  406dae:	fb01 f303 	mul.w	r3, r1, r3
  406db2:	4413      	add	r3, r2
  406db4:	681b      	ldr	r3, [r3, #0]
  406db6:	f107 0208 	add.w	r2, r7, #8
  406dba:	4611      	mov	r1, r2
  406dbc:	4618      	mov	r0, r3
  406dbe:	4b20      	ldr	r3, [pc, #128]	; (406e40 <inv_uart_init+0x2ac>)
  406dc0:	4798      	blx	r3
	
	/*
	 * Enable hw handshake if required.
	 * Note: Flow control is only supported on INV_UART_SENSOR_CTRL
	 */
	if(uart_init->flow_ctrl != INV_UART_FLOW_CONTROL_NONE) {
  406dc2:	687b      	ldr	r3, [r7, #4]
  406dc4:	7d1b      	ldrb	r3, [r3, #20]
  406dc6:	2b00      	cmp	r3, #0
  406dc8:	d010      	beq.n	406dec <inv_uart_init+0x258>
		if(uart == INV_UART_SENSOR_CTRL)
  406dca:	7efb      	ldrb	r3, [r7, #27]
  406dcc:	2b00      	cmp	r3, #0
  406dce:	d10a      	bne.n	406de6 <inv_uart_init+0x252>
			um[INV_UART_SENSOR_CTRL].uart_ip->US_MR = (um[INV_UART_SENSOR_CTRL].uart_ip->US_MR & ~US_MR_USART_MODE_Msk) |
  406dd0:	4b16      	ldr	r3, [pc, #88]	; (406e2c <inv_uart_init+0x298>)
  406dd2:	681b      	ldr	r3, [r3, #0]
  406dd4:	4a15      	ldr	r2, [pc, #84]	; (406e2c <inv_uart_init+0x298>)
  406dd6:	6812      	ldr	r2, [r2, #0]
  406dd8:	6852      	ldr	r2, [r2, #4]
  406dda:	f022 020f 	bic.w	r2, r2, #15
  406dde:	f042 0202 	orr.w	r2, r2, #2
  406de2:	605a      	str	r2, [r3, #4]
  406de4:	e002      	b.n	406dec <inv_uart_init+0x258>
										US_MR_USART_MODE_HW_HANDSHAKING;
		else
			return INV_UART_ERROR_BAD_ARG;
  406de6:	f06f 0303 	mvn.w	r3, #3
  406dea:	e01b      	b.n	406e24 <inv_uart_init+0x290>
	
	/* 
	 * UART TX specific configuration:
	 *  - Enable UART interrupt at NVIC level
	 */
	NVIC_EnableIRQ((IRQn_Type)um[uart].uart_it_nb);
  406dec:	7efb      	ldrb	r3, [r7, #27]
  406dee:	4a0f      	ldr	r2, [pc, #60]	; (406e2c <inv_uart_init+0x298>)
  406df0:	215c      	movs	r1, #92	; 0x5c
  406df2:	fb01 f303 	mul.w	r3, r1, r3
  406df6:	4413      	add	r3, r2
  406df8:	3308      	adds	r3, #8
  406dfa:	681b      	ldr	r3, [r3, #0]
  406dfc:	b25b      	sxtb	r3, r3
  406dfe:	4618      	mov	r0, r3
  406e00:	4b10      	ldr	r3, [pc, #64]	; (406e44 <inv_uart_init+0x2b0>)
  406e02:	4798      	blx	r3
	/* 
	 * UART RX specific configuration:
	 *  - Set circular buffer mode for RX
	 *  - No interrupt
	 */
	um[uart].uart_pdc->PERIPH_PTCR = PERIPH_PTCR_RXCBEN;
  406e04:	7efb      	ldrb	r3, [r7, #27]
  406e06:	4a09      	ldr	r2, [pc, #36]	; (406e2c <inv_uart_init+0x298>)
  406e08:	215c      	movs	r1, #92	; 0x5c
  406e0a:	fb01 f303 	mul.w	r3, r1, r3
  406e0e:	4413      	add	r3, r2
  406e10:	3304      	adds	r3, #4
  406e12:	681b      	ldr	r3, [r3, #0]
  406e14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  406e18:	621a      	str	r2, [r3, #32]
	
	/* Trigger a DMA RX. 
	 * Note: DMA is in circular mode. refer to the device datasheet for further details.
	 */
	return uart_dma_rx(uart);
  406e1a:	7efb      	ldrb	r3, [r7, #27]
  406e1c:	4618      	mov	r0, r3
  406e1e:	4b0a      	ldr	r3, [pc, #40]	; (406e48 <inv_uart_init+0x2b4>)
  406e20:	4798      	blx	r3
  406e22:	4603      	mov	r3, r0
}
  406e24:	4618      	mov	r0, r3
  406e26:	3720      	adds	r7, #32
  406e28:	46bd      	mov	sp, r7
  406e2a:	bdb0      	pop	{r4, r5, r7, pc}
  406e2c:	2000241c 	.word	0x2000241c
  406e30:	0040966d 	.word	0x0040966d
  406e34:	00406869 	.word	0x00406869
  406e38:	00406835 	.word	0x00406835
  406e3c:	00406819 	.word	0x00406819
  406e40:	0040696d 	.word	0x0040696d
  406e44:	00406741 	.word	0x00406741
  406e48:	0040718d 	.word	0x0040718d

00406e4c <inv_uart_puts>:
	
	return inv_uart_tx_txfer(uart, &txfer);
}

int inv_uart_puts(inv_uart_num_t uart, const char * s, unsigned short l)
{
  406e4c:	b580      	push	{r7, lr}
  406e4e:	b084      	sub	sp, #16
  406e50:	af00      	add	r7, sp, #0
  406e52:	4603      	mov	r3, r0
  406e54:	6039      	str	r1, [r7, #0]
  406e56:	71fb      	strb	r3, [r7, #7]
  406e58:	4613      	mov	r3, r2
  406e5a:	80bb      	strh	r3, [r7, #4]
	inv_uart_tx_transfer_t txfer;
	
	txfer.data = (uint8_t *)s;
  406e5c:	683b      	ldr	r3, [r7, #0]
  406e5e:	60bb      	str	r3, [r7, #8]
	txfer.len = (uint16_t)l;
  406e60:	88bb      	ldrh	r3, [r7, #4]
  406e62:	81bb      	strh	r3, [r7, #12]
	
	return inv_uart_tx_txfer(uart, &txfer);
  406e64:	f107 0208 	add.w	r2, r7, #8
  406e68:	79fb      	ldrb	r3, [r7, #7]
  406e6a:	4611      	mov	r1, r2
  406e6c:	4618      	mov	r0, r3
  406e6e:	4b03      	ldr	r3, [pc, #12]	; (406e7c <inv_uart_puts+0x30>)
  406e70:	4798      	blx	r3
  406e72:	4603      	mov	r3, r0
}
  406e74:	4618      	mov	r0, r3
  406e76:	3710      	adds	r7, #16
  406e78:	46bd      	mov	sp, r7
  406e7a:	bd80      	pop	{r7, pc}
  406e7c:	00406e81 	.word	0x00406e81

00406e80 <inv_uart_tx_txfer>:

int inv_uart_tx_txfer(inv_uart_num_t uart, inv_uart_tx_transfer_t * txfer)
{
  406e80:	b580      	push	{r7, lr}
  406e82:	b088      	sub	sp, #32
  406e84:	af00      	add	r7, sp, #0
  406e86:	4603      	mov	r3, r0
  406e88:	6039      	str	r1, [r7, #0]
  406e8a:	71fb      	strb	r3, [r7, #7]
	int rc = INV_UART_ERROR_SUCCES;
  406e8c:	2300      	movs	r3, #0
  406e8e:	61fb      	str	r3, [r7, #28]
	inv_uart_state_t uart_tx_state;
	int timeout = 1000;
  406e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  406e94:	61bb      	str	r3, [r7, #24]
	
	uart_tx_state = inv_uart_tx_get_state(uart);
  406e96:	79fb      	ldrb	r3, [r7, #7]
  406e98:	4618      	mov	r0, r3
  406e9a:	4b57      	ldr	r3, [pc, #348]	; (406ff8 <inv_uart_tx_txfer+0x178>)
  406e9c:	4798      	blx	r3
  406e9e:	4603      	mov	r3, r0
  406ea0:	75fb      	strb	r3, [r7, #23]
	
	if(uart_tx_state == INV_UART_STATE_IDLE) {
  406ea2:	7dfb      	ldrb	r3, [r7, #23]
  406ea4:	2b01      	cmp	r3, #1
  406ea6:	f040 809b 	bne.w	406fe0 <inv_uart_tx_txfer+0x160>
		if (txfer->len > um[uart].uart_tx_buffer_size) {
  406eaa:	683b      	ldr	r3, [r7, #0]
  406eac:	889a      	ldrh	r2, [r3, #4]
  406eae:	79fb      	ldrb	r3, [r7, #7]
  406eb0:	4952      	ldr	r1, [pc, #328]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406eb2:	205c      	movs	r0, #92	; 0x5c
  406eb4:	fb00 f303 	mul.w	r3, r0, r3
  406eb8:	440b      	add	r3, r1
  406eba:	334e      	adds	r3, #78	; 0x4e
  406ebc:	881b      	ldrh	r3, [r3, #0]
  406ebe:	429a      	cmp	r2, r3
  406ec0:	d903      	bls.n	406eca <inv_uart_tx_txfer+0x4a>
			/* Requested transfer size does fit in the internal buffers */
			rc = INV_UART_ERROR_MEMORY;
  406ec2:	f06f 0302 	mvn.w	r3, #2
  406ec6:	61fb      	str	r3, [r7, #28]
  406ec8:	e090      	b.n	406fec <inv_uart_tx_txfer+0x16c>
		} else {
			pdc_packet_t pdc_usart_packet;
			uint32_t pdc_status;

			inv_disable_irq();
  406eca:	4b4d      	ldr	r3, [pc, #308]	; (407000 <inv_uart_tx_txfer+0x180>)
  406ecc:	4798      	blx	r3
			
			/* Double-check if there is already an on-going transfer in TX */
			pdc_status = pdc_read_status(um[uart].uart_pdc);
  406ece:	79fb      	ldrb	r3, [r7, #7]
  406ed0:	4a4a      	ldr	r2, [pc, #296]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406ed2:	215c      	movs	r1, #92	; 0x5c
  406ed4:	fb01 f303 	mul.w	r3, r1, r3
  406ed8:	4413      	add	r3, r2
  406eda:	3304      	adds	r3, #4
  406edc:	681b      	ldr	r3, [r3, #0]
  406ede:	4618      	mov	r0, r3
  406ee0:	4b48      	ldr	r3, [pc, #288]	; (407004 <inv_uart_tx_txfer+0x184>)
  406ee2:	4798      	blx	r3
  406ee4:	6138      	str	r0, [r7, #16]
			if( (pdc_status & PERIPH_PTCR_TXTEN) != 0) {
  406ee6:	693b      	ldr	r3, [r7, #16]
  406ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406eec:	2b00      	cmp	r3, #0
  406eee:	d004      	beq.n	406efa <inv_uart_tx_txfer+0x7a>
				inv_enable_irq();
  406ef0:	4b45      	ldr	r3, [pc, #276]	; (407008 <inv_uart_tx_txfer+0x188>)
  406ef2:	4798      	blx	r3
				return INV_UART_ERROR_BUSY;
  406ef4:	f06f 0301 	mvn.w	r3, #1
  406ef8:	e079      	b.n	406fee <inv_uart_tx_txfer+0x16e>
			}

			/* Copy the data to be transfered into the internal buffers */
			memcpy((void*)um[uart].uart_tx_buffer, txfer->data, txfer->len);
  406efa:	79fb      	ldrb	r3, [r7, #7]
  406efc:	4a3f      	ldr	r2, [pc, #252]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406efe:	215c      	movs	r1, #92	; 0x5c
  406f00:	fb01 f303 	mul.w	r3, r1, r3
  406f04:	4413      	add	r3, r2
  406f06:	3348      	adds	r3, #72	; 0x48
  406f08:	6818      	ldr	r0, [r3, #0]
  406f0a:	683b      	ldr	r3, [r7, #0]
  406f0c:	6819      	ldr	r1, [r3, #0]
  406f0e:	683b      	ldr	r3, [r7, #0]
  406f10:	889b      	ldrh	r3, [r3, #4]
  406f12:	461a      	mov	r2, r3
  406f14:	4b3d      	ldr	r3, [pc, #244]	; (40700c <inv_uart_tx_txfer+0x18c>)
  406f16:	4798      	blx	r3
			
			/* Set address and size of data to be transfered  and configure PDC */
			pdc_usart_packet.ul_addr = (uint32_t)um[uart].uart_tx_buffer;
  406f18:	79fb      	ldrb	r3, [r7, #7]
  406f1a:	4a38      	ldr	r2, [pc, #224]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406f1c:	215c      	movs	r1, #92	; 0x5c
  406f1e:	fb01 f303 	mul.w	r3, r1, r3
  406f22:	4413      	add	r3, r2
  406f24:	3348      	adds	r3, #72	; 0x48
  406f26:	681b      	ldr	r3, [r3, #0]
  406f28:	60bb      	str	r3, [r7, #8]
			pdc_usart_packet.ul_size = txfer->len;
  406f2a:	683b      	ldr	r3, [r7, #0]
  406f2c:	889b      	ldrh	r3, [r3, #4]
  406f2e:	60fb      	str	r3, [r7, #12]
			
			pdc_tx_init(um[uart].uart_pdc, &pdc_usart_packet, NULL);
  406f30:	79fb      	ldrb	r3, [r7, #7]
  406f32:	4a32      	ldr	r2, [pc, #200]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406f34:	215c      	movs	r1, #92	; 0x5c
  406f36:	fb01 f303 	mul.w	r3, r1, r3
  406f3a:	4413      	add	r3, r2
  406f3c:	3304      	adds	r3, #4
  406f3e:	681b      	ldr	r3, [r3, #0]
  406f40:	f107 0108 	add.w	r1, r7, #8
  406f44:	2200      	movs	r2, #0
  406f46:	4618      	mov	r0, r3
  406f48:	4b31      	ldr	r3, [pc, #196]	; (407010 <inv_uart_tx_txfer+0x190>)
  406f4a:	4798      	blx	r3

			/* Enable DMA transfer in TX */
			pdc_enable_transfer(um[uart].uart_pdc, PERIPH_PTCR_TXTEN);
  406f4c:	79fb      	ldrb	r3, [r7, #7]
  406f4e:	4a2b      	ldr	r2, [pc, #172]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406f50:	215c      	movs	r1, #92	; 0x5c
  406f52:	fb01 f303 	mul.w	r3, r1, r3
  406f56:	4413      	add	r3, r2
  406f58:	3304      	adds	r3, #4
  406f5a:	681b      	ldr	r3, [r3, #0]
  406f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
  406f60:	4618      	mov	r0, r3
  406f62:	4b2c      	ldr	r3, [pc, #176]	; (407014 <inv_uart_tx_txfer+0x194>)
  406f64:	4798      	blx	r3

			/* Enable UART TX buffer empty interrupt. Corresponding NVIC interrupt 
			 * was already enabled by uart_init(). */
			usart_enable_interrupt(um[uart].uart_ip, US_IER_TXBUFE);
  406f66:	79fb      	ldrb	r3, [r7, #7]
  406f68:	4a24      	ldr	r2, [pc, #144]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406f6a:	215c      	movs	r1, #92	; 0x5c
  406f6c:	fb01 f303 	mul.w	r3, r1, r3
  406f70:	4413      	add	r3, r2
  406f72:	681b      	ldr	r3, [r3, #0]
  406f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
  406f78:	4618      	mov	r0, r3
  406f7a:	4b27      	ldr	r3, [pc, #156]	; (407018 <inv_uart_tx_txfer+0x198>)
  406f7c:	4798      	blx	r3

			um[uart].uart_tx_state = INV_UART_STATE_BUSY_TX;
  406f7e:	79fb      	ldrb	r3, [r7, #7]
  406f80:	4a1e      	ldr	r2, [pc, #120]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406f82:	215c      	movs	r1, #92	; 0x5c
  406f84:	fb01 f303 	mul.w	r3, r1, r3
  406f88:	4413      	add	r3, r2
  406f8a:	3340      	adds	r3, #64	; 0x40
  406f8c:	2202      	movs	r2, #2
  406f8e:	701a      	strb	r2, [r3, #0]
			
			/* Wait for the stream to be enabled */
			while (((pdc_read_status(um[uart].uart_pdc) & PERIPH_PTCR_TXTEN) == 0) && (timeout-- > 0));
  406f90:	bf00      	nop
  406f92:	79fb      	ldrb	r3, [r7, #7]
  406f94:	4a19      	ldr	r2, [pc, #100]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406f96:	215c      	movs	r1, #92	; 0x5c
  406f98:	fb01 f303 	mul.w	r3, r1, r3
  406f9c:	4413      	add	r3, r2
  406f9e:	3304      	adds	r3, #4
  406fa0:	681b      	ldr	r3, [r3, #0]
  406fa2:	4618      	mov	r0, r3
  406fa4:	4b17      	ldr	r3, [pc, #92]	; (407004 <inv_uart_tx_txfer+0x184>)
  406fa6:	4798      	blx	r3
  406fa8:	4603      	mov	r3, r0
  406faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406fae:	2b00      	cmp	r3, #0
  406fb0:	d104      	bne.n	406fbc <inv_uart_tx_txfer+0x13c>
  406fb2:	69bb      	ldr	r3, [r7, #24]
  406fb4:	1e5a      	subs	r2, r3, #1
  406fb6:	61ba      	str	r2, [r7, #24]
  406fb8:	2b00      	cmp	r3, #0
  406fba:	dcea      	bgt.n	406f92 <inv_uart_tx_txfer+0x112>
			if (timeout == 0) {
  406fbc:	69bb      	ldr	r3, [r7, #24]
  406fbe:	2b00      	cmp	r3, #0
  406fc0:	d10b      	bne.n	406fda <inv_uart_tx_txfer+0x15a>
				/* For some reason, the transfer did not start */
				um[uart].uart_tx_state = INV_UART_STATE_IDLE;
  406fc2:	79fb      	ldrb	r3, [r7, #7]
  406fc4:	4a0d      	ldr	r2, [pc, #52]	; (406ffc <inv_uart_tx_txfer+0x17c>)
  406fc6:	215c      	movs	r1, #92	; 0x5c
  406fc8:	fb01 f303 	mul.w	r3, r1, r3
  406fcc:	4413      	add	r3, r2
  406fce:	3340      	adds	r3, #64	; 0x40
  406fd0:	2201      	movs	r2, #1
  406fd2:	701a      	strb	r2, [r3, #0]
				rc = INV_UART_ERROR;
  406fd4:	f04f 33ff 	mov.w	r3, #4294967295
  406fd8:	61fb      	str	r3, [r7, #28]
			}
			
			inv_enable_irq();
  406fda:	4b0b      	ldr	r3, [pc, #44]	; (407008 <inv_uart_tx_txfer+0x188>)
  406fdc:	4798      	blx	r3
  406fde:	e005      	b.n	406fec <inv_uart_tx_txfer+0x16c>
		}
	} else if(uart_tx_state == INV_UART_STATE_BUSY_TX) {
  406fe0:	7dfb      	ldrb	r3, [r7, #23]
  406fe2:	2b02      	cmp	r3, #2
  406fe4:	d102      	bne.n	406fec <inv_uart_tx_txfer+0x16c>
		/* A transfer is already on-going */
		rc = INV_UART_ERROR_BUSY;
  406fe6:	f06f 0301 	mvn.w	r3, #1
  406fea:	61fb      	str	r3, [r7, #28]
	}

	return rc;
  406fec:	69fb      	ldr	r3, [r7, #28]
}
  406fee:	4618      	mov	r0, r3
  406ff0:	3720      	adds	r7, #32
  406ff2:	46bd      	mov	sp, r7
  406ff4:	bd80      	pop	{r7, pc}
  406ff6:	bf00      	nop
  406ff8:	00407161 	.word	0x00407161
  406ffc:	2000241c 	.word	0x2000241c
  407000:	00404949 	.word	0x00404949
  407004:	004081bb 	.word	0x004081bb
  407008:	00404971 	.word	0x00404971
  40700c:	0040f841 	.word	0x0040f841
  407010:	004080cf 	.word	0x004080cf
  407014:	00408177 	.word	0x00408177
  407018:	004095e5 	.word	0x004095e5

0040701c <inv_uart_getc>:

int inv_uart_getc(inv_uart_num_t uart)
{
  40701c:	b5b0      	push	{r4, r5, r7, lr}
  40701e:	b084      	sub	sp, #16
  407020:	af00      	add	r7, sp, #0
  407022:	4603      	mov	r3, r0
  407024:	71fb      	strb	r3, [r7, #7]
	int data = EOF;
  407026:	f04f 33ff 	mov.w	r3, #4294967295
  40702a:	60fb      	str	r3, [r7, #12]

	/* Check if there is something in the RX FIFO */
	if(inv_uart_available(uart) > 0) {
  40702c:	79fb      	ldrb	r3, [r7, #7]
  40702e:	4618      	mov	r0, r3
  407030:	4b26      	ldr	r3, [pc, #152]	; (4070cc <inv_uart_getc+0xb0>)
  407032:	4798      	blx	r3
  407034:	4603      	mov	r3, r0
  407036:	2b00      	cmp	r3, #0
  407038:	dd43      	ble.n	4070c2 <inv_uart_getc+0xa6>
		inv_disable_irq();
  40703a:	4b25      	ldr	r3, [pc, #148]	; (4070d0 <inv_uart_getc+0xb4>)
  40703c:	4798      	blx	r3
		/* Pop the data from the RX FIFO and increment the tail */
		data = um[uart].uart_rx_buffer[um[uart].uart_rx_buffer_tail++];
  40703e:	79fb      	ldrb	r3, [r7, #7]
  407040:	4a24      	ldr	r2, [pc, #144]	; (4070d4 <inv_uart_getc+0xb8>)
  407042:	215c      	movs	r1, #92	; 0x5c
  407044:	fb01 f303 	mul.w	r3, r1, r3
  407048:	4413      	add	r3, r2
  40704a:	3344      	adds	r3, #68	; 0x44
  40704c:	6819      	ldr	r1, [r3, #0]
  40704e:	79fb      	ldrb	r3, [r7, #7]
  407050:	4820      	ldr	r0, [pc, #128]	; (4070d4 <inv_uart_getc+0xb8>)
  407052:	225c      	movs	r2, #92	; 0x5c
  407054:	fb02 f203 	mul.w	r2, r2, r3
  407058:	4402      	add	r2, r0
  40705a:	3250      	adds	r2, #80	; 0x50
  40705c:	8812      	ldrh	r2, [r2, #0]
  40705e:	b292      	uxth	r2, r2
  407060:	1c50      	adds	r0, r2, #1
  407062:	b285      	uxth	r5, r0
  407064:	481b      	ldr	r0, [pc, #108]	; (4070d4 <inv_uart_getc+0xb8>)
  407066:	245c      	movs	r4, #92	; 0x5c
  407068:	fb04 f303 	mul.w	r3, r4, r3
  40706c:	4403      	add	r3, r0
  40706e:	3350      	adds	r3, #80	; 0x50
  407070:	4628      	mov	r0, r5
  407072:	8018      	strh	r0, [r3, #0]
  407074:	4613      	mov	r3, r2
  407076:	440b      	add	r3, r1
  407078:	781b      	ldrb	r3, [r3, #0]
  40707a:	b2db      	uxtb	r3, r3
  40707c:	60fb      	str	r3, [r7, #12]
		/* Tail rollover */
		um[uart].uart_rx_buffer_tail %= um[uart].uart_rx_buffer_size;
  40707e:	79f9      	ldrb	r1, [r7, #7]
  407080:	79fb      	ldrb	r3, [r7, #7]
  407082:	4a14      	ldr	r2, [pc, #80]	; (4070d4 <inv_uart_getc+0xb8>)
  407084:	205c      	movs	r0, #92	; 0x5c
  407086:	fb00 f303 	mul.w	r3, r0, r3
  40708a:	4413      	add	r3, r2
  40708c:	3350      	adds	r3, #80	; 0x50
  40708e:	881b      	ldrh	r3, [r3, #0]
  407090:	b29b      	uxth	r3, r3
  407092:	79fa      	ldrb	r2, [r7, #7]
  407094:	480f      	ldr	r0, [pc, #60]	; (4070d4 <inv_uart_getc+0xb8>)
  407096:	245c      	movs	r4, #92	; 0x5c
  407098:	fb04 f202 	mul.w	r2, r4, r2
  40709c:	4402      	add	r2, r0
  40709e:	324c      	adds	r2, #76	; 0x4c
  4070a0:	8812      	ldrh	r2, [r2, #0]
  4070a2:	fbb3 f0f2 	udiv	r0, r3, r2
  4070a6:	fb02 f200 	mul.w	r2, r2, r0
  4070aa:	1a9b      	subs	r3, r3, r2
  4070ac:	b298      	uxth	r0, r3
  4070ae:	4a09      	ldr	r2, [pc, #36]	; (4070d4 <inv_uart_getc+0xb8>)
  4070b0:	235c      	movs	r3, #92	; 0x5c
  4070b2:	fb03 f301 	mul.w	r3, r3, r1
  4070b6:	4413      	add	r3, r2
  4070b8:	3350      	adds	r3, #80	; 0x50
  4070ba:	4602      	mov	r2, r0
  4070bc:	801a      	strh	r2, [r3, #0]
		inv_enable_irq();
  4070be:	4b06      	ldr	r3, [pc, #24]	; (4070d8 <inv_uart_getc+0xbc>)
  4070c0:	4798      	blx	r3
	}

	return data;
  4070c2:	68fb      	ldr	r3, [r7, #12]
}
  4070c4:	4618      	mov	r0, r3
  4070c6:	3710      	adds	r7, #16
  4070c8:	46bd      	mov	sp, r7
  4070ca:	bdb0      	pop	{r4, r5, r7, pc}
  4070cc:	004070dd 	.word	0x004070dd
  4070d0:	00404949 	.word	0x00404949
  4070d4:	2000241c 	.word	0x2000241c
  4070d8:	00404971 	.word	0x00404971

004070dc <inv_uart_available>:

int inv_uart_available(inv_uart_num_t uart)
{
  4070dc:	b590      	push	{r4, r7, lr}
  4070de:	b085      	sub	sp, #20
  4070e0:	af00      	add	r7, sp, #0
  4070e2:	4603      	mov	r3, r0
  4070e4:	71fb      	strb	r3, [r7, #7]
	uint16_t head = um[uart].uart_rx_buffer_size - pdc_read_rx_counter(um[uart].uart_pdc);
  4070e6:	79fb      	ldrb	r3, [r7, #7]
  4070e8:	4a1b      	ldr	r2, [pc, #108]	; (407158 <inv_uart_available+0x7c>)
  4070ea:	215c      	movs	r1, #92	; 0x5c
  4070ec:	fb01 f303 	mul.w	r3, r1, r3
  4070f0:	4413      	add	r3, r2
  4070f2:	334c      	adds	r3, #76	; 0x4c
  4070f4:	881c      	ldrh	r4, [r3, #0]
  4070f6:	79fb      	ldrb	r3, [r7, #7]
  4070f8:	4a17      	ldr	r2, [pc, #92]	; (407158 <inv_uart_available+0x7c>)
  4070fa:	215c      	movs	r1, #92	; 0x5c
  4070fc:	fb01 f303 	mul.w	r3, r1, r3
  407100:	4413      	add	r3, r2
  407102:	3304      	adds	r3, #4
  407104:	681b      	ldr	r3, [r3, #0]
  407106:	4618      	mov	r0, r3
  407108:	4b14      	ldr	r3, [pc, #80]	; (40715c <inv_uart_available+0x80>)
  40710a:	4798      	blx	r3
  40710c:	4603      	mov	r3, r0
  40710e:	b29b      	uxth	r3, r3
  407110:	1ae3      	subs	r3, r4, r3
  407112:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = um[uart].uart_rx_buffer_tail;
  407114:	79fb      	ldrb	r3, [r7, #7]
  407116:	4a10      	ldr	r2, [pc, #64]	; (407158 <inv_uart_available+0x7c>)
  407118:	215c      	movs	r1, #92	; 0x5c
  40711a:	fb01 f303 	mul.w	r3, r1, r3
  40711e:	4413      	add	r3, r2
  407120:	3350      	adds	r3, #80	; 0x50
  407122:	881b      	ldrh	r3, [r3, #0]
  407124:	81bb      	strh	r3, [r7, #12]

	if(head >= tail)
  407126:	89fa      	ldrh	r2, [r7, #14]
  407128:	89bb      	ldrh	r3, [r7, #12]
  40712a:	429a      	cmp	r2, r3
  40712c:	d303      	bcc.n	407136 <inv_uart_available+0x5a>
		return (int)(head - tail);
  40712e:	89fa      	ldrh	r2, [r7, #14]
  407130:	89bb      	ldrh	r3, [r7, #12]
  407132:	1ad3      	subs	r3, r2, r3
  407134:	e00c      	b.n	407150 <inv_uart_available+0x74>
	else
		return (int)(um[uart].uart_rx_buffer_size - (tail - head));
  407136:	79fb      	ldrb	r3, [r7, #7]
  407138:	4a07      	ldr	r2, [pc, #28]	; (407158 <inv_uart_available+0x7c>)
  40713a:	215c      	movs	r1, #92	; 0x5c
  40713c:	fb01 f303 	mul.w	r3, r1, r3
  407140:	4413      	add	r3, r2
  407142:	334c      	adds	r3, #76	; 0x4c
  407144:	881b      	ldrh	r3, [r3, #0]
  407146:	4619      	mov	r1, r3
  407148:	89ba      	ldrh	r2, [r7, #12]
  40714a:	89fb      	ldrh	r3, [r7, #14]
  40714c:	1ad3      	subs	r3, r2, r3
  40714e:	1acb      	subs	r3, r1, r3
}
  407150:	4618      	mov	r0, r3
  407152:	3714      	adds	r7, #20
  407154:	46bd      	mov	sp, r7
  407156:	bd90      	pop	{r4, r7, pc}
  407158:	2000241c 	.word	0x2000241c
  40715c:	004081d3 	.word	0x004081d3

00407160 <inv_uart_tx_get_state>:
	else
		return INV_UART_FLOW_CONTROL_NONE;
}

inv_uart_state_t inv_uart_tx_get_state(inv_uart_num_t uart)
{	
  407160:	b480      	push	{r7}
  407162:	b083      	sub	sp, #12
  407164:	af00      	add	r7, sp, #0
  407166:	4603      	mov	r3, r0
  407168:	71fb      	strb	r3, [r7, #7]
	return um[uart].uart_tx_state;
  40716a:	79fb      	ldrb	r3, [r7, #7]
  40716c:	4a06      	ldr	r2, [pc, #24]	; (407188 <inv_uart_tx_get_state+0x28>)
  40716e:	215c      	movs	r1, #92	; 0x5c
  407170:	fb01 f303 	mul.w	r3, r1, r3
  407174:	4413      	add	r3, r2
  407176:	3340      	adds	r3, #64	; 0x40
  407178:	781b      	ldrb	r3, [r3, #0]
  40717a:	b2db      	uxtb	r3, r3
}
  40717c:	4618      	mov	r0, r3
  40717e:	370c      	adds	r7, #12
  407180:	46bd      	mov	sp, r7
  407182:	f85d 7b04 	ldr.w	r7, [sp], #4
  407186:	4770      	bx	lr
  407188:	2000241c 	.word	0x2000241c

0040718c <uart_dma_rx>:


/***************************** Private Functions ******************************/

static int uart_dma_rx(inv_uart_num_t uart)
{
  40718c:	b580      	push	{r7, lr}
  40718e:	b088      	sub	sp, #32
  407190:	af00      	add	r7, sp, #0
  407192:	4603      	mov	r3, r0
  407194:	71fb      	strb	r3, [r7, #7]
	int rc = 0;
  407196:	2300      	movs	r3, #0
  407198:	61fb      	str	r3, [r7, #28]
	int timeout = 1000;
  40719a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40719e:	61bb      	str	r3, [r7, #24]
	
	inv_disable_irq();
  4071a0:	4b45      	ldr	r3, [pc, #276]	; (4072b8 <uart_dma_rx+0x12c>)
  4071a2:	4798      	blx	r3
	if(um[uart].uart_rx_state == INV_UART_STATE_IDLE) {
  4071a4:	79fb      	ldrb	r3, [r7, #7]
  4071a6:	4a45      	ldr	r2, [pc, #276]	; (4072bc <uart_dma_rx+0x130>)
  4071a8:	215c      	movs	r1, #92	; 0x5c
  4071aa:	fb01 f303 	mul.w	r3, r1, r3
  4071ae:	4413      	add	r3, r2
  4071b0:	3341      	adds	r3, #65	; 0x41
  4071b2:	781b      	ldrb	r3, [r3, #0]
  4071b4:	2b01      	cmp	r3, #1
  4071b6:	d174      	bne.n	4072a2 <uart_dma_rx+0x116>

		pdc_packet_t pdc_usart_packet;

		/* Read PDC current status */
		uint32_t pdc_status = pdc_read_status(um[uart].uart_pdc);
  4071b8:	79fb      	ldrb	r3, [r7, #7]
  4071ba:	4a40      	ldr	r2, [pc, #256]	; (4072bc <uart_dma_rx+0x130>)
  4071bc:	215c      	movs	r1, #92	; 0x5c
  4071be:	fb01 f303 	mul.w	r3, r1, r3
  4071c2:	4413      	add	r3, r2
  4071c4:	3304      	adds	r3, #4
  4071c6:	681b      	ldr	r3, [r3, #0]
  4071c8:	4618      	mov	r0, r3
  4071ca:	4b3d      	ldr	r3, [pc, #244]	; (4072c0 <uart_dma_rx+0x134>)
  4071cc:	4798      	blx	r3
  4071ce:	6178      	str	r0, [r7, #20]
		
		/* Double-check if there is already an on-going transfer in RX */
		if( (pdc_status & PERIPH_PTCR_RXTEN) != 0) {
  4071d0:	697b      	ldr	r3, [r7, #20]
  4071d2:	f003 0301 	and.w	r3, r3, #1
  4071d6:	2b00      	cmp	r3, #0
  4071d8:	d004      	beq.n	4071e4 <uart_dma_rx+0x58>
			inv_enable_irq();
  4071da:	4b3a      	ldr	r3, [pc, #232]	; (4072c4 <uart_dma_rx+0x138>)
  4071dc:	4798      	blx	r3
			return INV_UART_ERROR_BUSY;
  4071de:	f06f 0301 	mvn.w	r3, #1
  4071e2:	e064      	b.n	4072ae <uart_dma_rx+0x122>
		}

		/* Initialize PDC (DMA) transfer address and size. Set same values for next transfer 
		 * as RX is used in circular mode (cf atmel SAM55G datasheet §21.5.3).
		 */
		pdc_usart_packet.ul_addr = (uint32_t)um[uart].uart_rx_buffer;
  4071e4:	79fb      	ldrb	r3, [r7, #7]
  4071e6:	4a35      	ldr	r2, [pc, #212]	; (4072bc <uart_dma_rx+0x130>)
  4071e8:	215c      	movs	r1, #92	; 0x5c
  4071ea:	fb01 f303 	mul.w	r3, r1, r3
  4071ee:	4413      	add	r3, r2
  4071f0:	3344      	adds	r3, #68	; 0x44
  4071f2:	681b      	ldr	r3, [r3, #0]
  4071f4:	60fb      	str	r3, [r7, #12]
		pdc_usart_packet.ul_size = um[uart].uart_rx_buffer_size;
  4071f6:	79fb      	ldrb	r3, [r7, #7]
  4071f8:	4a30      	ldr	r2, [pc, #192]	; (4072bc <uart_dma_rx+0x130>)
  4071fa:	215c      	movs	r1, #92	; 0x5c
  4071fc:	fb01 f303 	mul.w	r3, r1, r3
  407200:	4413      	add	r3, r2
  407202:	334c      	adds	r3, #76	; 0x4c
  407204:	881b      	ldrh	r3, [r3, #0]
  407206:	613b      	str	r3, [r7, #16]

		/* Configure PDC for data receive */
		pdc_rx_init(um[uart].uart_pdc, &pdc_usart_packet, &pdc_usart_packet);
  407208:	79fb      	ldrb	r3, [r7, #7]
  40720a:	4a2c      	ldr	r2, [pc, #176]	; (4072bc <uart_dma_rx+0x130>)
  40720c:	215c      	movs	r1, #92	; 0x5c
  40720e:	fb01 f303 	mul.w	r3, r1, r3
  407212:	4413      	add	r3, r2
  407214:	3304      	adds	r3, #4
  407216:	681b      	ldr	r3, [r3, #0]
  407218:	f107 020c 	add.w	r2, r7, #12
  40721c:	f107 010c 	add.w	r1, r7, #12
  407220:	4618      	mov	r0, r3
  407222:	4b29      	ldr	r3, [pc, #164]	; (4072c8 <uart_dma_rx+0x13c>)
  407224:	4798      	blx	r3

		um[uart].uart_rx_state = INV_UART_STATE_BUSY_RX;
  407226:	79fb      	ldrb	r3, [r7, #7]
  407228:	4a24      	ldr	r2, [pc, #144]	; (4072bc <uart_dma_rx+0x130>)
  40722a:	215c      	movs	r1, #92	; 0x5c
  40722c:	fb01 f303 	mul.w	r3, r1, r3
  407230:	4413      	add	r3, r2
  407232:	3341      	adds	r3, #65	; 0x41
  407234:	2203      	movs	r2, #3
  407236:	701a      	strb	r2, [r3, #0]
		
		/* Enable DMA transfer in RX */
		pdc_enable_transfer(um[uart].uart_pdc, PERIPH_PTCR_RXTEN);
  407238:	79fb      	ldrb	r3, [r7, #7]
  40723a:	4a20      	ldr	r2, [pc, #128]	; (4072bc <uart_dma_rx+0x130>)
  40723c:	215c      	movs	r1, #92	; 0x5c
  40723e:	fb01 f303 	mul.w	r3, r1, r3
  407242:	4413      	add	r3, r2
  407244:	3304      	adds	r3, #4
  407246:	681b      	ldr	r3, [r3, #0]
  407248:	2101      	movs	r1, #1
  40724a:	4618      	mov	r0, r3
  40724c:	4b1f      	ldr	r3, [pc, #124]	; (4072cc <uart_dma_rx+0x140>)
  40724e:	4798      	blx	r3

		/* Wait for the stream to be actually enabled  */
		timeout = 1000;
  407250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  407254:	61bb      	str	r3, [r7, #24]
		while (((pdc_read_status(um[uart].uart_pdc) & PERIPH_PTCR_RXTEN) == 0) && (timeout-- > 0));
  407256:	bf00      	nop
  407258:	79fb      	ldrb	r3, [r7, #7]
  40725a:	4a18      	ldr	r2, [pc, #96]	; (4072bc <uart_dma_rx+0x130>)
  40725c:	215c      	movs	r1, #92	; 0x5c
  40725e:	fb01 f303 	mul.w	r3, r1, r3
  407262:	4413      	add	r3, r2
  407264:	3304      	adds	r3, #4
  407266:	681b      	ldr	r3, [r3, #0]
  407268:	4618      	mov	r0, r3
  40726a:	4b15      	ldr	r3, [pc, #84]	; (4072c0 <uart_dma_rx+0x134>)
  40726c:	4798      	blx	r3
  40726e:	4603      	mov	r3, r0
  407270:	f003 0301 	and.w	r3, r3, #1
  407274:	2b00      	cmp	r3, #0
  407276:	d104      	bne.n	407282 <uart_dma_rx+0xf6>
  407278:	69bb      	ldr	r3, [r7, #24]
  40727a:	1e5a      	subs	r2, r3, #1
  40727c:	61ba      	str	r2, [r7, #24]
  40727e:	2b00      	cmp	r3, #0
  407280:	dcea      	bgt.n	407258 <uart_dma_rx+0xcc>
		if (timeout == 0) {
  407282:	69bb      	ldr	r3, [r7, #24]
  407284:	2b00      	cmp	r3, #0
  407286:	d10f      	bne.n	4072a8 <uart_dma_rx+0x11c>
			um[uart].uart_rx_state = INV_UART_STATE_IDLE;
  407288:	79fb      	ldrb	r3, [r7, #7]
  40728a:	4a0c      	ldr	r2, [pc, #48]	; (4072bc <uart_dma_rx+0x130>)
  40728c:	215c      	movs	r1, #92	; 0x5c
  40728e:	fb01 f303 	mul.w	r3, r1, r3
  407292:	4413      	add	r3, r2
  407294:	3341      	adds	r3, #65	; 0x41
  407296:	2201      	movs	r2, #1
  407298:	701a      	strb	r2, [r3, #0]
			rc = INV_UART_ERROR;
  40729a:	f04f 33ff 	mov.w	r3, #4294967295
  40729e:	61fb      	str	r3, [r7, #28]
  4072a0:	e002      	b.n	4072a8 <uart_dma_rx+0x11c>
		}
	} else {
		rc = INV_UART_ERROR_BUSY;
  4072a2:	f06f 0301 	mvn.w	r3, #1
  4072a6:	61fb      	str	r3, [r7, #28]
	}
	
	inv_enable_irq();
  4072a8:	4b06      	ldr	r3, [pc, #24]	; (4072c4 <uart_dma_rx+0x138>)
  4072aa:	4798      	blx	r3

	return rc;
  4072ac:	69fb      	ldr	r3, [r7, #28]
}
  4072ae:	4618      	mov	r0, r3
  4072b0:	3720      	adds	r7, #32
  4072b2:	46bd      	mov	sp, r7
  4072b4:	bd80      	pop	{r7, pc}
  4072b6:	bf00      	nop
  4072b8:	00404949 	.word	0x00404949
  4072bc:	2000241c 	.word	0x2000241c
  4072c0:	004081bb 	.word	0x004081bb
  4072c4:	00404971 	.word	0x00404971
  4072c8:	00408113 	.word	0x00408113
  4072cc:	00408177 	.word	0x00408177

004072d0 <commonUSART_IRQ_HANDLER>:


/* Interrupt management ------------------------------------------------------*/

static void commonUSART_IRQ_HANDLER(inv_uart_num_t uart)
{
  4072d0:	b580      	push	{r7, lr}
  4072d2:	b084      	sub	sp, #16
  4072d4:	af00      	add	r7, sp, #0
  4072d6:	4603      	mov	r3, r0
  4072d8:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_status;
	
	uart_status = usart_get_status(um[uart].uart_ip);
  4072da:	79fb      	ldrb	r3, [r7, #7]
  4072dc:	4a28      	ldr	r2, [pc, #160]	; (407380 <commonUSART_IRQ_HANDLER+0xb0>)
  4072de:	215c      	movs	r1, #92	; 0x5c
  4072e0:	fb01 f303 	mul.w	r3, r1, r3
  4072e4:	4413      	add	r3, r2
  4072e6:	681b      	ldr	r3, [r3, #0]
  4072e8:	4618      	mov	r0, r3
  4072ea:	4b26      	ldr	r3, [pc, #152]	; (407384 <commonUSART_IRQ_HANDLER+0xb4>)
  4072ec:	4798      	blx	r3
  4072ee:	60f8      	str	r0, [r7, #12]


	if((uart_status & US_CSR_TXBUFE) == US_CSR_TXBUFE) {
  4072f0:	68fb      	ldr	r3, [r7, #12]
  4072f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  4072f6:	2b00      	cmp	r3, #0
  4072f8:	d03d      	beq.n	407376 <commonUSART_IRQ_HANDLER+0xa6>
		pdc_disable_transfer(um[uart].uart_pdc, PERIPH_PTCR_TXTDIS);
  4072fa:	79fb      	ldrb	r3, [r7, #7]
  4072fc:	4a20      	ldr	r2, [pc, #128]	; (407380 <commonUSART_IRQ_HANDLER+0xb0>)
  4072fe:	215c      	movs	r1, #92	; 0x5c
  407300:	fb01 f303 	mul.w	r3, r1, r3
  407304:	4413      	add	r3, r2
  407306:	3304      	adds	r3, #4
  407308:	681b      	ldr	r3, [r3, #0]
  40730a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40730e:	4618      	mov	r0, r3
  407310:	4b1d      	ldr	r3, [pc, #116]	; (407388 <commonUSART_IRQ_HANDLER+0xb8>)
  407312:	4798      	blx	r3

		/* Mask TXBUFE interrupt. This will move IRQ state from active to inactive
		 * at NVIC level when exiting this handler.  */
		usart_disable_interrupt(um[uart].uart_ip, US_IER_TXBUFE);
  407314:	79fb      	ldrb	r3, [r7, #7]
  407316:	4a1a      	ldr	r2, [pc, #104]	; (407380 <commonUSART_IRQ_HANDLER+0xb0>)
  407318:	215c      	movs	r1, #92	; 0x5c
  40731a:	fb01 f303 	mul.w	r3, r1, r3
  40731e:	4413      	add	r3, r2
  407320:	681b      	ldr	r3, [r3, #0]
  407322:	f44f 6100 	mov.w	r1, #2048	; 0x800
  407326:	4618      	mov	r0, r3
  407328:	4b18      	ldr	r3, [pc, #96]	; (40738c <commonUSART_IRQ_HANDLER+0xbc>)
  40732a:	4798      	blx	r3

		um[uart].uart_tx_state = INV_UART_STATE_IDLE;
  40732c:	79fb      	ldrb	r3, [r7, #7]
  40732e:	4a14      	ldr	r2, [pc, #80]	; (407380 <commonUSART_IRQ_HANDLER+0xb0>)
  407330:	215c      	movs	r1, #92	; 0x5c
  407332:	fb01 f303 	mul.w	r3, r1, r3
  407336:	4413      	add	r3, r2
  407338:	3340      	adds	r3, #64	; 0x40
  40733a:	2201      	movs	r2, #1
  40733c:	701a      	strb	r2, [r3, #0]

		if(um[uart].tx_done_cb)
  40733e:	79fb      	ldrb	r3, [r7, #7]
  407340:	4a0f      	ldr	r2, [pc, #60]	; (407380 <commonUSART_IRQ_HANDLER+0xb0>)
  407342:	215c      	movs	r1, #92	; 0x5c
  407344:	fb01 f303 	mul.w	r3, r1, r3
  407348:	4413      	add	r3, r2
  40734a:	3354      	adds	r3, #84	; 0x54
  40734c:	681b      	ldr	r3, [r3, #0]
  40734e:	2b00      	cmp	r3, #0
  407350:	d011      	beq.n	407376 <commonUSART_IRQ_HANDLER+0xa6>
			um[uart].tx_done_cb(um[uart].tx_context);
  407352:	79fb      	ldrb	r3, [r7, #7]
  407354:	4a0a      	ldr	r2, [pc, #40]	; (407380 <commonUSART_IRQ_HANDLER+0xb0>)
  407356:	215c      	movs	r1, #92	; 0x5c
  407358:	fb01 f303 	mul.w	r3, r1, r3
  40735c:	4413      	add	r3, r2
  40735e:	3354      	adds	r3, #84	; 0x54
  407360:	681b      	ldr	r3, [r3, #0]
  407362:	79fa      	ldrb	r2, [r7, #7]
  407364:	4906      	ldr	r1, [pc, #24]	; (407380 <commonUSART_IRQ_HANDLER+0xb0>)
  407366:	205c      	movs	r0, #92	; 0x5c
  407368:	fb00 f202 	mul.w	r2, r0, r2
  40736c:	440a      	add	r2, r1
  40736e:	3258      	adds	r2, #88	; 0x58
  407370:	6812      	ldr	r2, [r2, #0]
  407372:	4610      	mov	r0, r2
  407374:	4798      	blx	r3
	}

	/* TODO : Handle transmission error here */	
}
  407376:	bf00      	nop
  407378:	3710      	adds	r7, #16
  40737a:	46bd      	mov	sp, r7
  40737c:	bd80      	pop	{r7, pc}
  40737e:	bf00      	nop
  407380:	2000241c 	.word	0x2000241c
  407384:	0040961d 	.word	0x0040961d
  407388:	00408199 	.word	0x00408199
  40738c:	00409601 	.word	0x00409601

00407390 <FLEXCOM0_Handler>:


void USART0_IRQ_HANDLER(void)
{
  407390:	b580      	push	{r7, lr}
  407392:	af00      	add	r7, sp, #0
	commonUSART_IRQ_HANDLER(INV_UART_SENSOR_CTRL);
  407394:	2000      	movs	r0, #0
  407396:	4b02      	ldr	r3, [pc, #8]	; (4073a0 <FLEXCOM0_Handler+0x10>)
  407398:	4798      	blx	r3
}
  40739a:	bf00      	nop
  40739c:	bd80      	pop	{r7, pc}
  40739e:	bf00      	nop
  4073a0:	004072d1 	.word	0x004072d1

004073a4 <FLEXCOM7_Handler>:

void USART7_IRQ_HANDLER(void)
{
  4073a4:	b580      	push	{r7, lr}
  4073a6:	af00      	add	r7, sp, #0
	commonUSART_IRQ_HANDLER(INV_UART_LOG);	
  4073a8:	2001      	movs	r0, #1
  4073aa:	4b02      	ldr	r3, [pc, #8]	; (4073b4 <FLEXCOM7_Handler+0x10>)
  4073ac:	4798      	blx	r3
}
  4073ae:	bf00      	nop
  4073b0:	bd80      	pop	{r7, pc}
  4073b2:	bf00      	nop
  4073b4:	004072d1 	.word	0x004072d1

004073b8 <buffer_pop>:
 *  @param[in]  len Number of bytes to be poped
 *  @note:      This function does not check if there are any bytes available (waiting to be poped)
 *              in the ring byte buffer prior to poping them
 */
static void buffer_pop(uart_mngr_buffer_struct_t * uart_mngr, uint8_t * data, uint16_t len)
{
  4073b8:	b580      	push	{r7, lr}
  4073ba:	b086      	sub	sp, #24
  4073bc:	af00      	add	r7, sp, #0
  4073be:	60f8      	str	r0, [r7, #12]
  4073c0:	60b9      	str	r1, [r7, #8]
  4073c2:	4613      	mov	r3, r2
  4073c4:	80fb      	strh	r3, [r7, #6]
  /* start index of the circular buffer (first bytes are reserved for driver) */
		uint16_t start = uart_mngr->driver_max_single_txfer_size;
  4073c6:	68fb      	ldr	r3, [r7, #12]
  4073c8:	889b      	ldrh	r3, [r3, #4]
  4073ca:	82fb      	strh	r3, [r7, #22]
	uint16_t tail = uart_mngr->circ_buffer_tail;
  4073cc:	68fb      	ldr	r3, [r7, #12]
  4073ce:	895b      	ldrh	r3, [r3, #10]
  4073d0:	82bb      	strh	r3, [r7, #20]

	uart_mngr->circ_buffer_tail += len;
  4073d2:	68fb      	ldr	r3, [r7, #12]
  4073d4:	895b      	ldrh	r3, [r3, #10]
  4073d6:	b29a      	uxth	r2, r3
  4073d8:	88fb      	ldrh	r3, [r7, #6]
  4073da:	4413      	add	r3, r2
  4073dc:	b29a      	uxth	r2, r3
  4073de:	68fb      	ldr	r3, [r7, #12]
  4073e0:	815a      	strh	r2, [r3, #10]
	uart_mngr->circ_buffer_tail %= uart_mngr->circ_buffer_size;
  4073e2:	68fb      	ldr	r3, [r7, #12]
  4073e4:	895b      	ldrh	r3, [r3, #10]
  4073e6:	b29b      	uxth	r3, r3
  4073e8:	68fa      	ldr	r2, [r7, #12]
  4073ea:	88d2      	ldrh	r2, [r2, #6]
  4073ec:	fbb3 f1f2 	udiv	r1, r3, r2
  4073f0:	fb02 f201 	mul.w	r2, r2, r1
  4073f4:	1a9b      	subs	r3, r3, r2
  4073f6:	b29a      	uxth	r2, r3
  4073f8:	68fb      	ldr	r3, [r7, #12]
  4073fa:	815a      	strh	r2, [r3, #10]

	if((uart_mngr->circ_buffer_size - tail) >= len) {
  4073fc:	68fb      	ldr	r3, [r7, #12]
  4073fe:	88db      	ldrh	r3, [r3, #6]
  407400:	461a      	mov	r2, r3
  407402:	8abb      	ldrh	r3, [r7, #20]
  407404:	1ad2      	subs	r2, r2, r3
  407406:	88fb      	ldrh	r3, [r7, #6]
  407408:	429a      	cmp	r2, r3
  40740a:	db0b      	blt.n	407424 <buffer_pop+0x6c>
		memcpy(data, &uart_mngr->buffer[start+tail], len);
  40740c:	68fb      	ldr	r3, [r7, #12]
  40740e:	681b      	ldr	r3, [r3, #0]
  407410:	8af9      	ldrh	r1, [r7, #22]
  407412:	8aba      	ldrh	r2, [r7, #20]
  407414:	440a      	add	r2, r1
  407416:	4413      	add	r3, r2
  407418:	88fa      	ldrh	r2, [r7, #6]
  40741a:	4619      	mov	r1, r3
  40741c:	68b8      	ldr	r0, [r7, #8]
  40741e:	4b15      	ldr	r3, [pc, #84]	; (407474 <buffer_pop+0xbc>)
  407420:	4798      	blx	r3
				uart_mngr->circ_buffer_size - tail);
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
				&uart_mngr->buffer[start],
				len - uart_mngr->circ_buffer_size + tail);
	}
}
  407422:	e023      	b.n	40746c <buffer_pop+0xb4>
		memcpy(data, &uart_mngr->buffer[start+tail],
  407424:	68fb      	ldr	r3, [r7, #12]
  407426:	681b      	ldr	r3, [r3, #0]
  407428:	8af9      	ldrh	r1, [r7, #22]
  40742a:	8aba      	ldrh	r2, [r7, #20]
  40742c:	440a      	add	r2, r1
  40742e:	1899      	adds	r1, r3, r2
				uart_mngr->circ_buffer_size - tail);
  407430:	68fb      	ldr	r3, [r7, #12]
  407432:	88db      	ldrh	r3, [r3, #6]
  407434:	461a      	mov	r2, r3
  407436:	8abb      	ldrh	r3, [r7, #20]
  407438:	1ad3      	subs	r3, r2, r3
		memcpy(data, &uart_mngr->buffer[start+tail],
  40743a:	461a      	mov	r2, r3
  40743c:	68b8      	ldr	r0, [r7, #8]
  40743e:	4b0d      	ldr	r3, [pc, #52]	; (407474 <buffer_pop+0xbc>)
  407440:	4798      	blx	r3
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
  407442:	68fb      	ldr	r3, [r7, #12]
  407444:	88db      	ldrh	r3, [r3, #6]
  407446:	461a      	mov	r2, r3
  407448:	8abb      	ldrh	r3, [r7, #20]
  40744a:	1ad3      	subs	r3, r2, r3
  40744c:	461a      	mov	r2, r3
  40744e:	68bb      	ldr	r3, [r7, #8]
  407450:	1898      	adds	r0, r3, r2
				&uart_mngr->buffer[start],
  407452:	68fb      	ldr	r3, [r7, #12]
  407454:	681a      	ldr	r2, [r3, #0]
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
  407456:	8afb      	ldrh	r3, [r7, #22]
				&uart_mngr->buffer[start],
  407458:	18d1      	adds	r1, r2, r3
				len - uart_mngr->circ_buffer_size + tail);
  40745a:	88fb      	ldrh	r3, [r7, #6]
  40745c:	68fa      	ldr	r2, [r7, #12]
  40745e:	88d2      	ldrh	r2, [r2, #6]
  407460:	1a9a      	subs	r2, r3, r2
  407462:	8abb      	ldrh	r3, [r7, #20]
  407464:	4413      	add	r3, r2
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
  407466:	461a      	mov	r2, r3
  407468:	4b02      	ldr	r3, [pc, #8]	; (407474 <buffer_pop+0xbc>)
  40746a:	4798      	blx	r3
}
  40746c:	bf00      	nop
  40746e:	3718      	adds	r7, #24
  407470:	46bd      	mov	sp, r7
  407472:	bd80      	pop	{r7, pc}
  407474:	0040f841 	.word	0x0040f841

00407478 <buffer_push>:
 *  @param[in]  len Number of bytes to be pushed
 *  @note:      This function does not check if there is any space available 
 *              in the ring byte buffer prior to pushing the data
 */
static void buffer_push(uart_mngr_buffer_struct_t * uart_mngr, uint8_t * data, uint16_t len)
{
  407478:	b580      	push	{r7, lr}
  40747a:	b086      	sub	sp, #24
  40747c:	af00      	add	r7, sp, #0
  40747e:	60f8      	str	r0, [r7, #12]
  407480:	60b9      	str	r1, [r7, #8]
  407482:	4613      	mov	r3, r2
  407484:	80fb      	strh	r3, [r7, #6]
  /* start index of the circular buffer (first bytes are reserved for driver) */
		uint16_t start = uart_mngr->driver_max_single_txfer_size;
  407486:	68fb      	ldr	r3, [r7, #12]
  407488:	889b      	ldrh	r3, [r3, #4]
  40748a:	82fb      	strh	r3, [r7, #22]

	uint16_t head = uart_mngr->circ_buffer_head;
  40748c:	68fb      	ldr	r3, [r7, #12]
  40748e:	891b      	ldrh	r3, [r3, #8]
  407490:	82bb      	strh	r3, [r7, #20]

	if((uart_mngr->circ_buffer_size - head) >= len) {
  407492:	68fb      	ldr	r3, [r7, #12]
  407494:	88db      	ldrh	r3, [r3, #6]
  407496:	461a      	mov	r2, r3
  407498:	8abb      	ldrh	r3, [r7, #20]
  40749a:	1ad2      	subs	r2, r2, r3
  40749c:	88fb      	ldrh	r3, [r7, #6]
  40749e:	429a      	cmp	r2, r3
  4074a0:	db0b      	blt.n	4074ba <buffer_push+0x42>
		memcpy(&uart_mngr->buffer[start+head], data, len);
  4074a2:	68fb      	ldr	r3, [r7, #12]
  4074a4:	681b      	ldr	r3, [r3, #0]
  4074a6:	8af9      	ldrh	r1, [r7, #22]
  4074a8:	8aba      	ldrh	r2, [r7, #20]
  4074aa:	440a      	add	r2, r1
  4074ac:	4413      	add	r3, r2
  4074ae:	88fa      	ldrh	r2, [r7, #6]
  4074b0:	68b9      	ldr	r1, [r7, #8]
  4074b2:	4618      	mov	r0, r3
  4074b4:	4b1f      	ldr	r3, [pc, #124]	; (407534 <buffer_push+0xbc>)
  4074b6:	4798      	blx	r3
  4074b8:	e023      	b.n	407502 <buffer_push+0x8a>
	} else {
		
		memcpy(&uart_mngr->buffer[start+head], data, 
  4074ba:	68fb      	ldr	r3, [r7, #12]
  4074bc:	681b      	ldr	r3, [r3, #0]
  4074be:	8af9      	ldrh	r1, [r7, #22]
  4074c0:	8aba      	ldrh	r2, [r7, #20]
  4074c2:	440a      	add	r2, r1
  4074c4:	1898      	adds	r0, r3, r2
				uart_mngr->circ_buffer_size - head);
  4074c6:	68fb      	ldr	r3, [r7, #12]
  4074c8:	88db      	ldrh	r3, [r3, #6]
  4074ca:	461a      	mov	r2, r3
  4074cc:	8abb      	ldrh	r3, [r7, #20]
  4074ce:	1ad3      	subs	r3, r2, r3
		memcpy(&uart_mngr->buffer[start+head], data, 
  4074d0:	461a      	mov	r2, r3
  4074d2:	68b9      	ldr	r1, [r7, #8]
  4074d4:	4b17      	ldr	r3, [pc, #92]	; (407534 <buffer_push+0xbc>)
  4074d6:	4798      	blx	r3
		memcpy(&uart_mngr->buffer[start],
  4074d8:	68fb      	ldr	r3, [r7, #12]
  4074da:	681a      	ldr	r2, [r3, #0]
  4074dc:	8afb      	ldrh	r3, [r7, #22]
  4074de:	18d0      	adds	r0, r2, r3
				&data[uart_mngr->circ_buffer_size - head],
  4074e0:	68fb      	ldr	r3, [r7, #12]
  4074e2:	88db      	ldrh	r3, [r3, #6]
  4074e4:	461a      	mov	r2, r3
  4074e6:	8abb      	ldrh	r3, [r7, #20]
  4074e8:	1ad3      	subs	r3, r2, r3
  4074ea:	461a      	mov	r2, r3
  4074ec:	68bb      	ldr	r3, [r7, #8]
  4074ee:	1899      	adds	r1, r3, r2
				len - uart_mngr->circ_buffer_size + head);
  4074f0:	88fb      	ldrh	r3, [r7, #6]
  4074f2:	68fa      	ldr	r2, [r7, #12]
  4074f4:	88d2      	ldrh	r2, [r2, #6]
  4074f6:	1a9a      	subs	r2, r3, r2
  4074f8:	8abb      	ldrh	r3, [r7, #20]
  4074fa:	4413      	add	r3, r2
		memcpy(&uart_mngr->buffer[start],
  4074fc:	461a      	mov	r2, r3
  4074fe:	4b0d      	ldr	r3, [pc, #52]	; (407534 <buffer_push+0xbc>)
  407500:	4798      	blx	r3
	}

	uart_mngr->circ_buffer_head += len;
  407502:	68fb      	ldr	r3, [r7, #12]
  407504:	891b      	ldrh	r3, [r3, #8]
  407506:	b29a      	uxth	r2, r3
  407508:	88fb      	ldrh	r3, [r7, #6]
  40750a:	4413      	add	r3, r2
  40750c:	b29a      	uxth	r2, r3
  40750e:	68fb      	ldr	r3, [r7, #12]
  407510:	811a      	strh	r2, [r3, #8]
	uart_mngr->circ_buffer_head %= uart_mngr->circ_buffer_size;
  407512:	68fb      	ldr	r3, [r7, #12]
  407514:	891b      	ldrh	r3, [r3, #8]
  407516:	b29b      	uxth	r3, r3
  407518:	68fa      	ldr	r2, [r7, #12]
  40751a:	88d2      	ldrh	r2, [r2, #6]
  40751c:	fbb3 f1f2 	udiv	r1, r3, r2
  407520:	fb02 f201 	mul.w	r2, r2, r1
  407524:	1a9b      	subs	r3, r3, r2
  407526:	b29a      	uxth	r2, r3
  407528:	68fb      	ldr	r3, [r7, #12]
  40752a:	811a      	strh	r2, [r3, #8]
}
  40752c:	bf00      	nop
  40752e:	3718      	adds	r7, #24
  407530:	46bd      	mov	sp, r7
  407532:	bd80      	pop	{r7, pc}
  407534:	0040f841 	.word	0x0040f841

00407538 <buffer_get_size>:
/** @brief      Returns the bytes available in the ring byte buffer
 *  @param[in]  uart_mngr Pointer to the UART manager buffer object
 *  @return     The number of bytes available (waiting to be poped) in the ring byte buffer
 */
static uint16_t buffer_get_size(uart_mngr_buffer_struct_t * uart_mngr)
{
  407538:	b480      	push	{r7}
  40753a:	b085      	sub	sp, #20
  40753c:	af00      	add	r7, sp, #0
  40753e:	6078      	str	r0, [r7, #4]
	uint16_t head = uart_mngr->circ_buffer_head;
  407540:	687b      	ldr	r3, [r7, #4]
  407542:	891b      	ldrh	r3, [r3, #8]
  407544:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = uart_mngr->circ_buffer_tail;
  407546:	687b      	ldr	r3, [r7, #4]
  407548:	895b      	ldrh	r3, [r3, #10]
  40754a:	81bb      	strh	r3, [r7, #12]

	if(head >= tail)
  40754c:	89fa      	ldrh	r2, [r7, #14]
  40754e:	89bb      	ldrh	r3, [r7, #12]
  407550:	429a      	cmp	r2, r3
  407552:	d304      	bcc.n	40755e <buffer_get_size+0x26>
		return (head - tail);
  407554:	89fa      	ldrh	r2, [r7, #14]
  407556:	89bb      	ldrh	r3, [r7, #12]
  407558:	1ad3      	subs	r3, r2, r3
  40755a:	b29b      	uxth	r3, r3
  40755c:	e007      	b.n	40756e <buffer_get_size+0x36>
	else
		return (uart_mngr->circ_buffer_size - tail + head);
  40755e:	687b      	ldr	r3, [r7, #4]
  407560:	88da      	ldrh	r2, [r3, #6]
  407562:	89bb      	ldrh	r3, [r7, #12]
  407564:	1ad3      	subs	r3, r2, r3
  407566:	b29a      	uxth	r2, r3
  407568:	89fb      	ldrh	r3, [r7, #14]
  40756a:	4413      	add	r3, r2
  40756c:	b29b      	uxth	r3, r3
}
  40756e:	4618      	mov	r0, r3
  407570:	3714      	adds	r7, #20
  407572:	46bd      	mov	sp, r7
  407574:	f85d 7b04 	ldr.w	r7, [sp], #4
  407578:	4770      	bx	lr
	...

0040757c <buffer_get_available>:
/** @brief      Returns the free space that is available in the ring byte buffer
 *  @param[in]  uart_mngr Pointer to the UART manager buffer object
 *  @return     The space, in bytes, available in the ring byte buffer
 */
static uint16_t buffer_get_available(uart_mngr_buffer_struct_t * uart_mngr)
{
  40757c:	b590      	push	{r4, r7, lr}
  40757e:	b083      	sub	sp, #12
  407580:	af00      	add	r7, sp, #0
  407582:	6078      	str	r0, [r7, #4]
	return (uart_mngr->circ_buffer_size - buffer_get_size(uart_mngr));
  407584:	687b      	ldr	r3, [r7, #4]
  407586:	88dc      	ldrh	r4, [r3, #6]
  407588:	6878      	ldr	r0, [r7, #4]
  40758a:	4b04      	ldr	r3, [pc, #16]	; (40759c <buffer_get_available+0x20>)
  40758c:	4798      	blx	r3
  40758e:	4603      	mov	r3, r0
  407590:	1ae3      	subs	r3, r4, r3
  407592:	b29b      	uxth	r3, r3
}
  407594:	4618      	mov	r0, r3
  407596:	370c      	adds	r7, #12
  407598:	46bd      	mov	sp, r7
  40759a:	bd90      	pop	{r4, r7, pc}
  40759c:	00407539 	.word	0x00407539

004075a0 <uart_tx_done_cb>:

/** @brief      Callback called when a TX transfer finishes
 *  @param[in]  context Context passed at init
 */
static void uart_tx_done_cb(void * context)
{
  4075a0:	b580      	push	{r7, lr}
  4075a2:	b086      	sub	sp, #24
  4075a4:	af00      	add	r7, sp, #0
  4075a6:	6078      	str	r0, [r7, #4]
	inv_uart_tx_transfer_t uart_txfer_struct;
	static uint8_t temp_buf[UART_MNGR_TX_ABSOLUTE_MAX_TRANSFER_SIZE];
	uart_mngr_struct_t * uart_mngr = (uart_mngr_struct_t *)context;
  4075a8:	687b      	ldr	r3, [r7, #4]
  4075aa:	613b      	str	r3, [r7, #16]
	
	/* Check if there is data waiting to be transfered in the ring byte buffer*/
	uint16_t bytes_num = buffer_get_size(&uart_mngr->uart_tx_buf);
  4075ac:	693b      	ldr	r3, [r7, #16]
  4075ae:	3310      	adds	r3, #16
  4075b0:	4618      	mov	r0, r3
  4075b2:	4b13      	ldr	r3, [pc, #76]	; (407600 <uart_tx_done_cb+0x60>)
  4075b4:	4798      	blx	r3
  4075b6:	4603      	mov	r3, r0
  4075b8:	82fb      	strh	r3, [r7, #22]
	
	if(bytes_num) {
  4075ba:	8afb      	ldrh	r3, [r7, #22]
  4075bc:	2b00      	cmp	r3, #0
  4075be:	d01a      	beq.n	4075f6 <uart_tx_done_cb+0x56>
		if(bytes_num >= uart_mngr->uart_tx_buf.driver_max_single_txfer_size) {
  4075c0:	693b      	ldr	r3, [r7, #16]
  4075c2:	8a9b      	ldrh	r3, [r3, #20]
  4075c4:	8afa      	ldrh	r2, [r7, #22]
  4075c6:	429a      	cmp	r2, r3
  4075c8:	d302      	bcc.n	4075d0 <uart_tx_done_cb+0x30>
			/* Clamp the number of bytes to be transfered to the maximum size supported by the UART driver */
			bytes_num = uart_mngr->uart_tx_buf.driver_max_single_txfer_size;
  4075ca:	693b      	ldr	r3, [r7, #16]
  4075cc:	8a9b      	ldrh	r3, [r3, #20]
  4075ce:	82fb      	strh	r3, [r7, #22]
		}
		buffer_pop(&uart_mngr->uart_tx_buf, temp_buf, bytes_num);
  4075d0:	693b      	ldr	r3, [r7, #16]
  4075d2:	3310      	adds	r3, #16
  4075d4:	8afa      	ldrh	r2, [r7, #22]
  4075d6:	490b      	ldr	r1, [pc, #44]	; (407604 <uart_tx_done_cb+0x64>)
  4075d8:	4618      	mov	r0, r3
  4075da:	4b0b      	ldr	r3, [pc, #44]	; (407608 <uart_tx_done_cb+0x68>)
  4075dc:	4798      	blx	r3
		uart_txfer_struct.data = temp_buf;
  4075de:	4b09      	ldr	r3, [pc, #36]	; (407604 <uart_tx_done_cb+0x64>)
  4075e0:	60bb      	str	r3, [r7, #8]
		uart_txfer_struct.len  = bytes_num;
  4075e2:	8afb      	ldrh	r3, [r7, #22]
  4075e4:	81bb      	strh	r3, [r7, #12]
		inv_uart_tx_txfer(uart_mngr->uart_mngr_uart_num, &uart_txfer_struct);
  4075e6:	693b      	ldr	r3, [r7, #16]
  4075e8:	781b      	ldrb	r3, [r3, #0]
  4075ea:	f107 0208 	add.w	r2, r7, #8
  4075ee:	4611      	mov	r1, r2
  4075f0:	4618      	mov	r0, r3
  4075f2:	4b06      	ldr	r3, [pc, #24]	; (40760c <uart_tx_done_cb+0x6c>)
  4075f4:	4798      	blx	r3
	}
}
  4075f6:	bf00      	nop
  4075f8:	3718      	adds	r7, #24
  4075fa:	46bd      	mov	sp, r7
  4075fc:	bd80      	pop	{r7, pc}
  4075fe:	bf00      	nop
  407600:	00407539 	.word	0x00407539
  407604:	200045d8 	.word	0x200045d8
  407608:	004073b9 	.word	0x004073b9
  40760c:	00406e81 	.word	0x00406e81

00407610 <inv_uart_mngr_init>:


int inv_uart_mngr_init(inv_uart_mngr_init_struct_t * uart_mngr_init_struct)
{
  407610:	b580      	push	{r7, lr}
  407612:	b08c      	sub	sp, #48	; 0x30
  407614:	af00      	add	r7, sp, #0
  407616:	6078      	str	r0, [r7, #4]
	inv_uart_init_struct_t uart_init_struct;
	inv_uart_num_t uart_nb = uart_mngr_init_struct->uart_num;
  407618:	687b      	ldr	r3, [r7, #4]
  40761a:	781b      	ldrb	r3, [r3, #0]
  40761c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* Populate the driver init structure with data common for all the UART peripherals */
	uart_init_struct.uart_num = uart_mngr_init_struct->uart_num;
  407620:	687b      	ldr	r3, [r7, #4]
  407622:	781b      	ldrb	r3, [r3, #0]
  407624:	733b      	strb	r3, [r7, #12]
	uart_init_struct.baudrate = uart_mngr_init_struct->baudrate;
  407626:	687b      	ldr	r3, [r7, #4]
  407628:	685b      	ldr	r3, [r3, #4]
  40762a:	61fb      	str	r3, [r7, #28]
	uart_init_struct.flow_ctrl = uart_mngr_init_struct->flow_ctrl;
  40762c:	687b      	ldr	r3, [r7, #4]
  40762e:	7a1b      	ldrb	r3, [r3, #8]
  407630:	f887 3020 	strb.w	r3, [r7, #32]
	uart_init_struct.tx_done_cb = uart_tx_done_cb;
  407634:	4b20      	ldr	r3, [pc, #128]	; (4076b8 <inv_uart_mngr_init+0xa8>)
  407636:	627b      	str	r3, [r7, #36]	; 0x24

	/* Populate the driver init structure with data specific to each UART peripheral */
	uart_init_struct.tx_buffer  = um[uart_nb].uart_tx_buf.buffer;
  407638:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  40763c:	491f      	ldr	r1, [pc, #124]	; (4076bc <inv_uart_mngr_init+0xac>)
  40763e:	4613      	mov	r3, r2
  407640:	00db      	lsls	r3, r3, #3
  407642:	1a9b      	subs	r3, r3, r2
  407644:	009b      	lsls	r3, r3, #2
  407646:	440b      	add	r3, r1
  407648:	3310      	adds	r3, #16
  40764a:	681b      	ldr	r3, [r3, #0]
  40764c:	613b      	str	r3, [r7, #16]
	uart_init_struct.rx_buffer  = um[uart_nb].uart_rx_buf.buffer;
  40764e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  407652:	491a      	ldr	r1, [pc, #104]	; (4076bc <inv_uart_mngr_init+0xac>)
  407654:	4613      	mov	r3, r2
  407656:	00db      	lsls	r3, r3, #3
  407658:	1a9b      	subs	r3, r3, r2
  40765a:	009b      	lsls	r3, r3, #2
  40765c:	440b      	add	r3, r1
  40765e:	3304      	adds	r3, #4
  407660:	681b      	ldr	r3, [r3, #0]
  407662:	617b      	str	r3, [r7, #20]
	uart_init_struct.tx_size    = um[uart_nb].uart_tx_buf.driver_max_single_txfer_size;
  407664:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  407668:	4914      	ldr	r1, [pc, #80]	; (4076bc <inv_uart_mngr_init+0xac>)
  40766a:	4613      	mov	r3, r2
  40766c:	00db      	lsls	r3, r3, #3
  40766e:	1a9b      	subs	r3, r3, r2
  407670:	009b      	lsls	r3, r3, #2
  407672:	440b      	add	r3, r1
  407674:	3314      	adds	r3, #20
  407676:	881b      	ldrh	r3, [r3, #0]
  407678:	833b      	strh	r3, [r7, #24]
	uart_init_struct.rx_size    = um[uart_nb].uart_rx_buf.driver_max_single_txfer_size;
  40767a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  40767e:	490f      	ldr	r1, [pc, #60]	; (4076bc <inv_uart_mngr_init+0xac>)
  407680:	4613      	mov	r3, r2
  407682:	00db      	lsls	r3, r3, #3
  407684:	1a9b      	subs	r3, r3, r2
  407686:	009b      	lsls	r3, r3, #2
  407688:	440b      	add	r3, r1
  40768a:	3308      	adds	r3, #8
  40768c:	881b      	ldrh	r3, [r3, #0]
  40768e:	837b      	strh	r3, [r7, #26]
	uart_init_struct.tx_context = &um[uart_nb];
  407690:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  407694:	4613      	mov	r3, r2
  407696:	00db      	lsls	r3, r3, #3
  407698:	1a9b      	subs	r3, r3, r2
  40769a:	009b      	lsls	r3, r3, #2
  40769c:	4a07      	ldr	r2, [pc, #28]	; (4076bc <inv_uart_mngr_init+0xac>)
  40769e:	4413      	add	r3, r2
  4076a0:	62bb      	str	r3, [r7, #40]	; 0x28
	
	/* Initialize the UART driver */
	return inv_uart_init(&uart_init_struct);
  4076a2:	f107 030c 	add.w	r3, r7, #12
  4076a6:	4618      	mov	r0, r3
  4076a8:	4b05      	ldr	r3, [pc, #20]	; (4076c0 <inv_uart_mngr_init+0xb0>)
  4076aa:	4798      	blx	r3
  4076ac:	4603      	mov	r3, r0
}
  4076ae:	4618      	mov	r0, r3
  4076b0:	3730      	adds	r7, #48	; 0x30
  4076b2:	46bd      	mov	sp, r7
  4076b4:	bd80      	pop	{r7, pc}
  4076b6:	bf00      	nop
  4076b8:	004075a1 	.word	0x004075a1
  4076bc:	200024d4 	.word	0x200024d4
  4076c0:	00406b95 	.word	0x00406b95

004076c4 <inv_uart_mngr_puts>:

int inv_uart_mngr_puts(inv_uart_num_t uart, const char * s, unsigned short l)
{
  4076c4:	b580      	push	{r7, lr}
  4076c6:	b086      	sub	sp, #24
  4076c8:	af00      	add	r7, sp, #0
  4076ca:	4603      	mov	r3, r0
  4076cc:	6039      	str	r1, [r7, #0]
  4076ce:	71fb      	strb	r3, [r7, #7]
  4076d0:	4613      	mov	r3, r2
  4076d2:	80bb      	strh	r3, [r7, #4]
	int rc = INV_UART_ERROR_SUCCES;
  4076d4:	2300      	movs	r3, #0
  4076d6:	617b      	str	r3, [r7, #20]
	inv_uart_state_t uart_tx_state;
	uart_mngr_struct_t * uart_mngr = &um[uart];
  4076d8:	79fa      	ldrb	r2, [r7, #7]
  4076da:	4613      	mov	r3, r2
  4076dc:	00db      	lsls	r3, r3, #3
  4076de:	1a9b      	subs	r3, r3, r2
  4076e0:	009b      	lsls	r3, r3, #2
  4076e2:	4a34      	ldr	r2, [pc, #208]	; (4077b4 <inv_uart_mngr_puts+0xf0>)
  4076e4:	4413      	add	r3, r2
  4076e6:	613b      	str	r3, [r7, #16]
	
	/* Check if the data to be transfered fits in the internal buffer
	 * Total size of the buffer being driver reserved size + circular buffer size
	 */
	if(l > (uart_mngr->uart_tx_buf.driver_max_single_txfer_size + 
  4076e8:	88ba      	ldrh	r2, [r7, #4]
  4076ea:	693b      	ldr	r3, [r7, #16]
  4076ec:	8a9b      	ldrh	r3, [r3, #20]
  4076ee:	4619      	mov	r1, r3
		     uart_mngr->uart_tx_buf.circ_buffer_size) )
  4076f0:	693b      	ldr	r3, [r7, #16]
  4076f2:	8adb      	ldrh	r3, [r3, #22]
	if(l > (uart_mngr->uart_tx_buf.driver_max_single_txfer_size + 
  4076f4:	440b      	add	r3, r1
  4076f6:	429a      	cmp	r2, r3
  4076f8:	dd02      	ble.n	407700 <inv_uart_mngr_puts+0x3c>
		return INV_UART_ERROR_MEMORY;
  4076fa:	f06f 0302 	mvn.w	r3, #2
  4076fe:	e055      	b.n	4077ac <inv_uart_mngr_puts+0xe8>
	
	inv_disable_irq();
  407700:	4b2d      	ldr	r3, [pc, #180]	; (4077b8 <inv_uart_mngr_puts+0xf4>)
  407702:	4798      	blx	r3
	uart_tx_state = inv_uart_tx_get_state(uart_mngr->uart_mngr_uart_num);
  407704:	693b      	ldr	r3, [r7, #16]
  407706:	781b      	ldrb	r3, [r3, #0]
  407708:	4618      	mov	r0, r3
  40770a:	4b2c      	ldr	r3, [pc, #176]	; (4077bc <inv_uart_mngr_puts+0xf8>)
  40770c:	4798      	blx	r3
  40770e:	4603      	mov	r3, r0
  407710:	73fb      	strb	r3, [r7, #15]
	
	if(uart_tx_state == INV_UART_STATE_IDLE) {
  407712:	7bfb      	ldrb	r3, [r7, #15]
  407714:	2b01      	cmp	r3, #1
  407716:	d127      	bne.n	407768 <inv_uart_mngr_puts+0xa4>
		if(l <= uart_mngr->uart_tx_buf.driver_max_single_txfer_size) {
  407718:	693b      	ldr	r3, [r7, #16]
  40771a:	8a9b      	ldrh	r3, [r3, #20]
  40771c:	88ba      	ldrh	r2, [r7, #4]
  40771e:	429a      	cmp	r2, r3
  407720:	d808      	bhi.n	407734 <inv_uart_mngr_puts+0x70>
			/* If the data fits into the UART driver's buffers, make a single transfer */
			rc = inv_uart_puts(uart_mngr->uart_mngr_uart_num, s, l);
  407722:	693b      	ldr	r3, [r7, #16]
  407724:	781b      	ldrb	r3, [r3, #0]
  407726:	88ba      	ldrh	r2, [r7, #4]
  407728:	6839      	ldr	r1, [r7, #0]
  40772a:	4618      	mov	r0, r3
  40772c:	4b24      	ldr	r3, [pc, #144]	; (4077c0 <inv_uart_mngr_puts+0xfc>)
  40772e:	4798      	blx	r3
  407730:	6178      	str	r0, [r7, #20]
  407732:	e038      	b.n	4077a6 <inv_uart_mngr_puts+0xe2>
		} else {
			/* If the data does not fit in the UART driver's internal buffers, 
			 * make an UART transfer and push the rest of the data in the UART manager's ring byte buffer 
			 */
			buffer_push(&uart_mngr->uart_tx_buf, (uint8_t *)&s[uart_mngr->uart_tx_buf.driver_max_single_txfer_size], 
  407734:	693b      	ldr	r3, [r7, #16]
  407736:	f103 0010 	add.w	r0, r3, #16
  40773a:	693b      	ldr	r3, [r7, #16]
  40773c:	8a9b      	ldrh	r3, [r3, #20]
  40773e:	461a      	mov	r2, r3
  407740:	683b      	ldr	r3, [r7, #0]
  407742:	1899      	adds	r1, r3, r2
					l - uart_mngr->uart_tx_buf.driver_max_single_txfer_size);
  407744:	693b      	ldr	r3, [r7, #16]
  407746:	8a9b      	ldrh	r3, [r3, #20]
			buffer_push(&uart_mngr->uart_tx_buf, (uint8_t *)&s[uart_mngr->uart_tx_buf.driver_max_single_txfer_size], 
  407748:	88ba      	ldrh	r2, [r7, #4]
  40774a:	1ad3      	subs	r3, r2, r3
  40774c:	b29b      	uxth	r3, r3
  40774e:	461a      	mov	r2, r3
  407750:	4b1c      	ldr	r3, [pc, #112]	; (4077c4 <inv_uart_mngr_puts+0x100>)
  407752:	4798      	blx	r3
			rc = inv_uart_puts(uart_mngr->uart_mngr_uart_num, s, uart_mngr->uart_tx_buf.driver_max_single_txfer_size);
  407754:	693b      	ldr	r3, [r7, #16]
  407756:	7818      	ldrb	r0, [r3, #0]
  407758:	693b      	ldr	r3, [r7, #16]
  40775a:	8a9b      	ldrh	r3, [r3, #20]
  40775c:	461a      	mov	r2, r3
  40775e:	6839      	ldr	r1, [r7, #0]
  407760:	4b17      	ldr	r3, [pc, #92]	; (4077c0 <inv_uart_mngr_puts+0xfc>)
  407762:	4798      	blx	r3
  407764:	6178      	str	r0, [r7, #20]
  407766:	e01e      	b.n	4077a6 <inv_uart_mngr_puts+0xe2>
		}
	} else if(uart_tx_state == INV_UART_STATE_BUSY_TX) {
  407768:	7bfb      	ldrb	r3, [r7, #15]
  40776a:	2b02      	cmp	r3, #2
  40776c:	d115      	bne.n	40779a <inv_uart_mngr_puts+0xd6>
		if(buffer_get_available(&uart_mngr->uart_tx_buf) < l) {
  40776e:	693b      	ldr	r3, [r7, #16]
  407770:	3310      	adds	r3, #16
  407772:	4618      	mov	r0, r3
  407774:	4b14      	ldr	r3, [pc, #80]	; (4077c8 <inv_uart_mngr_puts+0x104>)
  407776:	4798      	blx	r3
  407778:	4603      	mov	r3, r0
  40777a:	461a      	mov	r2, r3
  40777c:	88bb      	ldrh	r3, [r7, #4]
  40777e:	4293      	cmp	r3, r2
  407780:	d903      	bls.n	40778a <inv_uart_mngr_puts+0xc6>
			/* Not enough room in the ring byte buffer */
			rc = INV_UART_ERROR_MEMORY;
  407782:	f06f 0302 	mvn.w	r3, #2
  407786:	617b      	str	r3, [r7, #20]
  407788:	e00d      	b.n	4077a6 <inv_uart_mngr_puts+0xe2>
		} else {
			/* Push the data in the ring byte buffer so that it can be transfered once the current transfer finishes */
			buffer_push(&uart_mngr->uart_tx_buf, (uint8_t *)s, l);
  40778a:	693b      	ldr	r3, [r7, #16]
  40778c:	3310      	adds	r3, #16
  40778e:	88ba      	ldrh	r2, [r7, #4]
  407790:	6839      	ldr	r1, [r7, #0]
  407792:	4618      	mov	r0, r3
  407794:	4b0b      	ldr	r3, [pc, #44]	; (4077c4 <inv_uart_mngr_puts+0x100>)
  407796:	4798      	blx	r3
  407798:	e005      	b.n	4077a6 <inv_uart_mngr_puts+0xe2>
		}
	} else if(uart_tx_state == INV_UART_STATE_RESET) {
  40779a:	7bfb      	ldrb	r3, [r7, #15]
  40779c:	2b00      	cmp	r3, #0
  40779e:	d102      	bne.n	4077a6 <inv_uart_mngr_puts+0xe2>
		/* UART driver non-initialized */
		rc = INV_UART_ERROR;
  4077a0:	f04f 33ff 	mov.w	r3, #4294967295
  4077a4:	617b      	str	r3, [r7, #20]
	}
	inv_enable_irq();
  4077a6:	4b09      	ldr	r3, [pc, #36]	; (4077cc <inv_uart_mngr_puts+0x108>)
  4077a8:	4798      	blx	r3
	
	return rc;
  4077aa:	697b      	ldr	r3, [r7, #20]
}
  4077ac:	4618      	mov	r0, r3
  4077ae:	3718      	adds	r7, #24
  4077b0:	46bd      	mov	sp, r7
  4077b2:	bd80      	pop	{r7, pc}
  4077b4:	200024d4 	.word	0x200024d4
  4077b8:	00404949 	.word	0x00404949
  4077bc:	00407161 	.word	0x00407161
  4077c0:	00406e4d 	.word	0x00406e4d
  4077c4:	00407479 	.word	0x00407479
  4077c8:	0040757d 	.word	0x0040757d
  4077cc:	00404971 	.word	0x00404971

004077d0 <inv_uart_mngr_getc>:

int inv_uart_mngr_getc(inv_uart_num_t uart)
{
  4077d0:	b580      	push	{r7, lr}
  4077d2:	b082      	sub	sp, #8
  4077d4:	af00      	add	r7, sp, #0
  4077d6:	4603      	mov	r3, r0
  4077d8:	71fb      	strb	r3, [r7, #7]
	return inv_uart_getc(uart);
  4077da:	79fb      	ldrb	r3, [r7, #7]
  4077dc:	4618      	mov	r0, r3
  4077de:	4b03      	ldr	r3, [pc, #12]	; (4077ec <inv_uart_mngr_getc+0x1c>)
  4077e0:	4798      	blx	r3
  4077e2:	4603      	mov	r3, r0
}
  4077e4:	4618      	mov	r0, r3
  4077e6:	3708      	adds	r7, #8
  4077e8:	46bd      	mov	sp, r7
  4077ea:	bd80      	pop	{r7, pc}
  4077ec:	0040701d 	.word	0x0040701d

004077f0 <inv_error_str>:
 */

#include "ErrorHelper.h"

const char * inv_error_str(int error)
{
  4077f0:	b480      	push	{r7}
  4077f2:	b083      	sub	sp, #12
  4077f4:	af00      	add	r7, sp, #0
  4077f6:	6078      	str	r0, [r7, #4]
	switch(error) {
  4077f8:	687b      	ldr	r3, [r7, #4]
  4077fa:	3310      	adds	r3, #16
  4077fc:	2b10      	cmp	r3, #16
  4077fe:	d845      	bhi.n	40788c <inv_error_str+0x9c>
  407800:	a201      	add	r2, pc, #4	; (adr r2, 407808 <inv_error_str+0x18>)
  407802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407806:	bf00      	nop
  407808:	00407889 	.word	0x00407889
  40780c:	00407885 	.word	0x00407885
  407810:	00407881 	.word	0x00407881
  407814:	0040787d 	.word	0x0040787d
  407818:	00407879 	.word	0x00407879
  40781c:	00407875 	.word	0x00407875
  407820:	00407871 	.word	0x00407871
  407824:	0040786d 	.word	0x0040786d
  407828:	0040788d 	.word	0x0040788d
  40782c:	00407869 	.word	0x00407869
  407830:	00407865 	.word	0x00407865
  407834:	00407861 	.word	0x00407861
  407838:	0040785d 	.word	0x0040785d
  40783c:	00407859 	.word	0x00407859
  407840:	00407855 	.word	0x00407855
  407844:	00407851 	.word	0x00407851
  407848:	0040784d 	.word	0x0040784d
	case INV_ERROR_SUCCESS:      return "Success";
  40784c:	4b13      	ldr	r3, [pc, #76]	; (40789c <inv_error_str+0xac>)
  40784e:	e01e      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR:              return "Unspecified error";
  407850:	4b13      	ldr	r3, [pc, #76]	; (4078a0 <inv_error_str+0xb0>)
  407852:	e01c      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_NIMPL:        return "Not implemented";
  407854:	4b13      	ldr	r3, [pc, #76]	; (4078a4 <inv_error_str+0xb4>)
  407856:	e01a      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_TRANSPORT:    return "Transport error";
  407858:	4b13      	ldr	r3, [pc, #76]	; (4078a8 <inv_error_str+0xb8>)
  40785a:	e018      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_TIMEOUT:      return "Timeout, action did not complete in time";
  40785c:	4b13      	ldr	r3, [pc, #76]	; (4078ac <inv_error_str+0xbc>)
  40785e:	e016      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_SIZE:         return "Wrong size error";
  407860:	4b13      	ldr	r3, [pc, #76]	; (4078b0 <inv_error_str+0xc0>)
  407862:	e014      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_OS:           return "Operating system failure";
  407864:	4b13      	ldr	r3, [pc, #76]	; (4078b4 <inv_error_str+0xc4>)
  407866:	e012      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_IO:           return "Input/Output error";
  407868:	4b13      	ldr	r3, [pc, #76]	; (4078b8 <inv_error_str+0xc8>)
  40786a:	e010      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_MEM: 		 return "Bad allocation";
  40786c:	4b13      	ldr	r3, [pc, #76]	; (4078bc <inv_error_str+0xcc>)
  40786e:	e00e      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_HW:           return "Hardware error";
  407870:	4b13      	ldr	r3, [pc, #76]	; (4078c0 <inv_error_str+0xd0>)
  407872:	e00c      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_BAD_ARG:      return "Invalid arguments";
  407874:	4b13      	ldr	r3, [pc, #76]	; (4078c4 <inv_error_str+0xd4>)
  407876:	e00a      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_UNEXPECTED:   return "Unexpected error";
  407878:	4b13      	ldr	r3, [pc, #76]	; (4078c8 <inv_error_str+0xd8>)
  40787a:	e008      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_FILE:         return "Invalid file format";
  40787c:	4b13      	ldr	r3, [pc, #76]	; (4078cc <inv_error_str+0xdc>)
  40787e:	e006      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_PATH:         return "Invalid file path";
  407880:	4b13      	ldr	r3, [pc, #76]	; (4078d0 <inv_error_str+0xe0>)
  407882:	e004      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_IMAGE_TYPE:   return "Unknown image type";
  407884:	4b13      	ldr	r3, [pc, #76]	; (4078d4 <inv_error_str+0xe4>)
  407886:	e002      	b.n	40788e <inv_error_str+0x9e>
	case INV_ERROR_WATCHDOG:     return "Watchdog error";
  407888:	4b13      	ldr	r3, [pc, #76]	; (4078d8 <inv_error_str+0xe8>)
  40788a:	e000      	b.n	40788e <inv_error_str+0x9e>
	default:                     return "Unknown error";
  40788c:	4b13      	ldr	r3, [pc, #76]	; (4078dc <inv_error_str+0xec>)
	}
  40788e:	4618      	mov	r0, r3
  407890:	370c      	adds	r7, #12
  407892:	46bd      	mov	sp, r7
  407894:	f85d 7b04 	ldr.w	r7, [sp], #4
  407898:	4770      	bx	lr
  40789a:	bf00      	nop
  40789c:	004137a8 	.word	0x004137a8
  4078a0:	004137b0 	.word	0x004137b0
  4078a4:	004137c4 	.word	0x004137c4
  4078a8:	004137d4 	.word	0x004137d4
  4078ac:	004137e4 	.word	0x004137e4
  4078b0:	00413810 	.word	0x00413810
  4078b4:	00413824 	.word	0x00413824
  4078b8:	00413840 	.word	0x00413840
  4078bc:	00413854 	.word	0x00413854
  4078c0:	00413864 	.word	0x00413864
  4078c4:	00413874 	.word	0x00413874
  4078c8:	00413888 	.word	0x00413888
  4078cc:	0041389c 	.word	0x0041389c
  4078d0:	004138b0 	.word	0x004138b0
  4078d4:	004138c4 	.word	0x004138c4
  4078d8:	004138d8 	.word	0x004138d8
  4078dc:	004138e8 	.word	0x004138e8

004078e0 <inv_msg_setup>:
	(void)level, (void)str, (void)ap;
#endif
}

void inv_msg_setup(int level, inv_msg_printer_t printer)
{
  4078e0:	b480      	push	{r7}
  4078e2:	b083      	sub	sp, #12
  4078e4:	af00      	add	r7, sp, #0
  4078e6:	6078      	str	r0, [r7, #4]
  4078e8:	6039      	str	r1, [r7, #0]
	msg_level   = level;
  4078ea:	4a0c      	ldr	r2, [pc, #48]	; (40791c <inv_msg_setup+0x3c>)
  4078ec:	687b      	ldr	r3, [r7, #4]
  4078ee:	6013      	str	r3, [r2, #0]
	if (level < INV_MSG_LEVEL_OFF)
  4078f0:	687b      	ldr	r3, [r7, #4]
  4078f2:	2b00      	cmp	r3, #0
  4078f4:	da03      	bge.n	4078fe <inv_msg_setup+0x1e>
		msg_level = INV_MSG_LEVEL_OFF;
  4078f6:	4b09      	ldr	r3, [pc, #36]	; (40791c <inv_msg_setup+0x3c>)
  4078f8:	2200      	movs	r2, #0
  4078fa:	601a      	str	r2, [r3, #0]
  4078fc:	e005      	b.n	40790a <inv_msg_setup+0x2a>
	else if (level > INV_MSG_LEVEL_MAX)
  4078fe:	687b      	ldr	r3, [r7, #4]
  407900:	2b06      	cmp	r3, #6
  407902:	dd02      	ble.n	40790a <inv_msg_setup+0x2a>
		msg_level = INV_MSG_LEVEL_MAX;
  407904:	4b05      	ldr	r3, [pc, #20]	; (40791c <inv_msg_setup+0x3c>)
  407906:	2206      	movs	r2, #6
  407908:	601a      	str	r2, [r3, #0]
	msg_printer = printer;
  40790a:	4a05      	ldr	r2, [pc, #20]	; (407920 <inv_msg_setup+0x40>)
  40790c:	683b      	ldr	r3, [r7, #0]
  40790e:	6013      	str	r3, [r2, #0]
}
  407910:	bf00      	nop
  407912:	370c      	adds	r7, #12
  407914:	46bd      	mov	sp, r7
  407916:	f85d 7b04 	ldr.w	r7, [sp], #4
  40791a:	4770      	bx	lr
  40791c:	20004618 	.word	0x20004618
  407920:	2000461c 	.word	0x2000461c

00407924 <inv_msg>:

void inv_msg(int level, const char * str, ...)
{
  407924:	b40e      	push	{r1, r2, r3}
  407926:	b580      	push	{r7, lr}
  407928:	b085      	sub	sp, #20
  40792a:	af00      	add	r7, sp, #0
  40792c:	6078      	str	r0, [r7, #4]
	if(level && level <= msg_level && msg_printer) {
  40792e:	687b      	ldr	r3, [r7, #4]
  407930:	2b00      	cmp	r3, #0
  407932:	d011      	beq.n	407958 <inv_msg+0x34>
  407934:	4b0c      	ldr	r3, [pc, #48]	; (407968 <inv_msg+0x44>)
  407936:	681b      	ldr	r3, [r3, #0]
  407938:	687a      	ldr	r2, [r7, #4]
  40793a:	429a      	cmp	r2, r3
  40793c:	dc0c      	bgt.n	407958 <inv_msg+0x34>
  40793e:	4b0b      	ldr	r3, [pc, #44]	; (40796c <inv_msg+0x48>)
  407940:	681b      	ldr	r3, [r3, #0]
  407942:	2b00      	cmp	r3, #0
  407944:	d008      	beq.n	407958 <inv_msg+0x34>
		va_list ap;
		va_start(ap, str);
  407946:	f107 0320 	add.w	r3, r7, #32
  40794a:	60fb      	str	r3, [r7, #12]
		msg_printer(level, str, ap);
  40794c:	4b07      	ldr	r3, [pc, #28]	; (40796c <inv_msg+0x48>)
  40794e:	681b      	ldr	r3, [r3, #0]
  407950:	68fa      	ldr	r2, [r7, #12]
  407952:	69f9      	ldr	r1, [r7, #28]
  407954:	6878      	ldr	r0, [r7, #4]
  407956:	4798      	blx	r3
		va_end(ap);
	}
}
  407958:	bf00      	nop
  40795a:	3714      	adds	r7, #20
  40795c:	46bd      	mov	sp, r7
  40795e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
  407962:	b003      	add	sp, #12
  407964:	4770      	bx	lr
  407966:	bf00      	nop
  407968:	20004618 	.word	0x20004618
  40796c:	2000461c 	.word	0x2000461c

00407970 <osc_enable>:
{
  407970:	b580      	push	{r7, lr}
  407972:	b082      	sub	sp, #8
  407974:	af00      	add	r7, sp, #0
  407976:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407978:	687b      	ldr	r3, [r7, #4]
  40797a:	2b07      	cmp	r3, #7
  40797c:	d831      	bhi.n	4079e2 <osc_enable+0x72>
  40797e:	a201      	add	r2, pc, #4	; (adr r2, 407984 <osc_enable+0x14>)
  407980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407984:	004079e1 	.word	0x004079e1
  407988:	004079a5 	.word	0x004079a5
  40798c:	004079ad 	.word	0x004079ad
  407990:	004079b5 	.word	0x004079b5
  407994:	004079bd 	.word	0x004079bd
  407998:	004079c5 	.word	0x004079c5
  40799c:	004079cd 	.word	0x004079cd
  4079a0:	004079d7 	.word	0x004079d7
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4079a4:	2000      	movs	r0, #0
  4079a6:	4b11      	ldr	r3, [pc, #68]	; (4079ec <osc_enable+0x7c>)
  4079a8:	4798      	blx	r3
		break;
  4079aa:	e01a      	b.n	4079e2 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4079ac:	2001      	movs	r0, #1
  4079ae:	4b0f      	ldr	r3, [pc, #60]	; (4079ec <osc_enable+0x7c>)
  4079b0:	4798      	blx	r3
		break;
  4079b2:	e016      	b.n	4079e2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4079b4:	2000      	movs	r0, #0
  4079b6:	4b0e      	ldr	r3, [pc, #56]	; (4079f0 <osc_enable+0x80>)
  4079b8:	4798      	blx	r3
		break;
  4079ba:	e012      	b.n	4079e2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_16_MHz);
  4079bc:	2010      	movs	r0, #16
  4079be:	4b0c      	ldr	r3, [pc, #48]	; (4079f0 <osc_enable+0x80>)
  4079c0:	4798      	blx	r3
		break;
  4079c2:	e00e      	b.n	4079e2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_24_MHz);
  4079c4:	2020      	movs	r0, #32
  4079c6:	4b0a      	ldr	r3, [pc, #40]	; (4079f0 <osc_enable+0x80>)
  4079c8:	4798      	blx	r3
		break;
  4079ca:	e00a      	b.n	4079e2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4079cc:	213e      	movs	r1, #62	; 0x3e
  4079ce:	2000      	movs	r0, #0
  4079d0:	4b08      	ldr	r3, [pc, #32]	; (4079f4 <osc_enable+0x84>)
  4079d2:	4798      	blx	r3
		break;
  4079d4:	e005      	b.n	4079e2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4079d6:	213e      	movs	r1, #62	; 0x3e
  4079d8:	2001      	movs	r0, #1
  4079da:	4b06      	ldr	r3, [pc, #24]	; (4079f4 <osc_enable+0x84>)
  4079dc:	4798      	blx	r3
		break;
  4079de:	e000      	b.n	4079e2 <osc_enable+0x72>
		break;
  4079e0:	bf00      	nop
}
  4079e2:	bf00      	nop
  4079e4:	3708      	adds	r7, #8
  4079e6:	46bd      	mov	sp, r7
  4079e8:	bd80      	pop	{r7, pc}
  4079ea:	bf00      	nop
  4079ec:	004088bd 	.word	0x004088bd
  4079f0:	00408929 	.word	0x00408929
  4079f4:	00408999 	.word	0x00408999

004079f8 <osc_is_ready>:
{
  4079f8:	b580      	push	{r7, lr}
  4079fa:	b082      	sub	sp, #8
  4079fc:	af00      	add	r7, sp, #0
  4079fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407a00:	687b      	ldr	r3, [r7, #4]
  407a02:	2b07      	cmp	r3, #7
  407a04:	d826      	bhi.n	407a54 <osc_is_ready+0x5c>
  407a06:	a201      	add	r2, pc, #4	; (adr r2, 407a0c <osc_is_ready+0x14>)
  407a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407a0c:	00407a2d 	.word	0x00407a2d
  407a10:	00407a31 	.word	0x00407a31
  407a14:	00407a31 	.word	0x00407a31
  407a18:	00407a43 	.word	0x00407a43
  407a1c:	00407a43 	.word	0x00407a43
  407a20:	00407a43 	.word	0x00407a43
  407a24:	00407a43 	.word	0x00407a43
  407a28:	00407a43 	.word	0x00407a43
		return 1;
  407a2c:	2301      	movs	r3, #1
  407a2e:	e012      	b.n	407a56 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  407a30:	4b0b      	ldr	r3, [pc, #44]	; (407a60 <osc_is_ready+0x68>)
  407a32:	4798      	blx	r3
  407a34:	4603      	mov	r3, r0
  407a36:	2b00      	cmp	r3, #0
  407a38:	bf14      	ite	ne
  407a3a:	2301      	movne	r3, #1
  407a3c:	2300      	moveq	r3, #0
  407a3e:	b2db      	uxtb	r3, r3
  407a40:	e009      	b.n	407a56 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  407a42:	4b08      	ldr	r3, [pc, #32]	; (407a64 <osc_is_ready+0x6c>)
  407a44:	4798      	blx	r3
  407a46:	4603      	mov	r3, r0
  407a48:	2b00      	cmp	r3, #0
  407a4a:	bf14      	ite	ne
  407a4c:	2301      	movne	r3, #1
  407a4e:	2300      	moveq	r3, #0
  407a50:	b2db      	uxtb	r3, r3
  407a52:	e000      	b.n	407a56 <osc_is_ready+0x5e>
	return 0;
  407a54:	2300      	movs	r3, #0
}
  407a56:	4618      	mov	r0, r3
  407a58:	3708      	adds	r7, #8
  407a5a:	46bd      	mov	sp, r7
  407a5c:	bd80      	pop	{r7, pc}
  407a5e:	bf00      	nop
  407a60:	004088f5 	.word	0x004088f5
  407a64:	00408a11 	.word	0x00408a11

00407a68 <osc_get_rate>:
{
  407a68:	b480      	push	{r7}
  407a6a:	b083      	sub	sp, #12
  407a6c:	af00      	add	r7, sp, #0
  407a6e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407a70:	687b      	ldr	r3, [r7, #4]
  407a72:	2b07      	cmp	r3, #7
  407a74:	d825      	bhi.n	407ac2 <osc_get_rate+0x5a>
  407a76:	a201      	add	r2, pc, #4	; (adr r2, 407a7c <osc_get_rate+0x14>)
  407a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407a7c:	00407a9d 	.word	0x00407a9d
  407a80:	00407aa3 	.word	0x00407aa3
  407a84:	00407aa9 	.word	0x00407aa9
  407a88:	00407aaf 	.word	0x00407aaf
  407a8c:	00407ab3 	.word	0x00407ab3
  407a90:	00407ab7 	.word	0x00407ab7
  407a94:	00407abb 	.word	0x00407abb
  407a98:	00407abf 	.word	0x00407abf
		return OSC_SLCK_32K_RC_HZ;
  407a9c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  407aa0:	e010      	b.n	407ac4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  407aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407aa6:	e00d      	b.n	407ac4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  407aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407aac:	e00a      	b.n	407ac4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  407aae:	4b08      	ldr	r3, [pc, #32]	; (407ad0 <osc_get_rate+0x68>)
  407ab0:	e008      	b.n	407ac4 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  407ab2:	4b08      	ldr	r3, [pc, #32]	; (407ad4 <osc_get_rate+0x6c>)
  407ab4:	e006      	b.n	407ac4 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  407ab6:	4b08      	ldr	r3, [pc, #32]	; (407ad8 <osc_get_rate+0x70>)
  407ab8:	e004      	b.n	407ac4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  407aba:	2300      	movs	r3, #0
  407abc:	e002      	b.n	407ac4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  407abe:	2300      	movs	r3, #0
  407ac0:	e000      	b.n	407ac4 <osc_get_rate+0x5c>
	return 0;
  407ac2:	2300      	movs	r3, #0
}
  407ac4:	4618      	mov	r0, r3
  407ac6:	370c      	adds	r7, #12
  407ac8:	46bd      	mov	sp, r7
  407aca:	f85d 7b04 	ldr.w	r7, [sp], #4
  407ace:	4770      	bx	lr
  407ad0:	007a1200 	.word	0x007a1200
  407ad4:	00f42400 	.word	0x00f42400
  407ad8:	016e3600 	.word	0x016e3600

00407adc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  407adc:	b580      	push	{r7, lr}
  407ade:	b082      	sub	sp, #8
  407ae0:	af00      	add	r7, sp, #0
  407ae2:	4603      	mov	r3, r0
  407ae4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  407ae6:	bf00      	nop
  407ae8:	79fb      	ldrb	r3, [r7, #7]
  407aea:	4618      	mov	r0, r3
  407aec:	4b05      	ldr	r3, [pc, #20]	; (407b04 <osc_wait_ready+0x28>)
  407aee:	4798      	blx	r3
  407af0:	4603      	mov	r3, r0
  407af2:	f083 0301 	eor.w	r3, r3, #1
  407af6:	b2db      	uxtb	r3, r3
  407af8:	2b00      	cmp	r3, #0
  407afa:	d1f5      	bne.n	407ae8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  407afc:	bf00      	nop
  407afe:	3708      	adds	r7, #8
  407b00:	46bd      	mov	sp, r7
  407b02:	bd80      	pop	{r7, pc}
  407b04:	004079f9 	.word	0x004079f9

00407b08 <pll_config_init>:
 * \note The SAMG PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  407b08:	b580      	push	{r7, lr}
  407b0a:	b086      	sub	sp, #24
  407b0c:	af00      	add	r7, sp, #0
  407b0e:	60f8      	str	r0, [r7, #12]
  407b10:	607a      	str	r2, [r7, #4]
  407b12:	603b      	str	r3, [r7, #0]
  407b14:	460b      	mov	r3, r1
  407b16:	72fb      	strb	r3, [r7, #11]

	Assert(e_src < PLL_NR_SOURCES);
	Assert(ul_div < 2);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  407b18:	7afb      	ldrb	r3, [r7, #11]
  407b1a:	4618      	mov	r0, r3
  407b1c:	4b0d      	ldr	r3, [pc, #52]	; (407b54 <pll_config_init+0x4c>)
  407b1e:	4798      	blx	r3
  407b20:	4602      	mov	r2, r0
  407b22:	687b      	ldr	r3, [r7, #4]
  407b24:	fbb2 f3f3 	udiv	r3, r2, r3
  407b28:	617b      	str	r3, [r7, #20]

	vco_hz *= ul_mul;
  407b2a:	697b      	ldr	r3, [r7, #20]
  407b2c:	683a      	ldr	r2, [r7, #0]
  407b2e:	fb02 f303 	mul.w	r3, r2, r3
  407b32:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= (PLL_OUTPUT_MIN_HZ - (PLL_OUTPUT_MIN_HZ >> 6)));
	Assert(vco_hz <= (PLL_OUTPUT_MAX_HZ + (PLL_OUTPUT_MAX_HZ >> 6)));

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_PLLAEN(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  407b34:	683b      	ldr	r3, [r7, #0]
  407b36:	3b01      	subs	r3, #1
  407b38:	041a      	lsls	r2, r3, #16
  407b3a:	4b07      	ldr	r3, [pc, #28]	; (407b58 <pll_config_init+0x50>)
  407b3c:	4013      	ands	r3, r2
  407b3e:	687a      	ldr	r2, [r7, #4]
  407b40:	b2d2      	uxtb	r2, r2
  407b42:	4313      	orrs	r3, r2
  407b44:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  407b48:	68fb      	ldr	r3, [r7, #12]
  407b4a:	601a      	str	r2, [r3, #0]
}
  407b4c:	bf00      	nop
  407b4e:	3718      	adds	r7, #24
  407b50:	46bd      	mov	sp, r7
  407b52:	bd80      	pop	{r7, pc}
  407b54:	00407a69 	.word	0x00407a69
  407b58:	1fff0000 	.word	0x1fff0000

00407b5c <pll_enable>:
#endif
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  407b5c:	b580      	push	{r7, lr}
  407b5e:	b082      	sub	sp, #8
  407b60:	af00      	add	r7, sp, #0
  407b62:	6078      	str	r0, [r7, #4]
  407b64:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  407b66:	683b      	ldr	r3, [r7, #0]
  407b68:	2b00      	cmp	r3, #0
  407b6a:	d106      	bne.n	407b7a <pll_enable+0x1e>
		pmc_disable_pllack(); // Always stop PLL first!
  407b6c:	4b08      	ldr	r3, [pc, #32]	; (407b90 <pll_enable+0x34>)
  407b6e:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  407b70:	4a08      	ldr	r2, [pc, #32]	; (407b94 <pll_enable+0x38>)
  407b72:	687b      	ldr	r3, [r7, #4]
  407b74:	681b      	ldr	r3, [r3, #0]
  407b76:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck(); // Always stop PLL first!
		PMC->CKGR_PLLBR = p_cfg->ctrl;
#endif
	}
}
  407b78:	e005      	b.n	407b86 <pll_enable+0x2a>
		pmc_disable_pllbck(); // Always stop PLL first!
  407b7a:	4b07      	ldr	r3, [pc, #28]	; (407b98 <pll_enable+0x3c>)
  407b7c:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  407b7e:	4a05      	ldr	r2, [pc, #20]	; (407b94 <pll_enable+0x38>)
  407b80:	687b      	ldr	r3, [r7, #4]
  407b82:	681b      	ldr	r3, [r3, #0]
  407b84:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  407b86:	bf00      	nop
  407b88:	3708      	adds	r7, #8
  407b8a:	46bd      	mov	sp, r7
  407b8c:	bd80      	pop	{r7, pc}
  407b8e:	bf00      	nop
  407b90:	00408a2d 	.word	0x00408a2d
  407b94:	400e0400 	.word	0x400e0400
  407b98:	00408a61 	.word	0x00408a61

00407b9c <pll_is_locked>:
#endif
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  407b9c:	b580      	push	{r7, lr}
  407b9e:	b082      	sub	sp, #8
  407ba0:	af00      	add	r7, sp, #0
  407ba2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  407ba4:	687b      	ldr	r3, [r7, #4]
  407ba6:	2b00      	cmp	r3, #0
  407ba8:	d103      	bne.n	407bb2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  407baa:	4b08      	ldr	r3, [pc, #32]	; (407bcc <pll_is_locked+0x30>)
  407bac:	4798      	blx	r3
  407bae:	4603      	mov	r3, r0
  407bb0:	e007      	b.n	407bc2 <pll_is_locked+0x26>
#if SAMG55
	} else if (ul_pll_id == PLLB_ID) {
  407bb2:	687b      	ldr	r3, [r7, #4]
  407bb4:	2b01      	cmp	r3, #1
  407bb6:	d103      	bne.n	407bc0 <pll_is_locked+0x24>
		return pmc_is_locked_pllbck();
  407bb8:	4b05      	ldr	r3, [pc, #20]	; (407bd0 <pll_is_locked+0x34>)
  407bba:	4798      	blx	r3
  407bbc:	4603      	mov	r3, r0
  407bbe:	e000      	b.n	407bc2 <pll_is_locked+0x26>
#endif
	} else {
		return 0;
  407bc0:	2300      	movs	r3, #0
	}
}
  407bc2:	4618      	mov	r0, r3
  407bc4:	3708      	adds	r7, #8
  407bc6:	46bd      	mov	sp, r7
  407bc8:	bd80      	pop	{r7, pc}
  407bca:	bf00      	nop
  407bcc:	00408a45 	.word	0x00408a45
  407bd0:	00408a79 	.word	0x00408a79

00407bd4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  407bd4:	b580      	push	{r7, lr}
  407bd6:	b082      	sub	sp, #8
  407bd8:	af00      	add	r7, sp, #0
  407bda:	4603      	mov	r3, r0
  407bdc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  407bde:	79fb      	ldrb	r3, [r7, #7]
  407be0:	3300      	adds	r3, #0
  407be2:	2b01      	cmp	r3, #1
  407be4:	d808      	bhi.n	407bf8 <pll_enable_source+0x24>
	case PLL_SRC_SLCK_RC:
	case PLL_SRC_SLCK_XTAL:
		osc_enable(e_src);
  407be6:	79fb      	ldrb	r3, [r7, #7]
  407be8:	4618      	mov	r0, r3
  407bea:	4b06      	ldr	r3, [pc, #24]	; (407c04 <pll_enable_source+0x30>)
  407bec:	4798      	blx	r3
		osc_wait_ready(e_src);
  407bee:	79fb      	ldrb	r3, [r7, #7]
  407bf0:	4618      	mov	r0, r3
  407bf2:	4b05      	ldr	r3, [pc, #20]	; (407c08 <pll_enable_source+0x34>)
  407bf4:	4798      	blx	r3
		break;
  407bf6:	e000      	b.n	407bfa <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  407bf8:	bf00      	nop
	}
}
  407bfa:	bf00      	nop
  407bfc:	3708      	adds	r7, #8
  407bfe:	46bd      	mov	sp, r7
  407c00:	bd80      	pop	{r7, pc}
  407c02:	bf00      	nop
  407c04:	00407971 	.word	0x00407971
  407c08:	00407add 	.word	0x00407add

00407c0c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  407c0c:	b580      	push	{r7, lr}
  407c0e:	b082      	sub	sp, #8
  407c10:	af00      	add	r7, sp, #0
  407c12:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  407c14:	bf00      	nop
  407c16:	6878      	ldr	r0, [r7, #4]
  407c18:	4b04      	ldr	r3, [pc, #16]	; (407c2c <pll_wait_for_lock+0x20>)
  407c1a:	4798      	blx	r3
  407c1c:	4603      	mov	r3, r0
  407c1e:	2b00      	cmp	r3, #0
  407c20:	d0f9      	beq.n	407c16 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  407c22:	2300      	movs	r3, #0
}
  407c24:	4618      	mov	r0, r3
  407c26:	3708      	adds	r7, #8
  407c28:	46bd      	mov	sp, r7
  407c2a:	bd80      	pop	{r7, pc}
  407c2c:	00407b9d 	.word	0x00407b9d

00407c30 <sysclk_get_main_hz>:
{
  407c30:	b580      	push	{r7, lr}
  407c32:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  407c34:	2001      	movs	r0, #1
  407c36:	4b04      	ldr	r3, [pc, #16]	; (407c48 <sysclk_get_main_hz+0x18>)
  407c38:	4798      	blx	r3
  407c3a:	4602      	mov	r2, r0
  407c3c:	f640 634e 	movw	r3, #3662	; 0xe4e
  407c40:	fb03 f302 	mul.w	r3, r3, r2
}
  407c44:	4618      	mov	r0, r3
  407c46:	bd80      	pop	{r7, pc}
  407c48:	00407a69 	.word	0x00407a69

00407c4c <sysclk_get_cpu_hz>:
{
  407c4c:	b580      	push	{r7, lr}
  407c4e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  407c50:	4b02      	ldr	r3, [pc, #8]	; (407c5c <sysclk_get_cpu_hz+0x10>)
  407c52:	4798      	blx	r3
  407c54:	4603      	mov	r3, r0
}
  407c56:	4618      	mov	r0, r3
  407c58:	bd80      	pop	{r7, pc}
  407c5a:	bf00      	nop
  407c5c:	00407c31 	.word	0x00407c31

00407c60 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  407c60:	b590      	push	{r4, r7, lr}
  407c62:	b0a7      	sub	sp, #156	; 0x9c
  407c64:	af02      	add	r7, sp, #8
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  407c66:	4821      	ldr	r0, [pc, #132]	; (407cec <sysclk_init+0x8c>)
  407c68:	4b21      	ldr	r3, [pc, #132]	; (407cf0 <sysclk_init+0x90>)
  407c6a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  407c6c:	2001      	movs	r0, #1
  407c6e:	4b21      	ldr	r3, [pc, #132]	; (407cf4 <sysclk_init+0x94>)
  407c70:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  407c72:	f107 0008 	add.w	r0, r7, #8
  407c76:	f640 634e 	movw	r3, #3662	; 0xe4e
  407c7a:	2201      	movs	r2, #1
  407c7c:	2101      	movs	r1, #1
  407c7e:	4c1e      	ldr	r4, [pc, #120]	; (407cf8 <sysclk_init+0x98>)
  407c80:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  407c82:	f107 0308 	add.w	r3, r7, #8
  407c86:	2100      	movs	r1, #0
  407c88:	4618      	mov	r0, r3
  407c8a:	4b1c      	ldr	r3, [pc, #112]	; (407cfc <sysclk_init+0x9c>)
  407c8c:	4798      	blx	r3
		pll_wait_for_lock(0);
  407c8e:	2000      	movs	r0, #0
  407c90:	4b1b      	ldr	r3, [pc, #108]	; (407d00 <sysclk_init+0xa0>)
  407c92:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  407c94:	2000      	movs	r0, #0
  407c96:	4b1b      	ldr	r3, [pc, #108]	; (407d04 <sysclk_init+0xa4>)
  407c98:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  407c9a:	4b1b      	ldr	r3, [pc, #108]	; (407d08 <sysclk_init+0xa8>)
  407c9c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  407c9e:	4b1b      	ldr	r3, [pc, #108]	; (407d0c <sysclk_init+0xac>)
  407ca0:	4798      	blx	r3
  407ca2:	4603      	mov	r3, r0
  407ca4:	4618      	mov	r0, r3
  407ca6:	4b12      	ldr	r3, [pc, #72]	; (407cf0 <sysclk_init+0x90>)
  407ca8:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  407caa:	4b19      	ldr	r3, [pc, #100]	; (407d10 <sysclk_init+0xb0>)
  407cac:	681b      	ldr	r3, [r3, #0]
  407cae:	4a19      	ldr	r2, [pc, #100]	; (407d14 <sysclk_init+0xb4>)
  407cb0:	4293      	cmp	r3, r2
  407cb2:	d817      	bhi.n	407ce4 <sysclk_init+0x84>
	(SystemCoreClock >= (CHIP_FREQ_CPU_MAX - (CHIP_FREQ_CPU_MAX >> 3)))) {
  407cb4:	4b16      	ldr	r3, [pc, #88]	; (407d10 <sysclk_init+0xb0>)
  407cb6:	681b      	ldr	r3, [r3, #0]
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  407cb8:	4a17      	ldr	r2, [pc, #92]	; (407d18 <sysclk_init+0xb8>)
  407cba:	4293      	cmp	r3, r2
  407cbc:	d912      	bls.n	407ce4 <sysclk_init+0x84>
		/* Get the trim value from unique ID area */
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  407cbe:	f107 020c 	add.w	r2, r7, #12
  407cc2:	2320      	movs	r3, #32
  407cc4:	9300      	str	r3, [sp, #0]
  407cc6:	4613      	mov	r3, r2
  407cc8:	220f      	movs	r2, #15
  407cca:	210e      	movs	r1, #14
  407ccc:	4813      	ldr	r0, [pc, #76]	; (407d1c <sysclk_init+0xbc>)
  407cce:	4c14      	ldr	r4, [pc, #80]	; (407d20 <sysclk_init+0xc0>)
  407cd0:	47a0      	blx	r4
		unique_id, 32);
		
		/* According to Atmel's support, the trim value to reach 120MHz
		is provided in MSB of unique_id[16] instead of LSB */
		trim_value = (unique_id[16] & 0xFFFF0000) >> 16;
  407cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407cd4:	0c1b      	lsrs	r3, r3, #16
  407cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		supc_set_regulator_trim_user(SUPC, trim_value);
  407cda:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
  407cde:	4811      	ldr	r0, [pc, #68]	; (407d24 <sysclk_init+0xc4>)
  407ce0:	4b11      	ldr	r3, [pc, #68]	; (407d28 <sysclk_init+0xc8>)
  407ce2:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  407ce4:	bf00      	nop
  407ce6:	3794      	adds	r7, #148	; 0x94
  407ce8:	46bd      	mov	sp, r7
  407cea:	bd90      	pop	{r4, r7, pc}
  407cec:	07270e00 	.word	0x07270e00
  407cf0:	004099ed 	.word	0x004099ed
  407cf4:	00407bd5 	.word	0x00407bd5
  407cf8:	00407b09 	.word	0x00407b09
  407cfc:	00407b5d 	.word	0x00407b5d
  407d00:	00407c0d 	.word	0x00407c0d
  407d04:	00408839 	.word	0x00408839
  407d08:	004098c9 	.word	0x004098c9
  407d0c:	00407c4d 	.word	0x00407c4d
  407d10:	20002510 	.word	0x20002510
  407d14:	080befc0 	.word	0x080befc0
  407d18:	06422c3f 	.word	0x06422c3f
  407d1c:	400e0a00 	.word	0x400e0a00
  407d20:	20000001 	.word	0x20000001
  407d24:	400e1410 	.word	0x400e1410
  407d28:	00408ead 	.word	0x00408ead

00407d2c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  407d2c:	b480      	push	{r7}
  407d2e:	b083      	sub	sp, #12
  407d30:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  407d32:	f3ef 8310 	mrs	r3, PRIMASK
  407d36:	607b      	str	r3, [r7, #4]
  return(result);
  407d38:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  407d3a:	2b00      	cmp	r3, #0
  407d3c:	bf0c      	ite	eq
  407d3e:	2301      	moveq	r3, #1
  407d40:	2300      	movne	r3, #0
  407d42:	b2db      	uxtb	r3, r3
  407d44:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  407d46:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  407d48:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  407d4c:	4b04      	ldr	r3, [pc, #16]	; (407d60 <cpu_irq_save+0x34>)
  407d4e:	2200      	movs	r2, #0
  407d50:	701a      	strb	r2, [r3, #0]
	return flags;
  407d52:	683b      	ldr	r3, [r7, #0]
}
  407d54:	4618      	mov	r0, r3
  407d56:	370c      	adds	r7, #12
  407d58:	46bd      	mov	sp, r7
  407d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d5e:	4770      	bx	lr
  407d60:	2000250c 	.word	0x2000250c

00407d64 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  407d64:	b480      	push	{r7}
  407d66:	b083      	sub	sp, #12
  407d68:	af00      	add	r7, sp, #0
  407d6a:	6078      	str	r0, [r7, #4]
	return (flags);
  407d6c:	687b      	ldr	r3, [r7, #4]
  407d6e:	2b00      	cmp	r3, #0
  407d70:	bf14      	ite	ne
  407d72:	2301      	movne	r3, #1
  407d74:	2300      	moveq	r3, #0
  407d76:	b2db      	uxtb	r3, r3
}
  407d78:	4618      	mov	r0, r3
  407d7a:	370c      	adds	r7, #12
  407d7c:	46bd      	mov	sp, r7
  407d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d82:	4770      	bx	lr

00407d84 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  407d84:	b580      	push	{r7, lr}
  407d86:	b082      	sub	sp, #8
  407d88:	af00      	add	r7, sp, #0
  407d8a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  407d8c:	6878      	ldr	r0, [r7, #4]
  407d8e:	4b07      	ldr	r3, [pc, #28]	; (407dac <cpu_irq_restore+0x28>)
  407d90:	4798      	blx	r3
  407d92:	4603      	mov	r3, r0
  407d94:	2b00      	cmp	r3, #0
  407d96:	d005      	beq.n	407da4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  407d98:	4b05      	ldr	r3, [pc, #20]	; (407db0 <cpu_irq_restore+0x2c>)
  407d9a:	2201      	movs	r2, #1
  407d9c:	701a      	strb	r2, [r3, #0]
  407d9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  407da2:	b662      	cpsie	i
}
  407da4:	bf00      	nop
  407da6:	3708      	adds	r7, #8
  407da8:	46bd      	mov	sp, r7
  407daa:	bd80      	pop	{r7, pc}
  407dac:	00407d65 	.word	0x00407d65
  407db0:	2000250c 	.word	0x2000250c

00407db4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
  407db4:	b580      	push	{r7, lr}
  407db6:	b084      	sub	sp, #16
  407db8:	af00      	add	r7, sp, #0
  407dba:	60f8      	str	r0, [r7, #12]
  407dbc:	60b9      	str	r1, [r7, #8]
  407dbe:	607a      	str	r2, [r7, #4]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
  407dc0:	687b      	ldr	r3, [r7, #4]
  407dc2:	021b      	lsls	r3, r3, #8
  407dc4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
  407dc8:	68bb      	ldr	r3, [r7, #8]
  407dca:	4313      	orrs	r3, r2
  407dcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  407dd0:	4619      	mov	r1, r3
  407dd2:	68f8      	ldr	r0, [r7, #12]
  407dd4:	4b03      	ldr	r3, [pc, #12]	; (407de4 <efc_init+0x30>)
  407dd6:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif
	return EFC_RC_OK;
  407dd8:	2300      	movs	r3, #0
}
  407dda:	4618      	mov	r0, r3
  407ddc:	3710      	adds	r7, #16
  407dde:	46bd      	mov	sp, r7
  407de0:	bd80      	pop	{r7, pc}
  407de2:	bf00      	nop
  407de4:	200000a5 	.word	0x200000a5

00407de8 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  407de8:	b580      	push	{r7, lr}
  407dea:	b086      	sub	sp, #24
  407dec:	af00      	add	r7, sp, #0
  407dee:	60f8      	str	r0, [r7, #12]
  407df0:	60b9      	str	r1, [r7, #8]
  407df2:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  407df4:	68bb      	ldr	r3, [r7, #8]
  407df6:	2b0e      	cmp	r3, #14
  407df8:	d002      	beq.n	407e00 <efc_perform_command+0x18>
  407dfa:	68bb      	ldr	r3, [r7, #8]
  407dfc:	2b0f      	cmp	r3, #15
  407dfe:	d102      	bne.n	407e06 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
  407e00:	f04f 33ff 	mov.w	r3, #4294967295
  407e04:	e016      	b.n	407e34 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
  407e06:	4b0d      	ldr	r3, [pc, #52]	; (407e3c <efc_perform_command+0x54>)
  407e08:	4798      	blx	r3
  407e0a:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  407e0c:	687b      	ldr	r3, [r7, #4]
  407e0e:	021b      	lsls	r3, r3, #8
  407e10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  407e14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
  407e18:	68ba      	ldr	r2, [r7, #8]
  407e1a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  407e1c:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
  407e1e:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  407e22:	4619      	mov	r1, r3
  407e24:	68f8      	ldr	r0, [r7, #12]
  407e26:	4b06      	ldr	r3, [pc, #24]	; (407e40 <efc_perform_command+0x58>)
  407e28:	4798      	blx	r3
  407e2a:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
  407e2c:	6978      	ldr	r0, [r7, #20]
  407e2e:	4b05      	ldr	r3, [pc, #20]	; (407e44 <efc_perform_command+0x5c>)
  407e30:	4798      	blx	r3
	return result;
  407e32:	693b      	ldr	r3, [r7, #16]
}
  407e34:	4618      	mov	r0, r3
  407e36:	3718      	adds	r7, #24
  407e38:	46bd      	mov	sp, r7
  407e3a:	bd80      	pop	{r7, pc}
  407e3c:	00407d2d 	.word	0x00407d2d
  407e40:	200000c1 	.word	0x200000c1
  407e44:	00407d85 	.word	0x00407d85

00407e48 <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
  407e48:	b480      	push	{r7}
  407e4a:	b083      	sub	sp, #12
  407e4c:	af00      	add	r7, sp, #0
  407e4e:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
  407e50:	687b      	ldr	r3, [r7, #4]
  407e52:	68db      	ldr	r3, [r3, #12]
}
  407e54:	4618      	mov	r0, r3
  407e56:	370c      	adds	r7, #12
  407e58:	46bd      	mov	sp, r7
  407e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  407e5e:	4770      	bx	lr

00407e60 <cpu_irq_save>:
{
  407e60:	b480      	push	{r7}
  407e62:	b083      	sub	sp, #12
  407e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  407e66:	f3ef 8310 	mrs	r3, PRIMASK
  407e6a:	607b      	str	r3, [r7, #4]
  return(result);
  407e6c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  407e6e:	2b00      	cmp	r3, #0
  407e70:	bf0c      	ite	eq
  407e72:	2301      	moveq	r3, #1
  407e74:	2300      	movne	r3, #0
  407e76:	b2db      	uxtb	r3, r3
  407e78:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  407e7a:	b672      	cpsid	i
  407e7c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  407e80:	4b04      	ldr	r3, [pc, #16]	; (407e94 <cpu_irq_save+0x34>)
  407e82:	2200      	movs	r2, #0
  407e84:	701a      	strb	r2, [r3, #0]
	return flags;
  407e86:	683b      	ldr	r3, [r7, #0]
}
  407e88:	4618      	mov	r0, r3
  407e8a:	370c      	adds	r7, #12
  407e8c:	46bd      	mov	sp, r7
  407e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407e92:	4770      	bx	lr
  407e94:	2000250c 	.word	0x2000250c

00407e98 <cpu_irq_is_enabled_flags>:
{
  407e98:	b480      	push	{r7}
  407e9a:	b083      	sub	sp, #12
  407e9c:	af00      	add	r7, sp, #0
  407e9e:	6078      	str	r0, [r7, #4]
	return (flags);
  407ea0:	687b      	ldr	r3, [r7, #4]
  407ea2:	2b00      	cmp	r3, #0
  407ea4:	bf14      	ite	ne
  407ea6:	2301      	movne	r3, #1
  407ea8:	2300      	moveq	r3, #0
  407eaa:	b2db      	uxtb	r3, r3
}
  407eac:	4618      	mov	r0, r3
  407eae:	370c      	adds	r7, #12
  407eb0:	46bd      	mov	sp, r7
  407eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  407eb6:	4770      	bx	lr

00407eb8 <cpu_irq_restore>:
{
  407eb8:	b580      	push	{r7, lr}
  407eba:	b082      	sub	sp, #8
  407ebc:	af00      	add	r7, sp, #0
  407ebe:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  407ec0:	6878      	ldr	r0, [r7, #4]
  407ec2:	4b07      	ldr	r3, [pc, #28]	; (407ee0 <cpu_irq_restore+0x28>)
  407ec4:	4798      	blx	r3
  407ec6:	4603      	mov	r3, r0
  407ec8:	2b00      	cmp	r3, #0
  407eca:	d005      	beq.n	407ed8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  407ecc:	4b05      	ldr	r3, [pc, #20]	; (407ee4 <cpu_irq_restore+0x2c>)
  407ece:	2201      	movs	r2, #1
  407ed0:	701a      	strb	r2, [r3, #0]
  407ed2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  407ed6:	b662      	cpsie	i
}
  407ed8:	bf00      	nop
  407eda:	3708      	adds	r7, #8
  407edc:	46bd      	mov	sp, r7
  407ede:	bd80      	pop	{r7, pc}
  407ee0:	00407e99 	.word	0x00407e99
  407ee4:	2000250c 	.word	0x2000250c

00407ee8 <sysclk_enable_peripheral_clock>:
{
  407ee8:	b580      	push	{r7, lr}
  407eea:	b082      	sub	sp, #8
  407eec:	af00      	add	r7, sp, #0
  407eee:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  407ef0:	6878      	ldr	r0, [r7, #4]
  407ef2:	4b03      	ldr	r3, [pc, #12]	; (407f00 <sysclk_enable_peripheral_clock+0x18>)
  407ef4:	4798      	blx	r3
}
  407ef6:	bf00      	nop
  407ef8:	3708      	adds	r7, #8
  407efa:	46bd      	mov	sp, r7
  407efc:	bd80      	pop	{r7, pc}
  407efe:	bf00      	nop
  407f00:	00408a95 	.word	0x00408a95

00407f04 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  407f04:	b580      	push	{r7, lr}
  407f06:	b084      	sub	sp, #16
  407f08:	af00      	add	r7, sp, #0
  407f0a:	4603      	mov	r3, r0
  407f0c:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  407f0e:	79fb      	ldrb	r3, [r7, #7]
  407f10:	4a0a      	ldr	r2, [pc, #40]	; (407f3c <sleepmgr_lock_mode+0x38>)
  407f12:	5cd3      	ldrb	r3, [r2, r3]
  407f14:	2bff      	cmp	r3, #255	; 0xff
  407f16:	d100      	bne.n	407f1a <sleepmgr_lock_mode+0x16>
		while (true) {
  407f18:	e7fe      	b.n	407f18 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  407f1a:	4b09      	ldr	r3, [pc, #36]	; (407f40 <sleepmgr_lock_mode+0x3c>)
  407f1c:	4798      	blx	r3
  407f1e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  407f20:	79fb      	ldrb	r3, [r7, #7]
  407f22:	4a06      	ldr	r2, [pc, #24]	; (407f3c <sleepmgr_lock_mode+0x38>)
  407f24:	5cd2      	ldrb	r2, [r2, r3]
  407f26:	3201      	adds	r2, #1
  407f28:	b2d1      	uxtb	r1, r2
  407f2a:	4a04      	ldr	r2, [pc, #16]	; (407f3c <sleepmgr_lock_mode+0x38>)
  407f2c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  407f2e:	68f8      	ldr	r0, [r7, #12]
  407f30:	4b04      	ldr	r3, [pc, #16]	; (407f44 <sleepmgr_lock_mode+0x40>)
  407f32:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  407f34:	bf00      	nop
  407f36:	3710      	adds	r7, #16
  407f38:	46bd      	mov	sp, r7
  407f3a:	bd80      	pop	{r7, pc}
  407f3c:	20004ad8 	.word	0x20004ad8
  407f40:	00407e61 	.word	0x00407e61
  407f44:	00407eb9 	.word	0x00407eb9

00407f48 <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  407f48:	b580      	push	{r7, lr}
  407f4a:	b082      	sub	sp, #8
  407f4c:	af00      	add	r7, sp, #0
  407f4e:	6078      	str	r0, [r7, #4]
#if SAMG55
    #define PMC_PCK_PRES_CLK_1  PMC_PCK_PRES(0)
#endif

	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
  407f50:	2000      	movs	r0, #0
  407f52:	4b4a      	ldr	r3, [pc, #296]	; (40807c <flexcom_enable+0x134>)
  407f54:	4798      	blx	r3
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  407f56:	687b      	ldr	r3, [r7, #4]
  407f58:	4a49      	ldr	r2, [pc, #292]	; (408080 <flexcom_enable+0x138>)
  407f5a:	4293      	cmp	r3, r2
  407f5c:	d10d      	bne.n	407f7a <flexcom_enable+0x32>
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
  407f5e:	2007      	movs	r0, #7
  407f60:	4b48      	ldr	r3, [pc, #288]	; (408084 <flexcom_enable+0x13c>)
  407f62:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  407f64:	2007      	movs	r0, #7
  407f66:	4b48      	ldr	r3, [pc, #288]	; (408088 <flexcom_enable+0x140>)
  407f68:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  407f6a:	2100      	movs	r1, #0
  407f6c:	2007      	movs	r0, #7
  407f6e:	4b47      	ldr	r3, [pc, #284]	; (40808c <flexcom_enable+0x144>)
  407f70:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  407f72:	2007      	movs	r0, #7
  407f74:	4b46      	ldr	r3, [pc, #280]	; (408090 <flexcom_enable+0x148>)
  407f76:	4798      	blx	r3
	} else
#endif
	{
		Assert(false);
	}
}
  407f78:	e07c      	b.n	408074 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM6) {
  407f7a:	687b      	ldr	r3, [r7, #4]
  407f7c:	4a45      	ldr	r2, [pc, #276]	; (408094 <flexcom_enable+0x14c>)
  407f7e:	4293      	cmp	r3, r2
  407f80:	d10d      	bne.n	407f9e <flexcom_enable+0x56>
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
  407f82:	2016      	movs	r0, #22
  407f84:	4b3f      	ldr	r3, [pc, #252]	; (408084 <flexcom_enable+0x13c>)
  407f86:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  407f88:	2007      	movs	r0, #7
  407f8a:	4b3f      	ldr	r3, [pc, #252]	; (408088 <flexcom_enable+0x140>)
  407f8c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  407f8e:	2100      	movs	r1, #0
  407f90:	2007      	movs	r0, #7
  407f92:	4b3e      	ldr	r3, [pc, #248]	; (40808c <flexcom_enable+0x144>)
  407f94:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  407f96:	2007      	movs	r0, #7
  407f98:	4b3d      	ldr	r3, [pc, #244]	; (408090 <flexcom_enable+0x148>)
  407f9a:	4798      	blx	r3
}
  407f9c:	e06a      	b.n	408074 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM5) {
  407f9e:	687b      	ldr	r3, [r7, #4]
  407fa0:	4a3d      	ldr	r2, [pc, #244]	; (408098 <flexcom_enable+0x150>)
  407fa2:	4293      	cmp	r3, r2
  407fa4:	d10d      	bne.n	407fc2 <flexcom_enable+0x7a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
  407fa6:	2015      	movs	r0, #21
  407fa8:	4b36      	ldr	r3, [pc, #216]	; (408084 <flexcom_enable+0x13c>)
  407faa:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  407fac:	2007      	movs	r0, #7
  407fae:	4b36      	ldr	r3, [pc, #216]	; (408088 <flexcom_enable+0x140>)
  407fb0:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  407fb2:	2100      	movs	r1, #0
  407fb4:	2007      	movs	r0, #7
  407fb6:	4b35      	ldr	r3, [pc, #212]	; (40808c <flexcom_enable+0x144>)
  407fb8:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  407fba:	2007      	movs	r0, #7
  407fbc:	4b34      	ldr	r3, [pc, #208]	; (408090 <flexcom_enable+0x148>)
  407fbe:	4798      	blx	r3
}
  407fc0:	e058      	b.n	408074 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM4) {
  407fc2:	687b      	ldr	r3, [r7, #4]
  407fc4:	4a35      	ldr	r2, [pc, #212]	; (40809c <flexcom_enable+0x154>)
  407fc6:	4293      	cmp	r3, r2
  407fc8:	d10d      	bne.n	407fe6 <flexcom_enable+0x9e>
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
  407fca:	2014      	movs	r0, #20
  407fcc:	4b2d      	ldr	r3, [pc, #180]	; (408084 <flexcom_enable+0x13c>)
  407fce:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  407fd0:	2007      	movs	r0, #7
  407fd2:	4b2d      	ldr	r3, [pc, #180]	; (408088 <flexcom_enable+0x140>)
  407fd4:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  407fd6:	2100      	movs	r1, #0
  407fd8:	2007      	movs	r0, #7
  407fda:	4b2c      	ldr	r3, [pc, #176]	; (40808c <flexcom_enable+0x144>)
  407fdc:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  407fde:	2007      	movs	r0, #7
  407fe0:	4b2b      	ldr	r3, [pc, #172]	; (408090 <flexcom_enable+0x148>)
  407fe2:	4798      	blx	r3
}
  407fe4:	e046      	b.n	408074 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM3) {
  407fe6:	687b      	ldr	r3, [r7, #4]
  407fe8:	4a2d      	ldr	r2, [pc, #180]	; (4080a0 <flexcom_enable+0x158>)
  407fea:	4293      	cmp	r3, r2
  407fec:	d10d      	bne.n	40800a <flexcom_enable+0xc2>
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
  407fee:	2013      	movs	r0, #19
  407ff0:	4b24      	ldr	r3, [pc, #144]	; (408084 <flexcom_enable+0x13c>)
  407ff2:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  407ff4:	2006      	movs	r0, #6
  407ff6:	4b24      	ldr	r3, [pc, #144]	; (408088 <flexcom_enable+0x140>)
  407ff8:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  407ffa:	2100      	movs	r1, #0
  407ffc:	2006      	movs	r0, #6
  407ffe:	4b23      	ldr	r3, [pc, #140]	; (40808c <flexcom_enable+0x144>)
  408000:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  408002:	2006      	movs	r0, #6
  408004:	4b22      	ldr	r3, [pc, #136]	; (408090 <flexcom_enable+0x148>)
  408006:	4798      	blx	r3
}
  408008:	e034      	b.n	408074 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM2) {
  40800a:	687b      	ldr	r3, [r7, #4]
  40800c:	4a25      	ldr	r2, [pc, #148]	; (4080a4 <flexcom_enable+0x15c>)
  40800e:	4293      	cmp	r3, r2
  408010:	d10d      	bne.n	40802e <flexcom_enable+0xe6>
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
  408012:	200e      	movs	r0, #14
  408014:	4b1b      	ldr	r3, [pc, #108]	; (408084 <flexcom_enable+0x13c>)
  408016:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  408018:	2006      	movs	r0, #6
  40801a:	4b1b      	ldr	r3, [pc, #108]	; (408088 <flexcom_enable+0x140>)
  40801c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40801e:	2100      	movs	r1, #0
  408020:	2006      	movs	r0, #6
  408022:	4b1a      	ldr	r3, [pc, #104]	; (40808c <flexcom_enable+0x144>)
  408024:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  408026:	2006      	movs	r0, #6
  408028:	4b19      	ldr	r3, [pc, #100]	; (408090 <flexcom_enable+0x148>)
  40802a:	4798      	blx	r3
}
  40802c:	e022      	b.n	408074 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM1) {
  40802e:	687b      	ldr	r3, [r7, #4]
  408030:	4a1d      	ldr	r2, [pc, #116]	; (4080a8 <flexcom_enable+0x160>)
  408032:	4293      	cmp	r3, r2
  408034:	d10d      	bne.n	408052 <flexcom_enable+0x10a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
  408036:	2009      	movs	r0, #9
  408038:	4b12      	ldr	r3, [pc, #72]	; (408084 <flexcom_enable+0x13c>)
  40803a:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  40803c:	2006      	movs	r0, #6
  40803e:	4b12      	ldr	r3, [pc, #72]	; (408088 <flexcom_enable+0x140>)
  408040:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  408042:	2100      	movs	r1, #0
  408044:	2006      	movs	r0, #6
  408046:	4b11      	ldr	r3, [pc, #68]	; (40808c <flexcom_enable+0x144>)
  408048:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  40804a:	2006      	movs	r0, #6
  40804c:	4b10      	ldr	r3, [pc, #64]	; (408090 <flexcom_enable+0x148>)
  40804e:	4798      	blx	r3
}
  408050:	e010      	b.n	408074 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM0) {
  408052:	687b      	ldr	r3, [r7, #4]
  408054:	4a15      	ldr	r2, [pc, #84]	; (4080ac <flexcom_enable+0x164>)
  408056:	4293      	cmp	r3, r2
  408058:	d10c      	bne.n	408074 <flexcom_enable+0x12c>
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
  40805a:	2008      	movs	r0, #8
  40805c:	4b09      	ldr	r3, [pc, #36]	; (408084 <flexcom_enable+0x13c>)
  40805e:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  408060:	2006      	movs	r0, #6
  408062:	4b09      	ldr	r3, [pc, #36]	; (408088 <flexcom_enable+0x140>)
  408064:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  408066:	2100      	movs	r1, #0
  408068:	2006      	movs	r0, #6
  40806a:	4b08      	ldr	r3, [pc, #32]	; (40808c <flexcom_enable+0x144>)
  40806c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  40806e:	2006      	movs	r0, #6
  408070:	4b07      	ldr	r3, [pc, #28]	; (408090 <flexcom_enable+0x148>)
  408072:	4798      	blx	r3
}
  408074:	bf00      	nop
  408076:	3708      	adds	r7, #8
  408078:	46bd      	mov	sp, r7
  40807a:	bd80      	pop	{r7, pc}
  40807c:	00407f05 	.word	0x00407f05
  408080:	40034000 	.word	0x40034000
  408084:	00407ee9 	.word	0x00407ee9
  408088:	00408b99 	.word	0x00408b99
  40808c:	00408b19 	.word	0x00408b19
  408090:	00408b71 	.word	0x00408b71
  408094:	40040000 	.word	0x40040000
  408098:	40008000 	.word	0x40008000
  40809c:	4001c000 	.word	0x4001c000
  4080a0:	40018000 	.word	0x40018000
  4080a4:	40024000 	.word	0x40024000
  4080a8:	40020000 	.word	0x40020000
  4080ac:	4000c000 	.word	0x4000c000

004080b0 <flexcom_set_opmode>:
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
  4080b0:	b480      	push	{r7}
  4080b2:	b083      	sub	sp, #12
  4080b4:	af00      	add	r7, sp, #0
  4080b6:	6078      	str	r0, [r7, #4]
  4080b8:	460b      	mov	r3, r1
  4080ba:	70fb      	strb	r3, [r7, #3]
	p_flexcom->FLEXCOM_MR = opmode;
  4080bc:	78fa      	ldrb	r2, [r7, #3]
  4080be:	687b      	ldr	r3, [r7, #4]
  4080c0:	601a      	str	r2, [r3, #0]
}
  4080c2:	bf00      	nop
  4080c4:	370c      	adds	r7, #12
  4080c6:	46bd      	mov	sp, r7
  4080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4080cc:	4770      	bx	lr

004080ce <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4080ce:	b480      	push	{r7}
  4080d0:	b085      	sub	sp, #20
  4080d2:	af00      	add	r7, sp, #0
  4080d4:	60f8      	str	r0, [r7, #12]
  4080d6:	60b9      	str	r1, [r7, #8]
  4080d8:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4080da:	68bb      	ldr	r3, [r7, #8]
  4080dc:	2b00      	cmp	r3, #0
  4080de:	d007      	beq.n	4080f0 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  4080e0:	68bb      	ldr	r3, [r7, #8]
  4080e2:	681a      	ldr	r2, [r3, #0]
  4080e4:	68fb      	ldr	r3, [r7, #12]
  4080e6:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  4080e8:	68bb      	ldr	r3, [r7, #8]
  4080ea:	685a      	ldr	r2, [r3, #4]
  4080ec:	68fb      	ldr	r3, [r7, #12]
  4080ee:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  4080f0:	687b      	ldr	r3, [r7, #4]
  4080f2:	2b00      	cmp	r3, #0
  4080f4:	d007      	beq.n	408106 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  4080f6:	687b      	ldr	r3, [r7, #4]
  4080f8:	681a      	ldr	r2, [r3, #0]
  4080fa:	68fb      	ldr	r3, [r7, #12]
  4080fc:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  4080fe:	687b      	ldr	r3, [r7, #4]
  408100:	685a      	ldr	r2, [r3, #4]
  408102:	68fb      	ldr	r3, [r7, #12]
  408104:	61da      	str	r2, [r3, #28]
	}
}
  408106:	bf00      	nop
  408108:	3714      	adds	r7, #20
  40810a:	46bd      	mov	sp, r7
  40810c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408110:	4770      	bx	lr

00408112 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  408112:	b480      	push	{r7}
  408114:	b085      	sub	sp, #20
  408116:	af00      	add	r7, sp, #0
  408118:	60f8      	str	r0, [r7, #12]
  40811a:	60b9      	str	r1, [r7, #8]
  40811c:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  40811e:	68bb      	ldr	r3, [r7, #8]
  408120:	2b00      	cmp	r3, #0
  408122:	d007      	beq.n	408134 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  408124:	68bb      	ldr	r3, [r7, #8]
  408126:	681a      	ldr	r2, [r3, #0]
  408128:	68fb      	ldr	r3, [r7, #12]
  40812a:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40812c:	68bb      	ldr	r3, [r7, #8]
  40812e:	685a      	ldr	r2, [r3, #4]
  408130:	68fb      	ldr	r3, [r7, #12]
  408132:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  408134:	687b      	ldr	r3, [r7, #4]
  408136:	2b00      	cmp	r3, #0
  408138:	d007      	beq.n	40814a <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  40813a:	687b      	ldr	r3, [r7, #4]
  40813c:	681a      	ldr	r2, [r3, #0]
  40813e:	68fb      	ldr	r3, [r7, #12]
  408140:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  408142:	687b      	ldr	r3, [r7, #4]
  408144:	685a      	ldr	r2, [r3, #4]
  408146:	68fb      	ldr	r3, [r7, #12]
  408148:	615a      	str	r2, [r3, #20]
	}
}
  40814a:	bf00      	nop
  40814c:	3714      	adds	r7, #20
  40814e:	46bd      	mov	sp, r7
  408150:	f85d 7b04 	ldr.w	r7, [sp], #4
  408154:	4770      	bx	lr

00408156 <pdc_rx_clear_cnt>:
 *
 * \param[out] p_pdc Device structure pointer
 */
void pdc_rx_clear_cnt(
		Pdc *p_pdc)
{
  408156:	b480      	push	{r7}
  408158:	b083      	sub	sp, #12
  40815a:	af00      	add	r7, sp, #0
  40815c:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_RNCR = 0;
  40815e:	687b      	ldr	r3, [r7, #4]
  408160:	2200      	movs	r2, #0
  408162:	615a      	str	r2, [r3, #20]
	p_pdc->PERIPH_RCR = 0;
  408164:	687b      	ldr	r3, [r7, #4]
  408166:	2200      	movs	r2, #0
  408168:	605a      	str	r2, [r3, #4]
}
  40816a:	bf00      	nop
  40816c:	370c      	adds	r7, #12
  40816e:	46bd      	mov	sp, r7
  408170:	f85d 7b04 	ldr.w	r7, [sp], #4
  408174:	4770      	bx	lr

00408176 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  408176:	b480      	push	{r7}
  408178:	b083      	sub	sp, #12
  40817a:	af00      	add	r7, sp, #0
  40817c:	6078      	str	r0, [r7, #4]
  40817e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  408180:	683a      	ldr	r2, [r7, #0]
  408182:	f240 1301 	movw	r3, #257	; 0x101
  408186:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
  408188:	687a      	ldr	r2, [r7, #4]
  40818a:	6213      	str	r3, [r2, #32]
}
  40818c:	bf00      	nop
  40818e:	370c      	adds	r7, #12
  408190:	46bd      	mov	sp, r7
  408192:	f85d 7b04 	ldr.w	r7, [sp], #4
  408196:	4770      	bx	lr

00408198 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  408198:	b480      	push	{r7}
  40819a:	b083      	sub	sp, #12
  40819c:	af00      	add	r7, sp, #0
  40819e:	6078      	str	r0, [r7, #4]
  4081a0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  4081a2:	683a      	ldr	r2, [r7, #0]
  4081a4:	f240 2302 	movw	r3, #514	; 0x202
  4081a8:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
  4081aa:	687a      	ldr	r2, [r7, #4]
  4081ac:	6213      	str	r3, [r2, #32]
}
  4081ae:	bf00      	nop
  4081b0:	370c      	adds	r7, #12
  4081b2:	46bd      	mov	sp, r7
  4081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4081b8:	4770      	bx	lr

004081ba <pdc_read_status>:
 * </table>
 *
 */
uint32_t pdc_read_status(
		Pdc *p_pdc)
{
  4081ba:	b480      	push	{r7}
  4081bc:	b083      	sub	sp, #12
  4081be:	af00      	add	r7, sp, #0
  4081c0:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_PTSR;
  4081c2:	687b      	ldr	r3, [r7, #4]
  4081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  4081c6:	4618      	mov	r0, r3
  4081c8:	370c      	adds	r7, #12
  4081ca:	46bd      	mov	sp, r7
  4081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4081d0:	4770      	bx	lr

004081d2 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  4081d2:	b480      	push	{r7}
  4081d4:	b083      	sub	sp, #12
  4081d6:	af00      	add	r7, sp, #0
  4081d8:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  4081da:	687b      	ldr	r3, [r7, #4]
  4081dc:	685b      	ldr	r3, [r3, #4]
}
  4081de:	4618      	mov	r0, r3
  4081e0:	370c      	adds	r7, #12
  4081e2:	46bd      	mov	sp, r7
  4081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4081e8:	4770      	bx	lr

004081ea <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4081ea:	b480      	push	{r7}
  4081ec:	b085      	sub	sp, #20
  4081ee:	af00      	add	r7, sp, #0
  4081f0:	60f8      	str	r0, [r7, #12]
  4081f2:	60b9      	str	r1, [r7, #8]
  4081f4:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4081f6:	687b      	ldr	r3, [r7, #4]
  4081f8:	2b00      	cmp	r3, #0
  4081fa:	d003      	beq.n	408204 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4081fc:	68fb      	ldr	r3, [r7, #12]
  4081fe:	68ba      	ldr	r2, [r7, #8]
  408200:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  408202:	e002      	b.n	40820a <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  408204:	68fb      	ldr	r3, [r7, #12]
  408206:	68ba      	ldr	r2, [r7, #8]
  408208:	661a      	str	r2, [r3, #96]	; 0x60
}
  40820a:	bf00      	nop
  40820c:	3714      	adds	r7, #20
  40820e:	46bd      	mov	sp, r7
  408210:	f85d 7b04 	ldr.w	r7, [sp], #4
  408214:	4770      	bx	lr

00408216 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  408216:	b480      	push	{r7}
  408218:	b087      	sub	sp, #28
  40821a:	af00      	add	r7, sp, #0
  40821c:	60f8      	str	r0, [r7, #12]
  40821e:	60b9      	str	r1, [r7, #8]
  408220:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  408222:	68fb      	ldr	r3, [r7, #12]
  408224:	687a      	ldr	r2, [r7, #4]
  408226:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  408228:	68bb      	ldr	r3, [r7, #8]
  40822a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40822e:	d02b      	beq.n	408288 <pio_set_peripheral+0x72>
  408230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  408234:	d805      	bhi.n	408242 <pio_set_peripheral+0x2c>
  408236:	2b00      	cmp	r3, #0
  408238:	d03f      	beq.n	4082ba <pio_set_peripheral+0xa4>
  40823a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40823e:	d00a      	beq.n	408256 <pio_set_peripheral+0x40>
  408240:	e037      	b.n	4082b2 <pio_set_peripheral+0x9c>
  408242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  408246:	d038      	beq.n	4082ba <pio_set_peripheral+0xa4>
  408248:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40824c:	d035      	beq.n	4082ba <pio_set_peripheral+0xa4>
  40824e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  408252:	d032      	beq.n	4082ba <pio_set_peripheral+0xa4>
  408254:	e02d      	b.n	4082b2 <pio_set_peripheral+0x9c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408256:	68fb      	ldr	r3, [r7, #12]
  408258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40825a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40825c:	68fb      	ldr	r3, [r7, #12]
  40825e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408260:	687b      	ldr	r3, [r7, #4]
  408262:	43d9      	mvns	r1, r3
  408264:	697b      	ldr	r3, [r7, #20]
  408266:	400b      	ands	r3, r1
  408268:	401a      	ands	r2, r3
  40826a:	68fb      	ldr	r3, [r7, #12]
  40826c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40826e:	68fb      	ldr	r3, [r7, #12]
  408270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408272:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408274:	68fb      	ldr	r3, [r7, #12]
  408276:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408278:	687b      	ldr	r3, [r7, #4]
  40827a:	43d9      	mvns	r1, r3
  40827c:	697b      	ldr	r3, [r7, #20]
  40827e:	400b      	ands	r3, r1
  408280:	401a      	ands	r2, r3
  408282:	68fb      	ldr	r3, [r7, #12]
  408284:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  408286:	e014      	b.n	4082b2 <pio_set_peripheral+0x9c>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408288:	68fb      	ldr	r3, [r7, #12]
  40828a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40828c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40828e:	687a      	ldr	r2, [r7, #4]
  408290:	697b      	ldr	r3, [r7, #20]
  408292:	431a      	orrs	r2, r3
  408294:	68fb      	ldr	r3, [r7, #12]
  408296:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  408298:	68fb      	ldr	r3, [r7, #12]
  40829a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40829c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40829e:	68fb      	ldr	r3, [r7, #12]
  4082a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4082a2:	687b      	ldr	r3, [r7, #4]
  4082a4:	43d9      	mvns	r1, r3
  4082a6:	697b      	ldr	r3, [r7, #20]
  4082a8:	400b      	ands	r3, r1
  4082aa:	401a      	ands	r2, r3
  4082ac:	68fb      	ldr	r3, [r7, #12]
  4082ae:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4082b0:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4082b2:	68fb      	ldr	r3, [r7, #12]
  4082b4:	687a      	ldr	r2, [r7, #4]
  4082b6:	605a      	str	r2, [r3, #4]
  4082b8:	e000      	b.n	4082bc <pio_set_peripheral+0xa6>
		return;
  4082ba:	bf00      	nop
}
  4082bc:	371c      	adds	r7, #28
  4082be:	46bd      	mov	sp, r7
  4082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4082c4:	4770      	bx	lr
	...

004082c8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4082c8:	b580      	push	{r7, lr}
  4082ca:	b084      	sub	sp, #16
  4082cc:	af00      	add	r7, sp, #0
  4082ce:	60f8      	str	r0, [r7, #12]
  4082d0:	60b9      	str	r1, [r7, #8]
  4082d2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4082d4:	68b9      	ldr	r1, [r7, #8]
  4082d6:	68f8      	ldr	r0, [r7, #12]
  4082d8:	4b19      	ldr	r3, [pc, #100]	; (408340 <pio_set_input+0x78>)
  4082da:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4082dc:	687b      	ldr	r3, [r7, #4]
  4082de:	f003 0301 	and.w	r3, r3, #1
  4082e2:	461a      	mov	r2, r3
  4082e4:	68b9      	ldr	r1, [r7, #8]
  4082e6:	68f8      	ldr	r0, [r7, #12]
  4082e8:	4b16      	ldr	r3, [pc, #88]	; (408344 <pio_set_input+0x7c>)
  4082ea:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4082ec:	687b      	ldr	r3, [r7, #4]
  4082ee:	f003 030a 	and.w	r3, r3, #10
  4082f2:	2b00      	cmp	r3, #0
  4082f4:	d003      	beq.n	4082fe <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4082f6:	68fb      	ldr	r3, [r7, #12]
  4082f8:	68ba      	ldr	r2, [r7, #8]
  4082fa:	621a      	str	r2, [r3, #32]
  4082fc:	e002      	b.n	408304 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4082fe:	68fb      	ldr	r3, [r7, #12]
  408300:	68ba      	ldr	r2, [r7, #8]
  408302:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  408304:	687b      	ldr	r3, [r7, #4]
  408306:	f003 0302 	and.w	r3, r3, #2
  40830a:	2b00      	cmp	r3, #0
  40830c:	d004      	beq.n	408318 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40830e:	68fb      	ldr	r3, [r7, #12]
  408310:	68ba      	ldr	r2, [r7, #8]
  408312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  408316:	e008      	b.n	40832a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  408318:	687b      	ldr	r3, [r7, #4]
  40831a:	f003 0308 	and.w	r3, r3, #8
  40831e:	2b00      	cmp	r3, #0
  408320:	d003      	beq.n	40832a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  408322:	68fb      	ldr	r3, [r7, #12]
  408324:	68ba      	ldr	r2, [r7, #8]
  408326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40832a:	68fb      	ldr	r3, [r7, #12]
  40832c:	68ba      	ldr	r2, [r7, #8]
  40832e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  408330:	68fb      	ldr	r3, [r7, #12]
  408332:	68ba      	ldr	r2, [r7, #8]
  408334:	601a      	str	r2, [r3, #0]
}
  408336:	bf00      	nop
  408338:	3710      	adds	r7, #16
  40833a:	46bd      	mov	sp, r7
  40833c:	bd80      	pop	{r7, pc}
  40833e:	bf00      	nop
  408340:	004084f5 	.word	0x004084f5
  408344:	004081eb 	.word	0x004081eb

00408348 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  408348:	b580      	push	{r7, lr}
  40834a:	b084      	sub	sp, #16
  40834c:	af00      	add	r7, sp, #0
  40834e:	60f8      	str	r0, [r7, #12]
  408350:	60b9      	str	r1, [r7, #8]
  408352:	607a      	str	r2, [r7, #4]
  408354:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  408356:	68b9      	ldr	r1, [r7, #8]
  408358:	68f8      	ldr	r0, [r7, #12]
  40835a:	4b12      	ldr	r3, [pc, #72]	; (4083a4 <pio_set_output+0x5c>)
  40835c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40835e:	69ba      	ldr	r2, [r7, #24]
  408360:	68b9      	ldr	r1, [r7, #8]
  408362:	68f8      	ldr	r0, [r7, #12]
  408364:	4b10      	ldr	r3, [pc, #64]	; (4083a8 <pio_set_output+0x60>)
  408366:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  408368:	683b      	ldr	r3, [r7, #0]
  40836a:	2b00      	cmp	r3, #0
  40836c:	d003      	beq.n	408376 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40836e:	68fb      	ldr	r3, [r7, #12]
  408370:	68ba      	ldr	r2, [r7, #8]
  408372:	651a      	str	r2, [r3, #80]	; 0x50
  408374:	e002      	b.n	40837c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  408376:	68fb      	ldr	r3, [r7, #12]
  408378:	68ba      	ldr	r2, [r7, #8]
  40837a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40837c:	687b      	ldr	r3, [r7, #4]
  40837e:	2b00      	cmp	r3, #0
  408380:	d003      	beq.n	40838a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  408382:	68fb      	ldr	r3, [r7, #12]
  408384:	68ba      	ldr	r2, [r7, #8]
  408386:	631a      	str	r2, [r3, #48]	; 0x30
  408388:	e002      	b.n	408390 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40838a:	68fb      	ldr	r3, [r7, #12]
  40838c:	68ba      	ldr	r2, [r7, #8]
  40838e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  408390:	68fb      	ldr	r3, [r7, #12]
  408392:	68ba      	ldr	r2, [r7, #8]
  408394:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  408396:	68fb      	ldr	r3, [r7, #12]
  408398:	68ba      	ldr	r2, [r7, #8]
  40839a:	601a      	str	r2, [r3, #0]
}
  40839c:	bf00      	nop
  40839e:	3710      	adds	r7, #16
  4083a0:	46bd      	mov	sp, r7
  4083a2:	bd80      	pop	{r7, pc}
  4083a4:	004084f5 	.word	0x004084f5
  4083a8:	004081eb 	.word	0x004081eb

004083ac <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  4083ac:	b590      	push	{r4, r7, lr}
  4083ae:	b087      	sub	sp, #28
  4083b0:	af02      	add	r7, sp, #8
  4083b2:	60f8      	str	r0, [r7, #12]
  4083b4:	60b9      	str	r1, [r7, #8]
  4083b6:	607a      	str	r2, [r7, #4]
  4083b8:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  4083ba:	68bb      	ldr	r3, [r7, #8]
  4083bc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4083c0:	d01e      	beq.n	408400 <pio_configure+0x54>
  4083c2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4083c6:	d806      	bhi.n	4083d6 <pio_configure+0x2a>
  4083c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4083cc:	d00a      	beq.n	4083e4 <pio_configure+0x38>
  4083ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4083d2:	d007      	beq.n	4083e4 <pio_configure+0x38>
  4083d4:	e03a      	b.n	40844c <pio_configure+0xa0>
  4083d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4083da:	d017      	beq.n	40840c <pio_configure+0x60>
  4083dc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4083e0:	d014      	beq.n	40840c <pio_configure+0x60>
  4083e2:	e033      	b.n	40844c <pio_configure+0xa0>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4083e4:	687a      	ldr	r2, [r7, #4]
  4083e6:	68b9      	ldr	r1, [r7, #8]
  4083e8:	68f8      	ldr	r0, [r7, #12]
  4083ea:	4b1c      	ldr	r3, [pc, #112]	; (40845c <pio_configure+0xb0>)
  4083ec:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  4083ee:	683b      	ldr	r3, [r7, #0]
  4083f0:	f003 0301 	and.w	r3, r3, #1
  4083f4:	461a      	mov	r2, r3
  4083f6:	6879      	ldr	r1, [r7, #4]
  4083f8:	68f8      	ldr	r0, [r7, #12]
  4083fa:	4b19      	ldr	r3, [pc, #100]	; (408460 <pio_configure+0xb4>)
  4083fc:	4798      	blx	r3
		break;
  4083fe:	e027      	b.n	408450 <pio_configure+0xa4>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  408400:	683a      	ldr	r2, [r7, #0]
  408402:	6879      	ldr	r1, [r7, #4]
  408404:	68f8      	ldr	r0, [r7, #12]
  408406:	4b17      	ldr	r3, [pc, #92]	; (408464 <pio_configure+0xb8>)
  408408:	4798      	blx	r3
		break;
  40840a:	e021      	b.n	408450 <pio_configure+0xa4>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40840c:	68bb      	ldr	r3, [r7, #8]
  40840e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  408412:	bf0c      	ite	eq
  408414:	2301      	moveq	r3, #1
  408416:	2300      	movne	r3, #0
  408418:	b2db      	uxtb	r3, r3
  40841a:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  40841c:	683b      	ldr	r3, [r7, #0]
  40841e:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  408422:	2b00      	cmp	r3, #0
  408424:	bf14      	ite	ne
  408426:	2301      	movne	r3, #1
  408428:	2300      	moveq	r3, #0
  40842a:	b2db      	uxtb	r3, r3
  40842c:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  40842e:	683b      	ldr	r3, [r7, #0]
  408430:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  408434:	2b00      	cmp	r3, #0
  408436:	bf14      	ite	ne
  408438:	2301      	movne	r3, #1
  40843a:	2300      	moveq	r3, #0
  40843c:	b2db      	uxtb	r3, r3
  40843e:	9300      	str	r3, [sp, #0]
  408440:	460b      	mov	r3, r1
  408442:	6879      	ldr	r1, [r7, #4]
  408444:	68f8      	ldr	r0, [r7, #12]
  408446:	4c08      	ldr	r4, [pc, #32]	; (408468 <pio_configure+0xbc>)
  408448:	47a0      	blx	r4
		break;
  40844a:	e001      	b.n	408450 <pio_configure+0xa4>

	default:
		return 0;
  40844c:	2300      	movs	r3, #0
  40844e:	e000      	b.n	408452 <pio_configure+0xa6>
	}

	return 1;
  408450:	2301      	movs	r3, #1
}
  408452:	4618      	mov	r0, r3
  408454:	3714      	adds	r7, #20
  408456:	46bd      	mov	sp, r7
  408458:	bd90      	pop	{r4, r7, pc}
  40845a:	bf00      	nop
  40845c:	00408217 	.word	0x00408217
  408460:	004081eb 	.word	0x004081eb
  408464:	004082c9 	.word	0x004082c9
  408468:	00408349 	.word	0x00408349

0040846c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40846c:	b480      	push	{r7}
  40846e:	b085      	sub	sp, #20
  408470:	af00      	add	r7, sp, #0
  408472:	60f8      	str	r0, [r7, #12]
  408474:	60b9      	str	r1, [r7, #8]
  408476:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  408478:	687b      	ldr	r3, [r7, #4]
  40847a:	f003 0310 	and.w	r3, r3, #16
  40847e:	2b00      	cmp	r3, #0
  408480:	d020      	beq.n	4084c4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  408482:	68fb      	ldr	r3, [r7, #12]
  408484:	68ba      	ldr	r2, [r7, #8]
  408486:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40848a:	687b      	ldr	r3, [r7, #4]
  40848c:	f003 0320 	and.w	r3, r3, #32
  408490:	2b00      	cmp	r3, #0
  408492:	d004      	beq.n	40849e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  408494:	68fb      	ldr	r3, [r7, #12]
  408496:	68ba      	ldr	r2, [r7, #8]
  408498:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40849c:	e003      	b.n	4084a6 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40849e:	68fb      	ldr	r3, [r7, #12]
  4084a0:	68ba      	ldr	r2, [r7, #8]
  4084a2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4084a6:	687b      	ldr	r3, [r7, #4]
  4084a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4084ac:	2b00      	cmp	r3, #0
  4084ae:	d004      	beq.n	4084ba <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4084b0:	68fb      	ldr	r3, [r7, #12]
  4084b2:	68ba      	ldr	r2, [r7, #8]
  4084b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4084b8:	e008      	b.n	4084cc <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  4084ba:	68fb      	ldr	r3, [r7, #12]
  4084bc:	68ba      	ldr	r2, [r7, #8]
  4084be:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4084c2:	e003      	b.n	4084cc <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4084c4:	68fb      	ldr	r3, [r7, #12]
  4084c6:	68ba      	ldr	r2, [r7, #8]
  4084c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4084cc:	bf00      	nop
  4084ce:	3714      	adds	r7, #20
  4084d0:	46bd      	mov	sp, r7
  4084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4084d6:	4770      	bx	lr

004084d8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4084d8:	b480      	push	{r7}
  4084da:	b083      	sub	sp, #12
  4084dc:	af00      	add	r7, sp, #0
  4084de:	6078      	str	r0, [r7, #4]
  4084e0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  4084e2:	687b      	ldr	r3, [r7, #4]
  4084e4:	683a      	ldr	r2, [r7, #0]
  4084e6:	641a      	str	r2, [r3, #64]	; 0x40
}
  4084e8:	bf00      	nop
  4084ea:	370c      	adds	r7, #12
  4084ec:	46bd      	mov	sp, r7
  4084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4084f2:	4770      	bx	lr

004084f4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4084f4:	b480      	push	{r7}
  4084f6:	b083      	sub	sp, #12
  4084f8:	af00      	add	r7, sp, #0
  4084fa:	6078      	str	r0, [r7, #4]
  4084fc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4084fe:	687b      	ldr	r3, [r7, #4]
  408500:	683a      	ldr	r2, [r7, #0]
  408502:	645a      	str	r2, [r3, #68]	; 0x44
}
  408504:	bf00      	nop
  408506:	370c      	adds	r7, #12
  408508:	46bd      	mov	sp, r7
  40850a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40850e:	4770      	bx	lr

00408510 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  408510:	b480      	push	{r7}
  408512:	b083      	sub	sp, #12
  408514:	af00      	add	r7, sp, #0
  408516:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  408518:	687b      	ldr	r3, [r7, #4]
  40851a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40851c:	4618      	mov	r0, r3
  40851e:	370c      	adds	r7, #12
  408520:	46bd      	mov	sp, r7
  408522:	f85d 7b04 	ldr.w	r7, [sp], #4
  408526:	4770      	bx	lr

00408528 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  408528:	b480      	push	{r7}
  40852a:	b083      	sub	sp, #12
  40852c:	af00      	add	r7, sp, #0
  40852e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  408530:	687b      	ldr	r3, [r7, #4]
  408532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  408534:	4618      	mov	r0, r3
  408536:	370c      	adds	r7, #12
  408538:	46bd      	mov	sp, r7
  40853a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40853e:	4770      	bx	lr

00408540 <NVIC_EnableIRQ>:
{
  408540:	b480      	push	{r7}
  408542:	b083      	sub	sp, #12
  408544:	af00      	add	r7, sp, #0
  408546:	4603      	mov	r3, r0
  408548:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40854a:	4909      	ldr	r1, [pc, #36]	; (408570 <NVIC_EnableIRQ+0x30>)
  40854c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  408550:	095b      	lsrs	r3, r3, #5
  408552:	79fa      	ldrb	r2, [r7, #7]
  408554:	f002 021f 	and.w	r2, r2, #31
  408558:	2001      	movs	r0, #1
  40855a:	fa00 f202 	lsl.w	r2, r0, r2
  40855e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  408562:	bf00      	nop
  408564:	370c      	adds	r7, #12
  408566:	46bd      	mov	sp, r7
  408568:	f85d 7b04 	ldr.w	r7, [sp], #4
  40856c:	4770      	bx	lr
  40856e:	bf00      	nop
  408570:	e000e100 	.word	0xe000e100

00408574 <NVIC_DisableIRQ>:
{
  408574:	b480      	push	{r7}
  408576:	b083      	sub	sp, #12
  408578:	af00      	add	r7, sp, #0
  40857a:	4603      	mov	r3, r0
  40857c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40857e:	4909      	ldr	r1, [pc, #36]	; (4085a4 <NVIC_DisableIRQ+0x30>)
  408580:	f997 3007 	ldrsb.w	r3, [r7, #7]
  408584:	095b      	lsrs	r3, r3, #5
  408586:	79fa      	ldrb	r2, [r7, #7]
  408588:	f002 021f 	and.w	r2, r2, #31
  40858c:	2001      	movs	r0, #1
  40858e:	fa00 f202 	lsl.w	r2, r0, r2
  408592:	3320      	adds	r3, #32
  408594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  408598:	bf00      	nop
  40859a:	370c      	adds	r7, #12
  40859c:	46bd      	mov	sp, r7
  40859e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4085a2:	4770      	bx	lr
  4085a4:	e000e100 	.word	0xe000e100

004085a8 <NVIC_ClearPendingIRQ>:
{
  4085a8:	b480      	push	{r7}
  4085aa:	b083      	sub	sp, #12
  4085ac:	af00      	add	r7, sp, #0
  4085ae:	4603      	mov	r3, r0
  4085b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4085b2:	4909      	ldr	r1, [pc, #36]	; (4085d8 <NVIC_ClearPendingIRQ+0x30>)
  4085b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4085b8:	095b      	lsrs	r3, r3, #5
  4085ba:	79fa      	ldrb	r2, [r7, #7]
  4085bc:	f002 021f 	and.w	r2, r2, #31
  4085c0:	2001      	movs	r0, #1
  4085c2:	fa00 f202 	lsl.w	r2, r0, r2
  4085c6:	3360      	adds	r3, #96	; 0x60
  4085c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4085cc:	bf00      	nop
  4085ce:	370c      	adds	r7, #12
  4085d0:	46bd      	mov	sp, r7
  4085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4085d6:	4770      	bx	lr
  4085d8:	e000e100 	.word	0xe000e100

004085dc <NVIC_SetPriority>:
{
  4085dc:	b480      	push	{r7}
  4085de:	b083      	sub	sp, #12
  4085e0:	af00      	add	r7, sp, #0
  4085e2:	4603      	mov	r3, r0
  4085e4:	6039      	str	r1, [r7, #0]
  4085e6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4085e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4085ec:	2b00      	cmp	r3, #0
  4085ee:	da0b      	bge.n	408608 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4085f0:	490d      	ldr	r1, [pc, #52]	; (408628 <NVIC_SetPriority+0x4c>)
  4085f2:	79fb      	ldrb	r3, [r7, #7]
  4085f4:	f003 030f 	and.w	r3, r3, #15
  4085f8:	3b04      	subs	r3, #4
  4085fa:	683a      	ldr	r2, [r7, #0]
  4085fc:	b2d2      	uxtb	r2, r2
  4085fe:	0112      	lsls	r2, r2, #4
  408600:	b2d2      	uxtb	r2, r2
  408602:	440b      	add	r3, r1
  408604:	761a      	strb	r2, [r3, #24]
}
  408606:	e009      	b.n	40861c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  408608:	4908      	ldr	r1, [pc, #32]	; (40862c <NVIC_SetPriority+0x50>)
  40860a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40860e:	683a      	ldr	r2, [r7, #0]
  408610:	b2d2      	uxtb	r2, r2
  408612:	0112      	lsls	r2, r2, #4
  408614:	b2d2      	uxtb	r2, r2
  408616:	440b      	add	r3, r1
  408618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40861c:	bf00      	nop
  40861e:	370c      	adds	r7, #12
  408620:	46bd      	mov	sp, r7
  408622:	f85d 7b04 	ldr.w	r7, [sp], #4
  408626:	4770      	bx	lr
  408628:	e000ed00 	.word	0xe000ed00
  40862c:	e000e100 	.word	0xe000e100

00408630 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  408630:	b580      	push	{r7, lr}
  408632:	b084      	sub	sp, #16
  408634:	af00      	add	r7, sp, #0
  408636:	6078      	str	r0, [r7, #4]
  408638:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40863a:	6878      	ldr	r0, [r7, #4]
  40863c:	4b26      	ldr	r3, [pc, #152]	; (4086d8 <pio_handler_process+0xa8>)
  40863e:	4798      	blx	r3
  408640:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  408642:	6878      	ldr	r0, [r7, #4]
  408644:	4b25      	ldr	r3, [pc, #148]	; (4086dc <pio_handler_process+0xac>)
  408646:	4798      	blx	r3
  408648:	4602      	mov	r2, r0
  40864a:	68fb      	ldr	r3, [r7, #12]
  40864c:	4013      	ands	r3, r2
  40864e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  408650:	68fb      	ldr	r3, [r7, #12]
  408652:	2b00      	cmp	r3, #0
  408654:	d03c      	beq.n	4086d0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  408656:	2300      	movs	r3, #0
  408658:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40865a:	e034      	b.n	4086c6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40865c:	4a20      	ldr	r2, [pc, #128]	; (4086e0 <pio_handler_process+0xb0>)
  40865e:	68bb      	ldr	r3, [r7, #8]
  408660:	011b      	lsls	r3, r3, #4
  408662:	4413      	add	r3, r2
  408664:	681a      	ldr	r2, [r3, #0]
  408666:	683b      	ldr	r3, [r7, #0]
  408668:	429a      	cmp	r2, r3
  40866a:	d126      	bne.n	4086ba <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40866c:	4a1c      	ldr	r2, [pc, #112]	; (4086e0 <pio_handler_process+0xb0>)
  40866e:	68bb      	ldr	r3, [r7, #8]
  408670:	011b      	lsls	r3, r3, #4
  408672:	4413      	add	r3, r2
  408674:	3304      	adds	r3, #4
  408676:	681a      	ldr	r2, [r3, #0]
  408678:	68fb      	ldr	r3, [r7, #12]
  40867a:	4013      	ands	r3, r2
  40867c:	2b00      	cmp	r3, #0
  40867e:	d01c      	beq.n	4086ba <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  408680:	4a17      	ldr	r2, [pc, #92]	; (4086e0 <pio_handler_process+0xb0>)
  408682:	68bb      	ldr	r3, [r7, #8]
  408684:	011b      	lsls	r3, r3, #4
  408686:	4413      	add	r3, r2
  408688:	330c      	adds	r3, #12
  40868a:	681b      	ldr	r3, [r3, #0]
  40868c:	4914      	ldr	r1, [pc, #80]	; (4086e0 <pio_handler_process+0xb0>)
  40868e:	68ba      	ldr	r2, [r7, #8]
  408690:	0112      	lsls	r2, r2, #4
  408692:	440a      	add	r2, r1
  408694:	6810      	ldr	r0, [r2, #0]
  408696:	4912      	ldr	r1, [pc, #72]	; (4086e0 <pio_handler_process+0xb0>)
  408698:	68ba      	ldr	r2, [r7, #8]
  40869a:	0112      	lsls	r2, r2, #4
  40869c:	440a      	add	r2, r1
  40869e:	3204      	adds	r2, #4
  4086a0:	6812      	ldr	r2, [r2, #0]
  4086a2:	4611      	mov	r1, r2
  4086a4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4086a6:	4a0e      	ldr	r2, [pc, #56]	; (4086e0 <pio_handler_process+0xb0>)
  4086a8:	68bb      	ldr	r3, [r7, #8]
  4086aa:	011b      	lsls	r3, r3, #4
  4086ac:	4413      	add	r3, r2
  4086ae:	3304      	adds	r3, #4
  4086b0:	681b      	ldr	r3, [r3, #0]
  4086b2:	43db      	mvns	r3, r3
  4086b4:	68fa      	ldr	r2, [r7, #12]
  4086b6:	4013      	ands	r3, r2
  4086b8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4086ba:	68bb      	ldr	r3, [r7, #8]
  4086bc:	3301      	adds	r3, #1
  4086be:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4086c0:	68bb      	ldr	r3, [r7, #8]
  4086c2:	2b06      	cmp	r3, #6
  4086c4:	d803      	bhi.n	4086ce <pio_handler_process+0x9e>
		while (status != 0) {
  4086c6:	68fb      	ldr	r3, [r7, #12]
  4086c8:	2b00      	cmp	r3, #0
  4086ca:	d1c7      	bne.n	40865c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4086cc:	e000      	b.n	4086d0 <pio_handler_process+0xa0>
				break;
  4086ce:	bf00      	nop
}
  4086d0:	bf00      	nop
  4086d2:	3710      	adds	r7, #16
  4086d4:	46bd      	mov	sp, r7
  4086d6:	bd80      	pop	{r7, pc}
  4086d8:	00408511 	.word	0x00408511
  4086dc:	00408529 	.word	0x00408529
  4086e0:	20004620 	.word	0x20004620

004086e4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4086e4:	b580      	push	{r7, lr}
  4086e6:	b086      	sub	sp, #24
  4086e8:	af00      	add	r7, sp, #0
  4086ea:	60f8      	str	r0, [r7, #12]
  4086ec:	60b9      	str	r1, [r7, #8]
  4086ee:	607a      	str	r2, [r7, #4]
  4086f0:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4086f2:	4b21      	ldr	r3, [pc, #132]	; (408778 <pio_handler_set+0x94>)
  4086f4:	681b      	ldr	r3, [r3, #0]
  4086f6:	2b06      	cmp	r3, #6
  4086f8:	d901      	bls.n	4086fe <pio_handler_set+0x1a>
		return 1;
  4086fa:	2301      	movs	r3, #1
  4086fc:	e038      	b.n	408770 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4086fe:	2300      	movs	r3, #0
  408700:	75fb      	strb	r3, [r7, #23]
  408702:	e011      	b.n	408728 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  408704:	7dfb      	ldrb	r3, [r7, #23]
  408706:	011b      	lsls	r3, r3, #4
  408708:	4a1c      	ldr	r2, [pc, #112]	; (40877c <pio_handler_set+0x98>)
  40870a:	4413      	add	r3, r2
  40870c:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40870e:	693b      	ldr	r3, [r7, #16]
  408710:	681a      	ldr	r2, [r3, #0]
  408712:	68bb      	ldr	r3, [r7, #8]
  408714:	429a      	cmp	r2, r3
  408716:	d104      	bne.n	408722 <pio_handler_set+0x3e>
  408718:	693b      	ldr	r3, [r7, #16]
  40871a:	685a      	ldr	r2, [r3, #4]
  40871c:	687b      	ldr	r3, [r7, #4]
  40871e:	429a      	cmp	r2, r3
  408720:	d008      	beq.n	408734 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  408722:	7dfb      	ldrb	r3, [r7, #23]
  408724:	3301      	adds	r3, #1
  408726:	75fb      	strb	r3, [r7, #23]
  408728:	7dfa      	ldrb	r2, [r7, #23]
  40872a:	4b13      	ldr	r3, [pc, #76]	; (408778 <pio_handler_set+0x94>)
  40872c:	681b      	ldr	r3, [r3, #0]
  40872e:	429a      	cmp	r2, r3
  408730:	d9e8      	bls.n	408704 <pio_handler_set+0x20>
  408732:	e000      	b.n	408736 <pio_handler_set+0x52>
			break;
  408734:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  408736:	693b      	ldr	r3, [r7, #16]
  408738:	68ba      	ldr	r2, [r7, #8]
  40873a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  40873c:	693b      	ldr	r3, [r7, #16]
  40873e:	687a      	ldr	r2, [r7, #4]
  408740:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  408742:	693b      	ldr	r3, [r7, #16]
  408744:	683a      	ldr	r2, [r7, #0]
  408746:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  408748:	693b      	ldr	r3, [r7, #16]
  40874a:	6a3a      	ldr	r2, [r7, #32]
  40874c:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40874e:	7dfa      	ldrb	r2, [r7, #23]
  408750:	4b09      	ldr	r3, [pc, #36]	; (408778 <pio_handler_set+0x94>)
  408752:	681b      	ldr	r3, [r3, #0]
  408754:	3301      	adds	r3, #1
  408756:	429a      	cmp	r2, r3
  408758:	d104      	bne.n	408764 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40875a:	4b07      	ldr	r3, [pc, #28]	; (408778 <pio_handler_set+0x94>)
  40875c:	681b      	ldr	r3, [r3, #0]
  40875e:	3301      	adds	r3, #1
  408760:	4a05      	ldr	r2, [pc, #20]	; (408778 <pio_handler_set+0x94>)
  408762:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  408764:	683a      	ldr	r2, [r7, #0]
  408766:	6879      	ldr	r1, [r7, #4]
  408768:	68f8      	ldr	r0, [r7, #12]
  40876a:	4b05      	ldr	r3, [pc, #20]	; (408780 <pio_handler_set+0x9c>)
  40876c:	4798      	blx	r3

	return 0;
  40876e:	2300      	movs	r3, #0
}
  408770:	4618      	mov	r0, r3
  408772:	3718      	adds	r7, #24
  408774:	46bd      	mov	sp, r7
  408776:	bd80      	pop	{r7, pc}
  408778:	20004690 	.word	0x20004690
  40877c:	20004620 	.word	0x20004620
  408780:	0040846d 	.word	0x0040846d

00408784 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  408784:	b580      	push	{r7, lr}
  408786:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  408788:	210b      	movs	r1, #11
  40878a:	4802      	ldr	r0, [pc, #8]	; (408794 <PIOA_Handler+0x10>)
  40878c:	4b02      	ldr	r3, [pc, #8]	; (408798 <PIOA_Handler+0x14>)
  40878e:	4798      	blx	r3
}
  408790:	bf00      	nop
  408792:	bd80      	pop	{r7, pc}
  408794:	400e0e00 	.word	0x400e0e00
  408798:	00408631 	.word	0x00408631

0040879c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40879c:	b580      	push	{r7, lr}
  40879e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4087a0:	210c      	movs	r1, #12
  4087a2:	4802      	ldr	r0, [pc, #8]	; (4087ac <PIOB_Handler+0x10>)
  4087a4:	4b02      	ldr	r3, [pc, #8]	; (4087b0 <PIOB_Handler+0x14>)
  4087a6:	4798      	blx	r3
}
  4087a8:	bf00      	nop
  4087aa:	bd80      	pop	{r7, pc}
  4087ac:	400e1000 	.word	0x400e1000
  4087b0:	00408631 	.word	0x00408631

004087b4 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4087b4:	b580      	push	{r7, lr}
  4087b6:	b086      	sub	sp, #24
  4087b8:	af00      	add	r7, sp, #0
  4087ba:	60f8      	str	r0, [r7, #12]
  4087bc:	460b      	mov	r3, r1
  4087be:	607a      	str	r2, [r7, #4]
  4087c0:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  4087c2:	2300      	movs	r3, #0
  4087c4:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  4087c6:	68f8      	ldr	r0, [r7, #12]
  4087c8:	4b13      	ldr	r3, [pc, #76]	; (408818 <pio_handler_set_priority+0x64>)
  4087ca:	4798      	blx	r3
  4087cc:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4087ce:	f04f 31ff 	mov.w	r1, #4294967295
  4087d2:	68f8      	ldr	r0, [r7, #12]
  4087d4:	4b11      	ldr	r3, [pc, #68]	; (40881c <pio_handler_set_priority+0x68>)
  4087d6:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4087d8:	68f8      	ldr	r0, [r7, #12]
  4087da:	4b11      	ldr	r3, [pc, #68]	; (408820 <pio_handler_set_priority+0x6c>)
  4087dc:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  4087de:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4087e2:	4618      	mov	r0, r3
  4087e4:	4b0f      	ldr	r3, [pc, #60]	; (408824 <pio_handler_set_priority+0x70>)
  4087e6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  4087e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4087ec:	4618      	mov	r0, r3
  4087ee:	4b0e      	ldr	r3, [pc, #56]	; (408828 <pio_handler_set_priority+0x74>)
  4087f0:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  4087f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4087f6:	6879      	ldr	r1, [r7, #4]
  4087f8:	4618      	mov	r0, r3
  4087fa:	4b0c      	ldr	r3, [pc, #48]	; (40882c <pio_handler_set_priority+0x78>)
  4087fc:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  4087fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
  408802:	4618      	mov	r0, r3
  408804:	4b0a      	ldr	r3, [pc, #40]	; (408830 <pio_handler_set_priority+0x7c>)
  408806:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  408808:	6979      	ldr	r1, [r7, #20]
  40880a:	68f8      	ldr	r0, [r7, #12]
  40880c:	4b09      	ldr	r3, [pc, #36]	; (408834 <pio_handler_set_priority+0x80>)
  40880e:	4798      	blx	r3
}
  408810:	bf00      	nop
  408812:	3718      	adds	r7, #24
  408814:	46bd      	mov	sp, r7
  408816:	bd80      	pop	{r7, pc}
  408818:	00408529 	.word	0x00408529
  40881c:	004084f5 	.word	0x004084f5
  408820:	00408511 	.word	0x00408511
  408824:	00408575 	.word	0x00408575
  408828:	004085a9 	.word	0x004085a9
  40882c:	004085dd 	.word	0x004085dd
  408830:	00408541 	.word	0x00408541
  408834:	004084d9 	.word	0x004084d9

00408838 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  408838:	b480      	push	{r7}
  40883a:	b085      	sub	sp, #20
  40883c:	af00      	add	r7, sp, #0
  40883e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  408840:	491d      	ldr	r1, [pc, #116]	; (4088b8 <pmc_switch_mck_to_pllack+0x80>)
  408842:	4b1d      	ldr	r3, [pc, #116]	; (4088b8 <pmc_switch_mck_to_pllack+0x80>)
  408844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408846:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40884a:	687b      	ldr	r3, [r7, #4]
  40884c:	4313      	orrs	r3, r2
  40884e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  408850:	f44f 6300 	mov.w	r3, #2048	; 0x800
  408854:	60fb      	str	r3, [r7, #12]
  408856:	e007      	b.n	408868 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  408858:	68fb      	ldr	r3, [r7, #12]
  40885a:	2b00      	cmp	r3, #0
  40885c:	d101      	bne.n	408862 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40885e:	2301      	movs	r3, #1
  408860:	e023      	b.n	4088aa <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  408862:	68fb      	ldr	r3, [r7, #12]
  408864:	3b01      	subs	r3, #1
  408866:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  408868:	4b13      	ldr	r3, [pc, #76]	; (4088b8 <pmc_switch_mck_to_pllack+0x80>)
  40886a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40886c:	f003 0308 	and.w	r3, r3, #8
  408870:	2b00      	cmp	r3, #0
  408872:	d0f1      	beq.n	408858 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  408874:	4a10      	ldr	r2, [pc, #64]	; (4088b8 <pmc_switch_mck_to_pllack+0x80>)
  408876:	4b10      	ldr	r3, [pc, #64]	; (4088b8 <pmc_switch_mck_to_pllack+0x80>)
  408878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40887a:	f023 0303 	bic.w	r3, r3, #3
  40887e:	f043 0302 	orr.w	r3, r3, #2
  408882:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  408884:	f44f 6300 	mov.w	r3, #2048	; 0x800
  408888:	60fb      	str	r3, [r7, #12]
  40888a:	e007      	b.n	40889c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40888c:	68fb      	ldr	r3, [r7, #12]
  40888e:	2b00      	cmp	r3, #0
  408890:	d101      	bne.n	408896 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  408892:	2301      	movs	r3, #1
  408894:	e009      	b.n	4088aa <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  408896:	68fb      	ldr	r3, [r7, #12]
  408898:	3b01      	subs	r3, #1
  40889a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40889c:	4b06      	ldr	r3, [pc, #24]	; (4088b8 <pmc_switch_mck_to_pllack+0x80>)
  40889e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4088a0:	f003 0308 	and.w	r3, r3, #8
  4088a4:	2b00      	cmp	r3, #0
  4088a6:	d0f1      	beq.n	40888c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4088a8:	2300      	movs	r3, #0
}
  4088aa:	4618      	mov	r0, r3
  4088ac:	3714      	adds	r7, #20
  4088ae:	46bd      	mov	sp, r7
  4088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4088b4:	4770      	bx	lr
  4088b6:	bf00      	nop
  4088b8:	400e0400 	.word	0x400e0400

004088bc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4088bc:	b480      	push	{r7}
  4088be:	b083      	sub	sp, #12
  4088c0:	af00      	add	r7, sp, #0
  4088c2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4088c4:	687b      	ldr	r3, [r7, #4]
  4088c6:	2b01      	cmp	r3, #1
  4088c8:	d107      	bne.n	4088da <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4088ca:	4a08      	ldr	r2, [pc, #32]	; (4088ec <pmc_switch_sclk_to_32kxtal+0x30>)
  4088cc:	4b07      	ldr	r3, [pc, #28]	; (4088ec <pmc_switch_sclk_to_32kxtal+0x30>)
  4088ce:	689b      	ldr	r3, [r3, #8]
  4088d0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4088d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4088d8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4088da:	4b04      	ldr	r3, [pc, #16]	; (4088ec <pmc_switch_sclk_to_32kxtal+0x30>)
  4088dc:	4a04      	ldr	r2, [pc, #16]	; (4088f0 <pmc_switch_sclk_to_32kxtal+0x34>)
  4088de:	601a      	str	r2, [r3, #0]
}
  4088e0:	bf00      	nop
  4088e2:	370c      	adds	r7, #12
  4088e4:	46bd      	mov	sp, r7
  4088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4088ea:	4770      	bx	lr
  4088ec:	400e1410 	.word	0x400e1410
  4088f0:	a5000008 	.word	0xa5000008

004088f4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4088f4:	b480      	push	{r7}
  4088f6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4088f8:	4b09      	ldr	r3, [pc, #36]	; (408920 <pmc_osc_is_ready_32kxtal+0x2c>)
  4088fa:	695b      	ldr	r3, [r3, #20]
  4088fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  408900:	2b00      	cmp	r3, #0
  408902:	d007      	beq.n	408914 <pmc_osc_is_ready_32kxtal+0x20>
  408904:	4b07      	ldr	r3, [pc, #28]	; (408924 <pmc_osc_is_ready_32kxtal+0x30>)
  408906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408908:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40890c:	2b00      	cmp	r3, #0
  40890e:	d001      	beq.n	408914 <pmc_osc_is_ready_32kxtal+0x20>
  408910:	2301      	movs	r3, #1
  408912:	e000      	b.n	408916 <pmc_osc_is_ready_32kxtal+0x22>
  408914:	2300      	movs	r3, #0
}
  408916:	4618      	mov	r0, r3
  408918:	46bd      	mov	sp, r7
  40891a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40891e:	4770      	bx	lr
  408920:	400e1410 	.word	0x400e1410
  408924:	400e0400 	.word	0x400e0400

00408928 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  408928:	b480      	push	{r7}
  40892a:	b083      	sub	sp, #12
  40892c:	af00      	add	r7, sp, #0
  40892e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  408930:	4a18      	ldr	r2, [pc, #96]	; (408994 <pmc_switch_mainck_to_fastrc+0x6c>)
  408932:	4b18      	ldr	r3, [pc, #96]	; (408994 <pmc_switch_mainck_to_fastrc+0x6c>)
  408934:	6a1b      	ldr	r3, [r3, #32]
  408936:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40893a:	f043 0308 	orr.w	r3, r3, #8
  40893e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  408940:	bf00      	nop
  408942:	4b14      	ldr	r3, [pc, #80]	; (408994 <pmc_switch_mainck_to_fastrc+0x6c>)
  408944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40894a:	2b00      	cmp	r3, #0
  40894c:	d0f9      	beq.n	408942 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40894e:	4911      	ldr	r1, [pc, #68]	; (408994 <pmc_switch_mainck_to_fastrc+0x6c>)
  408950:	4b10      	ldr	r3, [pc, #64]	; (408994 <pmc_switch_mainck_to_fastrc+0x6c>)
  408952:	6a1b      	ldr	r3, [r3, #32]
  408954:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  408958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40895c:	687a      	ldr	r2, [r7, #4]
  40895e:	4313      	orrs	r3, r2
  408960:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  408964:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  408966:	bf00      	nop
  408968:	4b0a      	ldr	r3, [pc, #40]	; (408994 <pmc_switch_mainck_to_fastrc+0x6c>)
  40896a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40896c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  408970:	2b00      	cmp	r3, #0
  408972:	d0f9      	beq.n	408968 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  408974:	4a07      	ldr	r2, [pc, #28]	; (408994 <pmc_switch_mainck_to_fastrc+0x6c>)
  408976:	4b07      	ldr	r3, [pc, #28]	; (408994 <pmc_switch_mainck_to_fastrc+0x6c>)
  408978:	6a1b      	ldr	r3, [r3, #32]
  40897a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40897e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  408982:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  408986:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  408988:	bf00      	nop
  40898a:	370c      	adds	r7, #12
  40898c:	46bd      	mov	sp, r7
  40898e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408992:	4770      	bx	lr
  408994:	400e0400 	.word	0x400e0400

00408998 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  408998:	b480      	push	{r7}
  40899a:	b083      	sub	sp, #12
  40899c:	af00      	add	r7, sp, #0
  40899e:	6078      	str	r0, [r7, #4]
  4089a0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4089a2:	687b      	ldr	r3, [r7, #4]
  4089a4:	2b00      	cmp	r3, #0
  4089a6:	d008      	beq.n	4089ba <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4089a8:	4916      	ldr	r1, [pc, #88]	; (408a04 <pmc_switch_mainck_to_xtal+0x6c>)
  4089aa:	4b16      	ldr	r3, [pc, #88]	; (408a04 <pmc_switch_mainck_to_xtal+0x6c>)
  4089ac:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4089ae:	4a16      	ldr	r2, [pc, #88]	; (408a08 <pmc_switch_mainck_to_xtal+0x70>)
  4089b0:	401a      	ands	r2, r3
  4089b2:	4b16      	ldr	r3, [pc, #88]	; (408a0c <pmc_switch_mainck_to_xtal+0x74>)
  4089b4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4089b6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4089b8:	e01e      	b.n	4089f8 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4089ba:	4912      	ldr	r1, [pc, #72]	; (408a04 <pmc_switch_mainck_to_xtal+0x6c>)
  4089bc:	4b11      	ldr	r3, [pc, #68]	; (408a04 <pmc_switch_mainck_to_xtal+0x6c>)
  4089be:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4089c0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4089c4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4089c8:	683a      	ldr	r2, [r7, #0]
  4089ca:	0212      	lsls	r2, r2, #8
  4089cc:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4089ce:	4313      	orrs	r3, r2
  4089d0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4089d4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4089d8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4089da:	bf00      	nop
  4089dc:	4b09      	ldr	r3, [pc, #36]	; (408a04 <pmc_switch_mainck_to_xtal+0x6c>)
  4089de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4089e0:	f003 0301 	and.w	r3, r3, #1
  4089e4:	2b00      	cmp	r3, #0
  4089e6:	d0f9      	beq.n	4089dc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4089e8:	4a06      	ldr	r2, [pc, #24]	; (408a04 <pmc_switch_mainck_to_xtal+0x6c>)
  4089ea:	4b06      	ldr	r3, [pc, #24]	; (408a04 <pmc_switch_mainck_to_xtal+0x6c>)
  4089ec:	6a1b      	ldr	r3, [r3, #32]
  4089ee:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4089f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4089f6:	6213      	str	r3, [r2, #32]
}
  4089f8:	bf00      	nop
  4089fa:	370c      	adds	r7, #12
  4089fc:	46bd      	mov	sp, r7
  4089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a02:	4770      	bx	lr
  408a04:	400e0400 	.word	0x400e0400
  408a08:	fec8fffc 	.word	0xfec8fffc
  408a0c:	01370002 	.word	0x01370002

00408a10 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  408a10:	b480      	push	{r7}
  408a12:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  408a14:	4b04      	ldr	r3, [pc, #16]	; (408a28 <pmc_osc_is_ready_mainck+0x18>)
  408a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  408a1c:	4618      	mov	r0, r3
  408a1e:	46bd      	mov	sp, r7
  408a20:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a24:	4770      	bx	lr
  408a26:	bf00      	nop
  408a28:	400e0400 	.word	0x400e0400

00408a2c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  408a2c:	b480      	push	{r7}
  408a2e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  408a30:	4b03      	ldr	r3, [pc, #12]	; (408a40 <pmc_disable_pllack+0x14>)
  408a32:	2200      	movs	r2, #0
  408a34:	629a      	str	r2, [r3, #40]	; 0x28
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
#endif
}
  408a36:	bf00      	nop
  408a38:	46bd      	mov	sp, r7
  408a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a3e:	4770      	bx	lr
  408a40:	400e0400 	.word	0x400e0400

00408a44 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  408a44:	b480      	push	{r7}
  408a46:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  408a48:	4b04      	ldr	r3, [pc, #16]	; (408a5c <pmc_is_locked_pllack+0x18>)
  408a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408a4c:	f003 0302 	and.w	r3, r3, #2
}
  408a50:	4618      	mov	r0, r3
  408a52:	46bd      	mov	sp, r7
  408a54:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a58:	4770      	bx	lr
  408a5a:	bf00      	nop
  408a5c:	400e0400 	.word	0x400e0400

00408a60 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  408a60:	b480      	push	{r7}
  408a62:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  408a64:	4b03      	ldr	r3, [pc, #12]	; (408a74 <pmc_disable_pllbck+0x14>)
  408a66:	2200      	movs	r2, #0
  408a68:	62da      	str	r2, [r3, #44]	; 0x2c
}
  408a6a:	bf00      	nop
  408a6c:	46bd      	mov	sp, r7
  408a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a72:	4770      	bx	lr
  408a74:	400e0400 	.word	0x400e0400

00408a78 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  408a78:	b480      	push	{r7}
  408a7a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  408a7c:	4b04      	ldr	r3, [pc, #16]	; (408a90 <pmc_is_locked_pllbck+0x18>)
  408a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408a80:	f003 0304 	and.w	r3, r3, #4
}
  408a84:	4618      	mov	r0, r3
  408a86:	46bd      	mov	sp, r7
  408a88:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a8c:	4770      	bx	lr
  408a8e:	bf00      	nop
  408a90:	400e0400 	.word	0x400e0400

00408a94 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  408a94:	b480      	push	{r7}
  408a96:	b083      	sub	sp, #12
  408a98:	af00      	add	r7, sp, #0
  408a9a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  408a9c:	687b      	ldr	r3, [r7, #4]
  408a9e:	2b32      	cmp	r3, #50	; 0x32
  408aa0:	d901      	bls.n	408aa6 <pmc_enable_periph_clk+0x12>
		return 1;
  408aa2:	2301      	movs	r3, #1
  408aa4:	e02f      	b.n	408b06 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  408aa6:	687b      	ldr	r3, [r7, #4]
  408aa8:	2b1f      	cmp	r3, #31
  408aaa:	d813      	bhi.n	408ad4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  408aac:	4b19      	ldr	r3, [pc, #100]	; (408b14 <pmc_enable_periph_clk+0x80>)
  408aae:	699a      	ldr	r2, [r3, #24]
  408ab0:	2101      	movs	r1, #1
  408ab2:	687b      	ldr	r3, [r7, #4]
  408ab4:	fa01 f303 	lsl.w	r3, r1, r3
  408ab8:	401a      	ands	r2, r3
  408aba:	2101      	movs	r1, #1
  408abc:	687b      	ldr	r3, [r7, #4]
  408abe:	fa01 f303 	lsl.w	r3, r1, r3
  408ac2:	429a      	cmp	r2, r3
  408ac4:	d01e      	beq.n	408b04 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  408ac6:	4a13      	ldr	r2, [pc, #76]	; (408b14 <pmc_enable_periph_clk+0x80>)
  408ac8:	2101      	movs	r1, #1
  408aca:	687b      	ldr	r3, [r7, #4]
  408acc:	fa01 f303 	lsl.w	r3, r1, r3
  408ad0:	6113      	str	r3, [r2, #16]
  408ad2:	e017      	b.n	408b04 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  408ad4:	687b      	ldr	r3, [r7, #4]
  408ad6:	3b20      	subs	r3, #32
  408ad8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  408ada:	4b0e      	ldr	r3, [pc, #56]	; (408b14 <pmc_enable_periph_clk+0x80>)
  408adc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  408ae0:	2101      	movs	r1, #1
  408ae2:	687b      	ldr	r3, [r7, #4]
  408ae4:	fa01 f303 	lsl.w	r3, r1, r3
  408ae8:	401a      	ands	r2, r3
  408aea:	2101      	movs	r1, #1
  408aec:	687b      	ldr	r3, [r7, #4]
  408aee:	fa01 f303 	lsl.w	r3, r1, r3
  408af2:	429a      	cmp	r2, r3
  408af4:	d006      	beq.n	408b04 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  408af6:	4a07      	ldr	r2, [pc, #28]	; (408b14 <pmc_enable_periph_clk+0x80>)
  408af8:	2101      	movs	r1, #1
  408afa:	687b      	ldr	r3, [r7, #4]
  408afc:	fa01 f303 	lsl.w	r3, r1, r3
  408b00:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  408b04:	2300      	movs	r3, #0
}
  408b06:	4618      	mov	r0, r3
  408b08:	370c      	adds	r7, #12
  408b0a:	46bd      	mov	sp, r7
  408b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b10:	4770      	bx	lr
  408b12:	bf00      	nop
  408b14:	400e0400 	.word	0x400e0400

00408b18 <pmc_switch_pck_to_mck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  408b18:	b480      	push	{r7}
  408b1a:	b085      	sub	sp, #20
  408b1c:	af00      	add	r7, sp, #0
  408b1e:	6078      	str	r0, [r7, #4]
  408b20:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  408b22:	4912      	ldr	r1, [pc, #72]	; (408b6c <pmc_switch_pck_to_mck+0x54>)
  408b24:	683b      	ldr	r3, [r7, #0]
  408b26:	f043 0204 	orr.w	r2, r3, #4
  408b2a:	687b      	ldr	r3, [r7, #4]
  408b2c:	3310      	adds	r3, #16
  408b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  408b32:	f44f 6300 	mov.w	r3, #2048	; 0x800
  408b36:	60fb      	str	r3, [r7, #12]
  408b38:	e007      	b.n	408b4a <pmc_switch_pck_to_mck+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  408b3a:	68fb      	ldr	r3, [r7, #12]
  408b3c:	2b00      	cmp	r3, #0
  408b3e:	d101      	bne.n	408b44 <pmc_switch_pck_to_mck+0x2c>
			return 1;
  408b40:	2301      	movs	r3, #1
  408b42:	e00d      	b.n	408b60 <pmc_switch_pck_to_mck+0x48>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  408b44:	68fb      	ldr	r3, [r7, #12]
  408b46:	3b01      	subs	r3, #1
  408b48:	60fb      	str	r3, [r7, #12]
  408b4a:	4b08      	ldr	r3, [pc, #32]	; (408b6c <pmc_switch_pck_to_mck+0x54>)
  408b4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  408b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
  408b52:	687b      	ldr	r3, [r7, #4]
  408b54:	fa01 f303 	lsl.w	r3, r1, r3
  408b58:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  408b5a:	2b00      	cmp	r3, #0
  408b5c:	d0ed      	beq.n	408b3a <pmc_switch_pck_to_mck+0x22>
		}
	}

	return 0;
  408b5e:	2300      	movs	r3, #0
}
  408b60:	4618      	mov	r0, r3
  408b62:	3714      	adds	r7, #20
  408b64:	46bd      	mov	sp, r7
  408b66:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b6a:	4770      	bx	lr
  408b6c:	400e0400 	.word	0x400e0400

00408b70 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
  408b70:	b480      	push	{r7}
  408b72:	b083      	sub	sp, #12
  408b74:	af00      	add	r7, sp, #0
  408b76:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  408b78:	4a06      	ldr	r2, [pc, #24]	; (408b94 <pmc_enable_pck+0x24>)
  408b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
  408b7e:	687b      	ldr	r3, [r7, #4]
  408b80:	fa01 f303 	lsl.w	r3, r1, r3
  408b84:	6013      	str	r3, [r2, #0]
}
  408b86:	bf00      	nop
  408b88:	370c      	adds	r7, #12
  408b8a:	46bd      	mov	sp, r7
  408b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b90:	4770      	bx	lr
  408b92:	bf00      	nop
  408b94:	400e0400 	.word	0x400e0400

00408b98 <pmc_disable_pck>:
 * \brief Disable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
  408b98:	b480      	push	{r7}
  408b9a:	b083      	sub	sp, #12
  408b9c:	af00      	add	r7, sp, #0
  408b9e:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  408ba0:	4a06      	ldr	r2, [pc, #24]	; (408bbc <pmc_disable_pck+0x24>)
  408ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
  408ba6:	687b      	ldr	r3, [r7, #4]
  408ba8:	fa01 f303 	lsl.w	r3, r1, r3
  408bac:	6053      	str	r3, [r2, #4]
}
  408bae:	bf00      	nop
  408bb0:	370c      	adds	r7, #12
  408bb2:	46bd      	mov	sp, r7
  408bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  408bb8:	4770      	bx	lr
  408bba:	bf00      	nop
  408bbc:	400e0400 	.word	0x400e0400

00408bc0 <rtc_enable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  408bc0:	b480      	push	{r7}
  408bc2:	b083      	sub	sp, #12
  408bc4:	af00      	add	r7, sp, #0
  408bc6:	6078      	str	r0, [r7, #4]
  408bc8:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IER = ul_sources;
  408bca:	687b      	ldr	r3, [r7, #4]
  408bcc:	683a      	ldr	r2, [r7, #0]
  408bce:	621a      	str	r2, [r3, #32]
}
  408bd0:	bf00      	nop
  408bd2:	370c      	adds	r7, #12
  408bd4:	46bd      	mov	sp, r7
  408bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  408bda:	4770      	bx	lr

00408bdc <rtc_disable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtc_disable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  408bdc:	b480      	push	{r7}
  408bde:	b083      	sub	sp, #12
  408be0:	af00      	add	r7, sp, #0
  408be2:	6078      	str	r0, [r7, #4]
  408be4:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IDR = ul_sources;
  408be6:	687b      	ldr	r3, [r7, #4]
  408be8:	683a      	ldr	r2, [r7, #0]
  408bea:	625a      	str	r2, [r3, #36]	; 0x24
}
  408bec:	bf00      	nop
  408bee:	370c      	adds	r7, #12
  408bf0:	46bd      	mov	sp, r7
  408bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
  408bf6:	4770      	bx	lr

00408bf8 <rtc_get_status>:
 * \param p_rtc Pointer to an RTC instance.
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
  408bf8:	b480      	push	{r7}
  408bfa:	b083      	sub	sp, #12
  408bfc:	af00      	add	r7, sp, #0
  408bfe:	6078      	str	r0, [r7, #4]
	return (p_rtc->RTC_SR);
  408c00:	687b      	ldr	r3, [r7, #4]
  408c02:	699b      	ldr	r3, [r3, #24]
}
  408c04:	4618      	mov	r0, r3
  408c06:	370c      	adds	r7, #12
  408c08:	46bd      	mov	sp, r7
  408c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408c0e:	4770      	bx	lr

00408c10 <rtc_clear_status>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
  408c10:	b480      	push	{r7}
  408c12:	b083      	sub	sp, #12
  408c14:	af00      	add	r7, sp, #0
  408c16:	6078      	str	r0, [r7, #4]
  408c18:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_SCCR = ul_clear;
  408c1a:	687b      	ldr	r3, [r7, #4]
  408c1c:	683a      	ldr	r2, [r7, #0]
  408c1e:	61da      	str	r2, [r3, #28]
}
  408c20:	bf00      	nop
  408c22:	370c      	adds	r7, #12
  408c24:	46bd      	mov	sp, r7
  408c26:	f85d 7b04 	ldr.w	r7, [sp], #4
  408c2a:	4770      	bx	lr

00408c2c <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  408c2c:	b480      	push	{r7}
  408c2e:	b083      	sub	sp, #12
  408c30:	af00      	add	r7, sp, #0
  408c32:	6078      	str	r0, [r7, #4]
  408c34:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  408c36:	687b      	ldr	r3, [r7, #4]
  408c38:	685b      	ldr	r3, [r3, #4]
  408c3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
  408c3e:	687b      	ldr	r3, [r7, #4]
  408c40:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  408c42:	687b      	ldr	r3, [r7, #4]
  408c44:	685a      	ldr	r2, [r3, #4]
  408c46:	683b      	ldr	r3, [r7, #0]
  408c48:	041b      	lsls	r3, r3, #16
  408c4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  408c4e:	431a      	orrs	r2, r3
  408c50:	687b      	ldr	r3, [r7, #4]
  408c52:	605a      	str	r2, [r3, #4]
}
  408c54:	bf00      	nop
  408c56:	370c      	adds	r7, #12
  408c58:	46bd      	mov	sp, r7
  408c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408c5e:	4770      	bx	lr

00408c60 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  408c60:	b480      	push	{r7}
  408c62:	b085      	sub	sp, #20
  408c64:	af00      	add	r7, sp, #0
  408c66:	60f8      	str	r0, [r7, #12]
  408c68:	60b9      	str	r1, [r7, #8]
  408c6a:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  408c6c:	687b      	ldr	r3, [r7, #4]
  408c6e:	2b00      	cmp	r3, #0
  408c70:	d00c      	beq.n	408c8c <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  408c72:	68fb      	ldr	r3, [r7, #12]
  408c74:	68ba      	ldr	r2, [r7, #8]
  408c76:	320c      	adds	r2, #12
  408c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408c7c:	f043 0101 	orr.w	r1, r3, #1
  408c80:	68fb      	ldr	r3, [r7, #12]
  408c82:	68ba      	ldr	r2, [r7, #8]
  408c84:	320c      	adds	r2, #12
  408c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  408c8a:	e00b      	b.n	408ca4 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  408c8c:	68fb      	ldr	r3, [r7, #12]
  408c8e:	68ba      	ldr	r2, [r7, #8]
  408c90:	320c      	adds	r2, #12
  408c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408c96:	f023 0101 	bic.w	r1, r3, #1
  408c9a:	68fb      	ldr	r3, [r7, #12]
  408c9c:	68ba      	ldr	r2, [r7, #8]
  408c9e:	320c      	adds	r2, #12
  408ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408ca4:	bf00      	nop
  408ca6:	3714      	adds	r7, #20
  408ca8:	46bd      	mov	sp, r7
  408caa:	f85d 7b04 	ldr.w	r7, [sp], #4
  408cae:	4770      	bx	lr

00408cb0 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  408cb0:	b480      	push	{r7}
  408cb2:	b085      	sub	sp, #20
  408cb4:	af00      	add	r7, sp, #0
  408cb6:	60f8      	str	r0, [r7, #12]
  408cb8:	60b9      	str	r1, [r7, #8]
  408cba:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  408cbc:	687b      	ldr	r3, [r7, #4]
  408cbe:	2b00      	cmp	r3, #0
  408cc0:	d00c      	beq.n	408cdc <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  408cc2:	68fb      	ldr	r3, [r7, #12]
  408cc4:	68ba      	ldr	r2, [r7, #8]
  408cc6:	320c      	adds	r2, #12
  408cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408ccc:	f043 0102 	orr.w	r1, r3, #2
  408cd0:	68fb      	ldr	r3, [r7, #12]
  408cd2:	68ba      	ldr	r2, [r7, #8]
  408cd4:	320c      	adds	r2, #12
  408cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  408cda:	e00b      	b.n	408cf4 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  408cdc:	68fb      	ldr	r3, [r7, #12]
  408cde:	68ba      	ldr	r2, [r7, #8]
  408ce0:	320c      	adds	r2, #12
  408ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408ce6:	f023 0102 	bic.w	r1, r3, #2
  408cea:	68fb      	ldr	r3, [r7, #12]
  408cec:	68ba      	ldr	r2, [r7, #8]
  408cee:	320c      	adds	r2, #12
  408cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408cf4:	bf00      	nop
  408cf6:	3714      	adds	r7, #20
  408cf8:	46bd      	mov	sp, r7
  408cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
  408cfe:	4770      	bx	lr

00408d00 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  408d00:	b480      	push	{r7}
  408d02:	b085      	sub	sp, #20
  408d04:	af00      	add	r7, sp, #0
  408d06:	60f8      	str	r0, [r7, #12]
  408d08:	60b9      	str	r1, [r7, #8]
  408d0a:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  408d0c:	687b      	ldr	r3, [r7, #4]
  408d0e:	2b04      	cmp	r3, #4
  408d10:	d118      	bne.n	408d44 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  408d12:	68fb      	ldr	r3, [r7, #12]
  408d14:	68ba      	ldr	r2, [r7, #8]
  408d16:	320c      	adds	r2, #12
  408d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d1c:	f023 0108 	bic.w	r1, r3, #8
  408d20:	68fb      	ldr	r3, [r7, #12]
  408d22:	68ba      	ldr	r2, [r7, #8]
  408d24:	320c      	adds	r2, #12
  408d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  408d2a:	68fb      	ldr	r3, [r7, #12]
  408d2c:	68ba      	ldr	r2, [r7, #8]
  408d2e:	320c      	adds	r2, #12
  408d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d34:	f043 0104 	orr.w	r1, r3, #4
  408d38:	68fb      	ldr	r3, [r7, #12]
  408d3a:	68ba      	ldr	r2, [r7, #8]
  408d3c:	320c      	adds	r2, #12
  408d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  408d42:	e02a      	b.n	408d9a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  408d44:	687b      	ldr	r3, [r7, #4]
  408d46:	2b00      	cmp	r3, #0
  408d48:	d118      	bne.n	408d7c <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  408d4a:	68fb      	ldr	r3, [r7, #12]
  408d4c:	68ba      	ldr	r2, [r7, #8]
  408d4e:	320c      	adds	r2, #12
  408d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d54:	f023 0108 	bic.w	r1, r3, #8
  408d58:	68fb      	ldr	r3, [r7, #12]
  408d5a:	68ba      	ldr	r2, [r7, #8]
  408d5c:	320c      	adds	r2, #12
  408d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  408d62:	68fb      	ldr	r3, [r7, #12]
  408d64:	68ba      	ldr	r2, [r7, #8]
  408d66:	320c      	adds	r2, #12
  408d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d6c:	f023 0104 	bic.w	r1, r3, #4
  408d70:	68fb      	ldr	r3, [r7, #12]
  408d72:	68ba      	ldr	r2, [r7, #8]
  408d74:	320c      	adds	r2, #12
  408d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408d7a:	e00e      	b.n	408d9a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  408d7c:	687b      	ldr	r3, [r7, #4]
  408d7e:	2b08      	cmp	r3, #8
  408d80:	d10b      	bne.n	408d9a <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  408d82:	68fb      	ldr	r3, [r7, #12]
  408d84:	68ba      	ldr	r2, [r7, #8]
  408d86:	320c      	adds	r2, #12
  408d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d8c:	f043 0108 	orr.w	r1, r3, #8
  408d90:	68fb      	ldr	r3, [r7, #12]
  408d92:	68ba      	ldr	r2, [r7, #8]
  408d94:	320c      	adds	r2, #12
  408d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408d9a:	bf00      	nop
  408d9c:	3714      	adds	r7, #20
  408d9e:	46bd      	mov	sp, r7
  408da0:	f85d 7b04 	ldr.w	r7, [sp], #4
  408da4:	4770      	bx	lr

00408da6 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  408da6:	b480      	push	{r7}
  408da8:	b085      	sub	sp, #20
  408daa:	af00      	add	r7, sp, #0
  408dac:	60f8      	str	r0, [r7, #12]
  408dae:	60b9      	str	r1, [r7, #8]
  408db0:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  408db2:	68fb      	ldr	r3, [r7, #12]
  408db4:	68ba      	ldr	r2, [r7, #8]
  408db6:	320c      	adds	r2, #12
  408db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408dbc:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  408dc0:	68fb      	ldr	r3, [r7, #12]
  408dc2:	68ba      	ldr	r2, [r7, #8]
  408dc4:	320c      	adds	r2, #12
  408dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  408dca:	68fb      	ldr	r3, [r7, #12]
  408dcc:	68ba      	ldr	r2, [r7, #8]
  408dce:	320c      	adds	r2, #12
  408dd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  408dd4:	687b      	ldr	r3, [r7, #4]
  408dd6:	ea42 0103 	orr.w	r1, r2, r3
  408dda:	68fb      	ldr	r3, [r7, #12]
  408ddc:	68ba      	ldr	r2, [r7, #8]
  408dde:	320c      	adds	r2, #12
  408de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408de4:	bf00      	nop
  408de6:	3714      	adds	r7, #20
  408de8:	46bd      	mov	sp, r7
  408dea:	f85d 7b04 	ldr.w	r7, [sp], #4
  408dee:	4770      	bx	lr

00408df0 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  408df0:	b480      	push	{r7}
  408df2:	b085      	sub	sp, #20
  408df4:	af00      	add	r7, sp, #0
  408df6:	60f8      	str	r0, [r7, #12]
  408df8:	60b9      	str	r1, [r7, #8]
  408dfa:	4613      	mov	r3, r2
  408dfc:	71fb      	strb	r3, [r7, #7]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
  408dfe:	79fb      	ldrb	r3, [r7, #7]
  408e00:	2b00      	cmp	r3, #0
  408e02:	d102      	bne.n	408e0a <spi_set_baudrate_div+0x1a>
		return -1;
  408e04:	f04f 33ff 	mov.w	r3, #4294967295
  408e08:	e01b      	b.n	408e42 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  408e0a:	68fb      	ldr	r3, [r7, #12]
  408e0c:	68ba      	ldr	r2, [r7, #8]
  408e0e:	320c      	adds	r2, #12
  408e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408e14:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  408e18:	68fb      	ldr	r3, [r7, #12]
  408e1a:	68ba      	ldr	r2, [r7, #8]
  408e1c:	320c      	adds	r2, #12
  408e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  408e22:	68fb      	ldr	r3, [r7, #12]
  408e24:	68ba      	ldr	r2, [r7, #8]
  408e26:	320c      	adds	r2, #12
  408e28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  408e2c:	79fb      	ldrb	r3, [r7, #7]
  408e2e:	021b      	lsls	r3, r3, #8
  408e30:	b29b      	uxth	r3, r3
  408e32:	ea42 0103 	orr.w	r1, r2, r3
  408e36:	68fb      	ldr	r3, [r7, #12]
  408e38:	68ba      	ldr	r2, [r7, #8]
  408e3a:	320c      	adds	r2, #12
  408e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  408e40:	2300      	movs	r3, #0
}
  408e42:	4618      	mov	r0, r3
  408e44:	3714      	adds	r7, #20
  408e46:	46bd      	mov	sp, r7
  408e48:	f85d 7b04 	ldr.w	r7, [sp], #4
  408e4c:	4770      	bx	lr

00408e4e <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  408e4e:	b480      	push	{r7}
  408e50:	b085      	sub	sp, #20
  408e52:	af00      	add	r7, sp, #0
  408e54:	60f8      	str	r0, [r7, #12]
  408e56:	60b9      	str	r1, [r7, #8]
  408e58:	4611      	mov	r1, r2
  408e5a:	461a      	mov	r2, r3
  408e5c:	460b      	mov	r3, r1
  408e5e:	71fb      	strb	r3, [r7, #7]
  408e60:	4613      	mov	r3, r2
  408e62:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  408e64:	68fb      	ldr	r3, [r7, #12]
  408e66:	68ba      	ldr	r2, [r7, #8]
  408e68:	320c      	adds	r2, #12
  408e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408e6e:	b299      	uxth	r1, r3
  408e70:	68fb      	ldr	r3, [r7, #12]
  408e72:	68ba      	ldr	r2, [r7, #8]
  408e74:	320c      	adds	r2, #12
  408e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  408e7a:	68fb      	ldr	r3, [r7, #12]
  408e7c:	68ba      	ldr	r2, [r7, #8]
  408e7e:	320c      	adds	r2, #12
  408e80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  408e84:	79fb      	ldrb	r3, [r7, #7]
  408e86:	041b      	lsls	r3, r3, #16
  408e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  408e8c:	79b9      	ldrb	r1, [r7, #6]
  408e8e:	0609      	lsls	r1, r1, #24
  408e90:	430b      	orrs	r3, r1
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  408e92:	ea42 0103 	orr.w	r1, r2, r3
  408e96:	68fb      	ldr	r3, [r7, #12]
  408e98:	68ba      	ldr	r2, [r7, #8]
  408e9a:	320c      	adds	r2, #12
  408e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408ea0:	bf00      	nop
  408ea2:	3714      	adds	r7, #20
  408ea4:	46bd      	mov	sp, r7
  408ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
  408eaa:	4770      	bx	lr

00408eac <supc_set_regulator_trim_user>:
 * \param value the trim value.
 *
 * \note For the trim value in 96M PLL, please read the value in flash unique identifier area.
 */
void supc_set_regulator_trim_user(Supc *p_supc, uint32_t value)
{
  408eac:	b480      	push	{r7}
  408eae:	b085      	sub	sp, #20
  408eb0:	af00      	add	r7, sp, #0
  408eb2:	6078      	str	r0, [r7, #4]
  408eb4:	6039      	str	r1, [r7, #0]
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  408eb6:	687b      	ldr	r3, [r7, #4]
  408eb8:	69db      	ldr	r3, [r3, #28]
  408eba:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
  408ebe:	60fb      	str	r3, [r7, #12]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  408ec0:	683b      	ldr	r3, [r7, #0]
  408ec2:	025b      	lsls	r3, r3, #9
  408ec4:	f403 52f0 	and.w	r2, r3, #7680	; 0x1e00
  408ec8:	68fb      	ldr	r3, [r7, #12]
  408eca:	4313      	orrs	r3, r2
  408ecc:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  408ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  408ed4:	687a      	ldr	r2, [r7, #4]
  408ed6:	61d3      	str	r3, [r2, #28]
#endif
}
  408ed8:	bf00      	nop
  408eda:	3714      	adds	r7, #20
  408edc:	46bd      	mov	sp, r7
  408ede:	f85d 7b04 	ldr.w	r7, [sp], #4
  408ee2:	4770      	bx	lr

00408ee4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  408ee4:	b480      	push	{r7}
  408ee6:	b087      	sub	sp, #28
  408ee8:	af00      	add	r7, sp, #0
  408eea:	60f8      	str	r0, [r7, #12]
  408eec:	60b9      	str	r1, [r7, #8]
  408eee:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  408ef0:	68fa      	ldr	r2, [r7, #12]
  408ef2:	68bb      	ldr	r3, [r7, #8]
  408ef4:	019b      	lsls	r3, r3, #6
  408ef6:	4413      	add	r3, r2
  408ef8:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  408efa:	697b      	ldr	r3, [r7, #20]
  408efc:	2202      	movs	r2, #2
  408efe:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  408f00:	697b      	ldr	r3, [r7, #20]
  408f02:	f04f 32ff 	mov.w	r2, #4294967295
  408f06:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  408f08:	697b      	ldr	r3, [r7, #20]
  408f0a:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  408f0c:	697b      	ldr	r3, [r7, #20]
  408f0e:	687a      	ldr	r2, [r7, #4]
  408f10:	605a      	str	r2, [r3, #4]
}
  408f12:	bf00      	nop
  408f14:	371c      	adds	r7, #28
  408f16:	46bd      	mov	sp, r7
  408f18:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f1c:	4770      	bx	lr

00408f1e <tc_set_block_mode>:
 * the section  entitled "TC Block Mode Register" in the device-specific datasheet.
 */
void tc_set_block_mode(
		Tc *p_tc,
		uint32_t ul_blockmode)
{
  408f1e:	b480      	push	{r7}
  408f20:	b083      	sub	sp, #12
  408f22:	af00      	add	r7, sp, #0
  408f24:	6078      	str	r0, [r7, #4]
  408f26:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
  408f28:	687b      	ldr	r3, [r7, #4]
  408f2a:	683a      	ldr	r2, [r7, #0]
  408f2c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  408f30:	bf00      	nop
  408f32:	370c      	adds	r7, #12
  408f34:	46bd      	mov	sp, r7
  408f36:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f3a:	4770      	bx	lr

00408f3c <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  408f3c:	b480      	push	{r7}
  408f3e:	b083      	sub	sp, #12
  408f40:	af00      	add	r7, sp, #0
  408f42:	6078      	str	r0, [r7, #4]
  408f44:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  408f46:	687a      	ldr	r2, [r7, #4]
  408f48:	683b      	ldr	r3, [r7, #0]
  408f4a:	019b      	lsls	r3, r3, #6
  408f4c:	4413      	add	r3, r2
  408f4e:	2205      	movs	r2, #5
  408f50:	601a      	str	r2, [r3, #0]
}
  408f52:	bf00      	nop
  408f54:	370c      	adds	r7, #12
  408f56:	46bd      	mov	sp, r7
  408f58:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f5c:	4770      	bx	lr

00408f5e <tc_read_cv>:
 * \return The counter value.
 */
uint32_t tc_read_cv(
		Tc *p_tc,
		uint32_t ul_channel)
{
  408f5e:	b480      	push	{r7}
  408f60:	b083      	sub	sp, #12
  408f62:	af00      	add	r7, sp, #0
  408f64:	6078      	str	r0, [r7, #4]
  408f66:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
  408f68:	687a      	ldr	r2, [r7, #4]
  408f6a:	683b      	ldr	r3, [r7, #0]
  408f6c:	019b      	lsls	r3, r3, #6
  408f6e:	4413      	add	r3, r2
  408f70:	3310      	adds	r3, #16
  408f72:	681b      	ldr	r3, [r3, #0]
}
  408f74:	4618      	mov	r0, r3
  408f76:	370c      	adds	r7, #12
  408f78:	46bd      	mov	sp, r7
  408f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f7e:	4770      	bx	lr

00408f80 <tc_read_rc>:
 * \return The Register C (RC) value.
 */
uint32_t tc_read_rc(
		Tc *p_tc,
		uint32_t ul_channel)
{
  408f80:	b480      	push	{r7}
  408f82:	b083      	sub	sp, #12
  408f84:	af00      	add	r7, sp, #0
  408f86:	6078      	str	r0, [r7, #4]
  408f88:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RC;
  408f8a:	687a      	ldr	r2, [r7, #4]
  408f8c:	683b      	ldr	r3, [r7, #0]
  408f8e:	019b      	lsls	r3, r3, #6
  408f90:	4413      	add	r3, r2
  408f92:	331c      	adds	r3, #28
  408f94:	681b      	ldr	r3, [r3, #0]
}
  408f96:	4618      	mov	r0, r3
  408f98:	370c      	adds	r7, #12
  408f9a:	46bd      	mov	sp, r7
  408f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408fa0:	4770      	bx	lr

00408fa2 <tc_write_ra>:
 */
void tc_write_ra(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  408fa2:	b480      	push	{r7}
  408fa4:	b085      	sub	sp, #20
  408fa6:	af00      	add	r7, sp, #0
  408fa8:	60f8      	str	r0, [r7, #12]
  408faa:	60b9      	str	r1, [r7, #8]
  408fac:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  408fae:	68fa      	ldr	r2, [r7, #12]
  408fb0:	68bb      	ldr	r3, [r7, #8]
  408fb2:	019b      	lsls	r3, r3, #6
  408fb4:	4413      	add	r3, r2
  408fb6:	3314      	adds	r3, #20
  408fb8:	687a      	ldr	r2, [r7, #4]
  408fba:	601a      	str	r2, [r3, #0]
}
  408fbc:	bf00      	nop
  408fbe:	3714      	adds	r7, #20
  408fc0:	46bd      	mov	sp, r7
  408fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  408fc6:	4770      	bx	lr

00408fc8 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  408fc8:	b480      	push	{r7}
  408fca:	b085      	sub	sp, #20
  408fcc:	af00      	add	r7, sp, #0
  408fce:	60f8      	str	r0, [r7, #12]
  408fd0:	60b9      	str	r1, [r7, #8]
  408fd2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  408fd4:	68fa      	ldr	r2, [r7, #12]
  408fd6:	68bb      	ldr	r3, [r7, #8]
  408fd8:	019b      	lsls	r3, r3, #6
  408fda:	4413      	add	r3, r2
  408fdc:	331c      	adds	r3, #28
  408fde:	687a      	ldr	r2, [r7, #4]
  408fe0:	601a      	str	r2, [r3, #0]
}
  408fe2:	bf00      	nop
  408fe4:	3714      	adds	r7, #20
  408fe6:	46bd      	mov	sp, r7
  408fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
  408fec:	4770      	bx	lr

00408fee <tc_disable_interrupt>:
 */
void tc_disable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  408fee:	b480      	push	{r7}
  408ff0:	b087      	sub	sp, #28
  408ff2:	af00      	add	r7, sp, #0
  408ff4:	60f8      	str	r0, [r7, #12]
  408ff6:	60b9      	str	r1, [r7, #8]
  408ff8:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  408ffa:	68fa      	ldr	r2, [r7, #12]
  408ffc:	68bb      	ldr	r3, [r7, #8]
  408ffe:	019b      	lsls	r3, r3, #6
  409000:	4413      	add	r3, r2
  409002:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IDR = ul_sources;
  409004:	697b      	ldr	r3, [r7, #20]
  409006:	687a      	ldr	r2, [r7, #4]
  409008:	629a      	str	r2, [r3, #40]	; 0x28
}
  40900a:	bf00      	nop
  40900c:	371c      	adds	r7, #28
  40900e:	46bd      	mov	sp, r7
  409010:	f85d 7b04 	ldr.w	r7, [sp], #4
  409014:	4770      	bx	lr

00409016 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  409016:	b480      	push	{r7}
  409018:	b085      	sub	sp, #20
  40901a:	af00      	add	r7, sp, #0
  40901c:	6078      	str	r0, [r7, #4]
  40901e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  409020:	687a      	ldr	r2, [r7, #4]
  409022:	683b      	ldr	r3, [r7, #0]
  409024:	019b      	lsls	r3, r3, #6
  409026:	4413      	add	r3, r2
  409028:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40902a:	68fb      	ldr	r3, [r7, #12]
  40902c:	6a1b      	ldr	r3, [r3, #32]
}
  40902e:	4618      	mov	r0, r3
  409030:	3714      	adds	r7, #20
  409032:	46bd      	mov	sp, r7
  409034:	f85d 7b04 	ldr.w	r7, [sp], #4
  409038:	4770      	bx	lr

0040903a <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  40903a:	b480      	push	{r7}
  40903c:	b083      	sub	sp, #12
  40903e:	af00      	add	r7, sp, #0
  409040:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  409042:	687b      	ldr	r3, [r7, #4]
  409044:	2208      	movs	r2, #8
  409046:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  409048:	687b      	ldr	r3, [r7, #4]
  40904a:	2220      	movs	r2, #32
  40904c:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  40904e:	687b      	ldr	r3, [r7, #4]
  409050:	2204      	movs	r2, #4
  409052:	601a      	str	r2, [r3, #0]
}
  409054:	bf00      	nop
  409056:	370c      	adds	r7, #12
  409058:	46bd      	mov	sp, r7
  40905a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40905e:	4770      	bx	lr

00409060 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  409060:	b580      	push	{r7, lr}
  409062:	b084      	sub	sp, #16
  409064:	af00      	add	r7, sp, #0
  409066:	6078      	str	r0, [r7, #4]
  409068:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  40906a:	2300      	movs	r3, #0
  40906c:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40906e:	687b      	ldr	r3, [r7, #4]
  409070:	f04f 32ff 	mov.w	r2, #4294967295
  409074:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  409076:	687b      	ldr	r3, [r7, #4]
  409078:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  40907a:	6878      	ldr	r0, [r7, #4]
  40907c:	4b0e      	ldr	r3, [pc, #56]	; (4090b8 <twi_master_init+0x58>)
  40907e:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  409080:	6878      	ldr	r0, [r7, #4]
  409082:	4b0e      	ldr	r3, [pc, #56]	; (4090bc <twi_master_init+0x5c>)
  409084:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  409086:	683b      	ldr	r3, [r7, #0]
  409088:	6859      	ldr	r1, [r3, #4]
  40908a:	683b      	ldr	r3, [r7, #0]
  40908c:	681b      	ldr	r3, [r3, #0]
  40908e:	461a      	mov	r2, r3
  409090:	6878      	ldr	r0, [r7, #4]
  409092:	4b0b      	ldr	r3, [pc, #44]	; (4090c0 <twi_master_init+0x60>)
  409094:	4798      	blx	r3
  409096:	4603      	mov	r3, r0
  409098:	2b01      	cmp	r3, #1
  40909a:	d101      	bne.n	4090a0 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  40909c:	2301      	movs	r3, #1
  40909e:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  4090a0:	683b      	ldr	r3, [r7, #0]
  4090a2:	7a5b      	ldrb	r3, [r3, #9]
  4090a4:	2b01      	cmp	r3, #1
  4090a6:	d102      	bne.n	4090ae <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  4090a8:	687b      	ldr	r3, [r7, #4]
  4090aa:	2240      	movs	r2, #64	; 0x40
  4090ac:	601a      	str	r2, [r3, #0]
	}

	return status;
  4090ae:	68fb      	ldr	r3, [r7, #12]
}
  4090b0:	4618      	mov	r0, r3
  4090b2:	3710      	adds	r7, #16
  4090b4:	46bd      	mov	sp, r7
  4090b6:	bd80      	pop	{r7, pc}
  4090b8:	004093fd 	.word	0x004093fd
  4090bc:	0040903b 	.word	0x0040903b
  4090c0:	004090c5 	.word	0x004090c5

004090c4 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4090c4:	b480      	push	{r7}
  4090c6:	b089      	sub	sp, #36	; 0x24
  4090c8:	af00      	add	r7, sp, #0
  4090ca:	60f8      	str	r0, [r7, #12]
  4090cc:	60b9      	str	r1, [r7, #8]
  4090ce:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  4090d0:	2300      	movs	r3, #0
  4090d2:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4090d4:	68bb      	ldr	r3, [r7, #8]
  4090d6:	4a34      	ldr	r2, [pc, #208]	; (4091a8 <twi_set_speed+0xe4>)
  4090d8:	4293      	cmp	r3, r2
  4090da:	d901      	bls.n	4090e0 <twi_set_speed+0x1c>
		return FAIL;
  4090dc:	2301      	movs	r3, #1
  4090de:	e05d      	b.n	40919c <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4090e0:	68bb      	ldr	r3, [r7, #8]
  4090e2:	4a32      	ldr	r2, [pc, #200]	; (4091ac <twi_set_speed+0xe8>)
  4090e4:	4293      	cmp	r3, r2
  4090e6:	d937      	bls.n	409158 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4090e8:	687b      	ldr	r3, [r7, #4]
  4090ea:	4a31      	ldr	r2, [pc, #196]	; (4091b0 <twi_set_speed+0xec>)
  4090ec:	fba2 2303 	umull	r2, r3, r2, r3
  4090f0:	0b9b      	lsrs	r3, r3, #14
  4090f2:	3b03      	subs	r3, #3
  4090f4:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4090f6:	68ba      	ldr	r2, [r7, #8]
  4090f8:	4b2e      	ldr	r3, [pc, #184]	; (4091b4 <twi_set_speed+0xf0>)
  4090fa:	4413      	add	r3, r2
  4090fc:	009b      	lsls	r3, r3, #2
  4090fe:	687a      	ldr	r2, [r7, #4]
  409100:	fbb2 f3f3 	udiv	r3, r2, r3
  409104:	3b03      	subs	r3, #3
  409106:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409108:	e005      	b.n	409116 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  40910a:	69fb      	ldr	r3, [r7, #28]
  40910c:	3301      	adds	r3, #1
  40910e:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  409110:	697b      	ldr	r3, [r7, #20]
  409112:	085b      	lsrs	r3, r3, #1
  409114:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409116:	697b      	ldr	r3, [r7, #20]
  409118:	2bff      	cmp	r3, #255	; 0xff
  40911a:	d909      	bls.n	409130 <twi_set_speed+0x6c>
  40911c:	69fb      	ldr	r3, [r7, #28]
  40911e:	2b06      	cmp	r3, #6
  409120:	d9f3      	bls.n	40910a <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409122:	e005      	b.n	409130 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  409124:	69fb      	ldr	r3, [r7, #28]
  409126:	3301      	adds	r3, #1
  409128:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40912a:	693b      	ldr	r3, [r7, #16]
  40912c:	085b      	lsrs	r3, r3, #1
  40912e:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409130:	693b      	ldr	r3, [r7, #16]
  409132:	2bff      	cmp	r3, #255	; 0xff
  409134:	d902      	bls.n	40913c <twi_set_speed+0x78>
  409136:	69fb      	ldr	r3, [r7, #28]
  409138:	2b06      	cmp	r3, #6
  40913a:	d9f3      	bls.n	409124 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  40913c:	697b      	ldr	r3, [r7, #20]
  40913e:	b2da      	uxtb	r2, r3
  409140:	693b      	ldr	r3, [r7, #16]
  409142:	021b      	lsls	r3, r3, #8
  409144:	b29b      	uxth	r3, r3
  409146:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  409148:	69fb      	ldr	r3, [r7, #28]
  40914a:	041b      	lsls	r3, r3, #16
  40914c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  409150:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  409152:	68fb      	ldr	r3, [r7, #12]
  409154:	611a      	str	r2, [r3, #16]
  409156:	e020      	b.n	40919a <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  409158:	68bb      	ldr	r3, [r7, #8]
  40915a:	005b      	lsls	r3, r3, #1
  40915c:	687a      	ldr	r2, [r7, #4]
  40915e:	fbb2 f3f3 	udiv	r3, r2, r3
  409162:	3b03      	subs	r3, #3
  409164:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409166:	e005      	b.n	409174 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  409168:	69fb      	ldr	r3, [r7, #28]
  40916a:	3301      	adds	r3, #1
  40916c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40916e:	69bb      	ldr	r3, [r7, #24]
  409170:	085b      	lsrs	r3, r3, #1
  409172:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409174:	69bb      	ldr	r3, [r7, #24]
  409176:	2bff      	cmp	r3, #255	; 0xff
  409178:	d902      	bls.n	409180 <twi_set_speed+0xbc>
  40917a:	69fb      	ldr	r3, [r7, #28]
  40917c:	2b06      	cmp	r3, #6
  40917e:	d9f3      	bls.n	409168 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  409180:	69bb      	ldr	r3, [r7, #24]
  409182:	b2da      	uxtb	r2, r3
  409184:	69bb      	ldr	r3, [r7, #24]
  409186:	021b      	lsls	r3, r3, #8
  409188:	b29b      	uxth	r3, r3
  40918a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  40918c:	69fb      	ldr	r3, [r7, #28]
  40918e:	041b      	lsls	r3, r3, #16
  409190:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  409194:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  409196:	68fb      	ldr	r3, [r7, #12]
  409198:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  40919a:	2300      	movs	r3, #0
}
  40919c:	4618      	mov	r0, r3
  40919e:	3724      	adds	r7, #36	; 0x24
  4091a0:	46bd      	mov	sp, r7
  4091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4091a6:	4770      	bx	lr
  4091a8:	00061a80 	.word	0x00061a80
  4091ac:	0005dc00 	.word	0x0005dc00
  4091b0:	057619f1 	.word	0x057619f1
  4091b4:	3ffd1200 	.word	0x3ffd1200

004091b8 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  4091b8:	b480      	push	{r7}
  4091ba:	b085      	sub	sp, #20
  4091bc:	af00      	add	r7, sp, #0
  4091be:	6078      	str	r0, [r7, #4]
  4091c0:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  4091c2:	683b      	ldr	r3, [r7, #0]
  4091c4:	2b00      	cmp	r3, #0
  4091c6:	d101      	bne.n	4091cc <twi_mk_addr+0x14>
		return 0;
  4091c8:	2300      	movs	r3, #0
  4091ca:	e01d      	b.n	409208 <twi_mk_addr+0x50>

	val = addr[0];
  4091cc:	687b      	ldr	r3, [r7, #4]
  4091ce:	781b      	ldrb	r3, [r3, #0]
  4091d0:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4091d2:	683b      	ldr	r3, [r7, #0]
  4091d4:	2b01      	cmp	r3, #1
  4091d6:	dd09      	ble.n	4091ec <twi_mk_addr+0x34>
		val <<= 8;
  4091d8:	68fb      	ldr	r3, [r7, #12]
  4091da:	021b      	lsls	r3, r3, #8
  4091dc:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4091de:	687b      	ldr	r3, [r7, #4]
  4091e0:	3301      	adds	r3, #1
  4091e2:	781b      	ldrb	r3, [r3, #0]
  4091e4:	461a      	mov	r2, r3
  4091e6:	68fb      	ldr	r3, [r7, #12]
  4091e8:	4313      	orrs	r3, r2
  4091ea:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4091ec:	683b      	ldr	r3, [r7, #0]
  4091ee:	2b02      	cmp	r3, #2
  4091f0:	dd09      	ble.n	409206 <twi_mk_addr+0x4e>
		val <<= 8;
  4091f2:	68fb      	ldr	r3, [r7, #12]
  4091f4:	021b      	lsls	r3, r3, #8
  4091f6:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4091f8:	687b      	ldr	r3, [r7, #4]
  4091fa:	3302      	adds	r3, #2
  4091fc:	781b      	ldrb	r3, [r3, #0]
  4091fe:	461a      	mov	r2, r3
  409200:	68fb      	ldr	r3, [r7, #12]
  409202:	4313      	orrs	r3, r2
  409204:	60fb      	str	r3, [r7, #12]
	}
	return val;
  409206:	68fb      	ldr	r3, [r7, #12]
}
  409208:	4618      	mov	r0, r3
  40920a:	3714      	adds	r7, #20
  40920c:	46bd      	mov	sp, r7
  40920e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409212:	4770      	bx	lr

00409214 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  409214:	b580      	push	{r7, lr}
  409216:	b088      	sub	sp, #32
  409218:	af00      	add	r7, sp, #0
  40921a:	6078      	str	r0, [r7, #4]
  40921c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40921e:	683b      	ldr	r3, [r7, #0]
  409220:	68db      	ldr	r3, [r3, #12]
  409222:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  409224:	683b      	ldr	r3, [r7, #0]
  409226:	689b      	ldr	r3, [r3, #8]
  409228:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  40922a:	2300      	movs	r3, #0
  40922c:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  40922e:	f247 5330 	movw	r3, #30000	; 0x7530
  409232:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  409234:	69fb      	ldr	r3, [r7, #28]
  409236:	2b00      	cmp	r3, #0
  409238:	d101      	bne.n	40923e <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  40923a:	2301      	movs	r3, #1
  40923c:	e069      	b.n	409312 <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40923e:	687b      	ldr	r3, [r7, #4]
  409240:	2200      	movs	r2, #0
  409242:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  409244:	683b      	ldr	r3, [r7, #0]
  409246:	7c1b      	ldrb	r3, [r3, #16]
  409248:	041b      	lsls	r3, r3, #16
  40924a:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  40924e:	683b      	ldr	r3, [r7, #0]
  409250:	685b      	ldr	r3, [r3, #4]
  409252:	021b      	lsls	r3, r3, #8
  409254:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  409258:	4313      	orrs	r3, r2
  40925a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  40925e:	687b      	ldr	r3, [r7, #4]
  409260:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  409262:	687b      	ldr	r3, [r7, #4]
  409264:	2200      	movs	r2, #0
  409266:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  409268:	683a      	ldr	r2, [r7, #0]
  40926a:	683b      	ldr	r3, [r7, #0]
  40926c:	685b      	ldr	r3, [r3, #4]
  40926e:	4619      	mov	r1, r3
  409270:	4610      	mov	r0, r2
  409272:	4b2a      	ldr	r3, [pc, #168]	; (40931c <twi_master_read+0x108>)
  409274:	4798      	blx	r3
  409276:	4602      	mov	r2, r0
  409278:	687b      	ldr	r3, [r7, #4]
  40927a:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40927c:	69fb      	ldr	r3, [r7, #28]
  40927e:	2b01      	cmp	r3, #1
  409280:	d105      	bne.n	40928e <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  409282:	687b      	ldr	r3, [r7, #4]
  409284:	2203      	movs	r2, #3
  409286:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  409288:	2301      	movs	r3, #1
  40928a:	75fb      	strb	r3, [r7, #23]
  40928c:	e034      	b.n	4092f8 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40928e:	687b      	ldr	r3, [r7, #4]
  409290:	2201      	movs	r2, #1
  409292:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  409294:	2300      	movs	r3, #0
  409296:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  409298:	e02e      	b.n	4092f8 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  40929a:	687b      	ldr	r3, [r7, #4]
  40929c:	6a1b      	ldr	r3, [r3, #32]
  40929e:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4092a0:	68fb      	ldr	r3, [r7, #12]
  4092a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4092a6:	2b00      	cmp	r3, #0
  4092a8:	d001      	beq.n	4092ae <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  4092aa:	2305      	movs	r3, #5
  4092ac:	e031      	b.n	409312 <twi_master_read+0xfe>
		}

		if (!timeout--) {
  4092ae:	693b      	ldr	r3, [r7, #16]
  4092b0:	1e5a      	subs	r2, r3, #1
  4092b2:	613a      	str	r2, [r7, #16]
  4092b4:	2b00      	cmp	r3, #0
  4092b6:	d101      	bne.n	4092bc <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  4092b8:	2309      	movs	r3, #9
  4092ba:	e02a      	b.n	409312 <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4092bc:	69fb      	ldr	r3, [r7, #28]
  4092be:	2b01      	cmp	r3, #1
  4092c0:	d107      	bne.n	4092d2 <twi_master_read+0xbe>
  4092c2:	7dfb      	ldrb	r3, [r7, #23]
  4092c4:	2b00      	cmp	r3, #0
  4092c6:	d104      	bne.n	4092d2 <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  4092c8:	687b      	ldr	r3, [r7, #4]
  4092ca:	2202      	movs	r2, #2
  4092cc:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  4092ce:	2301      	movs	r3, #1
  4092d0:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  4092d2:	68fb      	ldr	r3, [r7, #12]
  4092d4:	f003 0302 	and.w	r3, r3, #2
  4092d8:	2b00      	cmp	r3, #0
  4092da:	d100      	bne.n	4092de <twi_master_read+0xca>
			continue;
  4092dc:	e00c      	b.n	4092f8 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  4092de:	69bb      	ldr	r3, [r7, #24]
  4092e0:	1c5a      	adds	r2, r3, #1
  4092e2:	61ba      	str	r2, [r7, #24]
  4092e4:	687a      	ldr	r2, [r7, #4]
  4092e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4092e8:	b2d2      	uxtb	r2, r2
  4092ea:	701a      	strb	r2, [r3, #0]

		cnt--;
  4092ec:	69fb      	ldr	r3, [r7, #28]
  4092ee:	3b01      	subs	r3, #1
  4092f0:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  4092f2:	f247 5330 	movw	r3, #30000	; 0x7530
  4092f6:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  4092f8:	69fb      	ldr	r3, [r7, #28]
  4092fa:	2b00      	cmp	r3, #0
  4092fc:	d1cd      	bne.n	40929a <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4092fe:	bf00      	nop
  409300:	687b      	ldr	r3, [r7, #4]
  409302:	6a1b      	ldr	r3, [r3, #32]
  409304:	f003 0301 	and.w	r3, r3, #1
  409308:	2b00      	cmp	r3, #0
  40930a:	d0f9      	beq.n	409300 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  40930c:	687b      	ldr	r3, [r7, #4]
  40930e:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  409310:	2300      	movs	r3, #0
}
  409312:	4618      	mov	r0, r3
  409314:	3720      	adds	r7, #32
  409316:	46bd      	mov	sp, r7
  409318:	bd80      	pop	{r7, pc}
  40931a:	bf00      	nop
  40931c:	004091b9 	.word	0x004091b9

00409320 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  409320:	b580      	push	{r7, lr}
  409322:	b086      	sub	sp, #24
  409324:	af00      	add	r7, sp, #0
  409326:	6078      	str	r0, [r7, #4]
  409328:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40932a:	683b      	ldr	r3, [r7, #0]
  40932c:	68db      	ldr	r3, [r3, #12]
  40932e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  409330:	683b      	ldr	r3, [r7, #0]
  409332:	689b      	ldr	r3, [r3, #8]
  409334:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  409336:	697b      	ldr	r3, [r7, #20]
  409338:	2b00      	cmp	r3, #0
  40933a:	d101      	bne.n	409340 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  40933c:	2301      	movs	r3, #1
  40933e:	e056      	b.n	4093ee <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  409340:	687b      	ldr	r3, [r7, #4]
  409342:	2200      	movs	r2, #0
  409344:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  409346:	683b      	ldr	r3, [r7, #0]
  409348:	7c1b      	ldrb	r3, [r3, #16]
  40934a:	041b      	lsls	r3, r3, #16
  40934c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  409350:	683b      	ldr	r3, [r7, #0]
  409352:	685b      	ldr	r3, [r3, #4]
  409354:	021b      	lsls	r3, r3, #8
  409356:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40935a:	431a      	orrs	r2, r3
  40935c:	687b      	ldr	r3, [r7, #4]
  40935e:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  409360:	687b      	ldr	r3, [r7, #4]
  409362:	2200      	movs	r2, #0
  409364:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  409366:	683a      	ldr	r2, [r7, #0]
  409368:	683b      	ldr	r3, [r7, #0]
  40936a:	685b      	ldr	r3, [r3, #4]
  40936c:	4619      	mov	r1, r3
  40936e:	4610      	mov	r0, r2
  409370:	4b21      	ldr	r3, [pc, #132]	; (4093f8 <twi_master_write+0xd8>)
  409372:	4798      	blx	r3
  409374:	4602      	mov	r2, r0
  409376:	687b      	ldr	r3, [r7, #4]
  409378:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  40937a:	e019      	b.n	4093b0 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  40937c:	687b      	ldr	r3, [r7, #4]
  40937e:	6a1b      	ldr	r3, [r3, #32]
  409380:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  409382:	68fb      	ldr	r3, [r7, #12]
  409384:	f403 7380 	and.w	r3, r3, #256	; 0x100
  409388:	2b00      	cmp	r3, #0
  40938a:	d001      	beq.n	409390 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  40938c:	2305      	movs	r3, #5
  40938e:	e02e      	b.n	4093ee <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  409390:	68fb      	ldr	r3, [r7, #12]
  409392:	f003 0304 	and.w	r3, r3, #4
  409396:	2b00      	cmp	r3, #0
  409398:	d100      	bne.n	40939c <twi_master_write+0x7c>
			continue;
  40939a:	e009      	b.n	4093b0 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  40939c:	693b      	ldr	r3, [r7, #16]
  40939e:	1c5a      	adds	r2, r3, #1
  4093a0:	613a      	str	r2, [r7, #16]
  4093a2:	781b      	ldrb	r3, [r3, #0]
  4093a4:	461a      	mov	r2, r3
  4093a6:	687b      	ldr	r3, [r7, #4]
  4093a8:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  4093aa:	697b      	ldr	r3, [r7, #20]
  4093ac:	3b01      	subs	r3, #1
  4093ae:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  4093b0:	697b      	ldr	r3, [r7, #20]
  4093b2:	2b00      	cmp	r3, #0
  4093b4:	d1e2      	bne.n	40937c <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  4093b6:	687b      	ldr	r3, [r7, #4]
  4093b8:	6a1b      	ldr	r3, [r3, #32]
  4093ba:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4093bc:	68fb      	ldr	r3, [r7, #12]
  4093be:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4093c2:	2b00      	cmp	r3, #0
  4093c4:	d001      	beq.n	4093ca <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  4093c6:	2305      	movs	r3, #5
  4093c8:	e011      	b.n	4093ee <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  4093ca:	68fb      	ldr	r3, [r7, #12]
  4093cc:	f003 0304 	and.w	r3, r3, #4
  4093d0:	2b00      	cmp	r3, #0
  4093d2:	d100      	bne.n	4093d6 <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  4093d4:	e7ef      	b.n	4093b6 <twi_master_write+0x96>
			break;
  4093d6:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4093d8:	687b      	ldr	r3, [r7, #4]
  4093da:	2202      	movs	r2, #2
  4093dc:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4093de:	bf00      	nop
  4093e0:	687b      	ldr	r3, [r7, #4]
  4093e2:	6a1b      	ldr	r3, [r3, #32]
  4093e4:	f003 0301 	and.w	r3, r3, #1
  4093e8:	2b00      	cmp	r3, #0
  4093ea:	d0f9      	beq.n	4093e0 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  4093ec:	2300      	movs	r3, #0
}
  4093ee:	4618      	mov	r0, r3
  4093f0:	3718      	adds	r7, #24
  4093f2:	46bd      	mov	sp, r7
  4093f4:	bd80      	pop	{r7, pc}
  4093f6:	bf00      	nop
  4093f8:	004091b9 	.word	0x004091b9

004093fc <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4093fc:	b480      	push	{r7}
  4093fe:	b083      	sub	sp, #12
  409400:	af00      	add	r7, sp, #0
  409402:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  409404:	687b      	ldr	r3, [r7, #4]
  409406:	2280      	movs	r2, #128	; 0x80
  409408:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  40940a:	687b      	ldr	r3, [r7, #4]
  40940c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  40940e:	bf00      	nop
  409410:	370c      	adds	r7, #12
  409412:	46bd      	mov	sp, r7
  409414:	f85d 7b04 	ldr.w	r7, [sp], #4
  409418:	4770      	bx	lr

0040941a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40941a:	b480      	push	{r7}
  40941c:	b089      	sub	sp, #36	; 0x24
  40941e:	af00      	add	r7, sp, #0
  409420:	60f8      	str	r0, [r7, #12]
  409422:	60b9      	str	r1, [r7, #8]
  409424:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  409426:	68bb      	ldr	r3, [r7, #8]
  409428:	011a      	lsls	r2, r3, #4
  40942a:	687b      	ldr	r3, [r7, #4]
  40942c:	429a      	cmp	r2, r3
  40942e:	d802      	bhi.n	409436 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  409430:	2310      	movs	r3, #16
  409432:	61fb      	str	r3, [r7, #28]
  409434:	e001      	b.n	40943a <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  409436:	2308      	movs	r3, #8
  409438:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40943a:	687b      	ldr	r3, [r7, #4]
  40943c:	00da      	lsls	r2, r3, #3
  40943e:	69fb      	ldr	r3, [r7, #28]
  409440:	68b9      	ldr	r1, [r7, #8]
  409442:	fb01 f303 	mul.w	r3, r1, r3
  409446:	085b      	lsrs	r3, r3, #1
  409448:	441a      	add	r2, r3
  40944a:	69fb      	ldr	r3, [r7, #28]
  40944c:	68b9      	ldr	r1, [r7, #8]
  40944e:	fb01 f303 	mul.w	r3, r1, r3
  409452:	fbb2 f3f3 	udiv	r3, r2, r3
  409456:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  409458:	69bb      	ldr	r3, [r7, #24]
  40945a:	08db      	lsrs	r3, r3, #3
  40945c:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40945e:	69bb      	ldr	r3, [r7, #24]
  409460:	f003 0307 	and.w	r3, r3, #7
  409464:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  409466:	697b      	ldr	r3, [r7, #20]
  409468:	2b00      	cmp	r3, #0
  40946a:	d003      	beq.n	409474 <usart_set_async_baudrate+0x5a>
  40946c:	697b      	ldr	r3, [r7, #20]
  40946e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  409472:	d301      	bcc.n	409478 <usart_set_async_baudrate+0x5e>
		return 1;
  409474:	2301      	movs	r3, #1
  409476:	e00f      	b.n	409498 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  409478:	69fb      	ldr	r3, [r7, #28]
  40947a:	2b08      	cmp	r3, #8
  40947c:	d105      	bne.n	40948a <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40947e:	68fb      	ldr	r3, [r7, #12]
  409480:	685b      	ldr	r3, [r3, #4]
  409482:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  409486:	68fb      	ldr	r3, [r7, #12]
  409488:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40948a:	693b      	ldr	r3, [r7, #16]
  40948c:	041a      	lsls	r2, r3, #16
  40948e:	697b      	ldr	r3, [r7, #20]
  409490:	431a      	orrs	r2, r3
  409492:	68fb      	ldr	r3, [r7, #12]
  409494:	621a      	str	r2, [r3, #32]

	return 0;
  409496:	2300      	movs	r3, #0
}
  409498:	4618      	mov	r0, r3
  40949a:	3724      	adds	r7, #36	; 0x24
  40949c:	46bd      	mov	sp, r7
  40949e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4094a2:	4770      	bx	lr

004094a4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4094a4:	b580      	push	{r7, lr}
  4094a6:	b082      	sub	sp, #8
  4094a8:	af00      	add	r7, sp, #0
  4094aa:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4094ac:	6878      	ldr	r0, [r7, #4]
  4094ae:	4b0d      	ldr	r3, [pc, #52]	; (4094e4 <usart_reset+0x40>)
  4094b0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4094b2:	687b      	ldr	r3, [r7, #4]
  4094b4:	2200      	movs	r2, #0
  4094b6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4094b8:	687b      	ldr	r3, [r7, #4]
  4094ba:	2200      	movs	r2, #0
  4094bc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4094be:	687b      	ldr	r3, [r7, #4]
  4094c0:	2200      	movs	r2, #0
  4094c2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4094c4:	6878      	ldr	r0, [r7, #4]
  4094c6:	4b08      	ldr	r3, [pc, #32]	; (4094e8 <usart_reset+0x44>)
  4094c8:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4094ca:	6878      	ldr	r0, [r7, #4]
  4094cc:	4b07      	ldr	r3, [pc, #28]	; (4094ec <usart_reset+0x48>)
  4094ce:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4094d0:	6878      	ldr	r0, [r7, #4]
  4094d2:	4b07      	ldr	r3, [pc, #28]	; (4094f0 <usart_reset+0x4c>)
  4094d4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4094d6:	6878      	ldr	r0, [r7, #4]
  4094d8:	4b06      	ldr	r3, [pc, #24]	; (4094f4 <usart_reset+0x50>)
  4094da:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4094dc:	bf00      	nop
  4094de:	3708      	adds	r7, #8
  4094e0:	46bd      	mov	sp, r7
  4094e2:	bd80      	pop	{r7, pc}
  4094e4:	00409749 	.word	0x00409749
  4094e8:	00409597 	.word	0x00409597
  4094ec:	004095cb 	.word	0x004095cb
  4094f0:	00409635 	.word	0x00409635
  4094f4:	00409651 	.word	0x00409651

004094f8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4094f8:	b580      	push	{r7, lr}
  4094fa:	b084      	sub	sp, #16
  4094fc:	af00      	add	r7, sp, #0
  4094fe:	60f8      	str	r0, [r7, #12]
  409500:	60b9      	str	r1, [r7, #8]
  409502:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  409504:	68f8      	ldr	r0, [r7, #12]
  409506:	4b1a      	ldr	r3, [pc, #104]	; (409570 <usart_init_rs232+0x78>)
  409508:	4798      	blx	r3

	ul_reg_val = 0;
  40950a:	4b1a      	ldr	r3, [pc, #104]	; (409574 <usart_init_rs232+0x7c>)
  40950c:	2200      	movs	r2, #0
  40950e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  409510:	68bb      	ldr	r3, [r7, #8]
  409512:	2b00      	cmp	r3, #0
  409514:	d009      	beq.n	40952a <usart_init_rs232+0x32>
  409516:	68bb      	ldr	r3, [r7, #8]
  409518:	681b      	ldr	r3, [r3, #0]
  40951a:	687a      	ldr	r2, [r7, #4]
  40951c:	4619      	mov	r1, r3
  40951e:	68f8      	ldr	r0, [r7, #12]
  409520:	4b15      	ldr	r3, [pc, #84]	; (409578 <usart_init_rs232+0x80>)
  409522:	4798      	blx	r3
  409524:	4603      	mov	r3, r0
  409526:	2b00      	cmp	r3, #0
  409528:	d001      	beq.n	40952e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40952a:	2301      	movs	r3, #1
  40952c:	e01b      	b.n	409566 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40952e:	68bb      	ldr	r3, [r7, #8]
  409530:	685a      	ldr	r2, [r3, #4]
  409532:	68bb      	ldr	r3, [r7, #8]
  409534:	689b      	ldr	r3, [r3, #8]
  409536:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  409538:	68bb      	ldr	r3, [r7, #8]
  40953a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40953c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40953e:	68bb      	ldr	r3, [r7, #8]
  409540:	68db      	ldr	r3, [r3, #12]
  409542:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  409544:	4b0b      	ldr	r3, [pc, #44]	; (409574 <usart_init_rs232+0x7c>)
  409546:	681b      	ldr	r3, [r3, #0]
  409548:	4313      	orrs	r3, r2
  40954a:	4a0a      	ldr	r2, [pc, #40]	; (409574 <usart_init_rs232+0x7c>)
  40954c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40954e:	4b09      	ldr	r3, [pc, #36]	; (409574 <usart_init_rs232+0x7c>)
  409550:	681b      	ldr	r3, [r3, #0]
  409552:	4a08      	ldr	r2, [pc, #32]	; (409574 <usart_init_rs232+0x7c>)
  409554:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  409556:	68fb      	ldr	r3, [r7, #12]
  409558:	685a      	ldr	r2, [r3, #4]
  40955a:	4b06      	ldr	r3, [pc, #24]	; (409574 <usart_init_rs232+0x7c>)
  40955c:	681b      	ldr	r3, [r3, #0]
  40955e:	431a      	orrs	r2, r3
  409560:	68fb      	ldr	r3, [r7, #12]
  409562:	605a      	str	r2, [r3, #4]

	return 0;
  409564:	2300      	movs	r3, #0
}
  409566:	4618      	mov	r0, r3
  409568:	3710      	adds	r7, #16
  40956a:	46bd      	mov	sp, r7
  40956c:	bd80      	pop	{r7, pc}
  40956e:	bf00      	nop
  409570:	004094a5 	.word	0x004094a5
  409574:	20004694 	.word	0x20004694
  409578:	0040941b 	.word	0x0040941b

0040957c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40957c:	b480      	push	{r7}
  40957e:	b083      	sub	sp, #12
  409580:	af00      	add	r7, sp, #0
  409582:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  409584:	687b      	ldr	r3, [r7, #4]
  409586:	2240      	movs	r2, #64	; 0x40
  409588:	601a      	str	r2, [r3, #0]
}
  40958a:	bf00      	nop
  40958c:	370c      	adds	r7, #12
  40958e:	46bd      	mov	sp, r7
  409590:	f85d 7b04 	ldr.w	r7, [sp], #4
  409594:	4770      	bx	lr

00409596 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  409596:	b480      	push	{r7}
  409598:	b083      	sub	sp, #12
  40959a:	af00      	add	r7, sp, #0
  40959c:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40959e:	687b      	ldr	r3, [r7, #4]
  4095a0:	2288      	movs	r2, #136	; 0x88
  4095a2:	601a      	str	r2, [r3, #0]
}
  4095a4:	bf00      	nop
  4095a6:	370c      	adds	r7, #12
  4095a8:	46bd      	mov	sp, r7
  4095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4095ae:	4770      	bx	lr

004095b0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4095b0:	b480      	push	{r7}
  4095b2:	b083      	sub	sp, #12
  4095b4:	af00      	add	r7, sp, #0
  4095b6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4095b8:	687b      	ldr	r3, [r7, #4]
  4095ba:	2210      	movs	r2, #16
  4095bc:	601a      	str	r2, [r3, #0]
}
  4095be:	bf00      	nop
  4095c0:	370c      	adds	r7, #12
  4095c2:	46bd      	mov	sp, r7
  4095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4095c8:	4770      	bx	lr

004095ca <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4095ca:	b480      	push	{r7}
  4095cc:	b083      	sub	sp, #12
  4095ce:	af00      	add	r7, sp, #0
  4095d0:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4095d2:	687b      	ldr	r3, [r7, #4]
  4095d4:	2224      	movs	r2, #36	; 0x24
  4095d6:	601a      	str	r2, [r3, #0]
}
  4095d8:	bf00      	nop
  4095da:	370c      	adds	r7, #12
  4095dc:	46bd      	mov	sp, r7
  4095de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4095e2:	4770      	bx	lr

004095e4 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4095e4:	b480      	push	{r7}
  4095e6:	b083      	sub	sp, #12
  4095e8:	af00      	add	r7, sp, #0
  4095ea:	6078      	str	r0, [r7, #4]
  4095ec:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4095ee:	687b      	ldr	r3, [r7, #4]
  4095f0:	683a      	ldr	r2, [r7, #0]
  4095f2:	609a      	str	r2, [r3, #8]
}
  4095f4:	bf00      	nop
  4095f6:	370c      	adds	r7, #12
  4095f8:	46bd      	mov	sp, r7
  4095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4095fe:	4770      	bx	lr

00409600 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  409600:	b480      	push	{r7}
  409602:	b083      	sub	sp, #12
  409604:	af00      	add	r7, sp, #0
  409606:	6078      	str	r0, [r7, #4]
  409608:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40960a:	687b      	ldr	r3, [r7, #4]
  40960c:	683a      	ldr	r2, [r7, #0]
  40960e:	60da      	str	r2, [r3, #12]
}
  409610:	bf00      	nop
  409612:	370c      	adds	r7, #12
  409614:	46bd      	mov	sp, r7
  409616:	f85d 7b04 	ldr.w	r7, [sp], #4
  40961a:	4770      	bx	lr

0040961c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40961c:	b480      	push	{r7}
  40961e:	b083      	sub	sp, #12
  409620:	af00      	add	r7, sp, #0
  409622:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  409624:	687b      	ldr	r3, [r7, #4]
  409626:	695b      	ldr	r3, [r3, #20]
}
  409628:	4618      	mov	r0, r3
  40962a:	370c      	adds	r7, #12
  40962c:	46bd      	mov	sp, r7
  40962e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409632:	4770      	bx	lr

00409634 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  409634:	b480      	push	{r7}
  409636:	b083      	sub	sp, #12
  409638:	af00      	add	r7, sp, #0
  40963a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40963c:	687b      	ldr	r3, [r7, #4]
  40963e:	f44f 7280 	mov.w	r2, #256	; 0x100
  409642:	601a      	str	r2, [r3, #0]
}
  409644:	bf00      	nop
  409646:	370c      	adds	r7, #12
  409648:	46bd      	mov	sp, r7
  40964a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40964e:	4770      	bx	lr

00409650 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  409650:	b480      	push	{r7}
  409652:	b083      	sub	sp, #12
  409654:	af00      	add	r7, sp, #0
  409656:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  409658:	687b      	ldr	r3, [r7, #4]
  40965a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40965e:	601a      	str	r2, [r3, #0]
}
  409660:	bf00      	nop
  409662:	370c      	adds	r7, #12
  409664:	46bd      	mov	sp, r7
  409666:	f85d 7b04 	ldr.w	r7, [sp], #4
  40966a:	4770      	bx	lr

0040966c <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  40966c:	b480      	push	{r7}
  40966e:	b085      	sub	sp, #20
  409670:	af00      	add	r7, sp, #0
  409672:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  409674:	2300      	movs	r3, #0
  409676:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  409678:	687b      	ldr	r3, [r7, #4]
  40967a:	4a23      	ldr	r2, [pc, #140]	; (409708 <usart_get_pdc_base+0x9c>)
  40967c:	4293      	cmp	r3, r2
  40967e:	d103      	bne.n	409688 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  409680:	4b22      	ldr	r3, [pc, #136]	; (40970c <usart_get_pdc_base+0xa0>)
  409682:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  409684:	68fb      	ldr	r3, [r7, #12]
  409686:	e038      	b.n	4096fa <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  409688:	687b      	ldr	r3, [r7, #4]
  40968a:	4a21      	ldr	r2, [pc, #132]	; (409710 <usart_get_pdc_base+0xa4>)
  40968c:	4293      	cmp	r3, r2
  40968e:	d103      	bne.n	409698 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  409690:	4b20      	ldr	r3, [pc, #128]	; (409714 <usart_get_pdc_base+0xa8>)
  409692:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  409694:	68fb      	ldr	r3, [r7, #12]
  409696:	e030      	b.n	4096fa <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
  409698:	687b      	ldr	r3, [r7, #4]
  40969a:	4a1f      	ldr	r2, [pc, #124]	; (409718 <usart_get_pdc_base+0xac>)
  40969c:	4293      	cmp	r3, r2
  40969e:	d103      	bne.n	4096a8 <usart_get_pdc_base+0x3c>
		p_pdc_base = PDC_USART2;
  4096a0:	4b1e      	ldr	r3, [pc, #120]	; (40971c <usart_get_pdc_base+0xb0>)
  4096a2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096a4:	68fb      	ldr	r3, [r7, #12]
  4096a6:	e028      	b.n	4096fa <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
  4096a8:	687b      	ldr	r3, [r7, #4]
  4096aa:	4a1d      	ldr	r2, [pc, #116]	; (409720 <usart_get_pdc_base+0xb4>)
  4096ac:	4293      	cmp	r3, r2
  4096ae:	d103      	bne.n	4096b8 <usart_get_pdc_base+0x4c>
		p_pdc_base = PDC_USART3;
  4096b0:	4b1c      	ldr	r3, [pc, #112]	; (409724 <usart_get_pdc_base+0xb8>)
  4096b2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096b4:	68fb      	ldr	r3, [r7, #12]
  4096b6:	e020      	b.n	4096fa <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
  4096b8:	687b      	ldr	r3, [r7, #4]
  4096ba:	4a1b      	ldr	r2, [pc, #108]	; (409728 <usart_get_pdc_base+0xbc>)
  4096bc:	4293      	cmp	r3, r2
  4096be:	d103      	bne.n	4096c8 <usart_get_pdc_base+0x5c>
		p_pdc_base = PDC_USART4;
  4096c0:	4b1a      	ldr	r3, [pc, #104]	; (40972c <usart_get_pdc_base+0xc0>)
  4096c2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096c4:	68fb      	ldr	r3, [r7, #12]
  4096c6:	e018      	b.n	4096fa <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
  4096c8:	687b      	ldr	r3, [r7, #4]
  4096ca:	4a19      	ldr	r2, [pc, #100]	; (409730 <usart_get_pdc_base+0xc4>)
  4096cc:	4293      	cmp	r3, r2
  4096ce:	d103      	bne.n	4096d8 <usart_get_pdc_base+0x6c>
		p_pdc_base = PDC_USART5;
  4096d0:	4b18      	ldr	r3, [pc, #96]	; (409734 <usart_get_pdc_base+0xc8>)
  4096d2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096d4:	68fb      	ldr	r3, [r7, #12]
  4096d6:	e010      	b.n	4096fa <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
  4096d8:	687b      	ldr	r3, [r7, #4]
  4096da:	4a17      	ldr	r2, [pc, #92]	; (409738 <usart_get_pdc_base+0xcc>)
  4096dc:	4293      	cmp	r3, r2
  4096de:	d103      	bne.n	4096e8 <usart_get_pdc_base+0x7c>
		p_pdc_base = PDC_USART6;
  4096e0:	4b16      	ldr	r3, [pc, #88]	; (40973c <usart_get_pdc_base+0xd0>)
  4096e2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096e4:	68fb      	ldr	r3, [r7, #12]
  4096e6:	e008      	b.n	4096fa <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART7
	else if (p_usart == USART7) {
  4096e8:	687b      	ldr	r3, [r7, #4]
  4096ea:	4a15      	ldr	r2, [pc, #84]	; (409740 <usart_get_pdc_base+0xd4>)
  4096ec:	4293      	cmp	r3, r2
  4096ee:	d103      	bne.n	4096f8 <usart_get_pdc_base+0x8c>
		p_pdc_base = PDC_USART7;
  4096f0:	4b14      	ldr	r3, [pc, #80]	; (409744 <usart_get_pdc_base+0xd8>)
  4096f2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096f4:	68fb      	ldr	r3, [r7, #12]
  4096f6:	e000      	b.n	4096fa <usart_get_pdc_base+0x8e>
	}
#endif

	return p_pdc_base;
  4096f8:	68fb      	ldr	r3, [r7, #12]
}
  4096fa:	4618      	mov	r0, r3
  4096fc:	3714      	adds	r7, #20
  4096fe:	46bd      	mov	sp, r7
  409700:	f85d 7b04 	ldr.w	r7, [sp], #4
  409704:	4770      	bx	lr
  409706:	bf00      	nop
  409708:	4000c200 	.word	0x4000c200
  40970c:	4000c300 	.word	0x4000c300
  409710:	40020200 	.word	0x40020200
  409714:	40020300 	.word	0x40020300
  409718:	40024200 	.word	0x40024200
  40971c:	40024300 	.word	0x40024300
  409720:	40018200 	.word	0x40018200
  409724:	40018300 	.word	0x40018300
  409728:	4001c200 	.word	0x4001c200
  40972c:	4001c300 	.word	0x4001c300
  409730:	40008200 	.word	0x40008200
  409734:	40008300 	.word	0x40008300
  409738:	40040200 	.word	0x40040200
  40973c:	40040300 	.word	0x40040300
  409740:	40034200 	.word	0x40034200
  409744:	40034300 	.word	0x40034300

00409748 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  409748:	b480      	push	{r7}
  40974a:	b083      	sub	sp, #12
  40974c:	af00      	add	r7, sp, #0
  40974e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  409750:	687b      	ldr	r3, [r7, #4]
  409752:	4a04      	ldr	r2, [pc, #16]	; (409764 <usart_disable_writeprotect+0x1c>)
  409754:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  409758:	bf00      	nop
  40975a:	370c      	adds	r7, #12
  40975c:	46bd      	mov	sp, r7
  40975e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409762:	4770      	bx	lr
  409764:	55534100 	.word	0x55534100

00409768 <cpu_irq_save>:
{
  409768:	b480      	push	{r7}
  40976a:	b083      	sub	sp, #12
  40976c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40976e:	f3ef 8310 	mrs	r3, PRIMASK
  409772:	607b      	str	r3, [r7, #4]
  return(result);
  409774:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  409776:	2b00      	cmp	r3, #0
  409778:	bf0c      	ite	eq
  40977a:	2301      	moveq	r3, #1
  40977c:	2300      	movne	r3, #0
  40977e:	b2db      	uxtb	r3, r3
  409780:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  409782:	b672      	cpsid	i
  409784:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  409788:	4b04      	ldr	r3, [pc, #16]	; (40979c <cpu_irq_save+0x34>)
  40978a:	2200      	movs	r2, #0
  40978c:	701a      	strb	r2, [r3, #0]
	return flags;
  40978e:	683b      	ldr	r3, [r7, #0]
}
  409790:	4618      	mov	r0, r3
  409792:	370c      	adds	r7, #12
  409794:	46bd      	mov	sp, r7
  409796:	f85d 7b04 	ldr.w	r7, [sp], #4
  40979a:	4770      	bx	lr
  40979c:	2000250c 	.word	0x2000250c

004097a0 <cpu_irq_is_enabled_flags>:
{
  4097a0:	b480      	push	{r7}
  4097a2:	b083      	sub	sp, #12
  4097a4:	af00      	add	r7, sp, #0
  4097a6:	6078      	str	r0, [r7, #4]
	return (flags);
  4097a8:	687b      	ldr	r3, [r7, #4]
  4097aa:	2b00      	cmp	r3, #0
  4097ac:	bf14      	ite	ne
  4097ae:	2301      	movne	r3, #1
  4097b0:	2300      	moveq	r3, #0
  4097b2:	b2db      	uxtb	r3, r3
}
  4097b4:	4618      	mov	r0, r3
  4097b6:	370c      	adds	r7, #12
  4097b8:	46bd      	mov	sp, r7
  4097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4097be:	4770      	bx	lr

004097c0 <cpu_irq_restore>:
{
  4097c0:	b580      	push	{r7, lr}
  4097c2:	b082      	sub	sp, #8
  4097c4:	af00      	add	r7, sp, #0
  4097c6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4097c8:	6878      	ldr	r0, [r7, #4]
  4097ca:	4b07      	ldr	r3, [pc, #28]	; (4097e8 <cpu_irq_restore+0x28>)
  4097cc:	4798      	blx	r3
  4097ce:	4603      	mov	r3, r0
  4097d0:	2b00      	cmp	r3, #0
  4097d2:	d005      	beq.n	4097e0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4097d4:	4b05      	ldr	r3, [pc, #20]	; (4097ec <cpu_irq_restore+0x2c>)
  4097d6:	2201      	movs	r2, #1
  4097d8:	701a      	strb	r2, [r3, #0]
  4097da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4097de:	b662      	cpsie	i
}
  4097e0:	bf00      	nop
  4097e2:	3708      	adds	r7, #8
  4097e4:	46bd      	mov	sp, r7
  4097e6:	bd80      	pop	{r7, pc}
  4097e8:	004097a1 	.word	0x004097a1
  4097ec:	2000250c 	.word	0x2000250c

004097f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4097f0:	b580      	push	{r7, lr}
  4097f2:	b084      	sub	sp, #16
  4097f4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4097f6:	4b25      	ldr	r3, [pc, #148]	; (40988c <Reset_Handler+0x9c>)
  4097f8:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  4097fa:	4b25      	ldr	r3, [pc, #148]	; (409890 <Reset_Handler+0xa0>)
  4097fc:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  4097fe:	68fa      	ldr	r2, [r7, #12]
  409800:	68bb      	ldr	r3, [r7, #8]
  409802:	429a      	cmp	r2, r3
  409804:	d00c      	beq.n	409820 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  409806:	e007      	b.n	409818 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  409808:	68bb      	ldr	r3, [r7, #8]
  40980a:	1d1a      	adds	r2, r3, #4
  40980c:	60ba      	str	r2, [r7, #8]
  40980e:	68fa      	ldr	r2, [r7, #12]
  409810:	1d11      	adds	r1, r2, #4
  409812:	60f9      	str	r1, [r7, #12]
  409814:	6812      	ldr	r2, [r2, #0]
  409816:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  409818:	68bb      	ldr	r3, [r7, #8]
  40981a:	4a1e      	ldr	r2, [pc, #120]	; (409894 <Reset_Handler+0xa4>)
  40981c:	4293      	cmp	r3, r2
  40981e:	d3f3      	bcc.n	409808 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  409820:	4b1d      	ldr	r3, [pc, #116]	; (409898 <Reset_Handler+0xa8>)
  409822:	60bb      	str	r3, [r7, #8]
  409824:	e004      	b.n	409830 <Reset_Handler+0x40>
                *pDest++ = 0;
  409826:	68bb      	ldr	r3, [r7, #8]
  409828:	1d1a      	adds	r2, r3, #4
  40982a:	60ba      	str	r2, [r7, #8]
  40982c:	2200      	movs	r2, #0
  40982e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  409830:	68bb      	ldr	r3, [r7, #8]
  409832:	4a1a      	ldr	r2, [pc, #104]	; (40989c <Reset_Handler+0xac>)
  409834:	4293      	cmp	r3, r2
  409836:	d3f6      	bcc.n	409826 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  409838:	4b19      	ldr	r3, [pc, #100]	; (4098a0 <Reset_Handler+0xb0>)
  40983a:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40983c:	4a19      	ldr	r2, [pc, #100]	; (4098a4 <Reset_Handler+0xb4>)
  40983e:	68fb      	ldr	r3, [r7, #12]
  409840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  409844:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  409846:	4b18      	ldr	r3, [pc, #96]	; (4098a8 <Reset_Handler+0xb8>)
  409848:	4798      	blx	r3
  40984a:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  40984c:	4a17      	ldr	r2, [pc, #92]	; (4098ac <Reset_Handler+0xbc>)
  40984e:	4b17      	ldr	r3, [pc, #92]	; (4098ac <Reset_Handler+0xbc>)
  409850:	681b      	ldr	r3, [r3, #0]
  409852:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  409856:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  409858:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40985c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  409860:	6878      	ldr	r0, [r7, #4]
  409862:	4b13      	ldr	r3, [pc, #76]	; (4098b0 <Reset_Handler+0xc0>)
  409864:	4798      	blx	r3

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  409866:	68fb      	ldr	r3, [r7, #12]
  409868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40986c:	d309      	bcc.n	409882 <Reset_Handler+0x92>
  40986e:	68fb      	ldr	r3, [r7, #12]
  409870:	4a10      	ldr	r2, [pc, #64]	; (4098b4 <Reset_Handler+0xc4>)
  409872:	4293      	cmp	r3, r2
  409874:	d805      	bhi.n	409882 <Reset_Handler+0x92>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  409876:	4a0b      	ldr	r2, [pc, #44]	; (4098a4 <Reset_Handler+0xb4>)
  409878:	4b0a      	ldr	r3, [pc, #40]	; (4098a4 <Reset_Handler+0xb4>)
  40987a:	689b      	ldr	r3, [r3, #8]
  40987c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  409880:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  409882:	4b0d      	ldr	r3, [pc, #52]	; (4098b8 <Reset_Handler+0xc8>)
  409884:	4798      	blx	r3

        /* Branch to main function */
        main();
  409886:	4b0d      	ldr	r3, [pc, #52]	; (4098bc <Reset_Handler+0xcc>)
  409888:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40988a:	e7fe      	b.n	40988a <Reset_Handler+0x9a>
  40988c:	00413bd4 	.word	0x00413bd4
  409890:	20000000 	.word	0x20000000
  409894:	20002ec8 	.word	0x20002ec8
  409898:	20002ec8 	.word	0x20002ec8
  40989c:	200052e8 	.word	0x200052e8
  4098a0:	00400000 	.word	0x00400000
  4098a4:	e000ed00 	.word	0xe000ed00
  4098a8:	00409769 	.word	0x00409769
  4098ac:	e000ed88 	.word	0xe000ed88
  4098b0:	004097c1 	.word	0x004097c1
  4098b4:	20027fff 	.word	0x20027fff
  4098b8:	0040f1e1 	.word	0x0040f1e1
  4098bc:	00401259 	.word	0x00401259

004098c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4098c0:	b480      	push	{r7}
  4098c2:	af00      	add	r7, sp, #0
        while (1) {
  4098c4:	e7fe      	b.n	4098c4 <Dummy_Handler+0x4>
	...

004098c8 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
  4098c8:	b480      	push	{r7}
  4098ca:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4098cc:	4b41      	ldr	r3, [pc, #260]	; (4099d4 <SystemCoreClockUpdate+0x10c>)
  4098ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4098d0:	f003 0303 	and.w	r3, r3, #3
  4098d4:	2b01      	cmp	r3, #1
  4098d6:	d014      	beq.n	409902 <SystemCoreClockUpdate+0x3a>
  4098d8:	2b01      	cmp	r3, #1
  4098da:	d302      	bcc.n	4098e2 <SystemCoreClockUpdate+0x1a>
  4098dc:	2b02      	cmp	r3, #2
  4098de:	d038      	beq.n	409952 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
					CKGR_PLLAR_MULA_Pos) + 1U);
		}
		break;
	default:
		break;
  4098e0:	e059      	b.n	409996 <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4098e2:	4b3d      	ldr	r3, [pc, #244]	; (4099d8 <SystemCoreClockUpdate+0x110>)
  4098e4:	695b      	ldr	r3, [r3, #20]
  4098e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4098ea:	2b00      	cmp	r3, #0
  4098ec:	d004      	beq.n	4098f8 <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4098ee:	4b3b      	ldr	r3, [pc, #236]	; (4099dc <SystemCoreClockUpdate+0x114>)
  4098f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4098f4:	601a      	str	r2, [r3, #0]
		break;
  4098f6:	e04e      	b.n	409996 <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4098f8:	4b38      	ldr	r3, [pc, #224]	; (4099dc <SystemCoreClockUpdate+0x114>)
  4098fa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4098fe:	601a      	str	r2, [r3, #0]
		break;
  409900:	e049      	b.n	409996 <SystemCoreClockUpdate+0xce>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  409902:	4b34      	ldr	r3, [pc, #208]	; (4099d4 <SystemCoreClockUpdate+0x10c>)
  409904:	6a1b      	ldr	r3, [r3, #32]
  409906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40990a:	2b00      	cmp	r3, #0
  40990c:	d003      	beq.n	409916 <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40990e:	4b33      	ldr	r3, [pc, #204]	; (4099dc <SystemCoreClockUpdate+0x114>)
  409910:	4a33      	ldr	r2, [pc, #204]	; (4099e0 <SystemCoreClockUpdate+0x118>)
  409912:	601a      	str	r2, [r3, #0]
		break;
  409914:	e03f      	b.n	409996 <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  409916:	4b31      	ldr	r3, [pc, #196]	; (4099dc <SystemCoreClockUpdate+0x114>)
  409918:	4a32      	ldr	r2, [pc, #200]	; (4099e4 <SystemCoreClockUpdate+0x11c>)
  40991a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40991c:	4b2d      	ldr	r3, [pc, #180]	; (4099d4 <SystemCoreClockUpdate+0x10c>)
  40991e:	6a1b      	ldr	r3, [r3, #32]
  409920:	f003 0370 	and.w	r3, r3, #112	; 0x70
  409924:	2b10      	cmp	r3, #16
  409926:	d004      	beq.n	409932 <SystemCoreClockUpdate+0x6a>
  409928:	2b20      	cmp	r3, #32
  40992a:	d008      	beq.n	40993e <SystemCoreClockUpdate+0x76>
  40992c:	2b00      	cmp	r3, #0
  40992e:	d00e      	beq.n	40994e <SystemCoreClockUpdate+0x86>
				break;
  409930:	e00e      	b.n	409950 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 2U;
  409932:	4b2a      	ldr	r3, [pc, #168]	; (4099dc <SystemCoreClockUpdate+0x114>)
  409934:	681b      	ldr	r3, [r3, #0]
  409936:	005b      	lsls	r3, r3, #1
  409938:	4a28      	ldr	r2, [pc, #160]	; (4099dc <SystemCoreClockUpdate+0x114>)
  40993a:	6013      	str	r3, [r2, #0]
				break;
  40993c:	e008      	b.n	409950 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 3U;
  40993e:	4b27      	ldr	r3, [pc, #156]	; (4099dc <SystemCoreClockUpdate+0x114>)
  409940:	681a      	ldr	r2, [r3, #0]
  409942:	4613      	mov	r3, r2
  409944:	005b      	lsls	r3, r3, #1
  409946:	4413      	add	r3, r2
  409948:	4a24      	ldr	r2, [pc, #144]	; (4099dc <SystemCoreClockUpdate+0x114>)
  40994a:	6013      	str	r3, [r2, #0]
				break;
  40994c:	e000      	b.n	409950 <SystemCoreClockUpdate+0x88>
				break;
  40994e:	bf00      	nop
		break;
  409950:	e021      	b.n	409996 <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  409952:	4b21      	ldr	r3, [pc, #132]	; (4099d8 <SystemCoreClockUpdate+0x110>)
  409954:	695b      	ldr	r3, [r3, #20]
  409956:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40995a:	2b00      	cmp	r3, #0
  40995c:	d004      	beq.n	409968 <SystemCoreClockUpdate+0xa0>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40995e:	4b1f      	ldr	r3, [pc, #124]	; (4099dc <SystemCoreClockUpdate+0x114>)
  409960:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  409964:	601a      	str	r2, [r3, #0]
  409966:	e003      	b.n	409970 <SystemCoreClockUpdate+0xa8>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  409968:	4b1c      	ldr	r3, [pc, #112]	; (4099dc <SystemCoreClockUpdate+0x114>)
  40996a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40996e:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  409970:	4b18      	ldr	r3, [pc, #96]	; (4099d4 <SystemCoreClockUpdate+0x10c>)
  409972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409974:	f003 0303 	and.w	r3, r3, #3
  409978:	2b02      	cmp	r3, #2
  40997a:	d10b      	bne.n	409994 <SystemCoreClockUpdate+0xcc>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  40997c:	4b15      	ldr	r3, [pc, #84]	; (4099d4 <SystemCoreClockUpdate+0x10c>)
  40997e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409980:	0c1b      	lsrs	r3, r3, #16
  409982:	f3c3 030c 	ubfx	r3, r3, #0, #13
					CKGR_PLLAR_MULA_Pos) + 1U);
  409986:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  409988:	4a14      	ldr	r2, [pc, #80]	; (4099dc <SystemCoreClockUpdate+0x114>)
  40998a:	6812      	ldr	r2, [r2, #0]
  40998c:	fb02 f303 	mul.w	r3, r2, r3
  409990:	4a12      	ldr	r2, [pc, #72]	; (4099dc <SystemCoreClockUpdate+0x114>)
  409992:	6013      	str	r3, [r2, #0]
		break;
  409994:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  409996:	4b0f      	ldr	r3, [pc, #60]	; (4099d4 <SystemCoreClockUpdate+0x10c>)
  409998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40999a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40999e:	2b70      	cmp	r3, #112	; 0x70
  4099a0:	d108      	bne.n	4099b4 <SystemCoreClockUpdate+0xec>
		SystemCoreClock /= 3U;
  4099a2:	4b0e      	ldr	r3, [pc, #56]	; (4099dc <SystemCoreClockUpdate+0x114>)
  4099a4:	681b      	ldr	r3, [r3, #0]
  4099a6:	4a10      	ldr	r2, [pc, #64]	; (4099e8 <SystemCoreClockUpdate+0x120>)
  4099a8:	fba2 2303 	umull	r2, r3, r2, r3
  4099ac:	085b      	lsrs	r3, r3, #1
  4099ae:	4a0b      	ldr	r2, [pc, #44]	; (4099dc <SystemCoreClockUpdate+0x114>)
  4099b0:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4099b2:	e00a      	b.n	4099ca <SystemCoreClockUpdate+0x102>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4099b4:	4b07      	ldr	r3, [pc, #28]	; (4099d4 <SystemCoreClockUpdate+0x10c>)
  4099b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4099b8:	091b      	lsrs	r3, r3, #4
  4099ba:	f003 0307 	and.w	r3, r3, #7
  4099be:	4a07      	ldr	r2, [pc, #28]	; (4099dc <SystemCoreClockUpdate+0x114>)
  4099c0:	6812      	ldr	r2, [r2, #0]
  4099c2:	fa22 f303 	lsr.w	r3, r2, r3
  4099c6:	4a05      	ldr	r2, [pc, #20]	; (4099dc <SystemCoreClockUpdate+0x114>)
  4099c8:	6013      	str	r3, [r2, #0]
}
  4099ca:	bf00      	nop
  4099cc:	46bd      	mov	sp, r7
  4099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4099d2:	4770      	bx	lr
  4099d4:	400e0400 	.word	0x400e0400
  4099d8:	400e1410 	.word	0x400e1410
  4099dc:	20002510 	.word	0x20002510
  4099e0:	00b71b00 	.word	0x00b71b00
  4099e4:	007a1200 	.word	0x007a1200
  4099e8:	aaaaaaab 	.word	0xaaaaaaab

004099ec <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
  4099ec:	b480      	push	{r7}
  4099ee:	b083      	sub	sp, #12
  4099f0:	af00      	add	r7, sp, #0
  4099f2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  4099f4:	687b      	ldr	r3, [r7, #4]
  4099f6:	4a19      	ldr	r2, [pc, #100]	; (409a5c <system_init_flash+0x70>)
  4099f8:	4293      	cmp	r3, r2
  4099fa:	d804      	bhi.n	409a06 <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4099fc:	4b18      	ldr	r3, [pc, #96]	; (409a60 <system_init_flash+0x74>)
  4099fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  409a02:	601a      	str	r2, [r3, #0]
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
	}
}
  409a04:	e023      	b.n	409a4e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  409a06:	687b      	ldr	r3, [r7, #4]
  409a08:	4a16      	ldr	r2, [pc, #88]	; (409a64 <system_init_flash+0x78>)
  409a0a:	4293      	cmp	r3, r2
  409a0c:	d803      	bhi.n	409a16 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  409a0e:	4b14      	ldr	r3, [pc, #80]	; (409a60 <system_init_flash+0x74>)
  409a10:	4a15      	ldr	r2, [pc, #84]	; (409a68 <system_init_flash+0x7c>)
  409a12:	601a      	str	r2, [r3, #0]
}
  409a14:	e01b      	b.n	409a4e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  409a16:	687b      	ldr	r3, [r7, #4]
  409a18:	4a14      	ldr	r2, [pc, #80]	; (409a6c <system_init_flash+0x80>)
  409a1a:	4293      	cmp	r3, r2
  409a1c:	d803      	bhi.n	409a26 <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  409a1e:	4b10      	ldr	r3, [pc, #64]	; (409a60 <system_init_flash+0x74>)
  409a20:	4a13      	ldr	r2, [pc, #76]	; (409a70 <system_init_flash+0x84>)
  409a22:	601a      	str	r2, [r3, #0]
}
  409a24:	e013      	b.n	409a4e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  409a26:	687b      	ldr	r3, [r7, #4]
  409a28:	4a12      	ldr	r2, [pc, #72]	; (409a74 <system_init_flash+0x88>)
  409a2a:	4293      	cmp	r3, r2
  409a2c:	d803      	bhi.n	409a36 <system_init_flash+0x4a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  409a2e:	4b0c      	ldr	r3, [pc, #48]	; (409a60 <system_init_flash+0x74>)
  409a30:	4a11      	ldr	r2, [pc, #68]	; (409a78 <system_init_flash+0x8c>)
  409a32:	601a      	str	r2, [r3, #0]
}
  409a34:	e00b      	b.n	409a4e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  409a36:	687b      	ldr	r3, [r7, #4]
  409a38:	4a10      	ldr	r2, [pc, #64]	; (409a7c <system_init_flash+0x90>)
  409a3a:	4293      	cmp	r3, r2
  409a3c:	d804      	bhi.n	409a48 <system_init_flash+0x5c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  409a3e:	4b08      	ldr	r3, [pc, #32]	; (409a60 <system_init_flash+0x74>)
  409a40:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  409a44:	601a      	str	r2, [r3, #0]
}
  409a46:	e002      	b.n	409a4e <system_init_flash+0x62>
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  409a48:	4b05      	ldr	r3, [pc, #20]	; (409a60 <system_init_flash+0x74>)
  409a4a:	4a0d      	ldr	r2, [pc, #52]	; (409a80 <system_init_flash+0x94>)
  409a4c:	601a      	str	r2, [r3, #0]
}
  409a4e:	bf00      	nop
  409a50:	370c      	adds	r7, #12
  409a52:	46bd      	mov	sp, r7
  409a54:	f85d 7b04 	ldr.w	r7, [sp], #4
  409a58:	4770      	bx	lr
  409a5a:	bf00      	nop
  409a5c:	01312cff 	.word	0x01312cff
  409a60:	400e0a00 	.word	0x400e0a00
  409a64:	026259ff 	.word	0x026259ff
  409a68:	04000100 	.word	0x04000100
  409a6c:	039386ff 	.word	0x039386ff
  409a70:	04000200 	.word	0x04000200
  409a74:	04c4b3ff 	.word	0x04c4b3ff
  409a78:	04000300 	.word	0x04000300
  409a7c:	05f5e0ff 	.word	0x05f5e0ff
  409a80:	04000500 	.word	0x04000500

00409a84 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  409a84:	b480      	push	{r7}
  409a86:	b085      	sub	sp, #20
  409a88:	af00      	add	r7, sp, #0
  409a8a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  409a8c:	4b10      	ldr	r3, [pc, #64]	; (409ad0 <_sbrk+0x4c>)
  409a8e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  409a90:	4b10      	ldr	r3, [pc, #64]	; (409ad4 <_sbrk+0x50>)
  409a92:	681b      	ldr	r3, [r3, #0]
  409a94:	2b00      	cmp	r3, #0
  409a96:	d102      	bne.n	409a9e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  409a98:	4b0e      	ldr	r3, [pc, #56]	; (409ad4 <_sbrk+0x50>)
  409a9a:	4a0f      	ldr	r2, [pc, #60]	; (409ad8 <_sbrk+0x54>)
  409a9c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  409a9e:	4b0d      	ldr	r3, [pc, #52]	; (409ad4 <_sbrk+0x50>)
  409aa0:	681b      	ldr	r3, [r3, #0]
  409aa2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  409aa4:	68ba      	ldr	r2, [r7, #8]
  409aa6:	687b      	ldr	r3, [r7, #4]
  409aa8:	441a      	add	r2, r3
  409aaa:	68fb      	ldr	r3, [r7, #12]
  409aac:	429a      	cmp	r2, r3
  409aae:	dd02      	ble.n	409ab6 <_sbrk+0x32>
		return (caddr_t) -1;	
  409ab0:	f04f 33ff 	mov.w	r3, #4294967295
  409ab4:	e006      	b.n	409ac4 <_sbrk+0x40>
	}

	heap += incr;
  409ab6:	4b07      	ldr	r3, [pc, #28]	; (409ad4 <_sbrk+0x50>)
  409ab8:	681a      	ldr	r2, [r3, #0]
  409aba:	687b      	ldr	r3, [r7, #4]
  409abc:	4413      	add	r3, r2
  409abe:	4a05      	ldr	r2, [pc, #20]	; (409ad4 <_sbrk+0x50>)
  409ac0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  409ac2:	68bb      	ldr	r3, [r7, #8]
}
  409ac4:	4618      	mov	r0, r3
  409ac6:	3714      	adds	r7, #20
  409ac8:	46bd      	mov	sp, r7
  409aca:	f85d 7b04 	ldr.w	r7, [sp], #4
  409ace:	4770      	bx	lr
  409ad0:	20027ffc 	.word	0x20027ffc
  409ad4:	20004698 	.word	0x20004698
  409ad8:	200082e8 	.word	0x200082e8

00409adc <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
  409adc:	b480      	push	{r7}
  409ade:	b087      	sub	sp, #28
  409ae0:	af00      	add	r7, sp, #0
  409ae2:	60f8      	str	r0, [r7, #12]
  409ae4:	60b9      	str	r1, [r7, #8]
  409ae6:	607a      	str	r2, [r7, #4]
  409ae8:	603b      	str	r3, [r7, #0]
	us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
  409aea:	4b12      	ldr	r3, [pc, #72]	; (409b34 <translate_address+0x58>)
  409aec:	617b      	str	r3, [r7, #20]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  409aee:	68bb      	ldr	r3, [r7, #8]
  409af0:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
  409af4:	0a5b      	lsrs	r3, r3, #9
  409af6:	827b      	strh	r3, [r7, #18]
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  409af8:	68bb      	ldr	r3, [r7, #8]
  409afa:	b29b      	uxth	r3, r3
  409afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  409b00:	823b      	strh	r3, [r7, #16]
#endif

	/* Store values */
	if (pp_efc) {
  409b02:	68fb      	ldr	r3, [r7, #12]
  409b04:	2b00      	cmp	r3, #0
  409b06:	d002      	beq.n	409b0e <translate_address+0x32>
		*pp_efc = p_efc;
  409b08:	68fb      	ldr	r3, [r7, #12]
  409b0a:	697a      	ldr	r2, [r7, #20]
  409b0c:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
  409b0e:	687b      	ldr	r3, [r7, #4]
  409b10:	2b00      	cmp	r3, #0
  409b12:	d002      	beq.n	409b1a <translate_address+0x3e>
		*pus_page = us_page;
  409b14:	687b      	ldr	r3, [r7, #4]
  409b16:	8a7a      	ldrh	r2, [r7, #18]
  409b18:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
  409b1a:	683b      	ldr	r3, [r7, #0]
  409b1c:	2b00      	cmp	r3, #0
  409b1e:	d002      	beq.n	409b26 <translate_address+0x4a>
		*pus_offset = us_offset;
  409b20:	683b      	ldr	r3, [r7, #0]
  409b22:	8a3a      	ldrh	r2, [r7, #16]
  409b24:	801a      	strh	r2, [r3, #0]
	}
}
  409b26:	bf00      	nop
  409b28:	371c      	adds	r7, #28
  409b2a:	46bd      	mov	sp, r7
  409b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409b30:	4770      	bx	lr
  409b32:	bf00      	nop
  409b34:	400e0a00 	.word	0x400e0a00

00409b38 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
  409b38:	b480      	push	{r7}
  409b3a:	b087      	sub	sp, #28
  409b3c:	af00      	add	r7, sp, #0
  409b3e:	60f8      	str	r0, [r7, #12]
  409b40:	607b      	str	r3, [r7, #4]
  409b42:	460b      	mov	r3, r1
  409b44:	817b      	strh	r3, [r7, #10]
  409b46:	4613      	mov	r3, r2
  409b48:	813b      	strh	r3, [r7, #8]
/* One bank flash */
#else
	/* avoid Cppcheck Warning */
	UNUSED(p_efc);
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  409b4a:	897b      	ldrh	r3, [r7, #10]
  409b4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
  409b50:	025a      	lsls	r2, r3, #9
  409b52:	893b      	ldrh	r3, [r7, #8]
  409b54:	4413      	add	r3, r2
  409b56:	617b      	str	r3, [r7, #20]
#endif

	/* Store result */
	if (pul_addr != NULL) {
  409b58:	687b      	ldr	r3, [r7, #4]
  409b5a:	2b00      	cmp	r3, #0
  409b5c:	d002      	beq.n	409b64 <compute_address+0x2c>
		*pul_addr = ul_addr;
  409b5e:	687b      	ldr	r3, [r7, #4]
  409b60:	697a      	ldr	r2, [r7, #20]
  409b62:	601a      	str	r2, [r3, #0]
	}
}
  409b64:	bf00      	nop
  409b66:	371c      	adds	r7, #28
  409b68:	46bd      	mov	sp, r7
  409b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  409b6e:	4770      	bx	lr

00409b70 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  409b70:	b480      	push	{r7}
  409b72:	b087      	sub	sp, #28
  409b74:	af00      	add	r7, sp, #0
  409b76:	60f8      	str	r0, [r7, #12]
  409b78:	60b9      	str	r1, [r7, #8]
  409b7a:	607a      	str	r2, [r7, #4]
  409b7c:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  409b7e:	68fb      	ldr	r3, [r7, #12]
  409b80:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
  409b84:	f023 031f 	bic.w	r3, r3, #31
  409b88:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  409b8a:	68bb      	ldr	r3, [r7, #8]
  409b8c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
  409b90:	f023 031f 	bic.w	r3, r3, #31
  409b94:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
  409b98:	331f      	adds	r3, #31
  409b9a:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
  409b9c:	687b      	ldr	r3, [r7, #4]
  409b9e:	2b00      	cmp	r3, #0
  409ba0:	d002      	beq.n	409ba8 <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
  409ba2:	687b      	ldr	r3, [r7, #4]
  409ba4:	697a      	ldr	r2, [r7, #20]
  409ba6:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
  409ba8:	683b      	ldr	r3, [r7, #0]
  409baa:	2b00      	cmp	r3, #0
  409bac:	d002      	beq.n	409bb4 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
  409bae:	683b      	ldr	r3, [r7, #0]
  409bb0:	693a      	ldr	r2, [r7, #16]
  409bb2:	601a      	str	r2, [r3, #0]
	}
}
  409bb4:	bf00      	nop
  409bb6:	371c      	adds	r7, #28
  409bb8:	46bd      	mov	sp, r7
  409bba:	f85d 7b04 	ldr.w	r7, [sp], #4
  409bbe:	4770      	bx	lr

00409bc0 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
  409bc0:	b580      	push	{r7, lr}
  409bc2:	b082      	sub	sp, #8
  409bc4:	af00      	add	r7, sp, #0
  409bc6:	6078      	str	r0, [r7, #4]
  409bc8:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
  409bca:	683a      	ldr	r2, [r7, #0]
  409bcc:	6879      	ldr	r1, [r7, #4]
  409bce:	4804      	ldr	r0, [pc, #16]	; (409be0 <flash_init+0x20>)
  409bd0:	4b04      	ldr	r3, [pc, #16]	; (409be4 <flash_init+0x24>)
  409bd2:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
  409bd4:	2300      	movs	r3, #0
}
  409bd6:	4618      	mov	r0, r3
  409bd8:	3708      	adds	r7, #8
  409bda:	46bd      	mov	sp, r7
  409bdc:	bd80      	pop	{r7, pc}
  409bde:	bf00      	nop
  409be0:	400e0a00 	.word	0x400e0a00
  409be4:	00407db5 	.word	0x00407db5

00409be8 <flash_erase_sector>:
 * \param ul_address Flash sector start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_sector(uint32_t ul_address)
{
  409be8:	b590      	push	{r4, r7, lr}
  409bea:	b085      	sub	sp, #20
  409bec:	af00      	add	r7, sp, #0
  409bee:	6078      	str	r0, [r7, #4]
	Efc *p_efc;
	uint16_t us_page;

	translate_address(&p_efc, ul_address, &us_page, NULL);
  409bf0:	f107 020a 	add.w	r2, r7, #10
  409bf4:	f107 000c 	add.w	r0, r7, #12
  409bf8:	2300      	movs	r3, #0
  409bfa:	6879      	ldr	r1, [r7, #4]
  409bfc:	4c08      	ldr	r4, [pc, #32]	; (409c20 <flash_erase_sector+0x38>)
  409bfe:	47a0      	blx	r4

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
  409c00:	68fb      	ldr	r3, [r7, #12]
  409c02:	897a      	ldrh	r2, [r7, #10]
  409c04:	2111      	movs	r1, #17
  409c06:	4618      	mov	r0, r3
  409c08:	4b06      	ldr	r3, [pc, #24]	; (409c24 <flash_erase_sector+0x3c>)
  409c0a:	4798      	blx	r3
  409c0c:	4603      	mov	r3, r0
  409c0e:	2b00      	cmp	r3, #0
  409c10:	d001      	beq.n	409c16 <flash_erase_sector+0x2e>
		return FLASH_RC_ERROR;
  409c12:	2310      	movs	r3, #16
  409c14:	e000      	b.n	409c18 <flash_erase_sector+0x30>
	}

	return FLASH_RC_OK;
  409c16:	2300      	movs	r3, #0
}
  409c18:	4618      	mov	r0, r3
  409c1a:	3714      	adds	r7, #20
  409c1c:	46bd      	mov	sp, r7
  409c1e:	bd90      	pop	{r4, r7, pc}
  409c20:	00409add 	.word	0x00409add
  409c24:	00407de9 	.word	0x00407de9

00409c28 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  409c28:	b590      	push	{r4, r7, lr}
  409c2a:	b08f      	sub	sp, #60	; 0x3c
  409c2c:	af00      	add	r7, sp, #0
  409c2e:	60f8      	str	r0, [r7, #12]
  409c30:	60b9      	str	r1, [r7, #8]
  409c32:	607a      	str	r2, [r7, #4]
  409c34:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_fws_temp = 0;
  409c36:	2300      	movs	r3, #0
  409c38:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
  409c3a:	4b43      	ldr	r3, [pc, #268]	; (409d48 <flash_write+0x120>)
  409c3c:	627b      	str	r3, [r7, #36]	; 0x24

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
  409c3e:	f107 0314 	add.w	r3, r7, #20
  409c42:	f107 0216 	add.w	r2, r7, #22
  409c46:	f107 0018 	add.w	r0, r7, #24
  409c4a:	68f9      	ldr	r1, [r7, #12]
  409c4c:	4c3f      	ldr	r4, [pc, #252]	; (409d4c <flash_write+0x124>)
  409c4e:	47a0      	blx	r4
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  409c50:	e071      	b.n	409d36 <flash_write+0x10e>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  409c52:	8abb      	ldrh	r3, [r7, #20]
  409c54:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
  409c58:	687b      	ldr	r3, [r7, #4]
  409c5a:	4293      	cmp	r3, r2
  409c5c:	bf28      	it	cs
  409c5e:	4613      	movcs	r3, r2
  409c60:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
  409c62:	69b8      	ldr	r0, [r7, #24]
  409c64:	8af9      	ldrh	r1, [r7, #22]
  409c66:	f107 0310 	add.w	r3, r7, #16
  409c6a:	2200      	movs	r2, #0
  409c6c:	4c38      	ldr	r4, [pc, #224]	; (409d50 <flash_write+0x128>)
  409c6e:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  409c70:	6a3b      	ldr	r3, [r7, #32]
  409c72:	b29b      	uxth	r3, r3
  409c74:	425b      	negs	r3, r3
  409c76:	b29a      	uxth	r2, r3
  409c78:	8abb      	ldrh	r3, [r7, #20]
  409c7a:	1ad3      	subs	r3, r2, r3
  409c7c:	b29b      	uxth	r3, r3
  409c7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  409c82:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  409c84:	693b      	ldr	r3, [r7, #16]
  409c86:	4619      	mov	r1, r3
  409c88:	8abb      	ldrh	r3, [r7, #20]
  409c8a:	461a      	mov	r2, r3
  409c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
  409c8e:	4b31      	ldr	r3, [pc, #196]	; (409d54 <flash_write+0x12c>)
  409c90:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  409c92:	8abb      	ldrh	r3, [r7, #20]
  409c94:	461a      	mov	r2, r3
  409c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409c98:	4413      	add	r3, r2
  409c9a:	6a3a      	ldr	r2, [r7, #32]
  409c9c:	68b9      	ldr	r1, [r7, #8]
  409c9e:	4618      	mov	r0, r3
  409ca0:	4b2c      	ldr	r3, [pc, #176]	; (409d54 <flash_write+0x12c>)
  409ca2:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
  409ca4:	8abb      	ldrh	r3, [r7, #20]
  409ca6:	461a      	mov	r2, r3
  409ca8:	6a3b      	ldr	r3, [r7, #32]
  409caa:	4413      	add	r3, r2
  409cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  409cae:	18d0      	adds	r0, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
  409cb0:	8abb      	ldrh	r3, [r7, #20]
  409cb2:	461a      	mov	r2, r3
  409cb4:	693b      	ldr	r3, [r7, #16]
  409cb6:	441a      	add	r2, r3
  409cb8:	6a3b      	ldr	r3, [r7, #32]
  409cba:	4413      	add	r3, r2
		memcpy(puc_page_buffer + us_offset + writeSize,
  409cbc:	4619      	mov	r1, r3
  409cbe:	8bfb      	ldrh	r3, [r7, #30]
  409cc0:	461a      	mov	r2, r3
  409cc2:	4b24      	ldr	r3, [pc, #144]	; (409d54 <flash_write+0x12c>)
  409cc4:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
  409cc6:	693b      	ldr	r3, [r7, #16]
  409cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  409cca:	2300      	movs	r3, #0
  409ccc:	633b      	str	r3, [r7, #48]	; 0x30
  409cce:	e00a      	b.n	409ce6 <flash_write+0xbe>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  409cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409cd2:	1d1a      	adds	r2, r3, #4
  409cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
  409cd6:	491c      	ldr	r1, [pc, #112]	; (409d48 <flash_write+0x120>)
  409cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  409cda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  409cde:	601a      	str	r2, [r3, #0]
				++ul_idx) {
  409ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409ce2:	3301      	adds	r3, #1
  409ce4:	633b      	str	r3, [r7, #48]	; 0x30
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  409ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409ce8:	2b7f      	cmp	r3, #127	; 0x7f
  409cea:	d9f1      	bls.n	409cd0 <flash_write+0xa8>
		}

		if (ul_erase_flag) {
  409cec:	683b      	ldr	r3, [r7, #0]
  409cee:	2b00      	cmp	r3, #0
  409cf0:	d007      	beq.n	409d02 <flash_write+0xda>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  409cf2:	69bb      	ldr	r3, [r7, #24]
  409cf4:	8afa      	ldrh	r2, [r7, #22]
  409cf6:	2103      	movs	r1, #3
  409cf8:	4618      	mov	r0, r3
  409cfa:	4b17      	ldr	r3, [pc, #92]	; (409d58 <flash_write+0x130>)
  409cfc:	4798      	blx	r3
  409cfe:	6378      	str	r0, [r7, #52]	; 0x34
  409d00:	e006      	b.n	409d10 <flash_write+0xe8>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  409d02:	69bb      	ldr	r3, [r7, #24]
  409d04:	8afa      	ldrh	r2, [r7, #22]
  409d06:	2101      	movs	r1, #1
  409d08:	4618      	mov	r0, r3
  409d0a:	4b13      	ldr	r3, [pc, #76]	; (409d58 <flash_write+0x130>)
  409d0c:	4798      	blx	r3
  409d0e:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
  409d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  409d12:	2b00      	cmp	r3, #0
  409d14:	d001      	beq.n	409d1a <flash_write+0xf2>
			return ul_error;
  409d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  409d18:	e011      	b.n	409d3e <flash_write+0x116>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  409d1a:	68ba      	ldr	r2, [r7, #8]
  409d1c:	6a3b      	ldr	r3, [r7, #32]
  409d1e:	4413      	add	r3, r2
  409d20:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
  409d22:	687a      	ldr	r2, [r7, #4]
  409d24:	6a3b      	ldr	r3, [r7, #32]
  409d26:	1ad3      	subs	r3, r2, r3
  409d28:	607b      	str	r3, [r7, #4]
		us_page++;
  409d2a:	8afb      	ldrh	r3, [r7, #22]
  409d2c:	3301      	adds	r3, #1
  409d2e:	b29b      	uxth	r3, r3
  409d30:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
  409d32:	2300      	movs	r3, #0
  409d34:	82bb      	strh	r3, [r7, #20]
	while (ul_size > 0) {
  409d36:	687b      	ldr	r3, [r7, #4]
  409d38:	2b00      	cmp	r3, #0
  409d3a:	d18a      	bne.n	409c52 <flash_write+0x2a>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  409d3c:	2300      	movs	r3, #0
}
  409d3e:	4618      	mov	r0, r3
  409d40:	373c      	adds	r7, #60	; 0x3c
  409d42:	46bd      	mov	sp, r7
  409d44:	bd90      	pop	{r4, r7, pc}
  409d46:	bf00      	nop
  409d48:	2000469c 	.word	0x2000469c
  409d4c:	00409add 	.word	0x00409add
  409d50:	00409b39 	.word	0x00409b39
  409d54:	0040f841 	.word	0x0040f841
  409d58:	00407de9 	.word	0x00407de9

00409d5c <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  409d5c:	b590      	push	{r4, r7, lr}
  409d5e:	b08b      	sub	sp, #44	; 0x2c
  409d60:	af00      	add	r7, sp, #0
  409d62:	60f8      	str	r0, [r7, #12]
  409d64:	60b9      	str	r1, [r7, #8]
  409d66:	607a      	str	r2, [r7, #4]
  409d68:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
  409d6a:	2310      	movs	r3, #16
  409d6c:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
  409d6e:	f107 0314 	add.w	r3, r7, #20
  409d72:	f107 0218 	add.w	r2, r7, #24
  409d76:	68b9      	ldr	r1, [r7, #8]
  409d78:	68f8      	ldr	r0, [r7, #12]
  409d7a:	4c1c      	ldr	r4, [pc, #112]	; (409dec <flash_lock+0x90>)
  409d7c:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
  409d7e:	687b      	ldr	r3, [r7, #4]
  409d80:	2b00      	cmp	r3, #0
  409d82:	d002      	beq.n	409d8a <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
  409d84:	69ba      	ldr	r2, [r7, #24]
  409d86:	687b      	ldr	r3, [r7, #4]
  409d88:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
  409d8a:	683b      	ldr	r3, [r7, #0]
  409d8c:	2b00      	cmp	r3, #0
  409d8e:	d002      	beq.n	409d96 <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
  409d90:	697a      	ldr	r2, [r7, #20]
  409d92:	683b      	ldr	r3, [r7, #0]
  409d94:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
  409d96:	69b9      	ldr	r1, [r7, #24]
  409d98:	f107 0212 	add.w	r2, r7, #18
  409d9c:	f107 001c 	add.w	r0, r7, #28
  409da0:	2300      	movs	r3, #0
  409da2:	4c13      	ldr	r4, [pc, #76]	; (409df0 <flash_lock+0x94>)
  409da4:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
  409da6:	6979      	ldr	r1, [r7, #20]
  409da8:	f107 0210 	add.w	r2, r7, #16
  409dac:	2300      	movs	r3, #0
  409dae:	2000      	movs	r0, #0
  409db0:	4c0f      	ldr	r4, [pc, #60]	; (409df0 <flash_lock+0x94>)
  409db2:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
  409db4:	e010      	b.n	409dd8 <flash_lock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
  409db6:	69fb      	ldr	r3, [r7, #28]
  409db8:	8a7a      	ldrh	r2, [r7, #18]
  409dba:	2108      	movs	r1, #8
  409dbc:	4618      	mov	r0, r3
  409dbe:	4b0d      	ldr	r3, [pc, #52]	; (409df4 <flash_lock+0x98>)
  409dc0:	4798      	blx	r3
  409dc2:	6238      	str	r0, [r7, #32]

		if (ul_error) {
  409dc4:	6a3b      	ldr	r3, [r7, #32]
  409dc6:	2b00      	cmp	r3, #0
  409dc8:	d001      	beq.n	409dce <flash_lock+0x72>
			return ul_error;
  409dca:	6a3b      	ldr	r3, [r7, #32]
  409dcc:	e009      	b.n	409de2 <flash_lock+0x86>
		}
		us_start_page += us_num_pages_in_region;
  409dce:	8a7a      	ldrh	r2, [r7, #18]
  409dd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  409dd2:	4413      	add	r3, r2
  409dd4:	b29b      	uxth	r3, r3
  409dd6:	827b      	strh	r3, [r7, #18]
	while (us_start_page < us_end_page) {
  409dd8:	8a7a      	ldrh	r2, [r7, #18]
  409dda:	8a3b      	ldrh	r3, [r7, #16]
  409ddc:	429a      	cmp	r2, r3
  409dde:	d3ea      	bcc.n	409db6 <flash_lock+0x5a>
	}

	return FLASH_RC_OK;
  409de0:	2300      	movs	r3, #0
}
  409de2:	4618      	mov	r0, r3
  409de4:	372c      	adds	r7, #44	; 0x2c
  409de6:	46bd      	mov	sp, r7
  409de8:	bd90      	pop	{r4, r7, pc}
  409dea:	bf00      	nop
  409dec:	00409b71 	.word	0x00409b71
  409df0:	00409add 	.word	0x00409add
  409df4:	00407de9 	.word	0x00407de9

00409df8 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  409df8:	b590      	push	{r4, r7, lr}
  409dfa:	b08b      	sub	sp, #44	; 0x2c
  409dfc:	af00      	add	r7, sp, #0
  409dfe:	60f8      	str	r0, [r7, #12]
  409e00:	60b9      	str	r1, [r7, #8]
  409e02:	607a      	str	r2, [r7, #4]
  409e04:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
  409e06:	2310      	movs	r3, #16
  409e08:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
  409e0a:	f107 0314 	add.w	r3, r7, #20
  409e0e:	f107 0218 	add.w	r2, r7, #24
  409e12:	68b9      	ldr	r1, [r7, #8]
  409e14:	68f8      	ldr	r0, [r7, #12]
  409e16:	4c1c      	ldr	r4, [pc, #112]	; (409e88 <flash_unlock+0x90>)
  409e18:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
  409e1a:	687b      	ldr	r3, [r7, #4]
  409e1c:	2b00      	cmp	r3, #0
  409e1e:	d002      	beq.n	409e26 <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
  409e20:	69ba      	ldr	r2, [r7, #24]
  409e22:	687b      	ldr	r3, [r7, #4]
  409e24:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
  409e26:	683b      	ldr	r3, [r7, #0]
  409e28:	2b00      	cmp	r3, #0
  409e2a:	d002      	beq.n	409e32 <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
  409e2c:	697a      	ldr	r2, [r7, #20]
  409e2e:	683b      	ldr	r3, [r7, #0]
  409e30:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
  409e32:	69b9      	ldr	r1, [r7, #24]
  409e34:	f107 0212 	add.w	r2, r7, #18
  409e38:	f107 001c 	add.w	r0, r7, #28
  409e3c:	2300      	movs	r3, #0
  409e3e:	4c13      	ldr	r4, [pc, #76]	; (409e8c <flash_unlock+0x94>)
  409e40:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
  409e42:	6979      	ldr	r1, [r7, #20]
  409e44:	f107 0210 	add.w	r2, r7, #16
  409e48:	2300      	movs	r3, #0
  409e4a:	2000      	movs	r0, #0
  409e4c:	4c0f      	ldr	r4, [pc, #60]	; (409e8c <flash_unlock+0x94>)
  409e4e:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
  409e50:	e010      	b.n	409e74 <flash_unlock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
  409e52:	69fb      	ldr	r3, [r7, #28]
  409e54:	8a7a      	ldrh	r2, [r7, #18]
  409e56:	2109      	movs	r1, #9
  409e58:	4618      	mov	r0, r3
  409e5a:	4b0d      	ldr	r3, [pc, #52]	; (409e90 <flash_unlock+0x98>)
  409e5c:	4798      	blx	r3
  409e5e:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
  409e60:	6a3b      	ldr	r3, [r7, #32]
  409e62:	2b00      	cmp	r3, #0
  409e64:	d001      	beq.n	409e6a <flash_unlock+0x72>
			return ul_error;
  409e66:	6a3b      	ldr	r3, [r7, #32]
  409e68:	e009      	b.n	409e7e <flash_unlock+0x86>
		}
		us_start_page += us_num_pages_in_region;
  409e6a:	8a7a      	ldrh	r2, [r7, #18]
  409e6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  409e6e:	4413      	add	r3, r2
  409e70:	b29b      	uxth	r3, r3
  409e72:	827b      	strh	r3, [r7, #18]
	while (us_start_page < us_end_page) {
  409e74:	8a7a      	ldrh	r2, [r7, #18]
  409e76:	8a3b      	ldrh	r3, [r7, #16]
  409e78:	429a      	cmp	r2, r3
  409e7a:	d3ea      	bcc.n	409e52 <flash_unlock+0x5a>
	}

	return FLASH_RC_OK;
  409e7c:	2300      	movs	r3, #0
}
  409e7e:	4618      	mov	r0, r3
  409e80:	372c      	adds	r7, #44	; 0x2c
  409e82:	46bd      	mov	sp, r7
  409e84:	bd90      	pop	{r4, r7, pc}
  409e86:	bf00      	nop
  409e88:	00409b71 	.word	0x00409b71
  409e8c:	00409add 	.word	0x00409add
  409e90:	00407de9 	.word	0x00407de9

00409e94 <flash_is_locked>:
 * \param ul_end End address of range.
 *
 * \return The number of locked regions inside the given address range.
 */
uint32_t flash_is_locked(uint32_t ul_start, uint32_t ul_end)
{
  409e94:	b590      	push	{r4, r7, lr}
  409e96:	b08b      	sub	sp, #44	; 0x2c
  409e98:	af00      	add	r7, sp, #0
  409e9a:	6078      	str	r0, [r7, #4]
  409e9c:	6039      	str	r1, [r7, #0]
	uint16_t us_start_page, us_end_page;
	uint8_t uc_start_region, uc_end_region;
	uint16_t us_num_pages_in_region;
	uint32_t ul_status;
	uint32_t ul_error;
	uint32_t ul_num_locked_regions = 0;
  409e9e:	2300      	movs	r3, #0
  409ea0:	623b      	str	r3, [r7, #32]
	uint32_t ul_count = 0;
  409ea2:	2300      	movs	r3, #0
  409ea4:	61fb      	str	r3, [r7, #28]
	uint32_t ul_bit = 0;
  409ea6:	2300      	movs	r3, #0
  409ea8:	61bb      	str	r3, [r7, #24]
	Assert((ul_start >= IFLASH_ADDR)
				&& (ul_end <= IFLASH_ADDR + IFLASH_SIZE));
#endif

	/* Compute page numbers */
	translate_address(&p_efc, ul_start, &us_start_page, 0);
  409eaa:	f107 020a 	add.w	r2, r7, #10
  409eae:	f107 000c 	add.w	r0, r7, #12
  409eb2:	2300      	movs	r3, #0
  409eb4:	6879      	ldr	r1, [r7, #4]
  409eb6:	4c34      	ldr	r4, [pc, #208]	; (409f88 <flash_is_locked+0xf4>)
  409eb8:	47a0      	blx	r4
	translate_address(0, ul_end, &us_end_page, 0);
  409eba:	f107 0208 	add.w	r2, r7, #8
  409ebe:	2300      	movs	r3, #0
  409ec0:	6839      	ldr	r1, [r7, #0]
  409ec2:	2000      	movs	r0, #0
  409ec4:	4c30      	ldr	r4, [pc, #192]	; (409f88 <flash_is_locked+0xf4>)
  409ec6:	47a0      	blx	r4

	/* Compute region numbers */
	us_num_pages_in_region = IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;
  409ec8:	2310      	movs	r3, #16
  409eca:	82fb      	strh	r3, [r7, #22]
	uc_start_region = us_start_page / us_num_pages_in_region;
  409ecc:	897a      	ldrh	r2, [r7, #10]
  409ece:	8afb      	ldrh	r3, [r7, #22]
  409ed0:	fbb2 f3f3 	udiv	r3, r2, r3
  409ed4:	b29b      	uxth	r3, r3
  409ed6:	757b      	strb	r3, [r7, #21]
	uc_end_region = us_end_page / us_num_pages_in_region;
  409ed8:	893a      	ldrh	r2, [r7, #8]
  409eda:	8afb      	ldrh	r3, [r7, #22]
  409edc:	fbb2 f3f3 	udiv	r3, r2, r3
  409ee0:	b29b      	uxth	r3, r3
  409ee2:	753b      	strb	r3, [r7, #20]

	/* Retrieve lock status */
	ul_error = efc_perform_command(p_efc, EFC_FCMD_GLB, 0);
  409ee4:	68fb      	ldr	r3, [r7, #12]
  409ee6:	2200      	movs	r2, #0
  409ee8:	210a      	movs	r1, #10
  409eea:	4618      	mov	r0, r3
  409eec:	4b27      	ldr	r3, [pc, #156]	; (409f8c <flash_is_locked+0xf8>)
  409eee:	4798      	blx	r3
  409ef0:	6138      	str	r0, [r7, #16]
	if (ul_error) {
  409ef2:	693b      	ldr	r3, [r7, #16]
  409ef4:	2b00      	cmp	r3, #0
  409ef6:	d001      	beq.n	409efc <flash_is_locked+0x68>
		return ul_error;
  409ef8:	693b      	ldr	r3, [r7, #16]
  409efa:	e040      	b.n	409f7e <flash_is_locked+0xea>
	}
    UNUSED(ul_error);

	/* Skip unrequested regions (if necessary) */
	ul_status = efc_get_result(p_efc);
  409efc:	68fb      	ldr	r3, [r7, #12]
  409efe:	4618      	mov	r0, r3
  409f00:	4b23      	ldr	r3, [pc, #140]	; (409f90 <flash_is_locked+0xfc>)
  409f02:	4798      	blx	r3
  409f04:	6278      	str	r0, [r7, #36]	; 0x24
	while (!(ul_count <= uc_start_region &&
  409f06:	e007      	b.n	409f18 <flash_is_locked+0x84>
			uc_start_region < (ul_count + 32))) {
		ul_status = efc_get_result(p_efc);
  409f08:	68fb      	ldr	r3, [r7, #12]
  409f0a:	4618      	mov	r0, r3
  409f0c:	4b20      	ldr	r3, [pc, #128]	; (409f90 <flash_is_locked+0xfc>)
  409f0e:	4798      	blx	r3
  409f10:	6278      	str	r0, [r7, #36]	; 0x24
		ul_count += 32;
  409f12:	69fb      	ldr	r3, [r7, #28]
  409f14:	3320      	adds	r3, #32
  409f16:	61fb      	str	r3, [r7, #28]
	while (!(ul_count <= uc_start_region &&
  409f18:	7d7a      	ldrb	r2, [r7, #21]
  409f1a:	69fb      	ldr	r3, [r7, #28]
  409f1c:	429a      	cmp	r2, r3
  409f1e:	d3f3      	bcc.n	409f08 <flash_is_locked+0x74>
			uc_start_region < (ul_count + 32))) {
  409f20:	7d7a      	ldrb	r2, [r7, #21]
  409f22:	69fb      	ldr	r3, [r7, #28]
  409f24:	3320      	adds	r3, #32
	while (!(ul_count <= uc_start_region &&
  409f26:	429a      	cmp	r2, r3
  409f28:	d2ee      	bcs.n	409f08 <flash_is_locked+0x74>
	}

	/* Check status of each involved region */
	ul_bit = uc_start_region - ul_count;
  409f2a:	7d7a      	ldrb	r2, [r7, #21]
  409f2c:	69fb      	ldr	r3, [r7, #28]
  409f2e:	1ad3      	subs	r3, r2, r3
  409f30:	61bb      	str	r3, [r7, #24]

	/* Number of region to check (must be > 0) */
	ul_count = uc_end_region - uc_start_region + 1;
  409f32:	7d3a      	ldrb	r2, [r7, #20]
  409f34:	7d7b      	ldrb	r3, [r7, #21]
  409f36:	1ad3      	subs	r3, r2, r3
  409f38:	3301      	adds	r3, #1
  409f3a:	61fb      	str	r3, [r7, #28]

	while (ul_count > 0) {
  409f3c:	e01b      	b.n	409f76 <flash_is_locked+0xe2>
		if (ul_status & (1 << (ul_bit))) {
  409f3e:	2201      	movs	r2, #1
  409f40:	69bb      	ldr	r3, [r7, #24]
  409f42:	fa02 f303 	lsl.w	r3, r2, r3
  409f46:	461a      	mov	r2, r3
  409f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409f4a:	4013      	ands	r3, r2
  409f4c:	2b00      	cmp	r3, #0
  409f4e:	d002      	beq.n	409f56 <flash_is_locked+0xc2>
			ul_num_locked_regions++;
  409f50:	6a3b      	ldr	r3, [r7, #32]
  409f52:	3301      	adds	r3, #1
  409f54:	623b      	str	r3, [r7, #32]
		}

		ul_count -= 1;
  409f56:	69fb      	ldr	r3, [r7, #28]
  409f58:	3b01      	subs	r3, #1
  409f5a:	61fb      	str	r3, [r7, #28]
		ul_bit += 1;
  409f5c:	69bb      	ldr	r3, [r7, #24]
  409f5e:	3301      	adds	r3, #1
  409f60:	61bb      	str	r3, [r7, #24]
		if (ul_bit == 32) {
  409f62:	69bb      	ldr	r3, [r7, #24]
  409f64:	2b20      	cmp	r3, #32
  409f66:	d106      	bne.n	409f76 <flash_is_locked+0xe2>
			ul_status = efc_get_result(p_efc);
  409f68:	68fb      	ldr	r3, [r7, #12]
  409f6a:	4618      	mov	r0, r3
  409f6c:	4b08      	ldr	r3, [pc, #32]	; (409f90 <flash_is_locked+0xfc>)
  409f6e:	4798      	blx	r3
  409f70:	6278      	str	r0, [r7, #36]	; 0x24
			ul_bit = 0;
  409f72:	2300      	movs	r3, #0
  409f74:	61bb      	str	r3, [r7, #24]
	while (ul_count > 0) {
  409f76:	69fb      	ldr	r3, [r7, #28]
  409f78:	2b00      	cmp	r3, #0
  409f7a:	d1e0      	bne.n	409f3e <flash_is_locked+0xaa>
		}
	}

	return ul_num_locked_regions;
  409f7c:	6a3b      	ldr	r3, [r7, #32]
}
  409f7e:	4618      	mov	r0, r3
  409f80:	372c      	adds	r7, #44	; 0x2c
  409f82:	46bd      	mov	sp, r7
  409f84:	bd90      	pop	{r4, r7, pc}
  409f86:	bf00      	nop
  409f88:	00409add 	.word	0x00409add
  409f8c:	00407de9 	.word	0x00407de9
  409f90:	00407e49 	.word	0x00407e49

00409f94 <invn_algo_agm_process>:
  409f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f98:	2300      	movs	r3, #0
  409f9a:	4d04      	ldr	r5, [pc, #16]	; (409fac <invn_algo_agm_process+0x18>)
  409f9c:	600b      	str	r3, [r1, #0]
  409f9e:	782b      	ldrb	r3, [r5, #0]
  409fa0:	2b01      	cmp	r3, #1
  409fa2:	b0a9      	sub	sp, #164	; 0xa4
  409fa4:	d004      	beq.n	409fb0 <invn_algo_agm_process+0x1c>
  409fa6:	b029      	add	sp, #164	; 0xa4
  409fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fac:	20004ae0 	.word	0x20004ae0
  409fb0:	6803      	ldr	r3, [r0, #0]
  409fb2:	079c      	lsls	r4, r3, #30
  409fb4:	d00f      	beq.n	409fd6 <invn_algo_agm_process+0x42>
  409fb6:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	; 0x28
  409fba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  409fbc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  409fbe:	fb86 6702 	smull	r6, r7, r6, r2
  409fc2:	0bb2      	lsrs	r2, r6, #14
  409fc4:	ea42 4287 	orr.w	r2, r2, r7, lsl #18
  409fc8:	4414      	add	r4, r2
  409fca:	2264      	movs	r2, #100	; 0x64
  409fcc:	fb02 f204 	mul.w	r2, r2, r4
  409fd0:	f8c1 40b8 	str.w	r4, [r1, #184]	; 0xb8
  409fd4:	1412      	asrs	r2, r2, #16
  409fd6:	4cc5      	ldr	r4, [pc, #788]	; (40a2ec <invn_algo_agm_process+0x358>)
  409fd8:	e9d4 8900 	ldrd	r8, r9, [r4]
  409fdc:	ea58 0409 	orrs.w	r4, r8, r9
  409fe0:	d009      	beq.n	409ff6 <invn_algo_agm_process+0x62>
  409fe2:	e9d0 ab02 	ldrd	sl, fp, [r0, #8]
  409fe6:	ea5a 040b 	orrs.w	r4, sl, fp
  409fea:	d004      	beq.n	409ff6 <invn_algo_agm_process+0x62>
  409fec:	45d0      	cmp	r8, sl
  409fee:	eb79 040b 	sbcs.w	r4, r9, fp
  409ff2:	f2c0 8215 	blt.w	40a420 <invn_algo_agm_process+0x48c>
  409ff6:	2400      	movs	r4, #0
  409ff8:	9403      	str	r4, [sp, #12]
  409ffa:	4680      	mov	r8, r0
  409ffc:	07d8      	lsls	r0, r3, #31
  409ffe:	460c      	mov	r4, r1
  40a000:	f100 8182 	bmi.w	40a308 <invn_algo_agm_process+0x374>
  40a004:	69aa      	ldr	r2, [r5, #24]
  40a006:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  40a00a:	f000 821b 	beq.w	40a444 <invn_algo_agm_process+0x4b0>
  40a00e:	f340 8169 	ble.w	40a2e4 <invn_algo_agm_process+0x350>
  40a012:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
  40a016:	f000 8213 	beq.w	40a440 <invn_algo_agm_process+0x4ac>
  40a01a:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
  40a01e:	f040 81da 	bne.w	40a3d6 <invn_algo_agm_process+0x442>
  40a022:	220b      	movs	r2, #11
  40a024:	0799      	lsls	r1, r3, #30
  40a026:	f140 8114 	bpl.w	40a252 <invn_algo_agm_process+0x2be>
  40a02a:	f8d8 301c 	ldr.w	r3, [r8, #28]
  40a02e:	fa03 fa02 	lsl.w	sl, r3, r2
  40a032:	f1ba 5f00 	cmp.w	sl, #536870912	; 0x20000000
  40a036:	f340 81e8 	ble.w	40a40a <invn_algo_agm_process+0x476>
  40a03a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a03e:	9325      	str	r3, [sp, #148]	; 0x94
  40a040:	f8d8 7020 	ldr.w	r7, [r8, #32]
  40a044:	4097      	lsls	r7, r2
  40a046:	f1b7 5f00 	cmp.w	r7, #536870912	; 0x20000000
  40a04a:	f340 81d6 	ble.w	40a3fa <invn_algo_agm_process+0x466>
  40a04e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a052:	9326      	str	r3, [sp, #152]	; 0x98
  40a054:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
  40a058:	4096      	lsls	r6, r2
  40a05a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
  40a05e:	f340 81c4 	ble.w	40a3ea <invn_algo_agm_process+0x456>
  40a062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a066:	9327      	str	r3, [sp, #156]	; 0x9c
  40a068:	a925      	add	r1, sp, #148	; 0x94
  40a06a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
  40a06e:	48a0      	ldr	r0, [pc, #640]	; (40a2f0 <invn_algo_agm_process+0x35c>)
  40a070:	f001 fa9e 	bl	40b5b0 <GyroCalFnmFxp_UpdateData>
  40a074:	f8d5 32d0 	ldr.w	r3, [r5, #720]	; 0x2d0
  40a078:	f8d5 1300 	ldr.w	r1, [r5, #768]	; 0x300
  40a07c:	2b02      	cmp	r3, #2
  40a07e:	f000 81e3 	beq.w	40a448 <invn_algo_agm_process+0x4b4>
  40a082:	f8d5 22f4 	ldr.w	r2, [r5, #756]	; 0x2f4
  40a086:	f8d5 b2f8 	ldr.w	fp, [r5, #760]	; 0x2f8
  40a08a:	f8d5 32fc 	ldr.w	r3, [r5, #764]	; 0x2fc
  40a08e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  40a092:	f04f 6cfa 	mov.w	ip, #131072000	; 0x7d00000
  40a096:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40a09a:	2100      	movs	r1, #0
  40a09c:	f04f 6e7a 	mov.w	lr, #262144000	; 0xfa00000
  40a0a0:	fbcc 0102 	smlal	r0, r1, ip, r2
  40a0a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40a0a8:	fb8a 010e 	smull	r0, r1, sl, lr
  40a0ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40a0b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40a0b4:	ebaa 0262 	sub.w	r2, sl, r2, asr #1
  40a0b8:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
  40a0bc:	9222      	str	r2, [sp, #136]	; 0x88
  40a0be:	0f82      	lsrs	r2, r0, #30
  40a0c0:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
  40a0c4:	4649      	mov	r1, r9
  40a0c6:	0f88      	lsrs	r0, r1, #30
  40a0c8:	ea40 008a 	orr.w	r0, r0, sl, lsl #2
  40a0cc:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
  40a0d0:	f04f 0a00 	mov.w	sl, #0
  40a0d4:	fbcc 9a0b 	smlal	r9, sl, ip, fp
  40a0d8:	e9cd 9a06 	strd	r9, sl, [sp, #24]
  40a0dc:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
  40a0e0:	f04f 0a00 	mov.w	sl, #0
  40a0e4:	fbcc 9a03 	smlal	r9, sl, ip, r3
  40a0e8:	e9cd 9a04 	strd	r9, sl, [sp, #16]
  40a0ec:	fb87 9a0e 	smull	r9, sl, r7, lr
  40a0f0:	eba7 016b 	sub.w	r1, r7, fp, asr #1
  40a0f4:	e9cd 9a08 	strd	r9, sl, [sp, #32]
  40a0f8:	fb86 bc0e 	smull	fp, ip, r6, lr
  40a0fc:	eba6 0a63 	sub.w	sl, r6, r3, asr #1
  40a100:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  40a104:	ea4f 7e96 	mov.w	lr, r6, lsr #30
  40a108:	ea4e 0e87 	orr.w	lr, lr, r7, lsl #2
  40a10c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
  40a110:	9123      	str	r1, [sp, #140]	; 0x8c
  40a112:	0fb3      	lsrs	r3, r6, #30
  40a114:	9904      	ldr	r1, [sp, #16]
  40a116:	6462      	str	r2, [r4, #68]	; 0x44
  40a118:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
  40a11c:	9f05      	ldr	r7, [sp, #20]
  40a11e:	6323      	str	r3, [r4, #48]	; 0x30
  40a120:	0f8e      	lsrs	r6, r1, #30
  40a122:	ea46 0687 	orr.w	r6, r6, r7, lsl #2
  40a126:	ea4f 719b 	mov.w	r1, fp, lsr #30
  40a12a:	6827      	ldr	r7, [r4, #0]
  40a12c:	62e0      	str	r0, [r4, #44]	; 0x2c
  40a12e:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
  40a132:	eba3 0c0e 	sub.w	ip, r3, lr
  40a136:	9b03      	ldr	r3, [sp, #12]
  40a138:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
  40a13c:	eba0 0b02 	sub.w	fp, r0, r2
  40a140:	f047 0702 	orr.w	r7, r7, #2
  40a144:	1b8a      	subs	r2, r1, r6
  40a146:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
  40a14a:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
  40a14e:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
  40a152:	64e6      	str	r6, [r4, #76]	; 0x4c
  40a154:	6422      	str	r2, [r4, #64]	; 0x40
  40a156:	6361      	str	r1, [r4, #52]	; 0x34
  40a158:	6027      	str	r7, [r4, #0]
  40a15a:	2b00      	cmp	r3, #0
  40a15c:	f040 813d 	bne.w	40a3da <invn_algo_agm_process+0x446>
  40a160:	6a29      	ldr	r1, [r5, #32]
  40a162:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a166:	f8d8 600c 	ldr.w	r6, [r8, #12]
  40a16a:	4862      	ldr	r0, [pc, #392]	; (40a2f4 <invn_algo_agm_process+0x360>)
  40a16c:	4a62      	ldr	r2, [pc, #392]	; (40a2f8 <invn_algo_agm_process+0x364>)
  40a16e:	f8c5 37d8 	str.w	r3, [r5, #2008]	; 0x7d8
  40a172:	f8c0 65cc 	str.w	r6, [r0, #1484]	; 0x5cc
  40a176:	f002 fed5 	bl	40cf24 <SphericalFxp_SetCustomParamGyr>
  40a17a:	f8d5 2300 	ldr.w	r2, [r5, #768]	; 0x300
  40a17e:	485f      	ldr	r0, [pc, #380]	; (40a2fc <invn_algo_agm_process+0x368>)
  40a180:	a922      	add	r1, sp, #136	; 0x88
  40a182:	f002 ff5f 	bl	40d044 <SphericalFxp_UpdateGyrData>
  40a186:	f8d5 0298 	ldr.w	r0, [r5, #664]	; 0x298
  40a18a:	f8d5 629c 	ldr.w	r6, [r5, #668]	; 0x29c
  40a18e:	f8d5 12a0 	ldr.w	r1, [r5, #672]	; 0x2a0
  40a192:	6823      	ldr	r3, [r4, #0]
  40a194:	f8d5 22a4 	ldr.w	r2, [r5, #676]	; 0x2a4
  40a198:	67e0      	str	r0, [r4, #124]	; 0x7c
  40a19a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  40a19e:	4620      	mov	r0, r4
  40a1a0:	f8d5 62a8 	ldr.w	r6, [r5, #680]	; 0x2a8
  40a1a4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  40a1a8:	f8d5 12ac 	ldr.w	r1, [r5, #684]	; 0x2ac
  40a1ac:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  40a1b0:	f043 0318 	orr.w	r3, r3, #24
  40a1b4:	f8d5 22b0 	ldr.w	r2, [r5, #688]	; 0x2b0
  40a1b8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  40a1bc:	f8d5 62b4 	ldr.w	r6, [r5, #692]	; 0x2b4
  40a1c0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
  40a1c4:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
  40a1c8:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
  40a1cc:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  40a1d0:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
  40a1d4:	a916      	add	r1, sp, #88	; 0x58
  40a1d6:	f840 3b7c 	str.w	r3, [r0], #124
  40a1da:	f000 ffd3 	bl	40b184 <invn_quat_to_gravity_fxp>
  40a1de:	6823      	ldr	r3, [r4, #0]
  40a1e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40a1e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40a1e4:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
  40a1e8:	f8d5 e0c8 	ldr.w	lr, [r5, #200]	; 0xc8
  40a1ec:	9f16      	ldr	r7, [sp, #88]	; 0x58
  40a1ee:	f8d5 60b0 	ldr.w	r6, [r5, #176]	; 0xb0
  40a1f2:	1389      	asrs	r1, r1, #14
  40a1f4:	1392      	asrs	r2, r2, #14
  40a1f6:	f043 0320 	orr.w	r3, r3, #32
  40a1fa:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  40a1fe:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
  40a202:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
  40a206:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
  40a20a:	6023      	str	r3, [r4, #0]
  40a20c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
  40a210:	eba0 000e 	sub.w	r0, r0, lr
  40a214:	13bf      	asrs	r7, r7, #14
  40a216:	1a9b      	subs	r3, r3, r2
  40a218:	1a76      	subs	r6, r6, r1
  40a21a:	aa1c      	add	r2, sp, #112	; 0x70
  40a21c:	a919      	add	r1, sp, #100	; 0x64
  40a21e:	9019      	str	r0, [sp, #100]	; 0x64
  40a220:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
  40a224:	4836      	ldr	r0, [pc, #216]	; (40a300 <invn_algo_agm_process+0x36c>)
  40a226:	961a      	str	r6, [sp, #104]	; 0x68
  40a228:	931b      	str	r3, [sp, #108]	; 0x6c
  40a22a:	f000 fb09 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40a22e:	6822      	ldr	r2, [r4, #0]
  40a230:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  40a232:	981d      	ldr	r0, [sp, #116]	; 0x74
  40a234:	991e      	ldr	r1, [sp, #120]	; 0x78
  40a236:	f8d8 3000 	ldr.w	r3, [r8]
  40a23a:	1276      	asrs	r6, r6, #9
  40a23c:	1240      	asrs	r0, r0, #9
  40a23e:	1249      	asrs	r1, r1, #9
  40a240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40a244:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
  40a248:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
  40a24c:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  40a250:	6022      	str	r2, [r4, #0]
  40a252:	075b      	lsls	r3, r3, #29
  40a254:	f57f aea7 	bpl.w	409fa6 <invn_algo_agm_process+0x12>
  40a258:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40a25a:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
  40a25e:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
  40a262:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
  40a266:	4827      	ldr	r0, [pc, #156]	; (40a304 <invn_algo_agm_process+0x370>)
  40a268:	fb03 f505 	mul.w	r5, r3, r5
  40a26c:	fb03 f101 	mul.w	r1, r3, r1
  40a270:	fb03 f202 	mul.w	r2, r3, r2
  40a274:	af0c      	add	r7, sp, #48	; 0x30
  40a276:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  40a27a:	2300      	movs	r3, #0
  40a27c:	6565      	str	r5, [r4, #84]	; 0x54
  40a27e:	65a1      	str	r1, [r4, #88]	; 0x58
  40a280:	65e2      	str	r2, [r4, #92]	; 0x5c
  40a282:	f104 0154 	add.w	r1, r4, #84	; 0x54
  40a286:	e88d 00c0 	stmia.w	sp, {r6, r7}
  40a28a:	461a      	mov	r2, r3
  40a28c:	f002 f938 	bl	40c500 <RlsCalibrationFxp_UpdateUncalibratedData>
  40a290:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
  40a292:	6f26      	ldr	r6, [r4, #112]	; 0x70
  40a294:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40a296:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40a298:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a29a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  40a29c:	6825      	ldr	r5, [r4, #0]
  40a29e:	1b80      	subs	r0, r0, r6
  40a2a0:	1a89      	subs	r1, r1, r2
  40a2a2:	1bdb      	subs	r3, r3, r7
  40a2a4:	f045 0e04 	orr.w	lr, r5, #4
  40a2a8:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
  40a2ac:	6623      	str	r3, [r4, #96]	; 0x60
  40a2ae:	eb00 0780 	add.w	r7, r0, r0, lsl #2
  40a2b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40a2b6:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  40a2ba:	005d      	lsls	r5, r3, #1
  40a2bc:	6660      	str	r0, [r4, #100]	; 0x64
  40a2be:	66a1      	str	r1, [r4, #104]	; 0x68
  40a2c0:	007f      	lsls	r7, r7, #1
  40a2c2:	0076      	lsls	r6, r6, #1
  40a2c4:	f8c4 e000 	str.w	lr, [r4]
  40a2c8:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
  40a2cc:	f44f 133c 	mov.w	r3, #3080192	; 0x2f0000
  40a2d0:	a913      	add	r1, sp, #76	; 0x4c
  40a2d2:	480a      	ldr	r0, [pc, #40]	; (40a2fc <invn_algo_agm_process+0x368>)
  40a2d4:	9513      	str	r5, [sp, #76]	; 0x4c
  40a2d6:	9714      	str	r7, [sp, #80]	; 0x50
  40a2d8:	9615      	str	r6, [sp, #84]	; 0x54
  40a2da:	f003 f85f 	bl	40d39c <SphericalFxp_UpdateMagData>
  40a2de:	b029      	add	sp, #164	; 0xa4
  40a2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a2e4:	2afa      	cmp	r2, #250	; 0xfa
  40a2e6:	d176      	bne.n	40a3d6 <invn_algo_agm_process+0x442>
  40a2e8:	2207      	movs	r2, #7
  40a2ea:	e69b      	b.n	40a024 <invn_algo_agm_process+0x90>
  40a2ec:	200052b8 	.word	0x200052b8
  40a2f0:	20004d9c 	.word	0x20004d9c
  40a2f4:	20004cf0 	.word	0x20004cf0
  40a2f8:	0010624e 	.word	0x0010624e
  40a2fc:	20004b14 	.word	0x20004b14
  40a300:	20004d54 	.word	0x20004d54
  40a304:	200050a0 	.word	0x200050a0
  40a308:	696f      	ldr	r7, [r5, #20]
  40a30a:	f8d8 6010 	ldr.w	r6, [r8, #16]
  40a30e:	f8d8 1014 	ldr.w	r1, [r8, #20]
  40a312:	f8d8 3018 	ldr.w	r3, [r8, #24]
  40a316:	4851      	ldr	r0, [pc, #324]	; (40a45c <invn_algo_agm_process+0x4c8>)
  40a318:	fb06 f607 	mul.w	r6, r6, r7
  40a31c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
  40a320:	fb01 f107 	mul.w	r1, r1, r7
  40a324:	fb03 f307 	mul.w	r3, r3, r7
  40a328:	018e      	lsls	r6, r1, #6
  40a32a:	019f      	lsls	r7, r3, #6
  40a32c:	ea4f 236e 	mov.w	r3, lr, asr #9
  40a330:	6063      	str	r3, [r4, #4]
  40a332:	1273      	asrs	r3, r6, #9
  40a334:	60a3      	str	r3, [r4, #8]
  40a336:	127b      	asrs	r3, r7, #9
  40a338:	60e3      	str	r3, [r4, #12]
  40a33a:	ab0b      	add	r3, sp, #44	; 0x2c
  40a33c:	9301      	str	r3, [sp, #4]
  40a33e:	ab10      	add	r3, sp, #64	; 0x40
  40a340:	9300      	str	r3, [sp, #0]
  40a342:	a90d      	add	r1, sp, #52	; 0x34
  40a344:	2300      	movs	r3, #0
  40a346:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
  40a34a:	960e      	str	r6, [sp, #56]	; 0x38
  40a34c:	970f      	str	r7, [sp, #60]	; 0x3c
  40a34e:	f002 f8d7 	bl	40c500 <RlsCalibrationFxp_UpdateUncalibratedData>
  40a352:	a810      	add	r0, sp, #64	; 0x40
  40a354:	c80d      	ldmia	r0, {r0, r2, r3}
  40a356:	6861      	ldr	r1, [r4, #4]
  40a358:	68a7      	ldr	r7, [r4, #8]
  40a35a:	68e6      	ldr	r6, [r4, #12]
  40a35c:	f500 7080 	add.w	r0, r0, #256	; 0x100
  40a360:	1240      	asrs	r0, r0, #9
  40a362:	f502 7280 	add.w	r2, r2, #256	; 0x100
  40a366:	f503 7380 	add.w	r3, r3, #256	; 0x100
  40a36a:	1252      	asrs	r2, r2, #9
  40a36c:	125b      	asrs	r3, r3, #9
  40a36e:	1a09      	subs	r1, r1, r0
  40a370:	61e0      	str	r0, [r4, #28]
  40a372:	6820      	ldr	r0, [r4, #0]
  40a374:	6121      	str	r1, [r4, #16]
  40a376:	1abf      	subs	r7, r7, r2
  40a378:	1af6      	subs	r6, r6, r3
  40a37a:	0249      	lsls	r1, r1, #9
  40a37c:	6263      	str	r3, [r4, #36]	; 0x24
  40a37e:	9b03      	ldr	r3, [sp, #12]
  40a380:	911f      	str	r1, [sp, #124]	; 0x7c
  40a382:	f040 0001 	orr.w	r0, r0, #1
  40a386:	ea4f 2e47 	mov.w	lr, r7, lsl #9
  40a38a:	6222      	str	r2, [r4, #32]
  40a38c:	0271      	lsls	r1, r6, #9
  40a38e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a390:	6167      	str	r7, [r4, #20]
  40a392:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
  40a396:	61a6      	str	r6, [r4, #24]
  40a398:	9121      	str	r1, [sp, #132]	; 0x84
  40a39a:	6020      	str	r0, [r4, #0]
  40a39c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  40a3a0:	2b00      	cmp	r3, #0
  40a3a2:	d03b      	beq.n	40a41c <invn_algo_agm_process+0x488>
  40a3a4:	f8d8 1008 	ldr.w	r1, [r8, #8]
  40a3a8:	f8d5 37d8 	ldr.w	r3, [r5, #2008]	; 0x7d8
  40a3ac:	1ac9      	subs	r1, r1, r3
  40a3ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40a3b2:	f44f 736c 	mov.w	r3, #944	; 0x3b0
  40a3b6:	e88d 000c 	stmia.w	sp, {r2, r3}
  40a3ba:	4829      	ldr	r0, [pc, #164]	; (40a460 <invn_algo_agm_process+0x4cc>)
  40a3bc:	4a29      	ldr	r2, [pc, #164]	; (40a464 <invn_algo_agm_process+0x4d0>)
  40a3be:	2314      	movs	r3, #20
  40a3c0:	f002 fd5c 	bl	40ce7c <SphericalFxp_SetCustomParamAcc>
  40a3c4:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
  40a3c8:	4827      	ldr	r0, [pc, #156]	; (40a468 <invn_algo_agm_process+0x4d4>)
  40a3ca:	a91f      	add	r1, sp, #124	; 0x7c
  40a3cc:	f002 ff2a 	bl	40d224 <SphericalFxp_UpdateAccData>
  40a3d0:	f8d8 3000 	ldr.w	r3, [r8]
  40a3d4:	e616      	b.n	40a004 <invn_algo_agm_process+0x70>
  40a3d6:	220a      	movs	r2, #10
  40a3d8:	e624      	b.n	40a024 <invn_algo_agm_process+0x90>
  40a3da:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a3de:	f8d5 17d8 	ldr.w	r1, [r5, #2008]	; 0x7d8
  40a3e2:	f8d8 600c 	ldr.w	r6, [r8, #12]
  40a3e6:	1a59      	subs	r1, r3, r1
  40a3e8:	e6bf      	b.n	40a16a <invn_algo_agm_process+0x1d6>
  40a3ea:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
  40a3ee:	bfb4      	ite	lt
  40a3f0:	f04f 4340 	movlt.w	r3, #3221225472	; 0xc0000000
  40a3f4:	0073      	lslge	r3, r6, #1
  40a3f6:	9327      	str	r3, [sp, #156]	; 0x9c
  40a3f8:	e636      	b.n	40a068 <invn_algo_agm_process+0xd4>
  40a3fa:	f1b7 4f60 	cmp.w	r7, #3758096384	; 0xe0000000
  40a3fe:	bfac      	ite	ge
  40a400:	007b      	lslge	r3, r7, #1
  40a402:	f04f 4340 	movlt.w	r3, #3221225472	; 0xc0000000
  40a406:	9326      	str	r3, [sp, #152]	; 0x98
  40a408:	e624      	b.n	40a054 <invn_algo_agm_process+0xc0>
  40a40a:	f1ba 4f60 	cmp.w	sl, #3758096384	; 0xe0000000
  40a40e:	bfac      	ite	ge
  40a410:	ea4f 034a 	movge.w	r3, sl, lsl #1
  40a414:	f04f 4340 	movlt.w	r3, #3221225472	; 0xc0000000
  40a418:	9325      	str	r3, [sp, #148]	; 0x94
  40a41a:	e611      	b.n	40a040 <invn_algo_agm_process+0xac>
  40a41c:	69e9      	ldr	r1, [r5, #28]
  40a41e:	e7c6      	b.n	40a3ae <invn_algo_agm_process+0x41a>
  40a420:	ebba 0608 	subs.w	r6, sl, r8
  40a424:	f8df a048 	ldr.w	sl, [pc, #72]	; 40a470 <invn_algo_agm_process+0x4dc>
  40a428:	eb6b 0709 	sbc.w	r7, fp, r9
  40a42c:	f04f 0b00 	mov.w	fp, #0
  40a430:	45b2      	cmp	sl, r6
  40a432:	eb7b 0407 	sbcs.w	r4, fp, r7
  40a436:	bfac      	ite	ge
  40a438:	2401      	movge	r4, #1
  40a43a:	2400      	movlt	r4, #0
  40a43c:	9403      	str	r4, [sp, #12]
  40a43e:	e5dc      	b.n	409ffa <invn_algo_agm_process+0x66>
  40a440:	2209      	movs	r2, #9
  40a442:	e5ef      	b.n	40a024 <invn_algo_agm_process+0x90>
  40a444:	2208      	movs	r2, #8
  40a446:	e5ed      	b.n	40a024 <invn_algo_agm_process+0x90>
  40a448:	2903      	cmp	r1, #3
  40a44a:	f47f ae1a 	bne.w	40a082 <invn_algo_agm_process+0xee>
  40a44e:	4807      	ldr	r0, [pc, #28]	; (40a46c <invn_algo_agm_process+0x4d8>)
  40a450:	f000 fec0 	bl	40b1d4 <GyroCalFnmFxp_Recalibrate>
  40a454:	f8d5 1300 	ldr.w	r1, [r5, #768]	; 0x300
  40a458:	e613      	b.n	40a082 <invn_algo_agm_process+0xee>
  40a45a:	bf00      	nop
  40a45c:	20004ea0 	.word	0x20004ea0
  40a460:	20004cf0 	.word	0x20004cf0
  40a464:	00666666 	.word	0x00666666
  40a468:	20004b14 	.word	0x20004b14
  40a46c:	20004d9c 	.word	0x20004d9c
  40a470:	0007a11f 	.word	0x0007a11f

0040a474 <InvnAlgoAGM_SetConfig_r>:
  40a474:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a476:	460b      	mov	r3, r1
  40a478:	460c      	mov	r4, r1
  40a47a:	b089      	sub	sp, #36	; 0x24
  40a47c:	4605      	mov	r5, r0
  40a47e:	1d02      	adds	r2, r0, #4
  40a480:	3130      	adds	r1, #48	; 0x30
  40a482:	681f      	ldr	r7, [r3, #0]
  40a484:	685e      	ldr	r6, [r3, #4]
  40a486:	6898      	ldr	r0, [r3, #8]
  40a488:	f8d3 e00c 	ldr.w	lr, [r3, #12]
  40a48c:	f8c2 e00c 	str.w	lr, [r2, #12]
  40a490:	3310      	adds	r3, #16
  40a492:	428b      	cmp	r3, r1
  40a494:	6017      	str	r7, [r2, #0]
  40a496:	6056      	str	r6, [r2, #4]
  40a498:	6090      	str	r0, [r2, #8]
  40a49a:	f102 0210 	add.w	r2, r2, #16
  40a49e:	d1f0      	bne.n	40a482 <InvnAlgoAGM_SetConfig_r+0xe>
  40a4a0:	2301      	movs	r3, #1
  40a4a2:	4a26      	ldr	r2, [pc, #152]	; (40a53c <InvnAlgoAGM_SetConfig_r+0xc8>)
  40a4a4:	702b      	strb	r3, [r5, #0]
  40a4a6:	f505 7649 	add.w	r6, r5, #804	; 0x324
  40a4aa:	2306      	movs	r3, #6
  40a4ac:	9204      	str	r2, [sp, #16]
  40a4ae:	4f24      	ldr	r7, [pc, #144]	; (40a540 <InvnAlgoAGM_SetConfig_r+0xcc>)
  40a4b0:	9703      	str	r7, [sp, #12]
  40a4b2:	2196      	movs	r1, #150	; 0x96
  40a4b4:	22b4      	movs	r2, #180	; 0xb4
  40a4b6:	e88d 000c 	stmia.w	sp, {r2, r3}
  40a4ba:	4630      	mov	r0, r6
  40a4bc:	2200      	movs	r2, #0
  40a4be:	9102      	str	r1, [sp, #8]
  40a4c0:	4920      	ldr	r1, [pc, #128]	; (40a544 <InvnAlgoAGM_SetConfig_r+0xd0>)
  40a4c2:	f000 fe8b 	bl	40b1dc <GyroCalFnmFxp_SetCustomParam>
  40a4c6:	4630      	mov	r0, r6
  40a4c8:	69e1      	ldr	r1, [r4, #28]
  40a4ca:	f000 fe9b 	bl	40b204 <GyroCalFnmFxp_SetSamplingPeriod>
  40a4ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40a4d0:	f205 7014 	addw	r0, r5, #1812	; 0x714
  40a4d4:	f001 f918 	bl	40b708 <RlsCalibrationFxp_SetDefaultParamMag>
  40a4d8:	f505 7604 	add.w	r6, r5, #528	; 0x210
  40a4dc:	69a1      	ldr	r1, [r4, #24]
  40a4de:	f205 5014 	addw	r0, r5, #1300	; 0x514
  40a4e2:	f001 f961 	bl	40b7a8 <RlsCalibrationFxp_SetDefaultParamAcc>
  40a4e6:	4630      	mov	r0, r6
  40a4e8:	69e1      	ldr	r1, [r4, #28]
  40a4ea:	4a17      	ldr	r2, [pc, #92]	; (40a548 <InvnAlgoAGM_SetConfig_r+0xd4>)
  40a4ec:	f002 fd1a 	bl	40cf24 <SphericalFxp_SetCustomParamGyr>
  40a4f0:	f44f 756c 	mov.w	r5, #944	; 0x3b0
  40a4f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40a4f8:	69a1      	ldr	r1, [r4, #24]
  40a4fa:	4a14      	ldr	r2, [pc, #80]	; (40a54c <InvnAlgoAGM_SetConfig_r+0xd8>)
  40a4fc:	e88d 0028 	stmia.w	sp, {r3, r5}
  40a500:	4630      	mov	r0, r6
  40a502:	2314      	movs	r3, #20
  40a504:	f002 fcba 	bl	40ce7c <SphericalFxp_SetCustomParamAcc>
  40a508:	f04f 33ff 	mov.w	r3, #4294967295
  40a50c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40a50e:	9307      	str	r3, [sp, #28]
  40a510:	f241 3e88 	movw	lr, #5000	; 0x1388
  40a514:	9306      	str	r3, [sp, #24]
  40a516:	9305      	str	r3, [sp, #20]
  40a518:	f44f 7761 	mov.w	r7, #900	; 0x384
  40a51c:	2502      	movs	r5, #2
  40a51e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40a522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40a526:	e88d 00b8 	stmia.w	sp, {r3, r4, r5, r7}
  40a52a:	4a08      	ldr	r2, [pc, #32]	; (40a54c <InvnAlgoAGM_SetConfig_r+0xd8>)
  40a52c:	f8cd e010 	str.w	lr, [sp, #16]
  40a530:	4630      	mov	r0, r6
  40a532:	2314      	movs	r3, #20
  40a534:	f002 fcce 	bl	40ced4 <SphericalFxp_SetCustomParamMag>
  40a538:	b009      	add	sp, #36	; 0x24
  40a53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a53c:	00192b85 	.word	0x00192b85
  40a540:	0147ae14 	.word	0x0147ae14
  40a544:	0007a120 	.word	0x0007a120
  40a548:	0010624e 	.word	0x0010624e
  40a54c:	00666666 	.word	0x00666666

0040a550 <invn_algo_agm_init>:
  40a550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a554:	b087      	sub	sp, #28
  40a556:	2300      	movs	r3, #0
  40a558:	4604      	mov	r4, r0
  40a55a:	4842      	ldr	r0, [pc, #264]	; (40a664 <invn_algo_agm_init+0x114>)
  40a55c:	9301      	str	r3, [sp, #4]
  40a55e:	9300      	str	r3, [sp, #0]
  40a560:	9302      	str	r3, [sp, #8]
  40a562:	9303      	str	r3, [sp, #12]
  40a564:	9304      	str	r3, [sp, #16]
  40a566:	9305      	str	r3, [sp, #20]
  40a568:	f000 fffc 	bl	40b564 <GyroCalFnmFxp_Init>
  40a56c:	483e      	ldr	r0, [pc, #248]	; (40a668 <invn_algo_agm_init+0x118>)
  40a56e:	f002 fcf9 	bl	40cf64 <SphericalFxp_Init>
  40a572:	6863      	ldr	r3, [r4, #4]
  40a574:	4a3d      	ldr	r2, [pc, #244]	; (40a66c <invn_algo_agm_init+0x11c>)
  40a576:	2000      	movs	r0, #0
  40a578:	2100      	movs	r1, #0
  40a57a:	e9c2 0100 	strd	r0, r1, [r2]
  40a57e:	b32b      	cbz	r3, 40a5cc <invn_algo_agm_init+0x7c>
  40a580:	f8d3 c000 	ldr.w	ip, [r3]
  40a584:	f8df 9100 	ldr.w	r9, [pc, #256]	; 40a688 <invn_algo_agm_init+0x138>
  40a588:	f8d3 e004 	ldr.w	lr, [r3, #4]
  40a58c:	689d      	ldr	r5, [r3, #8]
  40a58e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40a592:	2100      	movs	r1, #0
  40a594:	4602      	mov	r2, r0
  40a596:	460b      	mov	r3, r1
  40a598:	fbc9 230c 	smlal	r2, r3, r9, ip
  40a59c:	4606      	mov	r6, r0
  40a59e:	460f      	mov	r7, r1
  40a5a0:	ea4f 7892 	mov.w	r8, r2, lsr #30
  40a5a4:	fbc9 0105 	smlal	r0, r1, r9, r5
  40a5a8:	fbc9 670e 	smlal	r6, r7, r9, lr
  40a5ac:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  40a5b0:	0fb2      	lsrs	r2, r6, #30
  40a5b2:	0f83      	lsrs	r3, r0, #30
  40a5b4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  40a5b8:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
  40a5bc:	eb08 01cc 	add.w	r1, r8, ip, lsl #3
  40a5c0:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  40a5c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40a5c8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  40a5cc:	f994 200d 	ldrsb.w	r2, [r4, #13]
  40a5d0:	4b27      	ldr	r3, [pc, #156]	; (40a670 <invn_algo_agm_init+0x120>)
  40a5d2:	9800      	ldr	r0, [sp, #0]
  40a5d4:	6821      	ldr	r1, [r4, #0]
  40a5d6:	f8c3 02f4 	str.w	r0, [r3, #756]	; 0x2f4
  40a5da:	1e50      	subs	r0, r2, #1
  40a5dc:	b2c0      	uxtb	r0, r0
  40a5de:	2803      	cmp	r0, #3
  40a5e0:	bf28      	it	cs
  40a5e2:	2200      	movcs	r2, #0
  40a5e4:	9d01      	ldr	r5, [sp, #4]
  40a5e6:	9802      	ldr	r0, [sp, #8]
  40a5e8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  40a5ec:	2200      	movs	r2, #0
  40a5ee:	f8c3 52f8 	str.w	r5, [r3, #760]	; 0x2f8
  40a5f2:	f8c3 02fc 	str.w	r0, [r3, #764]	; 0x2fc
  40a5f6:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
  40a5fa:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
  40a5fe:	f8c3 27c4 	str.w	r2, [r3, #1988]	; 0x7c4
  40a602:	f8c3 27c8 	str.w	r2, [r3, #1992]	; 0x7c8
  40a606:	b141      	cbz	r1, 40a61a <invn_algo_agm_init+0xca>
  40a608:	680b      	ldr	r3, [r1, #0]
  40a60a:	025b      	lsls	r3, r3, #9
  40a60c:	9303      	str	r3, [sp, #12]
  40a60e:	684b      	ldr	r3, [r1, #4]
  40a610:	025b      	lsls	r3, r3, #9
  40a612:	9304      	str	r3, [sp, #16]
  40a614:	688b      	ldr	r3, [r1, #8]
  40a616:	025b      	lsls	r3, r3, #9
  40a618:	9305      	str	r3, [sp, #20]
  40a61a:	a903      	add	r1, sp, #12
  40a61c:	69a2      	ldr	r2, [r4, #24]
  40a61e:	4815      	ldr	r0, [pc, #84]	; (40a674 <invn_algo_agm_init+0x124>)
  40a620:	f001 ff3e 	bl	40c4a0 <RlsCalibrationFxp_Init>
  40a624:	4914      	ldr	r1, [pc, #80]	; (40a678 <invn_algo_agm_init+0x128>)
  40a626:	f994 200c 	ldrsb.w	r2, [r4, #12]
  40a62a:	f5a1 70aa 	sub.w	r0, r1, #340	; 0x154
  40a62e:	f001 f835 	bl	40b69c <RlsCalibrationFxp_SetAccuracy>
  40a632:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40a634:	68a1      	ldr	r1, [r4, #8]
  40a636:	4811      	ldr	r0, [pc, #68]	; (40a67c <invn_algo_agm_init+0x12c>)
  40a638:	f001 ff32 	bl	40c4a0 <RlsCalibrationFxp_Init>
  40a63c:	4910      	ldr	r1, [pc, #64]	; (40a680 <invn_algo_agm_init+0x130>)
  40a63e:	f994 200e 	ldrsb.w	r2, [r4, #14]
  40a642:	f5a1 70aa 	sub.w	r0, r1, #340	; 0x154
  40a646:	f001 f829 	bl	40b69c <RlsCalibrationFxp_SetAccuracy>
  40a64a:	2100      	movs	r1, #0
  40a64c:	480d      	ldr	r0, [pc, #52]	; (40a684 <invn_algo_agm_init+0x134>)
  40a64e:	f002 fc13 	bl	40ce78 <SphericalFxp_SetProductId>
  40a652:	4621      	mov	r1, r4
  40a654:	4806      	ldr	r0, [pc, #24]	; (40a670 <invn_algo_agm_init+0x120>)
  40a656:	f7ff ff0d 	bl	40a474 <InvnAlgoAGM_SetConfig_r>
  40a65a:	2000      	movs	r0, #0
  40a65c:	b007      	add	sp, #28
  40a65e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a662:	bf00      	nop
  40a664:	20004d9c 	.word	0x20004d9c
  40a668:	20004b14 	.word	0x20004b14
  40a66c:	200052b8 	.word	0x200052b8
  40a670:	20004ae0 	.word	0x20004ae0
  40a674:	20004ea0 	.word	0x20004ea0
  40a678:	20004ff4 	.word	0x20004ff4
  40a67c:	200050a0 	.word	0x200050a0
  40a680:	200051f4 	.word	0x200051f4
  40a684:	20004d4c 	.word	0x20004d4c
  40a688:	0c49ba5e 	.word	0x0c49ba5e

0040a68c <invn_math_quat_mult_fxp>:
  40a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a68e:	4604      	mov	r4, r0
  40a690:	460d      	mov	r5, r1
  40a692:	6800      	ldr	r0, [r0, #0]
  40a694:	6809      	ldr	r1, [r1, #0]
  40a696:	4617      	mov	r7, r2
  40a698:	f000 f96c 	bl	40a974 <invn_math_mult_q30_fxp>
  40a69c:	6869      	ldr	r1, [r5, #4]
  40a69e:	4606      	mov	r6, r0
  40a6a0:	6860      	ldr	r0, [r4, #4]
  40a6a2:	f000 f967 	bl	40a974 <invn_math_mult_q30_fxp>
  40a6a6:	68a9      	ldr	r1, [r5, #8]
  40a6a8:	1a36      	subs	r6, r6, r0
  40a6aa:	68a0      	ldr	r0, [r4, #8]
  40a6ac:	f000 f962 	bl	40a974 <invn_math_mult_q30_fxp>
  40a6b0:	68e9      	ldr	r1, [r5, #12]
  40a6b2:	1a36      	subs	r6, r6, r0
  40a6b4:	68e0      	ldr	r0, [r4, #12]
  40a6b6:	f000 f95d 	bl	40a974 <invn_math_mult_q30_fxp>
  40a6ba:	1a30      	subs	r0, r6, r0
  40a6bc:	6038      	str	r0, [r7, #0]
  40a6be:	6869      	ldr	r1, [r5, #4]
  40a6c0:	6820      	ldr	r0, [r4, #0]
  40a6c2:	f000 f957 	bl	40a974 <invn_math_mult_q30_fxp>
  40a6c6:	6829      	ldr	r1, [r5, #0]
  40a6c8:	4606      	mov	r6, r0
  40a6ca:	6860      	ldr	r0, [r4, #4]
  40a6cc:	f000 f952 	bl	40a974 <invn_math_mult_q30_fxp>
  40a6d0:	68e9      	ldr	r1, [r5, #12]
  40a6d2:	4406      	add	r6, r0
  40a6d4:	68a0      	ldr	r0, [r4, #8]
  40a6d6:	f000 f94d 	bl	40a974 <invn_math_mult_q30_fxp>
  40a6da:	68a9      	ldr	r1, [r5, #8]
  40a6dc:	4406      	add	r6, r0
  40a6de:	68e0      	ldr	r0, [r4, #12]
  40a6e0:	f000 f948 	bl	40a974 <invn_math_mult_q30_fxp>
  40a6e4:	1a30      	subs	r0, r6, r0
  40a6e6:	6078      	str	r0, [r7, #4]
  40a6e8:	68a9      	ldr	r1, [r5, #8]
  40a6ea:	6820      	ldr	r0, [r4, #0]
  40a6ec:	f000 f942 	bl	40a974 <invn_math_mult_q30_fxp>
  40a6f0:	68e9      	ldr	r1, [r5, #12]
  40a6f2:	4606      	mov	r6, r0
  40a6f4:	6860      	ldr	r0, [r4, #4]
  40a6f6:	f000 f93d 	bl	40a974 <invn_math_mult_q30_fxp>
  40a6fa:	6829      	ldr	r1, [r5, #0]
  40a6fc:	1a36      	subs	r6, r6, r0
  40a6fe:	68a0      	ldr	r0, [r4, #8]
  40a700:	f000 f938 	bl	40a974 <invn_math_mult_q30_fxp>
  40a704:	6869      	ldr	r1, [r5, #4]
  40a706:	4406      	add	r6, r0
  40a708:	68e0      	ldr	r0, [r4, #12]
  40a70a:	f000 f933 	bl	40a974 <invn_math_mult_q30_fxp>
  40a70e:	4430      	add	r0, r6
  40a710:	60b8      	str	r0, [r7, #8]
  40a712:	68e9      	ldr	r1, [r5, #12]
  40a714:	6820      	ldr	r0, [r4, #0]
  40a716:	f000 f92d 	bl	40a974 <invn_math_mult_q30_fxp>
  40a71a:	68a9      	ldr	r1, [r5, #8]
  40a71c:	4606      	mov	r6, r0
  40a71e:	6860      	ldr	r0, [r4, #4]
  40a720:	f000 f928 	bl	40a974 <invn_math_mult_q30_fxp>
  40a724:	6869      	ldr	r1, [r5, #4]
  40a726:	4406      	add	r6, r0
  40a728:	68a0      	ldr	r0, [r4, #8]
  40a72a:	f000 f923 	bl	40a974 <invn_math_mult_q30_fxp>
  40a72e:	6829      	ldr	r1, [r5, #0]
  40a730:	1a36      	subs	r6, r6, r0
  40a732:	68e0      	ldr	r0, [r4, #12]
  40a734:	f000 f91e 	bl	40a974 <invn_math_mult_q30_fxp>
  40a738:	4430      	add	r0, r6
  40a73a:	60f8      	str	r0, [r7, #12]
  40a73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a73e:	bf00      	nop

0040a740 <invn_math_quat_invert_fxp>:
  40a740:	6803      	ldr	r3, [r0, #0]
  40a742:	600b      	str	r3, [r1, #0]
  40a744:	6843      	ldr	r3, [r0, #4]
  40a746:	425b      	negs	r3, r3
  40a748:	604b      	str	r3, [r1, #4]
  40a74a:	6883      	ldr	r3, [r0, #8]
  40a74c:	425b      	negs	r3, r3
  40a74e:	608b      	str	r3, [r1, #8]
  40a750:	68c3      	ldr	r3, [r0, #12]
  40a752:	425b      	negs	r3, r3
  40a754:	60cb      	str	r3, [r1, #12]
  40a756:	4770      	bx	lr

0040a758 <invn_math_quat_rotate_BtoI_fxp>:
  40a758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a75c:	b08d      	sub	sp, #52	; 0x34
  40a75e:	ad0c      	add	r5, sp, #48	; 0x30
  40a760:	460b      	mov	r3, r1
  40a762:	2700      	movs	r7, #0
  40a764:	4604      	mov	r4, r0
  40a766:	4616      	mov	r6, r2
  40a768:	f845 7d20 	str.w	r7, [r5, #-32]!
  40a76c:	6808      	ldr	r0, [r1, #0]
  40a76e:	689a      	ldr	r2, [r3, #8]
  40a770:	6849      	ldr	r1, [r1, #4]
  40a772:	ab05      	add	r3, sp, #20
  40a774:	c307      	stmia	r3!, {r0, r1, r2}
  40a776:	4629      	mov	r1, r5
  40a778:	4620      	mov	r0, r4
  40a77a:	466a      	mov	r2, sp
  40a77c:	f7ff ff86 	bl	40a68c <invn_math_quat_mult_fxp>
  40a780:	6827      	ldr	r7, [r4, #0]
  40a782:	6865      	ldr	r5, [r4, #4]
  40a784:	68a2      	ldr	r2, [r4, #8]
  40a786:	68e3      	ldr	r3, [r4, #12]
  40a788:	9800      	ldr	r0, [sp, #0]
  40a78a:	426d      	negs	r5, r5
  40a78c:	4639      	mov	r1, r7
  40a78e:	f1c2 0800 	rsb	r8, r2, #0
  40a792:	f1c3 0900 	rsb	r9, r3, #0
  40a796:	f000 f8ed 	bl	40a974 <invn_math_mult_q30_fxp>
  40a79a:	4629      	mov	r1, r5
  40a79c:	9801      	ldr	r0, [sp, #4]
  40a79e:	f000 f8e9 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7a2:	4641      	mov	r1, r8
  40a7a4:	9802      	ldr	r0, [sp, #8]
  40a7a6:	f000 f8e5 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7aa:	4649      	mov	r1, r9
  40a7ac:	9803      	ldr	r0, [sp, #12]
  40a7ae:	f000 f8e1 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7b2:	4629      	mov	r1, r5
  40a7b4:	9800      	ldr	r0, [sp, #0]
  40a7b6:	f000 f8dd 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7ba:	4639      	mov	r1, r7
  40a7bc:	4604      	mov	r4, r0
  40a7be:	9801      	ldr	r0, [sp, #4]
  40a7c0:	f000 f8d8 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7c4:	4649      	mov	r1, r9
  40a7c6:	4404      	add	r4, r0
  40a7c8:	9802      	ldr	r0, [sp, #8]
  40a7ca:	f000 f8d3 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7ce:	4641      	mov	r1, r8
  40a7d0:	4404      	add	r4, r0
  40a7d2:	9803      	ldr	r0, [sp, #12]
  40a7d4:	f000 f8ce 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7d8:	4641      	mov	r1, r8
  40a7da:	1a24      	subs	r4, r4, r0
  40a7dc:	9800      	ldr	r0, [sp, #0]
  40a7de:	9409      	str	r4, [sp, #36]	; 0x24
  40a7e0:	f000 f8c8 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7e4:	4649      	mov	r1, r9
  40a7e6:	4604      	mov	r4, r0
  40a7e8:	9801      	ldr	r0, [sp, #4]
  40a7ea:	f000 f8c3 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7ee:	4639      	mov	r1, r7
  40a7f0:	1a24      	subs	r4, r4, r0
  40a7f2:	9802      	ldr	r0, [sp, #8]
  40a7f4:	f000 f8be 	bl	40a974 <invn_math_mult_q30_fxp>
  40a7f8:	4629      	mov	r1, r5
  40a7fa:	4404      	add	r4, r0
  40a7fc:	9803      	ldr	r0, [sp, #12]
  40a7fe:	f000 f8b9 	bl	40a974 <invn_math_mult_q30_fxp>
  40a802:	4649      	mov	r1, r9
  40a804:	4404      	add	r4, r0
  40a806:	9800      	ldr	r0, [sp, #0]
  40a808:	940a      	str	r4, [sp, #40]	; 0x28
  40a80a:	f000 f8b3 	bl	40a974 <invn_math_mult_q30_fxp>
  40a80e:	4641      	mov	r1, r8
  40a810:	4604      	mov	r4, r0
  40a812:	9801      	ldr	r0, [sp, #4]
  40a814:	f000 f8ae 	bl	40a974 <invn_math_mult_q30_fxp>
  40a818:	4629      	mov	r1, r5
  40a81a:	4404      	add	r4, r0
  40a81c:	9802      	ldr	r0, [sp, #8]
  40a81e:	f000 f8a9 	bl	40a974 <invn_math_mult_q30_fxp>
  40a822:	4639      	mov	r1, r7
  40a824:	1a24      	subs	r4, r4, r0
  40a826:	9803      	ldr	r0, [sp, #12]
  40a828:	f000 f8a4 	bl	40a974 <invn_math_mult_q30_fxp>
  40a82c:	4420      	add	r0, r4
  40a82e:	900b      	str	r0, [sp, #44]	; 0x2c
  40a830:	ab09      	add	r3, sp, #36	; 0x24
  40a832:	cb07      	ldmia	r3!, {r0, r1, r2}
  40a834:	6030      	str	r0, [r6, #0]
  40a836:	6071      	str	r1, [r6, #4]
  40a838:	60b2      	str	r2, [r6, #8]
  40a83a:	b00d      	add	sp, #52	; 0x34
  40a83c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040a840 <invn_math_quat_rotate_ItoB_fxp>:
  40a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a844:	4607      	mov	r7, r0
  40a846:	b08f      	sub	sp, #60	; 0x3c
  40a848:	460c      	mov	r4, r1
  40a84a:	f8d7 a000 	ldr.w	sl, [r7]
  40a84e:	6808      	ldr	r0, [r1, #0]
  40a850:	9201      	str	r2, [sp, #4]
  40a852:	6849      	ldr	r1, [r1, #4]
  40a854:	68a2      	ldr	r2, [r4, #8]
  40a856:	687e      	ldr	r6, [r7, #4]
  40a858:	68bd      	ldr	r5, [r7, #8]
  40a85a:	68fc      	ldr	r4, [r7, #12]
  40a85c:	f10d 0e1c 	add.w	lr, sp, #28
  40a860:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
  40a864:	4650      	mov	r0, sl
  40a866:	2100      	movs	r1, #0
  40a868:	f000 f884 	bl	40a974 <invn_math_mult_q30_fxp>
  40a86c:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40a870:	4276      	negs	r6, r6
  40a872:	4683      	mov	fp, r0
  40a874:	4641      	mov	r1, r8
  40a876:	4630      	mov	r0, r6
  40a878:	f000 f87c 	bl	40a974 <invn_math_mult_q30_fxp>
  40a87c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40a880:	426d      	negs	r5, r5
  40a882:	ebab 0200 	sub.w	r2, fp, r0
  40a886:	4649      	mov	r1, r9
  40a888:	4628      	mov	r0, r5
  40a88a:	9200      	str	r2, [sp, #0]
  40a88c:	f000 f872 	bl	40a974 <invn_math_mult_q30_fxp>
  40a890:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40a894:	9a00      	ldr	r2, [sp, #0]
  40a896:	4264      	negs	r4, r4
  40a898:	1a12      	subs	r2, r2, r0
  40a89a:	4659      	mov	r1, fp
  40a89c:	4620      	mov	r0, r4
  40a89e:	9200      	str	r2, [sp, #0]
  40a8a0:	f000 f868 	bl	40a974 <invn_math_mult_q30_fxp>
  40a8a4:	9a00      	ldr	r2, [sp, #0]
  40a8a6:	4641      	mov	r1, r8
  40a8a8:	1a12      	subs	r2, r2, r0
  40a8aa:	4650      	mov	r0, sl
  40a8ac:	9202      	str	r2, [sp, #8]
  40a8ae:	f000 f861 	bl	40a974 <invn_math_mult_q30_fxp>
  40a8b2:	2100      	movs	r1, #0
  40a8b4:	9000      	str	r0, [sp, #0]
  40a8b6:	4630      	mov	r0, r6
  40a8b8:	f000 f85c 	bl	40a974 <invn_math_mult_q30_fxp>
  40a8bc:	9a00      	ldr	r2, [sp, #0]
  40a8be:	4659      	mov	r1, fp
  40a8c0:	4402      	add	r2, r0
  40a8c2:	4628      	mov	r0, r5
  40a8c4:	9200      	str	r2, [sp, #0]
  40a8c6:	f000 f855 	bl	40a974 <invn_math_mult_q30_fxp>
  40a8ca:	9a00      	ldr	r2, [sp, #0]
  40a8cc:	4649      	mov	r1, r9
  40a8ce:	4402      	add	r2, r0
  40a8d0:	4620      	mov	r0, r4
  40a8d2:	9200      	str	r2, [sp, #0]
  40a8d4:	f000 f84e 	bl	40a974 <invn_math_mult_q30_fxp>
  40a8d8:	9a00      	ldr	r2, [sp, #0]
  40a8da:	4649      	mov	r1, r9
  40a8dc:	1a12      	subs	r2, r2, r0
  40a8de:	4650      	mov	r0, sl
  40a8e0:	9203      	str	r2, [sp, #12]
  40a8e2:	f000 f847 	bl	40a974 <invn_math_mult_q30_fxp>
  40a8e6:	4659      	mov	r1, fp
  40a8e8:	9000      	str	r0, [sp, #0]
  40a8ea:	4630      	mov	r0, r6
  40a8ec:	f000 f842 	bl	40a974 <invn_math_mult_q30_fxp>
  40a8f0:	9a00      	ldr	r2, [sp, #0]
  40a8f2:	2100      	movs	r1, #0
  40a8f4:	1a12      	subs	r2, r2, r0
  40a8f6:	4628      	mov	r0, r5
  40a8f8:	9200      	str	r2, [sp, #0]
  40a8fa:	f000 f83b 	bl	40a974 <invn_math_mult_q30_fxp>
  40a8fe:	9a00      	ldr	r2, [sp, #0]
  40a900:	4641      	mov	r1, r8
  40a902:	4402      	add	r2, r0
  40a904:	4620      	mov	r0, r4
  40a906:	9200      	str	r2, [sp, #0]
  40a908:	f000 f834 	bl	40a974 <invn_math_mult_q30_fxp>
  40a90c:	9a00      	ldr	r2, [sp, #0]
  40a90e:	4659      	mov	r1, fp
  40a910:	4402      	add	r2, r0
  40a912:	4650      	mov	r0, sl
  40a914:	9204      	str	r2, [sp, #16]
  40a916:	f000 f82d 	bl	40a974 <invn_math_mult_q30_fxp>
  40a91a:	4649      	mov	r1, r9
  40a91c:	4682      	mov	sl, r0
  40a91e:	4630      	mov	r0, r6
  40a920:	f000 f828 	bl	40a974 <invn_math_mult_q30_fxp>
  40a924:	4641      	mov	r1, r8
  40a926:	4482      	add	sl, r0
  40a928:	4628      	mov	r0, r5
  40a92a:	f000 f823 	bl	40a974 <invn_math_mult_q30_fxp>
  40a92e:	2100      	movs	r1, #0
  40a930:	ebaa 0500 	sub.w	r5, sl, r0
  40a934:	4620      	mov	r0, r4
  40a936:	f000 f81d 	bl	40a974 <invn_math_mult_q30_fxp>
  40a93a:	ac0b      	add	r4, sp, #44	; 0x2c
  40a93c:	4639      	mov	r1, r7
  40a93e:	4405      	add	r5, r0
  40a940:	aa0a      	add	r2, sp, #40	; 0x28
  40a942:	a802      	add	r0, sp, #8
  40a944:	9505      	str	r5, [sp, #20]
  40a946:	f7ff fea1 	bl	40a68c <invn_math_quat_mult_fxp>
  40a94a:	cc07      	ldmia	r4!, {r0, r1, r2}
  40a94c:	9b01      	ldr	r3, [sp, #4]
  40a94e:	6018      	str	r0, [r3, #0]
  40a950:	6059      	str	r1, [r3, #4]
  40a952:	609a      	str	r2, [r3, #8]
  40a954:	b00f      	add	sp, #60	; 0x3c
  40a956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a95a:	bf00      	nop

0040a95c <invn_math_mult_q15_fxp>:
  40a95c:	fb80 2301 	smull	r2, r3, r0, r1
  40a960:	0bd0      	lsrs	r0, r2, #15
  40a962:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
  40a966:	4770      	bx	lr

0040a968 <invn_math_mult_q29_fxp>:
  40a968:	fb80 2301 	smull	r2, r3, r0, r1
  40a96c:	0f50      	lsrs	r0, r2, #29
  40a96e:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
  40a972:	4770      	bx	lr

0040a974 <invn_math_mult_q30_fxp>:
  40a974:	fb80 2301 	smull	r2, r3, r0, r1
  40a978:	0f90      	lsrs	r0, r2, #30
  40a97a:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
  40a97e:	4770      	bx	lr

0040a980 <invn_math_sqrt_q15_fxp>:
  40a980:	2800      	cmp	r0, #0
  40a982:	dd7d      	ble.n	40aa80 <invn_math_sqrt_q15_fxp+0x100>
  40a984:	f24b 1272 	movw	r2, #45426	; 0xb172
  40a988:	4290      	cmp	r0, r2
  40a98a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a98e:	dd64      	ble.n	40aa5a <invn_math_sqrt_q15_fxp+0xda>
  40a990:	4603      	mov	r3, r0
  40a992:	2400      	movs	r4, #0
  40a994:	105b      	asrs	r3, r3, #1
  40a996:	4293      	cmp	r3, r2
  40a998:	f104 34ff 	add.w	r4, r4, #4294967295
  40a99c:	dcfa      	bgt.n	40a994 <invn_math_sqrt_q15_fxp+0x14>
  40a99e:	f004 0101 	and.w	r1, r4, #1
  40a9a2:	1062      	asrs	r2, r4, #1
  40a9a4:	105b      	asrs	r3, r3, #1
  40a9a6:	f5c3 4540 	rsb	r5, r3, #49152	; 0xc000
  40a9aa:	fb85 6705 	smull	r6, r7, r5, r5
  40a9ae:	0bf6      	lsrs	r6, r6, #15
  40a9b0:	ea4f 79e3 	mov.w	r9, r3, asr #31
  40a9b4:	ea46 4647 	orr.w	r6, r6, r7, lsl #17
  40a9b8:	13fc      	asrs	r4, r7, #15
  40a9ba:	fb06 f709 	mul.w	r7, r6, r9
  40a9be:	fb03 7404 	mla	r4, r3, r4, r7
  40a9c2:	fba6 6703 	umull	r6, r7, r6, r3
  40a9c6:	4427      	add	r7, r4
  40a9c8:	0bf4      	lsrs	r4, r6, #15
  40a9ca:	ea44 4447 	orr.w	r4, r4, r7, lsl #17
  40a9ce:	f5c4 4440 	rsb	r4, r4, #49152	; 0xc000
  40a9d2:	fb84 4505 	smull	r4, r5, r4, r5
  40a9d6:	0be7      	lsrs	r7, r4, #15
  40a9d8:	ea47 4745 	orr.w	r7, r7, r5, lsl #17
  40a9dc:	ea4f 3ee5 	mov.w	lr, r5, asr #15
  40a9e0:	fb07 f40e 	mul.w	r4, r7, lr
  40a9e4:	fba7 ab07 	umull	sl, fp, r7, r7
  40a9e8:	eb0b 0b44 	add.w	fp, fp, r4, lsl #1
  40a9ec:	ea4f 34da 	mov.w	r4, sl, lsr #15
  40a9f0:	ea44 444b 	orr.w	r4, r4, fp, lsl #17
  40a9f4:	fb04 f509 	mul.w	r5, r4, r9
  40a9f8:	ea4f 36eb 	mov.w	r6, fp, asr #15
  40a9fc:	fb03 5606 	mla	r6, r3, r6, r5
  40aa00:	fba4 4503 	umull	r4, r5, r4, r3
  40aa04:	4435      	add	r5, r6
  40aa06:	0be6      	lsrs	r6, r4, #15
  40aa08:	ea46 4645 	orr.w	r6, r6, r5, lsl #17
  40aa0c:	f5c6 4640 	rsb	r6, r6, #49152	; 0xc000
  40aa10:	fb06 f30e 	mul.w	r3, r6, lr
  40aa14:	17f5      	asrs	r5, r6, #31
  40aa16:	fb07 3305 	mla	r3, r7, r5, r3
  40aa1a:	fba6 6707 	umull	r6, r7, r6, r7
  40aa1e:	441f      	add	r7, r3
  40aa20:	0bf4      	lsrs	r4, r6, #15
  40aa22:	ea44 4447 	orr.w	r4, r4, r7, lsl #17
  40aa26:	13fb      	asrs	r3, r7, #15
  40aa28:	b149      	cbz	r1, 40aa3e <invn_math_sqrt_q15_fxp+0xbe>
  40aa2a:	f645 2182 	movw	r1, #23170	; 0x5a82
  40aa2e:	fba4 4501 	umull	r4, r5, r4, r1
  40aa32:	fb01 5503 	mla	r5, r1, r3, r5
  40aa36:	0be4      	lsrs	r4, r4, #15
  40aa38:	3201      	adds	r2, #1
  40aa3a:	ea44 4445 	orr.w	r4, r4, r5, lsl #17
  40aa3e:	2a00      	cmp	r2, #0
  40aa40:	bfba      	itte	lt
  40aa42:	4252      	neglt	r2, r2
  40aa44:	fa44 f202 	asrlt.w	r2, r4, r2
  40aa48:	fa04 f202 	lslge.w	r2, r4, r2
  40aa4c:	fb82 2300 	smull	r2, r3, r2, r0
  40aa50:	0bd0      	lsrs	r0, r2, #15
  40aa52:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
  40aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa5a:	f645 01b8 	movw	r1, #22712	; 0x58b8
  40aa5e:	4288      	cmp	r0, r1
  40aa60:	dc0a      	bgt.n	40aa78 <invn_math_sqrt_q15_fxp+0xf8>
  40aa62:	4603      	mov	r3, r0
  40aa64:	2200      	movs	r2, #0
  40aa66:	005b      	lsls	r3, r3, #1
  40aa68:	428b      	cmp	r3, r1
  40aa6a:	f102 0201 	add.w	r2, r2, #1
  40aa6e:	ddfa      	ble.n	40aa66 <invn_math_sqrt_q15_fxp+0xe6>
  40aa70:	f002 0101 	and.w	r1, r2, #1
  40aa74:	1052      	asrs	r2, r2, #1
  40aa76:	e795      	b.n	40a9a4 <invn_math_sqrt_q15_fxp+0x24>
  40aa78:	2200      	movs	r2, #0
  40aa7a:	4611      	mov	r1, r2
  40aa7c:	4603      	mov	r3, r0
  40aa7e:	e791      	b.n	40a9a4 <invn_math_sqrt_q15_fxp+0x24>
  40aa80:	2000      	movs	r0, #0
  40aa82:	4770      	bx	lr

0040aa84 <invn_math_inv_sqrt_q30_fxp>:
  40aa84:	2300      	movs	r3, #0
  40aa86:	2800      	cmp	r0, #0
  40aa88:	600b      	str	r3, [r1, #0]
  40aa8a:	dd55      	ble.n	40ab38 <invn_math_inv_sqrt_q30_fxp+0xb4>
  40aa8c:	4a32      	ldr	r2, [pc, #200]	; (40ab58 <invn_math_inv_sqrt_q30_fxp+0xd4>)
  40aa8e:	4290      	cmp	r0, r2
  40aa90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40aa94:	468e      	mov	lr, r1
  40aa96:	dc4a      	bgt.n	40ab2e <invn_math_inv_sqrt_q30_fxp+0xaa>
  40aa98:	4930      	ldr	r1, [pc, #192]	; (40ab5c <invn_math_inv_sqrt_q30_fxp+0xd8>)
  40aa9a:	4288      	cmp	r0, r1
  40aa9c:	dc08      	bgt.n	40aab0 <invn_math_inv_sqrt_q30_fxp+0x2c>
  40aa9e:	2201      	movs	r2, #1
  40aaa0:	0040      	lsls	r0, r0, #1
  40aaa2:	4288      	cmp	r0, r1
  40aaa4:	4613      	mov	r3, r2
  40aaa6:	f102 0201 	add.w	r2, r2, #1
  40aaaa:	ddf9      	ble.n	40aaa0 <invn_math_inv_sqrt_q30_fxp+0x1c>
  40aaac:	f8ce 3000 	str.w	r3, [lr]
  40aab0:	1040      	asrs	r0, r0, #1
  40aab2:	f1c0 46c0 	rsb	r6, r0, #1610612736	; 0x60000000
  40aab6:	fb86 4506 	smull	r4, r5, r6, r6
  40aaba:	0fa4      	lsrs	r4, r4, #30
  40aabc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40aac0:	ea4f 79e0 	mov.w	r9, r0, asr #31
  40aac4:	fb04 f109 	mul.w	r1, r4, r9
  40aac8:	17aa      	asrs	r2, r5, #30
  40aaca:	fb00 1202 	mla	r2, r0, r2, r1
  40aace:	fba4 4500 	umull	r4, r5, r4, r0
  40aad2:	4415      	add	r5, r2
  40aad4:	0fa2      	lsrs	r2, r4, #30
  40aad6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  40aada:	f1c2 42c0 	rsb	r2, r2, #1610612736	; 0x60000000
  40aade:	fb82 6706 	smull	r6, r7, r2, r6
  40aae2:	0fb2      	lsrs	r2, r6, #30
  40aae4:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
  40aae8:	17bd      	asrs	r5, r7, #30
  40aaea:	fb02 f105 	mul.w	r1, r2, r5
  40aaee:	fba2 6702 	umull	r6, r7, r2, r2
  40aaf2:	eb07 0741 	add.w	r7, r7, r1, lsl #1
  40aaf6:	0fb1      	lsrs	r1, r6, #30
  40aaf8:	ea41 0187 	orr.w	r1, r1, r7, lsl #2
  40aafc:	fb80 0101 	smull	r0, r1, r0, r1
  40ab00:	0f84      	lsrs	r4, r0, #30
  40ab02:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
  40ab06:	f1c4 44c0 	rsb	r4, r4, #1610612736	; 0x60000000
  40ab0a:	fb04 f505 	mul.w	r5, r4, r5
  40ab0e:	17e1      	asrs	r1, r4, #31
  40ab10:	fb02 5101 	mla	r1, r2, r1, r5
  40ab14:	fba4 4502 	umull	r4, r5, r4, r2
  40ab18:	440d      	add	r5, r1
  40ab1a:	0fa0      	lsrs	r0, r4, #30
  40ab1c:	07da      	lsls	r2, r3, #31
  40ab1e:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
  40ab22:	d40c      	bmi.n	40ab3e <invn_math_inv_sqrt_q30_fxp+0xba>
  40ab24:	105b      	asrs	r3, r3, #1
  40ab26:	f8ce 3000 	str.w	r3, [lr]
  40ab2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40ab2e:	f04f 33ff 	mov.w	r3, #4294967295
  40ab32:	1040      	asrs	r0, r0, #1
  40ab34:	600b      	str	r3, [r1, #0]
  40ab36:	e7bb      	b.n	40aab0 <invn_math_inv_sqrt_q30_fxp+0x2c>
  40ab38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40ab3c:	4770      	bx	lr
  40ab3e:	4a08      	ldr	r2, [pc, #32]	; (40ab60 <invn_math_inv_sqrt_q30_fxp+0xdc>)
  40ab40:	105b      	asrs	r3, r3, #1
  40ab42:	fb80 0102 	smull	r0, r1, r0, r2
  40ab46:	3301      	adds	r3, #1
  40ab48:	0f80      	lsrs	r0, r0, #30
  40ab4a:	f8ce 3000 	str.w	r3, [lr]
  40ab4e:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40ab52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40ab56:	bf00      	nop
  40ab58:	58b90bfc 	.word	0x58b90bfc
  40ab5c:	2c5c85fd 	.word	0x2c5c85fd
  40ab60:	2d413ccd 	.word	0x2d413ccd

0040ab64 <invn_math_inverse_q30_fxp>:
  40ab64:	2800      	cmp	r0, #0
  40ab66:	460a      	mov	r2, r1
  40ab68:	d05f      	beq.n	40ac2a <invn_math_inverse_q30_fxp+0xc6>
  40ab6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ab6e:	db72      	blt.n	40ac56 <invn_math_inverse_q30_fxp+0xf2>
  40ab70:	4943      	ldr	r1, [pc, #268]	; (40ac80 <invn_math_inverse_q30_fxp+0x11c>)
  40ab72:	2300      	movs	r3, #0
  40ab74:	4288      	cmp	r0, r1
  40ab76:	f04f 0400 	mov.w	r4, #0
  40ab7a:	6013      	str	r3, [r2, #0]
  40ab7c:	dc76      	bgt.n	40ac6c <invn_math_inverse_q30_fxp+0x108>
  40ab7e:	4d41      	ldr	r5, [pc, #260]	; (40ac84 <invn_math_inverse_q30_fxp+0x120>)
  40ab80:	42a8      	cmp	r0, r5
  40ab82:	dc07      	bgt.n	40ab94 <invn_math_inverse_q30_fxp+0x30>
  40ab84:	2101      	movs	r1, #1
  40ab86:	0040      	lsls	r0, r0, #1
  40ab88:	42a8      	cmp	r0, r5
  40ab8a:	460b      	mov	r3, r1
  40ab8c:	f101 0101 	add.w	r1, r1, #1
  40ab90:	ddf9      	ble.n	40ab86 <invn_math_inverse_q30_fxp+0x22>
  40ab92:	6013      	str	r3, [r2, #0]
  40ab94:	1040      	asrs	r0, r0, #1
  40ab96:	f1c0 46c0 	rsb	r6, r0, #1610612736	; 0x60000000
  40ab9a:	fb86 8906 	smull	r8, r9, r6, r6
  40ab9e:	ea4f 7898 	mov.w	r8, r8, lsr #30
  40aba2:	ea48 0889 	orr.w	r8, r8, r9, lsl #2
  40aba6:	ea4f 7be0 	mov.w	fp, r0, asr #31
  40abaa:	fb08 f50b 	mul.w	r5, r8, fp
  40abae:	ea4f 71a9 	mov.w	r1, r9, asr #30
  40abb2:	fb00 5101 	mla	r1, r0, r1, r5
  40abb6:	fba8 8900 	umull	r8, r9, r8, r0
  40abba:	4489      	add	r9, r1
  40abbc:	ea4f 7198 	mov.w	r1, r8, lsr #30
  40abc0:	ea41 0189 	orr.w	r1, r1, r9, lsl #2
  40abc4:	f1c1 41c0 	rsb	r1, r1, #1610612736	; 0x60000000
  40abc8:	fb81 6706 	smull	r6, r7, r1, r6
  40abcc:	0fb5      	lsrs	r5, r6, #30
  40abce:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
  40abd2:	ea4f 7ea7 	mov.w	lr, r7, asr #30
  40abd6:	fb05 f10e 	mul.w	r1, r5, lr
  40abda:	fba5 6705 	umull	r6, r7, r5, r5
  40abde:	eb07 0741 	add.w	r7, r7, r1, lsl #1
  40abe2:	0fb1      	lsrs	r1, r6, #30
  40abe4:	ea41 0187 	orr.w	r1, r1, r7, lsl #2
  40abe8:	fb80 0101 	smull	r0, r1, r0, r1
  40abec:	0f80      	lsrs	r0, r0, #30
  40abee:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40abf2:	f1c0 40c0 	rsb	r0, r0, #1610612736	; 0x60000000
  40abf6:	fb00 fe0e 	mul.w	lr, r0, lr
  40abfa:	17c7      	asrs	r7, r0, #31
  40abfc:	fb05 ee07 	mla	lr, r5, r7, lr
  40ac00:	fba0 0105 	umull	r0, r1, r0, r5
  40ac04:	4471      	add	r1, lr
  40ac06:	0f80      	lsrs	r0, r0, #30
  40ac08:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40ac0c:	07d9      	lsls	r1, r3, #31
  40ac0e:	d40e      	bmi.n	40ac2e <invn_math_inverse_q30_fxp+0xca>
  40ac10:	491d      	ldr	r1, [pc, #116]	; (40ac88 <invn_math_inverse_q30_fxp+0x124>)
  40ac12:	105b      	asrs	r3, r3, #1
  40ac14:	4288      	cmp	r0, r1
  40ac16:	6013      	str	r3, [r2, #0]
  40ac18:	bfc8      	it	gt
  40ac1a:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
  40ac1e:	dd0e      	ble.n	40ac3e <invn_math_inverse_q30_fxp+0xda>
  40ac20:	005b      	lsls	r3, r3, #1
  40ac22:	6013      	str	r3, [r2, #0]
  40ac24:	b9a4      	cbnz	r4, 40ac50 <invn_math_inverse_q30_fxp+0xec>
  40ac26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ac2a:	6008      	str	r0, [r1, #0]
  40ac2c:	4770      	bx	lr
  40ac2e:	4917      	ldr	r1, [pc, #92]	; (40ac8c <invn_math_inverse_q30_fxp+0x128>)
  40ac30:	fb80 0101 	smull	r0, r1, r0, r1
  40ac34:	105b      	asrs	r3, r3, #1
  40ac36:	0f80      	lsrs	r0, r0, #30
  40ac38:	3301      	adds	r3, #1
  40ac3a:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40ac3e:	fb80 0100 	smull	r0, r1, r0, r0
  40ac42:	0f80      	lsrs	r0, r0, #30
  40ac44:	005b      	lsls	r3, r3, #1
  40ac46:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40ac4a:	6013      	str	r3, [r2, #0]
  40ac4c:	2c00      	cmp	r4, #0
  40ac4e:	d0ea      	beq.n	40ac26 <invn_math_inverse_q30_fxp+0xc2>
  40ac50:	4240      	negs	r0, r0
  40ac52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ac56:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
  40ac5a:	d00c      	beq.n	40ac76 <invn_math_inverse_q30_fxp+0x112>
  40ac5c:	4908      	ldr	r1, [pc, #32]	; (40ac80 <invn_math_inverse_q30_fxp+0x11c>)
  40ac5e:	4240      	negs	r0, r0
  40ac60:	2300      	movs	r3, #0
  40ac62:	4288      	cmp	r0, r1
  40ac64:	f04f 0401 	mov.w	r4, #1
  40ac68:	6013      	str	r3, [r2, #0]
  40ac6a:	dd88      	ble.n	40ab7e <invn_math_inverse_q30_fxp+0x1a>
  40ac6c:	1040      	asrs	r0, r0, #1
  40ac6e:	f04f 33ff 	mov.w	r3, #4294967295
  40ac72:	6013      	str	r3, [r2, #0]
  40ac74:	e78e      	b.n	40ab94 <invn_math_inverse_q30_fxp+0x30>
  40ac76:	2401      	movs	r4, #1
  40ac78:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
  40ac7c:	e7f7      	b.n	40ac6e <invn_math_inverse_q30_fxp+0x10a>
  40ac7e:	bf00      	nop
  40ac80:	58b90bfc 	.word	0x58b90bfc
  40ac84:	2c5c85fd 	.word	0x2c5c85fd
  40ac88:	5a827999 	.word	0x5a827999
  40ac8c:	2d413ccd 	.word	0x2d413ccd

0040ac90 <invn_math_divide_q30_fxp>:
  40ac90:	2300      	movs	r3, #0
  40ac92:	6013      	str	r3, [r2, #0]
  40ac94:	2800      	cmp	r0, #0
  40ac96:	f000 808f 	beq.w	40adb8 <invn_math_divide_q30_fxp+0x128>
  40ac9a:	2900      	cmp	r1, #0
  40ac9c:	f000 8088 	beq.w	40adb0 <invn_math_divide_q30_fxp+0x120>
  40aca0:	4298      	cmp	r0, r3
  40aca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40aca6:	f2c0 8091 	blt.w	40adcc <invn_math_divide_q30_fxp+0x13c>
  40acaa:	2900      	cmp	r1, #0
  40acac:	f2c0 8085 	blt.w	40adba <invn_math_divide_q30_fxp+0x12a>
  40acb0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  40acb4:	d07e      	beq.n	40adb4 <invn_math_divide_q30_fxp+0x124>
  40acb6:	2600      	movs	r6, #0
  40acb8:	4b5a      	ldr	r3, [pc, #360]	; (40ae24 <invn_math_divide_q30_fxp+0x194>)
  40acba:	4299      	cmp	r1, r3
  40acbc:	f300 8093 	bgt.w	40ade6 <invn_math_divide_q30_fxp+0x156>
  40acc0:	4d59      	ldr	r5, [pc, #356]	; (40ae28 <invn_math_divide_q30_fxp+0x198>)
  40acc2:	42a9      	cmp	r1, r5
  40acc4:	f300 80ab 	bgt.w	40ae1e <invn_math_divide_q30_fxp+0x18e>
  40acc8:	2401      	movs	r4, #1
  40acca:	0049      	lsls	r1, r1, #1
  40accc:	42a9      	cmp	r1, r5
  40acce:	4623      	mov	r3, r4
  40acd0:	f104 0401 	add.w	r4, r4, #1
  40acd4:	ddf9      	ble.n	40acca <invn_math_divide_q30_fxp+0x3a>
  40acd6:	6013      	str	r3, [r2, #0]
  40acd8:	1049      	asrs	r1, r1, #1
  40acda:	f1c1 47c0 	rsb	r7, r1, #1610612736	; 0x60000000
  40acde:	fb87 4507 	smull	r4, r5, r7, r7
  40ace2:	0fa4      	lsrs	r4, r4, #30
  40ace4:	ea4f 79e1 	mov.w	r9, r1, asr #31
  40ace8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40acec:	ea4f 7ea5 	mov.w	lr, r5, asr #30
  40acf0:	fb04 f509 	mul.w	r5, r4, r9
  40acf4:	fb01 5e0e 	mla	lr, r1, lr, r5
  40acf8:	fba4 4501 	umull	r4, r5, r4, r1
  40acfc:	4475      	add	r5, lr
  40acfe:	0fa4      	lsrs	r4, r4, #30
  40ad00:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40ad04:	f1c4 44c0 	rsb	r4, r4, #1610612736	; 0x60000000
  40ad08:	fb84 4507 	smull	r4, r5, r4, r7
  40ad0c:	0fa7      	lsrs	r7, r4, #30
  40ad0e:	ea47 0785 	orr.w	r7, r7, r5, lsl #2
  40ad12:	ea4f 7ea5 	mov.w	lr, r5, asr #30
  40ad16:	fb07 fc0e 	mul.w	ip, r7, lr
  40ad1a:	fba7 4507 	umull	r4, r5, r7, r7
  40ad1e:	eb05 054c 	add.w	r5, r5, ip, lsl #1
  40ad22:	0fa4      	lsrs	r4, r4, #30
  40ad24:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40ad28:	fb81 4504 	smull	r4, r5, r1, r4
  40ad2c:	0fa4      	lsrs	r4, r4, #30
  40ad2e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40ad32:	f1c4 44c0 	rsb	r4, r4, #1610612736	; 0x60000000
  40ad36:	fb04 f10e 	mul.w	r1, r4, lr
  40ad3a:	ea4f 79e4 	mov.w	r9, r4, asr #31
  40ad3e:	fb07 1109 	mla	r1, r7, r9, r1
  40ad42:	fba4 4507 	umull	r4, r5, r4, r7
  40ad46:	440d      	add	r5, r1
  40ad48:	ea4f 7894 	mov.w	r8, r4, lsr #30
  40ad4c:	07d9      	lsls	r1, r3, #31
  40ad4e:	ea48 0885 	orr.w	r8, r8, r5, lsl #2
  40ad52:	d44c      	bmi.n	40adee <invn_math_divide_q30_fxp+0x15e>
  40ad54:	4935      	ldr	r1, [pc, #212]	; (40ae2c <invn_math_divide_q30_fxp+0x19c>)
  40ad56:	105b      	asrs	r3, r3, #1
  40ad58:	4588      	cmp	r8, r1
  40ad5a:	6013      	str	r3, [r2, #0]
  40ad5c:	dd50      	ble.n	40ae00 <invn_math_divide_q30_fxp+0x170>
  40ad5e:	005b      	lsls	r3, r3, #1
  40ad60:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40ad64:	2500      	movs	r5, #0
  40ad66:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  40ad6a:	6013      	str	r3, [r2, #0]
  40ad6c:	dc07      	bgt.n	40ad7e <invn_math_divide_q30_fxp+0xee>
  40ad6e:	1e59      	subs	r1, r3, #1
  40ad70:	0040      	lsls	r0, r0, #1
  40ad72:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  40ad76:	460b      	mov	r3, r1
  40ad78:	f101 31ff 	add.w	r1, r1, #4294967295
  40ad7c:	ddf8      	ble.n	40ad70 <invn_math_divide_q30_fxp+0xe0>
  40ad7e:	3301      	adds	r3, #1
  40ad80:	1040      	asrs	r0, r0, #1
  40ad82:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  40ad86:	4619      	mov	r1, r3
  40ad88:	f103 0301 	add.w	r3, r3, #1
  40ad8c:	dcf8      	bgt.n	40ad80 <invn_math_divide_q30_fxp+0xf0>
  40ad8e:	fb00 f305 	mul.w	r3, r0, r5
  40ad92:	ea4f 79e0 	mov.w	r9, r0, asr #31
  40ad96:	fb04 3309 	mla	r3, r4, r9, r3
  40ad9a:	fba0 4504 	umull	r4, r5, r0, r4
  40ad9e:	441d      	add	r5, r3
  40ada0:	0fa0      	lsrs	r0, r4, #30
  40ada2:	6011      	str	r1, [r2, #0]
  40ada4:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
  40ada8:	b126      	cbz	r6, 40adb4 <invn_math_divide_q30_fxp+0x124>
  40adaa:	4240      	negs	r0, r0
  40adac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40adb0:	4608      	mov	r0, r1
  40adb2:	4770      	bx	lr
  40adb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40adb8:	4770      	bx	lr
  40adba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40adbe:	d028      	beq.n	40ae12 <invn_math_divide_q30_fxp+0x182>
  40adc0:	4249      	negs	r1, r1
  40adc2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  40adc6:	d0f0      	beq.n	40adaa <invn_math_divide_q30_fxp+0x11a>
  40adc8:	2601      	movs	r6, #1
  40adca:	e775      	b.n	40acb8 <invn_math_divide_q30_fxp+0x28>
  40adcc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
  40add0:	bf14      	ite	ne
  40add2:	4240      	negne	r0, r0
  40add4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40add8:	2900      	cmp	r1, #0
  40adda:	dcf2      	bgt.n	40adc2 <invn_math_divide_q30_fxp+0x132>
  40addc:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40ade0:	d01b      	beq.n	40ae1a <invn_math_divide_q30_fxp+0x18a>
  40ade2:	4249      	negs	r1, r1
  40ade4:	e764      	b.n	40acb0 <invn_math_divide_q30_fxp+0x20>
  40ade6:	1049      	asrs	r1, r1, #1
  40ade8:	f04f 33ff 	mov.w	r3, #4294967295
  40adec:	e773      	b.n	40acd6 <invn_math_divide_q30_fxp+0x46>
  40adee:	4910      	ldr	r1, [pc, #64]	; (40ae30 <invn_math_divide_q30_fxp+0x1a0>)
  40adf0:	fb88 8901 	smull	r8, r9, r8, r1
  40adf4:	105b      	asrs	r3, r3, #1
  40adf6:	ea4f 7898 	mov.w	r8, r8, lsr #30
  40adfa:	3301      	adds	r3, #1
  40adfc:	ea48 0889 	orr.w	r8, r8, r9, lsl #2
  40ae00:	fb88 8908 	smull	r8, r9, r8, r8
  40ae04:	ea4f 7498 	mov.w	r4, r8, lsr #30
  40ae08:	ea44 0489 	orr.w	r4, r4, r9, lsl #2
  40ae0c:	005b      	lsls	r3, r3, #1
  40ae0e:	17e5      	asrs	r5, r4, #31
  40ae10:	e7a9      	b.n	40ad66 <invn_math_divide_q30_fxp+0xd6>
  40ae12:	2601      	movs	r6, #1
  40ae14:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
  40ae18:	e7e6      	b.n	40ade8 <invn_math_divide_q30_fxp+0x158>
  40ae1a:	2600      	movs	r6, #0
  40ae1c:	e7fa      	b.n	40ae14 <invn_math_divide_q30_fxp+0x184>
  40ae1e:	2300      	movs	r3, #0
  40ae20:	e75a      	b.n	40acd8 <invn_math_divide_q30_fxp+0x48>
  40ae22:	bf00      	nop
  40ae24:	58b90bfc 	.word	0x58b90bfc
  40ae28:	2c5c85fd 	.word	0x2c5c85fd
  40ae2c:	5a827999 	.word	0x5a827999
  40ae30:	2d413ccd 	.word	0x2d413ccd

0040ae34 <invn_integrate_gyro_fast_trigo_fxp>:
  40ae34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ae38:	6846      	ldr	r6, [r0, #4]
  40ae3a:	6807      	ldr	r7, [r0, #0]
  40ae3c:	460c      	mov	r4, r1
  40ae3e:	fb86 2306 	smull	r2, r3, r6, r6
  40ae42:	6881      	ldr	r1, [r0, #8]
  40ae44:	fbc7 2307 	smlal	r2, r3, r7, r7
  40ae48:	fbc1 2301 	smlal	r2, r3, r1, r1
  40ae4c:	4605      	mov	r5, r0
  40ae4e:	0f90      	lsrs	r0, r2, #30
  40ae50:	ea50 0083 	orrs.w	r0, r0, r3, lsl #2
  40ae54:	b08a      	sub	sp, #40	; 0x28
  40ae56:	d41c      	bmi.n	40ae92 <invn_integrate_gyro_fast_trigo_fxp+0x5e>
  40ae58:	4b5e      	ldr	r3, [pc, #376]	; (40afd4 <invn_integrate_gyro_fast_trigo_fxp+0x1a0>)
  40ae5a:	4298      	cmp	r0, r3
  40ae5c:	f300 80af 	bgt.w	40afbe <invn_integrate_gyro_fast_trigo_fxp+0x18a>
  40ae60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40ae64:	9703      	str	r7, [sp, #12]
  40ae66:	9604      	str	r6, [sp, #16]
  40ae68:	9105      	str	r1, [sp, #20]
  40ae6a:	9302      	str	r3, [sp, #8]
  40ae6c:	e894 0044 	ldmia.w	r4, {r2, r6}
  40ae70:	68e3      	ldr	r3, [r4, #12]
  40ae72:	68a5      	ldr	r5, [r4, #8]
  40ae74:	9206      	str	r2, [sp, #24]
  40ae76:	a902      	add	r1, sp, #8
  40ae78:	4622      	mov	r2, r4
  40ae7a:	a806      	add	r0, sp, #24
  40ae7c:	9309      	str	r3, [sp, #36]	; 0x24
  40ae7e:	9607      	str	r6, [sp, #28]
  40ae80:	9508      	str	r5, [sp, #32]
  40ae82:	f7ff fc03 	bl	40a68c <invn_math_quat_mult_fxp>
  40ae86:	4620      	mov	r0, r4
  40ae88:	f002 fb8e 	bl	40d5a8 <invn_normalize_quaternion_q30>
  40ae8c:	b00a      	add	sp, #40	; 0x28
  40ae8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40ae92:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  40ae96:	2700      	movs	r7, #0
  40ae98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40ae9c:	a901      	add	r1, sp, #4
  40ae9e:	f7ff fdf1 	bl	40aa84 <invn_math_inv_sqrt_q30_fxp>
  40aea2:	f8dd e004 	ldr.w	lr, [sp, #4]
  40aea6:	6829      	ldr	r1, [r5, #0]
  40aea8:	f1ce 031e 	rsb	r3, lr, #30
  40aeac:	fb80 8901 	smull	r8, r9, r0, r1
  40aeb0:	f1c3 0220 	rsb	r2, r3, #32
  40aeb4:	f1b3 0120 	subs.w	r1, r3, #32
  40aeb8:	fa09 fa02 	lsl.w	sl, r9, r2
  40aebc:	fa28 fc03 	lsr.w	ip, r8, r3
  40aec0:	ea4c 0c0a 	orr.w	ip, ip, sl
  40aec4:	bf5c      	itt	pl
  40aec6:	fa49 f101 	asrpl.w	r1, r9, r1
  40aeca:	ea4c 0c01 	orrpl.w	ip, ip, r1
  40aece:	6869      	ldr	r1, [r5, #4]
  40aed0:	f8cd c00c 	str.w	ip, [sp, #12]
  40aed4:	fb80 8901 	smull	r8, r9, r0, r1
  40aed8:	fa28 f103 	lsr.w	r1, r8, r3
  40aedc:	fa09 fa02 	lsl.w	sl, r9, r2
  40aee0:	f1b3 0c20 	subs.w	ip, r3, #32
  40aee4:	68ad      	ldr	r5, [r5, #8]
  40aee6:	ea41 010a 	orr.w	r1, r1, sl
  40aeea:	bf5c      	itt	pl
  40aeec:	fa49 fc0c 	asrpl.w	ip, r9, ip
  40aef0:	ea41 010c 	orrpl.w	r1, r1, ip
  40aef4:	fb80 8905 	smull	r8, r9, r0, r5
  40aef8:	fa09 f202 	lsl.w	r2, r9, r2
  40aefc:	9104      	str	r1, [sp, #16]
  40aefe:	fa28 f103 	lsr.w	r1, r8, r3
  40af02:	3b20      	subs	r3, #32
  40af04:	ea41 0102 	orr.w	r1, r1, r2
  40af08:	bf5c      	itt	pl
  40af0a:	fa49 f303 	asrpl.w	r3, r9, r3
  40af0e:	4319      	orrpl	r1, r3
  40af10:	fb00 f207 	mul.w	r2, r0, r7
  40af14:	17c3      	asrs	r3, r0, #31
  40af16:	f1ce 0e1f 	rsb	lr, lr, #31
  40af1a:	fb06 2303 	mla	r3, r6, r3, r2
  40af1e:	fba0 6706 	umull	r6, r7, r0, r6
  40af22:	441f      	add	r7, r3
  40af24:	f1ce 0320 	rsb	r3, lr, #32
  40af28:	fa26 f50e 	lsr.w	r5, r6, lr
  40af2c:	fa07 f303 	lsl.w	r3, r7, r3
  40af30:	f1be 0e20 	subs.w	lr, lr, #32
  40af34:	ea45 0503 	orr.w	r5, r5, r3
  40af38:	bf5c      	itt	pl
  40af3a:	fa47 fe0e 	asrpl.w	lr, r7, lr
  40af3e:	ea45 050e 	orrpl.w	r5, r5, lr
  40af42:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
  40af46:	9105      	str	r1, [sp, #20]
  40af48:	462e      	mov	r6, r5
  40af4a:	dd3b      	ble.n	40afc4 <invn_integrate_gyro_fast_trigo_fxp+0x190>
  40af4c:	2501      	movs	r5, #1
  40af4e:	1076      	asrs	r6, r6, #1
  40af50:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
  40af54:	f105 0501 	add.w	r5, r5, #1
  40af58:	dcf9      	bgt.n	40af4e <invn_integrate_gyro_fast_trigo_fxp+0x11a>
  40af5a:	4630      	mov	r0, r6
  40af5c:	f002 fa76 	bl	40d44c <invn_math_cos_q30_fxp>
  40af60:	4607      	mov	r7, r0
  40af62:	4630      	mov	r0, r6
  40af64:	f002 fa46 	bl	40d3f4 <invn_math_sin_q30_fxp>
  40af68:	fb87 8907 	smull	r8, r9, r7, r7
  40af6c:	fb80 2300 	smull	r2, r3, r0, r0
  40af70:	ebb8 0202 	subs.w	r2, r8, r2
  40af74:	fb87 0100 	smull	r0, r1, r7, r0
  40af78:	eb69 0303 	sbc.w	r3, r9, r3
  40af7c:	0f96      	lsrs	r6, r2, #30
  40af7e:	3d01      	subs	r5, #1
  40af80:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
  40af84:	0f40      	lsrs	r0, r0, #29
  40af86:	2d01      	cmp	r5, #1
  40af88:	4637      	mov	r7, r6
  40af8a:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
  40af8e:	d1eb      	bne.n	40af68 <invn_integrate_gyro_fast_trigo_fxp+0x134>
  40af90:	9b03      	ldr	r3, [sp, #12]
  40af92:	9a04      	ldr	r2, [sp, #16]
  40af94:	9905      	ldr	r1, [sp, #20]
  40af96:	9602      	str	r6, [sp, #8]
  40af98:	fb80 6703 	smull	r6, r7, r0, r3
  40af9c:	fb80 2302 	smull	r2, r3, r0, r2
  40afa0:	fb80 0101 	smull	r0, r1, r0, r1
  40afa4:	0f95      	lsrs	r5, r2, #30
  40afa6:	0fb6      	lsrs	r6, r6, #30
  40afa8:	0f82      	lsrs	r2, r0, #30
  40afaa:	ea46 0687 	orr.w	r6, r6, r7, lsl #2
  40afae:	ea45 0583 	orr.w	r5, r5, r3, lsl #2
  40afb2:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
  40afb6:	9603      	str	r6, [sp, #12]
  40afb8:	9504      	str	r5, [sp, #16]
  40afba:	9205      	str	r2, [sp, #20]
  40afbc:	e756      	b.n	40ae6c <invn_integrate_gyro_fast_trigo_fxp+0x38>
  40afbe:	4606      	mov	r6, r0
  40afc0:	17c7      	asrs	r7, r0, #31
  40afc2:	e76b      	b.n	40ae9c <invn_integrate_gyro_fast_trigo_fxp+0x68>
  40afc4:	4628      	mov	r0, r5
  40afc6:	f002 fa41 	bl	40d44c <invn_math_cos_q30_fxp>
  40afca:	4606      	mov	r6, r0
  40afcc:	4628      	mov	r0, r5
  40afce:	f002 fa11 	bl	40d3f4 <invn_math_sin_q30_fxp>
  40afd2:	e7dd      	b.n	40af90 <invn_integrate_gyro_fast_trigo_fxp+0x15c>
  40afd4:	0028f5c1 	.word	0x0028f5c1

0040afd8 <invn_angle_from_mag_correction_fxp>:
  40afd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40afda:	460c      	mov	r4, r1
  40afdc:	b08b      	sub	sp, #44	; 0x2c
  40afde:	4607      	mov	r7, r0
  40afe0:	68c9      	ldr	r1, [r1, #12]
  40afe2:	6860      	ldr	r0, [r4, #4]
  40afe4:	4616      	mov	r6, r2
  40afe6:	f7ff fcbf 	bl	40a968 <invn_math_mult_q29_fxp>
  40afea:	6821      	ldr	r1, [r4, #0]
  40afec:	4605      	mov	r5, r0
  40afee:	68a0      	ldr	r0, [r4, #8]
  40aff0:	f7ff fcba 	bl	40a968 <invn_math_mult_q29_fxp>
  40aff4:	68e1      	ldr	r1, [r4, #12]
  40aff6:	1a2d      	subs	r5, r5, r0
  40aff8:	68a0      	ldr	r0, [r4, #8]
  40affa:	9501      	str	r5, [sp, #4]
  40affc:	f7ff fcb4 	bl	40a968 <invn_math_mult_q29_fxp>
  40b000:	6821      	ldr	r1, [r4, #0]
  40b002:	4605      	mov	r5, r0
  40b004:	6860      	ldr	r0, [r4, #4]
  40b006:	f7ff fcaf 	bl	40a968 <invn_math_mult_q29_fxp>
  40b00a:	68e1      	ldr	r1, [r4, #12]
  40b00c:	4405      	add	r5, r0
  40b00e:	4608      	mov	r0, r1
  40b010:	9502      	str	r5, [sp, #8]
  40b012:	f7ff fca9 	bl	40a968 <invn_math_mult_q29_fxp>
  40b016:	6821      	ldr	r1, [r4, #0]
  40b018:	4605      	mov	r5, r0
  40b01a:	4608      	mov	r0, r1
  40b01c:	f7ff fca4 	bl	40a968 <invn_math_mult_q29_fxp>
  40b020:	4405      	add	r5, r0
  40b022:	aa07      	add	r2, sp, #28
  40b024:	4639      	mov	r1, r7
  40b026:	a801      	add	r0, sp, #4
  40b028:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
  40b02c:	9503      	str	r5, [sp, #12]
  40b02e:	f002 fa41 	bl	40d4b4 <invn_cross_product_q30>
  40b032:	a807      	add	r0, sp, #28
  40b034:	a904      	add	r1, sp, #16
  40b036:	f002 fa6d 	bl	40d514 <invn_normalize_vector_q30>
  40b03a:	6861      	ldr	r1, [r4, #4]
  40b03c:	4608      	mov	r0, r1
  40b03e:	f7ff fc93 	bl	40a968 <invn_math_mult_q29_fxp>
  40b042:	6821      	ldr	r1, [r4, #0]
  40b044:	4605      	mov	r5, r0
  40b046:	4608      	mov	r0, r1
  40b048:	f7ff fc8e 	bl	40a968 <invn_math_mult_q29_fxp>
  40b04c:	4405      	add	r5, r0
  40b04e:	6821      	ldr	r1, [r4, #0]
  40b050:	68e0      	ldr	r0, [r4, #12]
  40b052:	f1c5 4580 	rsb	r5, r5, #1073741824	; 0x40000000
  40b056:	9501      	str	r5, [sp, #4]
  40b058:	f7ff fc86 	bl	40a968 <invn_math_mult_q29_fxp>
  40b05c:	68a1      	ldr	r1, [r4, #8]
  40b05e:	4605      	mov	r5, r0
  40b060:	6860      	ldr	r0, [r4, #4]
  40b062:	f7ff fc81 	bl	40a968 <invn_math_mult_q29_fxp>
  40b066:	68e1      	ldr	r1, [r4, #12]
  40b068:	1a2d      	subs	r5, r5, r0
  40b06a:	6860      	ldr	r0, [r4, #4]
  40b06c:	9502      	str	r5, [sp, #8]
  40b06e:	f7ff fc7b 	bl	40a968 <invn_math_mult_q29_fxp>
  40b072:	6821      	ldr	r1, [r4, #0]
  40b074:	4605      	mov	r5, r0
  40b076:	68a0      	ldr	r0, [r4, #8]
  40b078:	f7ff fc76 	bl	40a968 <invn_math_mult_q29_fxp>
  40b07c:	4405      	add	r5, r0
  40b07e:	426d      	negs	r5, r5
  40b080:	4632      	mov	r2, r6
  40b082:	a901      	add	r1, sp, #4
  40b084:	a804      	add	r0, sp, #16
  40b086:	9503      	str	r5, [sp, #12]
  40b088:	f002 fa14 	bl	40d4b4 <invn_cross_product_q30>
  40b08c:	b00b      	add	sp, #44	; 0x2c
  40b08e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040b090 <invn_angle_from_acc_correction_fxp>:
  40b090:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b092:	460c      	mov	r4, r1
  40b094:	b087      	sub	sp, #28
  40b096:	4606      	mov	r6, r0
  40b098:	68c9      	ldr	r1, [r1, #12]
  40b09a:	6860      	ldr	r0, [r4, #4]
  40b09c:	4617      	mov	r7, r2
  40b09e:	f7ff fc63 	bl	40a968 <invn_math_mult_q29_fxp>
  40b0a2:	6821      	ldr	r1, [r4, #0]
  40b0a4:	4605      	mov	r5, r0
  40b0a6:	68a0      	ldr	r0, [r4, #8]
  40b0a8:	f7ff fc5e 	bl	40a968 <invn_math_mult_q29_fxp>
  40b0ac:	68e1      	ldr	r1, [r4, #12]
  40b0ae:	1a2d      	subs	r5, r5, r0
  40b0b0:	68a0      	ldr	r0, [r4, #8]
  40b0b2:	9500      	str	r5, [sp, #0]
  40b0b4:	f7ff fc58 	bl	40a968 <invn_math_mult_q29_fxp>
  40b0b8:	6821      	ldr	r1, [r4, #0]
  40b0ba:	4605      	mov	r5, r0
  40b0bc:	6860      	ldr	r0, [r4, #4]
  40b0be:	f7ff fc53 	bl	40a968 <invn_math_mult_q29_fxp>
  40b0c2:	68e1      	ldr	r1, [r4, #12]
  40b0c4:	4405      	add	r5, r0
  40b0c6:	4608      	mov	r0, r1
  40b0c8:	9501      	str	r5, [sp, #4]
  40b0ca:	f7ff fc4d 	bl	40a968 <invn_math_mult_q29_fxp>
  40b0ce:	6821      	ldr	r1, [r4, #0]
  40b0d0:	4605      	mov	r5, r0
  40b0d2:	4608      	mov	r0, r1
  40b0d4:	f7ff fc48 	bl	40a968 <invn_math_mult_q29_fxp>
  40b0d8:	4405      	add	r5, r0
  40b0da:	a903      	add	r1, sp, #12
  40b0dc:	4630      	mov	r0, r6
  40b0de:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
  40b0e2:	9502      	str	r5, [sp, #8]
  40b0e4:	f002 fa16 	bl	40d514 <invn_normalize_vector_q30>
  40b0e8:	463a      	mov	r2, r7
  40b0ea:	a803      	add	r0, sp, #12
  40b0ec:	4669      	mov	r1, sp
  40b0ee:	f002 f9e1 	bl	40d4b4 <invn_cross_product_q30>
  40b0f2:	b007      	add	sp, #28
  40b0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b0f6:	bf00      	nop

0040b0f8 <invn_quat_6x_correction_fxp>:
  40b0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b0fc:	460c      	mov	r4, r1
  40b0fe:	b086      	sub	sp, #24
  40b100:	4680      	mov	r8, r0
  40b102:	68c9      	ldr	r1, [r1, #12]
  40b104:	6860      	ldr	r0, [r4, #4]
  40b106:	4615      	mov	r5, r2
  40b108:	461f      	mov	r7, r3
  40b10a:	f7ff fc2d 	bl	40a968 <invn_math_mult_q29_fxp>
  40b10e:	6821      	ldr	r1, [r4, #0]
  40b110:	4606      	mov	r6, r0
  40b112:	68a0      	ldr	r0, [r4, #8]
  40b114:	f7ff fc28 	bl	40a968 <invn_math_mult_q29_fxp>
  40b118:	68e1      	ldr	r1, [r4, #12]
  40b11a:	1a36      	subs	r6, r6, r0
  40b11c:	68a0      	ldr	r0, [r4, #8]
  40b11e:	9600      	str	r6, [sp, #0]
  40b120:	f7ff fc22 	bl	40a968 <invn_math_mult_q29_fxp>
  40b124:	6821      	ldr	r1, [r4, #0]
  40b126:	4606      	mov	r6, r0
  40b128:	6860      	ldr	r0, [r4, #4]
  40b12a:	f7ff fc1d 	bl	40a968 <invn_math_mult_q29_fxp>
  40b12e:	68e1      	ldr	r1, [r4, #12]
  40b130:	4406      	add	r6, r0
  40b132:	4608      	mov	r0, r1
  40b134:	9601      	str	r6, [sp, #4]
  40b136:	f7ff fc17 	bl	40a968 <invn_math_mult_q29_fxp>
  40b13a:	6821      	ldr	r1, [r4, #0]
  40b13c:	4606      	mov	r6, r0
  40b13e:	4608      	mov	r0, r1
  40b140:	f7ff fc12 	bl	40a968 <invn_math_mult_q29_fxp>
  40b144:	4406      	add	r6, r0
  40b146:	a903      	add	r1, sp, #12
  40b148:	4640      	mov	r0, r8
  40b14a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  40b14e:	9602      	str	r6, [sp, #8]
  40b150:	f002 f9e0 	bl	40d514 <invn_normalize_vector_q30>
  40b154:	462a      	mov	r2, r5
  40b156:	a803      	add	r0, sp, #12
  40b158:	4669      	mov	r1, sp
  40b15a:	f002 f9ab 	bl	40d4b4 <invn_cross_product_q30>
  40b15e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
  40b162:	1048      	asrs	r0, r1, #1
  40b164:	1052      	asrs	r2, r2, #1
  40b166:	105b      	asrs	r3, r3, #1
  40b168:	e885 000d 	stmia.w	r5, {r0, r2, r3}
  40b16c:	4621      	mov	r1, r4
  40b16e:	4628      	mov	r0, r5
  40b170:	f7ff fe60 	bl	40ae34 <invn_integrate_gyro_fast_trigo_fxp>
  40b174:	e89d 000e 	ldmia.w	sp, {r1, r2, r3}
  40b178:	e887 000e 	stmia.w	r7, {r1, r2, r3}
  40b17c:	b006      	add	sp, #24
  40b17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b182:	bf00      	nop

0040b184 <invn_quat_to_gravity_fxp>:
  40b184:	b570      	push	{r4, r5, r6, lr}
  40b186:	4604      	mov	r4, r0
  40b188:	460e      	mov	r6, r1
  40b18a:	6840      	ldr	r0, [r0, #4]
  40b18c:	68e1      	ldr	r1, [r4, #12]
  40b18e:	f7ff fbeb 	bl	40a968 <invn_math_mult_q29_fxp>
  40b192:	6821      	ldr	r1, [r4, #0]
  40b194:	4605      	mov	r5, r0
  40b196:	68a0      	ldr	r0, [r4, #8]
  40b198:	f7ff fbe6 	bl	40a968 <invn_math_mult_q29_fxp>
  40b19c:	1a28      	subs	r0, r5, r0
  40b19e:	6030      	str	r0, [r6, #0]
  40b1a0:	68e1      	ldr	r1, [r4, #12]
  40b1a2:	68a0      	ldr	r0, [r4, #8]
  40b1a4:	f7ff fbe0 	bl	40a968 <invn_math_mult_q29_fxp>
  40b1a8:	6821      	ldr	r1, [r4, #0]
  40b1aa:	4605      	mov	r5, r0
  40b1ac:	6860      	ldr	r0, [r4, #4]
  40b1ae:	f7ff fbdb 	bl	40a968 <invn_math_mult_q29_fxp>
  40b1b2:	4428      	add	r0, r5
  40b1b4:	6070      	str	r0, [r6, #4]
  40b1b6:	68e1      	ldr	r1, [r4, #12]
  40b1b8:	4608      	mov	r0, r1
  40b1ba:	f7ff fbd5 	bl	40a968 <invn_math_mult_q29_fxp>
  40b1be:	6821      	ldr	r1, [r4, #0]
  40b1c0:	4605      	mov	r5, r0
  40b1c2:	4608      	mov	r0, r1
  40b1c4:	f7ff fbd0 	bl	40a968 <invn_math_mult_q29_fxp>
  40b1c8:	4428      	add	r0, r5
  40b1ca:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
  40b1ce:	60b0      	str	r0, [r6, #8]
  40b1d0:	bd70      	pop	{r4, r5, r6, pc}
  40b1d2:	bf00      	nop

0040b1d4 <GyroCalFnmFxp_Recalibrate>:
  40b1d4:	2300      	movs	r3, #0
  40b1d6:	6143      	str	r3, [r0, #20]
  40b1d8:	4770      	bx	lr
  40b1da:	bf00      	nop

0040b1dc <GyroCalFnmFxp_SetCustomParam>:
  40b1dc:	b4f0      	push	{r4, r5, r6, r7}
  40b1de:	2401      	movs	r4, #1
  40b1e0:	409c      	lsls	r4, r3
  40b1e2:	9f05      	ldr	r7, [sp, #20]
  40b1e4:	9e04      	ldr	r6, [sp, #16]
  40b1e6:	9d06      	ldr	r5, [sp, #24]
  40b1e8:	6001      	str	r1, [r0, #0]
  40b1ea:	6042      	str	r2, [r0, #4]
  40b1ec:	9907      	ldr	r1, [sp, #28]
  40b1ee:	9a08      	ldr	r2, [sp, #32]
  40b1f0:	61c4      	str	r4, [r0, #28]
  40b1f2:	60c7      	str	r7, [r0, #12]
  40b1f4:	6206      	str	r6, [r0, #32]
  40b1f6:	6105      	str	r5, [r0, #16]
  40b1f8:	6083      	str	r3, [r0, #8]
  40b1fa:	6141      	str	r1, [r0, #20]
  40b1fc:	6182      	str	r2, [r0, #24]
  40b1fe:	bcf0      	pop	{r4, r5, r6, r7}
  40b200:	4770      	bx	lr
  40b202:	bf00      	nop

0040b204 <GyroCalFnmFxp_SetSamplingPeriod>:
  40b204:	2900      	cmp	r1, #0
  40b206:	dd14      	ble.n	40b232 <GyroCalFnmFxp_SetSamplingPeriod+0x2e>
  40b208:	b430      	push	{r4, r5}
  40b20a:	6884      	ldr	r4, [r0, #8]
  40b20c:	6805      	ldr	r5, [r0, #0]
  40b20e:	fa01 f404 	lsl.w	r4, r1, r4
  40b212:	1049      	asrs	r1, r1, #1
  40b214:	440c      	add	r4, r1
  40b216:	440d      	add	r5, r1
  40b218:	2200      	movs	r2, #0
  40b21a:	42a5      	cmp	r5, r4
  40b21c:	6042      	str	r2, [r0, #4]
  40b21e:	dd07      	ble.n	40b230 <GyroCalFnmFxp_SetSamplingPeriod+0x2c>
  40b220:	0063      	lsls	r3, r4, #1
  40b222:	4619      	mov	r1, r3
  40b224:	428d      	cmp	r5, r1
  40b226:	f102 0201 	add.w	r2, r2, #1
  40b22a:	4423      	add	r3, r4
  40b22c:	dcf9      	bgt.n	40b222 <GyroCalFnmFxp_SetSamplingPeriod+0x1e>
  40b22e:	6042      	str	r2, [r0, #4]
  40b230:	bc30      	pop	{r4, r5}
  40b232:	4770      	bx	lr

0040b234 <gyro_cal_computeMoment>:
  40b234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b238:	2b00      	cmp	r3, #0
  40b23a:	b085      	sub	sp, #20
  40b23c:	db78      	blt.n	40b330 <gyro_cal_computeMoment+0xfc>
  40b23e:	68c4      	ldr	r4, [r0, #12]
  40b240:	6907      	ldr	r7, [r0, #16]
  40b242:	6805      	ldr	r5, [r0, #0]
  40b244:	2600      	movs	r6, #0
  40b246:	ea46 0804 	orr.w	r8, r6, r4
  40b24a:	ea47 79e4 	orr.w	r9, r7, r4, asr #31
  40b24e:	f1a3 0420 	sub.w	r4, r3, #32
  40b252:	fa09 fe03 	lsl.w	lr, r9, r3
  40b256:	fa08 f404 	lsl.w	r4, r8, r4
  40b25a:	ea4e 0e04 	orr.w	lr, lr, r4
  40b25e:	f1c3 0420 	rsb	r4, r3, #32
  40b262:	fa28 f404 	lsr.w	r4, r8, r4
  40b266:	ea4e 0e04 	orr.w	lr, lr, r4
  40b26a:	6846      	ldr	r6, [r0, #4]
  40b26c:	6884      	ldr	r4, [r0, #8]
  40b26e:	fa08 fc03 	lsl.w	ip, r8, r3
  40b272:	409d      	lsls	r5, r3
  40b274:	409e      	lsls	r6, r3
  40b276:	fa04 f303 	lsl.w	r3, r4, r3
  40b27a:	9303      	str	r3, [sp, #12]
  40b27c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
  40b280:	f04f 0800 	mov.w	r8, #0
  40b284:	ea48 0a0c 	orr.w	sl, r8, ip
  40b288:	ea4e 7bec 	orr.w	fp, lr, ip, asr #31
  40b28c:	f1a7 0e20 	sub.w	lr, r7, #32
  40b290:	fa0b f307 	lsl.w	r3, fp, r7
  40b294:	fa0a fe0e 	lsl.w	lr, sl, lr
  40b298:	1c4c      	adds	r4, r1, #1
  40b29a:	f1c7 0c20 	rsb	ip, r7, #32
  40b29e:	ea43 030e 	orr.w	r3, r3, lr
  40b2a2:	fa2a fc0c 	lsr.w	ip, sl, ip
  40b2a6:	0064      	lsls	r4, r4, #1
  40b2a8:	fb05 fe05 	mul.w	lr, r5, r5
  40b2ac:	fa05 f404 	lsl.w	r4, r5, r4
  40b2b0:	ea43 050c 	orr.w	r5, r3, ip
  40b2b4:	9b03      	ldr	r3, [sp, #12]
  40b2b6:	9501      	str	r5, [sp, #4]
  40b2b8:	fb84 4503 	smull	r4, r5, r4, r3
  40b2bc:	fa0a f307 	lsl.w	r3, sl, r7
  40b2c0:	9300      	str	r3, [sp, #0]
  40b2c2:	e9dd ab00 	ldrd	sl, fp, [sp]
  40b2c6:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
  40b2ca:	ea4f 084c 	mov.w	r8, ip, lsl #1
  40b2ce:	ebba 0a04 	subs.w	sl, sl, r4
  40b2d2:	fa06 f601 	lsl.w	r6, r6, r1
  40b2d6:	eb6b 0b05 	sbc.w	fp, fp, r5
  40b2da:	fb8e 4508 	smull	r4, r5, lr, r8
  40b2de:	ebba 0a04 	subs.w	sl, sl, r4
  40b2e2:	fb88 3406 	smull	r3, r4, r8, r6
  40b2e6:	eb6b 0b05 	sbc.w	fp, fp, r5
  40b2ea:	eb1a 0a03 	adds.w	sl, sl, r3
  40b2ee:	eb4b 0b04 	adc.w	fp, fp, r4
  40b2f2:	eb13 080a 	adds.w	r8, r3, sl
  40b2f6:	eb44 090b 	adc.w	r9, r4, fp
  40b2fa:	fb86 4506 	smull	r4, r5, r6, r6
  40b2fe:	ebb8 0604 	subs.w	r6, r8, r4
  40b302:	eb69 0705 	sbc.w	r7, r9, r5
  40b306:	1b36      	subs	r6, r6, r4
  40b308:	eb67 0705 	sbc.w	r7, r7, r5
  40b30c:	1b36      	subs	r6, r6, r4
  40b30e:	eb67 0705 	sbc.w	r7, r7, r5
  40b312:	0ff3      	lsrs	r3, r6, #31
  40b314:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  40b318:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  40b31c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  40b320:	4291      	cmp	r1, r2
  40b322:	6143      	str	r3, [r0, #20]
  40b324:	bfac      	ite	ge
  40b326:	2000      	movge	r0, #0
  40b328:	2001      	movlt	r0, #1
  40b32a:	b005      	add	sp, #20
  40b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b330:	68c7      	ldr	r7, [r0, #12]
  40b332:	6905      	ldr	r5, [r0, #16]
  40b334:	6846      	ldr	r6, [r0, #4]
  40b336:	f1c3 0e00 	rsb	lr, r3, #0
  40b33a:	2400      	movs	r4, #0
  40b33c:	ea45 79e7 	orr.w	r9, r5, r7, asr #31
  40b340:	ea44 0807 	orr.w	r8, r4, r7
  40b344:	f1ce 0320 	rsb	r3, lr, #32
  40b348:	fa28 fc0e 	lsr.w	ip, r8, lr
  40b34c:	fa09 f303 	lsl.w	r3, r9, r3
  40b350:	ea4c 0c03 	orr.w	ip, ip, r3
  40b354:	6803      	ldr	r3, [r0, #0]
  40b356:	fa43 f50e 	asr.w	r5, r3, lr
  40b35a:	6883      	ldr	r3, [r0, #8]
  40b35c:	f1be 0720 	subs.w	r7, lr, #32
  40b360:	fa43 f30e 	asr.w	r3, r3, lr
  40b364:	bf58      	it	pl
  40b366:	fa49 f707 	asrpl.w	r7, r9, r7
  40b36a:	fa46 f60e 	asr.w	r6, r6, lr
  40b36e:	9303      	str	r3, [sp, #12]
  40b370:	bf58      	it	pl
  40b372:	ea4c 0c07 	orrpl.w	ip, ip, r7
  40b376:	fa49 fe0e 	asr.w	lr, r9, lr
  40b37a:	e77f      	b.n	40b27c <gyro_cal_computeMoment+0x48>

0040b37c <gyro_cal_fnm>:
  40b37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b380:	f8d2 c008 	ldr.w	ip, [r2, #8]
  40b384:	4615      	mov	r5, r2
  40b386:	6a42      	ldr	r2, [r0, #36]	; 0x24
  40b388:	ebac 0e02 	sub.w	lr, ip, r2
  40b38c:	460e      	mov	r6, r1
  40b38e:	ea8e 73ee 	eor.w	r3, lr, lr, asr #31
  40b392:	6a09      	ldr	r1, [r1, #32]
  40b394:	eba3 73ee 	sub.w	r3, r3, lr, asr #31
  40b398:	428b      	cmp	r3, r1
  40b39a:	b089      	sub	sp, #36	; 0x24
  40b39c:	f280 809a 	bge.w	40b4d4 <gyro_cal_fnm+0x158>
  40b3a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40b3a2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  40b3a6:	ebaa 0903 	sub.w	r9, sl, r3
  40b3aa:	ea89 73e9 	eor.w	r3, r9, r9, asr #31
  40b3ae:	eba3 73e9 	sub.w	r3, r3, r9, asr #31
  40b3b2:	4299      	cmp	r1, r3
  40b3b4:	4604      	mov	r4, r0
  40b3b6:	f340 808d 	ble.w	40b4d4 <gyro_cal_fnm+0x158>
  40b3ba:	692a      	ldr	r2, [r5, #16]
  40b3bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40b3be:	9206      	str	r2, [sp, #24]
  40b3c0:	eba2 0b03 	sub.w	fp, r2, r3
  40b3c4:	ea8b 73eb 	eor.w	r3, fp, fp, asr #31
  40b3c8:	eba3 73eb 	sub.w	r3, r3, fp, asr #31
  40b3cc:	4299      	cmp	r1, r3
  40b3ce:	f340 8081 	ble.w	40b4d4 <gyro_cal_fnm+0x158>
  40b3d2:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40b3d4:	9201      	str	r2, [sp, #4]
  40b3d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  40b3d8:	f8d4 8058 	ldr.w	r8, [r4, #88]	; 0x58
  40b3dc:	6be7      	ldr	r7, [r4, #60]	; 0x3c
  40b3de:	9707      	str	r7, [sp, #28]
  40b3e0:	2000      	movs	r0, #0
  40b3e2:	ea4f 1329 	mov.w	r3, r9, asr #4
  40b3e6:	4691      	mov	r9, r2
  40b3e8:	9303      	str	r3, [sp, #12]
  40b3ea:	4302      	orrs	r2, r0
  40b3ec:	ea48 73e9 	orr.w	r3, r8, r9, asr #31
  40b3f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40b3f4:	9b03      	ldr	r3, [sp, #12]
  40b3f6:	9000      	str	r0, [sp, #0]
  40b3f8:	fb03 f803 	mul.w	r8, r3, r3
  40b3fc:	f8cd 8008 	str.w	r8, [sp, #8]
  40b400:	e9dd 7800 	ldrd	r7, r8, [sp]
  40b404:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40b406:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40b408:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40b40a:	4317      	orrs	r7, r2
  40b40c:	ea48 78e2 	orr.w	r8, r8, r2, asr #31
  40b410:	e9cd 7800 	strd	r7, r8, [sp]
  40b414:	9f07      	ldr	r7, [sp, #28]
  40b416:	ea41 79e7 	orr.w	r9, r1, r7, asr #31
  40b41a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
  40b41e:	ea40 0807 	orr.w	r8, r0, r7
  40b422:	9802      	ldr	r0, [sp, #8]
  40b424:	6b27      	ldr	r7, [r4, #48]	; 0x30
  40b426:	fbc0 1200 	smlal	r1, r2, r0, r0
  40b42a:	4608      	mov	r0, r1
  40b42c:	4611      	mov	r1, r2
  40b42e:	65a1      	str	r1, [r4, #88]	; 0x58
  40b430:	6560      	str	r0, [r4, #84]	; 0x54
  40b432:	e9dd 0100 	ldrd	r0, r1, [sp]
  40b436:	ea4f 1e2e 	mov.w	lr, lr, asr #4
  40b43a:	ea4f 1b2b 	mov.w	fp, fp, asr #4
  40b43e:	eb07 020e 	add.w	r2, r7, lr
  40b442:	fb0b f70b 	mul.w	r7, fp, fp
  40b446:	fbc7 0107 	smlal	r0, r1, r7, r7
  40b44a:	6322      	str	r2, [r4, #48]	; 0x30
  40b44c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40b44e:	6721      	str	r1, [r4, #112]	; 0x70
  40b450:	fb0e f10e 	mul.w	r1, lr, lr
  40b454:	fbc1 8901 	smlal	r8, r9, r1, r1
  40b458:	fb01 2e0e 	mla	lr, r1, lr, r2
  40b45c:	440b      	add	r3, r1
  40b45e:	9a02      	ldr	r2, [sp, #8]
  40b460:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  40b462:	66e0      	str	r0, [r4, #108]	; 0x6c
  40b464:	188a      	adds	r2, r1, r2
  40b466:	6d20      	ldr	r0, [r4, #80]	; 0x50
  40b468:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  40b46c:	9200      	str	r2, [sp, #0]
  40b46e:	9903      	ldr	r1, [sp, #12]
  40b470:	9a02      	ldr	r2, [sp, #8]
  40b472:	6363      	str	r3, [r4, #52]	; 0x34
  40b474:	fb02 0001 	mla	r0, r2, r1, r0
  40b478:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40b47a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40b47c:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38
  40b480:	4689      	mov	r9, r1
  40b482:	eb02 0e07 	add.w	lr, r2, r7
  40b486:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  40b488:	69e1      	ldr	r1, [r4, #28]
  40b48a:	6520      	str	r0, [r4, #80]	; 0x50
  40b48c:	4499      	add	r9, r3
  40b48e:	69a3      	ldr	r3, [r4, #24]
  40b490:	69f0      	ldr	r0, [r6, #28]
  40b492:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
  40b496:	fb07 270b 	mla	r7, r7, fp, r2
  40b49a:	6e22      	ldr	r2, [r4, #96]	; 0x60
  40b49c:	66a7      	str	r7, [r4, #104]	; 0x68
  40b49e:	4463      	add	r3, ip
  40b4a0:	4493      	add	fp, r2
  40b4a2:	61a3      	str	r3, [r4, #24]
  40b4a4:	9a00      	ldr	r2, [sp, #0]
  40b4a6:	68e3      	ldr	r3, [r4, #12]
  40b4a8:	6a27      	ldr	r7, [r4, #32]
  40b4aa:	64e2      	str	r2, [r4, #76]	; 0x4c
  40b4ac:	9a06      	ldr	r2, [sp, #24]
  40b4ae:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  40b4b2:	3301      	adds	r3, #1
  40b4b4:	4451      	add	r1, sl
  40b4b6:	443a      	add	r2, r7
  40b4b8:	4283      	cmp	r3, r0
  40b4ba:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
  40b4be:	f8c4 b060 	str.w	fp, [r4, #96]	; 0x60
  40b4c2:	61e1      	str	r1, [r4, #28]
  40b4c4:	6222      	str	r2, [r4, #32]
  40b4c6:	60e3      	str	r3, [r4, #12]
  40b4c8:	d009      	beq.n	40b4de <gyro_cal_fnm+0x162>
  40b4ca:	2301      	movs	r3, #1
  40b4cc:	616b      	str	r3, [r5, #20]
  40b4ce:	b009      	add	sp, #36	; 0x24
  40b4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4d4:	2300      	movs	r3, #0
  40b4d6:	616b      	str	r3, [r5, #20]
  40b4d8:	b009      	add	sp, #36	; 0x24
  40b4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4de:	68f1      	ldr	r1, [r6, #12]
  40b4e0:	68b7      	ldr	r7, [r6, #8]
  40b4e2:	6932      	ldr	r2, [r6, #16]
  40b4e4:	1bcf      	subs	r7, r1, r7
  40b4e6:	463b      	mov	r3, r7
  40b4e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
  40b4ec:	f7ff fea2 	bl	40b234 <gyro_cal_computeMoment>
  40b4f0:	2800      	cmp	r0, #0
  40b4f2:	d0ef      	beq.n	40b4d4 <gyro_cal_fnm+0x158>
  40b4f4:	463b      	mov	r3, r7
  40b4f6:	6932      	ldr	r2, [r6, #16]
  40b4f8:	68f1      	ldr	r1, [r6, #12]
  40b4fa:	f104 0048 	add.w	r0, r4, #72	; 0x48
  40b4fe:	f7ff fe99 	bl	40b234 <gyro_cal_computeMoment>
  40b502:	2800      	cmp	r0, #0
  40b504:	d0e6      	beq.n	40b4d4 <gyro_cal_fnm+0x158>
  40b506:	463b      	mov	r3, r7
  40b508:	6932      	ldr	r2, [r6, #16]
  40b50a:	68f1      	ldr	r1, [r6, #12]
  40b50c:	f104 0060 	add.w	r0, r4, #96	; 0x60
  40b510:	f7ff fe90 	bl	40b234 <gyro_cal_computeMoment>
  40b514:	2800      	cmp	r0, #0
  40b516:	d0dd      	beq.n	40b4d4 <gyro_cal_fnm+0x158>
  40b518:	68b3      	ldr	r3, [r6, #8]
  40b51a:	69a2      	ldr	r2, [r4, #24]
  40b51c:	6971      	ldr	r1, [r6, #20]
  40b51e:	f1c3 030a 	rsb	r3, r3, #10
  40b522:	409a      	lsls	r2, r3
  40b524:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  40b528:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  40b52c:	4288      	cmp	r0, r1
  40b52e:	dad1      	bge.n	40b4d4 <gyro_cal_fnm+0x158>
  40b530:	69e0      	ldr	r0, [r4, #28]
  40b532:	4098      	lsls	r0, r3
  40b534:	ea80 76e0 	eor.w	r6, r0, r0, asr #31
  40b538:	eba6 76e0 	sub.w	r6, r6, r0, asr #31
  40b53c:	42b1      	cmp	r1, r6
  40b53e:	ddc9      	ble.n	40b4d4 <gyro_cal_fnm+0x158>
  40b540:	6a26      	ldr	r6, [r4, #32]
  40b542:	fa06 f303 	lsl.w	r3, r6, r3
  40b546:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  40b54a:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  40b54e:	42b1      	cmp	r1, r6
  40b550:	ddc0      	ble.n	40b4d4 <gyro_cal_fnm+0x158>
  40b552:	2603      	movs	r6, #3
  40b554:	6869      	ldr	r1, [r5, #4]
  40b556:	642b      	str	r3, [r5, #64]	; 0x40
  40b558:	63aa      	str	r2, [r5, #56]	; 0x38
  40b55a:	63e8      	str	r0, [r5, #60]	; 0x3c
  40b55c:	646e      	str	r6, [r5, #68]	; 0x44
  40b55e:	2302      	movs	r3, #2
  40b560:	6061      	str	r1, [r4, #4]
  40b562:	e7b8      	b.n	40b4d6 <gyro_cal_fnm+0x15a>

0040b564 <GyroCalFnmFxp_Init>:
  40b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b566:	4604      	mov	r4, r0
  40b568:	f000 ffec 	bl	40c544 <InterfaceCalibrationGyrFxp_Reset>
  40b56c:	2278      	movs	r2, #120	; 0x78
  40b56e:	2100      	movs	r1, #0
  40b570:	f104 008c 	add.w	r0, r4, #140	; 0x8c
  40b574:	f004 fa62 	bl	40fa3c <memset>
  40b578:	4b0b      	ldr	r3, [pc, #44]	; (40b5a8 <GyroCalFnmFxp_Init+0x44>)
  40b57a:	490c      	ldr	r1, [pc, #48]	; (40b5ac <GyroCalFnmFxp_Init+0x48>)
  40b57c:	66a3      	str	r3, [r4, #104]	; 0x68
  40b57e:	2700      	movs	r7, #0
  40b580:	2306      	movs	r3, #6
  40b582:	2640      	movs	r6, #64	; 0x40
  40b584:	f44f 75a0 	mov.w	r5, #320	; 0x140
  40b588:	2003      	movs	r0, #3
  40b58a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
  40b58e:	66e7      	str	r7, [r4, #108]	; 0x6c
  40b590:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  40b594:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  40b598:	67a0      	str	r0, [r4, #120]	; 0x78
  40b59a:	67e1      	str	r1, [r4, #124]	; 0x7c
  40b59c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  40b5a0:	6723      	str	r3, [r4, #112]	; 0x70
  40b5a2:	6763      	str	r3, [r4, #116]	; 0x74
  40b5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b5a6:	bf00      	nop
  40b5a8:	0007a120 	.word	0x0007a120
  40b5ac:	0147ae14 	.word	0x0147ae14

0040b5b0 <GyroCalFnmFxp_UpdateData>:
  40b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b5b2:	680d      	ldr	r5, [r1, #0]
  40b5b4:	6205      	str	r5, [r0, #32]
  40b5b6:	4604      	mov	r4, r0
  40b5b8:	6848      	ldr	r0, [r1, #4]
  40b5ba:	6260      	str	r0, [r4, #36]	; 0x24
  40b5bc:	688b      	ldr	r3, [r1, #8]
  40b5be:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
  40b5c2:	62a3      	str	r3, [r4, #40]	; 0x28
  40b5c4:	3901      	subs	r1, #1
  40b5c6:	129f      	asrs	r7, r3, #10
  40b5c8:	ea4f 2ea0 	mov.w	lr, r0, asr #10
  40b5cc:	ea4f 2ca5 	mov.w	ip, r5, asr #10
  40b5d0:	2900      	cmp	r1, #0
  40b5d2:	6062      	str	r2, [r4, #4]
  40b5d4:	6127      	str	r7, [r4, #16]
  40b5d6:	f8c4 e00c 	str.w	lr, [r4, #12]
  40b5da:	f8c4 c008 	str.w	ip, [r4, #8]
  40b5de:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  40b5e2:	db09      	blt.n	40b5f8 <GyroCalFnmFxp_UpdateData+0x48>
  40b5e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  40b5e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  40b5e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40b5ea:	1bad      	subs	r5, r5, r6
  40b5ec:	1a40      	subs	r0, r0, r1
  40b5ee:	1a9b      	subs	r3, r3, r2
  40b5f0:	62e5      	str	r5, [r4, #44]	; 0x2c
  40b5f2:	6320      	str	r0, [r4, #48]	; 0x30
  40b5f4:	6363      	str	r3, [r4, #52]	; 0x34
  40b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b5f8:	6966      	ldr	r6, [r4, #20]
  40b5fa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  40b5fc:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  40b600:	2e02      	cmp	r6, #2
  40b602:	d03a      	beq.n	40b67a <GyroCalFnmFxp_UpdateData+0xca>
  40b604:	f104 008c 	add.w	r0, r4, #140	; 0x8c
  40b608:	f104 0168 	add.w	r1, r4, #104	; 0x68
  40b60c:	b136      	cbz	r6, 40b61c <GyroCalFnmFxp_UpdateData+0x6c>
  40b60e:	4622      	mov	r2, r4
  40b610:	f7ff feb4 	bl	40b37c <gyro_cal_fnm>
  40b614:	6a25      	ldr	r5, [r4, #32]
  40b616:	6a60      	ldr	r0, [r4, #36]	; 0x24
  40b618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40b61a:	e7e3      	b.n	40b5e4 <GyroCalFnmFxp_UpdateData+0x34>
  40b61c:	2301      	movs	r3, #1
  40b61e:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
  40b622:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
  40b626:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
  40b62a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
  40b62e:	f8c4 c0b0 	str.w	ip, [r4, #176]	; 0xb0
  40b632:	f8c4 e0b4 	str.w	lr, [r4, #180]	; 0xb4
  40b636:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
  40b63a:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
  40b63e:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  40b642:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
  40b646:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
  40b64a:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
  40b64e:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
  40b652:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
  40b656:	f8c4 60dc 	str.w	r6, [r4, #220]	; 0xdc
  40b65a:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
  40b65e:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
  40b662:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
  40b666:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
  40b66a:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
  40b66e:	f8c4 60f8 	str.w	r6, [r4, #248]	; 0xf8
  40b672:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
  40b676:	6163      	str	r3, [r4, #20]
  40b678:	e7c9      	b.n	40b60e <GyroCalFnmFxp_UpdateData+0x5e>
  40b67a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
  40b67e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  40b682:	1a8a      	subs	r2, r1, r2
  40b684:	2a00      	cmp	r2, #0
  40b686:	bfb8      	it	lt
  40b688:	4252      	neglt	r2, r2
  40b68a:	42ba      	cmp	r2, r7
  40b68c:	dc02      	bgt.n	40b694 <GyroCalFnmFxp_UpdateData+0xe4>
  40b68e:	2203      	movs	r2, #3
  40b690:	6462      	str	r2, [r4, #68]	; 0x44
  40b692:	e7a7      	b.n	40b5e4 <GyroCalFnmFxp_UpdateData+0x34>
  40b694:	2200      	movs	r2, #0
  40b696:	6466      	str	r6, [r4, #68]	; 0x44
  40b698:	6162      	str	r2, [r4, #20]
  40b69a:	e7a3      	b.n	40b5e4 <GyroCalFnmFxp_UpdateData+0x34>

0040b69c <RlsCalibrationFxp_SetAccuracy>:
  40b69c:	2a03      	cmp	r2, #3
  40b69e:	d017      	beq.n	40b6d0 <RlsCalibrationFxp_SetAccuracy+0x34>
  40b6a0:	2a02      	cmp	r2, #2
  40b6a2:	d02b      	beq.n	40b6fc <RlsCalibrationFxp_SetAccuracy+0x60>
  40b6a4:	2a01      	cmp	r2, #1
  40b6a6:	d02b      	beq.n	40b700 <RlsCalibrationFxp_SetAccuracy+0x64>
  40b6a8:	2300      	movs	r3, #0
  40b6aa:	4a16      	ldr	r2, [pc, #88]	; (40b704 <RlsCalibrationFxp_SetAccuracy+0x68>)
  40b6ac:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  40b6b0:	6103      	str	r3, [r0, #16]
  40b6b2:	6143      	str	r3, [r0, #20]
  40b6b4:	6183      	str	r3, [r0, #24]
  40b6b6:	61c3      	str	r3, [r0, #28]
  40b6b8:	6583      	str	r3, [r0, #88]	; 0x58
  40b6ba:	65c3      	str	r3, [r0, #92]	; 0x5c
  40b6bc:	6603      	str	r3, [r0, #96]	; 0x60
  40b6be:	6643      	str	r3, [r0, #100]	; 0x64
  40b6c0:	6683      	str	r3, [r0, #104]	; 0x68
  40b6c2:	66c3      	str	r3, [r0, #108]	; 0x6c
  40b6c4:	67c2      	str	r2, [r0, #124]	; 0x7c
  40b6c6:	6302      	str	r2, [r0, #48]	; 0x30
  40b6c8:	6342      	str	r2, [r0, #52]	; 0x34
  40b6ca:	6382      	str	r2, [r0, #56]	; 0x38
  40b6cc:	63c2      	str	r2, [r0, #60]	; 0x3c
  40b6ce:	4770      	bx	lr
  40b6d0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40b6d2:	490c      	ldr	r1, [pc, #48]	; (40b704 <RlsCalibrationFxp_SetAccuracy+0x68>)
  40b6d4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  40b6d8:	1e5a      	subs	r2, r3, #1
  40b6da:	2300      	movs	r3, #0
  40b6dc:	67c2      	str	r2, [r0, #124]	; 0x7c
  40b6de:	6103      	str	r3, [r0, #16]
  40b6e0:	6143      	str	r3, [r0, #20]
  40b6e2:	6183      	str	r3, [r0, #24]
  40b6e4:	61c3      	str	r3, [r0, #28]
  40b6e6:	6583      	str	r3, [r0, #88]	; 0x58
  40b6e8:	65c3      	str	r3, [r0, #92]	; 0x5c
  40b6ea:	6603      	str	r3, [r0, #96]	; 0x60
  40b6ec:	6643      	str	r3, [r0, #100]	; 0x64
  40b6ee:	6683      	str	r3, [r0, #104]	; 0x68
  40b6f0:	66c3      	str	r3, [r0, #108]	; 0x6c
  40b6f2:	6301      	str	r1, [r0, #48]	; 0x30
  40b6f4:	6341      	str	r1, [r0, #52]	; 0x34
  40b6f6:	6381      	str	r1, [r0, #56]	; 0x38
  40b6f8:	63c1      	str	r1, [r0, #60]	; 0x3c
  40b6fa:	4770      	bx	lr
  40b6fc:	6e0b      	ldr	r3, [r1, #96]	; 0x60
  40b6fe:	e7e8      	b.n	40b6d2 <RlsCalibrationFxp_SetAccuracy+0x36>
  40b700:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
  40b702:	e7e6      	b.n	40b6d2 <RlsCalibrationFxp_SetAccuracy+0x36>
  40b704:	0007a120 	.word	0x0007a120

0040b708 <RlsCalibrationFxp_SetDefaultParamMag>:
  40b708:	2900      	cmp	r1, #0
  40b70a:	bfc8      	it	gt
  40b70c:	4b20      	ldrgt	r3, [pc, #128]	; (40b790 <RlsCalibrationFxp_SetDefaultParamMag+0x88>)
  40b70e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b710:	f04f 0200 	mov.w	r2, #0
  40b714:	bfc8      	it	gt
  40b716:	e880 000a 	stmiagt.w	r0, {r1, r3}
  40b71a:	2405      	movs	r4, #5
  40b71c:	4b1d      	ldr	r3, [pc, #116]	; (40b794 <RlsCalibrationFxp_SetDefaultParamMag+0x8c>)
  40b71e:	6082      	str	r2, [r0, #8]
  40b720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40b724:	60c4      	str	r4, [r0, #12]
  40b726:	6103      	str	r3, [r0, #16]
  40b728:	f44f 24c8 	mov.w	r4, #409600	; 0x64000
  40b72c:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
  40b730:	6142      	str	r2, [r0, #20]
  40b732:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  40b736:	4f18      	ldr	r7, [pc, #96]	; (40b798 <RlsCalibrationFxp_SetDefaultParamMag+0x90>)
  40b738:	4918      	ldr	r1, [pc, #96]	; (40b79c <RlsCalibrationFxp_SetDefaultParamMag+0x94>)
  40b73a:	6184      	str	r4, [r0, #24]
  40b73c:	f44f 5620 	mov.w	r6, #10240	; 0x2800
  40b740:	2403      	movs	r4, #3
  40b742:	61c3      	str	r3, [r0, #28]
  40b744:	6303      	str	r3, [r0, #48]	; 0x30
  40b746:	6242      	str	r2, [r0, #36]	; 0x24
  40b748:	f241 3388 	movw	r3, #5000	; 0x1388
  40b74c:	2201      	movs	r2, #1
  40b74e:	f8df e054 	ldr.w	lr, [pc, #84]	; 40b7a4 <RlsCalibrationFxp_SetDefaultParamMag+0x9c>
  40b752:	4d13      	ldr	r5, [pc, #76]	; (40b7a0 <RlsCalibrationFxp_SetDefaultParamMag+0x98>)
  40b754:	6287      	str	r7, [r0, #40]	; 0x28
  40b756:	62c6      	str	r6, [r0, #44]	; 0x2c
  40b758:	f247 5730 	movw	r7, #30000	; 0x7530
  40b75c:	f44f 4620 	mov.w	r6, #40960	; 0xa000
  40b760:	6344      	str	r4, [r0, #52]	; 0x34
  40b762:	6381      	str	r1, [r0, #56]	; 0x38
  40b764:	f44f 347a 	mov.w	r4, #256000	; 0x3e800
  40b768:	f44f 4110 	mov.w	r1, #36864	; 0x9000
  40b76c:	6402      	str	r2, [r0, #64]	; 0x40
  40b76e:	6443      	str	r3, [r0, #68]	; 0x44
  40b770:	f242 7210 	movw	r2, #10000	; 0x2710
  40b774:	6603      	str	r3, [r0, #96]	; 0x60
  40b776:	f640 13c4 	movw	r3, #2500	; 0x9c4
  40b77a:	f8c0 e020 	str.w	lr, [r0, #32]
  40b77e:	6487      	str	r7, [r0, #72]	; 0x48
  40b780:	64c6      	str	r6, [r0, #76]	; 0x4c
  40b782:	6505      	str	r5, [r0, #80]	; 0x50
  40b784:	6544      	str	r4, [r0, #84]	; 0x54
  40b786:	6581      	str	r1, [r0, #88]	; 0x58
  40b788:	65c2      	str	r2, [r0, #92]	; 0x5c
  40b78a:	6643      	str	r3, [r0, #100]	; 0x64
  40b78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b78e:	bf00      	nop
  40b790:	000f4240 	.word	0x000f4240
  40b794:	000186a0 	.word	0x000186a0
  40b798:	3e99f865 	.word	0x3e99f865
  40b79c:	00061a80 	.word	0x00061a80
  40b7a0:	00271000 	.word	0x00271000
  40b7a4:	000927c0 	.word	0x000927c0

0040b7a8 <RlsCalibrationFxp_SetDefaultParamAcc>:
  40b7a8:	2900      	cmp	r1, #0
  40b7aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b7ac:	dd3f      	ble.n	40b82e <RlsCalibrationFxp_SetDefaultParamAcc+0x86>
  40b7ae:	4d24      	ldr	r5, [pc, #144]	; (40b840 <RlsCalibrationFxp_SetDefaultParamAcc+0x98>)
  40b7b0:	6001      	str	r1, [r0, #0]
  40b7b2:	2401      	movs	r4, #1
  40b7b4:	220a      	movs	r2, #10
  40b7b6:	239d      	movs	r3, #157	; 0x9d
  40b7b8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  40b7bc:	6045      	str	r5, [r0, #4]
  40b7be:	6084      	str	r4, [r0, #8]
  40b7c0:	60c2      	str	r2, [r0, #12]
  40b7c2:	6103      	str	r3, [r0, #16]
  40b7c4:	db39      	blt.n	40b83a <RlsCalibrationFxp_SetDefaultParamAcc+0x92>
  40b7c6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40b7ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40b7ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40b7d2:	f240 57dc 	movw	r7, #1500	; 0x5dc
  40b7d6:	4e1b      	ldr	r6, [pc, #108]	; (40b844 <RlsCalibrationFxp_SetDefaultParamAcc+0x9c>)
  40b7d8:	6141      	str	r1, [r0, #20]
  40b7da:	f641 159a 	movw	r5, #6554	; 0x199a
  40b7de:	f246 6466 	movw	r4, #26214	; 0x6666
  40b7e2:	2103      	movs	r1, #3
  40b7e4:	6183      	str	r3, [r0, #24]
  40b7e6:	61c3      	str	r3, [r0, #28]
  40b7e8:	6203      	str	r3, [r0, #32]
  40b7ea:	f04f 0e01 	mov.w	lr, #1
  40b7ee:	f644 43cc 	movw	r3, #19660	; 0x4ccc
  40b7f2:	6247      	str	r7, [r0, #36]	; 0x24
  40b7f4:	6286      	str	r6, [r0, #40]	; 0x28
  40b7f6:	f240 6766 	movw	r7, #1638	; 0x666
  40b7fa:	62c5      	str	r5, [r0, #44]	; 0x2c
  40b7fc:	f248 6666 	movw	r6, #34406	; 0x8666
  40b800:	6304      	str	r4, [r0, #48]	; 0x30
  40b802:	f647 1599 	movw	r5, #31129	; 0x7999
  40b806:	6341      	str	r1, [r0, #52]	; 0x34
  40b808:	f242 7410 	movw	r4, #10000	; 0x2710
  40b80c:	6382      	str	r2, [r0, #56]	; 0x38
  40b80e:	6442      	str	r2, [r0, #68]	; 0x44
  40b810:	f241 3188 	movw	r1, #5000	; 0x1388
  40b814:	f640 12c4 	movw	r2, #2500	; 0x9c4
  40b818:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
  40b81c:	6487      	str	r7, [r0, #72]	; 0x48
  40b81e:	64c3      	str	r3, [r0, #76]	; 0x4c
  40b820:	6503      	str	r3, [r0, #80]	; 0x50
  40b822:	6546      	str	r6, [r0, #84]	; 0x54
  40b824:	6585      	str	r5, [r0, #88]	; 0x58
  40b826:	65c4      	str	r4, [r0, #92]	; 0x5c
  40b828:	6601      	str	r1, [r0, #96]	; 0x60
  40b82a:	6642      	str	r2, [r0, #100]	; 0x64
  40b82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b82e:	2401      	movs	r4, #1
  40b830:	220a      	movs	r2, #10
  40b832:	239d      	movs	r3, #157	; 0x9d
  40b834:	6084      	str	r4, [r0, #8]
  40b836:	60c2      	str	r2, [r0, #12]
  40b838:	6103      	str	r3, [r0, #16]
  40b83a:	0349      	lsls	r1, r1, #13
  40b83c:	e7c5      	b.n	40b7ca <RlsCalibrationFxp_SetDefaultParamAcc+0x22>
  40b83e:	bf00      	nop
  40b840:	000f4240 	.word	0x000f4240
  40b844:	3e99f865 	.word	0x3e99f865

0040b848 <RlsCalibrationFxp_UpdateUncalibrated>:
  40b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b84c:	4689      	mov	r9, r1
  40b84e:	f100 0188 	add.w	r1, r0, #136	; 0x88
  40b852:	4690      	mov	r8, r2
  40b854:	c90e      	ldmia	r1, {r1, r2, r3}
  40b856:	4604      	mov	r4, r0
  40b858:	b0a1      	sub	sp, #132	; 0x84
  40b85a:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  40b85e:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
  40b862:	f500 719a 	add.w	r1, r0, #308	; 0x134
  40b866:	f500 7294 	add.w	r2, r0, #296	; 0x128
  40b86a:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  40b86e:	f108 0014 	add.w	r0, r8, #20
  40b872:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40b876:	f002 f8c3 	bl	40da00 <fxpRecursiveVariance3_q30>
  40b87a:	f8d9 000c 	ldr.w	r0, [r9, #12]
  40b87e:	f8d8 2014 	ldr.w	r2, [r8, #20]
  40b882:	6865      	ldr	r5, [r4, #4]
  40b884:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
  40b888:	f8d8 3018 	ldr.w	r3, [r8, #24]
  40b88c:	f8d8 701c 	ldr.w	r7, [r8, #28]
  40b890:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
  40b894:	4102      	asrs	r2, r0
  40b896:	1b52      	subs	r2, r2, r5
  40b898:	1a51      	subs	r1, r2, r1
  40b89a:	68a2      	ldr	r2, [r4, #8]
  40b89c:	fa43 f500 	asr.w	r5, r3, r0
  40b8a0:	1aad      	subs	r5, r5, r2
  40b8a2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
  40b8a6:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
  40b8aa:	ea81 7ee1 	eor.w	lr, r1, r1, asr #31
  40b8ae:	4103      	asrs	r3, r0
  40b8b0:	4102      	asrs	r2, r0
  40b8b2:	ebae 7ee1 	sub.w	lr, lr, r1, asr #31
  40b8b6:	4106      	asrs	r6, r0
  40b8b8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
  40b8bc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  40b8c0:	4107      	asrs	r7, r0
  40b8c2:	68e0      	ldr	r0, [r4, #12]
  40b8c4:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
  40b8c8:	1a6d      	subs	r5, r5, r1
  40b8ca:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
  40b8ce:	4671      	mov	r1, lr
  40b8d0:	1a3f      	subs	r7, r7, r0
  40b8d2:	4670      	mov	r0, lr
  40b8d4:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
  40b8d8:	f7ff f840 	bl	40a95c <invn_math_mult_q15_fxp>
  40b8dc:	ea85 7ae5 	eor.w	sl, r5, r5, asr #31
  40b8e0:	ebaa 7ae5 	sub.w	sl, sl, r5, asr #31
  40b8e4:	1bbf      	subs	r7, r7, r6
  40b8e6:	4651      	mov	r1, sl
  40b8e8:	4606      	mov	r6, r0
  40b8ea:	4650      	mov	r0, sl
  40b8ec:	f7ff f836 	bl	40a95c <invn_math_mult_q15_fxp>
  40b8f0:	ea87 75e7 	eor.w	r5, r7, r7, asr #31
  40b8f4:	eba5 75e7 	sub.w	r5, r5, r7, asr #31
  40b8f8:	4629      	mov	r1, r5
  40b8fa:	4406      	add	r6, r0
  40b8fc:	4628      	mov	r0, r5
  40b8fe:	f7ff f82d 	bl	40a95c <invn_math_mult_q15_fxp>
  40b902:	4430      	add	r0, r6
  40b904:	f7ff f83c 	bl	40a980 <invn_math_sqrt_q15_fxp>
  40b908:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  40b90c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
  40b910:	2a02      	cmp	r2, #2
  40b912:	f300 80ab 	bgt.w	40ba6c <RlsCalibrationFxp_UpdateUncalibrated+0x224>
  40b916:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
  40b91a:	2b00      	cmp	r3, #0
  40b91c:	f000 80a9 	beq.w	40ba72 <RlsCalibrationFxp_UpdateUncalibrated+0x22a>
  40b920:	2a00      	cmp	r2, #0
  40b922:	dd2d      	ble.n	40b980 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40b924:	f8d8 0010 	ldr.w	r0, [r8, #16]
  40b928:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  40b92c:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
  40b930:	1a1b      	subs	r3, r3, r0
  40b932:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  40b936:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  40b93a:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
  40b93e:	f300 80a3 	bgt.w	40ba88 <RlsCalibrationFxp_UpdateUncalibrated+0x240>
  40b942:	2a01      	cmp	r2, #1
  40b944:	dd1c      	ble.n	40b980 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40b946:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
  40b94a:	f340 80d4 	ble.w	40baf6 <RlsCalibrationFxp_UpdateUncalibrated+0x2ae>
  40b94e:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
  40b952:	4aca      	ldr	r2, [pc, #808]	; (40bc7c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40b954:	6322      	str	r2, [r4, #48]	; 0x30
  40b956:	3901      	subs	r1, #1
  40b958:	2001      	movs	r0, #1
  40b95a:	2300      	movs	r3, #0
  40b95c:	67e1      	str	r1, [r4, #124]	; 0x7c
  40b95e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  40b962:	6123      	str	r3, [r4, #16]
  40b964:	6163      	str	r3, [r4, #20]
  40b966:	61a3      	str	r3, [r4, #24]
  40b968:	61e3      	str	r3, [r4, #28]
  40b96a:	65a3      	str	r3, [r4, #88]	; 0x58
  40b96c:	65e3      	str	r3, [r4, #92]	; 0x5c
  40b96e:	6623      	str	r3, [r4, #96]	; 0x60
  40b970:	6663      	str	r3, [r4, #100]	; 0x64
  40b972:	66a3      	str	r3, [r4, #104]	; 0x68
  40b974:	66e3      	str	r3, [r4, #108]	; 0x6c
  40b976:	6362      	str	r2, [r4, #52]	; 0x34
  40b978:	63a2      	str	r2, [r4, #56]	; 0x38
  40b97a:	63e2      	str	r2, [r4, #60]	; 0x3c
  40b97c:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
  40b980:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  40b984:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b988:	4293      	cmp	r3, r2
  40b98a:	da04      	bge.n	40b996 <RlsCalibrationFxp_UpdateUncalibrated+0x14e>
  40b98c:	f8d9 1000 	ldr.w	r1, [r9]
  40b990:	440b      	add	r3, r1
  40b992:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  40b996:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40b99a:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
  40b99e:	4299      	cmp	r1, r3
  40b9a0:	dc6c      	bgt.n	40ba7c <RlsCalibrationFxp_UpdateUncalibrated+0x234>
  40b9a2:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
  40b9a6:	428b      	cmp	r3, r1
  40b9a8:	db68      	blt.n	40ba7c <RlsCalibrationFxp_UpdateUncalibrated+0x234>
  40b9aa:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
  40b9ae:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
  40b9b2:	dc63      	bgt.n	40ba7c <RlsCalibrationFxp_UpdateUncalibrated+0x234>
  40b9b4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
  40b9b8:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
  40b9bc:	f8d9 5018 	ldr.w	r5, [r9, #24]
  40b9c0:	1bc8      	subs	r0, r1, r7
  40b9c2:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
  40b9c6:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40b9ca:	42ab      	cmp	r3, r5
  40b9cc:	f340 80a0 	ble.w	40bb10 <RlsCalibrationFxp_UpdateUncalibrated+0x2c8>
  40b9d0:	f8d9 3000 	ldr.w	r3, [r9]
  40b9d4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  40b9d8:	2301      	movs	r3, #1
  40b9da:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  40b9de:	2300      	movs	r3, #0
  40b9e0:	48a6      	ldr	r0, [pc, #664]	; (40bc7c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40b9e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  40b9e6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  40b9ea:	2310      	movs	r3, #16
  40b9ec:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  40b9f0:	67e0      	str	r0, [r4, #124]	; 0x7c
  40b9f2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
  40b9f6:	f8d9 3020 	ldr.w	r3, [r9, #32]
  40b9fa:	4298      	cmp	r0, r3
  40b9fc:	f280 80ae 	bge.w	40bb5c <RlsCalibrationFxp_UpdateUncalibrated+0x314>
  40ba00:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
  40ba04:	429a      	cmp	r2, r3
  40ba06:	f340 80b4 	ble.w	40bb72 <RlsCalibrationFxp_UpdateUncalibrated+0x32a>
  40ba0a:	f8d9 2000 	ldr.w	r2, [r9]
  40ba0e:	f8d9 0008 	ldr.w	r0, [r9, #8]
  40ba12:	4413      	add	r3, r2
  40ba14:	2801      	cmp	r0, #1
  40ba16:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  40ba1a:	f000 838c 	beq.w	40c136 <RlsCalibrationFxp_UpdateUncalibrated+0x8ee>
  40ba1e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  40ba22:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
  40ba26:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
  40ba2a:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  40ba2e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40ba32:	2300      	movs	r3, #0
  40ba34:	4a91      	ldr	r2, [pc, #580]	; (40bc7c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40ba36:	6123      	str	r3, [r4, #16]
  40ba38:	2002      	movs	r0, #2
  40ba3a:	469b      	mov	fp, r3
  40ba3c:	2101      	movs	r1, #1
  40ba3e:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
  40ba42:	4658      	mov	r0, fp
  40ba44:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
  40ba48:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
  40ba4c:	6163      	str	r3, [r4, #20]
  40ba4e:	61a3      	str	r3, [r4, #24]
  40ba50:	61e3      	str	r3, [r4, #28]
  40ba52:	65a3      	str	r3, [r4, #88]	; 0x58
  40ba54:	65e3      	str	r3, [r4, #92]	; 0x5c
  40ba56:	6623      	str	r3, [r4, #96]	; 0x60
  40ba58:	6663      	str	r3, [r4, #100]	; 0x64
  40ba5a:	66a3      	str	r3, [r4, #104]	; 0x68
  40ba5c:	66e3      	str	r3, [r4, #108]	; 0x6c
  40ba5e:	6322      	str	r2, [r4, #48]	; 0x30
  40ba60:	6362      	str	r2, [r4, #52]	; 0x34
  40ba62:	63a2      	str	r2, [r4, #56]	; 0x38
  40ba64:	63e2      	str	r2, [r4, #60]	; 0x3c
  40ba66:	b021      	add	sp, #132	; 0x84
  40ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba6c:	bb13      	cbnz	r3, 40bab4 <RlsCalibrationFxp_UpdateUncalibrated+0x26c>
  40ba6e:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
  40ba72:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ba76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  40ba7a:	e751      	b.n	40b920 <RlsCalibrationFxp_UpdateUncalibrated+0xd8>
  40ba7c:	f04f 0b00 	mov.w	fp, #0
  40ba80:	4658      	mov	r0, fp
  40ba82:	b021      	add	sp, #132	; 0x84
  40ba84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba88:	2300      	movs	r3, #0
  40ba8a:	4a7c      	ldr	r2, [pc, #496]	; (40bc7c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40ba8c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  40ba90:	6123      	str	r3, [r4, #16]
  40ba92:	6163      	str	r3, [r4, #20]
  40ba94:	61a3      	str	r3, [r4, #24]
  40ba96:	61e3      	str	r3, [r4, #28]
  40ba98:	65a3      	str	r3, [r4, #88]	; 0x58
  40ba9a:	65e3      	str	r3, [r4, #92]	; 0x5c
  40ba9c:	6623      	str	r3, [r4, #96]	; 0x60
  40ba9e:	6663      	str	r3, [r4, #100]	; 0x64
  40baa0:	66a3      	str	r3, [r4, #104]	; 0x68
  40baa2:	66e3      	str	r3, [r4, #108]	; 0x6c
  40baa4:	67e2      	str	r2, [r4, #124]	; 0x7c
  40baa6:	6322      	str	r2, [r4, #48]	; 0x30
  40baa8:	6362      	str	r2, [r4, #52]	; 0x34
  40baaa:	63a2      	str	r2, [r4, #56]	; 0x38
  40baac:	63e2      	str	r2, [r4, #60]	; 0x3c
  40baae:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
  40bab2:	e765      	b.n	40b980 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40bab4:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
  40bab8:	2b02      	cmp	r3, #2
  40baba:	d042      	beq.n	40bb42 <RlsCalibrationFxp_UpdateUncalibrated+0x2fa>
  40babc:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40bac0:	2b00      	cmp	r3, #0
  40bac2:	f47f af2d 	bne.w	40b920 <RlsCalibrationFxp_UpdateUncalibrated+0xd8>
  40bac6:	2a03      	cmp	r2, #3
  40bac8:	f47f af2a 	bne.w	40b920 <RlsCalibrationFxp_UpdateUncalibrated+0xd8>
  40bacc:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40bace:	f8d9 101c 	ldr.w	r1, [r9, #28]
  40bad2:	1a18      	subs	r0, r3, r0
  40bad4:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
  40bad8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40badc:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  40bae0:	f6ff af20 	blt.w	40b924 <RlsCalibrationFxp_UpdateUncalibrated+0xdc>
  40bae4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
  40bae8:	2b00      	cmp	r3, #0
  40baea:	f47f af1b 	bne.w	40b924 <RlsCalibrationFxp_UpdateUncalibrated+0xdc>
  40baee:	2302      	movs	r3, #2
  40baf0:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
  40baf4:	e716      	b.n	40b924 <RlsCalibrationFxp_UpdateUncalibrated+0xdc>
  40baf6:	2a02      	cmp	r2, #2
  40baf8:	f43f af42 	beq.w	40b980 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40bafc:	4288      	cmp	r0, r1
  40bafe:	f77f af3f 	ble.w	40b980 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40bb02:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
  40bb06:	4a5d      	ldr	r2, [pc, #372]	; (40bc7c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40bb08:	6322      	str	r2, [r4, #48]	; 0x30
  40bb0a:	3901      	subs	r1, #1
  40bb0c:	2002      	movs	r0, #2
  40bb0e:	e724      	b.n	40b95a <RlsCalibrationFxp_UpdateUncalibrated+0x112>
  40bb10:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  40bb14:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  40bb18:	1a18      	subs	r0, r3, r0
  40bb1a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
  40bb1e:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40bb22:	429d      	cmp	r5, r3
  40bb24:	f6ff af54 	blt.w	40b9d0 <RlsCalibrationFxp_UpdateUncalibrated+0x188>
  40bb28:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
  40bb2c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
  40bb30:	1a18      	subs	r0, r3, r0
  40bb32:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
  40bb36:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40bb3a:	429d      	cmp	r5, r3
  40bb3c:	f6bf af59 	bge.w	40b9f2 <RlsCalibrationFxp_UpdateUncalibrated+0x1aa>
  40bb40:	e746      	b.n	40b9d0 <RlsCalibrationFxp_UpdateUncalibrated+0x188>
  40bb42:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40bb44:	f8d9 101c 	ldr.w	r1, [r9, #28]
  40bb48:	1a1d      	subs	r5, r3, r0
  40bb4a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40bb4e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40bb52:	428b      	cmp	r3, r1
  40bb54:	dab2      	bge.n	40babc <RlsCalibrationFxp_UpdateUncalibrated+0x274>
  40bb56:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
  40bb5a:	e6e1      	b.n	40b920 <RlsCalibrationFxp_UpdateUncalibrated+0xd8>
  40bb5c:	2000      	movs	r0, #0
  40bb5e:	f8d9 3000 	ldr.w	r3, [r9]
  40bb62:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
  40bb66:	200a      	movs	r0, #10
  40bb68:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  40bb6c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
  40bb70:	e748      	b.n	40ba04 <RlsCalibrationFxp_UpdateUncalibrated+0x1bc>
  40bb72:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40bb76:	f8d8 1014 	ldr.w	r1, [r8, #20]
  40bb7a:	6965      	ldr	r5, [r4, #20]
  40bb7c:	f8d8 2018 	ldr.w	r2, [r8, #24]
  40bb80:	69e6      	ldr	r6, [r4, #28]
  40bb82:	69a0      	ldr	r0, [r4, #24]
  40bb84:	4119      	asrs	r1, r3
  40bb86:	1b4d      	subs	r5, r1, r5
  40bb88:	f8d8 101c 	ldr.w	r1, [r8, #28]
  40bb8c:	411a      	asrs	r2, r3
  40bb8e:	fa41 f303 	asr.w	r3, r1, r3
  40bb92:	1b9e      	subs	r6, r3, r6
  40bb94:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
  40bb98:	1a12      	subs	r2, r2, r0
  40bb9a:	1ad2      	subs	r2, r2, r3
  40bb9c:	1bef      	subs	r7, r5, r7
  40bb9e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  40bba2:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
  40bba6:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
  40bbaa:	1af3      	subs	r3, r6, r3
  40bbac:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40bbb0:	f04f 0a01 	mov.w	sl, #1
  40bbb4:	f04f 0b00 	mov.w	fp, #0
  40bbb8:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  40bbbc:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
  40bbc0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  40bbc4:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
  40bbc8:	4608      	mov	r0, r1
  40bbca:	f8c4 a120 	str.w	sl, [r4, #288]	; 0x120
  40bbce:	f8c4 b118 	str.w	fp, [r4, #280]	; 0x118
  40bbd2:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  40bbd6:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
  40bbda:	f7fe febf 	bl	40a95c <invn_math_mult_q15_fxp>
  40bbde:	4629      	mov	r1, r5
  40bbe0:	4607      	mov	r7, r0
  40bbe2:	4628      	mov	r0, r5
  40bbe4:	f7fe feba 	bl	40a95c <invn_math_mult_q15_fxp>
  40bbe8:	4631      	mov	r1, r6
  40bbea:	4407      	add	r7, r0
  40bbec:	4630      	mov	r0, r6
  40bbee:	f7fe feb5 	bl	40a95c <invn_math_mult_q15_fxp>
  40bbf2:	4438      	add	r0, r7
  40bbf4:	f7fe fec4 	bl	40a980 <invn_math_sqrt_q15_fxp>
  40bbf8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
  40bbfc:	6760      	str	r0, [r4, #116]	; 0x74
  40bbfe:	4553      	cmp	r3, sl
  40bc00:	d03e      	beq.n	40bc80 <RlsCalibrationFxp_UpdateUncalibrated+0x438>
  40bc02:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  40bc04:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
  40bc08:	4291      	cmp	r1, r2
  40bc0a:	dc39      	bgt.n	40bc80 <RlsCalibrationFxp_UpdateUncalibrated+0x438>
  40bc0c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40bc0e:	f8d9 101c 	ldr.w	r1, [r9, #28]
  40bc12:	1a10      	subs	r0, r2, r0
  40bc14:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
  40bc18:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
  40bc1c:	428a      	cmp	r2, r1
  40bc1e:	dd2f      	ble.n	40bc80 <RlsCalibrationFxp_UpdateUncalibrated+0x438>
  40bc20:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  40bc24:	4553      	cmp	r3, sl
  40bc26:	f000 840d 	beq.w	40c444 <RlsCalibrationFxp_UpdateUncalibrated+0xbfc>
  40bc2a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40bc2e:	f8d9 2000 	ldr.w	r2, [r9]
  40bc32:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  40bc36:	4553      	cmp	r3, sl
  40bc38:	f8c4 a110 	str.w	sl, [r4, #272]	; 0x110
  40bc3c:	f8c4 a10c 	str.w	sl, [r4, #268]	; 0x10c
  40bc40:	f000 840d 	beq.w	40c45e <RlsCalibrationFxp_UpdateUncalibrated+0xc16>
  40bc44:	f104 01ac 	add.w	r1, r4, #172	; 0xac
  40bc48:	c90e      	ldmia	r1, {r1, r2, r3}
  40bc4a:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
  40bc4e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  40bc52:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40bc56:	2300      	movs	r3, #0
  40bc58:	4a08      	ldr	r2, [pc, #32]	; (40bc7c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40bc5a:	6123      	str	r3, [r4, #16]
  40bc5c:	6163      	str	r3, [r4, #20]
  40bc5e:	61a3      	str	r3, [r4, #24]
  40bc60:	61e3      	str	r3, [r4, #28]
  40bc62:	65a3      	str	r3, [r4, #88]	; 0x58
  40bc64:	65e3      	str	r3, [r4, #92]	; 0x5c
  40bc66:	6623      	str	r3, [r4, #96]	; 0x60
  40bc68:	6663      	str	r3, [r4, #100]	; 0x64
  40bc6a:	66a3      	str	r3, [r4, #104]	; 0x68
  40bc6c:	66e3      	str	r3, [r4, #108]	; 0x6c
  40bc6e:	469b      	mov	fp, r3
  40bc70:	6322      	str	r2, [r4, #48]	; 0x30
  40bc72:	6362      	str	r2, [r4, #52]	; 0x34
  40bc74:	63a2      	str	r2, [r4, #56]	; 0x38
  40bc76:	63e2      	str	r2, [r4, #60]	; 0x3c
  40bc78:	e702      	b.n	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40bc7a:	bf00      	nop
  40bc7c:	0007a120 	.word	0x0007a120
  40bc80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
  40bc84:	2a01      	cmp	r2, #1
  40bc86:	f000 823d 	beq.w	40c104 <RlsCalibrationFxp_UpdateUncalibrated+0x8bc>
  40bc8a:	f8d9 0004 	ldr.w	r0, [r9, #4]
  40bc8e:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
  40bc92:	9005      	str	r0, [sp, #20]
  40bc94:	2004      	movs	r0, #4
  40bc96:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
  40bc9a:	2900      	cmp	r1, #0
  40bc9c:	f040 8249 	bne.w	40c132 <RlsCalibrationFxp_UpdateUncalibrated+0x8ea>
  40bca0:	2a00      	cmp	r2, #0
  40bca2:	f040 8246 	bne.w	40c132 <RlsCalibrationFxp_UpdateUncalibrated+0x8ea>
  40bca6:	3300      	adds	r3, #0
  40bca8:	bf18      	it	ne
  40bcaa:	2301      	movne	r3, #1
  40bcac:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  40bcb0:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  40bcb4:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
  40bcb8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  40bcbc:	f8d4 70f4 	ldr.w	r7, [r4, #244]	; 0xf4
  40bcc0:	f8d4 e0e4 	ldr.w	lr, [r4, #228]	; 0xe4
  40bcc4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
  40bcc8:	fb8c 2302 	smull	r2, r3, ip, r2
  40bccc:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
  40bcd0:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
  40bcd4:	fbc6 2300 	smlal	r2, r3, r6, r0
  40bcd8:	fbc7 230e 	smlal	r2, r3, r7, lr
  40bcdc:	fbc1 2305 	smlal	r2, r3, r1, r5
  40bce0:	ea4f 7b92 	mov.w	fp, r2, lsr #30
  40bce4:	ea4b 0b83 	orr.w	fp, fp, r3, lsl #2
  40bce8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  40bcec:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
  40bcf0:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
  40bcf4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
  40bcf8:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
  40bcfc:	eba3 0a01 	sub.w	sl, r3, r1
  40bd00:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  40bd04:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
  40bd08:	1bdf      	subs	r7, r3, r7
  40bd0a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
  40bd0e:	1a52      	subs	r2, r2, r1
  40bd10:	459b      	cmp	fp, r3
  40bd12:	4616      	mov	r6, r2
  40bd14:	9204      	str	r2, [sp, #16]
  40bd16:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  40bd1a:	9a05      	ldr	r2, [sp, #20]
  40bd1c:	f280 8213 	bge.w	40c146 <RlsCalibrationFxp_UpdateUncalibrated+0x8fe>
  40bd20:	4293      	cmp	r3, r2
  40bd22:	f280 8213 	bge.w	40c14c <RlsCalibrationFxp_UpdateUncalibrated+0x904>
  40bd26:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
  40bd2a:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
  40bd2e:	eba2 0b0a 	sub.w	fp, r2, sl
  40bd32:	ea8b 72eb 	eor.w	r2, fp, fp, asr #31
  40bd36:	eba2 72eb 	sub.w	r2, r2, fp, asr #31
  40bd3a:	428a      	cmp	r2, r1
  40bd3c:	f300 8274 	bgt.w	40c228 <RlsCalibrationFxp_UpdateUncalibrated+0x9e0>
  40bd40:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
  40bd44:	eba2 0b07 	sub.w	fp, r2, r7
  40bd48:	ea8b 72eb 	eor.w	r2, fp, fp, asr #31
  40bd4c:	eba2 72eb 	sub.w	r2, r2, fp, asr #31
  40bd50:	4291      	cmp	r1, r2
  40bd52:	f2c0 8269 	blt.w	40c228 <RlsCalibrationFxp_UpdateUncalibrated+0x9e0>
  40bd56:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
  40bd5a:	1b96      	subs	r6, r2, r6
  40bd5c:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
  40bd60:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
  40bd64:	4291      	cmp	r1, r2
  40bd66:	f2c0 825f 	blt.w	40c228 <RlsCalibrationFxp_UpdateUncalibrated+0x9e0>
  40bd6a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
  40bd6e:	2a03      	cmp	r2, #3
  40bd70:	f000 825a 	beq.w	40c228 <RlsCalibrationFxp_UpdateUncalibrated+0x9e0>
  40bd74:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40bd78:	2a00      	cmp	r2, #0
  40bd7a:	f43f ae7f 	beq.w	40ba7c <RlsCalibrationFxp_UpdateUncalibrated+0x234>
  40bd7e:	2200      	movs	r2, #0
  40bd80:	9208      	str	r2, [sp, #32]
  40bd82:	f8d4 b11c 	ldr.w	fp, [r4, #284]	; 0x11c
  40bd86:	f1bb 0f00 	cmp.w	fp, #0
  40bd8a:	f040 820f 	bne.w	40c1ac <RlsCalibrationFxp_UpdateUncalibrated+0x964>
  40bd8e:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
  40bd92:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
  40bd96:	2d00      	cmp	r5, #0
  40bd98:	dd36      	ble.n	40be08 <RlsCalibrationFxp_UpdateUncalibrated+0x5c0>
  40bd9a:	9e04      	ldr	r6, [sp, #16]
  40bd9c:	fb87 0107 	smull	r0, r1, r7, r7
  40bda0:	fbca 010a 	smlal	r0, r1, sl, sl
  40bda4:	fbc6 0106 	smlal	r0, r1, r6, r6
  40bda8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40bdac:	9907      	ldr	r1, [sp, #28]
  40bdae:	0bc2      	lsrs	r2, r0, #15
  40bdb0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
  40bdb4:	0071      	lsls	r1, r6, #1
  40bdb6:	911f      	str	r1, [sp, #124]	; 0x7c
  40bdb8:	9905      	ldr	r1, [sp, #20]
  40bdba:	48b7      	ldr	r0, [pc, #732]	; (40c098 <RlsCalibrationFxp_UpdateUncalibrated+0x850>)
  40bdbc:	901c      	str	r0, [sp, #112]	; 0x70
  40bdbe:	3d01      	subs	r5, #1
  40bdc0:	fab5 fb85 	clz	fp, r5
  40bdc4:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
  40bdc8:	ea4f 004a 	mov.w	r0, sl, lsl #1
  40bdcc:	007d      	lsls	r5, r7, #1
  40bdce:	428b      	cmp	r3, r1
  40bdd0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
  40bdd4:	901d      	str	r0, [sp, #116]	; 0x74
  40bdd6:	951e      	str	r5, [sp, #120]	; 0x78
  40bdd8:	f2c0 824b 	blt.w	40c272 <RlsCalibrationFxp_UpdateUncalibrated+0xa2a>
  40bddc:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
  40bde0:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
  40bde4:	9302      	str	r3, [sp, #8]
  40bde6:	f104 0358 	add.w	r3, r4, #88	; 0x58
  40bdea:	9101      	str	r1, [sp, #4]
  40bdec:	9300      	str	r3, [sp, #0]
  40bdee:	a91c      	add	r1, sp, #112	; 0x70
  40bdf0:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40bdf4:	f104 0010 	add.w	r0, r4, #16
  40bdf8:	f001 fc32 	bl	40d660 <rls_core_Bierman4_fxp>
  40bdfc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
  40be00:	4298      	cmp	r0, r3
  40be02:	bfc8      	it	gt
  40be04:	f8c4 0114 	strgt.w	r0, [r4, #276]	; 0x114
  40be08:	9b08      	ldr	r3, [sp, #32]
  40be0a:	2b00      	cmp	r3, #0
  40be0c:	f000 8123 	beq.w	40c056 <RlsCalibrationFxp_UpdateUncalibrated+0x80e>
  40be10:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
  40be14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40be18:	930d      	str	r3, [sp, #52]	; 0x34
  40be1a:	9311      	str	r3, [sp, #68]	; 0x44
  40be1c:	9315      	str	r3, [sp, #84]	; 0x54
  40be1e:	2a01      	cmp	r2, #1
  40be20:	f04f 0300 	mov.w	r3, #0
  40be24:	930e      	str	r3, [sp, #56]	; 0x38
  40be26:	930f      	str	r3, [sp, #60]	; 0x3c
  40be28:	9310      	str	r3, [sp, #64]	; 0x40
  40be2a:	9312      	str	r3, [sp, #72]	; 0x48
  40be2c:	9313      	str	r3, [sp, #76]	; 0x4c
  40be2e:	9314      	str	r3, [sp, #80]	; 0x50
  40be30:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
  40be34:	f340 830d 	ble.w	40c452 <RlsCalibrationFxp_UpdateUncalibrated+0xc0a>
  40be38:	9305      	str	r3, [sp, #20]
  40be3a:	f104 03ec 	add.w	r3, r4, #236	; 0xec
  40be3e:	4618      	mov	r0, r3
  40be40:	9306      	str	r3, [sp, #24]
  40be42:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
  40be46:	461d      	mov	r5, r3
  40be48:	aa16      	add	r2, sp, #88	; 0x58
  40be4a:	a90d      	add	r1, sp, #52	; 0x34
  40be4c:	9309      	str	r3, [sp, #36]	; 0x24
  40be4e:	f7fe fcf7 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40be52:	4628      	mov	r0, r5
  40be54:	a90d      	add	r1, sp, #52	; 0x34
  40be56:	aa19      	add	r2, sp, #100	; 0x64
  40be58:	f7fe fcf2 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40be5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40be5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40be60:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40be62:	9816      	ldr	r0, [sp, #88]	; 0x58
  40be64:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40be66:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
  40be6a:	1ad2      	subs	r2, r2, r3
  40be6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40be6e:	1b45      	subs	r5, r0, r5
  40be70:	1af3      	subs	r3, r6, r3
  40be72:	13d2      	asrs	r2, r2, #15
  40be74:	13db      	asrs	r3, r3, #15
  40be76:	13ed      	asrs	r5, r5, #15
  40be78:	2600      	movs	r6, #0
  40be7a:	921e      	str	r2, [sp, #120]	; 0x78
  40be7c:	931f      	str	r3, [sp, #124]	; 0x7c
  40be7e:	951d      	str	r5, [sp, #116]	; 0x74
  40be80:	961c      	str	r6, [sp, #112]	; 0x70
  40be82:	f7fe fd77 	bl	40a974 <invn_math_mult_q30_fxp>
  40be86:	4651      	mov	r1, sl
  40be88:	4606      	mov	r6, r0
  40be8a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40be8c:	f7fe fd72 	bl	40a974 <invn_math_mult_q30_fxp>
  40be90:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
  40be94:	1a36      	subs	r6, r6, r0
  40be96:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40be98:	f7fe fd6c 	bl	40a974 <invn_math_mult_q30_fxp>
  40be9c:	4639      	mov	r1, r7
  40be9e:	4406      	add	r6, r0
  40bea0:	981a      	ldr	r0, [sp, #104]	; 0x68
  40bea2:	f7fe fd67 	bl	40a974 <invn_math_mult_q30_fxp>
  40bea6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
  40beaa:	1a36      	subs	r6, r6, r0
  40beac:	9818      	ldr	r0, [sp, #96]	; 0x60
  40beae:	f7fe fd61 	bl	40a974 <invn_math_mult_q30_fxp>
  40beb2:	9904      	ldr	r1, [sp, #16]
  40beb4:	4406      	add	r6, r0
  40beb6:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40beb8:	f7fe fd5c 	bl	40a974 <invn_math_mult_q30_fxp>
  40bebc:	f104 0310 	add.w	r3, r4, #16
  40bec0:	f104 0258 	add.w	r2, r4, #88	; 0x58
  40bec4:	4619      	mov	r1, r3
  40bec6:	9208      	str	r2, [sp, #32]
  40bec8:	9a05      	ldr	r2, [sp, #20]
  40beca:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
  40bece:	9202      	str	r2, [sp, #8]
  40bed0:	1a32      	subs	r2, r6, r0
  40bed2:	4608      	mov	r0, r1
  40bed4:	9908      	ldr	r1, [sp, #32]
  40bed6:	930a      	str	r3, [sp, #40]	; 0x28
  40bed8:	9100      	str	r1, [sp, #0]
  40beda:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40bede:	a91c      	add	r1, sp, #112	; 0x70
  40bee0:	9501      	str	r5, [sp, #4]
  40bee2:	930b      	str	r3, [sp, #44]	; 0x2c
  40bee4:	f001 fbbc 	bl	40d660 <rls_core_Bierman4_fxp>
  40bee8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
  40beec:	4298      	cmp	r0, r3
  40beee:	bfc8      	it	gt
  40bef0:	f8c4 0114 	strgt.w	r0, [r4, #276]	; 0x114
  40bef4:	a910      	add	r1, sp, #64	; 0x40
  40bef6:	aa16      	add	r2, sp, #88	; 0x58
  40bef8:	9806      	ldr	r0, [sp, #24]
  40befa:	f7fe fca1 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40befe:	aa19      	add	r2, sp, #100	; 0x64
  40bf00:	a910      	add	r1, sp, #64	; 0x40
  40bf02:	9809      	ldr	r0, [sp, #36]	; 0x24
  40bf04:	f7fe fc9c 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40bf08:	9816      	ldr	r0, [sp, #88]	; 0x58
  40bf0a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40bf0c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40bf0e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40bf10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40bf12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bf14:	1a41      	subs	r1, r0, r1
  40bf16:	1ab2      	subs	r2, r6, r2
  40bf18:	1aeb      	subs	r3, r5, r3
  40bf1a:	13c9      	asrs	r1, r1, #15
  40bf1c:	13d2      	asrs	r2, r2, #15
  40bf1e:	13db      	asrs	r3, r3, #15
  40bf20:	2500      	movs	r5, #0
  40bf22:	911d      	str	r1, [sp, #116]	; 0x74
  40bf24:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
  40bf28:	921e      	str	r2, [sp, #120]	; 0x78
  40bf2a:	931f      	str	r3, [sp, #124]	; 0x7c
  40bf2c:	951c      	str	r5, [sp, #112]	; 0x70
  40bf2e:	f7fe fd21 	bl	40a974 <invn_math_mult_q30_fxp>
  40bf32:	4651      	mov	r1, sl
  40bf34:	4605      	mov	r5, r0
  40bf36:	9819      	ldr	r0, [sp, #100]	; 0x64
  40bf38:	f7fe fd1c 	bl	40a974 <invn_math_mult_q30_fxp>
  40bf3c:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
  40bf40:	1a2d      	subs	r5, r5, r0
  40bf42:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40bf44:	f7fe fd16 	bl	40a974 <invn_math_mult_q30_fxp>
  40bf48:	4639      	mov	r1, r7
  40bf4a:	4405      	add	r5, r0
  40bf4c:	981a      	ldr	r0, [sp, #104]	; 0x68
  40bf4e:	f7fe fd11 	bl	40a974 <invn_math_mult_q30_fxp>
  40bf52:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
  40bf56:	1a2d      	subs	r5, r5, r0
  40bf58:	9818      	ldr	r0, [sp, #96]	; 0x60
  40bf5a:	f7fe fd0b 	bl	40a974 <invn_math_mult_q30_fxp>
  40bf5e:	9904      	ldr	r1, [sp, #16]
  40bf60:	4405      	add	r5, r0
  40bf62:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40bf64:	f7fe fd06 	bl	40a974 <invn_math_mult_q30_fxp>
  40bf68:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
  40bf6c:	9908      	ldr	r1, [sp, #32]
  40bf6e:	9a05      	ldr	r2, [sp, #20]
  40bf70:	9202      	str	r2, [sp, #8]
  40bf72:	e88d 000a 	stmia.w	sp, {r1, r3}
  40bf76:	1a2a      	subs	r2, r5, r0
  40bf78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bf7a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bf7c:	a91c      	add	r1, sp, #112	; 0x70
  40bf7e:	f001 fb6f 	bl	40d660 <rls_core_Bierman4_fxp>
  40bf82:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
  40bf86:	4298      	cmp	r0, r3
  40bf88:	bfc8      	it	gt
  40bf8a:	f8c4 0114 	strgt.w	r0, [r4, #276]	; 0x114
  40bf8e:	aa16      	add	r2, sp, #88	; 0x58
  40bf90:	9806      	ldr	r0, [sp, #24]
  40bf92:	a913      	add	r1, sp, #76	; 0x4c
  40bf94:	f7fe fc54 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40bf98:	aa19      	add	r2, sp, #100	; 0x64
  40bf9a:	a913      	add	r1, sp, #76	; 0x4c
  40bf9c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40bf9e:	f7fe fc4f 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40bfa2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40bfa4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40bfa6:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40bfa8:	9816      	ldr	r0, [sp, #88]	; 0x58
  40bfaa:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40bfac:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
  40bfb0:	1ad2      	subs	r2, r2, r3
  40bfb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bfb4:	1b45      	subs	r5, r0, r5
  40bfb6:	1af3      	subs	r3, r6, r3
  40bfb8:	13d2      	asrs	r2, r2, #15
  40bfba:	13db      	asrs	r3, r3, #15
  40bfbc:	13ed      	asrs	r5, r5, #15
  40bfbe:	2600      	movs	r6, #0
  40bfc0:	921e      	str	r2, [sp, #120]	; 0x78
  40bfc2:	931f      	str	r3, [sp, #124]	; 0x7c
  40bfc4:	951d      	str	r5, [sp, #116]	; 0x74
  40bfc6:	961c      	str	r6, [sp, #112]	; 0x70
  40bfc8:	f7fe fcd4 	bl	40a974 <invn_math_mult_q30_fxp>
  40bfcc:	4651      	mov	r1, sl
  40bfce:	4606      	mov	r6, r0
  40bfd0:	9819      	ldr	r0, [sp, #100]	; 0x64
  40bfd2:	f7fe fccf 	bl	40a974 <invn_math_mult_q30_fxp>
  40bfd6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
  40bfda:	1a36      	subs	r6, r6, r0
  40bfdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40bfde:	f7fe fcc9 	bl	40a974 <invn_math_mult_q30_fxp>
  40bfe2:	4639      	mov	r1, r7
  40bfe4:	4406      	add	r6, r0
  40bfe6:	981a      	ldr	r0, [sp, #104]	; 0x68
  40bfe8:	f7fe fcc4 	bl	40a974 <invn_math_mult_q30_fxp>
  40bfec:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
  40bff0:	1a36      	subs	r6, r6, r0
  40bff2:	9818      	ldr	r0, [sp, #96]	; 0x60
  40bff4:	f7fe fcbe 	bl	40a974 <invn_math_mult_q30_fxp>
  40bff8:	9904      	ldr	r1, [sp, #16]
  40bffa:	4406      	add	r6, r0
  40bffc:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40bffe:	f7fe fcb9 	bl	40a974 <invn_math_mult_q30_fxp>
  40c002:	9b05      	ldr	r3, [sp, #20]
  40c004:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
  40c008:	9302      	str	r3, [sp, #8]
  40c00a:	9b08      	ldr	r3, [sp, #32]
  40c00c:	9300      	str	r3, [sp, #0]
  40c00e:	1a32      	subs	r2, r6, r0
  40c010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c012:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c014:	9501      	str	r5, [sp, #4]
  40c016:	a91c      	add	r1, sp, #112	; 0x70
  40c018:	f001 fb22 	bl	40d660 <rls_core_Bierman4_fxp>
  40c01c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
  40c020:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
  40c024:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
  40c028:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
  40c02c:	4298      	cmp	r0, r3
  40c02e:	9b04      	ldr	r3, [sp, #16]
  40c030:	bfc8      	it	gt
  40c032:	f8c4 0114 	strgt.w	r0, [r4, #276]	; 0x114
  40c036:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  40c03a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  40c03e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  40c042:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
  40c046:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
  40c04a:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
  40c04e:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
  40c052:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
  40c056:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40c05a:	2b01      	cmp	r3, #1
  40c05c:	f040 80ba 	bne.w	40c1d4 <RlsCalibrationFxp_UpdateUncalibrated+0x98c>
  40c060:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  40c062:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40c064:	6b62      	ldr	r2, [r4, #52]	; 0x34
  40c066:	4298      	cmp	r0, r3
  40c068:	bfb8      	it	lt
  40c06a:	4618      	movlt	r0, r3
  40c06c:	4290      	cmp	r0, r2
  40c06e:	bfb8      	it	lt
  40c070:	4610      	movlt	r0, r2
  40c072:	67a0      	str	r0, [r4, #120]	; 0x78
  40c074:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  40c076:	b18a      	cbz	r2, 40c09c <RlsCalibrationFxp_UpdateUncalibrated+0x854>
  40c078:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
  40c07c:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
  40c080:	105b      	asrs	r3, r3, #1
  40c082:	429a      	cmp	r2, r3
  40c084:	db0c      	blt.n	40c0a0 <RlsCalibrationFxp_UpdateUncalibrated+0x858>
  40c086:	428a      	cmp	r2, r1
  40c088:	f2c0 81e7 	blt.w	40c45a <RlsCalibrationFxp_UpdateUncalibrated+0xc12>
  40c08c:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
  40c090:	429a      	cmp	r2, r3
  40c092:	db05      	blt.n	40c0a0 <RlsCalibrationFxp_UpdateUncalibrated+0x858>
  40c094:	e002      	b.n	40c09c <RlsCalibrationFxp_UpdateUncalibrated+0x854>
  40c096:	bf00      	nop
  40c098:	ffff8000 	.word	0xffff8000
  40c09c:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  40c0a0:	4283      	cmp	r3, r0
  40c0a2:	f77f aced 	ble.w	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c0a6:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
  40c0aa:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
  40c0ae:	429a      	cmp	r2, r3
  40c0b0:	f2c0 80fe 	blt.w	40c2b0 <RlsCalibrationFxp_UpdateUncalibrated+0xa68>
  40c0b4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
  40c0b8:	3301      	adds	r3, #1
  40c0ba:	2b05      	cmp	r3, #5
  40c0bc:	f340 81be 	ble.w	40c43c <RlsCalibrationFxp_UpdateUncalibrated+0xbf4>
  40c0c0:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40c0c4:	2300      	movs	r3, #0
  40c0c6:	2a01      	cmp	r2, #1
  40c0c8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  40c0cc:	f000 81cf 	beq.w	40c46e <RlsCalibrationFxp_UpdateUncalibrated+0xc26>
  40c0d0:	f104 01ac 	add.w	r1, r4, #172	; 0xac
  40c0d4:	c90e      	ldmia	r1, {r1, r2, r3}
  40c0d6:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
  40c0da:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  40c0de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40c0e2:	2300      	movs	r3, #0
  40c0e4:	4a70      	ldr	r2, [pc, #448]	; (40c2a8 <RlsCalibrationFxp_UpdateUncalibrated+0xa60>)
  40c0e6:	6123      	str	r3, [r4, #16]
  40c0e8:	6163      	str	r3, [r4, #20]
  40c0ea:	61a3      	str	r3, [r4, #24]
  40c0ec:	61e3      	str	r3, [r4, #28]
  40c0ee:	65a3      	str	r3, [r4, #88]	; 0x58
  40c0f0:	65e3      	str	r3, [r4, #92]	; 0x5c
  40c0f2:	6623      	str	r3, [r4, #96]	; 0x60
  40c0f4:	6663      	str	r3, [r4, #100]	; 0x64
  40c0f6:	66a3      	str	r3, [r4, #104]	; 0x68
  40c0f8:	66e3      	str	r3, [r4, #108]	; 0x6c
  40c0fa:	6322      	str	r2, [r4, #48]	; 0x30
  40c0fc:	6362      	str	r2, [r4, #52]	; 0x34
  40c0fe:	63a2      	str	r2, [r4, #56]	; 0x38
  40c100:	63e2      	str	r2, [r4, #60]	; 0x3c
  40c102:	e4bd      	b.n	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c104:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
  40c108:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
  40c10c:	429a      	cmp	r2, r3
  40c10e:	f280 80a1 	bge.w	40c254 <RlsCalibrationFxp_UpdateUncalibrated+0xa0c>
  40c112:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40c116:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
  40c11a:	9205      	str	r2, [sp, #20]
  40c11c:	4293      	cmp	r3, r2
  40c11e:	f280 8099 	bge.w	40c254 <RlsCalibrationFxp_UpdateUncalibrated+0xa0c>
  40c122:	f8d9 2000 	ldr.w	r2, [r9]
  40c126:	2107      	movs	r1, #7
  40c128:	4413      	add	r3, r2
  40c12a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
  40c12e:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
  40c132:	2301      	movs	r3, #1
  40c134:	e5ba      	b.n	40bcac <RlsCalibrationFxp_UpdateUncalibrated+0x464>
  40c136:	2300      	movs	r3, #0
  40c138:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  40c13c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  40c140:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40c144:	e475      	b.n	40ba32 <RlsCalibrationFxp_UpdateUncalibrated+0x1ea>
  40c146:	4293      	cmp	r3, r2
  40c148:	f6ff ae14 	blt.w	40bd74 <RlsCalibrationFxp_UpdateUncalibrated+0x52c>
  40c14c:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
  40c150:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
  40c154:	eba2 060a 	sub.w	r6, r2, sl
  40c158:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
  40c15c:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
  40c160:	428a      	cmp	r2, r1
  40c162:	dc13      	bgt.n	40c18c <RlsCalibrationFxp_UpdateUncalibrated+0x944>
  40c164:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
  40c168:	1bd6      	subs	r6, r2, r7
  40c16a:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
  40c16e:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
  40c172:	4291      	cmp	r1, r2
  40c174:	db0a      	blt.n	40c18c <RlsCalibrationFxp_UpdateUncalibrated+0x944>
  40c176:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
  40c17a:	9e04      	ldr	r6, [sp, #16]
  40c17c:	1b96      	subs	r6, r2, r6
  40c17e:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
  40c182:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
  40c186:	4291      	cmp	r1, r2
  40c188:	f6bf adf4 	bge.w	40bd74 <RlsCalibrationFxp_UpdateUncalibrated+0x52c>
  40c18c:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40c190:	9904      	ldr	r1, [sp, #16]
  40c192:	f8c4 a0d0 	str.w	sl, [r4, #208]	; 0xd0
  40c196:	2a01      	cmp	r2, #1
  40c198:	bf14      	ite	ne
  40c19a:	2202      	movne	r2, #2
  40c19c:	220a      	moveq	r2, #10
  40c19e:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
  40c1a2:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
  40c1a6:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
  40c1aa:	e5e3      	b.n	40bd74 <RlsCalibrationFxp_UpdateUncalibrated+0x52c>
  40c1ac:	2300      	movs	r3, #0
  40c1ae:	9a04      	ldr	r2, [sp, #16]
  40c1b0:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
  40c1b4:	f8c4 c0f0 	str.w	ip, [r4, #240]	; 0xf0
  40c1b8:	f8c4 e0f4 	str.w	lr, [r4, #244]	; 0xf4
  40c1bc:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
  40c1c0:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
  40c1c4:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
  40c1c8:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
  40c1cc:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
  40c1d0:	469b      	mov	fp, r3
  40c1d2:	e455      	b.n	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c1d4:	6e21      	ldr	r1, [r4, #96]	; 0x60
  40c1d6:	6b66      	ldr	r6, [r4, #52]	; 0x34
  40c1d8:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
  40c1dc:	4608      	mov	r0, r1
  40c1de:	f7fe fbbd 	bl	40a95c <invn_math_mult_q15_fxp>
  40c1e2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  40c1e4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  40c1e6:	4607      	mov	r7, r0
  40c1e8:	4608      	mov	r0, r1
  40c1ea:	f7fe fbb7 	bl	40a95c <invn_math_mult_q15_fxp>
  40c1ee:	fb85 0100 	smull	r0, r1, r5, r0
  40c1f2:	fbc7 010a 	smlal	r0, r1, r7, sl
  40c1f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40c1f8:	6be7      	ldr	r7, [r4, #60]	; 0x3c
  40c1fa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  40c1fc:	0bc2      	lsrs	r2, r0, #15
  40c1fe:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
  40c202:	4618      	mov	r0, r3
  40c204:	4619      	mov	r1, r3
  40c206:	4416      	add	r6, r2
  40c208:	f7fe fba8 	bl	40a95c <invn_math_mult_q15_fxp>
  40c20c:	4601      	mov	r1, r0
  40c20e:	4638      	mov	r0, r7
  40c210:	f7fe fba4 	bl	40a95c <invn_math_mult_q15_fxp>
  40c214:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40c216:	4428      	add	r0, r5
  40c218:	4298      	cmp	r0, r3
  40c21a:	bfb8      	it	lt
  40c21c:	4618      	movlt	r0, r3
  40c21e:	42b0      	cmp	r0, r6
  40c220:	bfb8      	it	lt
  40c222:	4630      	movlt	r0, r6
  40c224:	67a0      	str	r0, [r4, #120]	; 0x78
  40c226:	e725      	b.n	40c074 <RlsCalibrationFxp_UpdateUncalibrated+0x82c>
  40c228:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40c22c:	9e04      	ldr	r6, [sp, #16]
  40c22e:	f8c4 a0d0 	str.w	sl, [r4, #208]	; 0xd0
  40c232:	2a01      	cmp	r2, #1
  40c234:	f04f 0200 	mov.w	r2, #0
  40c238:	bf14      	ite	ne
  40c23a:	2101      	movne	r1, #1
  40c23c:	210a      	moveq	r1, #10
  40c23e:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
  40c242:	2201      	movs	r2, #1
  40c244:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
  40c248:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
  40c24c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
  40c250:	9208      	str	r2, [sp, #32]
  40c252:	e596      	b.n	40bd82 <RlsCalibrationFxp_UpdateUncalibrated+0x53a>
  40c254:	f8d9 3000 	ldr.w	r3, [r9]
  40c258:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
  40c25c:	2106      	movs	r1, #6
  40c25e:	2300      	movs	r3, #0
  40c260:	2201      	movs	r2, #1
  40c262:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
  40c266:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
  40c26a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  40c26e:	469b      	mov	fp, r3
  40c270:	e406      	b.n	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c272:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
  40c276:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
  40c27a:	4b0c      	ldr	r3, [pc, #48]	; (40c2ac <RlsCalibrationFxp_UpdateUncalibrated+0xa64>)
  40c27c:	0049      	lsls	r1, r1, #1
  40c27e:	fb83 5601 	smull	r5, r6, r3, r1
  40c282:	fb83 5300 	smull	r5, r3, r3, r0
  40c286:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
  40c28a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40c28e:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40c292:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
  40c296:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40c29a:	a91c      	add	r1, sp, #112	; 0x70
  40c29c:	f104 0010 	add.w	r0, r4, #16
  40c2a0:	f001 f9de 	bl	40d660 <rls_core_Bierman4_fxp>
  40c2a4:	e5aa      	b.n	40bdfc <RlsCalibrationFxp_UpdateUncalibrated+0x5b4>
  40c2a6:	bf00      	nop
  40c2a8:	0007a120 	.word	0x0007a120
  40c2ac:	55555556 	.word	0x55555556
  40c2b0:	6960      	ldr	r0, [r4, #20]
  40c2b2:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
  40c2b6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
  40c2ba:	f8d8 3014 	ldr.w	r3, [r8, #20]
  40c2be:	69a1      	ldr	r1, [r4, #24]
  40c2c0:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  40c2c4:	69e2      	ldr	r2, [r4, #28]
  40c2c6:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
  40c2ca:	4407      	add	r7, r0
  40c2cc:	fa07 f70e 	lsl.w	r7, r7, lr
  40c2d0:	1bdb      	subs	r3, r3, r7
  40c2d2:	440e      	add	r6, r1
  40c2d4:	fa43 f10e 	asr.w	r1, r3, lr
  40c2d8:	f8d8 3018 	ldr.w	r3, [r8, #24]
  40c2dc:	f8d8 001c 	ldr.w	r0, [r8, #28]
  40c2e0:	fa06 f60e 	lsl.w	r6, r6, lr
  40c2e4:	4415      	add	r5, r2
  40c2e6:	eba3 0a06 	sub.w	sl, r3, r6
  40c2ea:	fa05 f30e 	lsl.w	r3, r5, lr
  40c2ee:	9304      	str	r3, [sp, #16]
  40c2f0:	1ac3      	subs	r3, r0, r3
  40c2f2:	fa4a fa0e 	asr.w	sl, sl, lr
  40c2f6:	fa43 f30e 	asr.w	r3, r3, lr
  40c2fa:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
  40c2fe:	2200      	movs	r2, #0
  40c300:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
  40c304:	4655      	mov	r5, sl
  40c306:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
  40c30a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  40c30e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  40c312:	4661      	mov	r1, ip
  40c314:	2d00      	cmp	r5, #0
  40c316:	4660      	mov	r0, ip
  40c318:	bfb8      	it	lt
  40c31a:	426d      	neglt	r5, r5
  40c31c:	9208      	str	r2, [sp, #32]
  40c31e:	f7fe fb1d 	bl	40a95c <invn_math_mult_q15_fxp>
  40c322:	4629      	mov	r1, r5
  40c324:	9005      	str	r0, [sp, #20]
  40c326:	4628      	mov	r0, r5
  40c328:	f7fe fb18 	bl	40a95c <invn_math_mult_q15_fxp>
  40c32c:	9a08      	ldr	r2, [sp, #32]
  40c32e:	4611      	mov	r1, r2
  40c330:	9a05      	ldr	r2, [sp, #20]
  40c332:	eb02 0a00 	add.w	sl, r2, r0
  40c336:	4608      	mov	r0, r1
  40c338:	f7fe fb10 	bl	40a95c <invn_math_mult_q15_fxp>
  40c33c:	4450      	add	r0, sl
  40c33e:	f7fe fb1f 	bl	40a980 <invn_math_sqrt_q15_fxp>
  40c342:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
  40c346:	b95a      	cbnz	r2, 40c360 <RlsCalibrationFxp_UpdateUncalibrated+0xb18>
  40c348:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40c34a:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
  40c34e:	eba3 0e00 	sub.w	lr, r3, r0
  40c352:	ea8e 73ee 	eor.w	r3, lr, lr, asr #31
  40c356:	eba3 73ee 	sub.w	r3, r3, lr, asr #31
  40c35a:	428b      	cmp	r3, r1
  40c35c:	f6bf ab90 	bge.w	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c360:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
  40c364:	4298      	cmp	r0, r3
  40c366:	f77f ab8b 	ble.w	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c36a:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
  40c36e:	4298      	cmp	r0, r3
  40c370:	f6bf ab86 	bge.w	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c374:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  40c376:	67e1      	str	r1, [r4, #124]	; 0x7c
  40c378:	2a00      	cmp	r2, #0
  40c37a:	f000 8083 	beq.w	40c484 <RlsCalibrationFxp_UpdateUncalibrated+0xc3c>
  40c37e:	6922      	ldr	r2, [r4, #16]
  40c380:	6963      	ldr	r3, [r4, #20]
  40c382:	6022      	str	r2, [r4, #0]
  40c384:	6063      	str	r3, [r4, #4]
  40c386:	69a2      	ldr	r2, [r4, #24]
  40c388:	69e3      	ldr	r3, [r4, #28]
  40c38a:	60a2      	str	r2, [r4, #8]
  40c38c:	60e3      	str	r3, [r4, #12]
  40c38e:	6b22      	ldr	r2, [r4, #48]	; 0x30
  40c390:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40c392:	6222      	str	r2, [r4, #32]
  40c394:	6263      	str	r3, [r4, #36]	; 0x24
  40c396:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40c398:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40c39a:	62a2      	str	r2, [r4, #40]	; 0x28
  40c39c:	62e3      	str	r3, [r4, #44]	; 0x2c
  40c39e:	6da2      	ldr	r2, [r4, #88]	; 0x58
  40c3a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40c3a2:	6422      	str	r2, [r4, #64]	; 0x40
  40c3a4:	6463      	str	r3, [r4, #68]	; 0x44
  40c3a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
  40c3a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40c3aa:	9d04      	ldr	r5, [sp, #16]
  40c3ac:	64a2      	str	r2, [r4, #72]	; 0x48
  40c3ae:	64e3      	str	r3, [r4, #76]	; 0x4c
  40c3b0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  40c3b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40c3b4:	6720      	str	r0, [r4, #112]	; 0x70
  40c3b6:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
  40c3ba:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  40c3be:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  40c3c2:	6522      	str	r2, [r4, #80]	; 0x50
  40c3c4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
  40c3c8:	6563      	str	r3, [r4, #84]	; 0x54
  40c3ca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
  40c3ce:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
  40c3d2:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
  40c3d6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  40c3da:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  40c3de:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  40c3e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40c3e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  40c3ea:	2300      	movs	r3, #0
  40c3ec:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  40c3f0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  40c3f4:	428a      	cmp	r2, r1
  40c3f6:	f04f 0301 	mov.w	r3, #1
  40c3fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  40c3fe:	bfc4      	itt	gt
  40c400:	2302      	movgt	r3, #2
  40c402:	f8c4 3080 	strgt.w	r3, [r4, #128]	; 0x80
  40c406:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
  40c40a:	428b      	cmp	r3, r1
  40c40c:	bfc4      	itt	gt
  40c40e:	2303      	movgt	r3, #3
  40c410:	f8c4 3080 	strgt.w	r3, [r4, #128]	; 0x80
  40c414:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40c418:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  40c41c:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
  40c420:	4098      	lsls	r0, r3
  40c422:	9b04      	ldr	r3, [sp, #16]
  40c424:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
  40c428:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
  40c42c:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
  40c430:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  40c434:	f04f 0b02 	mov.w	fp, #2
  40c438:	f7ff bb22 	b.w	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c43c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  40c440:	f7ff bb1e 	b.w	40ba80 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c444:	2302      	movs	r3, #2
  40c446:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  40c44a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40c44e:	9305      	str	r3, [sp, #20]
  40c450:	e66f      	b.n	40c132 <RlsCalibrationFxp_UpdateUncalibrated+0x8ea>
  40c452:	d013      	beq.n	40c47c <RlsCalibrationFxp_UpdateUncalibrated+0xc34>
  40c454:	eb03 0363 	add.w	r3, r3, r3, asr #1
  40c458:	e4ee      	b.n	40be38 <RlsCalibrationFxp_UpdateUncalibrated+0x5f0>
  40c45a:	460b      	mov	r3, r1
  40c45c:	e620      	b.n	40c0a0 <RlsCalibrationFxp_UpdateUncalibrated+0x858>
  40c45e:	f8c4 b094 	str.w	fp, [r4, #148]	; 0x94
  40c462:	f8c4 b098 	str.w	fp, [r4, #152]	; 0x98
  40c466:	f8c4 b09c 	str.w	fp, [r4, #156]	; 0x9c
  40c46a:	f7ff bbf4 	b.w	40bc56 <RlsCalibrationFxp_UpdateUncalibrated+0x40e>
  40c46e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  40c472:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  40c476:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40c47a:	e632      	b.n	40c0e2 <RlsCalibrationFxp_UpdateUncalibrated+0x89a>
  40c47c:	eb03 03a3 	add.w	r3, r3, r3, asr #2
  40c480:	9305      	str	r3, [sp, #20]
  40c482:	e4da      	b.n	40be3a <RlsCalibrationFxp_UpdateUncalibrated+0x5f2>
  40c484:	4601      	mov	r1, r0
  40c486:	f641 109a 	movw	r0, #6554	; 0x199a
  40c48a:	f7fe fa67 	bl	40a95c <invn_math_mult_q15_fxp>
  40c48e:	6f21      	ldr	r1, [r4, #112]	; 0x70
  40c490:	4682      	mov	sl, r0
  40c492:	f246 6066 	movw	r0, #26214	; 0x6666
  40c496:	f7fe fa61 	bl	40a95c <invn_math_mult_q15_fxp>
  40c49a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  40c49c:	4450      	add	r0, sl
  40c49e:	e76e      	b.n	40c37e <RlsCalibrationFxp_UpdateUncalibrated+0xb36>

0040c4a0 <RlsCalibrationFxp_Init>:
  40c4a0:	b570      	push	{r4, r5, r6, lr}
  40c4a2:	4604      	mov	r4, r0
  40c4a4:	460d      	mov	r5, r1
  40c4a6:	4616      	mov	r6, r2
  40c4a8:	2100      	movs	r1, #0
  40c4aa:	f44f 72aa 	mov.w	r2, #340	; 0x154
  40c4ae:	f003 fac5 	bl	40fa3c <memset>
  40c4b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40c4b6:	4b10      	ldr	r3, [pc, #64]	; (40c4f8 <RlsCalibrationFxp_Init+0x58>)
  40c4b8:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
  40c4bc:	2201      	movs	r2, #1
  40c4be:	6323      	str	r3, [r4, #48]	; 0x30
  40c4c0:	6363      	str	r3, [r4, #52]	; 0x34
  40c4c2:	63a3      	str	r3, [r4, #56]	; 0x38
  40c4c4:	63e3      	str	r3, [r4, #60]	; 0x3c
  40c4c6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
  40c4ca:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
  40c4ce:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
  40c4d2:	b145      	cbz	r5, 40c4e6 <RlsCalibrationFxp_Init+0x46>
  40c4d4:	682b      	ldr	r3, [r5, #0]
  40c4d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  40c4da:	686b      	ldr	r3, [r5, #4]
  40c4dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  40c4e0:	68ab      	ldr	r3, [r5, #8]
  40c4e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  40c4e6:	2e00      	cmp	r6, #0
  40c4e8:	dd04      	ble.n	40c4f4 <RlsCalibrationFxp_Init+0x54>
  40c4ea:	4b04      	ldr	r3, [pc, #16]	; (40c4fc <RlsCalibrationFxp_Init+0x5c>)
  40c4ec:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
  40c4f0:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  40c4f4:	bd70      	pop	{r4, r5, r6, pc}
  40c4f6:	bf00      	nop
  40c4f8:	0007a120 	.word	0x0007a120
  40c4fc:	000f4240 	.word	0x000f4240

0040c500 <RlsCalibrationFxp_UpdateUncalibratedData>:
  40c500:	680b      	ldr	r3, [r1, #0]
  40c502:	b570      	push	{r4, r5, r6, lr}
  40c504:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
  40c508:	684b      	ldr	r3, [r1, #4]
  40c50a:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
  40c50e:	4604      	mov	r4, r0
  40c510:	688b      	ldr	r3, [r1, #8]
  40c512:	9d04      	ldr	r5, [sp, #16]
  40c514:	f8c0 31d8 	str.w	r3, [r0, #472]	; 0x1d8
  40c518:	f8c0 21cc 	str.w	r2, [r0, #460]	; 0x1cc
  40c51c:	f500 71aa 	add.w	r1, r0, #340	; 0x154
  40c520:	f500 72de 	add.w	r2, r0, #444	; 0x1bc
  40c524:	9e05      	ldr	r6, [sp, #20]
  40c526:	f7ff f98f 	bl	40b848 <RlsCalibrationFxp_UpdateUncalibrated>
  40c52a:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
  40c52e:	602b      	str	r3, [r5, #0]
  40c530:	f8d4 31ec 	ldr.w	r3, [r4, #492]	; 0x1ec
  40c534:	606b      	str	r3, [r5, #4]
  40c536:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
  40c53a:	60ab      	str	r3, [r5, #8]
  40c53c:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
  40c540:	6033      	str	r3, [r6, #0]
  40c542:	bd70      	pop	{r4, r5, r6, pc}

0040c544 <InterfaceCalibrationGyrFxp_Reset>:
  40c544:	b508      	push	{r3, lr}
  40c546:	2268      	movs	r2, #104	; 0x68
  40c548:	2100      	movs	r1, #0
  40c54a:	f003 fa77 	bl	40fa3c <memset>
  40c54e:	bd08      	pop	{r3, pc}

0040c550 <SphericalFxp_UpdateMag.part.0>:
  40c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c554:	6a1d      	ldr	r5, [r3, #32]
  40c556:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  40c558:	469b      	mov	fp, r3
  40c55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40c55c:	b097      	sub	sp, #92	; 0x5c
  40c55e:	4680      	mov	r8, r0
  40c560:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40c564:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40c568:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40c56c:	6b00      	ldr	r0, [r0, #48]	; 0x30
  40c56e:	9206      	str	r2, [sp, #24]
  40c570:	006d      	lsls	r5, r5, #1
  40c572:	0064      	lsls	r4, r4, #1
  40c574:	005b      	lsls	r3, r3, #1
  40c576:	468a      	mov	sl, r1
  40c578:	950f      	str	r5, [sp, #60]	; 0x3c
  40c57a:	9410      	str	r4, [sp, #64]	; 0x40
  40c57c:	9311      	str	r3, [sp, #68]	; 0x44
  40c57e:	b928      	cbnz	r0, 40c58c <SphericalFxp_UpdateMag.part.0+0x3c>
  40c580:	f8c8 5018 	str.w	r5, [r8, #24]
  40c584:	f8c8 401c 	str.w	r4, [r8, #28]
  40c588:	f8c8 3020 	str.w	r3, [r8, #32]
  40c58c:	2203      	movs	r2, #3
  40c58e:	f108 0918 	add.w	r9, r8, #24
  40c592:	f8da 301c 	ldr.w	r3, [sl, #28]
  40c596:	9200      	str	r2, [sp, #0]
  40c598:	4649      	mov	r1, r9
  40c59a:	f108 0228 	add.w	r2, r8, #40	; 0x28
  40c59e:	a80f      	add	r0, sp, #60	; 0x3c
  40c5a0:	f001 fb18 	bl	40dbd4 <fxpRecursiveVariance>
  40c5a4:	9a06      	ldr	r2, [sp, #24]
  40c5a6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  40c5aa:	f8da 1008 	ldr.w	r1, [sl, #8]
  40c5ae:	6812      	ldr	r2, [r2, #0]
  40c5b0:	440b      	add	r3, r1
  40c5b2:	f012 0f05 	tst.w	r2, #5
  40c5b6:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  40c5ba:	f000 8098 	beq.w	40c6ee <SphericalFxp_UpdateMag.part.0+0x19e>
  40c5be:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  40c5c2:	2900      	cmp	r1, #0
  40c5c4:	f340 8093 	ble.w	40c6ee <SphericalFxp_UpdateMag.part.0+0x19e>
  40c5c8:	2b00      	cmp	r3, #0
  40c5ca:	f340 8090 	ble.w	40c6ee <SphericalFxp_UpdateMag.part.0+0x19e>
  40c5ce:	f8d8 31d0 	ldr.w	r3, [r8, #464]	; 0x1d0
  40c5d2:	b953      	cbnz	r3, 40c5ea <SphericalFxp_UpdateMag.part.0+0x9a>
  40c5d4:	f8d8 201c 	ldr.w	r2, [r8, #28]
  40c5d8:	2a00      	cmp	r2, #0
  40c5da:	f2c0 8407 	blt.w	40cdec <SphericalFxp_UpdateMag.part.0+0x89c>
  40c5de:	d004      	beq.n	40c5ea <SphericalFxp_UpdateMag.part.0+0x9a>
  40c5e0:	f8d8 2014 	ldr.w	r2, [r8, #20]
  40c5e4:	2a00      	cmp	r2, #0
  40c5e6:	f2c0 83b8 	blt.w	40cd5a <SphericalFxp_UpdateMag.part.0+0x80a>
  40c5ea:	9b06      	ldr	r3, [sp, #24]
  40c5ec:	f103 0618 	add.w	r6, r3, #24
  40c5f0:	ab12      	add	r3, sp, #72	; 0x48
  40c5f2:	4654      	mov	r4, sl
  40c5f4:	f108 070c 	add.w	r7, r8, #12
  40c5f8:	469a      	mov	sl, r3
  40c5fa:	4652      	mov	r2, sl
  40c5fc:	4631      	mov	r1, r6
  40c5fe:	4638      	mov	r0, r7
  40c600:	f7fe fd46 	bl	40b090 <invn_angle_from_acc_correction_fxp>
  40c604:	4642      	mov	r2, r8
  40c606:	4631      	mov	r1, r6
  40c608:	4648      	mov	r0, r9
  40c60a:	f7fe fce5 	bl	40afd8 <invn_angle_from_mag_correction_fxp>
  40c60e:	f8d8 5000 	ldr.w	r5, [r8]
  40c612:	9912      	ldr	r1, [sp, #72]	; 0x48
  40c614:	f8d8 0008 	ldr.w	r0, [r8, #8]
  40c618:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40c61a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c61c:	4429      	add	r1, r5
  40c61e:	f8d8 5004 	ldr.w	r5, [r8, #4]
  40c622:	4403      	add	r3, r0
  40c624:	442a      	add	r2, r5
  40c626:	105b      	asrs	r3, r3, #1
  40c628:	1049      	asrs	r1, r1, #1
  40c62a:	1052      	asrs	r2, r2, #1
  40c62c:	e888 000e 	stmia.w	r8, {r1, r2, r3}
  40c630:	4640      	mov	r0, r8
  40c632:	4631      	mov	r1, r6
  40c634:	f7fe fbfe 	bl	40ae34 <invn_integrate_gyro_fast_trigo_fxp>
  40c638:	f8d8 31d0 	ldr.w	r3, [r8, #464]	; 0x1d0
  40c63c:	3301      	adds	r3, #1
  40c63e:	2b04      	cmp	r3, #4
  40c640:	f8c8 31d0 	str.w	r3, [r8, #464]	; 0x1d0
  40c644:	ddd9      	ble.n	40c5fa <SphericalFxp_UpdateMag.part.0+0xaa>
  40c646:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
  40c64a:	f8d8 601c 	ldr.w	r6, [r8, #28]
  40c64e:	46a2      	mov	sl, r4
  40c650:	fb80 4500 	smull	r4, r5, r0, r0
  40c654:	4620      	mov	r0, r4
  40c656:	4629      	mov	r1, r5
  40c658:	1924      	adds	r4, r4, r4
  40c65a:	416d      	adcs	r5, r5
  40c65c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40c660:	1900      	adds	r0, r0, r4
  40c662:	4169      	adcs	r1, r5
  40c664:	0144      	lsls	r4, r0, #5
  40c666:	014d      	lsls	r5, r1, #5
  40c668:	1822      	adds	r2, r4, r0
  40c66a:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
  40c66e:	eb45 0301 	adc.w	r3, r5, r1
  40c672:	f8d8 5018 	ldr.w	r5, [r8, #24]
  40c676:	f8d8 4020 	ldr.w	r4, [r8, #32]
  40c67a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40c67e:	fb86 6706 	smull	r6, r7, r6, r6
  40c682:	fbc5 6705 	smlal	r6, r7, r5, r5
  40c686:	1880      	adds	r0, r0, r2
  40c688:	fbc4 6704 	smlal	r6, r7, r4, r4
  40c68c:	4159      	adcs	r1, r3
  40c68e:	0f84      	lsrs	r4, r0, #30
  40c690:	ea4f 7e96 	mov.w	lr, r6, lsr #30
  40c694:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
  40c698:	ea4e 0e87 	orr.w	lr, lr, r7, lsl #2
  40c69c:	eba4 060e 	sub.w	r6, r4, lr
  40c6a0:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
  40c6a4:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
  40c6a8:	4dc5      	ldr	r5, [pc, #788]	; (40c9c0 <SphericalFxp_UpdateMag.part.0+0x470>)
  40c6aa:	9412      	str	r4, [sp, #72]	; 0x48
  40c6ac:	ea86 70e6 	eor.w	r0, r6, r6, asr #31
  40c6b0:	eba0 70e6 	sub.w	r0, r0, r6, asr #31
  40c6b4:	2332      	movs	r3, #50	; 0x32
  40c6b6:	fb03 f400 	mul.w	r4, r3, r0
  40c6ba:	1853      	adds	r3, r2, r1
  40c6bc:	2264      	movs	r2, #100	; 0x64
  40c6be:	fb02 4303 	mla	r3, r2, r3, r4
  40c6c2:	9906      	ldr	r1, [sp, #24]
  40c6c4:	9014      	str	r0, [sp, #80]	; 0x50
  40c6c6:	42ab      	cmp	r3, r5
  40c6c8:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  40c6cc:	628b      	str	r3, [r1, #40]	; 0x28
  40c6ce:	f200 82ab 	bhi.w	40cc28 <SphericalFxp_UpdateMag.part.0+0x6d8>
  40c6d2:	4abc      	ldr	r2, [pc, #752]	; (40c9c4 <SphericalFxp_UpdateMag.part.0+0x474>)
  40c6d4:	4293      	cmp	r3, r2
  40c6d6:	f300 82a8 	bgt.w	40cc2a <SphericalFxp_UpdateMag.part.0+0x6da>
  40c6da:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
  40c6de:	0655      	lsls	r5, r2, #25
  40c6e0:	f140 8328 	bpl.w	40cd34 <SphericalFxp_UpdateMag.part.0+0x7e4>
  40c6e4:	4608      	mov	r0, r1
  40c6e6:	49b8      	ldr	r1, [pc, #736]	; (40c9c8 <SphericalFxp_UpdateMag.part.0+0x478>)
  40c6e8:	6802      	ldr	r2, [r0, #0]
  40c6ea:	4419      	add	r1, r3
  40c6ec:	6281      	str	r1, [r0, #40]	; 0x28
  40c6ee:	0754      	lsls	r4, r2, #29
  40c6f0:	d40c      	bmi.n	40c70c <SphericalFxp_UpdateMag.part.0+0x1bc>
  40c6f2:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
  40c6f6:	2b03      	cmp	r3, #3
  40c6f8:	d105      	bne.n	40c706 <SphericalFxp_UpdateMag.part.0+0x1b6>
  40c6fa:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
  40c6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c702:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
  40c706:	b017      	add	sp, #92	; 0x5c
  40c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c70c:	9b06      	ldr	r3, [sp, #24]
  40c70e:	3308      	adds	r3, #8
  40c710:	4618      	mov	r0, r3
  40c712:	f508 7288 	add.w	r2, r8, #272	; 0x110
  40c716:	a90f      	add	r1, sp, #60	; 0x3c
  40c718:	930a      	str	r3, [sp, #40]	; 0x28
  40c71a:	9204      	str	r2, [sp, #16]
  40c71c:	f7fe f81c 	bl	40a758 <invn_math_quat_rotate_BtoI_fxp>
  40c720:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
  40c724:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
  40c728:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
  40c72c:	06d0      	lsls	r0, r2, #27
  40c72e:	bf5b      	ittet	pl
  40c730:	13c9      	asrpl	r1, r1, #15
  40c732:	f241 3088 	movwpl	r0, #5000	; 0x1388
  40c736:	eb03 1321 	addmi.w	r3, r3, r1, asr #4
  40c73a:	fb00 1303 	mlapl	r3, r0, r3, r1
  40c73e:	f8db 103c 	ldr.w	r1, [fp, #60]	; 0x3c
  40c742:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
  40c746:	2903      	cmp	r1, #3
  40c748:	f000 82e2 	beq.w	40cd10 <SphericalFxp_UpdateMag.part.0+0x7c0>
  40c74c:	f108 0394 	add.w	r3, r8, #148	; 0x94
  40c750:	f508 749e 	add.w	r4, r8, #316	; 0x13c
  40c754:	4621      	mov	r1, r4
  40c756:	f508 75a4 	add.w	r5, r8, #328	; 0x148
  40c75a:	930c      	str	r3, [sp, #48]	; 0x30
  40c75c:	4618      	mov	r0, r3
  40c75e:	2204      	movs	r2, #4
  40c760:	2303      	movs	r3, #3
  40c762:	f001 fa0d 	bl	40db80 <fxpScaleAndSaturate>
  40c766:	af12      	add	r7, sp, #72	; 0x48
  40c768:	4629      	mov	r1, r5
  40c76a:	2303      	movs	r3, #3
  40c76c:	2204      	movs	r2, #4
  40c76e:	9804      	ldr	r0, [sp, #16]
  40c770:	970d      	str	r7, [sp, #52]	; 0x34
  40c772:	f001 fa05 	bl	40db80 <fxpScaleAndSaturate>
  40c776:	4629      	mov	r1, r5
  40c778:	4620      	mov	r0, r4
  40c77a:	463a      	mov	r2, r7
  40c77c:	f000 fe9a 	bl	40d4b4 <invn_cross_product_q30>
  40c780:	f8d8 2140 	ldr.w	r2, [r8, #320]	; 0x140
  40c784:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
  40c788:	f8d8 513c 	ldr.w	r5, [r8, #316]	; 0x13c
  40c78c:	f8d8 4148 	ldr.w	r4, [r8, #328]	; 0x148
  40c790:	f8d8 7144 	ldr.w	r7, [r8, #324]	; 0x144
  40c794:	f8d8 1150 	ldr.w	r1, [r8, #336]	; 0x150
  40c798:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40c79a:	fb82 2303 	smull	r2, r3, r2, r3
  40c79e:	fbc4 2305 	smlal	r2, r3, r4, r5
  40c7a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40c7a4:	fbc1 2307 	smlal	r2, r3, r1, r7
  40c7a8:	fb80 0100 	smull	r0, r1, r0, r0
  40c7ac:	461e      	mov	r6, r3
  40c7ae:	fbc4 0104 	smlal	r0, r1, r4, r4
  40c7b2:	0f92      	lsrs	r2, r2, #30
  40c7b4:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40c7b6:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
  40c7ba:	fbc4 0104 	smlal	r0, r1, r4, r4
  40c7be:	fb82 2302 	smull	r2, r3, r2, r2
  40c7c2:	461f      	mov	r7, r3
  40c7c4:	0f95      	lsrs	r5, r2, #30
  40c7c6:	0f82      	lsrs	r2, r0, #30
  40c7c8:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
  40c7cc:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
  40c7d0:	f508 74ae 	add.w	r4, r8, #348	; 0x15c
  40c7d4:	f8c8 2158 	str.w	r2, [r8, #344]	; 0x158
  40c7d8:	f8c8 5154 	str.w	r5, [r8, #340]	; 0x154
  40c7dc:	2203      	movs	r2, #3
  40c7de:	4621      	mov	r1, r4
  40c7e0:	2302      	movs	r3, #2
  40c7e2:	f508 70aa 	add.w	r0, r8, #340	; 0x154
  40c7e6:	f001 f9cb 	bl	40db80 <fxpScaleAndSaturate>
  40c7ea:	f8d8 2138 	ldr.w	r2, [r8, #312]	; 0x138
  40c7ee:	2a00      	cmp	r2, #0
  40c7f0:	f000 81dd 	beq.w	40cbae <SphericalFxp_UpdateMag.part.0+0x65e>
  40c7f4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
  40c7f8:	f003 0303 	and.w	r3, r3, #3
  40c7fc:	2b03      	cmp	r3, #3
  40c7fe:	f000 81de 	beq.w	40cbbe <SphericalFxp_UpdateMag.part.0+0x66e>
  40c802:	f640 33b7 	movw	r3, #2999	; 0xbb7
  40c806:	429a      	cmp	r2, r3
  40c808:	f340 81d9 	ble.w	40cbbe <SphericalFxp_UpdateMag.part.0+0x66e>
  40c80c:	f8d8 4164 	ldr.w	r4, [r8, #356]	; 0x164
  40c810:	f8d8 3168 	ldr.w	r3, [r8, #360]	; 0x168
  40c814:	f8d8 2160 	ldr.w	r2, [r8, #352]	; 0x160
  40c818:	f8d8 115c 	ldr.w	r1, [r8, #348]	; 0x15c
  40c81c:	f8d8 017c 	ldr.w	r0, [r8, #380]	; 0x17c
  40c820:	1ad2      	subs	r2, r2, r3
  40c822:	fb82 2302 	smull	r2, r3, r2, r2
  40c826:	1b09      	subs	r1, r1, r4
  40c828:	fbc1 2301 	smlal	r2, r3, r1, r1
  40c82c:	10db      	asrs	r3, r3, #3
  40c82e:	4283      	cmp	r3, r0
  40c830:	dc0b      	bgt.n	40c84a <SphericalFxp_UpdateMag.part.0+0x2fa>
  40c832:	f8da 1008 	ldr.w	r1, [sl, #8]
  40c836:	4a65      	ldr	r2, [pc, #404]	; (40c9cc <SphericalFxp_UpdateMag.part.0+0x47c>)
  40c838:	1a1b      	subs	r3, r3, r0
  40c83a:	fb02 f201 	mul.w	r2, r2, r1
  40c83e:	fb82 3403 	smull	r3, r4, r2, r3
  40c842:	0f9a      	lsrs	r2, r3, #30
  40c844:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  40c848:	1883      	adds	r3, r0, r2
  40c84a:	fb83 0103 	smull	r0, r1, r3, r3
  40c84e:	0c82      	lsrs	r2, r0, #18
  40c850:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
  40c854:	f8c8 317c 	str.w	r3, [r8, #380]	; 0x17c
  40c858:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
  40c85c:	fb80 0102 	smull	r0, r1, r0, r2
  40c860:	0f83      	lsrs	r3, r0, #30
  40c862:	f8da 2020 	ldr.w	r2, [sl, #32]
  40c866:	f8d8 0188 	ldr.w	r0, [r8, #392]	; 0x188
  40c86a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
  40c86e:	f8d8 5018 	ldr.w	r5, [r8, #24]
  40c872:	f8d8 c014 	ldr.w	ip, [r8, #20]
  40c876:	9508      	str	r5, [sp, #32]
  40c878:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  40c87c:	4413      	add	r3, r2
  40c87e:	429a      	cmp	r2, r3
  40c880:	bfc8      	it	gt
  40c882:	f04f 4380 	movgt.w	r3, #1073741824	; 0x40000000
  40c886:	f8c8 3120 	str.w	r3, [r8, #288]	; 0x120
  40c88a:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40c88e:	9307      	str	r3, [sp, #28]
  40c890:	4619      	mov	r1, r3
  40c892:	f8d8 301c 	ldr.w	r3, [r8, #28]
  40c896:	930b      	str	r3, [sp, #44]	; 0x2c
  40c898:	461c      	mov	r4, r3
  40c89a:	f8d8 3184 	ldr.w	r3, [r8, #388]	; 0x184
  40c89e:	f8d8 2194 	ldr.w	r2, [r8, #404]	; 0x194
  40c8a2:	f8d8 7020 	ldr.w	r7, [r8, #32]
  40c8a6:	1a40      	subs	r0, r0, r1
  40c8a8:	eba3 030e 	sub.w	r3, r3, lr
  40c8ac:	fb80 0100 	smull	r0, r1, r0, r0
  40c8b0:	fbc3 0103 	smlal	r0, r1, r3, r3
  40c8b4:	f8d8 318c 	ldr.w	r3, [r8, #396]	; 0x18c
  40c8b8:	462e      	mov	r6, r5
  40c8ba:	f8d8 5190 	ldr.w	r5, [r8, #400]	; 0x190
  40c8be:	1b12      	subs	r2, r2, r4
  40c8c0:	eba3 030c 	sub.w	r3, r3, ip
  40c8c4:	f8d8 4198 	ldr.w	r4, [r8, #408]	; 0x198
  40c8c8:	9213      	str	r2, [sp, #76]	; 0x4c
  40c8ca:	fbc3 0103 	smlal	r0, r1, r3, r3
  40c8ce:	1bad      	subs	r5, r5, r6
  40c8d0:	fb82 2302 	smull	r2, r3, r2, r2
  40c8d4:	1be4      	subs	r4, r4, r7
  40c8d6:	0f86      	lsrs	r6, r0, #30
  40c8d8:	fbc5 2305 	smlal	r2, r3, r5, r5
  40c8dc:	fbc4 2304 	smlal	r2, r3, r4, r4
  40c8e0:	ea46 0181 	orr.w	r1, r6, r1, lsl #2
  40c8e4:	4608      	mov	r0, r1
  40c8e6:	f8c8 119c 	str.w	r1, [r8, #412]	; 0x19c
  40c8ea:	0f91      	lsrs	r1, r2, #30
  40c8ec:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
  40c8f0:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
  40c8f4:	9512      	str	r5, [sp, #72]	; 0x48
  40c8f6:	4298      	cmp	r0, r3
  40c8f8:	9414      	str	r4, [sp, #80]	; 0x50
  40c8fa:	f8c8 11a0 	str.w	r1, [r8, #416]	; 0x1a0
  40c8fe:	f300 8197 	bgt.w	40cc30 <SphericalFxp_UpdateMag.part.0+0x6e0>
  40c902:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
  40c906:	4299      	cmp	r1, r3
  40c908:	f300 8192 	bgt.w	40cc30 <SphericalFxp_UpdateMag.part.0+0x6e0>
  40c90c:	f8d8 3180 	ldr.w	r3, [r8, #384]	; 0x180
  40c910:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
  40c914:	4293      	cmp	r3, r2
  40c916:	f2c0 829d 	blt.w	40ce54 <SphericalFxp_UpdateMag.part.0+0x904>
  40c91a:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
  40c91e:	2b00      	cmp	r3, #0
  40c920:	f000 8237 	beq.w	40cd92 <SphericalFxp_UpdateMag.part.0+0x842>
  40c924:	f508 74da 	add.w	r4, r8, #436	; 0x1b4
  40c928:	a90f      	add	r1, sp, #60	; 0x3c
  40c92a:	4622      	mov	r2, r4
  40c92c:	f508 70d2 	add.w	r0, r8, #420	; 0x1a4
  40c930:	f7fd ff86 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40c934:	9a04      	ldr	r2, [sp, #16]
  40c936:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c938:	4621      	mov	r1, r4
  40c93a:	f7fd ff0d 	bl	40a758 <invn_math_quat_rotate_BtoI_fxp>
  40c93e:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
  40c942:	2b00      	cmp	r3, #0
  40c944:	f300 819f 	bgt.w	40cc86 <SphericalFxp_UpdateMag.part.0+0x736>
  40c948:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
  40c94c:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  40c950:	f8c8 212c 	str.w	r2, [r8, #300]	; 0x12c
  40c954:	f8c8 1130 	str.w	r1, [r8, #304]	; 0x130
  40c958:	f8d8 2118 	ldr.w	r2, [r8, #280]	; 0x118
  40c95c:	f8da 1008 	ldr.w	r1, [sl, #8]
  40c960:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
  40c964:	f8d8 21d4 	ldr.w	r2, [r8, #468]	; 0x1d4
  40c968:	440b      	add	r3, r1
  40c96a:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
  40c96e:	2a00      	cmp	r2, #0
  40c970:	f040 81a8 	bne.w	40ccc4 <SphericalFxp_UpdateMag.part.0+0x774>
  40c974:	2b00      	cmp	r3, #0
  40c976:	f77f aebc 	ble.w	40c6f2 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40c97a:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
  40c97e:	2b00      	cmp	r3, #0
  40c980:	f77f aeb7 	ble.w	40c6f2 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40c984:	f8d8 3130 	ldr.w	r3, [r8, #304]	; 0x130
  40c988:	2b00      	cmp	r3, #0
  40c98a:	f2c0 823c 	blt.w	40ce06 <SphericalFxp_UpdateMag.part.0+0x8b6>
  40c98e:	d004      	beq.n	40c99a <SphericalFxp_UpdateMag.part.0+0x44a>
  40c990:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
  40c994:	2b00      	cmp	r3, #0
  40c996:	f2c0 81e8 	blt.w	40cd6a <SphericalFxp_UpdateMag.part.0+0x81a>
  40c99a:	f508 7182 	add.w	r1, r8, #260	; 0x104
  40c99e:	f108 03f8 	add.w	r3, r8, #248	; 0xf8
  40c9a2:	f108 02ec 	add.w	r2, r8, #236	; 0xec
  40c9a6:	9104      	str	r1, [sp, #16]
  40c9a8:	f508 7196 	add.w	r1, r8, #300	; 0x12c
  40c9ac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  40c9b0:	f108 09dc 	add.w	r9, r8, #220	; 0xdc
  40c9b4:	9107      	str	r1, [sp, #28]
  40c9b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40c9b8:	461f      	mov	r7, r3
  40c9ba:	4693      	mov	fp, r2
  40c9bc:	e038      	b.n	40ca30 <SphericalFxp_UpdateMag.part.0+0x4e0>
  40c9be:	bf00      	nop
  40c9c0:	1921fb54 	.word	0x1921fb54
  40c9c4:	186f4291 	.word	0x186f4291
  40c9c8:	00b2b8c2 	.word	0x00b2b8c2
  40c9cc:	001cac08 	.word	0x001cac08
  40c9d0:	f8d8 2074 	ldr.w	r2, [r8, #116]	; 0x74
  40c9d4:	f241 3387 	movw	r3, #4999	; 0x1387
  40c9d8:	429a      	cmp	r2, r3
  40c9da:	dd37      	ble.n	40ca4c <SphericalFxp_UpdateMag.part.0+0x4fc>
  40c9dc:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
  40c9e0:	429a      	cmp	r2, r3
  40c9e2:	dd33      	ble.n	40ca4c <SphericalFxp_UpdateMag.part.0+0x4fc>
  40c9e4:	f8c8 e104 	str.w	lr, [r8, #260]	; 0x104
  40c9e8:	f8c8 e108 	str.w	lr, [r8, #264]	; 0x108
  40c9ec:	f8c8 e10c 	str.w	lr, [r8, #268]	; 0x10c
  40c9f0:	4673      	mov	r3, lr
  40c9f2:	46f4      	mov	ip, lr
  40c9f4:	f8d8 0100 	ldr.w	r0, [r8, #256]	; 0x100
  40c9f8:	f8d8 10f8 	ldr.w	r1, [r8, #248]	; 0xf8
  40c9fc:	f8d8 20fc 	ldr.w	r2, [r8, #252]	; 0xfc
  40ca00:	4471      	add	r1, lr
  40ca02:	4462      	add	r2, ip
  40ca04:	4403      	add	r3, r0
  40ca06:	105b      	asrs	r3, r3, #1
  40ca08:	1049      	asrs	r1, r1, #1
  40ca0a:	1052      	asrs	r2, r2, #1
  40ca0c:	f8c8 10ec 	str.w	r1, [r8, #236]	; 0xec
  40ca10:	f8c8 30f4 	str.w	r3, [r8, #244]	; 0xf4
  40ca14:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
  40ca18:	4649      	mov	r1, r9
  40ca1a:	4658      	mov	r0, fp
  40ca1c:	f7fe fa0a 	bl	40ae34 <invn_integrate_gyro_fast_trigo_fxp>
  40ca20:	f8d8 31d4 	ldr.w	r3, [r8, #468]	; 0x1d4
  40ca24:	3301      	adds	r3, #1
  40ca26:	2b04      	cmp	r3, #4
  40ca28:	f8c8 31d4 	str.w	r3, [r8, #468]	; 0x1d4
  40ca2c:	f300 8153 	bgt.w	40ccd6 <SphericalFxp_UpdateMag.part.0+0x786>
  40ca30:	463a      	mov	r2, r7
  40ca32:	4649      	mov	r1, r9
  40ca34:	4630      	mov	r0, r6
  40ca36:	f7fe fb2b 	bl	40b090 <invn_angle_from_acc_correction_fxp>
  40ca3a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
  40ca3e:	071a      	lsls	r2, r3, #28
  40ca40:	d404      	bmi.n	40ca4c <SphericalFxp_UpdateMag.part.0+0x4fc>
  40ca42:	f8d8 e1cc 	ldr.w	lr, [r8, #460]	; 0x1cc
  40ca46:	f1be 0f00 	cmp.w	lr, #0
  40ca4a:	d0c1      	beq.n	40c9d0 <SphericalFxp_UpdateMag.part.0+0x480>
  40ca4c:	9a04      	ldr	r2, [sp, #16]
  40ca4e:	9807      	ldr	r0, [sp, #28]
  40ca50:	4649      	mov	r1, r9
  40ca52:	f7fe fac1 	bl	40afd8 <invn_angle_from_mag_correction_fxp>
  40ca56:	f8d8 e104 	ldr.w	lr, [r8, #260]	; 0x104
  40ca5a:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
  40ca5e:	ea8e 73ee 	eor.w	r3, lr, lr, asr #31
  40ca62:	eba3 73ee 	sub.w	r3, r3, lr, asr #31
  40ca66:	4293      	cmp	r3, r2
  40ca68:	db0f      	blt.n	40ca8a <SphericalFxp_UpdateMag.part.0+0x53a>
  40ca6a:	f8d8 c108 	ldr.w	ip, [r8, #264]	; 0x108
  40ca6e:	ea8c 73ec 	eor.w	r3, ip, ip, asr #31
  40ca72:	eba3 73ec 	sub.w	r3, r3, ip, asr #31
  40ca76:	429a      	cmp	r2, r3
  40ca78:	dc07      	bgt.n	40ca8a <SphericalFxp_UpdateMag.part.0+0x53a>
  40ca7a:	f8d8 310c 	ldr.w	r3, [r8, #268]	; 0x10c
  40ca7e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  40ca82:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  40ca86:	428a      	cmp	r2, r1
  40ca88:	dd09      	ble.n	40ca9e <SphericalFxp_UpdateMag.part.0+0x54e>
  40ca8a:	2200      	movs	r2, #0
  40ca8c:	4613      	mov	r3, r2
  40ca8e:	f8c8 2104 	str.w	r2, [r8, #260]	; 0x104
  40ca92:	f8c8 2108 	str.w	r2, [r8, #264]	; 0x108
  40ca96:	f8c8 210c 	str.w	r2, [r8, #268]	; 0x10c
  40ca9a:	4694      	mov	ip, r2
  40ca9c:	4696      	mov	lr, r2
  40ca9e:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
  40caa2:	2900      	cmp	r1, #0
  40caa4:	dda6      	ble.n	40c9f4 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40caa6:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
  40caaa:	2a00      	cmp	r2, #0
  40caac:	d1a2      	bne.n	40c9f4 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40caae:	f8d8 2074 	ldr.w	r2, [r8, #116]	; 0x74
  40cab2:	f241 3088 	movw	r0, #5000	; 0x1388
  40cab6:	4282      	cmp	r2, r0
  40cab8:	dd9c      	ble.n	40c9f4 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40caba:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
  40cabe:	4282      	cmp	r2, r0
  40cac0:	dd98      	ble.n	40c9f4 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40cac2:	f8da 2008 	ldr.w	r2, [sl, #8]
  40cac6:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
  40caca:	2441      	movs	r4, #65	; 0x41
  40cacc:	fb82 4504 	smull	r4, r5, r2, r4
  40cad0:	e9cd 4508 	strd	r4, r5, [sp, #32]
  40cad4:	9c08      	ldr	r4, [sp, #32]
  40cad6:	17cd      	asrs	r5, r1, #31
  40cad8:	462a      	mov	r2, r5
  40cada:	fb04 f202 	mul.w	r2, r4, r2
  40cade:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cae0:	fb01 2204 	mla	r2, r1, r4, r2
  40cae4:	9c08      	ldr	r4, [sp, #32]
  40cae6:	fba4 4501 	umull	r4, r5, r4, r1
  40caea:	4415      	add	r5, r2
  40caec:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40caf0:	0c22      	lsrs	r2, r4, #16
  40caf2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  40caf6:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40cafa:	fb81 0102 	smull	r0, r1, r1, r2
  40cafe:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40cb02:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cb04:	9212      	str	r2, [sp, #72]	; 0x48
  40cb06:	0c04      	lsrs	r4, r0, #16
  40cb08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40cb0c:	9908      	ldr	r1, [sp, #32]
  40cb0e:	0f8d      	lsrs	r5, r1, #30
  40cb10:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cb12:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
  40cb16:	ea4f 452e 	mov.w	r5, lr, asr #16
  40cb1a:	42ac      	cmp	r4, r5
  40cb1c:	bfb8      	it	lt
  40cb1e:	468e      	movlt	lr, r1
  40cb20:	4260      	negs	r0, r4
  40cb22:	f8d8 4068 	ldr.w	r4, [r8, #104]	; 0x68
  40cb26:	4285      	cmp	r5, r0
  40cb28:	bfb8      	it	lt
  40cb2a:	f1c1 0e00 	rsblt	lr, r1, #0
  40cb2e:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
  40cb32:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
  40cb36:	fb81 0102 	smull	r0, r1, r1, r2
  40cb3a:	460d      	mov	r5, r1
  40cb3c:	4604      	mov	r4, r0
  40cb3e:	e9cd 4508 	strd	r4, r5, [sp, #32]
  40cb42:	0c01      	lsrs	r1, r0, #16
  40cb44:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  40cb48:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40cb4a:	f8c8 e104 	str.w	lr, [r8, #260]	; 0x104
  40cb4e:	0fa0      	lsrs	r0, r4, #30
  40cb50:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
  40cb54:	424c      	negs	r4, r1
  40cb56:	ea4f 452c 	mov.w	r5, ip, asr #16
  40cb5a:	42a9      	cmp	r1, r5
  40cb5c:	bfb8      	it	lt
  40cb5e:	4684      	movlt	ip, r0
  40cb60:	42a5      	cmp	r5, r4
  40cb62:	bfb8      	it	lt
  40cb64:	f1c0 0c00 	rsblt	ip, r0, #0
  40cb68:	f8d8 006c 	ldr.w	r0, [r8, #108]	; 0x6c
  40cb6c:	f8c8 c108 	str.w	ip, [r8, #264]	; 0x108
  40cb70:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40cb74:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40cb78:	fb81 1202 	smull	r1, r2, r1, r2
  40cb7c:	460c      	mov	r4, r1
  40cb7e:	4615      	mov	r5, r2
  40cb80:	e9cd 4508 	strd	r4, r5, [sp, #32]
  40cb84:	0c0a      	lsrs	r2, r1, #16
  40cb86:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cb88:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  40cb8c:	0fa4      	lsrs	r4, r4, #30
  40cb8e:	ea44 0181 	orr.w	r1, r4, r1, lsl #2
  40cb92:	4250      	negs	r0, r2
  40cb94:	141c      	asrs	r4, r3, #16
  40cb96:	42a2      	cmp	r2, r4
  40cb98:	bfb8      	it	lt
  40cb9a:	460b      	movlt	r3, r1
  40cb9c:	4284      	cmp	r4, r0
  40cb9e:	bfb8      	it	lt
  40cba0:	424b      	neglt	r3, r1
  40cba2:	9214      	str	r2, [sp, #80]	; 0x50
  40cba4:	9113      	str	r1, [sp, #76]	; 0x4c
  40cba6:	9415      	str	r4, [sp, #84]	; 0x54
  40cba8:	f8c8 310c 	str.w	r3, [r8, #268]	; 0x10c
  40cbac:	e722      	b.n	40c9f4 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40cbae:	f8d8 115c 	ldr.w	r1, [r8, #348]	; 0x15c
  40cbb2:	f8d8 3160 	ldr.w	r3, [r8, #352]	; 0x160
  40cbb6:	f8c8 1170 	str.w	r1, [r8, #368]	; 0x170
  40cbba:	f8c8 3174 	str.w	r3, [r8, #372]	; 0x174
  40cbbe:	f8da 3008 	ldr.w	r3, [sl, #8]
  40cbc2:	4da6      	ldr	r5, [pc, #664]	; (40ce5c <SphericalFxp_UpdateMag.part.0+0x90c>)
  40cbc4:	441a      	add	r2, r3
  40cbc6:	2102      	movs	r1, #2
  40cbc8:	f8c8 2138 	str.w	r2, [r8, #312]	; 0x138
  40cbcc:	fb05 f303 	mul.w	r3, r5, r3
  40cbd0:	9100      	str	r1, [sp, #0]
  40cbd2:	4620      	mov	r0, r4
  40cbd4:	f508 72bc 	add.w	r2, r8, #376	; 0x178
  40cbd8:	f508 71b8 	add.w	r1, r8, #368	; 0x170
  40cbdc:	f000 fffa 	bl	40dbd4 <fxpRecursiveVariance>
  40cbe0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
  40cbe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40cbe8:	2b70      	cmp	r3, #112	; 0x70
  40cbea:	f000 80c9 	beq.w	40cd80 <SphericalFxp_UpdateMag.part.0+0x830>
  40cbee:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
  40cbf2:	f8da 3008 	ldr.w	r3, [sl, #8]
  40cbf6:	f8d8 216c 	ldr.w	r2, [r8, #364]	; 0x16c
  40cbfa:	fb03 f301 	mul.w	r3, r3, r1
  40cbfe:	21c8      	movs	r1, #200	; 0xc8
  40cc00:	fb01 2303 	mla	r3, r1, r3, r2
  40cc04:	f8d8 2178 	ldr.w	r2, [r8, #376]	; 0x178
  40cc08:	f8c8 316c 	str.w	r3, [r8, #364]	; 0x16c
  40cc0c:	429a      	cmp	r2, r3
  40cc0e:	f6bf adfd 	bge.w	40c80c <SphericalFxp_UpdateMag.part.0+0x2bc>
  40cc12:	f8d8 4170 	ldr.w	r4, [r8, #368]	; 0x170
  40cc16:	f8d8 3174 	ldr.w	r3, [r8, #372]	; 0x174
  40cc1a:	f8c8 216c 	str.w	r2, [r8, #364]	; 0x16c
  40cc1e:	f8c8 4164 	str.w	r4, [r8, #356]	; 0x164
  40cc22:	f8c8 3168 	str.w	r3, [r8, #360]	; 0x168
  40cc26:	e5f5      	b.n	40c814 <SphericalFxp_UpdateMag.part.0+0x2c4>
  40cc28:	628d      	str	r5, [r1, #40]	; 0x28
  40cc2a:	9b06      	ldr	r3, [sp, #24]
  40cc2c:	681a      	ldr	r2, [r3, #0]
  40cc2e:	e55e      	b.n	40c6ee <SphericalFxp_UpdateMag.part.0+0x19e>
  40cc30:	9907      	ldr	r1, [sp, #28]
  40cc32:	f8c8 1188 	str.w	r1, [r8, #392]	; 0x188
  40cc36:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
  40cc3a:	9908      	ldr	r1, [sp, #32]
  40cc3c:	f8c8 1190 	str.w	r1, [r8, #400]	; 0x190
  40cc40:	2200      	movs	r2, #0
  40cc42:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40cc44:	f8c8 e184 	str.w	lr, [r8, #388]	; 0x184
  40cc48:	f8c8 c18c 	str.w	ip, [r8, #396]	; 0x18c
  40cc4c:	f8c8 1194 	str.w	r1, [r8, #404]	; 0x194
  40cc50:	f8c8 7198 	str.w	r7, [r8, #408]	; 0x198
  40cc54:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
  40cc58:	2b00      	cmp	r3, #0
  40cc5a:	d171      	bne.n	40cd40 <SphericalFxp_UpdateMag.part.0+0x7f0>
  40cc5c:	f8da 1034 	ldr.w	r1, [sl, #52]	; 0x34
  40cc60:	2200      	movs	r2, #0
  40cc62:	4299      	cmp	r1, r3
  40cc64:	f8c8 21cc 	str.w	r2, [r8, #460]	; 0x1cc
  40cc68:	f340 8093 	ble.w	40cd92 <SphericalFxp_UpdateMag.part.0+0x842>
  40cc6c:	f8da 1008 	ldr.w	r1, [sl, #8]
  40cc70:	440b      	add	r3, r1
  40cc72:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
  40cc76:	2a00      	cmp	r2, #0
  40cc78:	f47f ae54 	bne.w	40c924 <SphericalFxp_UpdateMag.part.0+0x3d4>
  40cc7c:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
  40cc80:	2b00      	cmp	r3, #0
  40cc82:	f77f ae61 	ble.w	40c948 <SphericalFxp_UpdateMag.part.0+0x3f8>
  40cc86:	f8d8 2120 	ldr.w	r2, [r8, #288]	; 0x120
  40cc8a:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
  40cc8e:	9300      	str	r3, [sp, #0]
  40cc90:	2001      	movs	r0, #1
  40cc92:	2103      	movs	r1, #3
  40cc94:	9003      	str	r0, [sp, #12]
  40cc96:	9102      	str	r1, [sp, #8]
  40cc98:	9201      	str	r2, [sp, #4]
  40cc9a:	f508 7394 	add.w	r3, r8, #296	; 0x128
  40cc9e:	f508 7292 	add.w	r2, r8, #292	; 0x124
  40cca2:	f508 7196 	add.w	r1, r8, #300	; 0x12c
  40cca6:	9804      	ldr	r0, [sp, #16]
  40cca8:	f000 fef2 	bl	40da90 <fxpAdaptiveFilter>
  40ccac:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
  40ccb0:	f8da 1008 	ldr.w	r1, [sl, #8]
  40ccb4:	f8d8 21d4 	ldr.w	r2, [r8, #468]	; 0x1d4
  40ccb8:	440b      	add	r3, r1
  40ccba:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
  40ccbe:	2a00      	cmp	r2, #0
  40ccc0:	f43f ae58 	beq.w	40c974 <SphericalFxp_UpdateMag.part.0+0x424>
  40ccc4:	f8d8 2074 	ldr.w	r2, [r8, #116]	; 0x74
  40ccc8:	2a00      	cmp	r2, #0
  40ccca:	f77f ad12 	ble.w	40c6f2 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40ccce:	2b00      	cmp	r3, #0
  40ccd0:	f73f ae63 	bgt.w	40c99a <SphericalFxp_UpdateMag.part.0+0x44a>
  40ccd4:	e50d      	b.n	40c6f2 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40ccd6:	9b06      	ldr	r3, [sp, #24]
  40ccd8:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ccda:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40ccde:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  40cce2:	4648      	mov	r0, r9
  40cce4:	f7fd fcd2 	bl	40a68c <invn_math_quat_mult_fxp>
  40cce8:	f8d8 316c 	ldr.w	r3, [r8, #364]	; 0x16c
  40ccec:	f8d8 2128 	ldr.w	r2, [r8, #296]	; 0x128
  40ccf0:	f8d8 1070 	ldr.w	r1, [r8, #112]	; 0x70
  40ccf4:	eb03 02a2 	add.w	r2, r3, r2, asr #2
  40ccf8:	064b      	lsls	r3, r1, #25
  40ccfa:	bf4c      	ite	mi
  40ccfc:	4b58      	ldrmi	r3, [pc, #352]	; (40ce60 <SphericalFxp_UpdateMag.part.0+0x910>)
  40ccfe:	4b59      	ldrpl	r3, [pc, #356]	; (40ce64 <SphericalFxp_UpdateMag.part.0+0x914>)
  40cd00:	4413      	add	r3, r2
  40cd02:	4a59      	ldr	r2, [pc, #356]	; (40ce68 <SphericalFxp_UpdateMag.part.0+0x918>)
  40cd04:	4293      	cmp	r3, r2
  40cd06:	bf28      	it	cs
  40cd08:	4613      	movcs	r3, r2
  40cd0a:	9a06      	ldr	r2, [sp, #24]
  40cd0c:	64d3      	str	r3, [r2, #76]	; 0x4c
  40cd0e:	e4f0      	b.n	40c6f2 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40cd10:	f012 0240 	ands.w	r2, r2, #64	; 0x40
  40cd14:	f47f ad1a 	bne.w	40c74c <SphericalFxp_UpdateMag.part.0+0x1fc>
  40cd18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40cd1c:	f8c8 2138 	str.w	r2, [r8, #312]	; 0x138
  40cd20:	f8c8 3178 	str.w	r3, [r8, #376]	; 0x178
  40cd24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40cd28:	4b50      	ldr	r3, [pc, #320]	; (40ce6c <SphericalFxp_UpdateMag.part.0+0x91c>)
  40cd2a:	f8c8 216c 	str.w	r2, [r8, #364]	; 0x16c
  40cd2e:	f8c8 3128 	str.w	r3, [r8, #296]	; 0x128
  40cd32:	e50b      	b.n	40c74c <SphericalFxp_UpdateMag.part.0+0x1fc>
  40cd34:	4a4e      	ldr	r2, [pc, #312]	; (40ce70 <SphericalFxp_UpdateMag.part.0+0x920>)
  40cd36:	4293      	cmp	r3, r2
  40cd38:	dc0d      	bgt.n	40cd56 <SphericalFxp_UpdateMag.part.0+0x806>
  40cd3a:	4608      	mov	r0, r1
  40cd3c:	494d      	ldr	r1, [pc, #308]	; (40ce74 <SphericalFxp_UpdateMag.part.0+0x924>)
  40cd3e:	e4d3      	b.n	40c6e8 <SphericalFxp_UpdateMag.part.0+0x198>
  40cd40:	f508 7296 	add.w	r2, r8, #300	; 0x12c
  40cd44:	f508 71e0 	add.w	r1, r8, #448	; 0x1c0
  40cd48:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
  40cd4c:	f7fd fd04 	bl	40a758 <invn_math_quat_rotate_BtoI_fxp>
  40cd50:	f8d8 3180 	ldr.w	r3, [r8, #384]	; 0x180
  40cd54:	e782      	b.n	40cc5c <SphericalFxp_UpdateMag.part.0+0x70c>
  40cd56:	680a      	ldr	r2, [r1, #0]
  40cd58:	e4c9      	b.n	40c6ee <SphericalFxp_UpdateMag.part.0+0x19e>
  40cd5a:	9806      	ldr	r0, [sp, #24]
  40cd5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40cd60:	6183      	str	r3, [r0, #24]
  40cd62:	61c3      	str	r3, [r0, #28]
  40cd64:	6243      	str	r3, [r0, #36]	; 0x24
  40cd66:	6202      	str	r2, [r0, #32]
  40cd68:	e43f      	b.n	40c5ea <SphericalFxp_UpdateMag.part.0+0x9a>
  40cd6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40cd6e:	f8c8 20dc 	str.w	r2, [r8, #220]	; 0xdc
  40cd72:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
  40cd76:	f8c8 20e8 	str.w	r2, [r8, #232]	; 0xe8
  40cd7a:	f8c8 30e4 	str.w	r3, [r8, #228]	; 0xe4
  40cd7e:	e60c      	b.n	40c99a <SphericalFxp_UpdateMag.part.0+0x44a>
  40cd80:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  40cd84:	f8da 1008 	ldr.w	r1, [sl, #8]
  40cd88:	f8d8 216c 	ldr.w	r2, [r8, #364]	; 0x16c
  40cd8c:	fb01 2303 	mla	r3, r1, r3, r2
  40cd90:	e738      	b.n	40cc04 <SphericalFxp_UpdateMag.part.0+0x6b4>
  40cd92:	9c06      	ldr	r4, [sp, #24]
  40cd94:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40cd96:	2301      	movs	r3, #1
  40cd98:	f8c8 31cc 	str.w	r3, [r8, #460]	; 0x1cc
  40cd9c:	f104 0018 	add.w	r0, r4, #24
  40cda0:	4631      	mov	r1, r6
  40cda2:	f508 77d2 	add.w	r7, r8, #420	; 0x1a4
  40cda6:	f7fd fccb 	bl	40a740 <invn_math_quat_invert_fxp>
  40cdaa:	f508 7596 	add.w	r5, r8, #300	; 0x12c
  40cdae:	f104 013c 	add.w	r1, r4, #60	; 0x3c
  40cdb2:	4630      	mov	r0, r6
  40cdb4:	463a      	mov	r2, r7
  40cdb6:	f7fd fc69 	bl	40a68c <invn_math_quat_mult_fxp>
  40cdba:	f508 74da 	add.w	r4, r8, #436	; 0x1b4
  40cdbe:	4629      	mov	r1, r5
  40cdc0:	f508 72e0 	add.w	r2, r8, #448	; 0x1c0
  40cdc4:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
  40cdc8:	f7fd fd3a 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40cdcc:	4638      	mov	r0, r7
  40cdce:	4649      	mov	r1, r9
  40cdd0:	4622      	mov	r2, r4
  40cdd2:	f7fd fd35 	bl	40a840 <invn_math_quat_rotate_ItoB_fxp>
  40cdd6:	462a      	mov	r2, r5
  40cdd8:	4621      	mov	r1, r4
  40cdda:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cddc:	f7fd fcbc 	bl	40a758 <invn_math_quat_rotate_BtoI_fxp>
  40cde0:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
  40cde4:	2a00      	cmp	r2, #0
  40cde6:	f43f af49 	beq.w	40cc7c <SphericalFxp_UpdateMag.part.0+0x72c>
  40cdea:	e59b      	b.n	40c924 <SphericalFxp_UpdateMag.part.0+0x3d4>
  40cdec:	f8d8 2014 	ldr.w	r2, [r8, #20]
  40cdf0:	2a00      	cmp	r2, #0
  40cdf2:	dd17      	ble.n	40ce24 <SphericalFxp_UpdateMag.part.0+0x8d4>
  40cdf4:	9806      	ldr	r0, [sp, #24]
  40cdf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40cdfa:	6183      	str	r3, [r0, #24]
  40cdfc:	61c3      	str	r3, [r0, #28]
  40cdfe:	6203      	str	r3, [r0, #32]
  40ce00:	6242      	str	r2, [r0, #36]	; 0x24
  40ce02:	f7ff bbf2 	b.w	40c5ea <SphericalFxp_UpdateMag.part.0+0x9a>
  40ce06:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
  40ce0a:	2b00      	cmp	r3, #0
  40ce0c:	dd15      	ble.n	40ce3a <SphericalFxp_UpdateMag.part.0+0x8ea>
  40ce0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40ce12:	f8c8 20dc 	str.w	r2, [r8, #220]	; 0xdc
  40ce16:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
  40ce1a:	f8c8 20e4 	str.w	r2, [r8, #228]	; 0xe4
  40ce1e:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
  40ce22:	e5ba      	b.n	40c99a <SphericalFxp_UpdateMag.part.0+0x44a>
  40ce24:	f6bf abe1 	bge.w	40c5ea <SphericalFxp_UpdateMag.part.0+0x9a>
  40ce28:	9806      	ldr	r0, [sp, #24]
  40ce2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40ce2e:	6183      	str	r3, [r0, #24]
  40ce30:	6203      	str	r3, [r0, #32]
  40ce32:	6243      	str	r3, [r0, #36]	; 0x24
  40ce34:	61c2      	str	r2, [r0, #28]
  40ce36:	f7ff bbd8 	b.w	40c5ea <SphericalFxp_UpdateMag.part.0+0x9a>
  40ce3a:	f6bf adae 	bge.w	40c99a <SphericalFxp_UpdateMag.part.0+0x44a>
  40ce3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40ce42:	f8c8 20dc 	str.w	r2, [r8, #220]	; 0xdc
  40ce46:	f8c8 20e4 	str.w	r2, [r8, #228]	; 0xe4
  40ce4a:	f8c8 20e8 	str.w	r2, [r8, #232]	; 0xe8
  40ce4e:	f8c8 30e0 	str.w	r3, [r8, #224]	; 0xe0
  40ce52:	e5a2      	b.n	40c99a <SphericalFxp_UpdateMag.part.0+0x44a>
  40ce54:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
  40ce58:	e708      	b.n	40cc6c <SphericalFxp_UpdateMag.part.0+0x71c>
  40ce5a:	bf00      	nop
  40ce5c:	00041893 	.word	0x00041893
  40ce60:	006b3ba8 	.word	0x006b3ba8
  40ce64:	06487ed6 	.word	0x06487ed6
  40ce68:	1921fb54 	.word	0x1921fb54
  40ce6c:	0147adf0 	.word	0x0147adf0
  40ce70:	0c90fda9 	.word	0x0c90fda9
  40ce74:	0c90fdaa 	.word	0x0c90fdaa

0040ce78 <SphericalFxp_SetProductId>:
  40ce78:	7101      	strb	r1, [r0, #4]
  40ce7a:	4770      	bx	lr

0040ce7c <SphericalFxp_SetCustomParamAcc>:
  40ce7c:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
  40ce80:	4c12      	ldr	r4, [pc, #72]	; (40cecc <SphericalFxp_SetCustomParamAcc+0x50>)
  40ce82:	9e05      	ldr	r6, [sp, #20]
  40ce84:	9d06      	ldr	r5, [sp, #24]
  40ce86:	6101      	str	r1, [r0, #16]
  40ce88:	fb81 8904 	smull	r8, r9, r1, r4
  40ce8c:	ea4f 7498 	mov.w	r4, r8, lsr #30
  40ce90:	ea44 0489 	orr.w	r4, r4, r9, lsl #2
  40ce94:	2c00      	cmp	r4, #0
  40ce96:	dd14      	ble.n	40cec2 <SphericalFxp_SetCustomParamAcc+0x46>
  40ce98:	490d      	ldr	r1, [pc, #52]	; (40ced0 <SphericalFxp_SetCustomParamAcc+0x54>)
  40ce9a:	6044      	str	r4, [r0, #4]
  40ce9c:	fb01 f104 	mul.w	r1, r1, r4
  40cea0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  40cea4:	bfa8      	it	ge
  40cea6:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  40ceaa:	fb04 f202 	mul.w	r2, r4, r2
  40ceae:	fb04 f403 	mul.w	r4, r4, r3
  40ceb2:	64c4      	str	r4, [r0, #76]	; 0x4c
  40ceb4:	6406      	str	r6, [r0, #64]	; 0x40
  40ceb6:	62c5      	str	r5, [r0, #44]	; 0x2c
  40ceb8:	6182      	str	r2, [r0, #24]
  40ceba:	6581      	str	r1, [r0, #88]	; 0x58
  40cebc:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
  40cec0:	4770      	bx	lr
  40cec2:	2401      	movs	r4, #1
  40cec4:	4902      	ldr	r1, [pc, #8]	; (40ced0 <SphericalFxp_SetCustomParamAcc+0x54>)
  40cec6:	6044      	str	r4, [r0, #4]
  40cec8:	e7ef      	b.n	40ceaa <SphericalFxp_SetCustomParamAcc+0x2e>
  40ceca:	bf00      	nop
  40cecc:	0010624e 	.word	0x0010624e
  40ced0:	00a3d70a 	.word	0x00a3d70a

0040ced4 <SphericalFxp_SetCustomParamMag>:
  40ced4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40ced8:	4c11      	ldr	r4, [pc, #68]	; (40cf20 <SphericalFxp_SetCustomParamMag+0x4c>)
  40ceda:	9f07      	ldr	r7, [sp, #28]
  40cedc:	9e08      	ldr	r6, [sp, #32]
  40cede:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40cee0:	6141      	str	r1, [r0, #20]
  40cee2:	fb81 8904 	smull	r8, r9, r1, r4
  40cee6:	ea4f 7e98 	mov.w	lr, r8, lsr #30
  40ceea:	ea4e 0489 	orr.w	r4, lr, r9, lsl #2
  40ceee:	2c00      	cmp	r4, #0
  40cef0:	bfd8      	it	le
  40cef2:	2401      	movle	r4, #1
  40cef4:	fb04 f303 	mul.w	r3, r4, r3
  40cef8:	6503      	str	r3, [r0, #80]	; 0x50
  40cefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cefc:	6303      	str	r3, [r0, #48]	; 0x30
  40cefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cf00:	6343      	str	r3, [r0, #52]	; 0x34
  40cf02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cf04:	990e      	ldr	r1, [sp, #56]	; 0x38
  40cf06:	6383      	str	r3, [r0, #56]	; 0x38
  40cf08:	fb04 f202 	mul.w	r2, r4, r2
  40cf0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cf0e:	6084      	str	r4, [r0, #8]
  40cf10:	61c2      	str	r2, [r0, #28]
  40cf12:	6207      	str	r7, [r0, #32]
  40cf14:	6246      	str	r6, [r0, #36]	; 0x24
  40cf16:	6285      	str	r5, [r0, #40]	; 0x28
  40cf18:	6543      	str	r3, [r0, #84]	; 0x54
  40cf1a:	63c1      	str	r1, [r0, #60]	; 0x3c
  40cf1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40cf20:	0010624e 	.word	0x0010624e

0040cf24 <SphericalFxp_SetCustomParamGyr>:
  40cf24:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cf26:	4c0d      	ldr	r4, [pc, #52]	; (40cf5c <SphericalFxp_SetCustomParamGyr+0x38>)
  40cf28:	4e0d      	ldr	r6, [pc, #52]	; (40cf60 <SphericalFxp_SetCustomParamGyr+0x3c>)
  40cf2a:	60c1      	str	r1, [r0, #12]
  40cf2c:	fb81 4504 	smull	r4, r5, r1, r4
  40cf30:	0fa3      	lsrs	r3, r4, #30
  40cf32:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  40cf36:	fb81 6706 	smull	r6, r7, r1, r6
  40cf3a:	ea4f 7e96 	mov.w	lr, r6, lsr #30
  40cf3e:	2b00      	cmp	r3, #0
  40cf40:	bfd8      	it	le
  40cf42:	2301      	movle	r3, #1
  40cf44:	ea4e 0e87 	orr.w	lr, lr, r7, lsl #2
  40cf48:	f249 2668 	movw	r6, #37480	; 0x9268
  40cf4c:	fb06 e601 	mla	r6, r6, r1, lr
  40cf50:	6003      	str	r3, [r0, #0]
  40cf52:	fb03 f302 	mul.w	r3, r3, r2
  40cf56:	6446      	str	r6, [r0, #68]	; 0x44
  40cf58:	6483      	str	r3, [r0, #72]	; 0x48
  40cf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40cf5c:	0010624e 	.word	0x0010624e
  40cf60:	2a423269 	.word	0x2a423269

0040cf64 <SphericalFxp_Init>:
  40cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cf66:	2307      	movs	r3, #7
  40cf68:	4604      	mov	r4, r0
  40cf6a:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
  40cf6e:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
  40cf72:	2100      	movs	r1, #0
  40cf74:	f002 fd62 	bl	40fa3c <memset>
  40cf78:	492c      	ldr	r1, [pc, #176]	; (40d02c <SphericalFxp_Init+0xc8>)
  40cf7a:	4e2d      	ldr	r6, [pc, #180]	; (40d030 <SphericalFxp_Init+0xcc>)
  40cf7c:	4b2d      	ldr	r3, [pc, #180]	; (40d034 <SphericalFxp_Init+0xd0>)
  40cf7e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  40cf82:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40cf86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40cf8a:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
  40cf8e:	f44f 706c 	mov.w	r0, #944	; 0x3b0
  40cf92:	4a29      	ldr	r2, [pc, #164]	; (40d038 <SphericalFxp_Init+0xd4>)
  40cf94:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
  40cf98:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  40cf9c:	2602      	movs	r6, #2
  40cf9e:	f44f 7361 	mov.w	r3, #900	; 0x384
  40cfa2:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
  40cfa6:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
  40cfaa:	f241 3188 	movw	r1, #5000	; 0x1388
  40cfae:	f242 7010 	movw	r0, #10000	; 0x2710
  40cfb2:	4d22      	ldr	r5, [pc, #136]	; (40d03c <SphericalFxp_Init+0xd8>)
  40cfb4:	4f22      	ldr	r7, [pc, #136]	; (40d040 <SphericalFxp_Init+0xdc>)
  40cfb6:	f8c4 6204 	str.w	r6, [r4, #516]	; 0x204
  40cfba:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  40cfbe:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  40cfc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40cfc6:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
  40cfca:	f8c4 01e8 	str.w	r0, [r4, #488]	; 0x1e8
  40cfce:	210a      	movs	r1, #10
  40cfd0:	20c8      	movs	r0, #200	; 0xc8
  40cfd2:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
  40cfd6:	f04f 32ff 	mov.w	r2, #4294967295
  40cfda:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
  40cfde:	f8c4 022c 	str.w	r0, [r4, #556]	; 0x22c
  40cfe2:	f8c4 7224 	str.w	r7, [r4, #548]	; 0x224
  40cfe6:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
  40cfea:	f8c4 61fc 	str.w	r6, [r4, #508]	; 0x1fc
  40cfee:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  40cff2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
  40cff6:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  40cffa:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
  40cffe:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
  40d002:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
  40d006:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
  40d00a:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
  40d00e:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
  40d012:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
  40d016:	f8c4 2230 	str.w	r2, [r4, #560]	; 0x230
  40d01a:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
  40d01e:	f504 700e 	add.w	r0, r4, #568	; 0x238
  40d022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  40d026:	f000 b9cf 	b.w	40d3c8 <InterfaceOrientation_Reset>
  40d02a:	bf00      	nop
  40d02c:	06666666 	.word	0x06666666
  40d030:	0147adf0 	.word	0x0147adf0
  40d034:	06666664 	.word	0x06666664
  40d038:	1657184a 	.word	0x1657184a
  40d03c:	03fffffc 	.word	0x03fffffc
  40d040:	00a3d70c 	.word	0x00a3d70c

0040d044 <SphericalFxp_UpdateGyrData>:
  40d044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d048:	e891 00a0 	ldmia.w	r1, {r5, r7}
  40d04c:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  40d050:	688e      	ldr	r6, [r1, #8]
  40d052:	b09d      	sub	sp, #116	; 0x74
  40d054:	4604      	mov	r4, r0
  40d056:	fb83 8905 	smull	r8, r9, r3, r5
  40d05a:	fb83 0107 	smull	r0, r1, r3, r7
  40d05e:	fb83 ab06 	smull	sl, fp, r3, r6
  40d062:	9213      	str	r2, [sp, #76]	; 0x4c
  40d064:	950d      	str	r5, [sp, #52]	; 0x34
  40d066:	ea4f 7e90 	mov.w	lr, r0, lsr #30
  40d06a:	ea4f 7c98 	mov.w	ip, r8, lsr #30
  40d06e:	ea4f 729a 	mov.w	r2, sl, lsr #30
  40d072:	f504 7510 	add.w	r5, r4, #576	; 0x240
  40d076:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
  40d07a:	ea4c 0c89 	orr.w	ip, ip, r9, lsl #2
  40d07e:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
  40d082:	4629      	mov	r1, r5
  40d084:	a815      	add	r0, sp, #84	; 0x54
  40d086:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  40d08a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
  40d08e:	970e      	str	r7, [sp, #56]	; 0x38
  40d090:	960f      	str	r6, [sp, #60]	; 0x3c
  40d092:	9217      	str	r2, [sp, #92]	; 0x5c
  40d094:	f7fd fece 	bl	40ae34 <invn_integrate_gyro_fast_trigo_fxp>
  40d098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d09a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40d09c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d09e:	6663      	str	r3, [r4, #100]	; 0x64
  40d0a0:	f104 0638 	add.w	r6, r4, #56	; 0x38
  40d0a4:	2303      	movs	r3, #3
  40d0a6:	66a1      	str	r1, [r4, #104]	; 0x68
  40d0a8:	66e2      	str	r2, [r4, #108]	; 0x6c
  40d0aa:	4631      	mov	r1, r6
  40d0ac:	461a      	mov	r2, r3
  40d0ae:	2703      	movs	r7, #3
  40d0b0:	a815      	add	r0, sp, #84	; 0x54
  40d0b2:	f000 fd65 	bl	40db80 <fxpScaleAndSaturate>
  40d0b6:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
  40d0ba:	9700      	str	r7, [sp, #0]
  40d0bc:	4630      	mov	r0, r6
  40d0be:	f104 0250 	add.w	r2, r4, #80	; 0x50
  40d0c2:	f104 0144 	add.w	r1, r4, #68	; 0x44
  40d0c6:	f000 fd85 	bl	40dbd4 <fxpRecursiveVariance>
  40d0ca:	9816      	ldr	r0, [sp, #88]	; 0x58
  40d0cc:	9f15      	ldr	r7, [sp, #84]	; 0x54
  40d0ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40d0d0:	fb80 2300 	smull	r2, r3, r0, r0
  40d0d4:	fbc7 2307 	smlal	r2, r3, r7, r7
  40d0d8:	fbc1 2301 	smlal	r2, r3, r1, r1
  40d0dc:	0f96      	lsrs	r6, r2, #30
  40d0de:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
  40d0e2:	6566      	str	r6, [r4, #84]	; 0x54
  40d0e4:	6f26      	ldr	r6, [r4, #112]	; 0x70
  40d0e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40d0e8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
  40d0ec:	4016      	ands	r6, r2
  40d0ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40d0f0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
  40d0f4:	bfc8      	it	gt
  40d0f6:	f046 0601 	orrgt.w	r6, r6, #1
  40d0fa:	2a03      	cmp	r2, #3
  40d0fc:	6726      	str	r6, [r4, #112]	; 0x70
  40d0fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d100:	d060      	beq.n	40d1c4 <SphericalFxp_UpdateGyrData+0x180>
  40d102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d104:	2b00      	cmp	r3, #0
  40d106:	bfb8      	it	lt
  40d108:	425b      	neglt	r3, r3
  40d10a:	469c      	mov	ip, r3
  40d10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d10e:	2b00      	cmp	r3, #0
  40d110:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
  40d114:	bfb8      	it	lt
  40d116:	425b      	neglt	r3, r3
  40d118:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
  40d11c:	4699      	mov	r9, r3
  40d11e:	f8df e100 	ldr.w	lr, [pc, #256]	; 40d220 <SphericalFxp_UpdateGyrData+0x1dc>
  40d122:	f8d4 8230 	ldr.w	r8, [r4, #560]	; 0x230
  40d126:	45f2      	cmp	sl, lr
  40d128:	bfcc      	ite	gt
  40d12a:	2304      	movgt	r3, #4
  40d12c:	2300      	movle	r3, #0
  40d12e:	4333      	orrs	r3, r6
  40d130:	45f4      	cmp	ip, lr
  40d132:	bfcc      	ite	gt
  40d134:	2604      	movgt	r6, #4
  40d136:	2600      	movle	r6, #0
  40d138:	4333      	orrs	r3, r6
  40d13a:	45f1      	cmp	r9, lr
  40d13c:	bfcc      	ite	gt
  40d13e:	f04f 0e04 	movgt.w	lr, #4
  40d142:	f04f 0e00 	movle.w	lr, #0
  40d146:	ea43 030e 	orr.w	r3, r3, lr
  40d14a:	45d0      	cmp	r8, sl
  40d14c:	6723      	str	r3, [r4, #112]	; 0x70
  40d14e:	db01      	blt.n	40d154 <SphericalFxp_UpdateGyrData+0x110>
  40d150:	45e0      	cmp	r8, ip
  40d152:	da34      	bge.n	40d1be <SphericalFxp_UpdateGyrData+0x17a>
  40d154:	f043 0308 	orr.w	r3, r3, #8
  40d158:	6723      	str	r3, [r4, #112]	; 0x70
  40d15a:	075e      	lsls	r6, r3, #29
  40d15c:	d504      	bpl.n	40d168 <SphericalFxp_UpdateGyrData+0x124>
  40d15e:	4b2e      	ldr	r3, [pc, #184]	; (40d218 <SphericalFxp_UpdateGyrData+0x1d4>)
  40d160:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  40d164:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
  40d168:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40d16a:	f8d4 61dc 	ldr.w	r6, [r4, #476]	; 0x1dc
  40d16e:	f8d4 2238 	ldr.w	r2, [r4, #568]	; 0x238
  40d172:	6621      	str	r1, [r4, #96]	; 0x60
  40d174:	4433      	add	r3, r6
  40d176:	0791      	lsls	r1, r2, #30
  40d178:	65a7      	str	r7, [r4, #88]	; 0x58
  40d17a:	65e0      	str	r0, [r4, #92]	; 0x5c
  40d17c:	6363      	str	r3, [r4, #52]	; 0x34
  40d17e:	d50b      	bpl.n	40d198 <SphericalFxp_UpdateGyrData+0x154>
  40d180:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40d182:	2b00      	cmp	r3, #0
  40d184:	dd18      	ble.n	40d1b8 <SphericalFxp_UpdateGyrData+0x174>
  40d186:	f504 7219 	add.w	r2, r4, #612	; 0x264
  40d18a:	4629      	mov	r1, r5
  40d18c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
  40d190:	f7fd fa7c 	bl	40a68c <invn_math_quat_mult_fxp>
  40d194:	f8d4 2238 	ldr.w	r2, [r4, #568]	; 0x238
  40d198:	0753      	lsls	r3, r2, #29
  40d19a:	d50d      	bpl.n	40d1b8 <SphericalFxp_UpdateGyrData+0x174>
  40d19c:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40d19e:	2b00      	cmp	r3, #0
  40d1a0:	dd0a      	ble.n	40d1b8 <SphericalFxp_UpdateGyrData+0x174>
  40d1a2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  40d1a6:	2b00      	cmp	r3, #0
  40d1a8:	dd06      	ble.n	40d1b8 <SphericalFxp_UpdateGyrData+0x174>
  40d1aa:	4629      	mov	r1, r5
  40d1ac:	f504 721d 	add.w	r2, r4, #628	; 0x274
  40d1b0:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
  40d1b4:	f7fd fa6a 	bl	40a68c <invn_math_quat_mult_fxp>
  40d1b8:	b01d      	add	sp, #116	; 0x74
  40d1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d1be:	45c1      	cmp	r9, r8
  40d1c0:	ddcb      	ble.n	40d15a <SphericalFxp_UpdateGyrData+0x116>
  40d1c2:	e7c7      	b.n	40d154 <SphericalFxp_UpdateGyrData+0x110>
  40d1c4:	4b15      	ldr	r3, [pc, #84]	; (40d21c <SphericalFxp_UpdateGyrData+0x1d8>)
  40d1c6:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
  40d1ca:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
  40d1ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40d1d0:	459a      	cmp	sl, r3
  40d1d2:	bfcc      	ite	gt
  40d1d4:	f06f 0e02 	mvngt.w	lr, #2
  40d1d8:	f04f 3eff 	movle.w	lr, #4294967295
  40d1dc:	2a00      	cmp	r2, #0
  40d1de:	bfb8      	it	lt
  40d1e0:	4252      	neglt	r2, r2
  40d1e2:	429a      	cmp	r2, r3
  40d1e4:	4694      	mov	ip, r2
  40d1e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d1e8:	f046 0612 	orr.w	r6, r6, #18
  40d1ec:	ea06 060e 	and.w	r6, r6, lr
  40d1f0:	bfcc      	ite	gt
  40d1f2:	f06f 0e02 	mvngt.w	lr, #2
  40d1f6:	f04f 3eff 	movle.w	lr, #4294967295
  40d1fa:	2a00      	cmp	r2, #0
  40d1fc:	bfb8      	it	lt
  40d1fe:	4252      	neglt	r2, r2
  40d200:	429a      	cmp	r2, r3
  40d202:	ea06 060e 	and.w	r6, r6, lr
  40d206:	bfcc      	ite	gt
  40d208:	f06f 0302 	mvngt.w	r3, #2
  40d20c:	f04f 33ff 	movle.w	r3, #4294967295
  40d210:	4691      	mov	r9, r2
  40d212:	401e      	ands	r6, r3
  40d214:	e783      	b.n	40d11e <SphericalFxp_UpdateGyrData+0xda>
  40d216:	bf00      	nop
  40d218:	3999999a 	.word	0x3999999a
  40d21c:	29999999 	.word	0x29999999
  40d220:	3f333333 	.word	0x3f333333

0040d224 <SphericalFxp_UpdateAccData>:
  40d224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40d228:	b097      	sub	sp, #92	; 0x5c
  40d22a:	680e      	ldr	r6, [r1, #0]
  40d22c:	684d      	ldr	r5, [r1, #4]
  40d22e:	688b      	ldr	r3, [r1, #8]
  40d230:	9214      	str	r2, [sp, #80]	; 0x50
  40d232:	2a03      	cmp	r2, #3
  40d234:	4604      	mov	r4, r0
  40d236:	960d      	str	r6, [sp, #52]	; 0x34
  40d238:	950e      	str	r5, [sp, #56]	; 0x38
  40d23a:	930f      	str	r3, [sp, #60]	; 0x3c
  40d23c:	f000 8081 	beq.w	40d342 <SphericalFxp_UpdateAccData+0x11e>
  40d240:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40d242:	b912      	cbnz	r2, 40d24a <SphericalFxp_UpdateAccData+0x26>
  40d244:	60e6      	str	r6, [r4, #12]
  40d246:	6125      	str	r5, [r4, #16]
  40d248:	6163      	str	r3, [r4, #20]
  40d24a:	2203      	movs	r2, #3
  40d24c:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
  40d250:	9200      	str	r2, [sp, #0]
  40d252:	f104 010c 	add.w	r1, r4, #12
  40d256:	f104 0224 	add.w	r2, r4, #36	; 0x24
  40d25a:	a80d      	add	r0, sp, #52	; 0x34
  40d25c:	f000 fcba 	bl	40dbd4 <fxpRecursiveVariance>
  40d260:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40d262:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
  40d266:	f8d4 2238 	ldr.w	r2, [r4, #568]	; 0x238
  40d26a:	440b      	add	r3, r1
  40d26c:	f012 0f06 	tst.w	r2, #6
  40d270:	62e3      	str	r3, [r4, #44]	; 0x2c
  40d272:	d102      	bne.n	40d27a <SphericalFxp_UpdateAccData+0x56>
  40d274:	b017      	add	sp, #92	; 0x5c
  40d276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d27a:	f504 7910 	add.w	r9, r4, #576	; 0x240
  40d27e:	f104 0578 	add.w	r5, r4, #120	; 0x78
  40d282:	a90d      	add	r1, sp, #52	; 0x34
  40d284:	462a      	mov	r2, r5
  40d286:	4648      	mov	r0, r9
  40d288:	f7fd fa66 	bl	40a758 <invn_math_quat_rotate_BtoI_fxp>
  40d28c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40d28e:	6d22      	ldr	r2, [r4, #80]	; 0x50
  40d290:	f013 0f10 	tst.w	r3, #16
  40d294:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
  40d298:	bf05      	ittet	eq
  40d29a:	1292      	asreq	r2, r2, #10
  40d29c:	f44f 61fa 	moveq.w	r1, #2000	; 0x7d0
  40d2a0:	eb03 23a2 	addne.w	r3, r3, r2, asr #10
  40d2a4:	fb01 2303 	mlaeq	r3, r1, r3, r2
  40d2a8:	f894 223c 	ldrb.w	r2, [r4, #572]	; 0x23c
  40d2ac:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  40d2b0:	2a01      	cmp	r2, #1
  40d2b2:	d04b      	beq.n	40d34c <SphericalFxp_UpdateAccData+0x128>
  40d2b4:	2203      	movs	r2, #3
  40d2b6:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
  40d2ba:	9200      	str	r2, [sp, #0]
  40d2bc:	a80d      	add	r0, sp, #52	; 0x34
  40d2be:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
  40d2c2:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
  40d2c6:	f000 fc85 	bl	40dbd4 <fxpRecursiveVariance>
  40d2ca:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
  40d2ce:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
  40d2d2:	4413      	add	r3, r2
  40d2d4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40d2d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  40d2da:	2a00      	cmp	r2, #0
  40d2dc:	dc40      	bgt.n	40d360 <SphericalFxp_UpdateAccData+0x13c>
  40d2de:	f104 0178 	add.w	r1, r4, #120	; 0x78
  40d2e2:	c90e      	ldmia	r1, {r1, r2, r3}
  40d2e4:	2b00      	cmp	r3, #0
  40d2e6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40d2ea:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
  40d2ee:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  40d2f2:	db47      	blt.n	40d384 <SphericalFxp_UpdateAccData+0x160>
  40d2f4:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
  40d2f8:	079b      	lsls	r3, r3, #30
  40d2fa:	d51a      	bpl.n	40d332 <SphericalFxp_UpdateAccData+0x10e>
  40d2fc:	f104 0894 	add.w	r8, r4, #148	; 0x94
  40d300:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
  40d304:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
  40d308:	f104 06b0 	add.w	r6, r4, #176	; 0xb0
  40d30c:	4633      	mov	r3, r6
  40d30e:	463a      	mov	r2, r7
  40d310:	4629      	mov	r1, r5
  40d312:	4640      	mov	r0, r8
  40d314:	f7fd fef0 	bl	40b0f8 <invn_quat_6x_correction_fxp>
  40d318:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
  40d31c:	3301      	adds	r3, #1
  40d31e:	2b04      	cmp	r3, #4
  40d320:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
  40d324:	ddf2      	ble.n	40d30c <SphericalFxp_UpdateAccData+0xe8>
  40d326:	4649      	mov	r1, r9
  40d328:	4628      	mov	r0, r5
  40d32a:	f504 7219 	add.w	r2, r4, #612	; 0x264
  40d32e:	f7fd f9ad 	bl	40a68c <invn_math_quat_mult_fxp>
  40d332:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40d334:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
  40d338:	4413      	add	r3, r2
  40d33a:	6763      	str	r3, [r4, #116]	; 0x74
  40d33c:	b017      	add	sp, #92	; 0x5c
  40d33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d342:	6f02      	ldr	r2, [r0, #112]	; 0x70
  40d344:	f042 0220 	orr.w	r2, r2, #32
  40d348:	6702      	str	r2, [r0, #112]	; 0x70
  40d34a:	e779      	b.n	40d240 <SphericalFxp_UpdateAccData+0x1c>
  40d34c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  40d34e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
  40d352:	eb03 1322 	add.w	r3, r3, r2, asr #4
  40d356:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40d358:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  40d35c:	2a00      	cmp	r2, #0
  40d35e:	ddbe      	ble.n	40d2de <SphericalFxp_UpdateAccData+0xba>
  40d360:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
  40d364:	9200      	str	r2, [sp, #0]
  40d366:	2601      	movs	r6, #1
  40d368:	2103      	movs	r1, #3
  40d36a:	9301      	str	r3, [sp, #4]
  40d36c:	9102      	str	r1, [sp, #8]
  40d36e:	4628      	mov	r0, r5
  40d370:	9603      	str	r6, [sp, #12]
  40d372:	f104 038c 	add.w	r3, r4, #140	; 0x8c
  40d376:	f104 0288 	add.w	r2, r4, #136	; 0x88
  40d37a:	f104 0194 	add.w	r1, r4, #148	; 0x94
  40d37e:	f000 fb87 	bl	40da90 <fxpAdaptiveFilter>
  40d382:	e7b7      	b.n	40d2f4 <SphericalFxp_UpdateAccData+0xd0>
  40d384:	2300      	movs	r3, #0
  40d386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40d38a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  40d38e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  40d392:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
  40d396:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
  40d39a:	e7ab      	b.n	40d2f4 <SphericalFxp_UpdateAccData+0xd0>

0040d39c <SphericalFxp_UpdateMagData>:
  40d39c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d39e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  40d3a0:	680f      	ldr	r7, [r1, #0]
  40d3a2:	684e      	ldr	r6, [r1, #4]
  40d3a4:	6889      	ldr	r1, [r1, #8]
  40d3a6:	b093      	sub	sp, #76	; 0x4c
  40d3a8:	9210      	str	r2, [sp, #64]	; 0x40
  40d3aa:	930f      	str	r3, [sp, #60]	; 0x3c
  40d3ac:	9709      	str	r7, [sp, #36]	; 0x24
  40d3ae:	960a      	str	r6, [sp, #40]	; 0x28
  40d3b0:	910b      	str	r1, [sp, #44]	; 0x2c
  40d3b2:	b135      	cbz	r5, 40d3c2 <SphericalFxp_UpdateMagData+0x26>
  40d3b4:	ab01      	add	r3, sp, #4
  40d3b6:	f500 720e 	add.w	r2, r0, #568	; 0x238
  40d3ba:	f500 71ee 	add.w	r1, r0, #476	; 0x1dc
  40d3be:	f7ff f8c7 	bl	40c550 <SphericalFxp_UpdateMag.part.0>
  40d3c2:	b013      	add	sp, #76	; 0x4c
  40d3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d3c6:	bf00      	nop

0040d3c8 <InterfaceOrientation_Reset>:
  40d3c8:	b510      	push	{r4, lr}
  40d3ca:	2250      	movs	r2, #80	; 0x50
  40d3cc:	4604      	mov	r4, r0
  40d3ce:	2100      	movs	r1, #0
  40d3d0:	f002 fb34 	bl	40fa3c <memset>
  40d3d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40d3d8:	4a05      	ldr	r2, [pc, #20]	; (40d3f0 <InterfaceOrientation_Reset+0x28>)
  40d3da:	60a3      	str	r3, [r4, #8]
  40d3dc:	2007      	movs	r0, #7
  40d3de:	2100      	movs	r1, #0
  40d3e0:	6020      	str	r0, [r4, #0]
  40d3e2:	7121      	strb	r1, [r4, #4]
  40d3e4:	62e3      	str	r3, [r4, #44]	; 0x2c
  40d3e6:	63e3      	str	r3, [r4, #60]	; 0x3c
  40d3e8:	61a3      	str	r3, [r4, #24]
  40d3ea:	62a2      	str	r2, [r4, #40]	; 0x28
  40d3ec:	64e2      	str	r2, [r4, #76]	; 0x4c
  40d3ee:	bd10      	pop	{r4, pc}
  40d3f0:	1921fb54 	.word	0x1921fb54

0040d3f4 <invn_math_sin_q30_fxp>:
  40d3f4:	4a11      	ldr	r2, [pc, #68]	; (40d43c <invn_math_sin_q30_fxp+0x48>)
  40d3f6:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d3fa:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d3fe:	4291      	cmp	r1, r2
  40d400:	dc01      	bgt.n	40d406 <invn_math_sin_q30_fxp+0x12>
  40d402:	0040      	lsls	r0, r0, #1
  40d404:	4770      	bx	lr
  40d406:	b510      	push	{r4, lr}
  40d408:	490d      	ldr	r1, [pc, #52]	; (40d440 <invn_math_sin_q30_fxp+0x4c>)
  40d40a:	f7fd faad 	bl	40a968 <invn_math_mult_q29_fxp>
  40d40e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d412:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d416:	f1c1 4180 	rsb	r1, r1, #1073741824	; 0x40000000
  40d41a:	f7fd faa5 	bl	40a968 <invn_math_mult_q29_fxp>
  40d41e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d422:	4604      	mov	r4, r0
  40d424:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d428:	4806      	ldr	r0, [pc, #24]	; (40d444 <invn_math_sin_q30_fxp+0x50>)
  40d42a:	f7fd fa9d 	bl	40a968 <invn_math_mult_q29_fxp>
  40d42e:	4906      	ldr	r1, [pc, #24]	; (40d448 <invn_math_sin_q30_fxp+0x54>)
  40d430:	4401      	add	r1, r0
  40d432:	4620      	mov	r0, r4
  40d434:	f7fd fa98 	bl	40a968 <invn_math_mult_q29_fxp>
  40d438:	0040      	lsls	r0, r0, #1
  40d43a:	bd10      	pop	{r4, pc}
  40d43c:	05fcb923 	.word	0x05fcb923
  40d440:	145f306e 	.word	0x145f306e
  40d444:	07333333 	.word	0x07333333
  40d448:	18cccccd 	.word	0x18cccccd

0040d44c <invn_math_cos_q30_fxp>:
  40d44c:	1e03      	subs	r3, r0, #0
  40d44e:	4814      	ldr	r0, [pc, #80]	; (40d4a0 <invn_math_cos_q30_fxp+0x54>)
  40d450:	bfb4      	ite	lt
  40d452:	18c0      	addlt	r0, r0, r3
  40d454:	1ac0      	subge	r0, r0, r3
  40d456:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
  40d45a:	4b12      	ldr	r3, [pc, #72]	; (40d4a4 <invn_math_cos_q30_fxp+0x58>)
  40d45c:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
  40d460:	429a      	cmp	r2, r3
  40d462:	dc01      	bgt.n	40d468 <invn_math_cos_q30_fxp+0x1c>
  40d464:	0040      	lsls	r0, r0, #1
  40d466:	4770      	bx	lr
  40d468:	b510      	push	{r4, lr}
  40d46a:	490f      	ldr	r1, [pc, #60]	; (40d4a8 <invn_math_cos_q30_fxp+0x5c>)
  40d46c:	f7fd fa7c 	bl	40a968 <invn_math_mult_q29_fxp>
  40d470:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d474:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d478:	f1c1 4180 	rsb	r1, r1, #1073741824	; 0x40000000
  40d47c:	f7fd fa74 	bl	40a968 <invn_math_mult_q29_fxp>
  40d480:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d484:	4604      	mov	r4, r0
  40d486:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d48a:	4808      	ldr	r0, [pc, #32]	; (40d4ac <invn_math_cos_q30_fxp+0x60>)
  40d48c:	f7fd fa6c 	bl	40a968 <invn_math_mult_q29_fxp>
  40d490:	4907      	ldr	r1, [pc, #28]	; (40d4b0 <invn_math_cos_q30_fxp+0x64>)
  40d492:	4401      	add	r1, r0
  40d494:	4620      	mov	r0, r4
  40d496:	f7fd fa67 	bl	40a968 <invn_math_mult_q29_fxp>
  40d49a:	0040      	lsls	r0, r0, #1
  40d49c:	bd10      	pop	{r4, pc}
  40d49e:	bf00      	nop
  40d4a0:	3243f6a9 	.word	0x3243f6a9
  40d4a4:	05fcb923 	.word	0x05fcb923
  40d4a8:	145f306e 	.word	0x145f306e
  40d4ac:	07333333 	.word	0x07333333
  40d4b0:	18cccccd 	.word	0x18cccccd

0040d4b4 <invn_cross_product_q30>:
  40d4b4:	684b      	ldr	r3, [r1, #4]
  40d4b6:	b4f0      	push	{r4, r5, r6, r7}
  40d4b8:	6845      	ldr	r5, [r0, #4]
  40d4ba:	688c      	ldr	r4, [r1, #8]
  40d4bc:	6886      	ldr	r6, [r0, #8]
  40d4be:	fb85 4504 	smull	r4, r5, r5, r4
  40d4c2:	fb86 6703 	smull	r6, r7, r6, r3
  40d4c6:	1ba4      	subs	r4, r4, r6
  40d4c8:	eb65 0507 	sbc.w	r5, r5, r7
  40d4cc:	0fa3      	lsrs	r3, r4, #30
  40d4ce:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  40d4d2:	6013      	str	r3, [r2, #0]
  40d4d4:	688b      	ldr	r3, [r1, #8]
  40d4d6:	6885      	ldr	r5, [r0, #8]
  40d4d8:	680c      	ldr	r4, [r1, #0]
  40d4da:	6806      	ldr	r6, [r0, #0]
  40d4dc:	fb85 4504 	smull	r4, r5, r5, r4
  40d4e0:	fb86 6703 	smull	r6, r7, r6, r3
  40d4e4:	1ba4      	subs	r4, r4, r6
  40d4e6:	eb65 0507 	sbc.w	r5, r5, r7
  40d4ea:	0fa3      	lsrs	r3, r4, #30
  40d4ec:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  40d4f0:	6053      	str	r3, [r2, #4]
  40d4f2:	e890 0018 	ldmia.w	r0, {r3, r4}
  40d4f6:	680d      	ldr	r5, [r1, #0]
  40d4f8:	6848      	ldr	r0, [r1, #4]
  40d4fa:	fb84 4505 	smull	r4, r5, r4, r5
  40d4fe:	fb83 0100 	smull	r0, r1, r3, r0
  40d502:	1b00      	subs	r0, r0, r4
  40d504:	eb61 0105 	sbc.w	r1, r1, r5
  40d508:	0f83      	lsrs	r3, r0, #30
  40d50a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  40d50e:	6093      	str	r3, [r2, #8]
  40d510:	bcf0      	pop	{r4, r5, r6, r7}
  40d512:	4770      	bx	lr

0040d514 <invn_normalize_vector_q30>:
  40d514:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d516:	4605      	mov	r5, r0
  40d518:	c805      	ldmia	r0, {r0, r2}
  40d51a:	460c      	mov	r4, r1
  40d51c:	fb82 2302 	smull	r2, r3, r2, r2
  40d520:	68a9      	ldr	r1, [r5, #8]
  40d522:	fbc0 2300 	smlal	r2, r3, r0, r0
  40d526:	fbc1 2301 	smlal	r2, r3, r1, r1
  40d52a:	b083      	sub	sp, #12
  40d52c:	0f90      	lsrs	r0, r2, #30
  40d52e:	a901      	add	r1, sp, #4
  40d530:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
  40d534:	f7fd faa6 	bl	40aa84 <invn_math_inv_sqrt_q30_fxp>
  40d538:	9b01      	ldr	r3, [sp, #4]
  40d53a:	682e      	ldr	r6, [r5, #0]
  40d53c:	f1c3 031e 	rsb	r3, r3, #30
  40d540:	fb80 6706 	smull	r6, r7, r0, r6
  40d544:	f1c3 0220 	rsb	r2, r3, #32
  40d548:	fa07 fc02 	lsl.w	ip, r7, r2
  40d54c:	f1b3 0e20 	subs.w	lr, r3, #32
  40d550:	fa26 f103 	lsr.w	r1, r6, r3
  40d554:	ea41 010c 	orr.w	r1, r1, ip
  40d558:	bf5c      	itt	pl
  40d55a:	fa47 fe0e 	asrpl.w	lr, r7, lr
  40d55e:	ea41 010e 	orrpl.w	r1, r1, lr
  40d562:	6021      	str	r1, [r4, #0]
  40d564:	686e      	ldr	r6, [r5, #4]
  40d566:	fb80 6706 	smull	r6, r7, r0, r6
  40d56a:	f1b3 0e20 	subs.w	lr, r3, #32
  40d56e:	fa26 f103 	lsr.w	r1, r6, r3
  40d572:	fa07 fc02 	lsl.w	ip, r7, r2
  40d576:	ea41 010c 	orr.w	r1, r1, ip
  40d57a:	bf5c      	itt	pl
  40d57c:	fa47 fe0e 	asrpl.w	lr, r7, lr
  40d580:	ea41 010e 	orrpl.w	r1, r1, lr
  40d584:	6061      	str	r1, [r4, #4]
  40d586:	68a9      	ldr	r1, [r5, #8]
  40d588:	fb80 0101 	smull	r0, r1, r0, r1
  40d58c:	fa20 f503 	lsr.w	r5, r0, r3
  40d590:	fa01 f202 	lsl.w	r2, r1, r2
  40d594:	3b20      	subs	r3, #32
  40d596:	ea45 0502 	orr.w	r5, r5, r2
  40d59a:	bf5c      	itt	pl
  40d59c:	fa41 f303 	asrpl.w	r3, r1, r3
  40d5a0:	431d      	orrpl	r5, r3
  40d5a2:	60a5      	str	r5, [r4, #8]
  40d5a4:	b003      	add	sp, #12
  40d5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040d5a8 <invn_normalize_quaternion_q30>:
  40d5a8:	6842      	ldr	r2, [r0, #4]
  40d5aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d5ac:	6806      	ldr	r6, [r0, #0]
  40d5ae:	6885      	ldr	r5, [r0, #8]
  40d5b0:	fb82 2302 	smull	r2, r3, r2, r2
  40d5b4:	4604      	mov	r4, r0
  40d5b6:	fbc6 2306 	smlal	r2, r3, r6, r6
  40d5ba:	68c0      	ldr	r0, [r0, #12]
  40d5bc:	fbc5 2305 	smlal	r2, r3, r5, r5
  40d5c0:	fbc0 2300 	smlal	r2, r3, r0, r0
  40d5c4:	b083      	sub	sp, #12
  40d5c6:	0f90      	lsrs	r0, r2, #30
  40d5c8:	a901      	add	r1, sp, #4
  40d5ca:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
  40d5ce:	f7fd fa59 	bl	40aa84 <invn_math_inv_sqrt_q30_fxp>
  40d5d2:	9b01      	ldr	r3, [sp, #4]
  40d5d4:	6826      	ldr	r6, [r4, #0]
  40d5d6:	f1c3 031e 	rsb	r3, r3, #30
  40d5da:	fb80 6706 	smull	r6, r7, r0, r6
  40d5de:	f1c3 0220 	rsb	r2, r3, #32
  40d5e2:	fa07 fe02 	lsl.w	lr, r7, r2
  40d5e6:	f1b3 0520 	subs.w	r5, r3, #32
  40d5ea:	fa26 f103 	lsr.w	r1, r6, r3
  40d5ee:	6866      	ldr	r6, [r4, #4]
  40d5f0:	ea41 010e 	orr.w	r1, r1, lr
  40d5f4:	bf5c      	itt	pl
  40d5f6:	fa47 f505 	asrpl.w	r5, r7, r5
  40d5fa:	4329      	orrpl	r1, r5
  40d5fc:	fb80 6706 	smull	r6, r7, r0, r6
  40d600:	fa07 fe02 	lsl.w	lr, r7, r2
  40d604:	f1b3 0520 	subs.w	r5, r3, #32
  40d608:	6021      	str	r1, [r4, #0]
  40d60a:	fa26 f103 	lsr.w	r1, r6, r3
  40d60e:	68a6      	ldr	r6, [r4, #8]
  40d610:	ea41 010e 	orr.w	r1, r1, lr
  40d614:	bf5c      	itt	pl
  40d616:	fa47 f505 	asrpl.w	r5, r7, r5
  40d61a:	4329      	orrpl	r1, r5
  40d61c:	fb80 6706 	smull	r6, r7, r0, r6
  40d620:	f1b3 0520 	subs.w	r5, r3, #32
  40d624:	fa07 fe02 	lsl.w	lr, r7, r2
  40d628:	6061      	str	r1, [r4, #4]
  40d62a:	fa26 f103 	lsr.w	r1, r6, r3
  40d62e:	ea41 010e 	orr.w	r1, r1, lr
  40d632:	bf5c      	itt	pl
  40d634:	fa47 f505 	asrpl.w	r5, r7, r5
  40d638:	4329      	orrpl	r1, r5
  40d63a:	68e5      	ldr	r5, [r4, #12]
  40d63c:	60a1      	str	r1, [r4, #8]
  40d63e:	fb80 0105 	smull	r0, r1, r0, r5
  40d642:	fa20 f503 	lsr.w	r5, r0, r3
  40d646:	fa01 f202 	lsl.w	r2, r1, r2
  40d64a:	3b20      	subs	r3, #32
  40d64c:	ea45 0502 	orr.w	r5, r5, r2
  40d650:	bf5c      	itt	pl
  40d652:	fa41 f303 	asrpl.w	r3, r1, r3
  40d656:	431d      	orrpl	r5, r3
  40d658:	60e5      	str	r5, [r4, #12]
  40d65a:	b003      	add	sp, #12
  40d65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d65e:	bf00      	nop

0040d660 <rls_core_Bierman4_fxp>:
  40d660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d664:	b08f      	sub	sp, #60	; 0x3c
  40d666:	469b      	mov	fp, r3
  40d668:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  40d66c:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40d66e:	9209      	str	r2, [sp, #36]	; 0x24
  40d670:	4688      	mov	r8, r1
  40d672:	4605      	mov	r5, r0
  40d674:	a90d      	add	r1, sp, #52	; 0x34
  40d676:	4650      	mov	r0, sl
  40d678:	f7fd fa74 	bl	40ab64 <invn_math_inverse_q30_fxp>
  40d67c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d67e:	f8db 7000 	ldr.w	r7, [fp]
  40d682:	f8db 4004 	ldr.w	r4, [fp, #4]
  40d686:	f8db 1008 	ldr.w	r1, [fp, #8]
  40d68a:	f8db 200c 	ldr.w	r2, [fp, #12]
  40d68e:	f1c3 031e 	rsb	r3, r3, #30
  40d692:	4432      	add	r2, r6
  40d694:	4437      	add	r7, r6
  40d696:	4434      	add	r4, r6
  40d698:	4431      	add	r1, r6
  40d69a:	fa40 f903 	asr.w	r9, r0, r3
  40d69e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d6a0:	f8cb 7000 	str.w	r7, [fp]
  40d6a4:	f8cb 4004 	str.w	r4, [fp, #4]
  40d6a8:	f8cb 200c 	str.w	r2, [fp, #12]
  40d6ac:	f8cb 1008 	str.w	r1, [fp, #8]
  40d6b0:	f8d8 1000 	ldr.w	r1, [r8]
  40d6b4:	6818      	ldr	r0, [r3, #0]
  40d6b6:	9104      	str	r1, [sp, #16]
  40d6b8:	f7fd f950 	bl	40a95c <invn_math_mult_q15_fxp>
  40d6bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d6be:	f8d8 1004 	ldr.w	r1, [r8, #4]
  40d6c2:	68df      	ldr	r7, [r3, #12]
  40d6c4:	691a      	ldr	r2, [r3, #16]
  40d6c6:	689e      	ldr	r6, [r3, #8]
  40d6c8:	695b      	ldr	r3, [r3, #20]
  40d6ca:	f8d8 c000 	ldr.w	ip, [r8]
  40d6ce:	461c      	mov	r4, r3
  40d6d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d6d2:	685b      	ldr	r3, [r3, #4]
  40d6d4:	9303      	str	r3, [sp, #12]
  40d6d6:	46a6      	mov	lr, r4
  40d6d8:	fb81 2302 	smull	r2, r3, r1, r2
  40d6dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
  40d6e0:	fbc7 230c 	smlal	r2, r3, r7, ip
  40d6e4:	fbc4 230e 	smlal	r2, r3, r4, lr
  40d6e8:	e9cd 2300 	strd	r2, r3, [sp]
  40d6ec:	9b03      	ldr	r3, [sp, #12]
  40d6ee:	fb81 6706 	smull	r6, r7, r1, r6
  40d6f2:	fbcc 6703 	smlal	r6, r7, ip, r3
  40d6f6:	9b00      	ldr	r3, [sp, #0]
  40d6f8:	0bf4      	lsrs	r4, r6, #15
  40d6fa:	0bda      	lsrs	r2, r3, #15
  40d6fc:	f8d8 6008 	ldr.w	r6, [r8, #8]
  40d700:	1843      	adds	r3, r0, r1
  40d702:	9307      	str	r3, [sp, #28]
  40d704:	ea44 4447 	orr.w	r4, r4, r7, lsl #17
  40d708:	9b01      	ldr	r3, [sp, #4]
  40d70a:	9904      	ldr	r1, [sp, #16]
  40d70c:	f8db 0000 	ldr.w	r0, [fp]
  40d710:	1934      	adds	r4, r6, r4
  40d712:	f8d8 600c 	ldr.w	r6, [r8, #12]
  40d716:	940b      	str	r4, [sp, #44]	; 0x2c
  40d718:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
  40d71c:	4416      	add	r6, r2
  40d71e:	f7fd f91d 	bl	40a95c <invn_math_mult_q15_fxp>
  40d722:	9907      	ldr	r1, [sp, #28]
  40d724:	9000      	str	r0, [sp, #0]
  40d726:	f8db 0004 	ldr.w	r0, [fp, #4]
  40d72a:	f7fd f917 	bl	40a95c <invn_math_mult_q15_fxp>
  40d72e:	4621      	mov	r1, r4
  40d730:	9005      	str	r0, [sp, #20]
  40d732:	f8db 0008 	ldr.w	r0, [fp, #8]
  40d736:	f7fd f911 	bl	40a95c <invn_math_mult_q15_fxp>
  40d73a:	4631      	mov	r1, r6
  40d73c:	9006      	str	r0, [sp, #24]
  40d73e:	f8db 000c 	ldr.w	r0, [fp, #12]
  40d742:	9608      	str	r6, [sp, #32]
  40d744:	f7fd f90a 	bl	40a95c <invn_math_mult_q15_fxp>
  40d748:	686a      	ldr	r2, [r5, #4]
  40d74a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40d74e:	6829      	ldr	r1, [r5, #0]
  40d750:	f8d8 6000 	ldr.w	r6, [r8]
  40d754:	68af      	ldr	r7, [r5, #8]
  40d756:	f8d8 4008 	ldr.w	r4, [r8, #8]
  40d75a:	9003      	str	r0, [sp, #12]
  40d75c:	fb82 2303 	smull	r2, r3, r2, r3
  40d760:	fbc6 2301 	smlal	r2, r3, r6, r1
  40d764:	fbc4 2307 	smlal	r2, r3, r4, r7
  40d768:	f8d8 000c 	ldr.w	r0, [r8, #12]
  40d76c:	68e9      	ldr	r1, [r5, #12]
  40d76e:	9e08      	ldr	r6, [sp, #32]
  40d770:	9508      	str	r5, [sp, #32]
  40d772:	461c      	mov	r4, r3
  40d774:	4613      	mov	r3, r2
  40d776:	fbc0 3401 	smlal	r3, r4, r0, r1
  40d77a:	0bda      	lsrs	r2, r3, #15
  40d77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d77e:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40d782:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  40d786:	1a9b      	subs	r3, r3, r2
  40d788:	2b00      	cmp	r3, #0
  40d78a:	f04f 0700 	mov.w	r7, #0
  40d78e:	9309      	str	r3, [sp, #36]	; 0x24
  40d790:	463d      	mov	r5, r7
  40d792:	bfb8      	it	lt
  40d794:	425b      	neglt	r3, r3
  40d796:	930a      	str	r3, [sp, #40]	; 0x28
  40d798:	b22a      	sxth	r2, r5
  40d79a:	b375      	cbz	r5, 40d7fa <rls_core_Bierman4_fxp+0x19a>
  40d79c:	2a01      	cmp	r2, #1
  40d79e:	d073      	beq.n	40d888 <rls_core_Bierman4_fxp+0x228>
  40d7a0:	2a02      	cmp	r2, #2
  40d7a2:	f000 80bc 	beq.w	40d91e <rls_core_Bierman4_fxp+0x2be>
  40d7a6:	9903      	ldr	r1, [sp, #12]
  40d7a8:	f8db 700c 	ldr.w	r7, [fp, #12]
  40d7ac:	4630      	mov	r0, r6
  40d7ae:	f7fd f8d5 	bl	40a95c <invn_math_mult_q15_fxp>
  40d7b2:	4649      	mov	r1, r9
  40d7b4:	eb0a 0400 	add.w	r4, sl, r0
  40d7b8:	4630      	mov	r0, r6
  40d7ba:	f7fd f8cf 	bl	40a95c <invn_math_mult_q15_fxp>
  40d7be:	a90d      	add	r1, sp, #52	; 0x34
  40d7c0:	4243      	negs	r3, r0
  40d7c2:	4620      	mov	r0, r4
  40d7c4:	9304      	str	r3, [sp, #16]
  40d7c6:	f7fd f9cd 	bl	40ab64 <invn_math_inverse_q30_fxp>
  40d7ca:	990d      	ldr	r1, [sp, #52]	; 0x34
  40d7cc:	f1c1 011e 	rsb	r1, r1, #30
  40d7d0:	fa40 f901 	asr.w	r9, r0, r1
  40d7d4:	4648      	mov	r0, r9
  40d7d6:	4639      	mov	r1, r7
  40d7d8:	f7fd f8c0 	bl	40a95c <invn_math_mult_q15_fxp>
  40d7dc:	4601      	mov	r1, r0
  40d7de:	4650      	mov	r0, sl
  40d7e0:	f7fd f8bc 	bl	40a95c <invn_math_mult_q15_fxp>
  40d7e4:	2d03      	cmp	r5, #3
  40d7e6:	f000 80ba 	beq.w	40d95e <rls_core_Bierman4_fxp+0x2fe>
  40d7ea:	b2aa      	uxth	r2, r5
  40d7ec:	2a03      	cmp	r2, #3
  40d7ee:	d026      	beq.n	40d83e <rls_core_Bierman4_fxp+0x1de>
  40d7f0:	3501      	adds	r5, #1
  40d7f2:	46a2      	mov	sl, r4
  40d7f4:	b22a      	sxth	r2, r5
  40d7f6:	2d00      	cmp	r5, #0
  40d7f8:	d1d0      	bne.n	40d79c <rls_core_Bierman4_fxp+0x13c>
  40d7fa:	9900      	ldr	r1, [sp, #0]
  40d7fc:	f8db 7000 	ldr.w	r7, [fp]
  40d800:	4640      	mov	r0, r8
  40d802:	f7fd f8ab 	bl	40a95c <invn_math_mult_q15_fxp>
  40d806:	4649      	mov	r1, r9
  40d808:	eb0a 0400 	add.w	r4, sl, r0
  40d80c:	4640      	mov	r0, r8
  40d80e:	f7fd f8a5 	bl	40a95c <invn_math_mult_q15_fxp>
  40d812:	a90d      	add	r1, sp, #52	; 0x34
  40d814:	4620      	mov	r0, r4
  40d816:	f7fd f9a5 	bl	40ab64 <invn_math_inverse_q30_fxp>
  40d81a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d81c:	f1c2 021e 	rsb	r2, r2, #30
  40d820:	fa40 f902 	asr.w	r9, r0, r2
  40d824:	4639      	mov	r1, r7
  40d826:	4648      	mov	r0, r9
  40d828:	f7fd f898 	bl	40a95c <invn_math_mult_q15_fxp>
  40d82c:	4601      	mov	r1, r0
  40d82e:	4650      	mov	r0, sl
  40d830:	f7fd f894 	bl	40a95c <invn_math_mult_q15_fxp>
  40d834:	b2aa      	uxth	r2, r5
  40d836:	2a03      	cmp	r2, #3
  40d838:	f8cb 0000 	str.w	r0, [fp]
  40d83c:	d1d8      	bne.n	40d7f0 <rls_core_Bierman4_fxp+0x190>
  40d83e:	9d08      	ldr	r5, [sp, #32]
  40d840:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d842:	4648      	mov	r0, r9
  40d844:	f7fd f88a 	bl	40a95c <invn_math_mult_q15_fxp>
  40d848:	9900      	ldr	r1, [sp, #0]
  40d84a:	4604      	mov	r4, r0
  40d84c:	f7fd f886 	bl	40a95c <invn_math_mult_q15_fxp>
  40d850:	682b      	ldr	r3, [r5, #0]
  40d852:	9905      	ldr	r1, [sp, #20]
  40d854:	4418      	add	r0, r3
  40d856:	6028      	str	r0, [r5, #0]
  40d858:	4620      	mov	r0, r4
  40d85a:	f7fd f87f 	bl	40a95c <invn_math_mult_q15_fxp>
  40d85e:	686b      	ldr	r3, [r5, #4]
  40d860:	9906      	ldr	r1, [sp, #24]
  40d862:	4418      	add	r0, r3
  40d864:	6068      	str	r0, [r5, #4]
  40d866:	4620      	mov	r0, r4
  40d868:	f7fd f878 	bl	40a95c <invn_math_mult_q15_fxp>
  40d86c:	68ab      	ldr	r3, [r5, #8]
  40d86e:	9903      	ldr	r1, [sp, #12]
  40d870:	4418      	add	r0, r3
  40d872:	60a8      	str	r0, [r5, #8]
  40d874:	4620      	mov	r0, r4
  40d876:	f7fd f871 	bl	40a95c <invn_math_mult_q15_fxp>
  40d87a:	68eb      	ldr	r3, [r5, #12]
  40d87c:	4418      	add	r0, r3
  40d87e:	60e8      	str	r0, [r5, #12]
  40d880:	980a      	ldr	r0, [sp, #40]	; 0x28
  40d882:	b00f      	add	sp, #60	; 0x3c
  40d884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d888:	9905      	ldr	r1, [sp, #20]
  40d88a:	9807      	ldr	r0, [sp, #28]
  40d88c:	f8db 7004 	ldr.w	r7, [fp, #4]
  40d890:	f7fd f864 	bl	40a95c <invn_math_mult_q15_fxp>
  40d894:	4649      	mov	r1, r9
  40d896:	eb0a 0400 	add.w	r4, sl, r0
  40d89a:	9807      	ldr	r0, [sp, #28]
  40d89c:	f7fd f85e 	bl	40a95c <invn_math_mult_q15_fxp>
  40d8a0:	a90d      	add	r1, sp, #52	; 0x34
  40d8a2:	4243      	negs	r3, r0
  40d8a4:	4620      	mov	r0, r4
  40d8a6:	9304      	str	r3, [sp, #16]
  40d8a8:	f7fd f95c 	bl	40ab64 <invn_math_inverse_q30_fxp>
  40d8ac:	990d      	ldr	r1, [sp, #52]	; 0x34
  40d8ae:	f1c1 011e 	rsb	r1, r1, #30
  40d8b2:	fa40 f901 	asr.w	r9, r0, r1
  40d8b6:	4648      	mov	r0, r9
  40d8b8:	4639      	mov	r1, r7
  40d8ba:	f7fd f84f 	bl	40a95c <invn_math_mult_q15_fxp>
  40d8be:	4601      	mov	r1, r0
  40d8c0:	4650      	mov	r0, sl
  40d8c2:	f7fd f84b 	bl	40a95c <invn_math_mult_q15_fxp>
  40d8c6:	2d01      	cmp	r5, #1
  40d8c8:	f000 8084 	beq.w	40d9d4 <rls_core_Bierman4_fxp+0x374>
  40d8cc:	2d02      	cmp	r5, #2
  40d8ce:	d189      	bne.n	40d7e4 <rls_core_Bierman4_fxp+0x184>
  40d8d0:	9f00      	ldr	r7, [sp, #0]
  40d8d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d8d4:	f8cb 0008 	str.w	r0, [fp, #8]
  40d8d8:	9904      	ldr	r1, [sp, #16]
  40d8da:	f8d3 a004 	ldr.w	sl, [r3, #4]
  40d8de:	4638      	mov	r0, r7
  40d8e0:	f7fd f83c 	bl	40a95c <invn_math_mult_q15_fxp>
  40d8e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d8e6:	4450      	add	r0, sl
  40d8e8:	6058      	str	r0, [r3, #4]
  40d8ea:	4651      	mov	r1, sl
  40d8ec:	9806      	ldr	r0, [sp, #24]
  40d8ee:	f7fd f835 	bl	40a95c <invn_math_mult_q15_fxp>
  40d8f2:	463b      	mov	r3, r7
  40d8f4:	4403      	add	r3, r0
  40d8f6:	f8dd a014 	ldr.w	sl, [sp, #20]
  40d8fa:	9300      	str	r3, [sp, #0]
  40d8fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d8fe:	9904      	ldr	r1, [sp, #16]
  40d900:	689f      	ldr	r7, [r3, #8]
  40d902:	4650      	mov	r0, sl
  40d904:	f7fd f82a 	bl	40a95c <invn_math_mult_q15_fxp>
  40d908:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d90a:	4438      	add	r0, r7
  40d90c:	6098      	str	r0, [r3, #8]
  40d90e:	4639      	mov	r1, r7
  40d910:	9806      	ldr	r0, [sp, #24]
  40d912:	f7fd f823 	bl	40a95c <invn_math_mult_q15_fxp>
  40d916:	4653      	mov	r3, sl
  40d918:	4403      	add	r3, r0
  40d91a:	9305      	str	r3, [sp, #20]
  40d91c:	e768      	b.n	40d7f0 <rls_core_Bierman4_fxp+0x190>
  40d91e:	9906      	ldr	r1, [sp, #24]
  40d920:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d922:	f8db 7008 	ldr.w	r7, [fp, #8]
  40d926:	f7fd f819 	bl	40a95c <invn_math_mult_q15_fxp>
  40d92a:	4649      	mov	r1, r9
  40d92c:	eb0a 0400 	add.w	r4, sl, r0
  40d930:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d932:	f7fd f813 	bl	40a95c <invn_math_mult_q15_fxp>
  40d936:	a90d      	add	r1, sp, #52	; 0x34
  40d938:	4243      	negs	r3, r0
  40d93a:	4620      	mov	r0, r4
  40d93c:	9304      	str	r3, [sp, #16]
  40d93e:	f7fd f911 	bl	40ab64 <invn_math_inverse_q30_fxp>
  40d942:	990d      	ldr	r1, [sp, #52]	; 0x34
  40d944:	f1c1 011e 	rsb	r1, r1, #30
  40d948:	fa40 f901 	asr.w	r9, r0, r1
  40d94c:	4648      	mov	r0, r9
  40d94e:	4639      	mov	r1, r7
  40d950:	f7fd f804 	bl	40a95c <invn_math_mult_q15_fxp>
  40d954:	4601      	mov	r1, r0
  40d956:	4650      	mov	r0, sl
  40d958:	f7fd f800 	bl	40a95c <invn_math_mult_q15_fxp>
  40d95c:	e7b6      	b.n	40d8cc <rls_core_Bierman4_fxp+0x26c>
  40d95e:	9e04      	ldr	r6, [sp, #16]
  40d960:	f8dd 8000 	ldr.w	r8, [sp]
  40d964:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d966:	f8cb 000c 	str.w	r0, [fp, #12]
  40d96a:	4631      	mov	r1, r6
  40d96c:	4640      	mov	r0, r8
  40d96e:	68dc      	ldr	r4, [r3, #12]
  40d970:	9d08      	ldr	r5, [sp, #32]
  40d972:	f7fc fff3 	bl	40a95c <invn_math_mult_q15_fxp>
  40d976:	9f03      	ldr	r7, [sp, #12]
  40d978:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d97a:	4420      	add	r0, r4
  40d97c:	60d8      	str	r0, [r3, #12]
  40d97e:	4621      	mov	r1, r4
  40d980:	4638      	mov	r0, r7
  40d982:	f7fc ffeb 	bl	40a95c <invn_math_mult_q15_fxp>
  40d986:	4643      	mov	r3, r8
  40d988:	4403      	add	r3, r0
  40d98a:	f8dd 8014 	ldr.w	r8, [sp, #20]
  40d98e:	9300      	str	r3, [sp, #0]
  40d990:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d992:	4631      	mov	r1, r6
  40d994:	4640      	mov	r0, r8
  40d996:	691c      	ldr	r4, [r3, #16]
  40d998:	f7fc ffe0 	bl	40a95c <invn_math_mult_q15_fxp>
  40d99c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d99e:	4420      	add	r0, r4
  40d9a0:	6118      	str	r0, [r3, #16]
  40d9a2:	4621      	mov	r1, r4
  40d9a4:	4638      	mov	r0, r7
  40d9a6:	f7fc ffd9 	bl	40a95c <invn_math_mult_q15_fxp>
  40d9aa:	4643      	mov	r3, r8
  40d9ac:	4631      	mov	r1, r6
  40d9ae:	4403      	add	r3, r0
  40d9b0:	9e06      	ldr	r6, [sp, #24]
  40d9b2:	9305      	str	r3, [sp, #20]
  40d9b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9b6:	4630      	mov	r0, r6
  40d9b8:	695c      	ldr	r4, [r3, #20]
  40d9ba:	f7fc ffcf 	bl	40a95c <invn_math_mult_q15_fxp>
  40d9be:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9c0:	4420      	add	r0, r4
  40d9c2:	6158      	str	r0, [r3, #20]
  40d9c4:	4621      	mov	r1, r4
  40d9c6:	4638      	mov	r0, r7
  40d9c8:	f7fc ffc8 	bl	40a95c <invn_math_mult_q15_fxp>
  40d9cc:	4633      	mov	r3, r6
  40d9ce:	4403      	add	r3, r0
  40d9d0:	9306      	str	r3, [sp, #24]
  40d9d2:	e735      	b.n	40d840 <rls_core_Bierman4_fxp+0x1e0>
  40d9d4:	f8dd a000 	ldr.w	sl, [sp]
  40d9d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9da:	f8cb 0004 	str.w	r0, [fp, #4]
  40d9de:	9904      	ldr	r1, [sp, #16]
  40d9e0:	681f      	ldr	r7, [r3, #0]
  40d9e2:	4650      	mov	r0, sl
  40d9e4:	f7fc ffba 	bl	40a95c <invn_math_mult_q15_fxp>
  40d9e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9ea:	4438      	add	r0, r7
  40d9ec:	6018      	str	r0, [r3, #0]
  40d9ee:	4639      	mov	r1, r7
  40d9f0:	9805      	ldr	r0, [sp, #20]
  40d9f2:	f7fc ffb3 	bl	40a95c <invn_math_mult_q15_fxp>
  40d9f6:	4653      	mov	r3, sl
  40d9f8:	4403      	add	r3, r0
  40d9fa:	9300      	str	r3, [sp, #0]
  40d9fc:	e6f5      	b.n	40d7ea <rls_core_Bierman4_fxp+0x18a>
  40d9fe:	bf00      	nop

0040da00 <fxpRecursiveVariance3_q30>:
  40da00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40da04:	460c      	mov	r4, r1
  40da06:	6806      	ldr	r6, [r0, #0]
  40da08:	6809      	ldr	r1, [r1, #0]
  40da0a:	1a76      	subs	r6, r6, r1
  40da0c:	4680      	mov	r8, r0
  40da0e:	4631      	mov	r1, r6
  40da10:	4618      	mov	r0, r3
  40da12:	4615      	mov	r5, r2
  40da14:	461f      	mov	r7, r3
  40da16:	f7fc ffad 	bl	40a974 <invn_math_mult_q30_fxp>
  40da1a:	6823      	ldr	r3, [r4, #0]
  40da1c:	4403      	add	r3, r0
  40da1e:	6023      	str	r3, [r4, #0]
  40da20:	4601      	mov	r1, r0
  40da22:	4630      	mov	r0, r6
  40da24:	682e      	ldr	r6, [r5, #0]
  40da26:	f7fc ffa5 	bl	40a974 <invn_math_mult_q30_fxp>
  40da2a:	f1c7 4980 	rsb	r9, r7, #1073741824	; 0x40000000
  40da2e:	1831      	adds	r1, r6, r0
  40da30:	4648      	mov	r0, r9
  40da32:	f7fc ff9f 	bl	40a974 <invn_math_mult_q30_fxp>
  40da36:	6028      	str	r0, [r5, #0]
  40da38:	6863      	ldr	r3, [r4, #4]
  40da3a:	f8d8 6004 	ldr.w	r6, [r8, #4]
  40da3e:	1af6      	subs	r6, r6, r3
  40da40:	4631      	mov	r1, r6
  40da42:	4638      	mov	r0, r7
  40da44:	f7fc ff96 	bl	40a974 <invn_math_mult_q30_fxp>
  40da48:	6863      	ldr	r3, [r4, #4]
  40da4a:	4403      	add	r3, r0
  40da4c:	6063      	str	r3, [r4, #4]
  40da4e:	4601      	mov	r1, r0
  40da50:	4630      	mov	r0, r6
  40da52:	686e      	ldr	r6, [r5, #4]
  40da54:	f7fc ff8e 	bl	40a974 <invn_math_mult_q30_fxp>
  40da58:	1831      	adds	r1, r6, r0
  40da5a:	4648      	mov	r0, r9
  40da5c:	f7fc ff8a 	bl	40a974 <invn_math_mult_q30_fxp>
  40da60:	6068      	str	r0, [r5, #4]
  40da62:	68a3      	ldr	r3, [r4, #8]
  40da64:	f8d8 6008 	ldr.w	r6, [r8, #8]
  40da68:	1af6      	subs	r6, r6, r3
  40da6a:	4631      	mov	r1, r6
  40da6c:	4638      	mov	r0, r7
  40da6e:	f7fc ff81 	bl	40a974 <invn_math_mult_q30_fxp>
  40da72:	68a3      	ldr	r3, [r4, #8]
  40da74:	4403      	add	r3, r0
  40da76:	4601      	mov	r1, r0
  40da78:	60a3      	str	r3, [r4, #8]
  40da7a:	4630      	mov	r0, r6
  40da7c:	68ac      	ldr	r4, [r5, #8]
  40da7e:	f7fc ff79 	bl	40a974 <invn_math_mult_q30_fxp>
  40da82:	1821      	adds	r1, r4, r0
  40da84:	4648      	mov	r0, r9
  40da86:	f7fc ff75 	bl	40a974 <invn_math_mult_q30_fxp>
  40da8a:	60a8      	str	r0, [r5, #8]
  40da8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040da90 <fxpAdaptiveFilter>:
  40da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40da94:	b083      	sub	sp, #12
  40da96:	469b      	mov	fp, r3
  40da98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40da9a:	681b      	ldr	r3, [r3, #0]
  40da9c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40da9e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40daa0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40daa2:	4682      	mov	sl, r0
  40daa4:	18e8      	adds	r0, r5, r3
  40daa6:	4688      	mov	r8, r1
  40daa8:	bf52      	itee	pl
  40daaa:	13c1      	asrpl	r1, r0, #15
  40daac:	f640 41cc 	movwmi	r1, #3276	; 0xccc
  40dab0:	4831      	ldrmi	r0, [pc, #196]	; (40db78 <fxpAdaptiveFilter+0xe8>)
  40dab2:	f8cb 0000 	str.w	r0, [fp]
  40dab6:	1871      	adds	r1, r6, r1
  40dab8:	4691      	mov	r9, r2
  40daba:	bf48      	it	mi
  40dabc:	f04f 4180 	movmi.w	r1, #1073741824	; 0x40000000
  40dac0:	aa01      	add	r2, sp, #4
  40dac2:	f7fd f8e5 	bl	40ac90 <invn_math_divide_q30_fxp>
  40dac6:	9a01      	ldr	r2, [sp, #4]
  40dac8:	f8c9 0000 	str.w	r0, [r9]
  40dacc:	f1a2 030f 	sub.w	r3, r2, #15
  40dad0:	2b00      	cmp	r3, #0
  40dad2:	9301      	str	r3, [sp, #4]
  40dad4:	dd4a      	ble.n	40db6c <fxpAdaptiveFilter+0xdc>
  40dad6:	4098      	lsls	r0, r3
  40dad8:	4b28      	ldr	r3, [pc, #160]	; (40db7c <fxpAdaptiveFilter+0xec>)
  40dada:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  40dade:	4298      	cmp	r0, r3
  40dae0:	bfa8      	it	ge
  40dae2:	4618      	movge	r0, r3
  40dae4:	f8c9 0000 	str.w	r0, [r9]
  40dae8:	f8db 1000 	ldr.w	r1, [fp]
  40daec:	f1c0 4080 	rsb	r0, r0, #1073741824	; 0x40000000
  40daf0:	f7fc ff40 	bl	40a974 <invn_math_mult_q30_fxp>
  40daf4:	00a4      	lsls	r4, r4, #2
  40daf6:	44a2      	add	sl, r4
  40daf8:	f8cb 0000 	str.w	r0, [fp]
  40dafc:	4444      	add	r4, r8
  40dafe:	b387      	cbz	r7, 40db62 <fxpAdaptiveFilter+0xd2>
  40db00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40db04:	2100      	movs	r1, #0
  40db06:	e019      	b.n	40db3c <fxpAdaptiveFilter+0xac>
  40db08:	f854 cc04 	ldr.w	ip, [r4, #-4]
  40db0c:	f8d9 5000 	ldr.w	r5, [r9]
  40db10:	f85a ed04 	ldr.w	lr, [sl, #-4]!
  40db14:	4666      	mov	r6, ip
  40db16:	1b42      	subs	r2, r0, r5
  40db18:	ea4f 77e6 	mov.w	r7, r6, asr #31
  40db1c:	eb61 73e5 	sbc.w	r3, r1, r5, asr #31
  40db20:	fb02 f607 	mul.w	r6, r2, r7
  40db24:	fb0c 6603 	mla	r6, ip, r3, r6
  40db28:	fba2 230c 	umull	r2, r3, r2, ip
  40db2c:	4433      	add	r3, r6
  40db2e:	fbce 2305 	smlal	r2, r3, lr, r5
  40db32:	0f92      	lsrs	r2, r2, #30
  40db34:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
  40db38:	f844 2d04 	str.w	r2, [r4, #-4]!
  40db3c:	4544      	cmp	r4, r8
  40db3e:	d1e3      	bne.n	40db08 <fxpAdaptiveFilter+0x78>
  40db40:	b003      	add	sp, #12
  40db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db46:	f85a 2d04 	ldr.w	r2, [sl, #-4]!
  40db4a:	f8d9 3000 	ldr.w	r3, [r9]
  40db4e:	f854 1c04 	ldr.w	r1, [r4, #-4]
  40db52:	fb82 5603 	smull	r5, r6, r2, r3
  40db56:	0faa      	lsrs	r2, r5, #30
  40db58:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
  40db5c:	4411      	add	r1, r2
  40db5e:	f844 1d04 	str.w	r1, [r4, #-4]!
  40db62:	45a0      	cmp	r8, r4
  40db64:	d1ef      	bne.n	40db46 <fxpAdaptiveFilter+0xb6>
  40db66:	b003      	add	sp, #12
  40db68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db6c:	bf1c      	itt	ne
  40db6e:	f1c2 020f 	rsbne	r2, r2, #15
  40db72:	4110      	asrne	r0, r2
  40db74:	e7b0      	b.n	40dad8 <fxpAdaptiveFilter+0x48>
  40db76:	bf00      	nop
  40db78:	06666666 	.word	0x06666666
  40db7c:	3999999a 	.word	0x3999999a

0040db80 <fxpScaleAndSaturate>:
  40db80:	b333      	cbz	r3, 40dbd0 <fxpScaleAndSaturate+0x50>
  40db82:	009b      	lsls	r3, r3, #2
  40db84:	b4f0      	push	{r4, r5, r6, r7}
  40db86:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  40db8a:	4419      	add	r1, r3
  40db8c:	18c5      	adds	r5, r0, r3
  40db8e:	4117      	asrs	r7, r2
  40db90:	2300      	movs	r3, #0
  40db92:	f855 4c04 	ldr.w	r4, [r5, #-4]
  40db96:	4094      	lsls	r4, r2
  40db98:	f841 4c04 	str.w	r4, [r1, #-4]
  40db9c:	f855 6c04 	ldr.w	r6, [r5, #-4]
  40dba0:	42be      	cmp	r6, r7
  40dba2:	bfc8      	it	gt
  40dba4:	f04f 4480 	movgt.w	r4, #1073741824	; 0x40000000
  40dba8:	f841 4c04 	str.w	r4, [r1, #-4]
  40dbac:	f855 6d04 	ldr.w	r6, [r5, #-4]!
  40dbb0:	f1c6 0600 	rsb	r6, r6, #0
  40dbb4:	bfc8      	it	gt
  40dbb6:	2301      	movgt	r3, #1
  40dbb8:	42be      	cmp	r6, r7
  40dbba:	bfc4      	itt	gt
  40dbbc:	f04f 4440 	movgt.w	r4, #3221225472	; 0xc0000000
  40dbc0:	2301      	movgt	r3, #1
  40dbc2:	4285      	cmp	r5, r0
  40dbc4:	f841 4d04 	str.w	r4, [r1, #-4]!
  40dbc8:	d1e3      	bne.n	40db92 <fxpScaleAndSaturate+0x12>
  40dbca:	4618      	mov	r0, r3
  40dbcc:	bcf0      	pop	{r4, r5, r6, r7}
  40dbce:	4770      	bx	lr
  40dbd0:	4618      	mov	r0, r3
  40dbd2:	4770      	bx	lr

0040dbd4 <fxpRecursiveVariance>:
  40dbd4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40dbd8:	9e08      	ldr	r6, [sp, #32]
  40dbda:	b3be      	cbz	r6, 40dc4c <fxpRecursiveVariance+0x78>
  40dbdc:	00b6      	lsls	r6, r6, #2
  40dbde:	4431      	add	r1, r6
  40dbe0:	4698      	mov	r8, r3
  40dbe2:	4406      	add	r6, r0
  40dbe4:	ea4f 79e3 	mov.w	r9, r3, asr #31
  40dbe8:	f851 7c04 	ldr.w	r7, [r1, #-4]
  40dbec:	f856 5d04 	ldr.w	r5, [r6, #-4]!
  40dbf0:	1bed      	subs	r5, r5, r7
  40dbf2:	fb85 ab03 	smull	sl, fp, r5, r3
  40dbf6:	ea4f 749a 	mov.w	r4, sl, lsr #30
  40dbfa:	ea44 048b 	orr.w	r4, r4, fp, lsl #2
  40dbfe:	4427      	add	r7, r4
  40dc00:	f841 7d04 	str.w	r7, [r1, #-4]!
  40dc04:	fb85 4504 	smull	r4, r5, r5, r4
  40dc08:	6817      	ldr	r7, [r2, #0]
  40dc0a:	0fa4      	lsrs	r4, r4, #30
  40dc0c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40dc10:	4427      	add	r7, r4
  40dc12:	42b0      	cmp	r0, r6
  40dc14:	6017      	str	r7, [r2, #0]
  40dc16:	d1e7      	bne.n	40dbe8 <fxpRecursiveVariance+0x14>
  40dc18:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40dc1c:	ebb4 0408 	subs.w	r4, r4, r8
  40dc20:	ea4f 71e7 	mov.w	r1, r7, asr #31
  40dc24:	f04f 0500 	mov.w	r5, #0
  40dc28:	eb65 0509 	sbc.w	r5, r5, r9
  40dc2c:	fb04 f301 	mul.w	r3, r4, r1
  40dc30:	fb07 3305 	mla	r3, r7, r5, r3
  40dc34:	fba4 4507 	umull	r4, r5, r4, r7
  40dc38:	441d      	add	r5, r3
  40dc3a:	0fa3      	lsrs	r3, r4, #30
  40dc3c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  40dc40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40dc44:	6013      	str	r3, [r2, #0]
  40dc46:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40dc4a:	4770      	bx	lr
  40dc4c:	4698      	mov	r8, r3
  40dc4e:	ea4f 79e3 	mov.w	r9, r3, asr #31
  40dc52:	6817      	ldr	r7, [r2, #0]
  40dc54:	e7e0      	b.n	40dc18 <fxpRecursiveVariance+0x44>
  40dc56:	bf00      	nop

0040dc58 <asinf>:
  40dc58:	b510      	push	{r4, lr}
  40dc5a:	ed2d 8b02 	vpush	{d8}
  40dc5e:	4c29      	ldr	r4, [pc, #164]	; (40dd04 <asinf+0xac>)
  40dc60:	b08a      	sub	sp, #40	; 0x28
  40dc62:	eeb0 8a40 	vmov.f32	s16, s0
  40dc66:	f000 f855 	bl	40dd14 <__ieee754_asinf>
  40dc6a:	f994 3000 	ldrsb.w	r3, [r4]
  40dc6e:	3301      	adds	r3, #1
  40dc70:	eef0 8a40 	vmov.f32	s17, s0
  40dc74:	d034      	beq.n	40dce0 <asinf+0x88>
  40dc76:	eeb4 8a48 	vcmp.f32	s16, s16
  40dc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40dc7e:	d62f      	bvs.n	40dce0 <asinf+0x88>
  40dc80:	eeb0 0a48 	vmov.f32	s0, s16
  40dc84:	f000 fae8 	bl	40e258 <fabsf>
  40dc88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  40dc8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
  40dc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40dc94:	dd24      	ble.n	40dce0 <asinf+0x88>
  40dc96:	2301      	movs	r3, #1
  40dc98:	4a1b      	ldr	r2, [pc, #108]	; (40dd08 <asinf+0xb0>)
  40dc9a:	9300      	str	r3, [sp, #0]
  40dc9c:	ee18 0a10 	vmov	r0, s16
  40dca0:	2300      	movs	r3, #0
  40dca2:	9201      	str	r2, [sp, #4]
  40dca4:	9308      	str	r3, [sp, #32]
  40dca6:	f000 fc43 	bl	40e530 <__aeabi_f2d>
  40dcaa:	4602      	mov	r2, r0
  40dcac:	460b      	mov	r3, r1
  40dcae:	4817      	ldr	r0, [pc, #92]	; (40dd0c <asinf+0xb4>)
  40dcb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40dcb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40dcb8:	f000 f9ee 	bl	40e098 <nan>
  40dcbc:	f994 3000 	ldrsb.w	r3, [r4]
  40dcc0:	2b02      	cmp	r3, #2
  40dcc2:	ed8d 0b06 	vstr	d0, [sp, #24]
  40dcc6:	d011      	beq.n	40dcec <asinf+0x94>
  40dcc8:	4668      	mov	r0, sp
  40dcca:	f000 f9e3 	bl	40e094 <matherr>
  40dcce:	b168      	cbz	r0, 40dcec <asinf+0x94>
  40dcd0:	9b08      	ldr	r3, [sp, #32]
  40dcd2:	b993      	cbnz	r3, 40dcfa <asinf+0xa2>
  40dcd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40dcd8:	f000 ff76 	bl	40ebc8 <__aeabi_d2f>
  40dcdc:	ee08 0a90 	vmov	s17, r0
  40dce0:	eeb0 0a68 	vmov.f32	s0, s17
  40dce4:	b00a      	add	sp, #40	; 0x28
  40dce6:	ecbd 8b02 	vpop	{d8}
  40dcea:	bd10      	pop	{r4, pc}
  40dcec:	f001 fa72 	bl	40f1d4 <__errno>
  40dcf0:	2321      	movs	r3, #33	; 0x21
  40dcf2:	6003      	str	r3, [r0, #0]
  40dcf4:	9b08      	ldr	r3, [sp, #32]
  40dcf6:	2b00      	cmp	r3, #0
  40dcf8:	d0ec      	beq.n	40dcd4 <asinf+0x7c>
  40dcfa:	f001 fa6b 	bl	40f1d4 <__errno>
  40dcfe:	9b08      	ldr	r3, [sp, #32]
  40dd00:	6003      	str	r3, [r0, #0]
  40dd02:	e7e7      	b.n	40dcd4 <asinf+0x7c>
  40dd04:	20002514 	.word	0x20002514
  40dd08:	004138f8 	.word	0x004138f8
  40dd0c:	00413944 	.word	0x00413944

0040dd10 <atan2f>:
  40dd10:	f000 b8fc 	b.w	40df0c <__ieee754_atan2f>

0040dd14 <__ieee754_asinf>:
  40dd14:	b538      	push	{r3, r4, r5, lr}
  40dd16:	ee10 5a10 	vmov	r5, s0
  40dd1a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
  40dd1e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
  40dd22:	ed2d 8b04 	vpush	{d8-d9}
  40dd26:	f000 8091 	beq.w	40de4c <__ieee754_asinf+0x138>
  40dd2a:	dc79      	bgt.n	40de20 <__ieee754_asinf+0x10c>
  40dd2c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
  40dd30:	da0e      	bge.n	40dd50 <__ieee754_asinf+0x3c>
  40dd32:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
  40dd36:	f280 8096 	bge.w	40de66 <__ieee754_asinf+0x152>
  40dd3a:	eddf 7a64 	vldr	s15, [pc, #400]	; 40decc <__ieee754_asinf+0x1b8>
  40dd3e:	ee70 7a27 	vadd.f32	s15, s0, s15
  40dd42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  40dd46:	eef4 7ac7 	vcmpe.f32	s15, s14
  40dd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40dd4e:	dc6b      	bgt.n	40de28 <__ieee754_asinf+0x114>
  40dd50:	f000 fa82 	bl	40e258 <fabsf>
  40dd54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  40dd58:	ee37 0a40 	vsub.f32	s0, s14, s0
  40dd5c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
  40dd60:	ee20 8a08 	vmul.f32	s16, s0, s16
  40dd64:	eddf 2a5a 	vldr	s5, [pc, #360]	; 40ded0 <__ieee754_asinf+0x1bc>
  40dd68:	eddf 3a5a 	vldr	s7, [pc, #360]	; 40ded4 <__ieee754_asinf+0x1c0>
  40dd6c:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 40ded8 <__ieee754_asinf+0x1c4>
  40dd70:	eddf 4a5a 	vldr	s9, [pc, #360]	; 40dedc <__ieee754_asinf+0x1c8>
  40dd74:	ed9f 4a5a 	vldr	s8, [pc, #360]	; 40dee0 <__ieee754_asinf+0x1cc>
  40dd78:	eddf 5a5a 	vldr	s11, [pc, #360]	; 40dee4 <__ieee754_asinf+0x1d0>
  40dd7c:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 40dee8 <__ieee754_asinf+0x1d4>
  40dd80:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 40deec <__ieee754_asinf+0x1d8>
  40dd84:	eddf 6a5a 	vldr	s13, [pc, #360]	; 40def0 <__ieee754_asinf+0x1dc>
  40dd88:	eddf 7a5a 	vldr	s15, [pc, #360]	; 40def4 <__ieee754_asinf+0x1e0>
  40dd8c:	eee8 3a22 	vfma.f32	s7, s16, s5
  40dd90:	eea8 4a03 	vfma.f32	s8, s16, s6
  40dd94:	eee8 4a23 	vfma.f32	s9, s16, s7
  40dd98:	eea8 5a04 	vfma.f32	s10, s16, s8
  40dd9c:	eee8 5a24 	vfma.f32	s11, s16, s9
  40dda0:	eee8 6a05 	vfma.f32	s13, s16, s10
  40dda4:	eea8 6a25 	vfma.f32	s12, s16, s11
  40dda8:	eea8 7a26 	vfma.f32	s14, s16, s13
  40ddac:	eee8 7a06 	vfma.f32	s15, s16, s12
  40ddb0:	eeb0 0a48 	vmov.f32	s0, s16
  40ddb4:	eeb0 9a47 	vmov.f32	s18, s14
  40ddb8:	ee67 8a88 	vmul.f32	s17, s15, s16
  40ddbc:	f000 f966 	bl	40e08c <__ieee754_sqrtf>
  40ddc0:	4b4d      	ldr	r3, [pc, #308]	; (40def8 <__ieee754_asinf+0x1e4>)
  40ddc2:	429c      	cmp	r4, r3
  40ddc4:	dc33      	bgt.n	40de2e <__ieee754_asinf+0x11a>
  40ddc6:	ee10 3a10 	vmov	r3, s0
  40ddca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  40ddce:	f023 030f 	bic.w	r3, r3, #15
  40ddd2:	ee07 3a90 	vmov	s15, r3
  40ddd6:	eeb1 6a67 	vneg.f32	s12, s15
  40ddda:	eea6 8a27 	vfma.f32	s16, s12, s15
  40ddde:	ee77 7a80 	vadd.f32	s15, s15, s0
  40dde2:	eec8 5a89 	vdiv.f32	s11, s17, s18
  40dde6:	ee88 5a27 	vdiv.f32	s10, s16, s15
  40ddea:	ed9f 7a44 	vldr	s14, [pc, #272]	; 40defc <__ieee754_asinf+0x1e8>
  40ddee:	eddf 7a44 	vldr	s15, [pc, #272]	; 40df00 <__ieee754_asinf+0x1ec>
  40ddf2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  40ddf6:	eea5 7a66 	vfms.f32	s14, s10, s13
  40ddfa:	ee30 0a00 	vadd.f32	s0, s0, s0
  40ddfe:	eeb0 5a67 	vmov.f32	s10, s15
  40de02:	eea6 5a26 	vfma.f32	s10, s12, s13
  40de06:	ee95 7a80 	vfnms.f32	s14, s11, s0
  40de0a:	ee37 0a45 	vsub.f32	s0, s14, s10
  40de0e:	ee37 0ac0 	vsub.f32	s0, s15, s0
  40de12:	ecbd 8b04 	vpop	{d8-d9}
  40de16:	2d00      	cmp	r5, #0
  40de18:	bfd8      	it	le
  40de1a:	eeb1 0a40 	vnegle.f32	s0, s0
  40de1e:	bd38      	pop	{r3, r4, r5, pc}
  40de20:	ee70 7a40 	vsub.f32	s15, s0, s0
  40de24:	ee87 0aa7 	vdiv.f32	s0, s15, s15
  40de28:	ecbd 8b04 	vpop	{d8-d9}
  40de2c:	bd38      	pop	{r3, r4, r5, pc}
  40de2e:	eec8 6a89 	vdiv.f32	s13, s17, s18
  40de32:	ed9f 7a34 	vldr	s14, [pc, #208]	; 40df04 <__ieee754_asinf+0x1f0>
  40de36:	eddf 7a34 	vldr	s15, [pc, #208]	; 40df08 <__ieee754_asinf+0x1f4>
  40de3a:	eea0 0a26 	vfma.f32	s0, s0, s13
  40de3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  40de42:	eea0 7a26 	vfma.f32	s14, s0, s13
  40de46:	ee37 0ac7 	vsub.f32	s0, s15, s14
  40de4a:	e7e2      	b.n	40de12 <__ieee754_asinf+0xfe>
  40de4c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 40defc <__ieee754_asinf+0x1e8>
  40de50:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 40df08 <__ieee754_asinf+0x1f4>
  40de54:	ee60 7a27 	vmul.f32	s15, s0, s15
  40de58:	ecbd 8b04 	vpop	{d8-d9}
  40de5c:	eee0 7a07 	vfma.f32	s15, s0, s14
  40de60:	eeb0 0a67 	vmov.f32	s0, s15
  40de64:	bd38      	pop	{r3, r4, r5, pc}
  40de66:	ee60 7a00 	vmul.f32	s15, s0, s0
  40de6a:	eddf 2a19 	vldr	s5, [pc, #100]	; 40ded0 <__ieee754_asinf+0x1bc>
  40de6e:	eddf 3a19 	vldr	s7, [pc, #100]	; 40ded4 <__ieee754_asinf+0x1c0>
  40de72:	eddf 4a1a 	vldr	s9, [pc, #104]	; 40dedc <__ieee754_asinf+0x1c8>
  40de76:	ed9f 3a18 	vldr	s6, [pc, #96]	; 40ded8 <__ieee754_asinf+0x1c4>
  40de7a:	ed9f 4a19 	vldr	s8, [pc, #100]	; 40dee0 <__ieee754_asinf+0x1cc>
  40de7e:	eddf 6a19 	vldr	s13, [pc, #100]	; 40dee4 <__ieee754_asinf+0x1d0>
  40de82:	ed9f 5a19 	vldr	s10, [pc, #100]	; 40dee8 <__ieee754_asinf+0x1d4>
  40de86:	eddf 5a19 	vldr	s11, [pc, #100]	; 40deec <__ieee754_asinf+0x1d8>
  40de8a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 40def0 <__ieee754_asinf+0x1dc>
  40de8e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 40def4 <__ieee754_asinf+0x1e0>
  40de92:	eee7 3aa2 	vfma.f32	s7, s15, s5
  40de96:	ecbd 8b04 	vpop	{d8-d9}
  40de9a:	eee7 4aa3 	vfma.f32	s9, s15, s7
  40de9e:	eea7 4a83 	vfma.f32	s8, s15, s6
  40dea2:	eee7 6aa4 	vfma.f32	s13, s15, s9
  40dea6:	eea7 5a84 	vfma.f32	s10, s15, s8
  40deaa:	eee7 5aa6 	vfma.f32	s11, s15, s13
  40deae:	eea7 6a85 	vfma.f32	s12, s15, s10
  40deb2:	eea7 7aa5 	vfma.f32	s14, s15, s11
  40deb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  40deba:	eee7 6a86 	vfma.f32	s13, s15, s12
  40debe:	ee67 7a27 	vmul.f32	s15, s14, s15
  40dec2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  40dec6:	eea0 0a07 	vfma.f32	s0, s0, s14
  40deca:	bd38      	pop	{r3, r4, r5, pc}
  40decc:	7149f2ca 	.word	0x7149f2ca
  40ded0:	3811ef08 	.word	0x3811ef08
  40ded4:	3a4f7f04 	.word	0x3a4f7f04
  40ded8:	3d9dc62e 	.word	0x3d9dc62e
  40dedc:	bd241146 	.word	0xbd241146
  40dee0:	bf303361 	.word	0xbf303361
  40dee4:	3e4e0aa8 	.word	0x3e4e0aa8
  40dee8:	4001572d 	.word	0x4001572d
  40deec:	bea6b090 	.word	0xbea6b090
  40def0:	c019d139 	.word	0xc019d139
  40def4:	3e2aaaab 	.word	0x3e2aaaab
  40def8:	3f799999 	.word	0x3f799999
  40defc:	b33bbd2e 	.word	0xb33bbd2e
  40df00:	3f490fdb 	.word	0x3f490fdb
  40df04:	333bbd2e 	.word	0x333bbd2e
  40df08:	3fc90fdb 	.word	0x3fc90fdb

0040df0c <__ieee754_atan2f>:
  40df0c:	b510      	push	{r4, lr}
  40df0e:	b082      	sub	sp, #8
  40df10:	edcd 0a01 	vstr	s1, [sp, #4]
  40df14:	9b01      	ldr	r3, [sp, #4]
  40df16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
  40df1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  40df1e:	eef0 7a40 	vmov.f32	s15, s0
  40df22:	dc19      	bgt.n	40df58 <__ieee754_atan2f+0x4c>
  40df24:	ee10 0a10 	vmov	r0, s0
  40df28:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  40df2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  40df30:	dc12      	bgt.n	40df58 <__ieee754_atan2f+0x4c>
  40df32:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
  40df36:	d049      	beq.n	40dfcc <__ieee754_atan2f+0xc0>
  40df38:	179c      	asrs	r4, r3, #30
  40df3a:	f004 0402 	and.w	r4, r4, #2
  40df3e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
  40df42:	b979      	cbnz	r1, 40df64 <__ieee754_atan2f+0x58>
  40df44:	2c02      	cmp	r4, #2
  40df46:	d03e      	beq.n	40dfc6 <__ieee754_atan2f+0xba>
  40df48:	ed9f 0a45 	vldr	s0, [pc, #276]	; 40e060 <__ieee754_atan2f+0x154>
  40df4c:	2c03      	cmp	r4, #3
  40df4e:	bf18      	it	ne
  40df50:	eeb0 0a67 	vmovne.f32	s0, s15
  40df54:	b002      	add	sp, #8
  40df56:	bd10      	pop	{r4, pc}
  40df58:	ed9d 7a01 	vldr	s14, [sp, #4]
  40df5c:	ee37 0a27 	vadd.f32	s0, s14, s15
  40df60:	b002      	add	sp, #8
  40df62:	bd10      	pop	{r4, pc}
  40df64:	b312      	cbz	r2, 40dfac <__ieee754_atan2f+0xa0>
  40df66:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  40df6a:	d034      	beq.n	40dfd6 <__ieee754_atan2f+0xca>
  40df6c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  40df70:	d041      	beq.n	40dff6 <__ieee754_atan2f+0xea>
  40df72:	1a8a      	subs	r2, r1, r2
  40df74:	15d2      	asrs	r2, r2, #23
  40df76:	2a3c      	cmp	r2, #60	; 0x3c
  40df78:	dc22      	bgt.n	40dfc0 <__ieee754_atan2f+0xb4>
  40df7a:	2b00      	cmp	r3, #0
  40df7c:	db54      	blt.n	40e028 <__ieee754_atan2f+0x11c>
  40df7e:	ed9d 0a01 	vldr	s0, [sp, #4]
  40df82:	ee87 0a80 	vdiv.f32	s0, s15, s0
  40df86:	f000 f967 	bl	40e258 <fabsf>
  40df8a:	f000 f88d 	bl	40e0a8 <atanf>
  40df8e:	2c01      	cmp	r4, #1
  40df90:	d043      	beq.n	40e01a <__ieee754_atan2f+0x10e>
  40df92:	2c02      	cmp	r4, #2
  40df94:	d038      	beq.n	40e008 <__ieee754_atan2f+0xfc>
  40df96:	2c00      	cmp	r4, #0
  40df98:	d0e2      	beq.n	40df60 <__ieee754_atan2f+0x54>
  40df9a:	eddf 7a32 	vldr	s15, [pc, #200]	; 40e064 <__ieee754_atan2f+0x158>
  40df9e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 40e068 <__ieee754_atan2f+0x15c>
  40dfa2:	ee70 7a27 	vadd.f32	s15, s0, s15
  40dfa6:	ee37 0ac7 	vsub.f32	s0, s15, s14
  40dfaa:	e7d9      	b.n	40df60 <__ieee754_atan2f+0x54>
  40dfac:	eddf 7a2f 	vldr	s15, [pc, #188]	; 40e06c <__ieee754_atan2f+0x160>
  40dfb0:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 40e070 <__ieee754_atan2f+0x164>
  40dfb4:	2800      	cmp	r0, #0
  40dfb6:	bfb8      	it	lt
  40dfb8:	eeb0 0a67 	vmovlt.f32	s0, s15
  40dfbc:	b002      	add	sp, #8
  40dfbe:	bd10      	pop	{r4, pc}
  40dfc0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 40e070 <__ieee754_atan2f+0x164>
  40dfc4:	e7e3      	b.n	40df8e <__ieee754_atan2f+0x82>
  40dfc6:	ed9f 0a28 	vldr	s0, [pc, #160]	; 40e068 <__ieee754_atan2f+0x15c>
  40dfca:	e7c9      	b.n	40df60 <__ieee754_atan2f+0x54>
  40dfcc:	b002      	add	sp, #8
  40dfce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40dfd2:	f000 b869 	b.w	40e0a8 <atanf>
  40dfd6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  40dfda:	d02a      	beq.n	40e032 <__ieee754_atan2f+0x126>
  40dfdc:	2c02      	cmp	r4, #2
  40dfde:	d0f2      	beq.n	40dfc6 <__ieee754_atan2f+0xba>
  40dfe0:	2c03      	cmp	r4, #3
  40dfe2:	d033      	beq.n	40e04c <__ieee754_atan2f+0x140>
  40dfe4:	eddf 7a23 	vldr	s15, [pc, #140]	; 40e074 <__ieee754_atan2f+0x168>
  40dfe8:	ed9f 0a23 	vldr	s0, [pc, #140]	; 40e078 <__ieee754_atan2f+0x16c>
  40dfec:	2c01      	cmp	r4, #1
  40dfee:	bf08      	it	eq
  40dff0:	eeb0 0a67 	vmoveq.f32	s0, s15
  40dff4:	e7b4      	b.n	40df60 <__ieee754_atan2f+0x54>
  40dff6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 40e070 <__ieee754_atan2f+0x164>
  40dffa:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 40e06c <__ieee754_atan2f+0x160>
  40dffe:	2800      	cmp	r0, #0
  40e000:	bfa8      	it	ge
  40e002:	eeb0 0a67 	vmovge.f32	s0, s15
  40e006:	e7ab      	b.n	40df60 <__ieee754_atan2f+0x54>
  40e008:	eddf 7a16 	vldr	s15, [pc, #88]	; 40e064 <__ieee754_atan2f+0x158>
  40e00c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 40e068 <__ieee754_atan2f+0x15c>
  40e010:	ee70 7a27 	vadd.f32	s15, s0, s15
  40e014:	ee37 0a67 	vsub.f32	s0, s14, s15
  40e018:	e7a2      	b.n	40df60 <__ieee754_atan2f+0x54>
  40e01a:	ee10 3a10 	vmov	r3, s0
  40e01e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40e022:	ee00 3a10 	vmov	s0, r3
  40e026:	e79b      	b.n	40df60 <__ieee754_atan2f+0x54>
  40e028:	323c      	adds	r2, #60	; 0x3c
  40e02a:	daa8      	bge.n	40df7e <__ieee754_atan2f+0x72>
  40e02c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 40e078 <__ieee754_atan2f+0x16c>
  40e030:	e7ad      	b.n	40df8e <__ieee754_atan2f+0x82>
  40e032:	2c02      	cmp	r4, #2
  40e034:	d010      	beq.n	40e058 <__ieee754_atan2f+0x14c>
  40e036:	2c03      	cmp	r4, #3
  40e038:	d00b      	beq.n	40e052 <__ieee754_atan2f+0x146>
  40e03a:	eddf 7a10 	vldr	s15, [pc, #64]	; 40e07c <__ieee754_atan2f+0x170>
  40e03e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 40e080 <__ieee754_atan2f+0x174>
  40e042:	2c01      	cmp	r4, #1
  40e044:	bf08      	it	eq
  40e046:	eeb0 0a67 	vmoveq.f32	s0, s15
  40e04a:	e789      	b.n	40df60 <__ieee754_atan2f+0x54>
  40e04c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 40e060 <__ieee754_atan2f+0x154>
  40e050:	e786      	b.n	40df60 <__ieee754_atan2f+0x54>
  40e052:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 40e084 <__ieee754_atan2f+0x178>
  40e056:	e783      	b.n	40df60 <__ieee754_atan2f+0x54>
  40e058:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 40e088 <__ieee754_atan2f+0x17c>
  40e05c:	e780      	b.n	40df60 <__ieee754_atan2f+0x54>
  40e05e:	bf00      	nop
  40e060:	c0490fdb 	.word	0xc0490fdb
  40e064:	33bbbd2e 	.word	0x33bbbd2e
  40e068:	40490fdb 	.word	0x40490fdb
  40e06c:	bfc90fdb 	.word	0xbfc90fdb
  40e070:	3fc90fdb 	.word	0x3fc90fdb
  40e074:	80000000 	.word	0x80000000
  40e078:	00000000 	.word	0x00000000
  40e07c:	bf490fdb 	.word	0xbf490fdb
  40e080:	3f490fdb 	.word	0x3f490fdb
  40e084:	c016cbe4 	.word	0xc016cbe4
  40e088:	4016cbe4 	.word	0x4016cbe4

0040e08c <__ieee754_sqrtf>:
  40e08c:	eeb1 0ac0 	vsqrt.f32	s0, s0
  40e090:	4770      	bx	lr
  40e092:	bf00      	nop

0040e094 <matherr>:
  40e094:	2000      	movs	r0, #0
  40e096:	4770      	bx	lr

0040e098 <nan>:
  40e098:	ed9f 0b01 	vldr	d0, [pc, #4]	; 40e0a0 <nan+0x8>
  40e09c:	4770      	bx	lr
  40e09e:	bf00      	nop
  40e0a0:	00000000 	.word	0x00000000
  40e0a4:	7ff80000 	.word	0x7ff80000

0040e0a8 <atanf>:
  40e0a8:	b538      	push	{r3, r4, r5, lr}
  40e0aa:	ee10 5a10 	vmov	r5, s0
  40e0ae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
  40e0b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
  40e0b6:	eef0 7a40 	vmov.f32	s15, s0
  40e0ba:	db0b      	blt.n	40e0d4 <atanf+0x2c>
  40e0bc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  40e0c0:	dc56      	bgt.n	40e170 <atanf+0xc8>
  40e0c2:	eddf 7a52 	vldr	s15, [pc, #328]	; 40e20c <atanf+0x164>
  40e0c6:	ed9f 0a52 	vldr	s0, [pc, #328]	; 40e210 <atanf+0x168>
  40e0ca:	2d00      	cmp	r5, #0
  40e0cc:	bfc8      	it	gt
  40e0ce:	eeb0 0a67 	vmovgt.f32	s0, s15
  40e0d2:	bd38      	pop	{r3, r4, r5, pc}
  40e0d4:	4b4f      	ldr	r3, [pc, #316]	; (40e214 <atanf+0x16c>)
  40e0d6:	429c      	cmp	r4, r3
  40e0d8:	dc59      	bgt.n	40e18e <atanf+0xe6>
  40e0da:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
  40e0de:	db4a      	blt.n	40e176 <atanf+0xce>
  40e0e0:	f04f 33ff 	mov.w	r3, #4294967295
  40e0e4:	ee67 5aa7 	vmul.f32	s11, s15, s15
  40e0e8:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 40e218 <atanf+0x170>
  40e0ec:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 40e21c <atanf+0x174>
  40e0f0:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 40e220 <atanf+0x178>
  40e0f4:	eddf 1a4b 	vldr	s3, [pc, #300]	; 40e224 <atanf+0x17c>
  40e0f8:	eddf 2a4b 	vldr	s5, [pc, #300]	; 40e228 <atanf+0x180>
  40e0fc:	ed9f 4a4b 	vldr	s8, [pc, #300]	; 40e22c <atanf+0x184>
  40e100:	eddf 3a4b 	vldr	s7, [pc, #300]	; 40e230 <atanf+0x188>
  40e104:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 40e234 <atanf+0x18c>
  40e108:	eddf 4a4b 	vldr	s9, [pc, #300]	; 40e238 <atanf+0x190>
  40e10c:	eddf 6a4b 	vldr	s13, [pc, #300]	; 40e23c <atanf+0x194>
  40e110:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 40e240 <atanf+0x198>
  40e114:	ee25 7aa5 	vmul.f32	s14, s11, s11
  40e118:	1c5a      	adds	r2, r3, #1
  40e11a:	eea7 2a01 	vfma.f32	s4, s14, s2
  40e11e:	eee7 2a21 	vfma.f32	s5, s14, s3
  40e122:	eea7 3a02 	vfma.f32	s6, s14, s4
  40e126:	eee7 3a22 	vfma.f32	s7, s14, s5
  40e12a:	eea7 4a03 	vfma.f32	s8, s14, s6
  40e12e:	eee7 4a23 	vfma.f32	s9, s14, s7
  40e132:	eea7 5a04 	vfma.f32	s10, s14, s8
  40e136:	eea7 6a24 	vfma.f32	s12, s14, s9
  40e13a:	eee7 6a05 	vfma.f32	s13, s14, s10
  40e13e:	ee26 7a07 	vmul.f32	s14, s12, s14
  40e142:	ee66 6aa5 	vmul.f32	s13, s13, s11
  40e146:	d03a      	beq.n	40e1be <atanf+0x116>
  40e148:	493e      	ldr	r1, [pc, #248]	; (40e244 <atanf+0x19c>)
  40e14a:	4a3f      	ldr	r2, [pc, #252]	; (40e248 <atanf+0x1a0>)
  40e14c:	009b      	lsls	r3, r3, #2
  40e14e:	4419      	add	r1, r3
  40e150:	ee76 6a87 	vadd.f32	s13, s13, s14
  40e154:	ed91 0a00 	vldr	s0, [r1]
  40e158:	ee97 0aa6 	vfnms.f32	s0, s15, s13
  40e15c:	4413      	add	r3, r2
  40e15e:	2d00      	cmp	r5, #0
  40e160:	ed93 7a00 	vldr	s14, [r3]
  40e164:	ee70 7a67 	vsub.f32	s15, s0, s15
  40e168:	ee37 0a67 	vsub.f32	s0, s14, s15
  40e16c:	db24      	blt.n	40e1b8 <atanf+0x110>
  40e16e:	bd38      	pop	{r3, r4, r5, pc}
  40e170:	ee30 0a00 	vadd.f32	s0, s0, s0
  40e174:	bd38      	pop	{r3, r4, r5, pc}
  40e176:	ed9f 7a35 	vldr	s14, [pc, #212]	; 40e24c <atanf+0x1a4>
  40e17a:	ee30 7a07 	vadd.f32	s14, s0, s14
  40e17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  40e182:	eeb4 7ae6 	vcmpe.f32	s14, s13
  40e186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40e18a:	dda9      	ble.n	40e0e0 <atanf+0x38>
  40e18c:	bd38      	pop	{r3, r4, r5, pc}
  40e18e:	f000 f863 	bl	40e258 <fabsf>
  40e192:	4b2f      	ldr	r3, [pc, #188]	; (40e250 <atanf+0x1a8>)
  40e194:	429c      	cmp	r4, r3
  40e196:	dc19      	bgt.n	40e1cc <atanf+0x124>
  40e198:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  40e19c:	429c      	cmp	r4, r3
  40e19e:	dc2a      	bgt.n	40e1f6 <atanf+0x14e>
  40e1a0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
  40e1a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  40e1a8:	eea0 7a27 	vfma.f32	s14, s0, s15
  40e1ac:	2300      	movs	r3, #0
  40e1ae:	ee30 0a27 	vadd.f32	s0, s0, s15
  40e1b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
  40e1b6:	e795      	b.n	40e0e4 <atanf+0x3c>
  40e1b8:	eeb1 0a40 	vneg.f32	s0, s0
  40e1bc:	bd38      	pop	{r3, r4, r5, pc}
  40e1be:	ee76 6a87 	vadd.f32	s13, s13, s14
  40e1c2:	eee7 7ae6 	vfms.f32	s15, s15, s13
  40e1c6:	eeb0 0a67 	vmov.f32	s0, s15
  40e1ca:	bd38      	pop	{r3, r4, r5, pc}
  40e1cc:	4b21      	ldr	r3, [pc, #132]	; (40e254 <atanf+0x1ac>)
  40e1ce:	429c      	cmp	r4, r3
  40e1d0:	dc0b      	bgt.n	40e1ea <atanf+0x142>
  40e1d2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
  40e1d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  40e1da:	eea0 7a27 	vfma.f32	s14, s0, s15
  40e1de:	2302      	movs	r3, #2
  40e1e0:	ee30 0a67 	vsub.f32	s0, s0, s15
  40e1e4:	eec0 7a07 	vdiv.f32	s15, s0, s14
  40e1e8:	e77c      	b.n	40e0e4 <atanf+0x3c>
  40e1ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  40e1ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
  40e1f2:	2303      	movs	r3, #3
  40e1f4:	e776      	b.n	40e0e4 <atanf+0x3c>
  40e1f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  40e1fa:	ee30 7a67 	vsub.f32	s14, s0, s15
  40e1fe:	ee30 0a27 	vadd.f32	s0, s0, s15
  40e202:	2301      	movs	r3, #1
  40e204:	eec7 7a00 	vdiv.f32	s15, s14, s0
  40e208:	e76c      	b.n	40e0e4 <atanf+0x3c>
  40e20a:	bf00      	nop
  40e20c:	3fc90fdb 	.word	0x3fc90fdb
  40e210:	bfc90fdb 	.word	0xbfc90fdb
  40e214:	3edfffff 	.word	0x3edfffff
  40e218:	3c8569d7 	.word	0x3c8569d7
  40e21c:	3d4bda59 	.word	0x3d4bda59
  40e220:	3d886b35 	.word	0x3d886b35
  40e224:	bd15a221 	.word	0xbd15a221
  40e228:	bd6ef16b 	.word	0xbd6ef16b
  40e22c:	3dba2e6e 	.word	0x3dba2e6e
  40e230:	bd9d8795 	.word	0xbd9d8795
  40e234:	3e124925 	.word	0x3e124925
  40e238:	bde38e38 	.word	0xbde38e38
  40e23c:	3eaaaaab 	.word	0x3eaaaaab
  40e240:	be4ccccd 	.word	0xbe4ccccd
  40e244:	00413910 	.word	0x00413910
  40e248:	00413900 	.word	0x00413900
  40e24c:	7149f2ca 	.word	0x7149f2ca
  40e250:	3f97ffff 	.word	0x3f97ffff
  40e254:	401bffff 	.word	0x401bffff

0040e258 <fabsf>:
  40e258:	ee10 3a10 	vmov	r3, s0
  40e25c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40e260:	ee00 3a10 	vmov	s0, r3
  40e264:	4770      	bx	lr
  40e266:	bf00      	nop

0040e268 <__aeabi_drsub>:
  40e268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40e26c:	e002      	b.n	40e274 <__adddf3>
  40e26e:	bf00      	nop

0040e270 <__aeabi_dsub>:
  40e270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040e274 <__adddf3>:
  40e274:	b530      	push	{r4, r5, lr}
  40e276:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40e27a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40e27e:	ea94 0f05 	teq	r4, r5
  40e282:	bf08      	it	eq
  40e284:	ea90 0f02 	teqeq	r0, r2
  40e288:	bf1f      	itttt	ne
  40e28a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40e28e:	ea55 0c02 	orrsne.w	ip, r5, r2
  40e292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40e296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40e29a:	f000 80e2 	beq.w	40e462 <__adddf3+0x1ee>
  40e29e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40e2a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40e2a6:	bfb8      	it	lt
  40e2a8:	426d      	neglt	r5, r5
  40e2aa:	dd0c      	ble.n	40e2c6 <__adddf3+0x52>
  40e2ac:	442c      	add	r4, r5
  40e2ae:	ea80 0202 	eor.w	r2, r0, r2
  40e2b2:	ea81 0303 	eor.w	r3, r1, r3
  40e2b6:	ea82 0000 	eor.w	r0, r2, r0
  40e2ba:	ea83 0101 	eor.w	r1, r3, r1
  40e2be:	ea80 0202 	eor.w	r2, r0, r2
  40e2c2:	ea81 0303 	eor.w	r3, r1, r3
  40e2c6:	2d36      	cmp	r5, #54	; 0x36
  40e2c8:	bf88      	it	hi
  40e2ca:	bd30      	pophi	{r4, r5, pc}
  40e2cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40e2d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40e2d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40e2d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40e2dc:	d002      	beq.n	40e2e4 <__adddf3+0x70>
  40e2de:	4240      	negs	r0, r0
  40e2e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40e2e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40e2e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40e2ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40e2f0:	d002      	beq.n	40e2f8 <__adddf3+0x84>
  40e2f2:	4252      	negs	r2, r2
  40e2f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40e2f8:	ea94 0f05 	teq	r4, r5
  40e2fc:	f000 80a7 	beq.w	40e44e <__adddf3+0x1da>
  40e300:	f1a4 0401 	sub.w	r4, r4, #1
  40e304:	f1d5 0e20 	rsbs	lr, r5, #32
  40e308:	db0d      	blt.n	40e326 <__adddf3+0xb2>
  40e30a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40e30e:	fa22 f205 	lsr.w	r2, r2, r5
  40e312:	1880      	adds	r0, r0, r2
  40e314:	f141 0100 	adc.w	r1, r1, #0
  40e318:	fa03 f20e 	lsl.w	r2, r3, lr
  40e31c:	1880      	adds	r0, r0, r2
  40e31e:	fa43 f305 	asr.w	r3, r3, r5
  40e322:	4159      	adcs	r1, r3
  40e324:	e00e      	b.n	40e344 <__adddf3+0xd0>
  40e326:	f1a5 0520 	sub.w	r5, r5, #32
  40e32a:	f10e 0e20 	add.w	lr, lr, #32
  40e32e:	2a01      	cmp	r2, #1
  40e330:	fa03 fc0e 	lsl.w	ip, r3, lr
  40e334:	bf28      	it	cs
  40e336:	f04c 0c02 	orrcs.w	ip, ip, #2
  40e33a:	fa43 f305 	asr.w	r3, r3, r5
  40e33e:	18c0      	adds	r0, r0, r3
  40e340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40e344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40e348:	d507      	bpl.n	40e35a <__adddf3+0xe6>
  40e34a:	f04f 0e00 	mov.w	lr, #0
  40e34e:	f1dc 0c00 	rsbs	ip, ip, #0
  40e352:	eb7e 0000 	sbcs.w	r0, lr, r0
  40e356:	eb6e 0101 	sbc.w	r1, lr, r1
  40e35a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40e35e:	d31b      	bcc.n	40e398 <__adddf3+0x124>
  40e360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40e364:	d30c      	bcc.n	40e380 <__adddf3+0x10c>
  40e366:	0849      	lsrs	r1, r1, #1
  40e368:	ea5f 0030 	movs.w	r0, r0, rrx
  40e36c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40e370:	f104 0401 	add.w	r4, r4, #1
  40e374:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40e378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40e37c:	f080 809a 	bcs.w	40e4b4 <__adddf3+0x240>
  40e380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40e384:	bf08      	it	eq
  40e386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40e38a:	f150 0000 	adcs.w	r0, r0, #0
  40e38e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e392:	ea41 0105 	orr.w	r1, r1, r5
  40e396:	bd30      	pop	{r4, r5, pc}
  40e398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40e39c:	4140      	adcs	r0, r0
  40e39e:	eb41 0101 	adc.w	r1, r1, r1
  40e3a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e3a6:	f1a4 0401 	sub.w	r4, r4, #1
  40e3aa:	d1e9      	bne.n	40e380 <__adddf3+0x10c>
  40e3ac:	f091 0f00 	teq	r1, #0
  40e3b0:	bf04      	itt	eq
  40e3b2:	4601      	moveq	r1, r0
  40e3b4:	2000      	moveq	r0, #0
  40e3b6:	fab1 f381 	clz	r3, r1
  40e3ba:	bf08      	it	eq
  40e3bc:	3320      	addeq	r3, #32
  40e3be:	f1a3 030b 	sub.w	r3, r3, #11
  40e3c2:	f1b3 0220 	subs.w	r2, r3, #32
  40e3c6:	da0c      	bge.n	40e3e2 <__adddf3+0x16e>
  40e3c8:	320c      	adds	r2, #12
  40e3ca:	dd08      	ble.n	40e3de <__adddf3+0x16a>
  40e3cc:	f102 0c14 	add.w	ip, r2, #20
  40e3d0:	f1c2 020c 	rsb	r2, r2, #12
  40e3d4:	fa01 f00c 	lsl.w	r0, r1, ip
  40e3d8:	fa21 f102 	lsr.w	r1, r1, r2
  40e3dc:	e00c      	b.n	40e3f8 <__adddf3+0x184>
  40e3de:	f102 0214 	add.w	r2, r2, #20
  40e3e2:	bfd8      	it	le
  40e3e4:	f1c2 0c20 	rsble	ip, r2, #32
  40e3e8:	fa01 f102 	lsl.w	r1, r1, r2
  40e3ec:	fa20 fc0c 	lsr.w	ip, r0, ip
  40e3f0:	bfdc      	itt	le
  40e3f2:	ea41 010c 	orrle.w	r1, r1, ip
  40e3f6:	4090      	lslle	r0, r2
  40e3f8:	1ae4      	subs	r4, r4, r3
  40e3fa:	bfa2      	ittt	ge
  40e3fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40e400:	4329      	orrge	r1, r5
  40e402:	bd30      	popge	{r4, r5, pc}
  40e404:	ea6f 0404 	mvn.w	r4, r4
  40e408:	3c1f      	subs	r4, #31
  40e40a:	da1c      	bge.n	40e446 <__adddf3+0x1d2>
  40e40c:	340c      	adds	r4, #12
  40e40e:	dc0e      	bgt.n	40e42e <__adddf3+0x1ba>
  40e410:	f104 0414 	add.w	r4, r4, #20
  40e414:	f1c4 0220 	rsb	r2, r4, #32
  40e418:	fa20 f004 	lsr.w	r0, r0, r4
  40e41c:	fa01 f302 	lsl.w	r3, r1, r2
  40e420:	ea40 0003 	orr.w	r0, r0, r3
  40e424:	fa21 f304 	lsr.w	r3, r1, r4
  40e428:	ea45 0103 	orr.w	r1, r5, r3
  40e42c:	bd30      	pop	{r4, r5, pc}
  40e42e:	f1c4 040c 	rsb	r4, r4, #12
  40e432:	f1c4 0220 	rsb	r2, r4, #32
  40e436:	fa20 f002 	lsr.w	r0, r0, r2
  40e43a:	fa01 f304 	lsl.w	r3, r1, r4
  40e43e:	ea40 0003 	orr.w	r0, r0, r3
  40e442:	4629      	mov	r1, r5
  40e444:	bd30      	pop	{r4, r5, pc}
  40e446:	fa21 f004 	lsr.w	r0, r1, r4
  40e44a:	4629      	mov	r1, r5
  40e44c:	bd30      	pop	{r4, r5, pc}
  40e44e:	f094 0f00 	teq	r4, #0
  40e452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40e456:	bf06      	itte	eq
  40e458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40e45c:	3401      	addeq	r4, #1
  40e45e:	3d01      	subne	r5, #1
  40e460:	e74e      	b.n	40e300 <__adddf3+0x8c>
  40e462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40e466:	bf18      	it	ne
  40e468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40e46c:	d029      	beq.n	40e4c2 <__adddf3+0x24e>
  40e46e:	ea94 0f05 	teq	r4, r5
  40e472:	bf08      	it	eq
  40e474:	ea90 0f02 	teqeq	r0, r2
  40e478:	d005      	beq.n	40e486 <__adddf3+0x212>
  40e47a:	ea54 0c00 	orrs.w	ip, r4, r0
  40e47e:	bf04      	itt	eq
  40e480:	4619      	moveq	r1, r3
  40e482:	4610      	moveq	r0, r2
  40e484:	bd30      	pop	{r4, r5, pc}
  40e486:	ea91 0f03 	teq	r1, r3
  40e48a:	bf1e      	ittt	ne
  40e48c:	2100      	movne	r1, #0
  40e48e:	2000      	movne	r0, #0
  40e490:	bd30      	popne	{r4, r5, pc}
  40e492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40e496:	d105      	bne.n	40e4a4 <__adddf3+0x230>
  40e498:	0040      	lsls	r0, r0, #1
  40e49a:	4149      	adcs	r1, r1
  40e49c:	bf28      	it	cs
  40e49e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40e4a2:	bd30      	pop	{r4, r5, pc}
  40e4a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40e4a8:	bf3c      	itt	cc
  40e4aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40e4ae:	bd30      	popcc	{r4, r5, pc}
  40e4b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40e4b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40e4b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40e4bc:	f04f 0000 	mov.w	r0, #0
  40e4c0:	bd30      	pop	{r4, r5, pc}
  40e4c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40e4c6:	bf1a      	itte	ne
  40e4c8:	4619      	movne	r1, r3
  40e4ca:	4610      	movne	r0, r2
  40e4cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40e4d0:	bf1c      	itt	ne
  40e4d2:	460b      	movne	r3, r1
  40e4d4:	4602      	movne	r2, r0
  40e4d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40e4da:	bf06      	itte	eq
  40e4dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40e4e0:	ea91 0f03 	teqeq	r1, r3
  40e4e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40e4e8:	bd30      	pop	{r4, r5, pc}
  40e4ea:	bf00      	nop

0040e4ec <__aeabi_ui2d>:
  40e4ec:	f090 0f00 	teq	r0, #0
  40e4f0:	bf04      	itt	eq
  40e4f2:	2100      	moveq	r1, #0
  40e4f4:	4770      	bxeq	lr
  40e4f6:	b530      	push	{r4, r5, lr}
  40e4f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40e4fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40e500:	f04f 0500 	mov.w	r5, #0
  40e504:	f04f 0100 	mov.w	r1, #0
  40e508:	e750      	b.n	40e3ac <__adddf3+0x138>
  40e50a:	bf00      	nop

0040e50c <__aeabi_i2d>:
  40e50c:	f090 0f00 	teq	r0, #0
  40e510:	bf04      	itt	eq
  40e512:	2100      	moveq	r1, #0
  40e514:	4770      	bxeq	lr
  40e516:	b530      	push	{r4, r5, lr}
  40e518:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40e51c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40e520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40e524:	bf48      	it	mi
  40e526:	4240      	negmi	r0, r0
  40e528:	f04f 0100 	mov.w	r1, #0
  40e52c:	e73e      	b.n	40e3ac <__adddf3+0x138>
  40e52e:	bf00      	nop

0040e530 <__aeabi_f2d>:
  40e530:	0042      	lsls	r2, r0, #1
  40e532:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40e536:	ea4f 0131 	mov.w	r1, r1, rrx
  40e53a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40e53e:	bf1f      	itttt	ne
  40e540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40e544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40e548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40e54c:	4770      	bxne	lr
  40e54e:	f092 0f00 	teq	r2, #0
  40e552:	bf14      	ite	ne
  40e554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40e558:	4770      	bxeq	lr
  40e55a:	b530      	push	{r4, r5, lr}
  40e55c:	f44f 7460 	mov.w	r4, #896	; 0x380
  40e560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40e564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40e568:	e720      	b.n	40e3ac <__adddf3+0x138>
  40e56a:	bf00      	nop

0040e56c <__aeabi_ul2d>:
  40e56c:	ea50 0201 	orrs.w	r2, r0, r1
  40e570:	bf08      	it	eq
  40e572:	4770      	bxeq	lr
  40e574:	b530      	push	{r4, r5, lr}
  40e576:	f04f 0500 	mov.w	r5, #0
  40e57a:	e00a      	b.n	40e592 <__aeabi_l2d+0x16>

0040e57c <__aeabi_l2d>:
  40e57c:	ea50 0201 	orrs.w	r2, r0, r1
  40e580:	bf08      	it	eq
  40e582:	4770      	bxeq	lr
  40e584:	b530      	push	{r4, r5, lr}
  40e586:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40e58a:	d502      	bpl.n	40e592 <__aeabi_l2d+0x16>
  40e58c:	4240      	negs	r0, r0
  40e58e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40e592:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40e596:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40e59a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40e59e:	f43f aedc 	beq.w	40e35a <__adddf3+0xe6>
  40e5a2:	f04f 0203 	mov.w	r2, #3
  40e5a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40e5aa:	bf18      	it	ne
  40e5ac:	3203      	addne	r2, #3
  40e5ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40e5b2:	bf18      	it	ne
  40e5b4:	3203      	addne	r2, #3
  40e5b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40e5ba:	f1c2 0320 	rsb	r3, r2, #32
  40e5be:	fa00 fc03 	lsl.w	ip, r0, r3
  40e5c2:	fa20 f002 	lsr.w	r0, r0, r2
  40e5c6:	fa01 fe03 	lsl.w	lr, r1, r3
  40e5ca:	ea40 000e 	orr.w	r0, r0, lr
  40e5ce:	fa21 f102 	lsr.w	r1, r1, r2
  40e5d2:	4414      	add	r4, r2
  40e5d4:	e6c1      	b.n	40e35a <__adddf3+0xe6>
  40e5d6:	bf00      	nop

0040e5d8 <__aeabi_dmul>:
  40e5d8:	b570      	push	{r4, r5, r6, lr}
  40e5da:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40e5de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40e5e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40e5e6:	bf1d      	ittte	ne
  40e5e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40e5ec:	ea94 0f0c 	teqne	r4, ip
  40e5f0:	ea95 0f0c 	teqne	r5, ip
  40e5f4:	f000 f8de 	bleq	40e7b4 <__aeabi_dmul+0x1dc>
  40e5f8:	442c      	add	r4, r5
  40e5fa:	ea81 0603 	eor.w	r6, r1, r3
  40e5fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40e602:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40e606:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40e60a:	bf18      	it	ne
  40e60c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40e610:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40e618:	d038      	beq.n	40e68c <__aeabi_dmul+0xb4>
  40e61a:	fba0 ce02 	umull	ip, lr, r0, r2
  40e61e:	f04f 0500 	mov.w	r5, #0
  40e622:	fbe1 e502 	umlal	lr, r5, r1, r2
  40e626:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40e62a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40e62e:	f04f 0600 	mov.w	r6, #0
  40e632:	fbe1 5603 	umlal	r5, r6, r1, r3
  40e636:	f09c 0f00 	teq	ip, #0
  40e63a:	bf18      	it	ne
  40e63c:	f04e 0e01 	orrne.w	lr, lr, #1
  40e640:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40e644:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40e648:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40e64c:	d204      	bcs.n	40e658 <__aeabi_dmul+0x80>
  40e64e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40e652:	416d      	adcs	r5, r5
  40e654:	eb46 0606 	adc.w	r6, r6, r6
  40e658:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40e65c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40e660:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40e664:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40e668:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40e66c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40e670:	bf88      	it	hi
  40e672:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40e676:	d81e      	bhi.n	40e6b6 <__aeabi_dmul+0xde>
  40e678:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40e67c:	bf08      	it	eq
  40e67e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40e682:	f150 0000 	adcs.w	r0, r0, #0
  40e686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e68a:	bd70      	pop	{r4, r5, r6, pc}
  40e68c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40e690:	ea46 0101 	orr.w	r1, r6, r1
  40e694:	ea40 0002 	orr.w	r0, r0, r2
  40e698:	ea81 0103 	eor.w	r1, r1, r3
  40e69c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40e6a0:	bfc2      	ittt	gt
  40e6a2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40e6a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40e6aa:	bd70      	popgt	{r4, r5, r6, pc}
  40e6ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e6b0:	f04f 0e00 	mov.w	lr, #0
  40e6b4:	3c01      	subs	r4, #1
  40e6b6:	f300 80ab 	bgt.w	40e810 <__aeabi_dmul+0x238>
  40e6ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40e6be:	bfde      	ittt	le
  40e6c0:	2000      	movle	r0, #0
  40e6c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40e6c6:	bd70      	pople	{r4, r5, r6, pc}
  40e6c8:	f1c4 0400 	rsb	r4, r4, #0
  40e6cc:	3c20      	subs	r4, #32
  40e6ce:	da35      	bge.n	40e73c <__aeabi_dmul+0x164>
  40e6d0:	340c      	adds	r4, #12
  40e6d2:	dc1b      	bgt.n	40e70c <__aeabi_dmul+0x134>
  40e6d4:	f104 0414 	add.w	r4, r4, #20
  40e6d8:	f1c4 0520 	rsb	r5, r4, #32
  40e6dc:	fa00 f305 	lsl.w	r3, r0, r5
  40e6e0:	fa20 f004 	lsr.w	r0, r0, r4
  40e6e4:	fa01 f205 	lsl.w	r2, r1, r5
  40e6e8:	ea40 0002 	orr.w	r0, r0, r2
  40e6ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40e6f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40e6f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40e6f8:	fa21 f604 	lsr.w	r6, r1, r4
  40e6fc:	eb42 0106 	adc.w	r1, r2, r6
  40e700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e704:	bf08      	it	eq
  40e706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e70a:	bd70      	pop	{r4, r5, r6, pc}
  40e70c:	f1c4 040c 	rsb	r4, r4, #12
  40e710:	f1c4 0520 	rsb	r5, r4, #32
  40e714:	fa00 f304 	lsl.w	r3, r0, r4
  40e718:	fa20 f005 	lsr.w	r0, r0, r5
  40e71c:	fa01 f204 	lsl.w	r2, r1, r4
  40e720:	ea40 0002 	orr.w	r0, r0, r2
  40e724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40e72c:	f141 0100 	adc.w	r1, r1, #0
  40e730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e734:	bf08      	it	eq
  40e736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e73a:	bd70      	pop	{r4, r5, r6, pc}
  40e73c:	f1c4 0520 	rsb	r5, r4, #32
  40e740:	fa00 f205 	lsl.w	r2, r0, r5
  40e744:	ea4e 0e02 	orr.w	lr, lr, r2
  40e748:	fa20 f304 	lsr.w	r3, r0, r4
  40e74c:	fa01 f205 	lsl.w	r2, r1, r5
  40e750:	ea43 0302 	orr.w	r3, r3, r2
  40e754:	fa21 f004 	lsr.w	r0, r1, r4
  40e758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e75c:	fa21 f204 	lsr.w	r2, r1, r4
  40e760:	ea20 0002 	bic.w	r0, r0, r2
  40e764:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40e768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e76c:	bf08      	it	eq
  40e76e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e772:	bd70      	pop	{r4, r5, r6, pc}
  40e774:	f094 0f00 	teq	r4, #0
  40e778:	d10f      	bne.n	40e79a <__aeabi_dmul+0x1c2>
  40e77a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40e77e:	0040      	lsls	r0, r0, #1
  40e780:	eb41 0101 	adc.w	r1, r1, r1
  40e784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e788:	bf08      	it	eq
  40e78a:	3c01      	subeq	r4, #1
  40e78c:	d0f7      	beq.n	40e77e <__aeabi_dmul+0x1a6>
  40e78e:	ea41 0106 	orr.w	r1, r1, r6
  40e792:	f095 0f00 	teq	r5, #0
  40e796:	bf18      	it	ne
  40e798:	4770      	bxne	lr
  40e79a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40e79e:	0052      	lsls	r2, r2, #1
  40e7a0:	eb43 0303 	adc.w	r3, r3, r3
  40e7a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40e7a8:	bf08      	it	eq
  40e7aa:	3d01      	subeq	r5, #1
  40e7ac:	d0f7      	beq.n	40e79e <__aeabi_dmul+0x1c6>
  40e7ae:	ea43 0306 	orr.w	r3, r3, r6
  40e7b2:	4770      	bx	lr
  40e7b4:	ea94 0f0c 	teq	r4, ip
  40e7b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e7bc:	bf18      	it	ne
  40e7be:	ea95 0f0c 	teqne	r5, ip
  40e7c2:	d00c      	beq.n	40e7de <__aeabi_dmul+0x206>
  40e7c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e7c8:	bf18      	it	ne
  40e7ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e7ce:	d1d1      	bne.n	40e774 <__aeabi_dmul+0x19c>
  40e7d0:	ea81 0103 	eor.w	r1, r1, r3
  40e7d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e7d8:	f04f 0000 	mov.w	r0, #0
  40e7dc:	bd70      	pop	{r4, r5, r6, pc}
  40e7de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e7e2:	bf06      	itte	eq
  40e7e4:	4610      	moveq	r0, r2
  40e7e6:	4619      	moveq	r1, r3
  40e7e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e7ec:	d019      	beq.n	40e822 <__aeabi_dmul+0x24a>
  40e7ee:	ea94 0f0c 	teq	r4, ip
  40e7f2:	d102      	bne.n	40e7fa <__aeabi_dmul+0x222>
  40e7f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40e7f8:	d113      	bne.n	40e822 <__aeabi_dmul+0x24a>
  40e7fa:	ea95 0f0c 	teq	r5, ip
  40e7fe:	d105      	bne.n	40e80c <__aeabi_dmul+0x234>
  40e800:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40e804:	bf1c      	itt	ne
  40e806:	4610      	movne	r0, r2
  40e808:	4619      	movne	r1, r3
  40e80a:	d10a      	bne.n	40e822 <__aeabi_dmul+0x24a>
  40e80c:	ea81 0103 	eor.w	r1, r1, r3
  40e810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e814:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40e81c:	f04f 0000 	mov.w	r0, #0
  40e820:	bd70      	pop	{r4, r5, r6, pc}
  40e822:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e826:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40e82a:	bd70      	pop	{r4, r5, r6, pc}

0040e82c <__aeabi_ddiv>:
  40e82c:	b570      	push	{r4, r5, r6, lr}
  40e82e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40e832:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40e836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40e83a:	bf1d      	ittte	ne
  40e83c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40e840:	ea94 0f0c 	teqne	r4, ip
  40e844:	ea95 0f0c 	teqne	r5, ip
  40e848:	f000 f8a7 	bleq	40e99a <__aeabi_ddiv+0x16e>
  40e84c:	eba4 0405 	sub.w	r4, r4, r5
  40e850:	ea81 0e03 	eor.w	lr, r1, r3
  40e854:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e858:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40e85c:	f000 8088 	beq.w	40e970 <__aeabi_ddiv+0x144>
  40e860:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40e864:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40e868:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40e86c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40e870:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40e874:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40e878:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40e87c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40e880:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40e884:	429d      	cmp	r5, r3
  40e886:	bf08      	it	eq
  40e888:	4296      	cmpeq	r6, r2
  40e88a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40e88e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40e892:	d202      	bcs.n	40e89a <__aeabi_ddiv+0x6e>
  40e894:	085b      	lsrs	r3, r3, #1
  40e896:	ea4f 0232 	mov.w	r2, r2, rrx
  40e89a:	1ab6      	subs	r6, r6, r2
  40e89c:	eb65 0503 	sbc.w	r5, r5, r3
  40e8a0:	085b      	lsrs	r3, r3, #1
  40e8a2:	ea4f 0232 	mov.w	r2, r2, rrx
  40e8a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40e8aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40e8ae:	ebb6 0e02 	subs.w	lr, r6, r2
  40e8b2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e8b6:	bf22      	ittt	cs
  40e8b8:	1ab6      	subcs	r6, r6, r2
  40e8ba:	4675      	movcs	r5, lr
  40e8bc:	ea40 000c 	orrcs.w	r0, r0, ip
  40e8c0:	085b      	lsrs	r3, r3, #1
  40e8c2:	ea4f 0232 	mov.w	r2, r2, rrx
  40e8c6:	ebb6 0e02 	subs.w	lr, r6, r2
  40e8ca:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e8ce:	bf22      	ittt	cs
  40e8d0:	1ab6      	subcs	r6, r6, r2
  40e8d2:	4675      	movcs	r5, lr
  40e8d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40e8d8:	085b      	lsrs	r3, r3, #1
  40e8da:	ea4f 0232 	mov.w	r2, r2, rrx
  40e8de:	ebb6 0e02 	subs.w	lr, r6, r2
  40e8e2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e8e6:	bf22      	ittt	cs
  40e8e8:	1ab6      	subcs	r6, r6, r2
  40e8ea:	4675      	movcs	r5, lr
  40e8ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40e8f0:	085b      	lsrs	r3, r3, #1
  40e8f2:	ea4f 0232 	mov.w	r2, r2, rrx
  40e8f6:	ebb6 0e02 	subs.w	lr, r6, r2
  40e8fa:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e8fe:	bf22      	ittt	cs
  40e900:	1ab6      	subcs	r6, r6, r2
  40e902:	4675      	movcs	r5, lr
  40e904:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40e908:	ea55 0e06 	orrs.w	lr, r5, r6
  40e90c:	d018      	beq.n	40e940 <__aeabi_ddiv+0x114>
  40e90e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40e912:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40e916:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40e91a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40e91e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40e922:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40e926:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40e92a:	d1c0      	bne.n	40e8ae <__aeabi_ddiv+0x82>
  40e92c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e930:	d10b      	bne.n	40e94a <__aeabi_ddiv+0x11e>
  40e932:	ea41 0100 	orr.w	r1, r1, r0
  40e936:	f04f 0000 	mov.w	r0, #0
  40e93a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40e93e:	e7b6      	b.n	40e8ae <__aeabi_ddiv+0x82>
  40e940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e944:	bf04      	itt	eq
  40e946:	4301      	orreq	r1, r0
  40e948:	2000      	moveq	r0, #0
  40e94a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40e94e:	bf88      	it	hi
  40e950:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40e954:	f63f aeaf 	bhi.w	40e6b6 <__aeabi_dmul+0xde>
  40e958:	ebb5 0c03 	subs.w	ip, r5, r3
  40e95c:	bf04      	itt	eq
  40e95e:	ebb6 0c02 	subseq.w	ip, r6, r2
  40e962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40e966:	f150 0000 	adcs.w	r0, r0, #0
  40e96a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e96e:	bd70      	pop	{r4, r5, r6, pc}
  40e970:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40e974:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40e978:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40e97c:	bfc2      	ittt	gt
  40e97e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40e982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40e986:	bd70      	popgt	{r4, r5, r6, pc}
  40e988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e98c:	f04f 0e00 	mov.w	lr, #0
  40e990:	3c01      	subs	r4, #1
  40e992:	e690      	b.n	40e6b6 <__aeabi_dmul+0xde>
  40e994:	ea45 0e06 	orr.w	lr, r5, r6
  40e998:	e68d      	b.n	40e6b6 <__aeabi_dmul+0xde>
  40e99a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e99e:	ea94 0f0c 	teq	r4, ip
  40e9a2:	bf08      	it	eq
  40e9a4:	ea95 0f0c 	teqeq	r5, ip
  40e9a8:	f43f af3b 	beq.w	40e822 <__aeabi_dmul+0x24a>
  40e9ac:	ea94 0f0c 	teq	r4, ip
  40e9b0:	d10a      	bne.n	40e9c8 <__aeabi_ddiv+0x19c>
  40e9b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40e9b6:	f47f af34 	bne.w	40e822 <__aeabi_dmul+0x24a>
  40e9ba:	ea95 0f0c 	teq	r5, ip
  40e9be:	f47f af25 	bne.w	40e80c <__aeabi_dmul+0x234>
  40e9c2:	4610      	mov	r0, r2
  40e9c4:	4619      	mov	r1, r3
  40e9c6:	e72c      	b.n	40e822 <__aeabi_dmul+0x24a>
  40e9c8:	ea95 0f0c 	teq	r5, ip
  40e9cc:	d106      	bne.n	40e9dc <__aeabi_ddiv+0x1b0>
  40e9ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e9d2:	f43f aefd 	beq.w	40e7d0 <__aeabi_dmul+0x1f8>
  40e9d6:	4610      	mov	r0, r2
  40e9d8:	4619      	mov	r1, r3
  40e9da:	e722      	b.n	40e822 <__aeabi_dmul+0x24a>
  40e9dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e9e0:	bf18      	it	ne
  40e9e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e9e6:	f47f aec5 	bne.w	40e774 <__aeabi_dmul+0x19c>
  40e9ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40e9ee:	f47f af0d 	bne.w	40e80c <__aeabi_dmul+0x234>
  40e9f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40e9f6:	f47f aeeb 	bne.w	40e7d0 <__aeabi_dmul+0x1f8>
  40e9fa:	e712      	b.n	40e822 <__aeabi_dmul+0x24a>

0040e9fc <__gedf2>:
  40e9fc:	f04f 3cff 	mov.w	ip, #4294967295
  40ea00:	e006      	b.n	40ea10 <__cmpdf2+0x4>
  40ea02:	bf00      	nop

0040ea04 <__ledf2>:
  40ea04:	f04f 0c01 	mov.w	ip, #1
  40ea08:	e002      	b.n	40ea10 <__cmpdf2+0x4>
  40ea0a:	bf00      	nop

0040ea0c <__cmpdf2>:
  40ea0c:	f04f 0c01 	mov.w	ip, #1
  40ea10:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ea14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ea18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ea1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ea20:	bf18      	it	ne
  40ea22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40ea26:	d01b      	beq.n	40ea60 <__cmpdf2+0x54>
  40ea28:	b001      	add	sp, #4
  40ea2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40ea2e:	bf0c      	ite	eq
  40ea30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40ea34:	ea91 0f03 	teqne	r1, r3
  40ea38:	bf02      	ittt	eq
  40ea3a:	ea90 0f02 	teqeq	r0, r2
  40ea3e:	2000      	moveq	r0, #0
  40ea40:	4770      	bxeq	lr
  40ea42:	f110 0f00 	cmn.w	r0, #0
  40ea46:	ea91 0f03 	teq	r1, r3
  40ea4a:	bf58      	it	pl
  40ea4c:	4299      	cmppl	r1, r3
  40ea4e:	bf08      	it	eq
  40ea50:	4290      	cmpeq	r0, r2
  40ea52:	bf2c      	ite	cs
  40ea54:	17d8      	asrcs	r0, r3, #31
  40ea56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40ea5a:	f040 0001 	orr.w	r0, r0, #1
  40ea5e:	4770      	bx	lr
  40ea60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ea64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ea68:	d102      	bne.n	40ea70 <__cmpdf2+0x64>
  40ea6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ea6e:	d107      	bne.n	40ea80 <__cmpdf2+0x74>
  40ea70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ea74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ea78:	d1d6      	bne.n	40ea28 <__cmpdf2+0x1c>
  40ea7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ea7e:	d0d3      	beq.n	40ea28 <__cmpdf2+0x1c>
  40ea80:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ea84:	4770      	bx	lr
  40ea86:	bf00      	nop

0040ea88 <__aeabi_cdrcmple>:
  40ea88:	4684      	mov	ip, r0
  40ea8a:	4610      	mov	r0, r2
  40ea8c:	4662      	mov	r2, ip
  40ea8e:	468c      	mov	ip, r1
  40ea90:	4619      	mov	r1, r3
  40ea92:	4663      	mov	r3, ip
  40ea94:	e000      	b.n	40ea98 <__aeabi_cdcmpeq>
  40ea96:	bf00      	nop

0040ea98 <__aeabi_cdcmpeq>:
  40ea98:	b501      	push	{r0, lr}
  40ea9a:	f7ff ffb7 	bl	40ea0c <__cmpdf2>
  40ea9e:	2800      	cmp	r0, #0
  40eaa0:	bf48      	it	mi
  40eaa2:	f110 0f00 	cmnmi.w	r0, #0
  40eaa6:	bd01      	pop	{r0, pc}

0040eaa8 <__aeabi_dcmpeq>:
  40eaa8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40eaac:	f7ff fff4 	bl	40ea98 <__aeabi_cdcmpeq>
  40eab0:	bf0c      	ite	eq
  40eab2:	2001      	moveq	r0, #1
  40eab4:	2000      	movne	r0, #0
  40eab6:	f85d fb08 	ldr.w	pc, [sp], #8
  40eaba:	bf00      	nop

0040eabc <__aeabi_dcmplt>:
  40eabc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40eac0:	f7ff ffea 	bl	40ea98 <__aeabi_cdcmpeq>
  40eac4:	bf34      	ite	cc
  40eac6:	2001      	movcc	r0, #1
  40eac8:	2000      	movcs	r0, #0
  40eaca:	f85d fb08 	ldr.w	pc, [sp], #8
  40eace:	bf00      	nop

0040ead0 <__aeabi_dcmple>:
  40ead0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ead4:	f7ff ffe0 	bl	40ea98 <__aeabi_cdcmpeq>
  40ead8:	bf94      	ite	ls
  40eada:	2001      	movls	r0, #1
  40eadc:	2000      	movhi	r0, #0
  40eade:	f85d fb08 	ldr.w	pc, [sp], #8
  40eae2:	bf00      	nop

0040eae4 <__aeabi_dcmpge>:
  40eae4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40eae8:	f7ff ffce 	bl	40ea88 <__aeabi_cdrcmple>
  40eaec:	bf94      	ite	ls
  40eaee:	2001      	movls	r0, #1
  40eaf0:	2000      	movhi	r0, #0
  40eaf2:	f85d fb08 	ldr.w	pc, [sp], #8
  40eaf6:	bf00      	nop

0040eaf8 <__aeabi_dcmpgt>:
  40eaf8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40eafc:	f7ff ffc4 	bl	40ea88 <__aeabi_cdrcmple>
  40eb00:	bf34      	ite	cc
  40eb02:	2001      	movcc	r0, #1
  40eb04:	2000      	movcs	r0, #0
  40eb06:	f85d fb08 	ldr.w	pc, [sp], #8
  40eb0a:	bf00      	nop

0040eb0c <__aeabi_dcmpun>:
  40eb0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40eb10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40eb14:	d102      	bne.n	40eb1c <__aeabi_dcmpun+0x10>
  40eb16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40eb1a:	d10a      	bne.n	40eb32 <__aeabi_dcmpun+0x26>
  40eb1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40eb20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40eb24:	d102      	bne.n	40eb2c <__aeabi_dcmpun+0x20>
  40eb26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40eb2a:	d102      	bne.n	40eb32 <__aeabi_dcmpun+0x26>
  40eb2c:	f04f 0000 	mov.w	r0, #0
  40eb30:	4770      	bx	lr
  40eb32:	f04f 0001 	mov.w	r0, #1
  40eb36:	4770      	bx	lr

0040eb38 <__aeabi_d2iz>:
  40eb38:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40eb3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40eb40:	d215      	bcs.n	40eb6e <__aeabi_d2iz+0x36>
  40eb42:	d511      	bpl.n	40eb68 <__aeabi_d2iz+0x30>
  40eb44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40eb48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40eb4c:	d912      	bls.n	40eb74 <__aeabi_d2iz+0x3c>
  40eb4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40eb52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40eb56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40eb5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40eb5e:	fa23 f002 	lsr.w	r0, r3, r2
  40eb62:	bf18      	it	ne
  40eb64:	4240      	negne	r0, r0
  40eb66:	4770      	bx	lr
  40eb68:	f04f 0000 	mov.w	r0, #0
  40eb6c:	4770      	bx	lr
  40eb6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40eb72:	d105      	bne.n	40eb80 <__aeabi_d2iz+0x48>
  40eb74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40eb78:	bf08      	it	eq
  40eb7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40eb7e:	4770      	bx	lr
  40eb80:	f04f 0000 	mov.w	r0, #0
  40eb84:	4770      	bx	lr
  40eb86:	bf00      	nop

0040eb88 <__aeabi_d2uiz>:
  40eb88:	004a      	lsls	r2, r1, #1
  40eb8a:	d211      	bcs.n	40ebb0 <__aeabi_d2uiz+0x28>
  40eb8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40eb90:	d211      	bcs.n	40ebb6 <__aeabi_d2uiz+0x2e>
  40eb92:	d50d      	bpl.n	40ebb0 <__aeabi_d2uiz+0x28>
  40eb94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40eb98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40eb9c:	d40e      	bmi.n	40ebbc <__aeabi_d2uiz+0x34>
  40eb9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40eba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40eba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40ebaa:	fa23 f002 	lsr.w	r0, r3, r2
  40ebae:	4770      	bx	lr
  40ebb0:	f04f 0000 	mov.w	r0, #0
  40ebb4:	4770      	bx	lr
  40ebb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40ebba:	d102      	bne.n	40ebc2 <__aeabi_d2uiz+0x3a>
  40ebbc:	f04f 30ff 	mov.w	r0, #4294967295
  40ebc0:	4770      	bx	lr
  40ebc2:	f04f 0000 	mov.w	r0, #0
  40ebc6:	4770      	bx	lr

0040ebc8 <__aeabi_d2f>:
  40ebc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40ebcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40ebd0:	bf24      	itt	cs
  40ebd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40ebd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40ebda:	d90d      	bls.n	40ebf8 <__aeabi_d2f+0x30>
  40ebdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40ebe0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40ebe4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40ebe8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40ebec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40ebf0:	bf08      	it	eq
  40ebf2:	f020 0001 	biceq.w	r0, r0, #1
  40ebf6:	4770      	bx	lr
  40ebf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40ebfc:	d121      	bne.n	40ec42 <__aeabi_d2f+0x7a>
  40ebfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40ec02:	bfbc      	itt	lt
  40ec04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40ec08:	4770      	bxlt	lr
  40ec0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ec0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40ec12:	f1c2 0218 	rsb	r2, r2, #24
  40ec16:	f1c2 0c20 	rsb	ip, r2, #32
  40ec1a:	fa10 f30c 	lsls.w	r3, r0, ip
  40ec1e:	fa20 f002 	lsr.w	r0, r0, r2
  40ec22:	bf18      	it	ne
  40ec24:	f040 0001 	orrne.w	r0, r0, #1
  40ec28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ec2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40ec30:	fa03 fc0c 	lsl.w	ip, r3, ip
  40ec34:	ea40 000c 	orr.w	r0, r0, ip
  40ec38:	fa23 f302 	lsr.w	r3, r3, r2
  40ec3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40ec40:	e7cc      	b.n	40ebdc <__aeabi_d2f+0x14>
  40ec42:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40ec46:	d107      	bne.n	40ec58 <__aeabi_d2f+0x90>
  40ec48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40ec4c:	bf1e      	ittt	ne
  40ec4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40ec52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40ec56:	4770      	bxne	lr
  40ec58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40ec5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40ec60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40ec64:	4770      	bx	lr
  40ec66:	bf00      	nop

0040ec68 <__aeabi_frsub>:
  40ec68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40ec6c:	e002      	b.n	40ec74 <__addsf3>
  40ec6e:	bf00      	nop

0040ec70 <__aeabi_fsub>:
  40ec70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040ec74 <__addsf3>:
  40ec74:	0042      	lsls	r2, r0, #1
  40ec76:	bf1f      	itttt	ne
  40ec78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40ec7c:	ea92 0f03 	teqne	r2, r3
  40ec80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40ec84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40ec88:	d06a      	beq.n	40ed60 <__addsf3+0xec>
  40ec8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40ec8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40ec92:	bfc1      	itttt	gt
  40ec94:	18d2      	addgt	r2, r2, r3
  40ec96:	4041      	eorgt	r1, r0
  40ec98:	4048      	eorgt	r0, r1
  40ec9a:	4041      	eorgt	r1, r0
  40ec9c:	bfb8      	it	lt
  40ec9e:	425b      	neglt	r3, r3
  40eca0:	2b19      	cmp	r3, #25
  40eca2:	bf88      	it	hi
  40eca4:	4770      	bxhi	lr
  40eca6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40ecaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40ecae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40ecb2:	bf18      	it	ne
  40ecb4:	4240      	negne	r0, r0
  40ecb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ecba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40ecbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40ecc2:	bf18      	it	ne
  40ecc4:	4249      	negne	r1, r1
  40ecc6:	ea92 0f03 	teq	r2, r3
  40ecca:	d03f      	beq.n	40ed4c <__addsf3+0xd8>
  40eccc:	f1a2 0201 	sub.w	r2, r2, #1
  40ecd0:	fa41 fc03 	asr.w	ip, r1, r3
  40ecd4:	eb10 000c 	adds.w	r0, r0, ip
  40ecd8:	f1c3 0320 	rsb	r3, r3, #32
  40ecdc:	fa01 f103 	lsl.w	r1, r1, r3
  40ece0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40ece4:	d502      	bpl.n	40ecec <__addsf3+0x78>
  40ece6:	4249      	negs	r1, r1
  40ece8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  40ecec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40ecf0:	d313      	bcc.n	40ed1a <__addsf3+0xa6>
  40ecf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40ecf6:	d306      	bcc.n	40ed06 <__addsf3+0x92>
  40ecf8:	0840      	lsrs	r0, r0, #1
  40ecfa:	ea4f 0131 	mov.w	r1, r1, rrx
  40ecfe:	f102 0201 	add.w	r2, r2, #1
  40ed02:	2afe      	cmp	r2, #254	; 0xfe
  40ed04:	d251      	bcs.n	40edaa <__addsf3+0x136>
  40ed06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40ed0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40ed0e:	bf08      	it	eq
  40ed10:	f020 0001 	biceq.w	r0, r0, #1
  40ed14:	ea40 0003 	orr.w	r0, r0, r3
  40ed18:	4770      	bx	lr
  40ed1a:	0049      	lsls	r1, r1, #1
  40ed1c:	eb40 0000 	adc.w	r0, r0, r0
  40ed20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40ed24:	f1a2 0201 	sub.w	r2, r2, #1
  40ed28:	d1ed      	bne.n	40ed06 <__addsf3+0x92>
  40ed2a:	fab0 fc80 	clz	ip, r0
  40ed2e:	f1ac 0c08 	sub.w	ip, ip, #8
  40ed32:	ebb2 020c 	subs.w	r2, r2, ip
  40ed36:	fa00 f00c 	lsl.w	r0, r0, ip
  40ed3a:	bfaa      	itet	ge
  40ed3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40ed40:	4252      	neglt	r2, r2
  40ed42:	4318      	orrge	r0, r3
  40ed44:	bfbc      	itt	lt
  40ed46:	40d0      	lsrlt	r0, r2
  40ed48:	4318      	orrlt	r0, r3
  40ed4a:	4770      	bx	lr
  40ed4c:	f092 0f00 	teq	r2, #0
  40ed50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40ed54:	bf06      	itte	eq
  40ed56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40ed5a:	3201      	addeq	r2, #1
  40ed5c:	3b01      	subne	r3, #1
  40ed5e:	e7b5      	b.n	40eccc <__addsf3+0x58>
  40ed60:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40ed64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40ed68:	bf18      	it	ne
  40ed6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40ed6e:	d021      	beq.n	40edb4 <__addsf3+0x140>
  40ed70:	ea92 0f03 	teq	r2, r3
  40ed74:	d004      	beq.n	40ed80 <__addsf3+0x10c>
  40ed76:	f092 0f00 	teq	r2, #0
  40ed7a:	bf08      	it	eq
  40ed7c:	4608      	moveq	r0, r1
  40ed7e:	4770      	bx	lr
  40ed80:	ea90 0f01 	teq	r0, r1
  40ed84:	bf1c      	itt	ne
  40ed86:	2000      	movne	r0, #0
  40ed88:	4770      	bxne	lr
  40ed8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40ed8e:	d104      	bne.n	40ed9a <__addsf3+0x126>
  40ed90:	0040      	lsls	r0, r0, #1
  40ed92:	bf28      	it	cs
  40ed94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40ed98:	4770      	bx	lr
  40ed9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40ed9e:	bf3c      	itt	cc
  40eda0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40eda4:	4770      	bxcc	lr
  40eda6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40edaa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40edae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40edb2:	4770      	bx	lr
  40edb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40edb8:	bf16      	itet	ne
  40edba:	4608      	movne	r0, r1
  40edbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40edc0:	4601      	movne	r1, r0
  40edc2:	0242      	lsls	r2, r0, #9
  40edc4:	bf06      	itte	eq
  40edc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40edca:	ea90 0f01 	teqeq	r0, r1
  40edce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40edd2:	4770      	bx	lr

0040edd4 <__aeabi_ui2f>:
  40edd4:	f04f 0300 	mov.w	r3, #0
  40edd8:	e004      	b.n	40ede4 <__aeabi_i2f+0x8>
  40edda:	bf00      	nop

0040eddc <__aeabi_i2f>:
  40eddc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40ede0:	bf48      	it	mi
  40ede2:	4240      	negmi	r0, r0
  40ede4:	ea5f 0c00 	movs.w	ip, r0
  40ede8:	bf08      	it	eq
  40edea:	4770      	bxeq	lr
  40edec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40edf0:	4601      	mov	r1, r0
  40edf2:	f04f 0000 	mov.w	r0, #0
  40edf6:	e01c      	b.n	40ee32 <__aeabi_l2f+0x2a>

0040edf8 <__aeabi_ul2f>:
  40edf8:	ea50 0201 	orrs.w	r2, r0, r1
  40edfc:	bf08      	it	eq
  40edfe:	4770      	bxeq	lr
  40ee00:	f04f 0300 	mov.w	r3, #0
  40ee04:	e00a      	b.n	40ee1c <__aeabi_l2f+0x14>
  40ee06:	bf00      	nop

0040ee08 <__aeabi_l2f>:
  40ee08:	ea50 0201 	orrs.w	r2, r0, r1
  40ee0c:	bf08      	it	eq
  40ee0e:	4770      	bxeq	lr
  40ee10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40ee14:	d502      	bpl.n	40ee1c <__aeabi_l2f+0x14>
  40ee16:	4240      	negs	r0, r0
  40ee18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ee1c:	ea5f 0c01 	movs.w	ip, r1
  40ee20:	bf02      	ittt	eq
  40ee22:	4684      	moveq	ip, r0
  40ee24:	4601      	moveq	r1, r0
  40ee26:	2000      	moveq	r0, #0
  40ee28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40ee2c:	bf08      	it	eq
  40ee2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40ee32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40ee36:	fabc f28c 	clz	r2, ip
  40ee3a:	3a08      	subs	r2, #8
  40ee3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40ee40:	db10      	blt.n	40ee64 <__aeabi_l2f+0x5c>
  40ee42:	fa01 fc02 	lsl.w	ip, r1, r2
  40ee46:	4463      	add	r3, ip
  40ee48:	fa00 fc02 	lsl.w	ip, r0, r2
  40ee4c:	f1c2 0220 	rsb	r2, r2, #32
  40ee50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40ee54:	fa20 f202 	lsr.w	r2, r0, r2
  40ee58:	eb43 0002 	adc.w	r0, r3, r2
  40ee5c:	bf08      	it	eq
  40ee5e:	f020 0001 	biceq.w	r0, r0, #1
  40ee62:	4770      	bx	lr
  40ee64:	f102 0220 	add.w	r2, r2, #32
  40ee68:	fa01 fc02 	lsl.w	ip, r1, r2
  40ee6c:	f1c2 0220 	rsb	r2, r2, #32
  40ee70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40ee74:	fa21 f202 	lsr.w	r2, r1, r2
  40ee78:	eb43 0002 	adc.w	r0, r3, r2
  40ee7c:	bf08      	it	eq
  40ee7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40ee82:	4770      	bx	lr

0040ee84 <__aeabi_f2lz>:
  40ee84:	ee07 0a90 	vmov	s15, r0
  40ee88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40ee8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40ee90:	d401      	bmi.n	40ee96 <__aeabi_f2lz+0x12>
  40ee92:	f000 b809 	b.w	40eea8 <__aeabi_f2ulz>
  40ee96:	b508      	push	{r3, lr}
  40ee98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40ee9c:	f000 f804 	bl	40eea8 <__aeabi_f2ulz>
  40eea0:	4240      	negs	r0, r0
  40eea2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40eea6:	bd08      	pop	{r3, pc}

0040eea8 <__aeabi_f2ulz>:
  40eea8:	b5d0      	push	{r4, r6, r7, lr}
  40eeaa:	f7ff fb41 	bl	40e530 <__aeabi_f2d>
  40eeae:	2200      	movs	r2, #0
  40eeb0:	4b0e      	ldr	r3, [pc, #56]	; (40eeec <__aeabi_f2ulz+0x44>)
  40eeb2:	4606      	mov	r6, r0
  40eeb4:	460f      	mov	r7, r1
  40eeb6:	f7ff fb8f 	bl	40e5d8 <__aeabi_dmul>
  40eeba:	f7ff fe65 	bl	40eb88 <__aeabi_d2uiz>
  40eebe:	4604      	mov	r4, r0
  40eec0:	f7ff fb14 	bl	40e4ec <__aeabi_ui2d>
  40eec4:	2200      	movs	r2, #0
  40eec6:	4b0a      	ldr	r3, [pc, #40]	; (40eef0 <__aeabi_f2ulz+0x48>)
  40eec8:	f7ff fb86 	bl	40e5d8 <__aeabi_dmul>
  40eecc:	4602      	mov	r2, r0
  40eece:	460b      	mov	r3, r1
  40eed0:	4630      	mov	r0, r6
  40eed2:	4639      	mov	r1, r7
  40eed4:	f7ff f9cc 	bl	40e270 <__aeabi_dsub>
  40eed8:	f7ff fe56 	bl	40eb88 <__aeabi_d2uiz>
  40eedc:	4623      	mov	r3, r4
  40eede:	2200      	movs	r2, #0
  40eee0:	ea42 0200 	orr.w	r2, r2, r0
  40eee4:	4610      	mov	r0, r2
  40eee6:	4619      	mov	r1, r3
  40eee8:	bdd0      	pop	{r4, r6, r7, pc}
  40eeea:	bf00      	nop
  40eeec:	3df00000 	.word	0x3df00000
  40eef0:	41f00000 	.word	0x41f00000

0040eef4 <__udivmoddi4>:
  40eef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40eef8:	468c      	mov	ip, r1
  40eefa:	460d      	mov	r5, r1
  40eefc:	4604      	mov	r4, r0
  40eefe:	9e08      	ldr	r6, [sp, #32]
  40ef00:	2b00      	cmp	r3, #0
  40ef02:	d151      	bne.n	40efa8 <__udivmoddi4+0xb4>
  40ef04:	428a      	cmp	r2, r1
  40ef06:	4617      	mov	r7, r2
  40ef08:	d96d      	bls.n	40efe6 <__udivmoddi4+0xf2>
  40ef0a:	fab2 fe82 	clz	lr, r2
  40ef0e:	f1be 0f00 	cmp.w	lr, #0
  40ef12:	d00b      	beq.n	40ef2c <__udivmoddi4+0x38>
  40ef14:	f1ce 0c20 	rsb	ip, lr, #32
  40ef18:	fa01 f50e 	lsl.w	r5, r1, lr
  40ef1c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ef20:	fa02 f70e 	lsl.w	r7, r2, lr
  40ef24:	ea4c 0c05 	orr.w	ip, ip, r5
  40ef28:	fa00 f40e 	lsl.w	r4, r0, lr
  40ef2c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40ef30:	0c25      	lsrs	r5, r4, #16
  40ef32:	fbbc f8fa 	udiv	r8, ip, sl
  40ef36:	fa1f f987 	uxth.w	r9, r7
  40ef3a:	fb0a cc18 	mls	ip, sl, r8, ip
  40ef3e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40ef42:	fb08 f309 	mul.w	r3, r8, r9
  40ef46:	42ab      	cmp	r3, r5
  40ef48:	d90a      	bls.n	40ef60 <__udivmoddi4+0x6c>
  40ef4a:	19ed      	adds	r5, r5, r7
  40ef4c:	f108 32ff 	add.w	r2, r8, #4294967295
  40ef50:	f080 8123 	bcs.w	40f19a <__udivmoddi4+0x2a6>
  40ef54:	42ab      	cmp	r3, r5
  40ef56:	f240 8120 	bls.w	40f19a <__udivmoddi4+0x2a6>
  40ef5a:	f1a8 0802 	sub.w	r8, r8, #2
  40ef5e:	443d      	add	r5, r7
  40ef60:	1aed      	subs	r5, r5, r3
  40ef62:	b2a4      	uxth	r4, r4
  40ef64:	fbb5 f0fa 	udiv	r0, r5, sl
  40ef68:	fb0a 5510 	mls	r5, sl, r0, r5
  40ef6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40ef70:	fb00 f909 	mul.w	r9, r0, r9
  40ef74:	45a1      	cmp	r9, r4
  40ef76:	d909      	bls.n	40ef8c <__udivmoddi4+0x98>
  40ef78:	19e4      	adds	r4, r4, r7
  40ef7a:	f100 33ff 	add.w	r3, r0, #4294967295
  40ef7e:	f080 810a 	bcs.w	40f196 <__udivmoddi4+0x2a2>
  40ef82:	45a1      	cmp	r9, r4
  40ef84:	f240 8107 	bls.w	40f196 <__udivmoddi4+0x2a2>
  40ef88:	3802      	subs	r0, #2
  40ef8a:	443c      	add	r4, r7
  40ef8c:	eba4 0409 	sub.w	r4, r4, r9
  40ef90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40ef94:	2100      	movs	r1, #0
  40ef96:	2e00      	cmp	r6, #0
  40ef98:	d061      	beq.n	40f05e <__udivmoddi4+0x16a>
  40ef9a:	fa24 f40e 	lsr.w	r4, r4, lr
  40ef9e:	2300      	movs	r3, #0
  40efa0:	6034      	str	r4, [r6, #0]
  40efa2:	6073      	str	r3, [r6, #4]
  40efa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40efa8:	428b      	cmp	r3, r1
  40efaa:	d907      	bls.n	40efbc <__udivmoddi4+0xc8>
  40efac:	2e00      	cmp	r6, #0
  40efae:	d054      	beq.n	40f05a <__udivmoddi4+0x166>
  40efb0:	2100      	movs	r1, #0
  40efb2:	e886 0021 	stmia.w	r6, {r0, r5}
  40efb6:	4608      	mov	r0, r1
  40efb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40efbc:	fab3 f183 	clz	r1, r3
  40efc0:	2900      	cmp	r1, #0
  40efc2:	f040 808e 	bne.w	40f0e2 <__udivmoddi4+0x1ee>
  40efc6:	42ab      	cmp	r3, r5
  40efc8:	d302      	bcc.n	40efd0 <__udivmoddi4+0xdc>
  40efca:	4282      	cmp	r2, r0
  40efcc:	f200 80fa 	bhi.w	40f1c4 <__udivmoddi4+0x2d0>
  40efd0:	1a84      	subs	r4, r0, r2
  40efd2:	eb65 0503 	sbc.w	r5, r5, r3
  40efd6:	2001      	movs	r0, #1
  40efd8:	46ac      	mov	ip, r5
  40efda:	2e00      	cmp	r6, #0
  40efdc:	d03f      	beq.n	40f05e <__udivmoddi4+0x16a>
  40efde:	e886 1010 	stmia.w	r6, {r4, ip}
  40efe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40efe6:	b912      	cbnz	r2, 40efee <__udivmoddi4+0xfa>
  40efe8:	2701      	movs	r7, #1
  40efea:	fbb7 f7f2 	udiv	r7, r7, r2
  40efee:	fab7 fe87 	clz	lr, r7
  40eff2:	f1be 0f00 	cmp.w	lr, #0
  40eff6:	d134      	bne.n	40f062 <__udivmoddi4+0x16e>
  40eff8:	1beb      	subs	r3, r5, r7
  40effa:	0c3a      	lsrs	r2, r7, #16
  40effc:	fa1f fc87 	uxth.w	ip, r7
  40f000:	2101      	movs	r1, #1
  40f002:	fbb3 f8f2 	udiv	r8, r3, r2
  40f006:	0c25      	lsrs	r5, r4, #16
  40f008:	fb02 3318 	mls	r3, r2, r8, r3
  40f00c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f010:	fb0c f308 	mul.w	r3, ip, r8
  40f014:	42ab      	cmp	r3, r5
  40f016:	d907      	bls.n	40f028 <__udivmoddi4+0x134>
  40f018:	19ed      	adds	r5, r5, r7
  40f01a:	f108 30ff 	add.w	r0, r8, #4294967295
  40f01e:	d202      	bcs.n	40f026 <__udivmoddi4+0x132>
  40f020:	42ab      	cmp	r3, r5
  40f022:	f200 80d1 	bhi.w	40f1c8 <__udivmoddi4+0x2d4>
  40f026:	4680      	mov	r8, r0
  40f028:	1aed      	subs	r5, r5, r3
  40f02a:	b2a3      	uxth	r3, r4
  40f02c:	fbb5 f0f2 	udiv	r0, r5, r2
  40f030:	fb02 5510 	mls	r5, r2, r0, r5
  40f034:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40f038:	fb0c fc00 	mul.w	ip, ip, r0
  40f03c:	45a4      	cmp	ip, r4
  40f03e:	d907      	bls.n	40f050 <__udivmoddi4+0x15c>
  40f040:	19e4      	adds	r4, r4, r7
  40f042:	f100 33ff 	add.w	r3, r0, #4294967295
  40f046:	d202      	bcs.n	40f04e <__udivmoddi4+0x15a>
  40f048:	45a4      	cmp	ip, r4
  40f04a:	f200 80b8 	bhi.w	40f1be <__udivmoddi4+0x2ca>
  40f04e:	4618      	mov	r0, r3
  40f050:	eba4 040c 	sub.w	r4, r4, ip
  40f054:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40f058:	e79d      	b.n	40ef96 <__udivmoddi4+0xa2>
  40f05a:	4631      	mov	r1, r6
  40f05c:	4630      	mov	r0, r6
  40f05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f062:	f1ce 0420 	rsb	r4, lr, #32
  40f066:	fa05 f30e 	lsl.w	r3, r5, lr
  40f06a:	fa07 f70e 	lsl.w	r7, r7, lr
  40f06e:	fa20 f804 	lsr.w	r8, r0, r4
  40f072:	0c3a      	lsrs	r2, r7, #16
  40f074:	fa25 f404 	lsr.w	r4, r5, r4
  40f078:	ea48 0803 	orr.w	r8, r8, r3
  40f07c:	fbb4 f1f2 	udiv	r1, r4, r2
  40f080:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40f084:	fb02 4411 	mls	r4, r2, r1, r4
  40f088:	fa1f fc87 	uxth.w	ip, r7
  40f08c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40f090:	fb01 f30c 	mul.w	r3, r1, ip
  40f094:	42ab      	cmp	r3, r5
  40f096:	fa00 f40e 	lsl.w	r4, r0, lr
  40f09a:	d909      	bls.n	40f0b0 <__udivmoddi4+0x1bc>
  40f09c:	19ed      	adds	r5, r5, r7
  40f09e:	f101 30ff 	add.w	r0, r1, #4294967295
  40f0a2:	f080 808a 	bcs.w	40f1ba <__udivmoddi4+0x2c6>
  40f0a6:	42ab      	cmp	r3, r5
  40f0a8:	f240 8087 	bls.w	40f1ba <__udivmoddi4+0x2c6>
  40f0ac:	3902      	subs	r1, #2
  40f0ae:	443d      	add	r5, r7
  40f0b0:	1aeb      	subs	r3, r5, r3
  40f0b2:	fa1f f588 	uxth.w	r5, r8
  40f0b6:	fbb3 f0f2 	udiv	r0, r3, r2
  40f0ba:	fb02 3310 	mls	r3, r2, r0, r3
  40f0be:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f0c2:	fb00 f30c 	mul.w	r3, r0, ip
  40f0c6:	42ab      	cmp	r3, r5
  40f0c8:	d907      	bls.n	40f0da <__udivmoddi4+0x1e6>
  40f0ca:	19ed      	adds	r5, r5, r7
  40f0cc:	f100 38ff 	add.w	r8, r0, #4294967295
  40f0d0:	d26f      	bcs.n	40f1b2 <__udivmoddi4+0x2be>
  40f0d2:	42ab      	cmp	r3, r5
  40f0d4:	d96d      	bls.n	40f1b2 <__udivmoddi4+0x2be>
  40f0d6:	3802      	subs	r0, #2
  40f0d8:	443d      	add	r5, r7
  40f0da:	1aeb      	subs	r3, r5, r3
  40f0dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40f0e0:	e78f      	b.n	40f002 <__udivmoddi4+0x10e>
  40f0e2:	f1c1 0720 	rsb	r7, r1, #32
  40f0e6:	fa22 f807 	lsr.w	r8, r2, r7
  40f0ea:	408b      	lsls	r3, r1
  40f0ec:	fa05 f401 	lsl.w	r4, r5, r1
  40f0f0:	ea48 0303 	orr.w	r3, r8, r3
  40f0f4:	fa20 fe07 	lsr.w	lr, r0, r7
  40f0f8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40f0fc:	40fd      	lsrs	r5, r7
  40f0fe:	ea4e 0e04 	orr.w	lr, lr, r4
  40f102:	fbb5 f9fc 	udiv	r9, r5, ip
  40f106:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40f10a:	fb0c 5519 	mls	r5, ip, r9, r5
  40f10e:	fa1f f883 	uxth.w	r8, r3
  40f112:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40f116:	fb09 f408 	mul.w	r4, r9, r8
  40f11a:	42ac      	cmp	r4, r5
  40f11c:	fa02 f201 	lsl.w	r2, r2, r1
  40f120:	fa00 fa01 	lsl.w	sl, r0, r1
  40f124:	d908      	bls.n	40f138 <__udivmoddi4+0x244>
  40f126:	18ed      	adds	r5, r5, r3
  40f128:	f109 30ff 	add.w	r0, r9, #4294967295
  40f12c:	d243      	bcs.n	40f1b6 <__udivmoddi4+0x2c2>
  40f12e:	42ac      	cmp	r4, r5
  40f130:	d941      	bls.n	40f1b6 <__udivmoddi4+0x2c2>
  40f132:	f1a9 0902 	sub.w	r9, r9, #2
  40f136:	441d      	add	r5, r3
  40f138:	1b2d      	subs	r5, r5, r4
  40f13a:	fa1f fe8e 	uxth.w	lr, lr
  40f13e:	fbb5 f0fc 	udiv	r0, r5, ip
  40f142:	fb0c 5510 	mls	r5, ip, r0, r5
  40f146:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40f14a:	fb00 f808 	mul.w	r8, r0, r8
  40f14e:	45a0      	cmp	r8, r4
  40f150:	d907      	bls.n	40f162 <__udivmoddi4+0x26e>
  40f152:	18e4      	adds	r4, r4, r3
  40f154:	f100 35ff 	add.w	r5, r0, #4294967295
  40f158:	d229      	bcs.n	40f1ae <__udivmoddi4+0x2ba>
  40f15a:	45a0      	cmp	r8, r4
  40f15c:	d927      	bls.n	40f1ae <__udivmoddi4+0x2ba>
  40f15e:	3802      	subs	r0, #2
  40f160:	441c      	add	r4, r3
  40f162:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40f166:	eba4 0408 	sub.w	r4, r4, r8
  40f16a:	fba0 8902 	umull	r8, r9, r0, r2
  40f16e:	454c      	cmp	r4, r9
  40f170:	46c6      	mov	lr, r8
  40f172:	464d      	mov	r5, r9
  40f174:	d315      	bcc.n	40f1a2 <__udivmoddi4+0x2ae>
  40f176:	d012      	beq.n	40f19e <__udivmoddi4+0x2aa>
  40f178:	b156      	cbz	r6, 40f190 <__udivmoddi4+0x29c>
  40f17a:	ebba 030e 	subs.w	r3, sl, lr
  40f17e:	eb64 0405 	sbc.w	r4, r4, r5
  40f182:	fa04 f707 	lsl.w	r7, r4, r7
  40f186:	40cb      	lsrs	r3, r1
  40f188:	431f      	orrs	r7, r3
  40f18a:	40cc      	lsrs	r4, r1
  40f18c:	6037      	str	r7, [r6, #0]
  40f18e:	6074      	str	r4, [r6, #4]
  40f190:	2100      	movs	r1, #0
  40f192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f196:	4618      	mov	r0, r3
  40f198:	e6f8      	b.n	40ef8c <__udivmoddi4+0x98>
  40f19a:	4690      	mov	r8, r2
  40f19c:	e6e0      	b.n	40ef60 <__udivmoddi4+0x6c>
  40f19e:	45c2      	cmp	sl, r8
  40f1a0:	d2ea      	bcs.n	40f178 <__udivmoddi4+0x284>
  40f1a2:	ebb8 0e02 	subs.w	lr, r8, r2
  40f1a6:	eb69 0503 	sbc.w	r5, r9, r3
  40f1aa:	3801      	subs	r0, #1
  40f1ac:	e7e4      	b.n	40f178 <__udivmoddi4+0x284>
  40f1ae:	4628      	mov	r0, r5
  40f1b0:	e7d7      	b.n	40f162 <__udivmoddi4+0x26e>
  40f1b2:	4640      	mov	r0, r8
  40f1b4:	e791      	b.n	40f0da <__udivmoddi4+0x1e6>
  40f1b6:	4681      	mov	r9, r0
  40f1b8:	e7be      	b.n	40f138 <__udivmoddi4+0x244>
  40f1ba:	4601      	mov	r1, r0
  40f1bc:	e778      	b.n	40f0b0 <__udivmoddi4+0x1bc>
  40f1be:	3802      	subs	r0, #2
  40f1c0:	443c      	add	r4, r7
  40f1c2:	e745      	b.n	40f050 <__udivmoddi4+0x15c>
  40f1c4:	4608      	mov	r0, r1
  40f1c6:	e708      	b.n	40efda <__udivmoddi4+0xe6>
  40f1c8:	f1a8 0802 	sub.w	r8, r8, #2
  40f1cc:	443d      	add	r5, r7
  40f1ce:	e72b      	b.n	40f028 <__udivmoddi4+0x134>

0040f1d0 <__aeabi_idiv0>:
  40f1d0:	4770      	bx	lr
  40f1d2:	bf00      	nop

0040f1d4 <__errno>:
  40f1d4:	4b01      	ldr	r3, [pc, #4]	; (40f1dc <__errno+0x8>)
  40f1d6:	6818      	ldr	r0, [r3, #0]
  40f1d8:	4770      	bx	lr
  40f1da:	bf00      	nop
  40f1dc:	20002518 	.word	0x20002518

0040f1e0 <__libc_init_array>:
  40f1e0:	b570      	push	{r4, r5, r6, lr}
  40f1e2:	4e0f      	ldr	r6, [pc, #60]	; (40f220 <__libc_init_array+0x40>)
  40f1e4:	4d0f      	ldr	r5, [pc, #60]	; (40f224 <__libc_init_array+0x44>)
  40f1e6:	1b76      	subs	r6, r6, r5
  40f1e8:	10b6      	asrs	r6, r6, #2
  40f1ea:	bf18      	it	ne
  40f1ec:	2400      	movne	r4, #0
  40f1ee:	d005      	beq.n	40f1fc <__libc_init_array+0x1c>
  40f1f0:	3401      	adds	r4, #1
  40f1f2:	f855 3b04 	ldr.w	r3, [r5], #4
  40f1f6:	4798      	blx	r3
  40f1f8:	42a6      	cmp	r6, r4
  40f1fa:	d1f9      	bne.n	40f1f0 <__libc_init_array+0x10>
  40f1fc:	4e0a      	ldr	r6, [pc, #40]	; (40f228 <__libc_init_array+0x48>)
  40f1fe:	4d0b      	ldr	r5, [pc, #44]	; (40f22c <__libc_init_array+0x4c>)
  40f200:	1b76      	subs	r6, r6, r5
  40f202:	f004 fcd1 	bl	413ba8 <_init>
  40f206:	10b6      	asrs	r6, r6, #2
  40f208:	bf18      	it	ne
  40f20a:	2400      	movne	r4, #0
  40f20c:	d006      	beq.n	40f21c <__libc_init_array+0x3c>
  40f20e:	3401      	adds	r4, #1
  40f210:	f855 3b04 	ldr.w	r3, [r5], #4
  40f214:	4798      	blx	r3
  40f216:	42a6      	cmp	r6, r4
  40f218:	d1f9      	bne.n	40f20e <__libc_init_array+0x2e>
  40f21a:	bd70      	pop	{r4, r5, r6, pc}
  40f21c:	bd70      	pop	{r4, r5, r6, pc}
  40f21e:	bf00      	nop
  40f220:	00413bb4 	.word	0x00413bb4
  40f224:	00413bb4 	.word	0x00413bb4
  40f228:	00413bbc 	.word	0x00413bbc
  40f22c:	00413bb4 	.word	0x00413bb4

0040f230 <__retarget_lock_acquire_recursive>:
  40f230:	4770      	bx	lr
  40f232:	bf00      	nop

0040f234 <__retarget_lock_release_recursive>:
  40f234:	4770      	bx	lr
  40f236:	bf00      	nop

0040f238 <_malloc_r>:
  40f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f23c:	f101 060b 	add.w	r6, r1, #11
  40f240:	2e16      	cmp	r6, #22
  40f242:	b083      	sub	sp, #12
  40f244:	4605      	mov	r5, r0
  40f246:	f240 809e 	bls.w	40f386 <_malloc_r+0x14e>
  40f24a:	f036 0607 	bics.w	r6, r6, #7
  40f24e:	f100 80bd 	bmi.w	40f3cc <_malloc_r+0x194>
  40f252:	42b1      	cmp	r1, r6
  40f254:	f200 80ba 	bhi.w	40f3cc <_malloc_r+0x194>
  40f258:	f000 fc3e 	bl	40fad8 <__malloc_lock>
  40f25c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40f260:	f0c0 8293 	bcc.w	40f78a <_malloc_r+0x552>
  40f264:	0a73      	lsrs	r3, r6, #9
  40f266:	f000 80b8 	beq.w	40f3da <_malloc_r+0x1a2>
  40f26a:	2b04      	cmp	r3, #4
  40f26c:	f200 8179 	bhi.w	40f562 <_malloc_r+0x32a>
  40f270:	09b3      	lsrs	r3, r6, #6
  40f272:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40f276:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40f27a:	00c3      	lsls	r3, r0, #3
  40f27c:	4fbf      	ldr	r7, [pc, #764]	; (40f57c <_malloc_r+0x344>)
  40f27e:	443b      	add	r3, r7
  40f280:	f1a3 0108 	sub.w	r1, r3, #8
  40f284:	685c      	ldr	r4, [r3, #4]
  40f286:	42a1      	cmp	r1, r4
  40f288:	d106      	bne.n	40f298 <_malloc_r+0x60>
  40f28a:	e00c      	b.n	40f2a6 <_malloc_r+0x6e>
  40f28c:	2a00      	cmp	r2, #0
  40f28e:	f280 80aa 	bge.w	40f3e6 <_malloc_r+0x1ae>
  40f292:	68e4      	ldr	r4, [r4, #12]
  40f294:	42a1      	cmp	r1, r4
  40f296:	d006      	beq.n	40f2a6 <_malloc_r+0x6e>
  40f298:	6863      	ldr	r3, [r4, #4]
  40f29a:	f023 0303 	bic.w	r3, r3, #3
  40f29e:	1b9a      	subs	r2, r3, r6
  40f2a0:	2a0f      	cmp	r2, #15
  40f2a2:	ddf3      	ble.n	40f28c <_malloc_r+0x54>
  40f2a4:	4670      	mov	r0, lr
  40f2a6:	693c      	ldr	r4, [r7, #16]
  40f2a8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40f590 <_malloc_r+0x358>
  40f2ac:	4574      	cmp	r4, lr
  40f2ae:	f000 81ab 	beq.w	40f608 <_malloc_r+0x3d0>
  40f2b2:	6863      	ldr	r3, [r4, #4]
  40f2b4:	f023 0303 	bic.w	r3, r3, #3
  40f2b8:	1b9a      	subs	r2, r3, r6
  40f2ba:	2a0f      	cmp	r2, #15
  40f2bc:	f300 8190 	bgt.w	40f5e0 <_malloc_r+0x3a8>
  40f2c0:	2a00      	cmp	r2, #0
  40f2c2:	f8c7 e014 	str.w	lr, [r7, #20]
  40f2c6:	f8c7 e010 	str.w	lr, [r7, #16]
  40f2ca:	f280 809d 	bge.w	40f408 <_malloc_r+0x1d0>
  40f2ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40f2d2:	f080 8161 	bcs.w	40f598 <_malloc_r+0x360>
  40f2d6:	08db      	lsrs	r3, r3, #3
  40f2d8:	f103 0c01 	add.w	ip, r3, #1
  40f2dc:	1099      	asrs	r1, r3, #2
  40f2de:	687a      	ldr	r2, [r7, #4]
  40f2e0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40f2e4:	f8c4 8008 	str.w	r8, [r4, #8]
  40f2e8:	2301      	movs	r3, #1
  40f2ea:	408b      	lsls	r3, r1
  40f2ec:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40f2f0:	4313      	orrs	r3, r2
  40f2f2:	3908      	subs	r1, #8
  40f2f4:	60e1      	str	r1, [r4, #12]
  40f2f6:	607b      	str	r3, [r7, #4]
  40f2f8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40f2fc:	f8c8 400c 	str.w	r4, [r8, #12]
  40f300:	1082      	asrs	r2, r0, #2
  40f302:	2401      	movs	r4, #1
  40f304:	4094      	lsls	r4, r2
  40f306:	429c      	cmp	r4, r3
  40f308:	f200 808b 	bhi.w	40f422 <_malloc_r+0x1ea>
  40f30c:	421c      	tst	r4, r3
  40f30e:	d106      	bne.n	40f31e <_malloc_r+0xe6>
  40f310:	f020 0003 	bic.w	r0, r0, #3
  40f314:	0064      	lsls	r4, r4, #1
  40f316:	421c      	tst	r4, r3
  40f318:	f100 0004 	add.w	r0, r0, #4
  40f31c:	d0fa      	beq.n	40f314 <_malloc_r+0xdc>
  40f31e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40f322:	46cc      	mov	ip, r9
  40f324:	4680      	mov	r8, r0
  40f326:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40f32a:	459c      	cmp	ip, r3
  40f32c:	d107      	bne.n	40f33e <_malloc_r+0x106>
  40f32e:	e16d      	b.n	40f60c <_malloc_r+0x3d4>
  40f330:	2a00      	cmp	r2, #0
  40f332:	f280 817b 	bge.w	40f62c <_malloc_r+0x3f4>
  40f336:	68db      	ldr	r3, [r3, #12]
  40f338:	459c      	cmp	ip, r3
  40f33a:	f000 8167 	beq.w	40f60c <_malloc_r+0x3d4>
  40f33e:	6859      	ldr	r1, [r3, #4]
  40f340:	f021 0103 	bic.w	r1, r1, #3
  40f344:	1b8a      	subs	r2, r1, r6
  40f346:	2a0f      	cmp	r2, #15
  40f348:	ddf2      	ble.n	40f330 <_malloc_r+0xf8>
  40f34a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40f34e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40f352:	9300      	str	r3, [sp, #0]
  40f354:	199c      	adds	r4, r3, r6
  40f356:	4628      	mov	r0, r5
  40f358:	f046 0601 	orr.w	r6, r6, #1
  40f35c:	f042 0501 	orr.w	r5, r2, #1
  40f360:	605e      	str	r6, [r3, #4]
  40f362:	f8c8 c00c 	str.w	ip, [r8, #12]
  40f366:	f8cc 8008 	str.w	r8, [ip, #8]
  40f36a:	617c      	str	r4, [r7, #20]
  40f36c:	613c      	str	r4, [r7, #16]
  40f36e:	f8c4 e00c 	str.w	lr, [r4, #12]
  40f372:	f8c4 e008 	str.w	lr, [r4, #8]
  40f376:	6065      	str	r5, [r4, #4]
  40f378:	505a      	str	r2, [r3, r1]
  40f37a:	f000 fbb3 	bl	40fae4 <__malloc_unlock>
  40f37e:	9b00      	ldr	r3, [sp, #0]
  40f380:	f103 0408 	add.w	r4, r3, #8
  40f384:	e01e      	b.n	40f3c4 <_malloc_r+0x18c>
  40f386:	2910      	cmp	r1, #16
  40f388:	d820      	bhi.n	40f3cc <_malloc_r+0x194>
  40f38a:	f000 fba5 	bl	40fad8 <__malloc_lock>
  40f38e:	2610      	movs	r6, #16
  40f390:	2318      	movs	r3, #24
  40f392:	2002      	movs	r0, #2
  40f394:	4f79      	ldr	r7, [pc, #484]	; (40f57c <_malloc_r+0x344>)
  40f396:	443b      	add	r3, r7
  40f398:	f1a3 0208 	sub.w	r2, r3, #8
  40f39c:	685c      	ldr	r4, [r3, #4]
  40f39e:	4294      	cmp	r4, r2
  40f3a0:	f000 813d 	beq.w	40f61e <_malloc_r+0x3e6>
  40f3a4:	6863      	ldr	r3, [r4, #4]
  40f3a6:	68e1      	ldr	r1, [r4, #12]
  40f3a8:	68a6      	ldr	r6, [r4, #8]
  40f3aa:	f023 0303 	bic.w	r3, r3, #3
  40f3ae:	4423      	add	r3, r4
  40f3b0:	4628      	mov	r0, r5
  40f3b2:	685a      	ldr	r2, [r3, #4]
  40f3b4:	60f1      	str	r1, [r6, #12]
  40f3b6:	f042 0201 	orr.w	r2, r2, #1
  40f3ba:	608e      	str	r6, [r1, #8]
  40f3bc:	605a      	str	r2, [r3, #4]
  40f3be:	f000 fb91 	bl	40fae4 <__malloc_unlock>
  40f3c2:	3408      	adds	r4, #8
  40f3c4:	4620      	mov	r0, r4
  40f3c6:	b003      	add	sp, #12
  40f3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f3cc:	2400      	movs	r4, #0
  40f3ce:	230c      	movs	r3, #12
  40f3d0:	4620      	mov	r0, r4
  40f3d2:	602b      	str	r3, [r5, #0]
  40f3d4:	b003      	add	sp, #12
  40f3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f3da:	2040      	movs	r0, #64	; 0x40
  40f3dc:	f44f 7300 	mov.w	r3, #512	; 0x200
  40f3e0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40f3e4:	e74a      	b.n	40f27c <_malloc_r+0x44>
  40f3e6:	4423      	add	r3, r4
  40f3e8:	68e1      	ldr	r1, [r4, #12]
  40f3ea:	685a      	ldr	r2, [r3, #4]
  40f3ec:	68a6      	ldr	r6, [r4, #8]
  40f3ee:	f042 0201 	orr.w	r2, r2, #1
  40f3f2:	60f1      	str	r1, [r6, #12]
  40f3f4:	4628      	mov	r0, r5
  40f3f6:	608e      	str	r6, [r1, #8]
  40f3f8:	605a      	str	r2, [r3, #4]
  40f3fa:	f000 fb73 	bl	40fae4 <__malloc_unlock>
  40f3fe:	3408      	adds	r4, #8
  40f400:	4620      	mov	r0, r4
  40f402:	b003      	add	sp, #12
  40f404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f408:	4423      	add	r3, r4
  40f40a:	4628      	mov	r0, r5
  40f40c:	685a      	ldr	r2, [r3, #4]
  40f40e:	f042 0201 	orr.w	r2, r2, #1
  40f412:	605a      	str	r2, [r3, #4]
  40f414:	f000 fb66 	bl	40fae4 <__malloc_unlock>
  40f418:	3408      	adds	r4, #8
  40f41a:	4620      	mov	r0, r4
  40f41c:	b003      	add	sp, #12
  40f41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f422:	68bc      	ldr	r4, [r7, #8]
  40f424:	6863      	ldr	r3, [r4, #4]
  40f426:	f023 0803 	bic.w	r8, r3, #3
  40f42a:	45b0      	cmp	r8, r6
  40f42c:	d304      	bcc.n	40f438 <_malloc_r+0x200>
  40f42e:	eba8 0306 	sub.w	r3, r8, r6
  40f432:	2b0f      	cmp	r3, #15
  40f434:	f300 8085 	bgt.w	40f542 <_malloc_r+0x30a>
  40f438:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40f594 <_malloc_r+0x35c>
  40f43c:	4b50      	ldr	r3, [pc, #320]	; (40f580 <_malloc_r+0x348>)
  40f43e:	f8d9 2000 	ldr.w	r2, [r9]
  40f442:	681b      	ldr	r3, [r3, #0]
  40f444:	3201      	adds	r2, #1
  40f446:	4433      	add	r3, r6
  40f448:	eb04 0a08 	add.w	sl, r4, r8
  40f44c:	f000 8155 	beq.w	40f6fa <_malloc_r+0x4c2>
  40f450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40f454:	330f      	adds	r3, #15
  40f456:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40f45a:	f02b 0b0f 	bic.w	fp, fp, #15
  40f45e:	4659      	mov	r1, fp
  40f460:	4628      	mov	r0, r5
  40f462:	f000 fceb 	bl	40fe3c <_sbrk_r>
  40f466:	1c41      	adds	r1, r0, #1
  40f468:	4602      	mov	r2, r0
  40f46a:	f000 80fc 	beq.w	40f666 <_malloc_r+0x42e>
  40f46e:	4582      	cmp	sl, r0
  40f470:	f200 80f7 	bhi.w	40f662 <_malloc_r+0x42a>
  40f474:	4b43      	ldr	r3, [pc, #268]	; (40f584 <_malloc_r+0x34c>)
  40f476:	6819      	ldr	r1, [r3, #0]
  40f478:	4459      	add	r1, fp
  40f47a:	6019      	str	r1, [r3, #0]
  40f47c:	f000 814d 	beq.w	40f71a <_malloc_r+0x4e2>
  40f480:	f8d9 0000 	ldr.w	r0, [r9]
  40f484:	3001      	adds	r0, #1
  40f486:	bf1b      	ittet	ne
  40f488:	eba2 0a0a 	subne.w	sl, r2, sl
  40f48c:	4451      	addne	r1, sl
  40f48e:	f8c9 2000 	streq.w	r2, [r9]
  40f492:	6019      	strne	r1, [r3, #0]
  40f494:	f012 0107 	ands.w	r1, r2, #7
  40f498:	f000 8115 	beq.w	40f6c6 <_malloc_r+0x48e>
  40f49c:	f1c1 0008 	rsb	r0, r1, #8
  40f4a0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40f4a4:	4402      	add	r2, r0
  40f4a6:	3108      	adds	r1, #8
  40f4a8:	eb02 090b 	add.w	r9, r2, fp
  40f4ac:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40f4b0:	eba1 0909 	sub.w	r9, r1, r9
  40f4b4:	4649      	mov	r1, r9
  40f4b6:	4628      	mov	r0, r5
  40f4b8:	9301      	str	r3, [sp, #4]
  40f4ba:	9200      	str	r2, [sp, #0]
  40f4bc:	f000 fcbe 	bl	40fe3c <_sbrk_r>
  40f4c0:	1c43      	adds	r3, r0, #1
  40f4c2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40f4c6:	f000 8143 	beq.w	40f750 <_malloc_r+0x518>
  40f4ca:	1a80      	subs	r0, r0, r2
  40f4cc:	4448      	add	r0, r9
  40f4ce:	f040 0001 	orr.w	r0, r0, #1
  40f4d2:	6819      	ldr	r1, [r3, #0]
  40f4d4:	60ba      	str	r2, [r7, #8]
  40f4d6:	4449      	add	r1, r9
  40f4d8:	42bc      	cmp	r4, r7
  40f4da:	6050      	str	r0, [r2, #4]
  40f4dc:	6019      	str	r1, [r3, #0]
  40f4de:	d017      	beq.n	40f510 <_malloc_r+0x2d8>
  40f4e0:	f1b8 0f0f 	cmp.w	r8, #15
  40f4e4:	f240 80fb 	bls.w	40f6de <_malloc_r+0x4a6>
  40f4e8:	6860      	ldr	r0, [r4, #4]
  40f4ea:	f1a8 020c 	sub.w	r2, r8, #12
  40f4ee:	f022 0207 	bic.w	r2, r2, #7
  40f4f2:	eb04 0e02 	add.w	lr, r4, r2
  40f4f6:	f000 0001 	and.w	r0, r0, #1
  40f4fa:	f04f 0c05 	mov.w	ip, #5
  40f4fe:	4310      	orrs	r0, r2
  40f500:	2a0f      	cmp	r2, #15
  40f502:	6060      	str	r0, [r4, #4]
  40f504:	f8ce c004 	str.w	ip, [lr, #4]
  40f508:	f8ce c008 	str.w	ip, [lr, #8]
  40f50c:	f200 8117 	bhi.w	40f73e <_malloc_r+0x506>
  40f510:	4b1d      	ldr	r3, [pc, #116]	; (40f588 <_malloc_r+0x350>)
  40f512:	68bc      	ldr	r4, [r7, #8]
  40f514:	681a      	ldr	r2, [r3, #0]
  40f516:	4291      	cmp	r1, r2
  40f518:	bf88      	it	hi
  40f51a:	6019      	strhi	r1, [r3, #0]
  40f51c:	4b1b      	ldr	r3, [pc, #108]	; (40f58c <_malloc_r+0x354>)
  40f51e:	681a      	ldr	r2, [r3, #0]
  40f520:	4291      	cmp	r1, r2
  40f522:	6862      	ldr	r2, [r4, #4]
  40f524:	bf88      	it	hi
  40f526:	6019      	strhi	r1, [r3, #0]
  40f528:	f022 0203 	bic.w	r2, r2, #3
  40f52c:	4296      	cmp	r6, r2
  40f52e:	eba2 0306 	sub.w	r3, r2, r6
  40f532:	d801      	bhi.n	40f538 <_malloc_r+0x300>
  40f534:	2b0f      	cmp	r3, #15
  40f536:	dc04      	bgt.n	40f542 <_malloc_r+0x30a>
  40f538:	4628      	mov	r0, r5
  40f53a:	f000 fad3 	bl	40fae4 <__malloc_unlock>
  40f53e:	2400      	movs	r4, #0
  40f540:	e740      	b.n	40f3c4 <_malloc_r+0x18c>
  40f542:	19a2      	adds	r2, r4, r6
  40f544:	f043 0301 	orr.w	r3, r3, #1
  40f548:	f046 0601 	orr.w	r6, r6, #1
  40f54c:	6066      	str	r6, [r4, #4]
  40f54e:	4628      	mov	r0, r5
  40f550:	60ba      	str	r2, [r7, #8]
  40f552:	6053      	str	r3, [r2, #4]
  40f554:	f000 fac6 	bl	40fae4 <__malloc_unlock>
  40f558:	3408      	adds	r4, #8
  40f55a:	4620      	mov	r0, r4
  40f55c:	b003      	add	sp, #12
  40f55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f562:	2b14      	cmp	r3, #20
  40f564:	d971      	bls.n	40f64a <_malloc_r+0x412>
  40f566:	2b54      	cmp	r3, #84	; 0x54
  40f568:	f200 80a3 	bhi.w	40f6b2 <_malloc_r+0x47a>
  40f56c:	0b33      	lsrs	r3, r6, #12
  40f56e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40f572:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40f576:	00c3      	lsls	r3, r0, #3
  40f578:	e680      	b.n	40f27c <_malloc_r+0x44>
  40f57a:	bf00      	nop
  40f57c:	20002948 	.word	0x20002948
  40f580:	200048cc 	.word	0x200048cc
  40f584:	2000489c 	.word	0x2000489c
  40f588:	200048c4 	.word	0x200048c4
  40f58c:	200048c8 	.word	0x200048c8
  40f590:	20002950 	.word	0x20002950
  40f594:	20002d50 	.word	0x20002d50
  40f598:	0a5a      	lsrs	r2, r3, #9
  40f59a:	2a04      	cmp	r2, #4
  40f59c:	d95b      	bls.n	40f656 <_malloc_r+0x41e>
  40f59e:	2a14      	cmp	r2, #20
  40f5a0:	f200 80ae 	bhi.w	40f700 <_malloc_r+0x4c8>
  40f5a4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40f5a8:	00c9      	lsls	r1, r1, #3
  40f5aa:	325b      	adds	r2, #91	; 0x5b
  40f5ac:	eb07 0c01 	add.w	ip, r7, r1
  40f5b0:	5879      	ldr	r1, [r7, r1]
  40f5b2:	f1ac 0c08 	sub.w	ip, ip, #8
  40f5b6:	458c      	cmp	ip, r1
  40f5b8:	f000 8088 	beq.w	40f6cc <_malloc_r+0x494>
  40f5bc:	684a      	ldr	r2, [r1, #4]
  40f5be:	f022 0203 	bic.w	r2, r2, #3
  40f5c2:	4293      	cmp	r3, r2
  40f5c4:	d273      	bcs.n	40f6ae <_malloc_r+0x476>
  40f5c6:	6889      	ldr	r1, [r1, #8]
  40f5c8:	458c      	cmp	ip, r1
  40f5ca:	d1f7      	bne.n	40f5bc <_malloc_r+0x384>
  40f5cc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40f5d0:	687b      	ldr	r3, [r7, #4]
  40f5d2:	60e2      	str	r2, [r4, #12]
  40f5d4:	f8c4 c008 	str.w	ip, [r4, #8]
  40f5d8:	6094      	str	r4, [r2, #8]
  40f5da:	f8cc 400c 	str.w	r4, [ip, #12]
  40f5de:	e68f      	b.n	40f300 <_malloc_r+0xc8>
  40f5e0:	19a1      	adds	r1, r4, r6
  40f5e2:	f046 0c01 	orr.w	ip, r6, #1
  40f5e6:	f042 0601 	orr.w	r6, r2, #1
  40f5ea:	f8c4 c004 	str.w	ip, [r4, #4]
  40f5ee:	4628      	mov	r0, r5
  40f5f0:	6179      	str	r1, [r7, #20]
  40f5f2:	6139      	str	r1, [r7, #16]
  40f5f4:	f8c1 e00c 	str.w	lr, [r1, #12]
  40f5f8:	f8c1 e008 	str.w	lr, [r1, #8]
  40f5fc:	604e      	str	r6, [r1, #4]
  40f5fe:	50e2      	str	r2, [r4, r3]
  40f600:	f000 fa70 	bl	40fae4 <__malloc_unlock>
  40f604:	3408      	adds	r4, #8
  40f606:	e6dd      	b.n	40f3c4 <_malloc_r+0x18c>
  40f608:	687b      	ldr	r3, [r7, #4]
  40f60a:	e679      	b.n	40f300 <_malloc_r+0xc8>
  40f60c:	f108 0801 	add.w	r8, r8, #1
  40f610:	f018 0f03 	tst.w	r8, #3
  40f614:	f10c 0c08 	add.w	ip, ip, #8
  40f618:	f47f ae85 	bne.w	40f326 <_malloc_r+0xee>
  40f61c:	e02d      	b.n	40f67a <_malloc_r+0x442>
  40f61e:	68dc      	ldr	r4, [r3, #12]
  40f620:	42a3      	cmp	r3, r4
  40f622:	bf08      	it	eq
  40f624:	3002      	addeq	r0, #2
  40f626:	f43f ae3e 	beq.w	40f2a6 <_malloc_r+0x6e>
  40f62a:	e6bb      	b.n	40f3a4 <_malloc_r+0x16c>
  40f62c:	4419      	add	r1, r3
  40f62e:	461c      	mov	r4, r3
  40f630:	684a      	ldr	r2, [r1, #4]
  40f632:	68db      	ldr	r3, [r3, #12]
  40f634:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40f638:	f042 0201 	orr.w	r2, r2, #1
  40f63c:	604a      	str	r2, [r1, #4]
  40f63e:	4628      	mov	r0, r5
  40f640:	60f3      	str	r3, [r6, #12]
  40f642:	609e      	str	r6, [r3, #8]
  40f644:	f000 fa4e 	bl	40fae4 <__malloc_unlock>
  40f648:	e6bc      	b.n	40f3c4 <_malloc_r+0x18c>
  40f64a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40f64e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40f652:	00c3      	lsls	r3, r0, #3
  40f654:	e612      	b.n	40f27c <_malloc_r+0x44>
  40f656:	099a      	lsrs	r2, r3, #6
  40f658:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40f65c:	00c9      	lsls	r1, r1, #3
  40f65e:	3238      	adds	r2, #56	; 0x38
  40f660:	e7a4      	b.n	40f5ac <_malloc_r+0x374>
  40f662:	42bc      	cmp	r4, r7
  40f664:	d054      	beq.n	40f710 <_malloc_r+0x4d8>
  40f666:	68bc      	ldr	r4, [r7, #8]
  40f668:	6862      	ldr	r2, [r4, #4]
  40f66a:	f022 0203 	bic.w	r2, r2, #3
  40f66e:	e75d      	b.n	40f52c <_malloc_r+0x2f4>
  40f670:	f859 3908 	ldr.w	r3, [r9], #-8
  40f674:	4599      	cmp	r9, r3
  40f676:	f040 8086 	bne.w	40f786 <_malloc_r+0x54e>
  40f67a:	f010 0f03 	tst.w	r0, #3
  40f67e:	f100 30ff 	add.w	r0, r0, #4294967295
  40f682:	d1f5      	bne.n	40f670 <_malloc_r+0x438>
  40f684:	687b      	ldr	r3, [r7, #4]
  40f686:	ea23 0304 	bic.w	r3, r3, r4
  40f68a:	607b      	str	r3, [r7, #4]
  40f68c:	0064      	lsls	r4, r4, #1
  40f68e:	429c      	cmp	r4, r3
  40f690:	f63f aec7 	bhi.w	40f422 <_malloc_r+0x1ea>
  40f694:	2c00      	cmp	r4, #0
  40f696:	f43f aec4 	beq.w	40f422 <_malloc_r+0x1ea>
  40f69a:	421c      	tst	r4, r3
  40f69c:	4640      	mov	r0, r8
  40f69e:	f47f ae3e 	bne.w	40f31e <_malloc_r+0xe6>
  40f6a2:	0064      	lsls	r4, r4, #1
  40f6a4:	421c      	tst	r4, r3
  40f6a6:	f100 0004 	add.w	r0, r0, #4
  40f6aa:	d0fa      	beq.n	40f6a2 <_malloc_r+0x46a>
  40f6ac:	e637      	b.n	40f31e <_malloc_r+0xe6>
  40f6ae:	468c      	mov	ip, r1
  40f6b0:	e78c      	b.n	40f5cc <_malloc_r+0x394>
  40f6b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40f6b6:	d815      	bhi.n	40f6e4 <_malloc_r+0x4ac>
  40f6b8:	0bf3      	lsrs	r3, r6, #15
  40f6ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40f6be:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40f6c2:	00c3      	lsls	r3, r0, #3
  40f6c4:	e5da      	b.n	40f27c <_malloc_r+0x44>
  40f6c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40f6ca:	e6ed      	b.n	40f4a8 <_malloc_r+0x270>
  40f6cc:	687b      	ldr	r3, [r7, #4]
  40f6ce:	1092      	asrs	r2, r2, #2
  40f6d0:	2101      	movs	r1, #1
  40f6d2:	fa01 f202 	lsl.w	r2, r1, r2
  40f6d6:	4313      	orrs	r3, r2
  40f6d8:	607b      	str	r3, [r7, #4]
  40f6da:	4662      	mov	r2, ip
  40f6dc:	e779      	b.n	40f5d2 <_malloc_r+0x39a>
  40f6de:	2301      	movs	r3, #1
  40f6e0:	6053      	str	r3, [r2, #4]
  40f6e2:	e729      	b.n	40f538 <_malloc_r+0x300>
  40f6e4:	f240 5254 	movw	r2, #1364	; 0x554
  40f6e8:	4293      	cmp	r3, r2
  40f6ea:	d822      	bhi.n	40f732 <_malloc_r+0x4fa>
  40f6ec:	0cb3      	lsrs	r3, r6, #18
  40f6ee:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40f6f2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40f6f6:	00c3      	lsls	r3, r0, #3
  40f6f8:	e5c0      	b.n	40f27c <_malloc_r+0x44>
  40f6fa:	f103 0b10 	add.w	fp, r3, #16
  40f6fe:	e6ae      	b.n	40f45e <_malloc_r+0x226>
  40f700:	2a54      	cmp	r2, #84	; 0x54
  40f702:	d829      	bhi.n	40f758 <_malloc_r+0x520>
  40f704:	0b1a      	lsrs	r2, r3, #12
  40f706:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40f70a:	00c9      	lsls	r1, r1, #3
  40f70c:	326e      	adds	r2, #110	; 0x6e
  40f70e:	e74d      	b.n	40f5ac <_malloc_r+0x374>
  40f710:	4b20      	ldr	r3, [pc, #128]	; (40f794 <_malloc_r+0x55c>)
  40f712:	6819      	ldr	r1, [r3, #0]
  40f714:	4459      	add	r1, fp
  40f716:	6019      	str	r1, [r3, #0]
  40f718:	e6b2      	b.n	40f480 <_malloc_r+0x248>
  40f71a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40f71e:	2800      	cmp	r0, #0
  40f720:	f47f aeae 	bne.w	40f480 <_malloc_r+0x248>
  40f724:	eb08 030b 	add.w	r3, r8, fp
  40f728:	68ba      	ldr	r2, [r7, #8]
  40f72a:	f043 0301 	orr.w	r3, r3, #1
  40f72e:	6053      	str	r3, [r2, #4]
  40f730:	e6ee      	b.n	40f510 <_malloc_r+0x2d8>
  40f732:	207f      	movs	r0, #127	; 0x7f
  40f734:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40f738:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40f73c:	e59e      	b.n	40f27c <_malloc_r+0x44>
  40f73e:	f104 0108 	add.w	r1, r4, #8
  40f742:	4628      	mov	r0, r5
  40f744:	9300      	str	r3, [sp, #0]
  40f746:	f002 ff13 	bl	412570 <_free_r>
  40f74a:	9b00      	ldr	r3, [sp, #0]
  40f74c:	6819      	ldr	r1, [r3, #0]
  40f74e:	e6df      	b.n	40f510 <_malloc_r+0x2d8>
  40f750:	2001      	movs	r0, #1
  40f752:	f04f 0900 	mov.w	r9, #0
  40f756:	e6bc      	b.n	40f4d2 <_malloc_r+0x29a>
  40f758:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40f75c:	d805      	bhi.n	40f76a <_malloc_r+0x532>
  40f75e:	0bda      	lsrs	r2, r3, #15
  40f760:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40f764:	00c9      	lsls	r1, r1, #3
  40f766:	3277      	adds	r2, #119	; 0x77
  40f768:	e720      	b.n	40f5ac <_malloc_r+0x374>
  40f76a:	f240 5154 	movw	r1, #1364	; 0x554
  40f76e:	428a      	cmp	r2, r1
  40f770:	d805      	bhi.n	40f77e <_malloc_r+0x546>
  40f772:	0c9a      	lsrs	r2, r3, #18
  40f774:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40f778:	00c9      	lsls	r1, r1, #3
  40f77a:	327c      	adds	r2, #124	; 0x7c
  40f77c:	e716      	b.n	40f5ac <_malloc_r+0x374>
  40f77e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40f782:	227e      	movs	r2, #126	; 0x7e
  40f784:	e712      	b.n	40f5ac <_malloc_r+0x374>
  40f786:	687b      	ldr	r3, [r7, #4]
  40f788:	e780      	b.n	40f68c <_malloc_r+0x454>
  40f78a:	08f0      	lsrs	r0, r6, #3
  40f78c:	f106 0308 	add.w	r3, r6, #8
  40f790:	e600      	b.n	40f394 <_malloc_r+0x15c>
  40f792:	bf00      	nop
  40f794:	2000489c 	.word	0x2000489c
	...

0040f7a0 <memchr>:
  40f7a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40f7a4:	2a10      	cmp	r2, #16
  40f7a6:	db2b      	blt.n	40f800 <memchr+0x60>
  40f7a8:	f010 0f07 	tst.w	r0, #7
  40f7ac:	d008      	beq.n	40f7c0 <memchr+0x20>
  40f7ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  40f7b2:	3a01      	subs	r2, #1
  40f7b4:	428b      	cmp	r3, r1
  40f7b6:	d02d      	beq.n	40f814 <memchr+0x74>
  40f7b8:	f010 0f07 	tst.w	r0, #7
  40f7bc:	b342      	cbz	r2, 40f810 <memchr+0x70>
  40f7be:	d1f6      	bne.n	40f7ae <memchr+0xe>
  40f7c0:	b4f0      	push	{r4, r5, r6, r7}
  40f7c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40f7c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40f7ca:	f022 0407 	bic.w	r4, r2, #7
  40f7ce:	f07f 0700 	mvns.w	r7, #0
  40f7d2:	2300      	movs	r3, #0
  40f7d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40f7d8:	3c08      	subs	r4, #8
  40f7da:	ea85 0501 	eor.w	r5, r5, r1
  40f7de:	ea86 0601 	eor.w	r6, r6, r1
  40f7e2:	fa85 f547 	uadd8	r5, r5, r7
  40f7e6:	faa3 f587 	sel	r5, r3, r7
  40f7ea:	fa86 f647 	uadd8	r6, r6, r7
  40f7ee:	faa5 f687 	sel	r6, r5, r7
  40f7f2:	b98e      	cbnz	r6, 40f818 <memchr+0x78>
  40f7f4:	d1ee      	bne.n	40f7d4 <memchr+0x34>
  40f7f6:	bcf0      	pop	{r4, r5, r6, r7}
  40f7f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40f7fc:	f002 0207 	and.w	r2, r2, #7
  40f800:	b132      	cbz	r2, 40f810 <memchr+0x70>
  40f802:	f810 3b01 	ldrb.w	r3, [r0], #1
  40f806:	3a01      	subs	r2, #1
  40f808:	ea83 0301 	eor.w	r3, r3, r1
  40f80c:	b113      	cbz	r3, 40f814 <memchr+0x74>
  40f80e:	d1f8      	bne.n	40f802 <memchr+0x62>
  40f810:	2000      	movs	r0, #0
  40f812:	4770      	bx	lr
  40f814:	3801      	subs	r0, #1
  40f816:	4770      	bx	lr
  40f818:	2d00      	cmp	r5, #0
  40f81a:	bf06      	itte	eq
  40f81c:	4635      	moveq	r5, r6
  40f81e:	3803      	subeq	r0, #3
  40f820:	3807      	subne	r0, #7
  40f822:	f015 0f01 	tst.w	r5, #1
  40f826:	d107      	bne.n	40f838 <memchr+0x98>
  40f828:	3001      	adds	r0, #1
  40f82a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40f82e:	bf02      	ittt	eq
  40f830:	3001      	addeq	r0, #1
  40f832:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40f836:	3001      	addeq	r0, #1
  40f838:	bcf0      	pop	{r4, r5, r6, r7}
  40f83a:	3801      	subs	r0, #1
  40f83c:	4770      	bx	lr
  40f83e:	bf00      	nop

0040f840 <memcpy>:
  40f840:	4684      	mov	ip, r0
  40f842:	ea41 0300 	orr.w	r3, r1, r0
  40f846:	f013 0303 	ands.w	r3, r3, #3
  40f84a:	d16d      	bne.n	40f928 <memcpy+0xe8>
  40f84c:	3a40      	subs	r2, #64	; 0x40
  40f84e:	d341      	bcc.n	40f8d4 <memcpy+0x94>
  40f850:	f851 3b04 	ldr.w	r3, [r1], #4
  40f854:	f840 3b04 	str.w	r3, [r0], #4
  40f858:	f851 3b04 	ldr.w	r3, [r1], #4
  40f85c:	f840 3b04 	str.w	r3, [r0], #4
  40f860:	f851 3b04 	ldr.w	r3, [r1], #4
  40f864:	f840 3b04 	str.w	r3, [r0], #4
  40f868:	f851 3b04 	ldr.w	r3, [r1], #4
  40f86c:	f840 3b04 	str.w	r3, [r0], #4
  40f870:	f851 3b04 	ldr.w	r3, [r1], #4
  40f874:	f840 3b04 	str.w	r3, [r0], #4
  40f878:	f851 3b04 	ldr.w	r3, [r1], #4
  40f87c:	f840 3b04 	str.w	r3, [r0], #4
  40f880:	f851 3b04 	ldr.w	r3, [r1], #4
  40f884:	f840 3b04 	str.w	r3, [r0], #4
  40f888:	f851 3b04 	ldr.w	r3, [r1], #4
  40f88c:	f840 3b04 	str.w	r3, [r0], #4
  40f890:	f851 3b04 	ldr.w	r3, [r1], #4
  40f894:	f840 3b04 	str.w	r3, [r0], #4
  40f898:	f851 3b04 	ldr.w	r3, [r1], #4
  40f89c:	f840 3b04 	str.w	r3, [r0], #4
  40f8a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8a4:	f840 3b04 	str.w	r3, [r0], #4
  40f8a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8ac:	f840 3b04 	str.w	r3, [r0], #4
  40f8b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8b4:	f840 3b04 	str.w	r3, [r0], #4
  40f8b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8bc:	f840 3b04 	str.w	r3, [r0], #4
  40f8c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8c4:	f840 3b04 	str.w	r3, [r0], #4
  40f8c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8cc:	f840 3b04 	str.w	r3, [r0], #4
  40f8d0:	3a40      	subs	r2, #64	; 0x40
  40f8d2:	d2bd      	bcs.n	40f850 <memcpy+0x10>
  40f8d4:	3230      	adds	r2, #48	; 0x30
  40f8d6:	d311      	bcc.n	40f8fc <memcpy+0xbc>
  40f8d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8dc:	f840 3b04 	str.w	r3, [r0], #4
  40f8e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8e4:	f840 3b04 	str.w	r3, [r0], #4
  40f8e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8ec:	f840 3b04 	str.w	r3, [r0], #4
  40f8f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8f4:	f840 3b04 	str.w	r3, [r0], #4
  40f8f8:	3a10      	subs	r2, #16
  40f8fa:	d2ed      	bcs.n	40f8d8 <memcpy+0x98>
  40f8fc:	320c      	adds	r2, #12
  40f8fe:	d305      	bcc.n	40f90c <memcpy+0xcc>
  40f900:	f851 3b04 	ldr.w	r3, [r1], #4
  40f904:	f840 3b04 	str.w	r3, [r0], #4
  40f908:	3a04      	subs	r2, #4
  40f90a:	d2f9      	bcs.n	40f900 <memcpy+0xc0>
  40f90c:	3204      	adds	r2, #4
  40f90e:	d008      	beq.n	40f922 <memcpy+0xe2>
  40f910:	07d2      	lsls	r2, r2, #31
  40f912:	bf1c      	itt	ne
  40f914:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40f918:	f800 3b01 	strbne.w	r3, [r0], #1
  40f91c:	d301      	bcc.n	40f922 <memcpy+0xe2>
  40f91e:	880b      	ldrh	r3, [r1, #0]
  40f920:	8003      	strh	r3, [r0, #0]
  40f922:	4660      	mov	r0, ip
  40f924:	4770      	bx	lr
  40f926:	bf00      	nop
  40f928:	2a08      	cmp	r2, #8
  40f92a:	d313      	bcc.n	40f954 <memcpy+0x114>
  40f92c:	078b      	lsls	r3, r1, #30
  40f92e:	d08d      	beq.n	40f84c <memcpy+0xc>
  40f930:	f010 0303 	ands.w	r3, r0, #3
  40f934:	d08a      	beq.n	40f84c <memcpy+0xc>
  40f936:	f1c3 0304 	rsb	r3, r3, #4
  40f93a:	1ad2      	subs	r2, r2, r3
  40f93c:	07db      	lsls	r3, r3, #31
  40f93e:	bf1c      	itt	ne
  40f940:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40f944:	f800 3b01 	strbne.w	r3, [r0], #1
  40f948:	d380      	bcc.n	40f84c <memcpy+0xc>
  40f94a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40f94e:	f820 3b02 	strh.w	r3, [r0], #2
  40f952:	e77b      	b.n	40f84c <memcpy+0xc>
  40f954:	3a04      	subs	r2, #4
  40f956:	d3d9      	bcc.n	40f90c <memcpy+0xcc>
  40f958:	3a01      	subs	r2, #1
  40f95a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40f95e:	f800 3b01 	strb.w	r3, [r0], #1
  40f962:	d2f9      	bcs.n	40f958 <memcpy+0x118>
  40f964:	780b      	ldrb	r3, [r1, #0]
  40f966:	7003      	strb	r3, [r0, #0]
  40f968:	784b      	ldrb	r3, [r1, #1]
  40f96a:	7043      	strb	r3, [r0, #1]
  40f96c:	788b      	ldrb	r3, [r1, #2]
  40f96e:	7083      	strb	r3, [r0, #2]
  40f970:	4660      	mov	r0, ip
  40f972:	4770      	bx	lr

0040f974 <memmove>:
  40f974:	4288      	cmp	r0, r1
  40f976:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f978:	d90d      	bls.n	40f996 <memmove+0x22>
  40f97a:	188b      	adds	r3, r1, r2
  40f97c:	4298      	cmp	r0, r3
  40f97e:	d20a      	bcs.n	40f996 <memmove+0x22>
  40f980:	1884      	adds	r4, r0, r2
  40f982:	2a00      	cmp	r2, #0
  40f984:	d051      	beq.n	40fa2a <memmove+0xb6>
  40f986:	4622      	mov	r2, r4
  40f988:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40f98c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40f990:	4299      	cmp	r1, r3
  40f992:	d1f9      	bne.n	40f988 <memmove+0x14>
  40f994:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f996:	2a0f      	cmp	r2, #15
  40f998:	d948      	bls.n	40fa2c <memmove+0xb8>
  40f99a:	ea41 0300 	orr.w	r3, r1, r0
  40f99e:	079b      	lsls	r3, r3, #30
  40f9a0:	d146      	bne.n	40fa30 <memmove+0xbc>
  40f9a2:	f100 0410 	add.w	r4, r0, #16
  40f9a6:	f101 0310 	add.w	r3, r1, #16
  40f9aa:	4615      	mov	r5, r2
  40f9ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40f9b0:	f844 6c10 	str.w	r6, [r4, #-16]
  40f9b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40f9b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  40f9bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40f9c0:	f844 6c08 	str.w	r6, [r4, #-8]
  40f9c4:	3d10      	subs	r5, #16
  40f9c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40f9ca:	f844 6c04 	str.w	r6, [r4, #-4]
  40f9ce:	2d0f      	cmp	r5, #15
  40f9d0:	f103 0310 	add.w	r3, r3, #16
  40f9d4:	f104 0410 	add.w	r4, r4, #16
  40f9d8:	d8e8      	bhi.n	40f9ac <memmove+0x38>
  40f9da:	f1a2 0310 	sub.w	r3, r2, #16
  40f9de:	f023 030f 	bic.w	r3, r3, #15
  40f9e2:	f002 0e0f 	and.w	lr, r2, #15
  40f9e6:	3310      	adds	r3, #16
  40f9e8:	f1be 0f03 	cmp.w	lr, #3
  40f9ec:	4419      	add	r1, r3
  40f9ee:	4403      	add	r3, r0
  40f9f0:	d921      	bls.n	40fa36 <memmove+0xc2>
  40f9f2:	1f1e      	subs	r6, r3, #4
  40f9f4:	460d      	mov	r5, r1
  40f9f6:	4674      	mov	r4, lr
  40f9f8:	3c04      	subs	r4, #4
  40f9fa:	f855 7b04 	ldr.w	r7, [r5], #4
  40f9fe:	f846 7f04 	str.w	r7, [r6, #4]!
  40fa02:	2c03      	cmp	r4, #3
  40fa04:	d8f8      	bhi.n	40f9f8 <memmove+0x84>
  40fa06:	f1ae 0404 	sub.w	r4, lr, #4
  40fa0a:	f024 0403 	bic.w	r4, r4, #3
  40fa0e:	3404      	adds	r4, #4
  40fa10:	4421      	add	r1, r4
  40fa12:	4423      	add	r3, r4
  40fa14:	f002 0203 	and.w	r2, r2, #3
  40fa18:	b162      	cbz	r2, 40fa34 <memmove+0xc0>
  40fa1a:	3b01      	subs	r3, #1
  40fa1c:	440a      	add	r2, r1
  40fa1e:	f811 4b01 	ldrb.w	r4, [r1], #1
  40fa22:	f803 4f01 	strb.w	r4, [r3, #1]!
  40fa26:	428a      	cmp	r2, r1
  40fa28:	d1f9      	bne.n	40fa1e <memmove+0xaa>
  40fa2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40fa2c:	4603      	mov	r3, r0
  40fa2e:	e7f3      	b.n	40fa18 <memmove+0xa4>
  40fa30:	4603      	mov	r3, r0
  40fa32:	e7f2      	b.n	40fa1a <memmove+0xa6>
  40fa34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40fa36:	4672      	mov	r2, lr
  40fa38:	e7ee      	b.n	40fa18 <memmove+0xa4>
  40fa3a:	bf00      	nop

0040fa3c <memset>:
  40fa3c:	b470      	push	{r4, r5, r6}
  40fa3e:	0786      	lsls	r6, r0, #30
  40fa40:	d046      	beq.n	40fad0 <memset+0x94>
  40fa42:	1e54      	subs	r4, r2, #1
  40fa44:	2a00      	cmp	r2, #0
  40fa46:	d041      	beq.n	40facc <memset+0x90>
  40fa48:	b2ca      	uxtb	r2, r1
  40fa4a:	4603      	mov	r3, r0
  40fa4c:	e002      	b.n	40fa54 <memset+0x18>
  40fa4e:	f114 34ff 	adds.w	r4, r4, #4294967295
  40fa52:	d33b      	bcc.n	40facc <memset+0x90>
  40fa54:	f803 2b01 	strb.w	r2, [r3], #1
  40fa58:	079d      	lsls	r5, r3, #30
  40fa5a:	d1f8      	bne.n	40fa4e <memset+0x12>
  40fa5c:	2c03      	cmp	r4, #3
  40fa5e:	d92e      	bls.n	40fabe <memset+0x82>
  40fa60:	b2cd      	uxtb	r5, r1
  40fa62:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40fa66:	2c0f      	cmp	r4, #15
  40fa68:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40fa6c:	d919      	bls.n	40faa2 <memset+0x66>
  40fa6e:	f103 0210 	add.w	r2, r3, #16
  40fa72:	4626      	mov	r6, r4
  40fa74:	3e10      	subs	r6, #16
  40fa76:	2e0f      	cmp	r6, #15
  40fa78:	f842 5c10 	str.w	r5, [r2, #-16]
  40fa7c:	f842 5c0c 	str.w	r5, [r2, #-12]
  40fa80:	f842 5c08 	str.w	r5, [r2, #-8]
  40fa84:	f842 5c04 	str.w	r5, [r2, #-4]
  40fa88:	f102 0210 	add.w	r2, r2, #16
  40fa8c:	d8f2      	bhi.n	40fa74 <memset+0x38>
  40fa8e:	f1a4 0210 	sub.w	r2, r4, #16
  40fa92:	f022 020f 	bic.w	r2, r2, #15
  40fa96:	f004 040f 	and.w	r4, r4, #15
  40fa9a:	3210      	adds	r2, #16
  40fa9c:	2c03      	cmp	r4, #3
  40fa9e:	4413      	add	r3, r2
  40faa0:	d90d      	bls.n	40fabe <memset+0x82>
  40faa2:	461e      	mov	r6, r3
  40faa4:	4622      	mov	r2, r4
  40faa6:	3a04      	subs	r2, #4
  40faa8:	2a03      	cmp	r2, #3
  40faaa:	f846 5b04 	str.w	r5, [r6], #4
  40faae:	d8fa      	bhi.n	40faa6 <memset+0x6a>
  40fab0:	1f22      	subs	r2, r4, #4
  40fab2:	f022 0203 	bic.w	r2, r2, #3
  40fab6:	3204      	adds	r2, #4
  40fab8:	4413      	add	r3, r2
  40faba:	f004 0403 	and.w	r4, r4, #3
  40fabe:	b12c      	cbz	r4, 40facc <memset+0x90>
  40fac0:	b2c9      	uxtb	r1, r1
  40fac2:	441c      	add	r4, r3
  40fac4:	f803 1b01 	strb.w	r1, [r3], #1
  40fac8:	429c      	cmp	r4, r3
  40faca:	d1fb      	bne.n	40fac4 <memset+0x88>
  40facc:	bc70      	pop	{r4, r5, r6}
  40face:	4770      	bx	lr
  40fad0:	4614      	mov	r4, r2
  40fad2:	4603      	mov	r3, r0
  40fad4:	e7c2      	b.n	40fa5c <memset+0x20>
  40fad6:	bf00      	nop

0040fad8 <__malloc_lock>:
  40fad8:	4801      	ldr	r0, [pc, #4]	; (40fae0 <__malloc_lock+0x8>)
  40fada:	f7ff bba9 	b.w	40f230 <__retarget_lock_acquire_recursive>
  40fade:	bf00      	nop
  40fae0:	200052d0 	.word	0x200052d0

0040fae4 <__malloc_unlock>:
  40fae4:	4801      	ldr	r0, [pc, #4]	; (40faec <__malloc_unlock+0x8>)
  40fae6:	f7ff bba5 	b.w	40f234 <__retarget_lock_release_recursive>
  40faea:	bf00      	nop
  40faec:	200052d0 	.word	0x200052d0

0040faf0 <_realloc_r>:
  40faf0:	2900      	cmp	r1, #0
  40faf2:	f000 8095 	beq.w	40fc20 <_realloc_r+0x130>
  40faf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fafa:	460d      	mov	r5, r1
  40fafc:	4616      	mov	r6, r2
  40fafe:	b083      	sub	sp, #12
  40fb00:	4680      	mov	r8, r0
  40fb02:	f106 070b 	add.w	r7, r6, #11
  40fb06:	f7ff ffe7 	bl	40fad8 <__malloc_lock>
  40fb0a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40fb0e:	2f16      	cmp	r7, #22
  40fb10:	f02e 0403 	bic.w	r4, lr, #3
  40fb14:	f1a5 0908 	sub.w	r9, r5, #8
  40fb18:	d83c      	bhi.n	40fb94 <_realloc_r+0xa4>
  40fb1a:	2210      	movs	r2, #16
  40fb1c:	4617      	mov	r7, r2
  40fb1e:	42be      	cmp	r6, r7
  40fb20:	d83d      	bhi.n	40fb9e <_realloc_r+0xae>
  40fb22:	4294      	cmp	r4, r2
  40fb24:	da43      	bge.n	40fbae <_realloc_r+0xbe>
  40fb26:	4bc4      	ldr	r3, [pc, #784]	; (40fe38 <_realloc_r+0x348>)
  40fb28:	6899      	ldr	r1, [r3, #8]
  40fb2a:	eb09 0004 	add.w	r0, r9, r4
  40fb2e:	4288      	cmp	r0, r1
  40fb30:	f000 80b4 	beq.w	40fc9c <_realloc_r+0x1ac>
  40fb34:	6843      	ldr	r3, [r0, #4]
  40fb36:	f023 0101 	bic.w	r1, r3, #1
  40fb3a:	4401      	add	r1, r0
  40fb3c:	6849      	ldr	r1, [r1, #4]
  40fb3e:	07c9      	lsls	r1, r1, #31
  40fb40:	d54c      	bpl.n	40fbdc <_realloc_r+0xec>
  40fb42:	f01e 0f01 	tst.w	lr, #1
  40fb46:	f000 809b 	beq.w	40fc80 <_realloc_r+0x190>
  40fb4a:	4631      	mov	r1, r6
  40fb4c:	4640      	mov	r0, r8
  40fb4e:	f7ff fb73 	bl	40f238 <_malloc_r>
  40fb52:	4606      	mov	r6, r0
  40fb54:	2800      	cmp	r0, #0
  40fb56:	d03a      	beq.n	40fbce <_realloc_r+0xde>
  40fb58:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40fb5c:	f023 0301 	bic.w	r3, r3, #1
  40fb60:	444b      	add	r3, r9
  40fb62:	f1a0 0208 	sub.w	r2, r0, #8
  40fb66:	429a      	cmp	r2, r3
  40fb68:	f000 8121 	beq.w	40fdae <_realloc_r+0x2be>
  40fb6c:	1f22      	subs	r2, r4, #4
  40fb6e:	2a24      	cmp	r2, #36	; 0x24
  40fb70:	f200 8107 	bhi.w	40fd82 <_realloc_r+0x292>
  40fb74:	2a13      	cmp	r2, #19
  40fb76:	f200 80db 	bhi.w	40fd30 <_realloc_r+0x240>
  40fb7a:	4603      	mov	r3, r0
  40fb7c:	462a      	mov	r2, r5
  40fb7e:	6811      	ldr	r1, [r2, #0]
  40fb80:	6019      	str	r1, [r3, #0]
  40fb82:	6851      	ldr	r1, [r2, #4]
  40fb84:	6059      	str	r1, [r3, #4]
  40fb86:	6892      	ldr	r2, [r2, #8]
  40fb88:	609a      	str	r2, [r3, #8]
  40fb8a:	4629      	mov	r1, r5
  40fb8c:	4640      	mov	r0, r8
  40fb8e:	f002 fcef 	bl	412570 <_free_r>
  40fb92:	e01c      	b.n	40fbce <_realloc_r+0xde>
  40fb94:	f027 0707 	bic.w	r7, r7, #7
  40fb98:	2f00      	cmp	r7, #0
  40fb9a:	463a      	mov	r2, r7
  40fb9c:	dabf      	bge.n	40fb1e <_realloc_r+0x2e>
  40fb9e:	2600      	movs	r6, #0
  40fba0:	230c      	movs	r3, #12
  40fba2:	4630      	mov	r0, r6
  40fba4:	f8c8 3000 	str.w	r3, [r8]
  40fba8:	b003      	add	sp, #12
  40fbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fbae:	462e      	mov	r6, r5
  40fbb0:	1be3      	subs	r3, r4, r7
  40fbb2:	2b0f      	cmp	r3, #15
  40fbb4:	d81e      	bhi.n	40fbf4 <_realloc_r+0x104>
  40fbb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40fbba:	f003 0301 	and.w	r3, r3, #1
  40fbbe:	4323      	orrs	r3, r4
  40fbc0:	444c      	add	r4, r9
  40fbc2:	f8c9 3004 	str.w	r3, [r9, #4]
  40fbc6:	6863      	ldr	r3, [r4, #4]
  40fbc8:	f043 0301 	orr.w	r3, r3, #1
  40fbcc:	6063      	str	r3, [r4, #4]
  40fbce:	4640      	mov	r0, r8
  40fbd0:	f7ff ff88 	bl	40fae4 <__malloc_unlock>
  40fbd4:	4630      	mov	r0, r6
  40fbd6:	b003      	add	sp, #12
  40fbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fbdc:	f023 0303 	bic.w	r3, r3, #3
  40fbe0:	18e1      	adds	r1, r4, r3
  40fbe2:	4291      	cmp	r1, r2
  40fbe4:	db1f      	blt.n	40fc26 <_realloc_r+0x136>
  40fbe6:	68c3      	ldr	r3, [r0, #12]
  40fbe8:	6882      	ldr	r2, [r0, #8]
  40fbea:	462e      	mov	r6, r5
  40fbec:	60d3      	str	r3, [r2, #12]
  40fbee:	460c      	mov	r4, r1
  40fbf0:	609a      	str	r2, [r3, #8]
  40fbf2:	e7dd      	b.n	40fbb0 <_realloc_r+0xc0>
  40fbf4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40fbf8:	eb09 0107 	add.w	r1, r9, r7
  40fbfc:	f002 0201 	and.w	r2, r2, #1
  40fc00:	444c      	add	r4, r9
  40fc02:	f043 0301 	orr.w	r3, r3, #1
  40fc06:	4317      	orrs	r7, r2
  40fc08:	f8c9 7004 	str.w	r7, [r9, #4]
  40fc0c:	604b      	str	r3, [r1, #4]
  40fc0e:	6863      	ldr	r3, [r4, #4]
  40fc10:	f043 0301 	orr.w	r3, r3, #1
  40fc14:	3108      	adds	r1, #8
  40fc16:	6063      	str	r3, [r4, #4]
  40fc18:	4640      	mov	r0, r8
  40fc1a:	f002 fca9 	bl	412570 <_free_r>
  40fc1e:	e7d6      	b.n	40fbce <_realloc_r+0xde>
  40fc20:	4611      	mov	r1, r2
  40fc22:	f7ff bb09 	b.w	40f238 <_malloc_r>
  40fc26:	f01e 0f01 	tst.w	lr, #1
  40fc2a:	d18e      	bne.n	40fb4a <_realloc_r+0x5a>
  40fc2c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40fc30:	eba9 0a01 	sub.w	sl, r9, r1
  40fc34:	f8da 1004 	ldr.w	r1, [sl, #4]
  40fc38:	f021 0103 	bic.w	r1, r1, #3
  40fc3c:	440b      	add	r3, r1
  40fc3e:	4423      	add	r3, r4
  40fc40:	4293      	cmp	r3, r2
  40fc42:	db25      	blt.n	40fc90 <_realloc_r+0x1a0>
  40fc44:	68c2      	ldr	r2, [r0, #12]
  40fc46:	6881      	ldr	r1, [r0, #8]
  40fc48:	4656      	mov	r6, sl
  40fc4a:	60ca      	str	r2, [r1, #12]
  40fc4c:	6091      	str	r1, [r2, #8]
  40fc4e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40fc52:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40fc56:	1f22      	subs	r2, r4, #4
  40fc58:	2a24      	cmp	r2, #36	; 0x24
  40fc5a:	60c1      	str	r1, [r0, #12]
  40fc5c:	6088      	str	r0, [r1, #8]
  40fc5e:	f200 8094 	bhi.w	40fd8a <_realloc_r+0x29a>
  40fc62:	2a13      	cmp	r2, #19
  40fc64:	d96f      	bls.n	40fd46 <_realloc_r+0x256>
  40fc66:	6829      	ldr	r1, [r5, #0]
  40fc68:	f8ca 1008 	str.w	r1, [sl, #8]
  40fc6c:	6869      	ldr	r1, [r5, #4]
  40fc6e:	f8ca 100c 	str.w	r1, [sl, #12]
  40fc72:	2a1b      	cmp	r2, #27
  40fc74:	f200 80a2 	bhi.w	40fdbc <_realloc_r+0x2cc>
  40fc78:	3508      	adds	r5, #8
  40fc7a:	f10a 0210 	add.w	r2, sl, #16
  40fc7e:	e063      	b.n	40fd48 <_realloc_r+0x258>
  40fc80:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40fc84:	eba9 0a03 	sub.w	sl, r9, r3
  40fc88:	f8da 1004 	ldr.w	r1, [sl, #4]
  40fc8c:	f021 0103 	bic.w	r1, r1, #3
  40fc90:	1863      	adds	r3, r4, r1
  40fc92:	4293      	cmp	r3, r2
  40fc94:	f6ff af59 	blt.w	40fb4a <_realloc_r+0x5a>
  40fc98:	4656      	mov	r6, sl
  40fc9a:	e7d8      	b.n	40fc4e <_realloc_r+0x15e>
  40fc9c:	6841      	ldr	r1, [r0, #4]
  40fc9e:	f021 0b03 	bic.w	fp, r1, #3
  40fca2:	44a3      	add	fp, r4
  40fca4:	f107 0010 	add.w	r0, r7, #16
  40fca8:	4583      	cmp	fp, r0
  40fcaa:	da56      	bge.n	40fd5a <_realloc_r+0x26a>
  40fcac:	f01e 0f01 	tst.w	lr, #1
  40fcb0:	f47f af4b 	bne.w	40fb4a <_realloc_r+0x5a>
  40fcb4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40fcb8:	eba9 0a01 	sub.w	sl, r9, r1
  40fcbc:	f8da 1004 	ldr.w	r1, [sl, #4]
  40fcc0:	f021 0103 	bic.w	r1, r1, #3
  40fcc4:	448b      	add	fp, r1
  40fcc6:	4558      	cmp	r0, fp
  40fcc8:	dce2      	bgt.n	40fc90 <_realloc_r+0x1a0>
  40fcca:	4656      	mov	r6, sl
  40fccc:	f8da 100c 	ldr.w	r1, [sl, #12]
  40fcd0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40fcd4:	1f22      	subs	r2, r4, #4
  40fcd6:	2a24      	cmp	r2, #36	; 0x24
  40fcd8:	60c1      	str	r1, [r0, #12]
  40fcda:	6088      	str	r0, [r1, #8]
  40fcdc:	f200 808f 	bhi.w	40fdfe <_realloc_r+0x30e>
  40fce0:	2a13      	cmp	r2, #19
  40fce2:	f240 808a 	bls.w	40fdfa <_realloc_r+0x30a>
  40fce6:	6829      	ldr	r1, [r5, #0]
  40fce8:	f8ca 1008 	str.w	r1, [sl, #8]
  40fcec:	6869      	ldr	r1, [r5, #4]
  40fcee:	f8ca 100c 	str.w	r1, [sl, #12]
  40fcf2:	2a1b      	cmp	r2, #27
  40fcf4:	f200 808a 	bhi.w	40fe0c <_realloc_r+0x31c>
  40fcf8:	3508      	adds	r5, #8
  40fcfa:	f10a 0210 	add.w	r2, sl, #16
  40fcfe:	6829      	ldr	r1, [r5, #0]
  40fd00:	6011      	str	r1, [r2, #0]
  40fd02:	6869      	ldr	r1, [r5, #4]
  40fd04:	6051      	str	r1, [r2, #4]
  40fd06:	68a9      	ldr	r1, [r5, #8]
  40fd08:	6091      	str	r1, [r2, #8]
  40fd0a:	eb0a 0107 	add.w	r1, sl, r7
  40fd0e:	ebab 0207 	sub.w	r2, fp, r7
  40fd12:	f042 0201 	orr.w	r2, r2, #1
  40fd16:	6099      	str	r1, [r3, #8]
  40fd18:	604a      	str	r2, [r1, #4]
  40fd1a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40fd1e:	f003 0301 	and.w	r3, r3, #1
  40fd22:	431f      	orrs	r7, r3
  40fd24:	4640      	mov	r0, r8
  40fd26:	f8ca 7004 	str.w	r7, [sl, #4]
  40fd2a:	f7ff fedb 	bl	40fae4 <__malloc_unlock>
  40fd2e:	e751      	b.n	40fbd4 <_realloc_r+0xe4>
  40fd30:	682b      	ldr	r3, [r5, #0]
  40fd32:	6003      	str	r3, [r0, #0]
  40fd34:	686b      	ldr	r3, [r5, #4]
  40fd36:	6043      	str	r3, [r0, #4]
  40fd38:	2a1b      	cmp	r2, #27
  40fd3a:	d82d      	bhi.n	40fd98 <_realloc_r+0x2a8>
  40fd3c:	f100 0308 	add.w	r3, r0, #8
  40fd40:	f105 0208 	add.w	r2, r5, #8
  40fd44:	e71b      	b.n	40fb7e <_realloc_r+0x8e>
  40fd46:	4632      	mov	r2, r6
  40fd48:	6829      	ldr	r1, [r5, #0]
  40fd4a:	6011      	str	r1, [r2, #0]
  40fd4c:	6869      	ldr	r1, [r5, #4]
  40fd4e:	6051      	str	r1, [r2, #4]
  40fd50:	68a9      	ldr	r1, [r5, #8]
  40fd52:	6091      	str	r1, [r2, #8]
  40fd54:	461c      	mov	r4, r3
  40fd56:	46d1      	mov	r9, sl
  40fd58:	e72a      	b.n	40fbb0 <_realloc_r+0xc0>
  40fd5a:	eb09 0107 	add.w	r1, r9, r7
  40fd5e:	ebab 0b07 	sub.w	fp, fp, r7
  40fd62:	f04b 0201 	orr.w	r2, fp, #1
  40fd66:	6099      	str	r1, [r3, #8]
  40fd68:	604a      	str	r2, [r1, #4]
  40fd6a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40fd6e:	f003 0301 	and.w	r3, r3, #1
  40fd72:	431f      	orrs	r7, r3
  40fd74:	4640      	mov	r0, r8
  40fd76:	f845 7c04 	str.w	r7, [r5, #-4]
  40fd7a:	f7ff feb3 	bl	40fae4 <__malloc_unlock>
  40fd7e:	462e      	mov	r6, r5
  40fd80:	e728      	b.n	40fbd4 <_realloc_r+0xe4>
  40fd82:	4629      	mov	r1, r5
  40fd84:	f7ff fdf6 	bl	40f974 <memmove>
  40fd88:	e6ff      	b.n	40fb8a <_realloc_r+0x9a>
  40fd8a:	4629      	mov	r1, r5
  40fd8c:	4630      	mov	r0, r6
  40fd8e:	461c      	mov	r4, r3
  40fd90:	46d1      	mov	r9, sl
  40fd92:	f7ff fdef 	bl	40f974 <memmove>
  40fd96:	e70b      	b.n	40fbb0 <_realloc_r+0xc0>
  40fd98:	68ab      	ldr	r3, [r5, #8]
  40fd9a:	6083      	str	r3, [r0, #8]
  40fd9c:	68eb      	ldr	r3, [r5, #12]
  40fd9e:	60c3      	str	r3, [r0, #12]
  40fda0:	2a24      	cmp	r2, #36	; 0x24
  40fda2:	d017      	beq.n	40fdd4 <_realloc_r+0x2e4>
  40fda4:	f100 0310 	add.w	r3, r0, #16
  40fda8:	f105 0210 	add.w	r2, r5, #16
  40fdac:	e6e7      	b.n	40fb7e <_realloc_r+0x8e>
  40fdae:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40fdb2:	f023 0303 	bic.w	r3, r3, #3
  40fdb6:	441c      	add	r4, r3
  40fdb8:	462e      	mov	r6, r5
  40fdba:	e6f9      	b.n	40fbb0 <_realloc_r+0xc0>
  40fdbc:	68a9      	ldr	r1, [r5, #8]
  40fdbe:	f8ca 1010 	str.w	r1, [sl, #16]
  40fdc2:	68e9      	ldr	r1, [r5, #12]
  40fdc4:	f8ca 1014 	str.w	r1, [sl, #20]
  40fdc8:	2a24      	cmp	r2, #36	; 0x24
  40fdca:	d00c      	beq.n	40fde6 <_realloc_r+0x2f6>
  40fdcc:	3510      	adds	r5, #16
  40fdce:	f10a 0218 	add.w	r2, sl, #24
  40fdd2:	e7b9      	b.n	40fd48 <_realloc_r+0x258>
  40fdd4:	692b      	ldr	r3, [r5, #16]
  40fdd6:	6103      	str	r3, [r0, #16]
  40fdd8:	696b      	ldr	r3, [r5, #20]
  40fdda:	6143      	str	r3, [r0, #20]
  40fddc:	f105 0218 	add.w	r2, r5, #24
  40fde0:	f100 0318 	add.w	r3, r0, #24
  40fde4:	e6cb      	b.n	40fb7e <_realloc_r+0x8e>
  40fde6:	692a      	ldr	r2, [r5, #16]
  40fde8:	f8ca 2018 	str.w	r2, [sl, #24]
  40fdec:	696a      	ldr	r2, [r5, #20]
  40fdee:	f8ca 201c 	str.w	r2, [sl, #28]
  40fdf2:	3518      	adds	r5, #24
  40fdf4:	f10a 0220 	add.w	r2, sl, #32
  40fdf8:	e7a6      	b.n	40fd48 <_realloc_r+0x258>
  40fdfa:	4632      	mov	r2, r6
  40fdfc:	e77f      	b.n	40fcfe <_realloc_r+0x20e>
  40fdfe:	4629      	mov	r1, r5
  40fe00:	4630      	mov	r0, r6
  40fe02:	9301      	str	r3, [sp, #4]
  40fe04:	f7ff fdb6 	bl	40f974 <memmove>
  40fe08:	9b01      	ldr	r3, [sp, #4]
  40fe0a:	e77e      	b.n	40fd0a <_realloc_r+0x21a>
  40fe0c:	68a9      	ldr	r1, [r5, #8]
  40fe0e:	f8ca 1010 	str.w	r1, [sl, #16]
  40fe12:	68e9      	ldr	r1, [r5, #12]
  40fe14:	f8ca 1014 	str.w	r1, [sl, #20]
  40fe18:	2a24      	cmp	r2, #36	; 0x24
  40fe1a:	d003      	beq.n	40fe24 <_realloc_r+0x334>
  40fe1c:	3510      	adds	r5, #16
  40fe1e:	f10a 0218 	add.w	r2, sl, #24
  40fe22:	e76c      	b.n	40fcfe <_realloc_r+0x20e>
  40fe24:	692a      	ldr	r2, [r5, #16]
  40fe26:	f8ca 2018 	str.w	r2, [sl, #24]
  40fe2a:	696a      	ldr	r2, [r5, #20]
  40fe2c:	f8ca 201c 	str.w	r2, [sl, #28]
  40fe30:	3518      	adds	r5, #24
  40fe32:	f10a 0220 	add.w	r2, sl, #32
  40fe36:	e762      	b.n	40fcfe <_realloc_r+0x20e>
  40fe38:	20002948 	.word	0x20002948

0040fe3c <_sbrk_r>:
  40fe3c:	b538      	push	{r3, r4, r5, lr}
  40fe3e:	4c07      	ldr	r4, [pc, #28]	; (40fe5c <_sbrk_r+0x20>)
  40fe40:	2300      	movs	r3, #0
  40fe42:	4605      	mov	r5, r0
  40fe44:	4608      	mov	r0, r1
  40fe46:	6023      	str	r3, [r4, #0]
  40fe48:	f7f9 fe1c 	bl	409a84 <_sbrk>
  40fe4c:	1c43      	adds	r3, r0, #1
  40fe4e:	d000      	beq.n	40fe52 <_sbrk_r+0x16>
  40fe50:	bd38      	pop	{r3, r4, r5, pc}
  40fe52:	6823      	ldr	r3, [r4, #0]
  40fe54:	2b00      	cmp	r3, #0
  40fe56:	d0fb      	beq.n	40fe50 <_sbrk_r+0x14>
  40fe58:	602b      	str	r3, [r5, #0]
  40fe5a:	bd38      	pop	{r3, r4, r5, pc}
  40fe5c:	200052e4 	.word	0x200052e4

0040fe60 <snprintf>:
  40fe60:	b40c      	push	{r2, r3}
  40fe62:	b5f0      	push	{r4, r5, r6, r7, lr}
  40fe64:	4b23      	ldr	r3, [pc, #140]	; (40fef4 <snprintf+0x94>)
  40fe66:	1e0c      	subs	r4, r1, #0
  40fe68:	b09d      	sub	sp, #116	; 0x74
  40fe6a:	681d      	ldr	r5, [r3, #0]
  40fe6c:	db3d      	blt.n	40feea <snprintf+0x8a>
  40fe6e:	f44f 7302 	mov.w	r3, #520	; 0x208
  40fe72:	9002      	str	r0, [sp, #8]
  40fe74:	9006      	str	r0, [sp, #24]
  40fe76:	f8ad 3014 	strh.w	r3, [sp, #20]
  40fe7a:	ae23      	add	r6, sp, #140	; 0x8c
  40fe7c:	d017      	beq.n	40feae <snprintf+0x4e>
  40fe7e:	3c01      	subs	r4, #1
  40fe80:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40fe82:	9404      	str	r4, [sp, #16]
  40fe84:	4633      	mov	r3, r6
  40fe86:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40fe8a:	a902      	add	r1, sp, #8
  40fe8c:	4628      	mov	r0, r5
  40fe8e:	9407      	str	r4, [sp, #28]
  40fe90:	9601      	str	r6, [sp, #4]
  40fe92:	f8ad 7016 	strh.w	r7, [sp, #22]
  40fe96:	f000 f8a3 	bl	40ffe0 <_svfprintf_r>
  40fe9a:	1c42      	adds	r2, r0, #1
  40fe9c:	db1b      	blt.n	40fed6 <snprintf+0x76>
  40fe9e:	9b02      	ldr	r3, [sp, #8]
  40fea0:	2200      	movs	r2, #0
  40fea2:	701a      	strb	r2, [r3, #0]
  40fea4:	b01d      	add	sp, #116	; 0x74
  40fea6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40feaa:	b002      	add	sp, #8
  40feac:	4770      	bx	lr
  40feae:	4633      	mov	r3, r6
  40feb0:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40feb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40feb6:	9404      	str	r4, [sp, #16]
  40feb8:	a902      	add	r1, sp, #8
  40feba:	4628      	mov	r0, r5
  40febc:	9407      	str	r4, [sp, #28]
  40febe:	9601      	str	r6, [sp, #4]
  40fec0:	f8ad 7016 	strh.w	r7, [sp, #22]
  40fec4:	f000 f88c 	bl	40ffe0 <_svfprintf_r>
  40fec8:	1c43      	adds	r3, r0, #1
  40feca:	db07      	blt.n	40fedc <snprintf+0x7c>
  40fecc:	b01d      	add	sp, #116	; 0x74
  40fece:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40fed2:	b002      	add	sp, #8
  40fed4:	4770      	bx	lr
  40fed6:	238b      	movs	r3, #139	; 0x8b
  40fed8:	602b      	str	r3, [r5, #0]
  40feda:	e7e0      	b.n	40fe9e <snprintf+0x3e>
  40fedc:	238b      	movs	r3, #139	; 0x8b
  40fede:	602b      	str	r3, [r5, #0]
  40fee0:	b01d      	add	sp, #116	; 0x74
  40fee2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40fee6:	b002      	add	sp, #8
  40fee8:	4770      	bx	lr
  40feea:	238b      	movs	r3, #139	; 0x8b
  40feec:	602b      	str	r3, [r5, #0]
  40feee:	f04f 30ff 	mov.w	r0, #4294967295
  40fef2:	e7eb      	b.n	40fecc <snprintf+0x6c>
  40fef4:	20002518 	.word	0x20002518
	...

0040ff00 <strlen>:
  40ff00:	f890 f000 	pld	[r0]
  40ff04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40ff08:	f020 0107 	bic.w	r1, r0, #7
  40ff0c:	f06f 0c00 	mvn.w	ip, #0
  40ff10:	f010 0407 	ands.w	r4, r0, #7
  40ff14:	f891 f020 	pld	[r1, #32]
  40ff18:	f040 8049 	bne.w	40ffae <strlen+0xae>
  40ff1c:	f04f 0400 	mov.w	r4, #0
  40ff20:	f06f 0007 	mvn.w	r0, #7
  40ff24:	e9d1 2300 	ldrd	r2, r3, [r1]
  40ff28:	f891 f040 	pld	[r1, #64]	; 0x40
  40ff2c:	f100 0008 	add.w	r0, r0, #8
  40ff30:	fa82 f24c 	uadd8	r2, r2, ip
  40ff34:	faa4 f28c 	sel	r2, r4, ip
  40ff38:	fa83 f34c 	uadd8	r3, r3, ip
  40ff3c:	faa2 f38c 	sel	r3, r2, ip
  40ff40:	bb4b      	cbnz	r3, 40ff96 <strlen+0x96>
  40ff42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40ff46:	fa82 f24c 	uadd8	r2, r2, ip
  40ff4a:	f100 0008 	add.w	r0, r0, #8
  40ff4e:	faa4 f28c 	sel	r2, r4, ip
  40ff52:	fa83 f34c 	uadd8	r3, r3, ip
  40ff56:	faa2 f38c 	sel	r3, r2, ip
  40ff5a:	b9e3      	cbnz	r3, 40ff96 <strlen+0x96>
  40ff5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40ff60:	fa82 f24c 	uadd8	r2, r2, ip
  40ff64:	f100 0008 	add.w	r0, r0, #8
  40ff68:	faa4 f28c 	sel	r2, r4, ip
  40ff6c:	fa83 f34c 	uadd8	r3, r3, ip
  40ff70:	faa2 f38c 	sel	r3, r2, ip
  40ff74:	b97b      	cbnz	r3, 40ff96 <strlen+0x96>
  40ff76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40ff7a:	f101 0120 	add.w	r1, r1, #32
  40ff7e:	fa82 f24c 	uadd8	r2, r2, ip
  40ff82:	f100 0008 	add.w	r0, r0, #8
  40ff86:	faa4 f28c 	sel	r2, r4, ip
  40ff8a:	fa83 f34c 	uadd8	r3, r3, ip
  40ff8e:	faa2 f38c 	sel	r3, r2, ip
  40ff92:	2b00      	cmp	r3, #0
  40ff94:	d0c6      	beq.n	40ff24 <strlen+0x24>
  40ff96:	2a00      	cmp	r2, #0
  40ff98:	bf04      	itt	eq
  40ff9a:	3004      	addeq	r0, #4
  40ff9c:	461a      	moveq	r2, r3
  40ff9e:	ba12      	rev	r2, r2
  40ffa0:	fab2 f282 	clz	r2, r2
  40ffa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40ffa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40ffac:	4770      	bx	lr
  40ffae:	e9d1 2300 	ldrd	r2, r3, [r1]
  40ffb2:	f004 0503 	and.w	r5, r4, #3
  40ffb6:	f1c4 0000 	rsb	r0, r4, #0
  40ffba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40ffbe:	f014 0f04 	tst.w	r4, #4
  40ffc2:	f891 f040 	pld	[r1, #64]	; 0x40
  40ffc6:	fa0c f505 	lsl.w	r5, ip, r5
  40ffca:	ea62 0205 	orn	r2, r2, r5
  40ffce:	bf1c      	itt	ne
  40ffd0:	ea63 0305 	ornne	r3, r3, r5
  40ffd4:	4662      	movne	r2, ip
  40ffd6:	f04f 0400 	mov.w	r4, #0
  40ffda:	e7a9      	b.n	40ff30 <strlen+0x30>
  40ffdc:	0000      	movs	r0, r0
	...

0040ffe0 <_svfprintf_r>:
  40ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ffe4:	b0c1      	sub	sp, #260	; 0x104
  40ffe6:	460c      	mov	r4, r1
  40ffe8:	9107      	str	r1, [sp, #28]
  40ffea:	4692      	mov	sl, r2
  40ffec:	930b      	str	r3, [sp, #44]	; 0x2c
  40ffee:	9008      	str	r0, [sp, #32]
  40fff0:	f002 fba4 	bl	41273c <_localeconv_r>
  40fff4:	6803      	ldr	r3, [r0, #0]
  40fff6:	9314      	str	r3, [sp, #80]	; 0x50
  40fff8:	4618      	mov	r0, r3
  40fffa:	f7ff ff81 	bl	40ff00 <strlen>
  40fffe:	89a3      	ldrh	r3, [r4, #12]
  410000:	9013      	str	r0, [sp, #76]	; 0x4c
  410002:	0619      	lsls	r1, r3, #24
  410004:	d503      	bpl.n	41000e <_svfprintf_r+0x2e>
  410006:	6923      	ldr	r3, [r4, #16]
  410008:	2b00      	cmp	r3, #0
  41000a:	f001 801b 	beq.w	411044 <_svfprintf_r+0x1064>
  41000e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 410260 <_svfprintf_r+0x280>
  410012:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  410016:	2300      	movs	r3, #0
  410018:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  41001c:	930f      	str	r3, [sp, #60]	; 0x3c
  41001e:	9325      	str	r3, [sp, #148]	; 0x94
  410020:	9324      	str	r3, [sp, #144]	; 0x90
  410022:	9312      	str	r3, [sp, #72]	; 0x48
  410024:	9315      	str	r3, [sp, #84]	; 0x54
  410026:	9305      	str	r3, [sp, #20]
  410028:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
  41002c:	46c8      	mov	r8, r9
  41002e:	f89a 3000 	ldrb.w	r3, [sl]
  410032:	4654      	mov	r4, sl
  410034:	b1e3      	cbz	r3, 410070 <_svfprintf_r+0x90>
  410036:	2b25      	cmp	r3, #37	; 0x25
  410038:	d102      	bne.n	410040 <_svfprintf_r+0x60>
  41003a:	e019      	b.n	410070 <_svfprintf_r+0x90>
  41003c:	2b25      	cmp	r3, #37	; 0x25
  41003e:	d003      	beq.n	410048 <_svfprintf_r+0x68>
  410040:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  410044:	2b00      	cmp	r3, #0
  410046:	d1f9      	bne.n	41003c <_svfprintf_r+0x5c>
  410048:	eba4 050a 	sub.w	r5, r4, sl
  41004c:	b185      	cbz	r5, 410070 <_svfprintf_r+0x90>
  41004e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410050:	9a25      	ldr	r2, [sp, #148]	; 0x94
  410052:	f8c8 a000 	str.w	sl, [r8]
  410056:	3301      	adds	r3, #1
  410058:	442a      	add	r2, r5
  41005a:	2b07      	cmp	r3, #7
  41005c:	f8c8 5004 	str.w	r5, [r8, #4]
  410060:	9225      	str	r2, [sp, #148]	; 0x94
  410062:	9324      	str	r3, [sp, #144]	; 0x90
  410064:	dc7f      	bgt.n	410166 <_svfprintf_r+0x186>
  410066:	f108 0808 	add.w	r8, r8, #8
  41006a:	9b05      	ldr	r3, [sp, #20]
  41006c:	442b      	add	r3, r5
  41006e:	9305      	str	r3, [sp, #20]
  410070:	7823      	ldrb	r3, [r4, #0]
  410072:	2b00      	cmp	r3, #0
  410074:	d07f      	beq.n	410176 <_svfprintf_r+0x196>
  410076:	2300      	movs	r3, #0
  410078:	461a      	mov	r2, r3
  41007a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  41007e:	4619      	mov	r1, r3
  410080:	9309      	str	r3, [sp, #36]	; 0x24
  410082:	469b      	mov	fp, r3
  410084:	f04f 30ff 	mov.w	r0, #4294967295
  410088:	7863      	ldrb	r3, [r4, #1]
  41008a:	9006      	str	r0, [sp, #24]
  41008c:	f104 0a01 	add.w	sl, r4, #1
  410090:	f10a 0a01 	add.w	sl, sl, #1
  410094:	f1a3 0020 	sub.w	r0, r3, #32
  410098:	2858      	cmp	r0, #88	; 0x58
  41009a:	f200 83d3 	bhi.w	410844 <_svfprintf_r+0x864>
  41009e:	e8df f010 	tbh	[pc, r0, lsl #1]
  4100a2:	023f      	.short	0x023f
  4100a4:	03d103d1 	.word	0x03d103d1
  4100a8:	03d10247 	.word	0x03d10247
  4100ac:	03d103d1 	.word	0x03d103d1
  4100b0:	03d103d1 	.word	0x03d103d1
  4100b4:	024c03d1 	.word	0x024c03d1
  4100b8:	03d1020a 	.word	0x03d1020a
  4100bc:	0273005d 	.word	0x0273005d
  4100c0:	028e03d1 	.word	0x028e03d1
  4100c4:	03c103c1 	.word	0x03c103c1
  4100c8:	03c103c1 	.word	0x03c103c1
  4100cc:	03c103c1 	.word	0x03c103c1
  4100d0:	03c103c1 	.word	0x03c103c1
  4100d4:	03d103c1 	.word	0x03d103c1
  4100d8:	03d103d1 	.word	0x03d103d1
  4100dc:	03d103d1 	.word	0x03d103d1
  4100e0:	03d103d1 	.word	0x03d103d1
  4100e4:	03d103d1 	.word	0x03d103d1
  4100e8:	033f03d1 	.word	0x033f03d1
  4100ec:	03d1035f 	.word	0x03d1035f
  4100f0:	03d1035f 	.word	0x03d1035f
  4100f4:	03d103d1 	.word	0x03d103d1
  4100f8:	03aa03d1 	.word	0x03aa03d1
  4100fc:	03d103d1 	.word	0x03d103d1
  410100:	03d103af 	.word	0x03d103af
  410104:	03d103d1 	.word	0x03d103d1
  410108:	03d103d1 	.word	0x03d103d1
  41010c:	03d10261 	.word	0x03d10261
  410110:	032603d1 	.word	0x032603d1
  410114:	03d103d1 	.word	0x03d103d1
  410118:	03d103d1 	.word	0x03d103d1
  41011c:	03d103d1 	.word	0x03d103d1
  410120:	03d103d1 	.word	0x03d103d1
  410124:	03d103d1 	.word	0x03d103d1
  410128:	02e302ce 	.word	0x02e302ce
  41012c:	035f035f 	.word	0x035f035f
  410130:	0293035f 	.word	0x0293035f
  410134:	03d102e3 	.word	0x03d102e3
  410138:	029803d1 	.word	0x029803d1
  41013c:	02a503d1 	.word	0x02a503d1
  410140:	02bc01d3 	.word	0x02bc01d3
  410144:	03d1020f 	.word	0x03d1020f
  410148:	03d101e8 	.word	0x03d101e8
  41014c:	03d1007e 	.word	0x03d1007e
  410150:	021403d1 	.word	0x021403d1
  410154:	9809      	ldr	r0, [sp, #36]	; 0x24
  410156:	930b      	str	r3, [sp, #44]	; 0x2c
  410158:	4240      	negs	r0, r0
  41015a:	9009      	str	r0, [sp, #36]	; 0x24
  41015c:	f04b 0b04 	orr.w	fp, fp, #4
  410160:	f89a 3000 	ldrb.w	r3, [sl]
  410164:	e794      	b.n	410090 <_svfprintf_r+0xb0>
  410166:	aa23      	add	r2, sp, #140	; 0x8c
  410168:	9907      	ldr	r1, [sp, #28]
  41016a:	9808      	ldr	r0, [sp, #32]
  41016c:	f002 fdf0 	bl	412d50 <__ssprint_r>
  410170:	b940      	cbnz	r0, 410184 <_svfprintf_r+0x1a4>
  410172:	46c8      	mov	r8, r9
  410174:	e779      	b.n	41006a <_svfprintf_r+0x8a>
  410176:	9b25      	ldr	r3, [sp, #148]	; 0x94
  410178:	b123      	cbz	r3, 410184 <_svfprintf_r+0x1a4>
  41017a:	9808      	ldr	r0, [sp, #32]
  41017c:	9907      	ldr	r1, [sp, #28]
  41017e:	aa23      	add	r2, sp, #140	; 0x8c
  410180:	f002 fde6 	bl	412d50 <__ssprint_r>
  410184:	9b07      	ldr	r3, [sp, #28]
  410186:	899b      	ldrh	r3, [r3, #12]
  410188:	f013 0f40 	tst.w	r3, #64	; 0x40
  41018c:	9b05      	ldr	r3, [sp, #20]
  41018e:	bf18      	it	ne
  410190:	f04f 33ff 	movne.w	r3, #4294967295
  410194:	9305      	str	r3, [sp, #20]
  410196:	9805      	ldr	r0, [sp, #20]
  410198:	b041      	add	sp, #260	; 0x104
  41019a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41019e:	f01b 0f20 	tst.w	fp, #32
  4101a2:	930d      	str	r3, [sp, #52]	; 0x34
  4101a4:	f040 81e5 	bne.w	410572 <_svfprintf_r+0x592>
  4101a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4101aa:	f01b 0f10 	tst.w	fp, #16
  4101ae:	4613      	mov	r3, r2
  4101b0:	f040 8588 	bne.w	410cc4 <_svfprintf_r+0xce4>
  4101b4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4101b8:	f000 8584 	beq.w	410cc4 <_svfprintf_r+0xce4>
  4101bc:	8814      	ldrh	r4, [r2, #0]
  4101be:	3204      	adds	r2, #4
  4101c0:	2500      	movs	r5, #0
  4101c2:	2301      	movs	r3, #1
  4101c4:	920b      	str	r2, [sp, #44]	; 0x2c
  4101c6:	2700      	movs	r7, #0
  4101c8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4101cc:	9906      	ldr	r1, [sp, #24]
  4101ce:	1c4a      	adds	r2, r1, #1
  4101d0:	f000 826d 	beq.w	4106ae <_svfprintf_r+0x6ce>
  4101d4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4101d8:	9203      	str	r2, [sp, #12]
  4101da:	ea54 0205 	orrs.w	r2, r4, r5
  4101de:	f040 826c 	bne.w	4106ba <_svfprintf_r+0x6da>
  4101e2:	2900      	cmp	r1, #0
  4101e4:	f040 8451 	bne.w	410a8a <_svfprintf_r+0xaaa>
  4101e8:	2b00      	cmp	r3, #0
  4101ea:	f040 850b 	bne.w	410c04 <_svfprintf_r+0xc24>
  4101ee:	f01b 0301 	ands.w	r3, fp, #1
  4101f2:	930a      	str	r3, [sp, #40]	; 0x28
  4101f4:	f000 861a 	beq.w	410e2c <_svfprintf_r+0xe4c>
  4101f8:	ae40      	add	r6, sp, #256	; 0x100
  4101fa:	2330      	movs	r3, #48	; 0x30
  4101fc:	f806 3d41 	strb.w	r3, [r6, #-65]!
  410200:	9b06      	ldr	r3, [sp, #24]
  410202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410204:	4293      	cmp	r3, r2
  410206:	bfb8      	it	lt
  410208:	4613      	movlt	r3, r2
  41020a:	9304      	str	r3, [sp, #16]
  41020c:	2300      	movs	r3, #0
  41020e:	930e      	str	r3, [sp, #56]	; 0x38
  410210:	b117      	cbz	r7, 410218 <_svfprintf_r+0x238>
  410212:	9b04      	ldr	r3, [sp, #16]
  410214:	3301      	adds	r3, #1
  410216:	9304      	str	r3, [sp, #16]
  410218:	9b03      	ldr	r3, [sp, #12]
  41021a:	f013 0302 	ands.w	r3, r3, #2
  41021e:	930c      	str	r3, [sp, #48]	; 0x30
  410220:	d002      	beq.n	410228 <_svfprintf_r+0x248>
  410222:	9b04      	ldr	r3, [sp, #16]
  410224:	3302      	adds	r3, #2
  410226:	9304      	str	r3, [sp, #16]
  410228:	9b03      	ldr	r3, [sp, #12]
  41022a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  41022e:	f040 8320 	bne.w	410872 <_svfprintf_r+0x892>
  410232:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410234:	9a04      	ldr	r2, [sp, #16]
  410236:	eba3 0b02 	sub.w	fp, r3, r2
  41023a:	f1bb 0f00 	cmp.w	fp, #0
  41023e:	f340 8318 	ble.w	410872 <_svfprintf_r+0x892>
  410242:	f1bb 0f10 	cmp.w	fp, #16
  410246:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410248:	9a24      	ldr	r2, [sp, #144]	; 0x90
  41024a:	dd30      	ble.n	4102ae <_svfprintf_r+0x2ce>
  41024c:	4643      	mov	r3, r8
  41024e:	4621      	mov	r1, r4
  410250:	46a8      	mov	r8, r5
  410252:	2710      	movs	r7, #16
  410254:	9c08      	ldr	r4, [sp, #32]
  410256:	9d07      	ldr	r5, [sp, #28]
  410258:	e00d      	b.n	410276 <_svfprintf_r+0x296>
  41025a:	bf00      	nop
  41025c:	f3af 8000 	nop.w
	...
  410268:	f1ab 0b10 	sub.w	fp, fp, #16
  41026c:	f1bb 0f10 	cmp.w	fp, #16
  410270:	f103 0308 	add.w	r3, r3, #8
  410274:	dd18      	ble.n	4102a8 <_svfprintf_r+0x2c8>
  410276:	3201      	adds	r2, #1
  410278:	48b7      	ldr	r0, [pc, #732]	; (410558 <_svfprintf_r+0x578>)
  41027a:	9224      	str	r2, [sp, #144]	; 0x90
  41027c:	3110      	adds	r1, #16
  41027e:	2a07      	cmp	r2, #7
  410280:	9125      	str	r1, [sp, #148]	; 0x94
  410282:	e883 0081 	stmia.w	r3, {r0, r7}
  410286:	ddef      	ble.n	410268 <_svfprintf_r+0x288>
  410288:	aa23      	add	r2, sp, #140	; 0x8c
  41028a:	4629      	mov	r1, r5
  41028c:	4620      	mov	r0, r4
  41028e:	f002 fd5f 	bl	412d50 <__ssprint_r>
  410292:	2800      	cmp	r0, #0
  410294:	f47f af76 	bne.w	410184 <_svfprintf_r+0x1a4>
  410298:	f1ab 0b10 	sub.w	fp, fp, #16
  41029c:	f1bb 0f10 	cmp.w	fp, #16
  4102a0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4102a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4102a4:	464b      	mov	r3, r9
  4102a6:	dce6      	bgt.n	410276 <_svfprintf_r+0x296>
  4102a8:	4645      	mov	r5, r8
  4102aa:	460c      	mov	r4, r1
  4102ac:	4698      	mov	r8, r3
  4102ae:	3201      	adds	r2, #1
  4102b0:	4ba9      	ldr	r3, [pc, #676]	; (410558 <_svfprintf_r+0x578>)
  4102b2:	9224      	str	r2, [sp, #144]	; 0x90
  4102b4:	445c      	add	r4, fp
  4102b6:	2a07      	cmp	r2, #7
  4102b8:	9425      	str	r4, [sp, #148]	; 0x94
  4102ba:	e888 0808 	stmia.w	r8, {r3, fp}
  4102be:	f300 84a6 	bgt.w	410c0e <_svfprintf_r+0xc2e>
  4102c2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4102c6:	f108 0808 	add.w	r8, r8, #8
  4102ca:	b177      	cbz	r7, 4102ea <_svfprintf_r+0x30a>
  4102cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4102ce:	3301      	adds	r3, #1
  4102d0:	3401      	adds	r4, #1
  4102d2:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  4102d6:	2201      	movs	r2, #1
  4102d8:	2b07      	cmp	r3, #7
  4102da:	9425      	str	r4, [sp, #148]	; 0x94
  4102dc:	9324      	str	r3, [sp, #144]	; 0x90
  4102de:	e888 0006 	stmia.w	r8, {r1, r2}
  4102e2:	f300 83f4 	bgt.w	410ace <_svfprintf_r+0xaee>
  4102e6:	f108 0808 	add.w	r8, r8, #8
  4102ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4102ec:	b16b      	cbz	r3, 41030a <_svfprintf_r+0x32a>
  4102ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4102f0:	3301      	adds	r3, #1
  4102f2:	3402      	adds	r4, #2
  4102f4:	a91c      	add	r1, sp, #112	; 0x70
  4102f6:	2202      	movs	r2, #2
  4102f8:	2b07      	cmp	r3, #7
  4102fa:	9425      	str	r4, [sp, #148]	; 0x94
  4102fc:	9324      	str	r3, [sp, #144]	; 0x90
  4102fe:	e888 0006 	stmia.w	r8, {r1, r2}
  410302:	f300 83d9 	bgt.w	410ab8 <_svfprintf_r+0xad8>
  410306:	f108 0808 	add.w	r8, r8, #8
  41030a:	2d80      	cmp	r5, #128	; 0x80
  41030c:	f000 8322 	beq.w	410954 <_svfprintf_r+0x974>
  410310:	9b06      	ldr	r3, [sp, #24]
  410312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410314:	1a9f      	subs	r7, r3, r2
  410316:	2f00      	cmp	r7, #0
  410318:	dd36      	ble.n	410388 <_svfprintf_r+0x3a8>
  41031a:	2f10      	cmp	r7, #16
  41031c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  41031e:	4d8f      	ldr	r5, [pc, #572]	; (41055c <_svfprintf_r+0x57c>)
  410320:	dd27      	ble.n	410372 <_svfprintf_r+0x392>
  410322:	4642      	mov	r2, r8
  410324:	4621      	mov	r1, r4
  410326:	46b0      	mov	r8, r6
  410328:	f04f 0b10 	mov.w	fp, #16
  41032c:	462e      	mov	r6, r5
  41032e:	9c08      	ldr	r4, [sp, #32]
  410330:	9d07      	ldr	r5, [sp, #28]
  410332:	e004      	b.n	41033e <_svfprintf_r+0x35e>
  410334:	3f10      	subs	r7, #16
  410336:	2f10      	cmp	r7, #16
  410338:	f102 0208 	add.w	r2, r2, #8
  41033c:	dd15      	ble.n	41036a <_svfprintf_r+0x38a>
  41033e:	3301      	adds	r3, #1
  410340:	3110      	adds	r1, #16
  410342:	2b07      	cmp	r3, #7
  410344:	9125      	str	r1, [sp, #148]	; 0x94
  410346:	9324      	str	r3, [sp, #144]	; 0x90
  410348:	e882 0840 	stmia.w	r2, {r6, fp}
  41034c:	ddf2      	ble.n	410334 <_svfprintf_r+0x354>
  41034e:	aa23      	add	r2, sp, #140	; 0x8c
  410350:	4629      	mov	r1, r5
  410352:	4620      	mov	r0, r4
  410354:	f002 fcfc 	bl	412d50 <__ssprint_r>
  410358:	2800      	cmp	r0, #0
  41035a:	f47f af13 	bne.w	410184 <_svfprintf_r+0x1a4>
  41035e:	3f10      	subs	r7, #16
  410360:	2f10      	cmp	r7, #16
  410362:	9925      	ldr	r1, [sp, #148]	; 0x94
  410364:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410366:	464a      	mov	r2, r9
  410368:	dce9      	bgt.n	41033e <_svfprintf_r+0x35e>
  41036a:	4635      	mov	r5, r6
  41036c:	460c      	mov	r4, r1
  41036e:	4646      	mov	r6, r8
  410370:	4690      	mov	r8, r2
  410372:	3301      	adds	r3, #1
  410374:	443c      	add	r4, r7
  410376:	2b07      	cmp	r3, #7
  410378:	9425      	str	r4, [sp, #148]	; 0x94
  41037a:	9324      	str	r3, [sp, #144]	; 0x90
  41037c:	e888 00a0 	stmia.w	r8, {r5, r7}
  410380:	f300 838f 	bgt.w	410aa2 <_svfprintf_r+0xac2>
  410384:	f108 0808 	add.w	r8, r8, #8
  410388:	9b03      	ldr	r3, [sp, #12]
  41038a:	05df      	lsls	r7, r3, #23
  41038c:	f100 8273 	bmi.w	410876 <_svfprintf_r+0x896>
  410390:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410392:	990a      	ldr	r1, [sp, #40]	; 0x28
  410394:	f8c8 6000 	str.w	r6, [r8]
  410398:	3301      	adds	r3, #1
  41039a:	440c      	add	r4, r1
  41039c:	2b07      	cmp	r3, #7
  41039e:	9425      	str	r4, [sp, #148]	; 0x94
  4103a0:	f8c8 1004 	str.w	r1, [r8, #4]
  4103a4:	9324      	str	r3, [sp, #144]	; 0x90
  4103a6:	f300 835b 	bgt.w	410a60 <_svfprintf_r+0xa80>
  4103aa:	f108 0808 	add.w	r8, r8, #8
  4103ae:	9b03      	ldr	r3, [sp, #12]
  4103b0:	075b      	lsls	r3, r3, #29
  4103b2:	d53a      	bpl.n	41042a <_svfprintf_r+0x44a>
  4103b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4103b6:	9a04      	ldr	r2, [sp, #16]
  4103b8:	1a9d      	subs	r5, r3, r2
  4103ba:	2d00      	cmp	r5, #0
  4103bc:	dd35      	ble.n	41042a <_svfprintf_r+0x44a>
  4103be:	2d10      	cmp	r5, #16
  4103c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4103c2:	dd20      	ble.n	410406 <_svfprintf_r+0x426>
  4103c4:	2610      	movs	r6, #16
  4103c6:	9f08      	ldr	r7, [sp, #32]
  4103c8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4103cc:	e004      	b.n	4103d8 <_svfprintf_r+0x3f8>
  4103ce:	3d10      	subs	r5, #16
  4103d0:	2d10      	cmp	r5, #16
  4103d2:	f108 0808 	add.w	r8, r8, #8
  4103d6:	dd16      	ble.n	410406 <_svfprintf_r+0x426>
  4103d8:	3301      	adds	r3, #1
  4103da:	4a5f      	ldr	r2, [pc, #380]	; (410558 <_svfprintf_r+0x578>)
  4103dc:	9324      	str	r3, [sp, #144]	; 0x90
  4103de:	3410      	adds	r4, #16
  4103e0:	2b07      	cmp	r3, #7
  4103e2:	9425      	str	r4, [sp, #148]	; 0x94
  4103e4:	e888 0044 	stmia.w	r8, {r2, r6}
  4103e8:	ddf1      	ble.n	4103ce <_svfprintf_r+0x3ee>
  4103ea:	aa23      	add	r2, sp, #140	; 0x8c
  4103ec:	4659      	mov	r1, fp
  4103ee:	4638      	mov	r0, r7
  4103f0:	f002 fcae 	bl	412d50 <__ssprint_r>
  4103f4:	2800      	cmp	r0, #0
  4103f6:	f47f aec5 	bne.w	410184 <_svfprintf_r+0x1a4>
  4103fa:	3d10      	subs	r5, #16
  4103fc:	2d10      	cmp	r5, #16
  4103fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410400:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410402:	46c8      	mov	r8, r9
  410404:	dce8      	bgt.n	4103d8 <_svfprintf_r+0x3f8>
  410406:	3301      	adds	r3, #1
  410408:	4a53      	ldr	r2, [pc, #332]	; (410558 <_svfprintf_r+0x578>)
  41040a:	9324      	str	r3, [sp, #144]	; 0x90
  41040c:	442c      	add	r4, r5
  41040e:	2b07      	cmp	r3, #7
  410410:	9425      	str	r4, [sp, #148]	; 0x94
  410412:	e888 0024 	stmia.w	r8, {r2, r5}
  410416:	dd08      	ble.n	41042a <_svfprintf_r+0x44a>
  410418:	aa23      	add	r2, sp, #140	; 0x8c
  41041a:	9907      	ldr	r1, [sp, #28]
  41041c:	9808      	ldr	r0, [sp, #32]
  41041e:	f002 fc97 	bl	412d50 <__ssprint_r>
  410422:	2800      	cmp	r0, #0
  410424:	f47f aeae 	bne.w	410184 <_svfprintf_r+0x1a4>
  410428:	9c25      	ldr	r4, [sp, #148]	; 0x94
  41042a:	9b05      	ldr	r3, [sp, #20]
  41042c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41042e:	9904      	ldr	r1, [sp, #16]
  410430:	428a      	cmp	r2, r1
  410432:	bfac      	ite	ge
  410434:	189b      	addge	r3, r3, r2
  410436:	185b      	addlt	r3, r3, r1
  410438:	9305      	str	r3, [sp, #20]
  41043a:	2c00      	cmp	r4, #0
  41043c:	f040 831b 	bne.w	410a76 <_svfprintf_r+0xa96>
  410440:	2300      	movs	r3, #0
  410442:	9324      	str	r3, [sp, #144]	; 0x90
  410444:	46c8      	mov	r8, r9
  410446:	e5f2      	b.n	41002e <_svfprintf_r+0x4e>
  410448:	930d      	str	r3, [sp, #52]	; 0x34
  41044a:	f01b 0320 	ands.w	r3, fp, #32
  41044e:	f040 81de 	bne.w	41080e <_svfprintf_r+0x82e>
  410452:	f01b 0210 	ands.w	r2, fp, #16
  410456:	f040 842d 	bne.w	410cb4 <_svfprintf_r+0xcd4>
  41045a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  41045e:	f000 8429 	beq.w	410cb4 <_svfprintf_r+0xcd4>
  410462:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410464:	4613      	mov	r3, r2
  410466:	460a      	mov	r2, r1
  410468:	3204      	adds	r2, #4
  41046a:	880c      	ldrh	r4, [r1, #0]
  41046c:	920b      	str	r2, [sp, #44]	; 0x2c
  41046e:	2500      	movs	r5, #0
  410470:	e6a9      	b.n	4101c6 <_svfprintf_r+0x1e6>
  410472:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410474:	930d      	str	r3, [sp, #52]	; 0x34
  410476:	6816      	ldr	r6, [r2, #0]
  410478:	2400      	movs	r4, #0
  41047a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  41047e:	1d15      	adds	r5, r2, #4
  410480:	2e00      	cmp	r6, #0
  410482:	f000 86b5 	beq.w	4111f0 <_svfprintf_r+0x1210>
  410486:	9a06      	ldr	r2, [sp, #24]
  410488:	1c53      	adds	r3, r2, #1
  41048a:	f000 8617 	beq.w	4110bc <_svfprintf_r+0x10dc>
  41048e:	4621      	mov	r1, r4
  410490:	4630      	mov	r0, r6
  410492:	f7ff f985 	bl	40f7a0 <memchr>
  410496:	2800      	cmp	r0, #0
  410498:	f000 8708 	beq.w	4112ac <_svfprintf_r+0x12cc>
  41049c:	1b83      	subs	r3, r0, r6
  41049e:	930a      	str	r3, [sp, #40]	; 0x28
  4104a0:	9406      	str	r4, [sp, #24]
  4104a2:	950b      	str	r5, [sp, #44]	; 0x2c
  4104a4:	f8cd b00c 	str.w	fp, [sp, #12]
  4104a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4104ac:	9304      	str	r3, [sp, #16]
  4104ae:	940e      	str	r4, [sp, #56]	; 0x38
  4104b0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4104b4:	e6ac      	b.n	410210 <_svfprintf_r+0x230>
  4104b6:	f89a 3000 	ldrb.w	r3, [sl]
  4104ba:	2201      	movs	r2, #1
  4104bc:	212b      	movs	r1, #43	; 0x2b
  4104be:	e5e7      	b.n	410090 <_svfprintf_r+0xb0>
  4104c0:	f04b 0b20 	orr.w	fp, fp, #32
  4104c4:	f89a 3000 	ldrb.w	r3, [sl]
  4104c8:	e5e2      	b.n	410090 <_svfprintf_r+0xb0>
  4104ca:	930d      	str	r3, [sp, #52]	; 0x34
  4104cc:	2a00      	cmp	r2, #0
  4104ce:	f040 87aa 	bne.w	411426 <_svfprintf_r+0x1446>
  4104d2:	4b23      	ldr	r3, [pc, #140]	; (410560 <_svfprintf_r+0x580>)
  4104d4:	9312      	str	r3, [sp, #72]	; 0x48
  4104d6:	f01b 0f20 	tst.w	fp, #32
  4104da:	f040 8112 	bne.w	410702 <_svfprintf_r+0x722>
  4104de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4104e0:	f01b 0f10 	tst.w	fp, #16
  4104e4:	4613      	mov	r3, r2
  4104e6:	f040 83e0 	bne.w	410caa <_svfprintf_r+0xcca>
  4104ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4104ee:	f000 83dc 	beq.w	410caa <_svfprintf_r+0xcca>
  4104f2:	3304      	adds	r3, #4
  4104f4:	8814      	ldrh	r4, [r2, #0]
  4104f6:	930b      	str	r3, [sp, #44]	; 0x2c
  4104f8:	2500      	movs	r5, #0
  4104fa:	f01b 0f01 	tst.w	fp, #1
  4104fe:	f000 810d 	beq.w	41071c <_svfprintf_r+0x73c>
  410502:	ea54 0305 	orrs.w	r3, r4, r5
  410506:	f000 8109 	beq.w	41071c <_svfprintf_r+0x73c>
  41050a:	2330      	movs	r3, #48	; 0x30
  41050c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  410510:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  410514:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  410518:	f04b 0b02 	orr.w	fp, fp, #2
  41051c:	2302      	movs	r3, #2
  41051e:	e652      	b.n	4101c6 <_svfprintf_r+0x1e6>
  410520:	f89a 3000 	ldrb.w	r3, [sl]
  410524:	2900      	cmp	r1, #0
  410526:	f47f adb3 	bne.w	410090 <_svfprintf_r+0xb0>
  41052a:	2201      	movs	r2, #1
  41052c:	2120      	movs	r1, #32
  41052e:	e5af      	b.n	410090 <_svfprintf_r+0xb0>
  410530:	f04b 0b01 	orr.w	fp, fp, #1
  410534:	f89a 3000 	ldrb.w	r3, [sl]
  410538:	e5aa      	b.n	410090 <_svfprintf_r+0xb0>
  41053a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  41053c:	6823      	ldr	r3, [r4, #0]
  41053e:	9309      	str	r3, [sp, #36]	; 0x24
  410540:	4618      	mov	r0, r3
  410542:	2800      	cmp	r0, #0
  410544:	4623      	mov	r3, r4
  410546:	f103 0304 	add.w	r3, r3, #4
  41054a:	f6ff ae03 	blt.w	410154 <_svfprintf_r+0x174>
  41054e:	930b      	str	r3, [sp, #44]	; 0x2c
  410550:	f89a 3000 	ldrb.w	r3, [sl]
  410554:	e59c      	b.n	410090 <_svfprintf_r+0xb0>
  410556:	bf00      	nop
  410558:	00413968 	.word	0x00413968
  41055c:	00413978 	.word	0x00413978
  410560:	00413948 	.word	0x00413948
  410564:	f04b 0b10 	orr.w	fp, fp, #16
  410568:	f01b 0f20 	tst.w	fp, #32
  41056c:	930d      	str	r3, [sp, #52]	; 0x34
  41056e:	f43f ae1b 	beq.w	4101a8 <_svfprintf_r+0x1c8>
  410572:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410574:	3507      	adds	r5, #7
  410576:	f025 0307 	bic.w	r3, r5, #7
  41057a:	f103 0208 	add.w	r2, r3, #8
  41057e:	e9d3 4500 	ldrd	r4, r5, [r3]
  410582:	920b      	str	r2, [sp, #44]	; 0x2c
  410584:	2301      	movs	r3, #1
  410586:	e61e      	b.n	4101c6 <_svfprintf_r+0x1e6>
  410588:	f89a 3000 	ldrb.w	r3, [sl]
  41058c:	2b2a      	cmp	r3, #42	; 0x2a
  41058e:	f10a 0401 	add.w	r4, sl, #1
  410592:	f000 873b 	beq.w	41140c <_svfprintf_r+0x142c>
  410596:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  41059a:	2809      	cmp	r0, #9
  41059c:	46a2      	mov	sl, r4
  41059e:	f200 8691 	bhi.w	4112c4 <_svfprintf_r+0x12e4>
  4105a2:	2300      	movs	r3, #0
  4105a4:	461c      	mov	r4, r3
  4105a6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4105aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4105ae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4105b2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4105b6:	2809      	cmp	r0, #9
  4105b8:	d9f5      	bls.n	4105a6 <_svfprintf_r+0x5c6>
  4105ba:	9406      	str	r4, [sp, #24]
  4105bc:	e56a      	b.n	410094 <_svfprintf_r+0xb4>
  4105be:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4105c2:	f89a 3000 	ldrb.w	r3, [sl]
  4105c6:	e563      	b.n	410090 <_svfprintf_r+0xb0>
  4105c8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4105cc:	f89a 3000 	ldrb.w	r3, [sl]
  4105d0:	e55e      	b.n	410090 <_svfprintf_r+0xb0>
  4105d2:	f89a 3000 	ldrb.w	r3, [sl]
  4105d6:	2b6c      	cmp	r3, #108	; 0x6c
  4105d8:	bf03      	ittte	eq
  4105da:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  4105de:	f04b 0b20 	orreq.w	fp, fp, #32
  4105e2:	f10a 0a01 	addeq.w	sl, sl, #1
  4105e6:	f04b 0b10 	orrne.w	fp, fp, #16
  4105ea:	e551      	b.n	410090 <_svfprintf_r+0xb0>
  4105ec:	2a00      	cmp	r2, #0
  4105ee:	f040 871e 	bne.w	41142e <_svfprintf_r+0x144e>
  4105f2:	f01b 0f20 	tst.w	fp, #32
  4105f6:	f040 8509 	bne.w	41100c <_svfprintf_r+0x102c>
  4105fa:	f01b 0f10 	tst.w	fp, #16
  4105fe:	f040 84bc 	bne.w	410f7a <_svfprintf_r+0xf9a>
  410602:	f01b 0f40 	tst.w	fp, #64	; 0x40
  410606:	f000 84b8 	beq.w	410f7a <_svfprintf_r+0xf9a>
  41060a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41060c:	6813      	ldr	r3, [r2, #0]
  41060e:	3204      	adds	r2, #4
  410610:	920b      	str	r2, [sp, #44]	; 0x2c
  410612:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  410616:	801a      	strh	r2, [r3, #0]
  410618:	e509      	b.n	41002e <_svfprintf_r+0x4e>
  41061a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41061c:	4bb9      	ldr	r3, [pc, #740]	; (410904 <_svfprintf_r+0x924>)
  41061e:	680c      	ldr	r4, [r1, #0]
  410620:	9312      	str	r3, [sp, #72]	; 0x48
  410622:	2230      	movs	r2, #48	; 0x30
  410624:	2378      	movs	r3, #120	; 0x78
  410626:	3104      	adds	r1, #4
  410628:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  41062c:	930d      	str	r3, [sp, #52]	; 0x34
  41062e:	f04b 0b02 	orr.w	fp, fp, #2
  410632:	910b      	str	r1, [sp, #44]	; 0x2c
  410634:	2500      	movs	r5, #0
  410636:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  41063a:	2302      	movs	r3, #2
  41063c:	e5c3      	b.n	4101c6 <_svfprintf_r+0x1e6>
  41063e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410640:	930d      	str	r3, [sp, #52]	; 0x34
  410642:	680a      	ldr	r2, [r1, #0]
  410644:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  410648:	2300      	movs	r3, #0
  41064a:	460a      	mov	r2, r1
  41064c:	461f      	mov	r7, r3
  41064e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  410652:	3204      	adds	r2, #4
  410654:	2301      	movs	r3, #1
  410656:	9304      	str	r3, [sp, #16]
  410658:	f8cd b00c 	str.w	fp, [sp, #12]
  41065c:	9706      	str	r7, [sp, #24]
  41065e:	970e      	str	r7, [sp, #56]	; 0x38
  410660:	920b      	str	r2, [sp, #44]	; 0x2c
  410662:	930a      	str	r3, [sp, #40]	; 0x28
  410664:	ae26      	add	r6, sp, #152	; 0x98
  410666:	e5d7      	b.n	410218 <_svfprintf_r+0x238>
  410668:	930d      	str	r3, [sp, #52]	; 0x34
  41066a:	2a00      	cmp	r2, #0
  41066c:	f040 86fe 	bne.w	41146c <_svfprintf_r+0x148c>
  410670:	f01b 0f20 	tst.w	fp, #32
  410674:	d15d      	bne.n	410732 <_svfprintf_r+0x752>
  410676:	f01b 0f10 	tst.w	fp, #16
  41067a:	f040 8335 	bne.w	410ce8 <_svfprintf_r+0xd08>
  41067e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  410682:	f000 8331 	beq.w	410ce8 <_svfprintf_r+0xd08>
  410686:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410688:	f9b1 4000 	ldrsh.w	r4, [r1]
  41068c:	3104      	adds	r1, #4
  41068e:	17e5      	asrs	r5, r4, #31
  410690:	4622      	mov	r2, r4
  410692:	462b      	mov	r3, r5
  410694:	910b      	str	r1, [sp, #44]	; 0x2c
  410696:	2a00      	cmp	r2, #0
  410698:	f173 0300 	sbcs.w	r3, r3, #0
  41069c:	db58      	blt.n	410750 <_svfprintf_r+0x770>
  41069e:	9906      	ldr	r1, [sp, #24]
  4106a0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4106a4:	1c4a      	adds	r2, r1, #1
  4106a6:	f04f 0301 	mov.w	r3, #1
  4106aa:	f47f ad93 	bne.w	4101d4 <_svfprintf_r+0x1f4>
  4106ae:	ea54 0205 	orrs.w	r2, r4, r5
  4106b2:	f000 81ec 	beq.w	410a8e <_svfprintf_r+0xaae>
  4106b6:	f8cd b00c 	str.w	fp, [sp, #12]
  4106ba:	2b01      	cmp	r3, #1
  4106bc:	f000 8283 	beq.w	410bc6 <_svfprintf_r+0xbe6>
  4106c0:	2b02      	cmp	r3, #2
  4106c2:	f040 8213 	bne.w	410aec <_svfprintf_r+0xb0c>
  4106c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4106c8:	464e      	mov	r6, r9
  4106ca:	0923      	lsrs	r3, r4, #4
  4106cc:	f004 010f 	and.w	r1, r4, #15
  4106d0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4106d4:	092a      	lsrs	r2, r5, #4
  4106d6:	461c      	mov	r4, r3
  4106d8:	4615      	mov	r5, r2
  4106da:	5c43      	ldrb	r3, [r0, r1]
  4106dc:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4106e0:	ea54 0305 	orrs.w	r3, r4, r5
  4106e4:	d1f1      	bne.n	4106ca <_svfprintf_r+0x6ea>
  4106e6:	eba9 0306 	sub.w	r3, r9, r6
  4106ea:	930a      	str	r3, [sp, #40]	; 0x28
  4106ec:	e588      	b.n	410200 <_svfprintf_r+0x220>
  4106ee:	930d      	str	r3, [sp, #52]	; 0x34
  4106f0:	2a00      	cmp	r2, #0
  4106f2:	f040 86b7 	bne.w	411464 <_svfprintf_r+0x1484>
  4106f6:	4b84      	ldr	r3, [pc, #528]	; (410908 <_svfprintf_r+0x928>)
  4106f8:	9312      	str	r3, [sp, #72]	; 0x48
  4106fa:	f01b 0f20 	tst.w	fp, #32
  4106fe:	f43f aeee 	beq.w	4104de <_svfprintf_r+0x4fe>
  410702:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410704:	3507      	adds	r5, #7
  410706:	f025 0307 	bic.w	r3, r5, #7
  41070a:	f103 0208 	add.w	r2, r3, #8
  41070e:	f01b 0f01 	tst.w	fp, #1
  410712:	920b      	str	r2, [sp, #44]	; 0x2c
  410714:	e9d3 4500 	ldrd	r4, r5, [r3]
  410718:	f47f aef3 	bne.w	410502 <_svfprintf_r+0x522>
  41071c:	2302      	movs	r3, #2
  41071e:	e552      	b.n	4101c6 <_svfprintf_r+0x1e6>
  410720:	930d      	str	r3, [sp, #52]	; 0x34
  410722:	2a00      	cmp	r2, #0
  410724:	f040 869a 	bne.w	41145c <_svfprintf_r+0x147c>
  410728:	f04b 0b10 	orr.w	fp, fp, #16
  41072c:	f01b 0f20 	tst.w	fp, #32
  410730:	d0a1      	beq.n	410676 <_svfprintf_r+0x696>
  410732:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410734:	3507      	adds	r5, #7
  410736:	f025 0507 	bic.w	r5, r5, #7
  41073a:	e9d5 2300 	ldrd	r2, r3, [r5]
  41073e:	2a00      	cmp	r2, #0
  410740:	f105 0108 	add.w	r1, r5, #8
  410744:	461d      	mov	r5, r3
  410746:	f173 0300 	sbcs.w	r3, r3, #0
  41074a:	910b      	str	r1, [sp, #44]	; 0x2c
  41074c:	4614      	mov	r4, r2
  41074e:	daa6      	bge.n	41069e <_svfprintf_r+0x6be>
  410750:	272d      	movs	r7, #45	; 0x2d
  410752:	4264      	negs	r4, r4
  410754:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  410758:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  41075c:	2301      	movs	r3, #1
  41075e:	e535      	b.n	4101cc <_svfprintf_r+0x1ec>
  410760:	930d      	str	r3, [sp, #52]	; 0x34
  410762:	2a00      	cmp	r2, #0
  410764:	f040 8676 	bne.w	411454 <_svfprintf_r+0x1474>
  410768:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  41076a:	f01b 0f08 	tst.w	fp, #8
  41076e:	f105 0507 	add.w	r5, r5, #7
  410772:	f000 83e8 	beq.w	410f46 <_svfprintf_r+0xf66>
  410776:	f025 0307 	bic.w	r3, r5, #7
  41077a:	ed93 7b00 	vldr	d7, [r3]
  41077e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  410782:	f103 0208 	add.w	r2, r3, #8
  410786:	920b      	str	r2, [sp, #44]	; 0x2c
  410788:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
  41078c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
  410790:	9116      	str	r1, [sp, #88]	; 0x58
  410792:	9317      	str	r3, [sp, #92]	; 0x5c
  410794:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  410798:	f04f 32ff 	mov.w	r2, #4294967295
  41079c:	4620      	mov	r0, r4
  41079e:	4629      	mov	r1, r5
  4107a0:	4b5a      	ldr	r3, [pc, #360]	; (41090c <_svfprintf_r+0x92c>)
  4107a2:	f7fe f9b3 	bl	40eb0c <__aeabi_dcmpun>
  4107a6:	2800      	cmp	r0, #0
  4107a8:	f040 834f 	bne.w	410e4a <_svfprintf_r+0xe6a>
  4107ac:	f04f 32ff 	mov.w	r2, #4294967295
  4107b0:	4b56      	ldr	r3, [pc, #344]	; (41090c <_svfprintf_r+0x92c>)
  4107b2:	4620      	mov	r0, r4
  4107b4:	4629      	mov	r1, r5
  4107b6:	f7fe f98b 	bl	40ead0 <__aeabi_dcmple>
  4107ba:	2800      	cmp	r0, #0
  4107bc:	f040 8345 	bne.w	410e4a <_svfprintf_r+0xe6a>
  4107c0:	2200      	movs	r2, #0
  4107c2:	2300      	movs	r3, #0
  4107c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4107c8:	f7fe f978 	bl	40eabc <__aeabi_dcmplt>
  4107cc:	2800      	cmp	r0, #0
  4107ce:	f040 8533 	bne.w	411238 <_svfprintf_r+0x1258>
  4107d2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4107d6:	4e4e      	ldr	r6, [pc, #312]	; (410910 <_svfprintf_r+0x930>)
  4107d8:	4b4e      	ldr	r3, [pc, #312]	; (410914 <_svfprintf_r+0x934>)
  4107da:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4107de:	9003      	str	r0, [sp, #12]
  4107e0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4107e2:	2203      	movs	r2, #3
  4107e4:	2100      	movs	r1, #0
  4107e6:	9204      	str	r2, [sp, #16]
  4107e8:	9106      	str	r1, [sp, #24]
  4107ea:	2847      	cmp	r0, #71	; 0x47
  4107ec:	bfd8      	it	le
  4107ee:	461e      	movle	r6, r3
  4107f0:	920a      	str	r2, [sp, #40]	; 0x28
  4107f2:	910e      	str	r1, [sp, #56]	; 0x38
  4107f4:	e50c      	b.n	410210 <_svfprintf_r+0x230>
  4107f6:	f04b 0b08 	orr.w	fp, fp, #8
  4107fa:	f89a 3000 	ldrb.w	r3, [sl]
  4107fe:	e447      	b.n	410090 <_svfprintf_r+0xb0>
  410800:	f04b 0b10 	orr.w	fp, fp, #16
  410804:	930d      	str	r3, [sp, #52]	; 0x34
  410806:	f01b 0320 	ands.w	r3, fp, #32
  41080a:	f43f ae22 	beq.w	410452 <_svfprintf_r+0x472>
  41080e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410810:	3507      	adds	r5, #7
  410812:	f025 0307 	bic.w	r3, r5, #7
  410816:	f103 0208 	add.w	r2, r3, #8
  41081a:	e9d3 4500 	ldrd	r4, r5, [r3]
  41081e:	920b      	str	r2, [sp, #44]	; 0x2c
  410820:	2300      	movs	r3, #0
  410822:	e4d0      	b.n	4101c6 <_svfprintf_r+0x1e6>
  410824:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  410828:	2300      	movs	r3, #0
  41082a:	461c      	mov	r4, r3
  41082c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  410830:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  410834:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  410838:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  41083c:	2809      	cmp	r0, #9
  41083e:	d9f5      	bls.n	41082c <_svfprintf_r+0x84c>
  410840:	9409      	str	r4, [sp, #36]	; 0x24
  410842:	e427      	b.n	410094 <_svfprintf_r+0xb4>
  410844:	930d      	str	r3, [sp, #52]	; 0x34
  410846:	2a00      	cmp	r2, #0
  410848:	f040 85f5 	bne.w	411436 <_svfprintf_r+0x1456>
  41084c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  41084e:	2a00      	cmp	r2, #0
  410850:	f43f ac91 	beq.w	410176 <_svfprintf_r+0x196>
  410854:	2300      	movs	r3, #0
  410856:	2101      	movs	r1, #1
  410858:	461f      	mov	r7, r3
  41085a:	9104      	str	r1, [sp, #16]
  41085c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  410860:	f8cd b00c 	str.w	fp, [sp, #12]
  410864:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  410868:	9306      	str	r3, [sp, #24]
  41086a:	930e      	str	r3, [sp, #56]	; 0x38
  41086c:	910a      	str	r1, [sp, #40]	; 0x28
  41086e:	ae26      	add	r6, sp, #152	; 0x98
  410870:	e4d2      	b.n	410218 <_svfprintf_r+0x238>
  410872:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410874:	e529      	b.n	4102ca <_svfprintf_r+0x2ea>
  410876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410878:	2b65      	cmp	r3, #101	; 0x65
  41087a:	f340 80a9 	ble.w	4109d0 <_svfprintf_r+0x9f0>
  41087e:	2200      	movs	r2, #0
  410880:	2300      	movs	r3, #0
  410882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410886:	f7fe f90f 	bl	40eaa8 <__aeabi_dcmpeq>
  41088a:	2800      	cmp	r0, #0
  41088c:	f000 8152 	beq.w	410b34 <_svfprintf_r+0xb54>
  410890:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410892:	4a21      	ldr	r2, [pc, #132]	; (410918 <_svfprintf_r+0x938>)
  410894:	f8c8 2000 	str.w	r2, [r8]
  410898:	3301      	adds	r3, #1
  41089a:	3401      	adds	r4, #1
  41089c:	2201      	movs	r2, #1
  41089e:	2b07      	cmp	r3, #7
  4108a0:	9425      	str	r4, [sp, #148]	; 0x94
  4108a2:	9324      	str	r3, [sp, #144]	; 0x90
  4108a4:	f8c8 2004 	str.w	r2, [r8, #4]
  4108a8:	f300 836f 	bgt.w	410f8a <_svfprintf_r+0xfaa>
  4108ac:	f108 0808 	add.w	r8, r8, #8
  4108b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4108b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4108b4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4108b6:	4293      	cmp	r3, r2
  4108b8:	db03      	blt.n	4108c2 <_svfprintf_r+0x8e2>
  4108ba:	9b03      	ldr	r3, [sp, #12]
  4108bc:	07dd      	lsls	r5, r3, #31
  4108be:	f57f ad76 	bpl.w	4103ae <_svfprintf_r+0x3ce>
  4108c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4108c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4108c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4108c8:	f8c8 2000 	str.w	r2, [r8]
  4108cc:	3301      	adds	r3, #1
  4108ce:	440c      	add	r4, r1
  4108d0:	2b07      	cmp	r3, #7
  4108d2:	f8c8 1004 	str.w	r1, [r8, #4]
  4108d6:	9425      	str	r4, [sp, #148]	; 0x94
  4108d8:	9324      	str	r3, [sp, #144]	; 0x90
  4108da:	f300 83a3 	bgt.w	411024 <_svfprintf_r+0x1044>
  4108de:	f108 0808 	add.w	r8, r8, #8
  4108e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4108e4:	1e5e      	subs	r6, r3, #1
  4108e6:	2e00      	cmp	r6, #0
  4108e8:	f77f ad61 	ble.w	4103ae <_svfprintf_r+0x3ce>
  4108ec:	2e10      	cmp	r6, #16
  4108ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4108f0:	4d0a      	ldr	r5, [pc, #40]	; (41091c <_svfprintf_r+0x93c>)
  4108f2:	f340 81ef 	ble.w	410cd4 <_svfprintf_r+0xcf4>
  4108f6:	4622      	mov	r2, r4
  4108f8:	2710      	movs	r7, #16
  4108fa:	f8dd b020 	ldr.w	fp, [sp, #32]
  4108fe:	9c07      	ldr	r4, [sp, #28]
  410900:	e014      	b.n	41092c <_svfprintf_r+0x94c>
  410902:	bf00      	nop
  410904:	00413948 	.word	0x00413948
  410908:	00413934 	.word	0x00413934
  41090c:	7fefffff 	.word	0x7fefffff
  410910:	00413928 	.word	0x00413928
  410914:	00413924 	.word	0x00413924
  410918:	00413964 	.word	0x00413964
  41091c:	00413978 	.word	0x00413978
  410920:	f108 0808 	add.w	r8, r8, #8
  410924:	3e10      	subs	r6, #16
  410926:	2e10      	cmp	r6, #16
  410928:	f340 81d3 	ble.w	410cd2 <_svfprintf_r+0xcf2>
  41092c:	3301      	adds	r3, #1
  41092e:	3210      	adds	r2, #16
  410930:	2b07      	cmp	r3, #7
  410932:	9225      	str	r2, [sp, #148]	; 0x94
  410934:	9324      	str	r3, [sp, #144]	; 0x90
  410936:	e888 00a0 	stmia.w	r8, {r5, r7}
  41093a:	ddf1      	ble.n	410920 <_svfprintf_r+0x940>
  41093c:	aa23      	add	r2, sp, #140	; 0x8c
  41093e:	4621      	mov	r1, r4
  410940:	4658      	mov	r0, fp
  410942:	f002 fa05 	bl	412d50 <__ssprint_r>
  410946:	2800      	cmp	r0, #0
  410948:	f47f ac1c 	bne.w	410184 <_svfprintf_r+0x1a4>
  41094c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  41094e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410950:	46c8      	mov	r8, r9
  410952:	e7e7      	b.n	410924 <_svfprintf_r+0x944>
  410954:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410956:	9a04      	ldr	r2, [sp, #16]
  410958:	1a9f      	subs	r7, r3, r2
  41095a:	2f00      	cmp	r7, #0
  41095c:	f77f acd8 	ble.w	410310 <_svfprintf_r+0x330>
  410960:	2f10      	cmp	r7, #16
  410962:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410964:	4db7      	ldr	r5, [pc, #732]	; (410c44 <_svfprintf_r+0xc64>)
  410966:	dd27      	ble.n	4109b8 <_svfprintf_r+0x9d8>
  410968:	4642      	mov	r2, r8
  41096a:	4621      	mov	r1, r4
  41096c:	46b0      	mov	r8, r6
  41096e:	f04f 0b10 	mov.w	fp, #16
  410972:	462e      	mov	r6, r5
  410974:	9c08      	ldr	r4, [sp, #32]
  410976:	9d07      	ldr	r5, [sp, #28]
  410978:	e004      	b.n	410984 <_svfprintf_r+0x9a4>
  41097a:	3f10      	subs	r7, #16
  41097c:	2f10      	cmp	r7, #16
  41097e:	f102 0208 	add.w	r2, r2, #8
  410982:	dd15      	ble.n	4109b0 <_svfprintf_r+0x9d0>
  410984:	3301      	adds	r3, #1
  410986:	3110      	adds	r1, #16
  410988:	2b07      	cmp	r3, #7
  41098a:	9125      	str	r1, [sp, #148]	; 0x94
  41098c:	9324      	str	r3, [sp, #144]	; 0x90
  41098e:	e882 0840 	stmia.w	r2, {r6, fp}
  410992:	ddf2      	ble.n	41097a <_svfprintf_r+0x99a>
  410994:	aa23      	add	r2, sp, #140	; 0x8c
  410996:	4629      	mov	r1, r5
  410998:	4620      	mov	r0, r4
  41099a:	f002 f9d9 	bl	412d50 <__ssprint_r>
  41099e:	2800      	cmp	r0, #0
  4109a0:	f47f abf0 	bne.w	410184 <_svfprintf_r+0x1a4>
  4109a4:	3f10      	subs	r7, #16
  4109a6:	2f10      	cmp	r7, #16
  4109a8:	9925      	ldr	r1, [sp, #148]	; 0x94
  4109aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4109ac:	464a      	mov	r2, r9
  4109ae:	dce9      	bgt.n	410984 <_svfprintf_r+0x9a4>
  4109b0:	4635      	mov	r5, r6
  4109b2:	460c      	mov	r4, r1
  4109b4:	4646      	mov	r6, r8
  4109b6:	4690      	mov	r8, r2
  4109b8:	3301      	adds	r3, #1
  4109ba:	443c      	add	r4, r7
  4109bc:	2b07      	cmp	r3, #7
  4109be:	9425      	str	r4, [sp, #148]	; 0x94
  4109c0:	9324      	str	r3, [sp, #144]	; 0x90
  4109c2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4109c6:	f300 8234 	bgt.w	410e32 <_svfprintf_r+0xe52>
  4109ca:	f108 0808 	add.w	r8, r8, #8
  4109ce:	e49f      	b.n	410310 <_svfprintf_r+0x330>
  4109d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4109d2:	9f24      	ldr	r7, [sp, #144]	; 0x90
  4109d4:	2b01      	cmp	r3, #1
  4109d6:	f340 8200 	ble.w	410dda <_svfprintf_r+0xdfa>
  4109da:	3701      	adds	r7, #1
  4109dc:	3401      	adds	r4, #1
  4109de:	2301      	movs	r3, #1
  4109e0:	2f07      	cmp	r7, #7
  4109e2:	9425      	str	r4, [sp, #148]	; 0x94
  4109e4:	9724      	str	r7, [sp, #144]	; 0x90
  4109e6:	f8c8 6000 	str.w	r6, [r8]
  4109ea:	f8c8 3004 	str.w	r3, [r8, #4]
  4109ee:	f300 8205 	bgt.w	410dfc <_svfprintf_r+0xe1c>
  4109f2:	f108 0808 	add.w	r8, r8, #8
  4109f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4109f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4109fa:	f8c8 3000 	str.w	r3, [r8]
  4109fe:	3701      	adds	r7, #1
  410a00:	4414      	add	r4, r2
  410a02:	2f07      	cmp	r7, #7
  410a04:	9425      	str	r4, [sp, #148]	; 0x94
  410a06:	9724      	str	r7, [sp, #144]	; 0x90
  410a08:	f8c8 2004 	str.w	r2, [r8, #4]
  410a0c:	f300 8202 	bgt.w	410e14 <_svfprintf_r+0xe34>
  410a10:	f108 0808 	add.w	r8, r8, #8
  410a14:	2300      	movs	r3, #0
  410a16:	2200      	movs	r2, #0
  410a18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410a1c:	f7fe f844 	bl	40eaa8 <__aeabi_dcmpeq>
  410a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410a22:	2800      	cmp	r0, #0
  410a24:	f040 8101 	bne.w	410c2a <_svfprintf_r+0xc4a>
  410a28:	3b01      	subs	r3, #1
  410a2a:	3701      	adds	r7, #1
  410a2c:	3601      	adds	r6, #1
  410a2e:	441c      	add	r4, r3
  410a30:	2f07      	cmp	r7, #7
  410a32:	9724      	str	r7, [sp, #144]	; 0x90
  410a34:	9425      	str	r4, [sp, #148]	; 0x94
  410a36:	f8c8 6000 	str.w	r6, [r8]
  410a3a:	f8c8 3004 	str.w	r3, [r8, #4]
  410a3e:	f300 8128 	bgt.w	410c92 <_svfprintf_r+0xcb2>
  410a42:	f108 0808 	add.w	r8, r8, #8
  410a46:	9a15      	ldr	r2, [sp, #84]	; 0x54
  410a48:	f8c8 2004 	str.w	r2, [r8, #4]
  410a4c:	3701      	adds	r7, #1
  410a4e:	4414      	add	r4, r2
  410a50:	ab1f      	add	r3, sp, #124	; 0x7c
  410a52:	2f07      	cmp	r7, #7
  410a54:	9425      	str	r4, [sp, #148]	; 0x94
  410a56:	9724      	str	r7, [sp, #144]	; 0x90
  410a58:	f8c8 3000 	str.w	r3, [r8]
  410a5c:	f77f aca5 	ble.w	4103aa <_svfprintf_r+0x3ca>
  410a60:	aa23      	add	r2, sp, #140	; 0x8c
  410a62:	9907      	ldr	r1, [sp, #28]
  410a64:	9808      	ldr	r0, [sp, #32]
  410a66:	f002 f973 	bl	412d50 <__ssprint_r>
  410a6a:	2800      	cmp	r0, #0
  410a6c:	f47f ab8a 	bne.w	410184 <_svfprintf_r+0x1a4>
  410a70:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410a72:	46c8      	mov	r8, r9
  410a74:	e49b      	b.n	4103ae <_svfprintf_r+0x3ce>
  410a76:	aa23      	add	r2, sp, #140	; 0x8c
  410a78:	9907      	ldr	r1, [sp, #28]
  410a7a:	9808      	ldr	r0, [sp, #32]
  410a7c:	f002 f968 	bl	412d50 <__ssprint_r>
  410a80:	2800      	cmp	r0, #0
  410a82:	f43f acdd 	beq.w	410440 <_svfprintf_r+0x460>
  410a86:	f7ff bb7d 	b.w	410184 <_svfprintf_r+0x1a4>
  410a8a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  410a8e:	2b01      	cmp	r3, #1
  410a90:	f000 8135 	beq.w	410cfe <_svfprintf_r+0xd1e>
  410a94:	2b02      	cmp	r3, #2
  410a96:	d125      	bne.n	410ae4 <_svfprintf_r+0xb04>
  410a98:	f8cd b00c 	str.w	fp, [sp, #12]
  410a9c:	2400      	movs	r4, #0
  410a9e:	2500      	movs	r5, #0
  410aa0:	e611      	b.n	4106c6 <_svfprintf_r+0x6e6>
  410aa2:	aa23      	add	r2, sp, #140	; 0x8c
  410aa4:	9907      	ldr	r1, [sp, #28]
  410aa6:	9808      	ldr	r0, [sp, #32]
  410aa8:	f002 f952 	bl	412d50 <__ssprint_r>
  410aac:	2800      	cmp	r0, #0
  410aae:	f47f ab69 	bne.w	410184 <_svfprintf_r+0x1a4>
  410ab2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410ab4:	46c8      	mov	r8, r9
  410ab6:	e467      	b.n	410388 <_svfprintf_r+0x3a8>
  410ab8:	aa23      	add	r2, sp, #140	; 0x8c
  410aba:	9907      	ldr	r1, [sp, #28]
  410abc:	9808      	ldr	r0, [sp, #32]
  410abe:	f002 f947 	bl	412d50 <__ssprint_r>
  410ac2:	2800      	cmp	r0, #0
  410ac4:	f47f ab5e 	bne.w	410184 <_svfprintf_r+0x1a4>
  410ac8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410aca:	46c8      	mov	r8, r9
  410acc:	e41d      	b.n	41030a <_svfprintf_r+0x32a>
  410ace:	aa23      	add	r2, sp, #140	; 0x8c
  410ad0:	9907      	ldr	r1, [sp, #28]
  410ad2:	9808      	ldr	r0, [sp, #32]
  410ad4:	f002 f93c 	bl	412d50 <__ssprint_r>
  410ad8:	2800      	cmp	r0, #0
  410ada:	f47f ab53 	bne.w	410184 <_svfprintf_r+0x1a4>
  410ade:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410ae0:	46c8      	mov	r8, r9
  410ae2:	e402      	b.n	4102ea <_svfprintf_r+0x30a>
  410ae4:	f8cd b00c 	str.w	fp, [sp, #12]
  410ae8:	2400      	movs	r4, #0
  410aea:	2500      	movs	r5, #0
  410aec:	4649      	mov	r1, r9
  410aee:	e000      	b.n	410af2 <_svfprintf_r+0xb12>
  410af0:	4631      	mov	r1, r6
  410af2:	08e2      	lsrs	r2, r4, #3
  410af4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  410af8:	08e8      	lsrs	r0, r5, #3
  410afa:	f004 0307 	and.w	r3, r4, #7
  410afe:	4605      	mov	r5, r0
  410b00:	4614      	mov	r4, r2
  410b02:	3330      	adds	r3, #48	; 0x30
  410b04:	ea54 0205 	orrs.w	r2, r4, r5
  410b08:	f801 3c01 	strb.w	r3, [r1, #-1]
  410b0c:	f101 36ff 	add.w	r6, r1, #4294967295
  410b10:	d1ee      	bne.n	410af0 <_svfprintf_r+0xb10>
  410b12:	9a03      	ldr	r2, [sp, #12]
  410b14:	07d2      	lsls	r2, r2, #31
  410b16:	f57f ade6 	bpl.w	4106e6 <_svfprintf_r+0x706>
  410b1a:	2b30      	cmp	r3, #48	; 0x30
  410b1c:	f43f ade3 	beq.w	4106e6 <_svfprintf_r+0x706>
  410b20:	3902      	subs	r1, #2
  410b22:	2330      	movs	r3, #48	; 0x30
  410b24:	f806 3c01 	strb.w	r3, [r6, #-1]
  410b28:	eba9 0301 	sub.w	r3, r9, r1
  410b2c:	930a      	str	r3, [sp, #40]	; 0x28
  410b2e:	460e      	mov	r6, r1
  410b30:	f7ff bb66 	b.w	410200 <_svfprintf_r+0x220>
  410b34:	991d      	ldr	r1, [sp, #116]	; 0x74
  410b36:	2900      	cmp	r1, #0
  410b38:	f340 8231 	ble.w	410f9e <_svfprintf_r+0xfbe>
  410b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410b40:	4293      	cmp	r3, r2
  410b42:	bfa8      	it	ge
  410b44:	4613      	movge	r3, r2
  410b46:	2b00      	cmp	r3, #0
  410b48:	461f      	mov	r7, r3
  410b4a:	dd0d      	ble.n	410b68 <_svfprintf_r+0xb88>
  410b4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410b4e:	f8c8 6000 	str.w	r6, [r8]
  410b52:	3301      	adds	r3, #1
  410b54:	443c      	add	r4, r7
  410b56:	2b07      	cmp	r3, #7
  410b58:	9425      	str	r4, [sp, #148]	; 0x94
  410b5a:	f8c8 7004 	str.w	r7, [r8, #4]
  410b5e:	9324      	str	r3, [sp, #144]	; 0x90
  410b60:	f300 8321 	bgt.w	4111a6 <_svfprintf_r+0x11c6>
  410b64:	f108 0808 	add.w	r8, r8, #8
  410b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410b6a:	2f00      	cmp	r7, #0
  410b6c:	bfa8      	it	ge
  410b6e:	1bdb      	subge	r3, r3, r7
  410b70:	2b00      	cmp	r3, #0
  410b72:	461f      	mov	r7, r3
  410b74:	f340 80d7 	ble.w	410d26 <_svfprintf_r+0xd46>
  410b78:	2f10      	cmp	r7, #16
  410b7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410b7c:	4d31      	ldr	r5, [pc, #196]	; (410c44 <_svfprintf_r+0xc64>)
  410b7e:	f340 81f0 	ble.w	410f62 <_svfprintf_r+0xf82>
  410b82:	4642      	mov	r2, r8
  410b84:	4621      	mov	r1, r4
  410b86:	46b0      	mov	r8, r6
  410b88:	f04f 0b10 	mov.w	fp, #16
  410b8c:	462e      	mov	r6, r5
  410b8e:	9c08      	ldr	r4, [sp, #32]
  410b90:	9d07      	ldr	r5, [sp, #28]
  410b92:	e004      	b.n	410b9e <_svfprintf_r+0xbbe>
  410b94:	3208      	adds	r2, #8
  410b96:	3f10      	subs	r7, #16
  410b98:	2f10      	cmp	r7, #16
  410b9a:	f340 81de 	ble.w	410f5a <_svfprintf_r+0xf7a>
  410b9e:	3301      	adds	r3, #1
  410ba0:	3110      	adds	r1, #16
  410ba2:	2b07      	cmp	r3, #7
  410ba4:	9125      	str	r1, [sp, #148]	; 0x94
  410ba6:	9324      	str	r3, [sp, #144]	; 0x90
  410ba8:	e882 0840 	stmia.w	r2, {r6, fp}
  410bac:	ddf2      	ble.n	410b94 <_svfprintf_r+0xbb4>
  410bae:	aa23      	add	r2, sp, #140	; 0x8c
  410bb0:	4629      	mov	r1, r5
  410bb2:	4620      	mov	r0, r4
  410bb4:	f002 f8cc 	bl	412d50 <__ssprint_r>
  410bb8:	2800      	cmp	r0, #0
  410bba:	f47f aae3 	bne.w	410184 <_svfprintf_r+0x1a4>
  410bbe:	9925      	ldr	r1, [sp, #148]	; 0x94
  410bc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410bc2:	464a      	mov	r2, r9
  410bc4:	e7e7      	b.n	410b96 <_svfprintf_r+0xbb6>
  410bc6:	2d00      	cmp	r5, #0
  410bc8:	bf08      	it	eq
  410bca:	2c0a      	cmpeq	r4, #10
  410bcc:	f0c0 8095 	bcc.w	410cfa <_svfprintf_r+0xd1a>
  410bd0:	464e      	mov	r6, r9
  410bd2:	4620      	mov	r0, r4
  410bd4:	4629      	mov	r1, r5
  410bd6:	220a      	movs	r2, #10
  410bd8:	2300      	movs	r3, #0
  410bda:	f002 f9ed 	bl	412fb8 <__aeabi_uldivmod>
  410bde:	3230      	adds	r2, #48	; 0x30
  410be0:	f806 2d01 	strb.w	r2, [r6, #-1]!
  410be4:	4620      	mov	r0, r4
  410be6:	4629      	mov	r1, r5
  410be8:	2300      	movs	r3, #0
  410bea:	220a      	movs	r2, #10
  410bec:	f002 f9e4 	bl	412fb8 <__aeabi_uldivmod>
  410bf0:	4604      	mov	r4, r0
  410bf2:	460d      	mov	r5, r1
  410bf4:	ea54 0305 	orrs.w	r3, r4, r5
  410bf8:	d1eb      	bne.n	410bd2 <_svfprintf_r+0xbf2>
  410bfa:	eba9 0306 	sub.w	r3, r9, r6
  410bfe:	930a      	str	r3, [sp, #40]	; 0x28
  410c00:	f7ff bafe 	b.w	410200 <_svfprintf_r+0x220>
  410c04:	9b06      	ldr	r3, [sp, #24]
  410c06:	930a      	str	r3, [sp, #40]	; 0x28
  410c08:	464e      	mov	r6, r9
  410c0a:	f7ff baf9 	b.w	410200 <_svfprintf_r+0x220>
  410c0e:	aa23      	add	r2, sp, #140	; 0x8c
  410c10:	9907      	ldr	r1, [sp, #28]
  410c12:	9808      	ldr	r0, [sp, #32]
  410c14:	f002 f89c 	bl	412d50 <__ssprint_r>
  410c18:	2800      	cmp	r0, #0
  410c1a:	f47f aab3 	bne.w	410184 <_svfprintf_r+0x1a4>
  410c1e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  410c22:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410c24:	46c8      	mov	r8, r9
  410c26:	f7ff bb50 	b.w	4102ca <_svfprintf_r+0x2ea>
  410c2a:	1e5e      	subs	r6, r3, #1
  410c2c:	2e00      	cmp	r6, #0
  410c2e:	f77f af0a 	ble.w	410a46 <_svfprintf_r+0xa66>
  410c32:	2e10      	cmp	r6, #16
  410c34:	4d03      	ldr	r5, [pc, #12]	; (410c44 <_svfprintf_r+0xc64>)
  410c36:	dd23      	ble.n	410c80 <_svfprintf_r+0xca0>
  410c38:	4622      	mov	r2, r4
  410c3a:	f04f 0b10 	mov.w	fp, #16
  410c3e:	9c08      	ldr	r4, [sp, #32]
  410c40:	e007      	b.n	410c52 <_svfprintf_r+0xc72>
  410c42:	bf00      	nop
  410c44:	00413978 	.word	0x00413978
  410c48:	3e10      	subs	r6, #16
  410c4a:	2e10      	cmp	r6, #16
  410c4c:	f108 0808 	add.w	r8, r8, #8
  410c50:	dd15      	ble.n	410c7e <_svfprintf_r+0xc9e>
  410c52:	3701      	adds	r7, #1
  410c54:	3210      	adds	r2, #16
  410c56:	2f07      	cmp	r7, #7
  410c58:	9225      	str	r2, [sp, #148]	; 0x94
  410c5a:	9724      	str	r7, [sp, #144]	; 0x90
  410c5c:	e888 0820 	stmia.w	r8, {r5, fp}
  410c60:	ddf2      	ble.n	410c48 <_svfprintf_r+0xc68>
  410c62:	aa23      	add	r2, sp, #140	; 0x8c
  410c64:	9907      	ldr	r1, [sp, #28]
  410c66:	4620      	mov	r0, r4
  410c68:	f002 f872 	bl	412d50 <__ssprint_r>
  410c6c:	2800      	cmp	r0, #0
  410c6e:	f47f aa89 	bne.w	410184 <_svfprintf_r+0x1a4>
  410c72:	3e10      	subs	r6, #16
  410c74:	2e10      	cmp	r6, #16
  410c76:	9a25      	ldr	r2, [sp, #148]	; 0x94
  410c78:	9f24      	ldr	r7, [sp, #144]	; 0x90
  410c7a:	46c8      	mov	r8, r9
  410c7c:	dce9      	bgt.n	410c52 <_svfprintf_r+0xc72>
  410c7e:	4614      	mov	r4, r2
  410c80:	3701      	adds	r7, #1
  410c82:	4434      	add	r4, r6
  410c84:	2f07      	cmp	r7, #7
  410c86:	9425      	str	r4, [sp, #148]	; 0x94
  410c88:	9724      	str	r7, [sp, #144]	; 0x90
  410c8a:	e888 0060 	stmia.w	r8, {r5, r6}
  410c8e:	f77f aed8 	ble.w	410a42 <_svfprintf_r+0xa62>
  410c92:	aa23      	add	r2, sp, #140	; 0x8c
  410c94:	9907      	ldr	r1, [sp, #28]
  410c96:	9808      	ldr	r0, [sp, #32]
  410c98:	f002 f85a 	bl	412d50 <__ssprint_r>
  410c9c:	2800      	cmp	r0, #0
  410c9e:	f47f aa71 	bne.w	410184 <_svfprintf_r+0x1a4>
  410ca2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410ca4:	9f24      	ldr	r7, [sp, #144]	; 0x90
  410ca6:	46c8      	mov	r8, r9
  410ca8:	e6cd      	b.n	410a46 <_svfprintf_r+0xa66>
  410caa:	681c      	ldr	r4, [r3, #0]
  410cac:	3304      	adds	r3, #4
  410cae:	930b      	str	r3, [sp, #44]	; 0x2c
  410cb0:	2500      	movs	r5, #0
  410cb2:	e422      	b.n	4104fa <_svfprintf_r+0x51a>
  410cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410cb6:	460a      	mov	r2, r1
  410cb8:	3204      	adds	r2, #4
  410cba:	680c      	ldr	r4, [r1, #0]
  410cbc:	920b      	str	r2, [sp, #44]	; 0x2c
  410cbe:	2500      	movs	r5, #0
  410cc0:	f7ff ba81 	b.w	4101c6 <_svfprintf_r+0x1e6>
  410cc4:	3204      	adds	r2, #4
  410cc6:	681c      	ldr	r4, [r3, #0]
  410cc8:	920b      	str	r2, [sp, #44]	; 0x2c
  410cca:	2301      	movs	r3, #1
  410ccc:	2500      	movs	r5, #0
  410cce:	f7ff ba7a 	b.w	4101c6 <_svfprintf_r+0x1e6>
  410cd2:	4614      	mov	r4, r2
  410cd4:	3301      	adds	r3, #1
  410cd6:	4434      	add	r4, r6
  410cd8:	2b07      	cmp	r3, #7
  410cda:	9425      	str	r4, [sp, #148]	; 0x94
  410cdc:	9324      	str	r3, [sp, #144]	; 0x90
  410cde:	e888 0060 	stmia.w	r8, {r5, r6}
  410ce2:	f77f ab62 	ble.w	4103aa <_svfprintf_r+0x3ca>
  410ce6:	e6bb      	b.n	410a60 <_svfprintf_r+0xa80>
  410ce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410cea:	6814      	ldr	r4, [r2, #0]
  410cec:	4613      	mov	r3, r2
  410cee:	3304      	adds	r3, #4
  410cf0:	17e5      	asrs	r5, r4, #31
  410cf2:	930b      	str	r3, [sp, #44]	; 0x2c
  410cf4:	4622      	mov	r2, r4
  410cf6:	462b      	mov	r3, r5
  410cf8:	e4cd      	b.n	410696 <_svfprintf_r+0x6b6>
  410cfa:	f8dd b00c 	ldr.w	fp, [sp, #12]
  410cfe:	f8cd b00c 	str.w	fp, [sp, #12]
  410d02:	ae40      	add	r6, sp, #256	; 0x100
  410d04:	3430      	adds	r4, #48	; 0x30
  410d06:	2301      	movs	r3, #1
  410d08:	f806 4d41 	strb.w	r4, [r6, #-65]!
  410d0c:	930a      	str	r3, [sp, #40]	; 0x28
  410d0e:	f7ff ba77 	b.w	410200 <_svfprintf_r+0x220>
  410d12:	aa23      	add	r2, sp, #140	; 0x8c
  410d14:	9907      	ldr	r1, [sp, #28]
  410d16:	9808      	ldr	r0, [sp, #32]
  410d18:	f002 f81a 	bl	412d50 <__ssprint_r>
  410d1c:	2800      	cmp	r0, #0
  410d1e:	f47f aa31 	bne.w	410184 <_svfprintf_r+0x1a4>
  410d22:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410d24:	46c8      	mov	r8, r9
  410d26:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  410d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410d2a:	429a      	cmp	r2, r3
  410d2c:	db44      	blt.n	410db8 <_svfprintf_r+0xdd8>
  410d2e:	9b03      	ldr	r3, [sp, #12]
  410d30:	07d9      	lsls	r1, r3, #31
  410d32:	d441      	bmi.n	410db8 <_svfprintf_r+0xdd8>
  410d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410d36:	980e      	ldr	r0, [sp, #56]	; 0x38
  410d38:	1a9a      	subs	r2, r3, r2
  410d3a:	1a1d      	subs	r5, r3, r0
  410d3c:	4295      	cmp	r5, r2
  410d3e:	bfa8      	it	ge
  410d40:	4615      	movge	r5, r2
  410d42:	2d00      	cmp	r5, #0
  410d44:	dd0e      	ble.n	410d64 <_svfprintf_r+0xd84>
  410d46:	9924      	ldr	r1, [sp, #144]	; 0x90
  410d48:	f8c8 5004 	str.w	r5, [r8, #4]
  410d4c:	3101      	adds	r1, #1
  410d4e:	4406      	add	r6, r0
  410d50:	442c      	add	r4, r5
  410d52:	2907      	cmp	r1, #7
  410d54:	f8c8 6000 	str.w	r6, [r8]
  410d58:	9425      	str	r4, [sp, #148]	; 0x94
  410d5a:	9124      	str	r1, [sp, #144]	; 0x90
  410d5c:	f300 823a 	bgt.w	4111d4 <_svfprintf_r+0x11f4>
  410d60:	f108 0808 	add.w	r8, r8, #8
  410d64:	2d00      	cmp	r5, #0
  410d66:	bfac      	ite	ge
  410d68:	1b56      	subge	r6, r2, r5
  410d6a:	4616      	movlt	r6, r2
  410d6c:	2e00      	cmp	r6, #0
  410d6e:	f77f ab1e 	ble.w	4103ae <_svfprintf_r+0x3ce>
  410d72:	2e10      	cmp	r6, #16
  410d74:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410d76:	4db1      	ldr	r5, [pc, #708]	; (41103c <_svfprintf_r+0x105c>)
  410d78:	ddac      	ble.n	410cd4 <_svfprintf_r+0xcf4>
  410d7a:	4622      	mov	r2, r4
  410d7c:	2710      	movs	r7, #16
  410d7e:	f8dd b020 	ldr.w	fp, [sp, #32]
  410d82:	9c07      	ldr	r4, [sp, #28]
  410d84:	e004      	b.n	410d90 <_svfprintf_r+0xdb0>
  410d86:	f108 0808 	add.w	r8, r8, #8
  410d8a:	3e10      	subs	r6, #16
  410d8c:	2e10      	cmp	r6, #16
  410d8e:	dda0      	ble.n	410cd2 <_svfprintf_r+0xcf2>
  410d90:	3301      	adds	r3, #1
  410d92:	3210      	adds	r2, #16
  410d94:	2b07      	cmp	r3, #7
  410d96:	9225      	str	r2, [sp, #148]	; 0x94
  410d98:	9324      	str	r3, [sp, #144]	; 0x90
  410d9a:	e888 00a0 	stmia.w	r8, {r5, r7}
  410d9e:	ddf2      	ble.n	410d86 <_svfprintf_r+0xda6>
  410da0:	aa23      	add	r2, sp, #140	; 0x8c
  410da2:	4621      	mov	r1, r4
  410da4:	4658      	mov	r0, fp
  410da6:	f001 ffd3 	bl	412d50 <__ssprint_r>
  410daa:	2800      	cmp	r0, #0
  410dac:	f47f a9ea 	bne.w	410184 <_svfprintf_r+0x1a4>
  410db0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  410db2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410db4:	46c8      	mov	r8, r9
  410db6:	e7e8      	b.n	410d8a <_svfprintf_r+0xdaa>
  410db8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410dba:	9813      	ldr	r0, [sp, #76]	; 0x4c
  410dbc:	9914      	ldr	r1, [sp, #80]	; 0x50
  410dbe:	f8c8 1000 	str.w	r1, [r8]
  410dc2:	3301      	adds	r3, #1
  410dc4:	4404      	add	r4, r0
  410dc6:	2b07      	cmp	r3, #7
  410dc8:	9425      	str	r4, [sp, #148]	; 0x94
  410dca:	f8c8 0004 	str.w	r0, [r8, #4]
  410dce:	9324      	str	r3, [sp, #144]	; 0x90
  410dd0:	f300 81f4 	bgt.w	4111bc <_svfprintf_r+0x11dc>
  410dd4:	f108 0808 	add.w	r8, r8, #8
  410dd8:	e7ac      	b.n	410d34 <_svfprintf_r+0xd54>
  410dda:	9b03      	ldr	r3, [sp, #12]
  410ddc:	07da      	lsls	r2, r3, #31
  410dde:	f53f adfc 	bmi.w	4109da <_svfprintf_r+0x9fa>
  410de2:	3701      	adds	r7, #1
  410de4:	3401      	adds	r4, #1
  410de6:	2301      	movs	r3, #1
  410de8:	2f07      	cmp	r7, #7
  410dea:	9425      	str	r4, [sp, #148]	; 0x94
  410dec:	9724      	str	r7, [sp, #144]	; 0x90
  410dee:	f8c8 6000 	str.w	r6, [r8]
  410df2:	f8c8 3004 	str.w	r3, [r8, #4]
  410df6:	f77f ae24 	ble.w	410a42 <_svfprintf_r+0xa62>
  410dfa:	e74a      	b.n	410c92 <_svfprintf_r+0xcb2>
  410dfc:	aa23      	add	r2, sp, #140	; 0x8c
  410dfe:	9907      	ldr	r1, [sp, #28]
  410e00:	9808      	ldr	r0, [sp, #32]
  410e02:	f001 ffa5 	bl	412d50 <__ssprint_r>
  410e06:	2800      	cmp	r0, #0
  410e08:	f47f a9bc 	bne.w	410184 <_svfprintf_r+0x1a4>
  410e0c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410e0e:	9f24      	ldr	r7, [sp, #144]	; 0x90
  410e10:	46c8      	mov	r8, r9
  410e12:	e5f0      	b.n	4109f6 <_svfprintf_r+0xa16>
  410e14:	aa23      	add	r2, sp, #140	; 0x8c
  410e16:	9907      	ldr	r1, [sp, #28]
  410e18:	9808      	ldr	r0, [sp, #32]
  410e1a:	f001 ff99 	bl	412d50 <__ssprint_r>
  410e1e:	2800      	cmp	r0, #0
  410e20:	f47f a9b0 	bne.w	410184 <_svfprintf_r+0x1a4>
  410e24:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410e26:	9f24      	ldr	r7, [sp, #144]	; 0x90
  410e28:	46c8      	mov	r8, r9
  410e2a:	e5f3      	b.n	410a14 <_svfprintf_r+0xa34>
  410e2c:	464e      	mov	r6, r9
  410e2e:	f7ff b9e7 	b.w	410200 <_svfprintf_r+0x220>
  410e32:	aa23      	add	r2, sp, #140	; 0x8c
  410e34:	9907      	ldr	r1, [sp, #28]
  410e36:	9808      	ldr	r0, [sp, #32]
  410e38:	f001 ff8a 	bl	412d50 <__ssprint_r>
  410e3c:	2800      	cmp	r0, #0
  410e3e:	f47f a9a1 	bne.w	410184 <_svfprintf_r+0x1a4>
  410e42:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410e44:	46c8      	mov	r8, r9
  410e46:	f7ff ba63 	b.w	410310 <_svfprintf_r+0x330>
  410e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410e4e:	4602      	mov	r2, r0
  410e50:	460b      	mov	r3, r1
  410e52:	f7fd fe5b 	bl	40eb0c <__aeabi_dcmpun>
  410e56:	2800      	cmp	r0, #0
  410e58:	f040 8298 	bne.w	41138c <_svfprintf_r+0x13ac>
  410e5c:	9b06      	ldr	r3, [sp, #24]
  410e5e:	3301      	adds	r3, #1
  410e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410e62:	f023 0720 	bic.w	r7, r3, #32
  410e66:	f000 81d2 	beq.w	41120e <_svfprintf_r+0x122e>
  410e6a:	2f47      	cmp	r7, #71	; 0x47
  410e6c:	f000 8120 	beq.w	4110b0 <_svfprintf_r+0x10d0>
  410e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
  410e72:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
  410e76:	2b00      	cmp	r3, #0
  410e78:	9203      	str	r2, [sp, #12]
  410e7a:	f2c0 81f0 	blt.w	41125e <_svfprintf_r+0x127e>
  410e7e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
  410e82:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
  410e86:	2300      	movs	r3, #0
  410e88:	930c      	str	r3, [sp, #48]	; 0x30
  410e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410e8c:	2b66      	cmp	r3, #102	; 0x66
  410e8e:	f000 81c1 	beq.w	411214 <_svfprintf_r+0x1234>
  410e92:	2b46      	cmp	r3, #70	; 0x46
  410e94:	f000 80f1 	beq.w	41107a <_svfprintf_r+0x109a>
  410e98:	2f45      	cmp	r7, #69	; 0x45
  410e9a:	bf0c      	ite	eq
  410e9c:	9b06      	ldreq	r3, [sp, #24]
  410e9e:	9d06      	ldrne	r5, [sp, #24]
  410ea0:	9808      	ldr	r0, [sp, #32]
  410ea2:	bf08      	it	eq
  410ea4:	1c5d      	addeq	r5, r3, #1
  410ea6:	aa21      	add	r2, sp, #132	; 0x84
  410ea8:	ab1e      	add	r3, sp, #120	; 0x78
  410eaa:	9201      	str	r2, [sp, #4]
  410eac:	9300      	str	r3, [sp, #0]
  410eae:	462a      	mov	r2, r5
  410eb0:	ab1d      	add	r3, sp, #116	; 0x74
  410eb2:	2102      	movs	r1, #2
  410eb4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
  410eb8:	f000 fbca 	bl	411650 <_dtoa_r>
  410ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410ebe:	2b67      	cmp	r3, #103	; 0x67
  410ec0:	4606      	mov	r6, r0
  410ec2:	f040 81d5 	bne.w	411270 <_svfprintf_r+0x1290>
  410ec6:	f01b 0f01 	tst.w	fp, #1
  410eca:	f000 824e 	beq.w	41136a <_svfprintf_r+0x138a>
  410ece:	1974      	adds	r4, r6, r5
  410ed0:	2200      	movs	r2, #0
  410ed2:	2300      	movs	r3, #0
  410ed4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  410ed8:	f7fd fde6 	bl	40eaa8 <__aeabi_dcmpeq>
  410edc:	2800      	cmp	r0, #0
  410ede:	f040 8160 	bne.w	4111a2 <_svfprintf_r+0x11c2>
  410ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  410ee4:	42a3      	cmp	r3, r4
  410ee6:	d206      	bcs.n	410ef6 <_svfprintf_r+0xf16>
  410ee8:	2130      	movs	r1, #48	; 0x30
  410eea:	1c5a      	adds	r2, r3, #1
  410eec:	9221      	str	r2, [sp, #132]	; 0x84
  410eee:	7019      	strb	r1, [r3, #0]
  410ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  410ef2:	429c      	cmp	r4, r3
  410ef4:	d8f9      	bhi.n	410eea <_svfprintf_r+0xf0a>
  410ef6:	1b9b      	subs	r3, r3, r6
  410ef8:	2f47      	cmp	r7, #71	; 0x47
  410efa:	930f      	str	r3, [sp, #60]	; 0x3c
  410efc:	f000 80f0 	beq.w	4110e0 <_svfprintf_r+0x1100>
  410f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410f02:	2b65      	cmp	r3, #101	; 0x65
  410f04:	f340 81c3 	ble.w	41128e <_svfprintf_r+0x12ae>
  410f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410f0a:	2b66      	cmp	r3, #102	; 0x66
  410f0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  410f0e:	930e      	str	r3, [sp, #56]	; 0x38
  410f10:	f000 81c0 	beq.w	411294 <_svfprintf_r+0x12b4>
  410f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410f16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410f18:	4619      	mov	r1, r3
  410f1a:	4291      	cmp	r1, r2
  410f1c:	f300 8191 	bgt.w	411242 <_svfprintf_r+0x1262>
  410f20:	f01b 0f01 	tst.w	fp, #1
  410f24:	f040 8223 	bne.w	41136e <_svfprintf_r+0x138e>
  410f28:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  410f2c:	9304      	str	r3, [sp, #16]
  410f2e:	2367      	movs	r3, #103	; 0x67
  410f30:	920a      	str	r2, [sp, #40]	; 0x28
  410f32:	930d      	str	r3, [sp, #52]	; 0x34
  410f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  410f36:	2b00      	cmp	r3, #0
  410f38:	f040 80cb 	bne.w	4110d2 <_svfprintf_r+0x10f2>
  410f3c:	9306      	str	r3, [sp, #24]
  410f3e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  410f42:	f7ff b965 	b.w	410210 <_svfprintf_r+0x230>
  410f46:	f025 0507 	bic.w	r5, r5, #7
  410f4a:	ed95 7b00 	vldr	d7, [r5]
  410f4e:	f105 0308 	add.w	r3, r5, #8
  410f52:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  410f56:	930b      	str	r3, [sp, #44]	; 0x2c
  410f58:	e416      	b.n	410788 <_svfprintf_r+0x7a8>
  410f5a:	4635      	mov	r5, r6
  410f5c:	460c      	mov	r4, r1
  410f5e:	4646      	mov	r6, r8
  410f60:	4690      	mov	r8, r2
  410f62:	3301      	adds	r3, #1
  410f64:	443c      	add	r4, r7
  410f66:	2b07      	cmp	r3, #7
  410f68:	9425      	str	r4, [sp, #148]	; 0x94
  410f6a:	9324      	str	r3, [sp, #144]	; 0x90
  410f6c:	e888 00a0 	stmia.w	r8, {r5, r7}
  410f70:	f73f aecf 	bgt.w	410d12 <_svfprintf_r+0xd32>
  410f74:	f108 0808 	add.w	r8, r8, #8
  410f78:	e6d5      	b.n	410d26 <_svfprintf_r+0xd46>
  410f7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410f7c:	6813      	ldr	r3, [r2, #0]
  410f7e:	3204      	adds	r2, #4
  410f80:	920b      	str	r2, [sp, #44]	; 0x2c
  410f82:	9a05      	ldr	r2, [sp, #20]
  410f84:	601a      	str	r2, [r3, #0]
  410f86:	f7ff b852 	b.w	41002e <_svfprintf_r+0x4e>
  410f8a:	aa23      	add	r2, sp, #140	; 0x8c
  410f8c:	9907      	ldr	r1, [sp, #28]
  410f8e:	9808      	ldr	r0, [sp, #32]
  410f90:	f001 fede 	bl	412d50 <__ssprint_r>
  410f94:	2800      	cmp	r0, #0
  410f96:	f47f a8f5 	bne.w	410184 <_svfprintf_r+0x1a4>
  410f9a:	46c8      	mov	r8, r9
  410f9c:	e488      	b.n	4108b0 <_svfprintf_r+0x8d0>
  410f9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410fa0:	4a27      	ldr	r2, [pc, #156]	; (411040 <_svfprintf_r+0x1060>)
  410fa2:	f8c8 2000 	str.w	r2, [r8]
  410fa6:	3301      	adds	r3, #1
  410fa8:	3401      	adds	r4, #1
  410faa:	2201      	movs	r2, #1
  410fac:	2b07      	cmp	r3, #7
  410fae:	9425      	str	r4, [sp, #148]	; 0x94
  410fb0:	9324      	str	r3, [sp, #144]	; 0x90
  410fb2:	f8c8 2004 	str.w	r2, [r8, #4]
  410fb6:	dc54      	bgt.n	411062 <_svfprintf_r+0x1082>
  410fb8:	f108 0808 	add.w	r8, r8, #8
  410fbc:	b929      	cbnz	r1, 410fca <_svfprintf_r+0xfea>
  410fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410fc0:	b91b      	cbnz	r3, 410fca <_svfprintf_r+0xfea>
  410fc2:	9b03      	ldr	r3, [sp, #12]
  410fc4:	07d8      	lsls	r0, r3, #31
  410fc6:	f57f a9f2 	bpl.w	4103ae <_svfprintf_r+0x3ce>
  410fca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410fcc:	9813      	ldr	r0, [sp, #76]	; 0x4c
  410fce:	9a14      	ldr	r2, [sp, #80]	; 0x50
  410fd0:	f8c8 2000 	str.w	r2, [r8]
  410fd4:	3301      	adds	r3, #1
  410fd6:	4602      	mov	r2, r0
  410fd8:	4422      	add	r2, r4
  410fda:	2b07      	cmp	r3, #7
  410fdc:	9225      	str	r2, [sp, #148]	; 0x94
  410fde:	f8c8 0004 	str.w	r0, [r8, #4]
  410fe2:	9324      	str	r3, [sp, #144]	; 0x90
  410fe4:	f300 8195 	bgt.w	411312 <_svfprintf_r+0x1332>
  410fe8:	f108 0808 	add.w	r8, r8, #8
  410fec:	2900      	cmp	r1, #0
  410fee:	f2c0 816d 	blt.w	4112cc <_svfprintf_r+0x12ec>
  410ff2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  410ff4:	f8c8 6000 	str.w	r6, [r8]
  410ff8:	3301      	adds	r3, #1
  410ffa:	188c      	adds	r4, r1, r2
  410ffc:	2b07      	cmp	r3, #7
  410ffe:	9425      	str	r4, [sp, #148]	; 0x94
  411000:	9324      	str	r3, [sp, #144]	; 0x90
  411002:	f8c8 1004 	str.w	r1, [r8, #4]
  411006:	f77f a9d0 	ble.w	4103aa <_svfprintf_r+0x3ca>
  41100a:	e529      	b.n	410a60 <_svfprintf_r+0xa80>
  41100c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41100e:	9905      	ldr	r1, [sp, #20]
  411010:	6813      	ldr	r3, [r2, #0]
  411012:	17cd      	asrs	r5, r1, #31
  411014:	4608      	mov	r0, r1
  411016:	3204      	adds	r2, #4
  411018:	4629      	mov	r1, r5
  41101a:	920b      	str	r2, [sp, #44]	; 0x2c
  41101c:	e9c3 0100 	strd	r0, r1, [r3]
  411020:	f7ff b805 	b.w	41002e <_svfprintf_r+0x4e>
  411024:	aa23      	add	r2, sp, #140	; 0x8c
  411026:	9907      	ldr	r1, [sp, #28]
  411028:	9808      	ldr	r0, [sp, #32]
  41102a:	f001 fe91 	bl	412d50 <__ssprint_r>
  41102e:	2800      	cmp	r0, #0
  411030:	f47f a8a8 	bne.w	410184 <_svfprintf_r+0x1a4>
  411034:	9c25      	ldr	r4, [sp, #148]	; 0x94
  411036:	46c8      	mov	r8, r9
  411038:	e453      	b.n	4108e2 <_svfprintf_r+0x902>
  41103a:	bf00      	nop
  41103c:	00413978 	.word	0x00413978
  411040:	00413964 	.word	0x00413964
  411044:	2140      	movs	r1, #64	; 0x40
  411046:	9808      	ldr	r0, [sp, #32]
  411048:	f7fe f8f6 	bl	40f238 <_malloc_r>
  41104c:	9a07      	ldr	r2, [sp, #28]
  41104e:	6010      	str	r0, [r2, #0]
  411050:	6110      	str	r0, [r2, #16]
  411052:	2800      	cmp	r0, #0
  411054:	f000 81f6 	beq.w	411444 <_svfprintf_r+0x1464>
  411058:	9a07      	ldr	r2, [sp, #28]
  41105a:	2340      	movs	r3, #64	; 0x40
  41105c:	6153      	str	r3, [r2, #20]
  41105e:	f7fe bfd6 	b.w	41000e <_svfprintf_r+0x2e>
  411062:	aa23      	add	r2, sp, #140	; 0x8c
  411064:	9907      	ldr	r1, [sp, #28]
  411066:	9808      	ldr	r0, [sp, #32]
  411068:	f001 fe72 	bl	412d50 <__ssprint_r>
  41106c:	2800      	cmp	r0, #0
  41106e:	f47f a889 	bne.w	410184 <_svfprintf_r+0x1a4>
  411072:	991d      	ldr	r1, [sp, #116]	; 0x74
  411074:	9c25      	ldr	r4, [sp, #148]	; 0x94
  411076:	46c8      	mov	r8, r9
  411078:	e7a0      	b.n	410fbc <_svfprintf_r+0xfdc>
  41107a:	9d06      	ldr	r5, [sp, #24]
  41107c:	9808      	ldr	r0, [sp, #32]
  41107e:	aa21      	add	r2, sp, #132	; 0x84
  411080:	ab1e      	add	r3, sp, #120	; 0x78
  411082:	9201      	str	r2, [sp, #4]
  411084:	9300      	str	r3, [sp, #0]
  411086:	462a      	mov	r2, r5
  411088:	ab1d      	add	r3, sp, #116	; 0x74
  41108a:	2103      	movs	r1, #3
  41108c:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
  411090:	f000 fade 	bl	411650 <_dtoa_r>
  411094:	4606      	mov	r6, r0
  411096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411098:	2b46      	cmp	r3, #70	; 0x46
  41109a:	eb06 0405 	add.w	r4, r6, r5
  41109e:	f47f af17 	bne.w	410ed0 <_svfprintf_r+0xef0>
  4110a2:	7833      	ldrb	r3, [r6, #0]
  4110a4:	2b30      	cmp	r3, #48	; 0x30
  4110a6:	f000 817d 	beq.w	4113a4 <_svfprintf_r+0x13c4>
  4110aa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4110ac:	442c      	add	r4, r5
  4110ae:	e70f      	b.n	410ed0 <_svfprintf_r+0xef0>
  4110b0:	9b06      	ldr	r3, [sp, #24]
  4110b2:	2b00      	cmp	r3, #0
  4110b4:	bf08      	it	eq
  4110b6:	2301      	moveq	r3, #1
  4110b8:	9306      	str	r3, [sp, #24]
  4110ba:	e6d9      	b.n	410e70 <_svfprintf_r+0xe90>
  4110bc:	4630      	mov	r0, r6
  4110be:	9406      	str	r4, [sp, #24]
  4110c0:	f7fe ff1e 	bl	40ff00 <strlen>
  4110c4:	950b      	str	r5, [sp, #44]	; 0x2c
  4110c6:	900a      	str	r0, [sp, #40]	; 0x28
  4110c8:	f8cd b00c 	str.w	fp, [sp, #12]
  4110cc:	4603      	mov	r3, r0
  4110ce:	f7ff b9eb 	b.w	4104a8 <_svfprintf_r+0x4c8>
  4110d2:	272d      	movs	r7, #45	; 0x2d
  4110d4:	2300      	movs	r3, #0
  4110d6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4110da:	9306      	str	r3, [sp, #24]
  4110dc:	f7ff b899 	b.w	410212 <_svfprintf_r+0x232>
  4110e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4110e2:	930e      	str	r3, [sp, #56]	; 0x38
  4110e4:	461a      	mov	r2, r3
  4110e6:	3303      	adds	r3, #3
  4110e8:	db04      	blt.n	4110f4 <_svfprintf_r+0x1114>
  4110ea:	9b06      	ldr	r3, [sp, #24]
  4110ec:	4619      	mov	r1, r3
  4110ee:	4291      	cmp	r1, r2
  4110f0:	f6bf af10 	bge.w	410f14 <_svfprintf_r+0xf34>
  4110f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4110f6:	3b02      	subs	r3, #2
  4110f8:	930d      	str	r3, [sp, #52]	; 0x34
  4110fa:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  4110fe:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
  411102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  411104:	3b01      	subs	r3, #1
  411106:	2b00      	cmp	r3, #0
  411108:	931d      	str	r3, [sp, #116]	; 0x74
  41110a:	bfbd      	ittte	lt
  41110c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
  41110e:	f1c3 0301 	rsblt	r3, r3, #1
  411112:	222d      	movlt	r2, #45	; 0x2d
  411114:	222b      	movge	r2, #43	; 0x2b
  411116:	2b09      	cmp	r3, #9
  411118:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  41111c:	f340 811d 	ble.w	41135a <_svfprintf_r+0x137a>
  411120:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  411124:	4620      	mov	r0, r4
  411126:	4daf      	ldr	r5, [pc, #700]	; (4113e4 <_svfprintf_r+0x1404>)
  411128:	e000      	b.n	41112c <_svfprintf_r+0x114c>
  41112a:	4610      	mov	r0, r2
  41112c:	fb85 1203 	smull	r1, r2, r5, r3
  411130:	17d9      	asrs	r1, r3, #31
  411132:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  411136:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  41113a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  41113e:	3230      	adds	r2, #48	; 0x30
  411140:	2909      	cmp	r1, #9
  411142:	f800 2c01 	strb.w	r2, [r0, #-1]
  411146:	460b      	mov	r3, r1
  411148:	f100 32ff 	add.w	r2, r0, #4294967295
  41114c:	dced      	bgt.n	41112a <_svfprintf_r+0x114a>
  41114e:	3330      	adds	r3, #48	; 0x30
  411150:	3802      	subs	r0, #2
  411152:	b2d9      	uxtb	r1, r3
  411154:	4284      	cmp	r4, r0
  411156:	f802 1c01 	strb.w	r1, [r2, #-1]
  41115a:	f240 8170 	bls.w	41143e <_svfprintf_r+0x145e>
  41115e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  411162:	4613      	mov	r3, r2
  411164:	e001      	b.n	41116a <_svfprintf_r+0x118a>
  411166:	f813 1b01 	ldrb.w	r1, [r3], #1
  41116a:	f800 1b01 	strb.w	r1, [r0], #1
  41116e:	42a3      	cmp	r3, r4
  411170:	d1f9      	bne.n	411166 <_svfprintf_r+0x1186>
  411172:	3301      	adds	r3, #1
  411174:	1a9b      	subs	r3, r3, r2
  411176:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  41117a:	4413      	add	r3, r2
  41117c:	aa1f      	add	r2, sp, #124	; 0x7c
  41117e:	1a9b      	subs	r3, r3, r2
  411180:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  411182:	9315      	str	r3, [sp, #84]	; 0x54
  411184:	2a01      	cmp	r2, #1
  411186:	4413      	add	r3, r2
  411188:	930a      	str	r3, [sp, #40]	; 0x28
  41118a:	f340 8120 	ble.w	4113ce <_svfprintf_r+0x13ee>
  41118e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  411192:	4413      	add	r3, r2
  411194:	930a      	str	r3, [sp, #40]	; 0x28
  411196:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  41119a:	9304      	str	r3, [sp, #16]
  41119c:	2300      	movs	r3, #0
  41119e:	930e      	str	r3, [sp, #56]	; 0x38
  4111a0:	e6c8      	b.n	410f34 <_svfprintf_r+0xf54>
  4111a2:	4623      	mov	r3, r4
  4111a4:	e6a7      	b.n	410ef6 <_svfprintf_r+0xf16>
  4111a6:	aa23      	add	r2, sp, #140	; 0x8c
  4111a8:	9907      	ldr	r1, [sp, #28]
  4111aa:	9808      	ldr	r0, [sp, #32]
  4111ac:	f001 fdd0 	bl	412d50 <__ssprint_r>
  4111b0:	2800      	cmp	r0, #0
  4111b2:	f47e afe7 	bne.w	410184 <_svfprintf_r+0x1a4>
  4111b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4111b8:	46c8      	mov	r8, r9
  4111ba:	e4d5      	b.n	410b68 <_svfprintf_r+0xb88>
  4111bc:	aa23      	add	r2, sp, #140	; 0x8c
  4111be:	9907      	ldr	r1, [sp, #28]
  4111c0:	9808      	ldr	r0, [sp, #32]
  4111c2:	f001 fdc5 	bl	412d50 <__ssprint_r>
  4111c6:	2800      	cmp	r0, #0
  4111c8:	f47e afdc 	bne.w	410184 <_svfprintf_r+0x1a4>
  4111cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  4111ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4111d0:	46c8      	mov	r8, r9
  4111d2:	e5af      	b.n	410d34 <_svfprintf_r+0xd54>
  4111d4:	aa23      	add	r2, sp, #140	; 0x8c
  4111d6:	9907      	ldr	r1, [sp, #28]
  4111d8:	9808      	ldr	r0, [sp, #32]
  4111da:	f001 fdb9 	bl	412d50 <__ssprint_r>
  4111de:	2800      	cmp	r0, #0
  4111e0:	f47e afd0 	bne.w	410184 <_svfprintf_r+0x1a4>
  4111e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  4111e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4111e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4111ea:	1a9a      	subs	r2, r3, r2
  4111ec:	46c8      	mov	r8, r9
  4111ee:	e5b9      	b.n	410d64 <_svfprintf_r+0xd84>
  4111f0:	9b06      	ldr	r3, [sp, #24]
  4111f2:	960e      	str	r6, [sp, #56]	; 0x38
  4111f4:	2b06      	cmp	r3, #6
  4111f6:	bf28      	it	cs
  4111f8:	2306      	movcs	r3, #6
  4111fa:	9606      	str	r6, [sp, #24]
  4111fc:	4637      	mov	r7, r6
  4111fe:	9304      	str	r3, [sp, #16]
  411200:	950b      	str	r5, [sp, #44]	; 0x2c
  411202:	f8cd b00c 	str.w	fp, [sp, #12]
  411206:	930a      	str	r3, [sp, #40]	; 0x28
  411208:	4e77      	ldr	r6, [pc, #476]	; (4113e8 <_svfprintf_r+0x1408>)
  41120a:	f7ff b801 	b.w	410210 <_svfprintf_r+0x230>
  41120e:	2306      	movs	r3, #6
  411210:	9306      	str	r3, [sp, #24]
  411212:	e62d      	b.n	410e70 <_svfprintf_r+0xe90>
  411214:	9c06      	ldr	r4, [sp, #24]
  411216:	9808      	ldr	r0, [sp, #32]
  411218:	aa21      	add	r2, sp, #132	; 0x84
  41121a:	ab1e      	add	r3, sp, #120	; 0x78
  41121c:	9201      	str	r2, [sp, #4]
  41121e:	9300      	str	r3, [sp, #0]
  411220:	4622      	mov	r2, r4
  411222:	ab1d      	add	r3, sp, #116	; 0x74
  411224:	2103      	movs	r1, #3
  411226:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
  41122a:	f000 fa11 	bl	411650 <_dtoa_r>
  41122e:	4623      	mov	r3, r4
  411230:	4606      	mov	r6, r0
  411232:	1904      	adds	r4, r0, r4
  411234:	461d      	mov	r5, r3
  411236:	e734      	b.n	4110a2 <_svfprintf_r+0x10c2>
  411238:	272d      	movs	r7, #45	; 0x2d
  41123a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  41123e:	f7ff baca 	b.w	4107d6 <_svfprintf_r+0x7f6>
  411242:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  411244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  411246:	4413      	add	r3, r2
  411248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41124a:	930a      	str	r3, [sp, #40]	; 0x28
  41124c:	2a00      	cmp	r2, #0
  41124e:	f340 80b7 	ble.w	4113c0 <_svfprintf_r+0x13e0>
  411252:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  411256:	9304      	str	r3, [sp, #16]
  411258:	2367      	movs	r3, #103	; 0x67
  41125a:	930d      	str	r3, [sp, #52]	; 0x34
  41125c:	e66a      	b.n	410f34 <_svfprintf_r+0xf54>
  41125e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
  411262:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  411266:	9319      	str	r3, [sp, #100]	; 0x64
  411268:	232d      	movs	r3, #45	; 0x2d
  41126a:	9118      	str	r1, [sp, #96]	; 0x60
  41126c:	930c      	str	r3, [sp, #48]	; 0x30
  41126e:	e60c      	b.n	410e8a <_svfprintf_r+0xeaa>
  411270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411272:	2b47      	cmp	r3, #71	; 0x47
  411274:	f47f ae2b 	bne.w	410ece <_svfprintf_r+0xeee>
  411278:	f01b 0f01 	tst.w	fp, #1
  41127c:	f47f af0b 	bne.w	411096 <_svfprintf_r+0x10b6>
  411280:	9b21      	ldr	r3, [sp, #132]	; 0x84
  411282:	2f47      	cmp	r7, #71	; 0x47
  411284:	eba3 0306 	sub.w	r3, r3, r6
  411288:	930f      	str	r3, [sp, #60]	; 0x3c
  41128a:	f43f af29 	beq.w	4110e0 <_svfprintf_r+0x1100>
  41128e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  411290:	930e      	str	r3, [sp, #56]	; 0x38
  411292:	e732      	b.n	4110fa <_svfprintf_r+0x111a>
  411294:	2b00      	cmp	r3, #0
  411296:	f340 80af 	ble.w	4113f8 <_svfprintf_r+0x1418>
  41129a:	9a06      	ldr	r2, [sp, #24]
  41129c:	2a00      	cmp	r2, #0
  41129e:	d16b      	bne.n	411378 <_svfprintf_r+0x1398>
  4112a0:	f01b 0f01 	tst.w	fp, #1
  4112a4:	d168      	bne.n	411378 <_svfprintf_r+0x1398>
  4112a6:	9304      	str	r3, [sp, #16]
  4112a8:	930a      	str	r3, [sp, #40]	; 0x28
  4112aa:	e643      	b.n	410f34 <_svfprintf_r+0xf54>
  4112ac:	9b06      	ldr	r3, [sp, #24]
  4112ae:	9304      	str	r3, [sp, #16]
  4112b0:	930a      	str	r3, [sp, #40]	; 0x28
  4112b2:	9006      	str	r0, [sp, #24]
  4112b4:	950b      	str	r5, [sp, #44]	; 0x2c
  4112b6:	f8cd b00c 	str.w	fp, [sp, #12]
  4112ba:	900e      	str	r0, [sp, #56]	; 0x38
  4112bc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4112c0:	f7fe bfa6 	b.w	410210 <_svfprintf_r+0x230>
  4112c4:	2000      	movs	r0, #0
  4112c6:	9006      	str	r0, [sp, #24]
  4112c8:	f7fe bee4 	b.w	410094 <_svfprintf_r+0xb4>
  4112cc:	424f      	negs	r7, r1
  4112ce:	3110      	adds	r1, #16
  4112d0:	4d46      	ldr	r5, [pc, #280]	; (4113ec <_svfprintf_r+0x140c>)
  4112d2:	da2b      	bge.n	41132c <_svfprintf_r+0x134c>
  4112d4:	2410      	movs	r4, #16
  4112d6:	f8dd b020 	ldr.w	fp, [sp, #32]
  4112da:	e004      	b.n	4112e6 <_svfprintf_r+0x1306>
  4112dc:	f108 0808 	add.w	r8, r8, #8
  4112e0:	3f10      	subs	r7, #16
  4112e2:	2f10      	cmp	r7, #16
  4112e4:	dd22      	ble.n	41132c <_svfprintf_r+0x134c>
  4112e6:	3301      	adds	r3, #1
  4112e8:	3210      	adds	r2, #16
  4112ea:	2b07      	cmp	r3, #7
  4112ec:	9225      	str	r2, [sp, #148]	; 0x94
  4112ee:	9324      	str	r3, [sp, #144]	; 0x90
  4112f0:	f8c8 5000 	str.w	r5, [r8]
  4112f4:	f8c8 4004 	str.w	r4, [r8, #4]
  4112f8:	ddf0      	ble.n	4112dc <_svfprintf_r+0x12fc>
  4112fa:	aa23      	add	r2, sp, #140	; 0x8c
  4112fc:	9907      	ldr	r1, [sp, #28]
  4112fe:	4658      	mov	r0, fp
  411300:	f001 fd26 	bl	412d50 <__ssprint_r>
  411304:	2800      	cmp	r0, #0
  411306:	f47e af3d 	bne.w	410184 <_svfprintf_r+0x1a4>
  41130a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  41130c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  41130e:	46c8      	mov	r8, r9
  411310:	e7e6      	b.n	4112e0 <_svfprintf_r+0x1300>
  411312:	aa23      	add	r2, sp, #140	; 0x8c
  411314:	9907      	ldr	r1, [sp, #28]
  411316:	9808      	ldr	r0, [sp, #32]
  411318:	f001 fd1a 	bl	412d50 <__ssprint_r>
  41131c:	2800      	cmp	r0, #0
  41131e:	f47e af31 	bne.w	410184 <_svfprintf_r+0x1a4>
  411322:	991d      	ldr	r1, [sp, #116]	; 0x74
  411324:	9a25      	ldr	r2, [sp, #148]	; 0x94
  411326:	9b24      	ldr	r3, [sp, #144]	; 0x90
  411328:	46c8      	mov	r8, r9
  41132a:	e65f      	b.n	410fec <_svfprintf_r+0x100c>
  41132c:	3301      	adds	r3, #1
  41132e:	443a      	add	r2, r7
  411330:	2b07      	cmp	r3, #7
  411332:	e888 00a0 	stmia.w	r8, {r5, r7}
  411336:	9225      	str	r2, [sp, #148]	; 0x94
  411338:	9324      	str	r3, [sp, #144]	; 0x90
  41133a:	f108 0808 	add.w	r8, r8, #8
  41133e:	f77f ae58 	ble.w	410ff2 <_svfprintf_r+0x1012>
  411342:	aa23      	add	r2, sp, #140	; 0x8c
  411344:	9907      	ldr	r1, [sp, #28]
  411346:	9808      	ldr	r0, [sp, #32]
  411348:	f001 fd02 	bl	412d50 <__ssprint_r>
  41134c:	2800      	cmp	r0, #0
  41134e:	f47e af19 	bne.w	410184 <_svfprintf_r+0x1a4>
  411352:	9a25      	ldr	r2, [sp, #148]	; 0x94
  411354:	9b24      	ldr	r3, [sp, #144]	; 0x90
  411356:	46c8      	mov	r8, r9
  411358:	e64b      	b.n	410ff2 <_svfprintf_r+0x1012>
  41135a:	3330      	adds	r3, #48	; 0x30
  41135c:	2230      	movs	r2, #48	; 0x30
  41135e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  411362:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  411366:	ab20      	add	r3, sp, #128	; 0x80
  411368:	e708      	b.n	41117c <_svfprintf_r+0x119c>
  41136a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  41136c:	e5c3      	b.n	410ef6 <_svfprintf_r+0xf16>
  41136e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  411370:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  411372:	4413      	add	r3, r2
  411374:	930a      	str	r3, [sp, #40]	; 0x28
  411376:	e76c      	b.n	411252 <_svfprintf_r+0x1272>
  411378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  41137a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  41137c:	4413      	add	r3, r2
  41137e:	9a06      	ldr	r2, [sp, #24]
  411380:	441a      	add	r2, r3
  411382:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  411386:	920a      	str	r2, [sp, #40]	; 0x28
  411388:	9304      	str	r3, [sp, #16]
  41138a:	e5d3      	b.n	410f34 <_svfprintf_r+0xf54>
  41138c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  41138e:	4e18      	ldr	r6, [pc, #96]	; (4113f0 <_svfprintf_r+0x1410>)
  411390:	2b00      	cmp	r3, #0
  411392:	bfb6      	itet	lt
  411394:	272d      	movlt	r7, #45	; 0x2d
  411396:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
  41139a:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
  41139e:	4b15      	ldr	r3, [pc, #84]	; (4113f4 <_svfprintf_r+0x1414>)
  4113a0:	f7ff ba1b 	b.w	4107da <_svfprintf_r+0x7fa>
  4113a4:	2200      	movs	r2, #0
  4113a6:	2300      	movs	r3, #0
  4113a8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4113ac:	f7fd fb7c 	bl	40eaa8 <__aeabi_dcmpeq>
  4113b0:	2800      	cmp	r0, #0
  4113b2:	f47f ae7a 	bne.w	4110aa <_svfprintf_r+0x10ca>
  4113b6:	f1c5 0501 	rsb	r5, r5, #1
  4113ba:	951d      	str	r5, [sp, #116]	; 0x74
  4113bc:	442c      	add	r4, r5
  4113be:	e587      	b.n	410ed0 <_svfprintf_r+0xef0>
  4113c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4113c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4113c4:	f1c3 0301 	rsb	r3, r3, #1
  4113c8:	441a      	add	r2, r3
  4113ca:	4613      	mov	r3, r2
  4113cc:	e7d2      	b.n	411374 <_svfprintf_r+0x1394>
  4113ce:	f01b 0301 	ands.w	r3, fp, #1
  4113d2:	930e      	str	r3, [sp, #56]	; 0x38
  4113d4:	f47f aedb 	bne.w	41118e <_svfprintf_r+0x11ae>
  4113d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4113da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4113de:	9304      	str	r3, [sp, #16]
  4113e0:	e5a8      	b.n	410f34 <_svfprintf_r+0xf54>
  4113e2:	bf00      	nop
  4113e4:	66666667 	.word	0x66666667
  4113e8:	0041395c 	.word	0x0041395c
  4113ec:	00413978 	.word	0x00413978
  4113f0:	00413930 	.word	0x00413930
  4113f4:	0041392c 	.word	0x0041392c
  4113f8:	9b06      	ldr	r3, [sp, #24]
  4113fa:	b913      	cbnz	r3, 411402 <_svfprintf_r+0x1422>
  4113fc:	f01b 0f01 	tst.w	fp, #1
  411400:	d002      	beq.n	411408 <_svfprintf_r+0x1428>
  411402:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  411404:	3301      	adds	r3, #1
  411406:	e7ba      	b.n	41137e <_svfprintf_r+0x139e>
  411408:	2301      	movs	r3, #1
  41140a:	e74c      	b.n	4112a6 <_svfprintf_r+0x12c6>
  41140c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  41140e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  411412:	6828      	ldr	r0, [r5, #0]
  411414:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  411418:	9006      	str	r0, [sp, #24]
  41141a:	4628      	mov	r0, r5
  41141c:	3004      	adds	r0, #4
  41141e:	46a2      	mov	sl, r4
  411420:	900b      	str	r0, [sp, #44]	; 0x2c
  411422:	f7fe be35 	b.w	410090 <_svfprintf_r+0xb0>
  411426:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  41142a:	f7ff b852 	b.w	4104d2 <_svfprintf_r+0x4f2>
  41142e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  411432:	f7ff b8de 	b.w	4105f2 <_svfprintf_r+0x612>
  411436:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  41143a:	f7ff ba07 	b.w	41084c <_svfprintf_r+0x86c>
  41143e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  411442:	e69b      	b.n	41117c <_svfprintf_r+0x119c>
  411444:	9a08      	ldr	r2, [sp, #32]
  411446:	230c      	movs	r3, #12
  411448:	6013      	str	r3, [r2, #0]
  41144a:	f04f 33ff 	mov.w	r3, #4294967295
  41144e:	9305      	str	r3, [sp, #20]
  411450:	f7fe bea1 	b.w	410196 <_svfprintf_r+0x1b6>
  411454:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  411458:	f7ff b986 	b.w	410768 <_svfprintf_r+0x788>
  41145c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  411460:	f7ff b962 	b.w	410728 <_svfprintf_r+0x748>
  411464:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  411468:	f7ff b945 	b.w	4106f6 <_svfprintf_r+0x716>
  41146c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  411470:	f7ff b8fe 	b.w	410670 <_svfprintf_r+0x690>

00411474 <_vsnprintf_r>:
  411474:	b570      	push	{r4, r5, r6, lr}
  411476:	1e14      	subs	r4, r2, #0
  411478:	b09a      	sub	sp, #104	; 0x68
  41147a:	4605      	mov	r5, r0
  41147c:	db2e      	blt.n	4114dc <_vsnprintf_r+0x68>
  41147e:	461a      	mov	r2, r3
  411480:	f44f 7302 	mov.w	r3, #520	; 0x208
  411484:	9100      	str	r1, [sp, #0]
  411486:	9104      	str	r1, [sp, #16]
  411488:	f8ad 300c 	strh.w	r3, [sp, #12]
  41148c:	d011      	beq.n	4114b2 <_vsnprintf_r+0x3e>
  41148e:	3c01      	subs	r4, #1
  411490:	f64f 76ff 	movw	r6, #65535	; 0xffff
  411494:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  411496:	9402      	str	r4, [sp, #8]
  411498:	4669      	mov	r1, sp
  41149a:	9405      	str	r4, [sp, #20]
  41149c:	f8ad 600e 	strh.w	r6, [sp, #14]
  4114a0:	f7fe fd9e 	bl	40ffe0 <_svfprintf_r>
  4114a4:	1c42      	adds	r2, r0, #1
  4114a6:	db12      	blt.n	4114ce <_vsnprintf_r+0x5a>
  4114a8:	9b00      	ldr	r3, [sp, #0]
  4114aa:	2200      	movs	r2, #0
  4114ac:	701a      	strb	r2, [r3, #0]
  4114ae:	b01a      	add	sp, #104	; 0x68
  4114b0:	bd70      	pop	{r4, r5, r6, pc}
  4114b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4114b4:	9402      	str	r4, [sp, #8]
  4114b6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4114ba:	4669      	mov	r1, sp
  4114bc:	9405      	str	r4, [sp, #20]
  4114be:	f8ad 600e 	strh.w	r6, [sp, #14]
  4114c2:	f7fe fd8d 	bl	40ffe0 <_svfprintf_r>
  4114c6:	1c43      	adds	r3, r0, #1
  4114c8:	db04      	blt.n	4114d4 <_vsnprintf_r+0x60>
  4114ca:	b01a      	add	sp, #104	; 0x68
  4114cc:	bd70      	pop	{r4, r5, r6, pc}
  4114ce:	238b      	movs	r3, #139	; 0x8b
  4114d0:	602b      	str	r3, [r5, #0]
  4114d2:	e7e9      	b.n	4114a8 <_vsnprintf_r+0x34>
  4114d4:	238b      	movs	r3, #139	; 0x8b
  4114d6:	602b      	str	r3, [r5, #0]
  4114d8:	b01a      	add	sp, #104	; 0x68
  4114da:	bd70      	pop	{r4, r5, r6, pc}
  4114dc:	238b      	movs	r3, #139	; 0x8b
  4114de:	6003      	str	r3, [r0, #0]
  4114e0:	f04f 30ff 	mov.w	r0, #4294967295
  4114e4:	e7f1      	b.n	4114ca <_vsnprintf_r+0x56>
  4114e6:	bf00      	nop

004114e8 <vsnprintf>:
  4114e8:	b510      	push	{r4, lr}
  4114ea:	b082      	sub	sp, #8
  4114ec:	4c05      	ldr	r4, [pc, #20]	; (411504 <vsnprintf+0x1c>)
  4114ee:	9300      	str	r3, [sp, #0]
  4114f0:	6824      	ldr	r4, [r4, #0]
  4114f2:	4613      	mov	r3, r2
  4114f4:	460a      	mov	r2, r1
  4114f6:	4601      	mov	r1, r0
  4114f8:	4620      	mov	r0, r4
  4114fa:	f7ff ffbb 	bl	411474 <_vsnprintf_r>
  4114fe:	b002      	add	sp, #8
  411500:	bd10      	pop	{r4, pc}
  411502:	bf00      	nop
  411504:	20002518 	.word	0x20002518

00411508 <register_fini>:
  411508:	4b02      	ldr	r3, [pc, #8]	; (411514 <register_fini+0xc>)
  41150a:	b113      	cbz	r3, 411512 <register_fini+0xa>
  41150c:	4802      	ldr	r0, [pc, #8]	; (411518 <register_fini+0x10>)
  41150e:	f000 b805 	b.w	41151c <atexit>
  411512:	4770      	bx	lr
  411514:	00000000 	.word	0x00000000
  411518:	0041249d 	.word	0x0041249d

0041151c <atexit>:
  41151c:	2300      	movs	r3, #0
  41151e:	4601      	mov	r1, r0
  411520:	461a      	mov	r2, r3
  411522:	4618      	mov	r0, r3
  411524:	f001 bc92 	b.w	412e4c <__register_exitproc>

00411528 <quorem>:
  411528:	6902      	ldr	r2, [r0, #16]
  41152a:	690b      	ldr	r3, [r1, #16]
  41152c:	4293      	cmp	r3, r2
  41152e:	f300 808d 	bgt.w	41164c <quorem+0x124>
  411532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411536:	f103 38ff 	add.w	r8, r3, #4294967295
  41153a:	f101 0714 	add.w	r7, r1, #20
  41153e:	f100 0b14 	add.w	fp, r0, #20
  411542:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  411546:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  41154a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  41154e:	b083      	sub	sp, #12
  411550:	3201      	adds	r2, #1
  411552:	fbb3 f9f2 	udiv	r9, r3, r2
  411556:	eb0b 0304 	add.w	r3, fp, r4
  41155a:	9400      	str	r4, [sp, #0]
  41155c:	eb07 0a04 	add.w	sl, r7, r4
  411560:	9301      	str	r3, [sp, #4]
  411562:	f1b9 0f00 	cmp.w	r9, #0
  411566:	d039      	beq.n	4115dc <quorem+0xb4>
  411568:	2500      	movs	r5, #0
  41156a:	462e      	mov	r6, r5
  41156c:	46bc      	mov	ip, r7
  41156e:	46de      	mov	lr, fp
  411570:	f85c 4b04 	ldr.w	r4, [ip], #4
  411574:	f8de 3000 	ldr.w	r3, [lr]
  411578:	b2a2      	uxth	r2, r4
  41157a:	fb09 5502 	mla	r5, r9, r2, r5
  41157e:	0c22      	lsrs	r2, r4, #16
  411580:	0c2c      	lsrs	r4, r5, #16
  411582:	fb09 4202 	mla	r2, r9, r2, r4
  411586:	b2ad      	uxth	r5, r5
  411588:	1b75      	subs	r5, r6, r5
  41158a:	b296      	uxth	r6, r2
  41158c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  411590:	fa15 f383 	uxtah	r3, r5, r3
  411594:	eb06 4623 	add.w	r6, r6, r3, asr #16
  411598:	b29b      	uxth	r3, r3
  41159a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  41159e:	45e2      	cmp	sl, ip
  4115a0:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4115a4:	f84e 3b04 	str.w	r3, [lr], #4
  4115a8:	ea4f 4626 	mov.w	r6, r6, asr #16
  4115ac:	d2e0      	bcs.n	411570 <quorem+0x48>
  4115ae:	9b00      	ldr	r3, [sp, #0]
  4115b0:	f85b 3003 	ldr.w	r3, [fp, r3]
  4115b4:	b993      	cbnz	r3, 4115dc <quorem+0xb4>
  4115b6:	9c01      	ldr	r4, [sp, #4]
  4115b8:	1f23      	subs	r3, r4, #4
  4115ba:	459b      	cmp	fp, r3
  4115bc:	d20c      	bcs.n	4115d8 <quorem+0xb0>
  4115be:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4115c2:	b94b      	cbnz	r3, 4115d8 <quorem+0xb0>
  4115c4:	f1a4 0308 	sub.w	r3, r4, #8
  4115c8:	e002      	b.n	4115d0 <quorem+0xa8>
  4115ca:	681a      	ldr	r2, [r3, #0]
  4115cc:	3b04      	subs	r3, #4
  4115ce:	b91a      	cbnz	r2, 4115d8 <quorem+0xb0>
  4115d0:	459b      	cmp	fp, r3
  4115d2:	f108 38ff 	add.w	r8, r8, #4294967295
  4115d6:	d3f8      	bcc.n	4115ca <quorem+0xa2>
  4115d8:	f8c0 8010 	str.w	r8, [r0, #16]
  4115dc:	4604      	mov	r4, r0
  4115de:	f001 fab9 	bl	412b54 <__mcmp>
  4115e2:	2800      	cmp	r0, #0
  4115e4:	db2e      	blt.n	411644 <quorem+0x11c>
  4115e6:	f109 0901 	add.w	r9, r9, #1
  4115ea:	465d      	mov	r5, fp
  4115ec:	2300      	movs	r3, #0
  4115ee:	f857 1b04 	ldr.w	r1, [r7], #4
  4115f2:	6828      	ldr	r0, [r5, #0]
  4115f4:	b28a      	uxth	r2, r1
  4115f6:	1a9a      	subs	r2, r3, r2
  4115f8:	0c0b      	lsrs	r3, r1, #16
  4115fa:	fa12 f280 	uxtah	r2, r2, r0
  4115fe:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  411602:	eb03 4322 	add.w	r3, r3, r2, asr #16
  411606:	b292      	uxth	r2, r2
  411608:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  41160c:	45ba      	cmp	sl, r7
  41160e:	f845 2b04 	str.w	r2, [r5], #4
  411612:	ea4f 4323 	mov.w	r3, r3, asr #16
  411616:	d2ea      	bcs.n	4115ee <quorem+0xc6>
  411618:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  41161c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  411620:	b982      	cbnz	r2, 411644 <quorem+0x11c>
  411622:	1f1a      	subs	r2, r3, #4
  411624:	4593      	cmp	fp, r2
  411626:	d20b      	bcs.n	411640 <quorem+0x118>
  411628:	f853 2c04 	ldr.w	r2, [r3, #-4]
  41162c:	b942      	cbnz	r2, 411640 <quorem+0x118>
  41162e:	3b08      	subs	r3, #8
  411630:	e002      	b.n	411638 <quorem+0x110>
  411632:	681a      	ldr	r2, [r3, #0]
  411634:	3b04      	subs	r3, #4
  411636:	b91a      	cbnz	r2, 411640 <quorem+0x118>
  411638:	459b      	cmp	fp, r3
  41163a:	f108 38ff 	add.w	r8, r8, #4294967295
  41163e:	d3f8      	bcc.n	411632 <quorem+0x10a>
  411640:	f8c4 8010 	str.w	r8, [r4, #16]
  411644:	4648      	mov	r0, r9
  411646:	b003      	add	sp, #12
  411648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41164c:	2000      	movs	r0, #0
  41164e:	4770      	bx	lr

00411650 <_dtoa_r>:
  411650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411654:	ec57 6b10 	vmov	r6, r7, d0
  411658:	b097      	sub	sp, #92	; 0x5c
  41165a:	6c05      	ldr	r5, [r0, #64]	; 0x40
  41165c:	9102      	str	r1, [sp, #8]
  41165e:	4604      	mov	r4, r0
  411660:	4693      	mov	fp, r2
  411662:	9303      	str	r3, [sp, #12]
  411664:	e9cd 6700 	strd	r6, r7, [sp]
  411668:	b14d      	cbz	r5, 41167e <_dtoa_r+0x2e>
  41166a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  41166c:	606a      	str	r2, [r5, #4]
  41166e:	2301      	movs	r3, #1
  411670:	4093      	lsls	r3, r2
  411672:	60ab      	str	r3, [r5, #8]
  411674:	4629      	mov	r1, r5
  411676:	f001 f895 	bl	4127a4 <_Bfree>
  41167a:	2300      	movs	r3, #0
  41167c:	6423      	str	r3, [r4, #64]	; 0x40
  41167e:	e9dd 2300 	ldrd	r2, r3, [sp]
  411682:	2b00      	cmp	r3, #0
  411684:	4699      	mov	r9, r3
  411686:	db38      	blt.n	4116fa <_dtoa_r+0xaa>
  411688:	9a20      	ldr	r2, [sp, #128]	; 0x80
  41168a:	2300      	movs	r3, #0
  41168c:	6013      	str	r3, [r2, #0]
  41168e:	4ba0      	ldr	r3, [pc, #640]	; (411910 <_dtoa_r+0x2c0>)
  411690:	ea33 0309 	bics.w	r3, r3, r9
  411694:	d017      	beq.n	4116c6 <_dtoa_r+0x76>
  411696:	e9dd 6700 	ldrd	r6, r7, [sp]
  41169a:	2200      	movs	r2, #0
  41169c:	2300      	movs	r3, #0
  41169e:	4630      	mov	r0, r6
  4116a0:	4639      	mov	r1, r7
  4116a2:	f7fd fa01 	bl	40eaa8 <__aeabi_dcmpeq>
  4116a6:	4680      	mov	r8, r0
  4116a8:	2800      	cmp	r0, #0
  4116aa:	d02f      	beq.n	41170c <_dtoa_r+0xbc>
  4116ac:	9a03      	ldr	r2, [sp, #12]
  4116ae:	2301      	movs	r3, #1
  4116b0:	6013      	str	r3, [r2, #0]
  4116b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4116b4:	2b00      	cmp	r3, #0
  4116b6:	f000 80c4 	beq.w	411842 <_dtoa_r+0x1f2>
  4116ba:	4896      	ldr	r0, [pc, #600]	; (411914 <_dtoa_r+0x2c4>)
  4116bc:	6018      	str	r0, [r3, #0]
  4116be:	3801      	subs	r0, #1
  4116c0:	b017      	add	sp, #92	; 0x5c
  4116c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4116c6:	9a03      	ldr	r2, [sp, #12]
  4116c8:	f242 730f 	movw	r3, #9999	; 0x270f
  4116cc:	6013      	str	r3, [r2, #0]
  4116ce:	9b00      	ldr	r3, [sp, #0]
  4116d0:	b96b      	cbnz	r3, 4116ee <_dtoa_r+0x9e>
  4116d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
  4116d6:	b953      	cbnz	r3, 4116ee <_dtoa_r+0x9e>
  4116d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4116da:	488f      	ldr	r0, [pc, #572]	; (411918 <_dtoa_r+0x2c8>)
  4116dc:	2b00      	cmp	r3, #0
  4116de:	d0ef      	beq.n	4116c0 <_dtoa_r+0x70>
  4116e0:	f100 0308 	add.w	r3, r0, #8
  4116e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
  4116e6:	6013      	str	r3, [r2, #0]
  4116e8:	b017      	add	sp, #92	; 0x5c
  4116ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4116ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4116f0:	488a      	ldr	r0, [pc, #552]	; (41191c <_dtoa_r+0x2cc>)
  4116f2:	2b00      	cmp	r3, #0
  4116f4:	d0e4      	beq.n	4116c0 <_dtoa_r+0x70>
  4116f6:	1cc3      	adds	r3, r0, #3
  4116f8:	e7f4      	b.n	4116e4 <_dtoa_r+0x94>
  4116fa:	9a01      	ldr	r2, [sp, #4]
  4116fc:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
  411700:	9a20      	ldr	r2, [sp, #128]	; 0x80
  411702:	f8cd 9004 	str.w	r9, [sp, #4]
  411706:	2301      	movs	r3, #1
  411708:	6013      	str	r3, [r2, #0]
  41170a:	e7c0      	b.n	41168e <_dtoa_r+0x3e>
  41170c:	aa14      	add	r2, sp, #80	; 0x50
  41170e:	a915      	add	r1, sp, #84	; 0x54
  411710:	ec47 6b10 	vmov	d0, r6, r7
  411714:	4620      	mov	r0, r4
  411716:	f001 fabd 	bl	412c94 <__d2b>
  41171a:	ea5f 5519 	movs.w	r5, r9, lsr #20
  41171e:	4682      	mov	sl, r0
  411720:	d073      	beq.n	41180a <_dtoa_r+0x1ba>
  411722:	f3c7 0313 	ubfx	r3, r7, #0, #20
  411726:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  41172a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  41172e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  411732:	4630      	mov	r0, r6
  411734:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  411738:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  41173c:	2200      	movs	r2, #0
  41173e:	4b78      	ldr	r3, [pc, #480]	; (411920 <_dtoa_r+0x2d0>)
  411740:	f7fc fd96 	bl	40e270 <__aeabi_dsub>
  411744:	a36c      	add	r3, pc, #432	; (adr r3, 4118f8 <_dtoa_r+0x2a8>)
  411746:	e9d3 2300 	ldrd	r2, r3, [r3]
  41174a:	f7fc ff45 	bl	40e5d8 <__aeabi_dmul>
  41174e:	a36c      	add	r3, pc, #432	; (adr r3, 411900 <_dtoa_r+0x2b0>)
  411750:	e9d3 2300 	ldrd	r2, r3, [r3]
  411754:	f7fc fd8e 	bl	40e274 <__adddf3>
  411758:	4606      	mov	r6, r0
  41175a:	4628      	mov	r0, r5
  41175c:	460f      	mov	r7, r1
  41175e:	f7fc fed5 	bl	40e50c <__aeabi_i2d>
  411762:	a369      	add	r3, pc, #420	; (adr r3, 411908 <_dtoa_r+0x2b8>)
  411764:	e9d3 2300 	ldrd	r2, r3, [r3]
  411768:	f7fc ff36 	bl	40e5d8 <__aeabi_dmul>
  41176c:	4602      	mov	r2, r0
  41176e:	460b      	mov	r3, r1
  411770:	4630      	mov	r0, r6
  411772:	4639      	mov	r1, r7
  411774:	f7fc fd7e 	bl	40e274 <__adddf3>
  411778:	4606      	mov	r6, r0
  41177a:	460f      	mov	r7, r1
  41177c:	f7fd f9dc 	bl	40eb38 <__aeabi_d2iz>
  411780:	2200      	movs	r2, #0
  411782:	9004      	str	r0, [sp, #16]
  411784:	2300      	movs	r3, #0
  411786:	4630      	mov	r0, r6
  411788:	4639      	mov	r1, r7
  41178a:	f7fd f997 	bl	40eabc <__aeabi_dcmplt>
  41178e:	2800      	cmp	r0, #0
  411790:	f040 816f 	bne.w	411a72 <_dtoa_r+0x422>
  411794:	9e04      	ldr	r6, [sp, #16]
  411796:	2e16      	cmp	r6, #22
  411798:	f200 8159 	bhi.w	411a4e <_dtoa_r+0x3fe>
  41179c:	4b61      	ldr	r3, [pc, #388]	; (411924 <_dtoa_r+0x2d4>)
  41179e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4117a2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4117a6:	e9dd 2300 	ldrd	r2, r3, [sp]
  4117aa:	f7fd f9a5 	bl	40eaf8 <__aeabi_dcmpgt>
  4117ae:	2800      	cmp	r0, #0
  4117b0:	f000 81c4 	beq.w	411b3c <_dtoa_r+0x4ec>
  4117b4:	1e73      	subs	r3, r6, #1
  4117b6:	9304      	str	r3, [sp, #16]
  4117b8:	2300      	movs	r3, #0
  4117ba:	930c      	str	r3, [sp, #48]	; 0x30
  4117bc:	eba8 0505 	sub.w	r5, r8, r5
  4117c0:	1e6b      	subs	r3, r5, #1
  4117c2:	9305      	str	r3, [sp, #20]
  4117c4:	f100 814f 	bmi.w	411a66 <_dtoa_r+0x416>
  4117c8:	2300      	movs	r3, #0
  4117ca:	9306      	str	r3, [sp, #24]
  4117cc:	9b04      	ldr	r3, [sp, #16]
  4117ce:	2b00      	cmp	r3, #0
  4117d0:	f2c0 8140 	blt.w	411a54 <_dtoa_r+0x404>
  4117d4:	9a05      	ldr	r2, [sp, #20]
  4117d6:	930b      	str	r3, [sp, #44]	; 0x2c
  4117d8:	4611      	mov	r1, r2
  4117da:	4419      	add	r1, r3
  4117dc:	2300      	movs	r3, #0
  4117de:	9105      	str	r1, [sp, #20]
  4117e0:	930a      	str	r3, [sp, #40]	; 0x28
  4117e2:	9b02      	ldr	r3, [sp, #8]
  4117e4:	2b09      	cmp	r3, #9
  4117e6:	d82e      	bhi.n	411846 <_dtoa_r+0x1f6>
  4117e8:	2b05      	cmp	r3, #5
  4117ea:	f340 8651 	ble.w	412490 <_dtoa_r+0xe40>
  4117ee:	3b04      	subs	r3, #4
  4117f0:	9302      	str	r3, [sp, #8]
  4117f2:	2700      	movs	r7, #0
  4117f4:	9b02      	ldr	r3, [sp, #8]
  4117f6:	3b02      	subs	r3, #2
  4117f8:	2b03      	cmp	r3, #3
  4117fa:	f200 8633 	bhi.w	412464 <_dtoa_r+0xe14>
  4117fe:	e8df f013 	tbh	[pc, r3, lsl #1]
  411802:	03d6      	.short	0x03d6
  411804:	03e302cb 	.word	0x03e302cb
  411808:	0464      	.short	0x0464
  41180a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  41180e:	9d15      	ldr	r5, [sp, #84]	; 0x54
  411810:	4445      	add	r5, r8
  411812:	f205 4332 	addw	r3, r5, #1074	; 0x432
  411816:	2b20      	cmp	r3, #32
  411818:	f340 818a 	ble.w	411b30 <_dtoa_r+0x4e0>
  41181c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  411820:	fa09 f903 	lsl.w	r9, r9, r3
  411824:	9b00      	ldr	r3, [sp, #0]
  411826:	f205 4012 	addw	r0, r5, #1042	; 0x412
  41182a:	fa23 f000 	lsr.w	r0, r3, r0
  41182e:	ea40 0009 	orr.w	r0, r0, r9
  411832:	f7fc fe5b 	bl	40e4ec <__aeabi_ui2d>
  411836:	2301      	movs	r3, #1
  411838:	3d01      	subs	r5, #1
  41183a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  41183e:	9310      	str	r3, [sp, #64]	; 0x40
  411840:	e77c      	b.n	41173c <_dtoa_r+0xec>
  411842:	4839      	ldr	r0, [pc, #228]	; (411928 <_dtoa_r+0x2d8>)
  411844:	e73c      	b.n	4116c0 <_dtoa_r+0x70>
  411846:	2100      	movs	r1, #0
  411848:	6461      	str	r1, [r4, #68]	; 0x44
  41184a:	4620      	mov	r0, r4
  41184c:	468b      	mov	fp, r1
  41184e:	f000 ff83 	bl	412758 <_Balloc>
  411852:	f04f 33ff 	mov.w	r3, #4294967295
  411856:	9308      	str	r3, [sp, #32]
  411858:	930d      	str	r3, [sp, #52]	; 0x34
  41185a:	2301      	movs	r3, #1
  41185c:	9007      	str	r0, [sp, #28]
  41185e:	6420      	str	r0, [r4, #64]	; 0x40
  411860:	f8cd b008 	str.w	fp, [sp, #8]
  411864:	9309      	str	r3, [sp, #36]	; 0x24
  411866:	9b15      	ldr	r3, [sp, #84]	; 0x54
  411868:	2b00      	cmp	r3, #0
  41186a:	f2c0 80d0 	blt.w	411a0e <_dtoa_r+0x3be>
  41186e:	9a04      	ldr	r2, [sp, #16]
  411870:	2a0e      	cmp	r2, #14
  411872:	f300 80cc 	bgt.w	411a0e <_dtoa_r+0x3be>
  411876:	4b2b      	ldr	r3, [pc, #172]	; (411924 <_dtoa_r+0x2d4>)
  411878:	f1bb 0f00 	cmp.w	fp, #0
  41187c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  411880:	e9d3 8900 	ldrd	r8, r9, [r3]
  411884:	f2c0 83be 	blt.w	412004 <_dtoa_r+0x9b4>
  411888:	e9dd 6700 	ldrd	r6, r7, [sp]
  41188c:	4642      	mov	r2, r8
  41188e:	464b      	mov	r3, r9
  411890:	4630      	mov	r0, r6
  411892:	4639      	mov	r1, r7
  411894:	f7fc ffca 	bl	40e82c <__aeabi_ddiv>
  411898:	f7fd f94e 	bl	40eb38 <__aeabi_d2iz>
  41189c:	4683      	mov	fp, r0
  41189e:	f7fc fe35 	bl	40e50c <__aeabi_i2d>
  4118a2:	4642      	mov	r2, r8
  4118a4:	464b      	mov	r3, r9
  4118a6:	f7fc fe97 	bl	40e5d8 <__aeabi_dmul>
  4118aa:	460b      	mov	r3, r1
  4118ac:	4602      	mov	r2, r0
  4118ae:	4639      	mov	r1, r7
  4118b0:	4630      	mov	r0, r6
  4118b2:	f7fc fcdd 	bl	40e270 <__aeabi_dsub>
  4118b6:	9d07      	ldr	r5, [sp, #28]
  4118b8:	f10b 0330 	add.w	r3, fp, #48	; 0x30
  4118bc:	702b      	strb	r3, [r5, #0]
  4118be:	9b08      	ldr	r3, [sp, #32]
  4118c0:	2b01      	cmp	r3, #1
  4118c2:	4606      	mov	r6, r0
  4118c4:	460f      	mov	r7, r1
  4118c6:	f105 0501 	add.w	r5, r5, #1
  4118ca:	d061      	beq.n	411990 <_dtoa_r+0x340>
  4118cc:	2200      	movs	r2, #0
  4118ce:	4b17      	ldr	r3, [pc, #92]	; (41192c <_dtoa_r+0x2dc>)
  4118d0:	f7fc fe82 	bl	40e5d8 <__aeabi_dmul>
  4118d4:	2200      	movs	r2, #0
  4118d6:	2300      	movs	r3, #0
  4118d8:	4606      	mov	r6, r0
  4118da:	460f      	mov	r7, r1
  4118dc:	f7fd f8e4 	bl	40eaa8 <__aeabi_dcmpeq>
  4118e0:	2800      	cmp	r0, #0
  4118e2:	f040 8081 	bne.w	4119e8 <_dtoa_r+0x398>
  4118e6:	f8cd a000 	str.w	sl, [sp]
  4118ea:	9402      	str	r4, [sp, #8]
  4118ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4118f0:	9c08      	ldr	r4, [sp, #32]
  4118f2:	e028      	b.n	411946 <_dtoa_r+0x2f6>
  4118f4:	f3af 8000 	nop.w
  4118f8:	636f4361 	.word	0x636f4361
  4118fc:	3fd287a7 	.word	0x3fd287a7
  411900:	8b60c8b3 	.word	0x8b60c8b3
  411904:	3fc68a28 	.word	0x3fc68a28
  411908:	509f79fb 	.word	0x509f79fb
  41190c:	3fd34413 	.word	0x3fd34413
  411910:	7ff00000 	.word	0x7ff00000
  411914:	00413965 	.word	0x00413965
  411918:	00413988 	.word	0x00413988
  41191c:	00413994 	.word	0x00413994
  411920:	3ff80000 	.word	0x3ff80000
  411924:	004139c0 	.word	0x004139c0
  411928:	00413964 	.word	0x00413964
  41192c:	40240000 	.word	0x40240000
  411930:	f7fc fe52 	bl	40e5d8 <__aeabi_dmul>
  411934:	2200      	movs	r2, #0
  411936:	2300      	movs	r3, #0
  411938:	4606      	mov	r6, r0
  41193a:	460f      	mov	r7, r1
  41193c:	f7fd f8b4 	bl	40eaa8 <__aeabi_dcmpeq>
  411940:	2800      	cmp	r0, #0
  411942:	f040 83c5 	bne.w	4120d0 <_dtoa_r+0xa80>
  411946:	4642      	mov	r2, r8
  411948:	464b      	mov	r3, r9
  41194a:	4630      	mov	r0, r6
  41194c:	4639      	mov	r1, r7
  41194e:	f7fc ff6d 	bl	40e82c <__aeabi_ddiv>
  411952:	f7fd f8f1 	bl	40eb38 <__aeabi_d2iz>
  411956:	4683      	mov	fp, r0
  411958:	f7fc fdd8 	bl	40e50c <__aeabi_i2d>
  41195c:	4642      	mov	r2, r8
  41195e:	464b      	mov	r3, r9
  411960:	f7fc fe3a 	bl	40e5d8 <__aeabi_dmul>
  411964:	4602      	mov	r2, r0
  411966:	460b      	mov	r3, r1
  411968:	4630      	mov	r0, r6
  41196a:	4639      	mov	r1, r7
  41196c:	f7fc fc80 	bl	40e270 <__aeabi_dsub>
  411970:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
  411974:	f805 eb01 	strb.w	lr, [r5], #1
  411978:	eba5 0e0a 	sub.w	lr, r5, sl
  41197c:	45a6      	cmp	lr, r4
  41197e:	4606      	mov	r6, r0
  411980:	460f      	mov	r7, r1
  411982:	f04f 0200 	mov.w	r2, #0
  411986:	4b6e      	ldr	r3, [pc, #440]	; (411b40 <_dtoa_r+0x4f0>)
  411988:	d1d2      	bne.n	411930 <_dtoa_r+0x2e0>
  41198a:	f8dd a000 	ldr.w	sl, [sp]
  41198e:	9c02      	ldr	r4, [sp, #8]
  411990:	4632      	mov	r2, r6
  411992:	463b      	mov	r3, r7
  411994:	4630      	mov	r0, r6
  411996:	4639      	mov	r1, r7
  411998:	f7fc fc6c 	bl	40e274 <__adddf3>
  41199c:	4606      	mov	r6, r0
  41199e:	460f      	mov	r7, r1
  4119a0:	4602      	mov	r2, r0
  4119a2:	460b      	mov	r3, r1
  4119a4:	4640      	mov	r0, r8
  4119a6:	4649      	mov	r1, r9
  4119a8:	f7fd f888 	bl	40eabc <__aeabi_dcmplt>
  4119ac:	b948      	cbnz	r0, 4119c2 <_dtoa_r+0x372>
  4119ae:	4632      	mov	r2, r6
  4119b0:	463b      	mov	r3, r7
  4119b2:	4640      	mov	r0, r8
  4119b4:	4649      	mov	r1, r9
  4119b6:	f7fd f877 	bl	40eaa8 <__aeabi_dcmpeq>
  4119ba:	b1a8      	cbz	r0, 4119e8 <_dtoa_r+0x398>
  4119bc:	f01b 0f01 	tst.w	fp, #1
  4119c0:	d012      	beq.n	4119e8 <_dtoa_r+0x398>
  4119c2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4119c6:	9a07      	ldr	r2, [sp, #28]
  4119c8:	1e6b      	subs	r3, r5, #1
  4119ca:	e004      	b.n	4119d6 <_dtoa_r+0x386>
  4119cc:	429a      	cmp	r2, r3
  4119ce:	f000 842d 	beq.w	41222c <_dtoa_r+0xbdc>
  4119d2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4119d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4119da:	f103 0501 	add.w	r5, r3, #1
  4119de:	d0f5      	beq.n	4119cc <_dtoa_r+0x37c>
  4119e0:	f108 0801 	add.w	r8, r8, #1
  4119e4:	f883 8000 	strb.w	r8, [r3]
  4119e8:	4651      	mov	r1, sl
  4119ea:	4620      	mov	r0, r4
  4119ec:	f000 feda 	bl	4127a4 <_Bfree>
  4119f0:	2200      	movs	r2, #0
  4119f2:	9b04      	ldr	r3, [sp, #16]
  4119f4:	702a      	strb	r2, [r5, #0]
  4119f6:	9a03      	ldr	r2, [sp, #12]
  4119f8:	3301      	adds	r3, #1
  4119fa:	6013      	str	r3, [r2, #0]
  4119fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4119fe:	2b00      	cmp	r3, #0
  411a00:	f000 83a3 	beq.w	41214a <_dtoa_r+0xafa>
  411a04:	9807      	ldr	r0, [sp, #28]
  411a06:	601d      	str	r5, [r3, #0]
  411a08:	b017      	add	sp, #92	; 0x5c
  411a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411a10:	2a00      	cmp	r2, #0
  411a12:	d040      	beq.n	411a96 <_dtoa_r+0x446>
  411a14:	9a02      	ldr	r2, [sp, #8]
  411a16:	2a01      	cmp	r2, #1
  411a18:	f340 831c 	ble.w	412054 <_dtoa_r+0xa04>
  411a1c:	9b08      	ldr	r3, [sp, #32]
  411a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411a20:	1e5f      	subs	r7, r3, #1
  411a22:	42ba      	cmp	r2, r7
  411a24:	f2c0 8394 	blt.w	412150 <_dtoa_r+0xb00>
  411a28:	1bd7      	subs	r7, r2, r7
  411a2a:	9b08      	ldr	r3, [sp, #32]
  411a2c:	2b00      	cmp	r3, #0
  411a2e:	f2c0 847e 	blt.w	41232e <_dtoa_r+0xcde>
  411a32:	9d06      	ldr	r5, [sp, #24]
  411a34:	9b08      	ldr	r3, [sp, #32]
  411a36:	9a06      	ldr	r2, [sp, #24]
  411a38:	441a      	add	r2, r3
  411a3a:	9206      	str	r2, [sp, #24]
  411a3c:	9a05      	ldr	r2, [sp, #20]
  411a3e:	2101      	movs	r1, #1
  411a40:	441a      	add	r2, r3
  411a42:	4620      	mov	r0, r4
  411a44:	9205      	str	r2, [sp, #20]
  411a46:	f000 ff47 	bl	4128d8 <__i2b>
  411a4a:	4606      	mov	r6, r0
  411a4c:	e026      	b.n	411a9c <_dtoa_r+0x44c>
  411a4e:	2301      	movs	r3, #1
  411a50:	930c      	str	r3, [sp, #48]	; 0x30
  411a52:	e6b3      	b.n	4117bc <_dtoa_r+0x16c>
  411a54:	9a06      	ldr	r2, [sp, #24]
  411a56:	9b04      	ldr	r3, [sp, #16]
  411a58:	1ad2      	subs	r2, r2, r3
  411a5a:	425b      	negs	r3, r3
  411a5c:	930a      	str	r3, [sp, #40]	; 0x28
  411a5e:	2300      	movs	r3, #0
  411a60:	9206      	str	r2, [sp, #24]
  411a62:	930b      	str	r3, [sp, #44]	; 0x2c
  411a64:	e6bd      	b.n	4117e2 <_dtoa_r+0x192>
  411a66:	f1c5 0301 	rsb	r3, r5, #1
  411a6a:	9306      	str	r3, [sp, #24]
  411a6c:	2300      	movs	r3, #0
  411a6e:	9305      	str	r3, [sp, #20]
  411a70:	e6ac      	b.n	4117cc <_dtoa_r+0x17c>
  411a72:	f8dd 9010 	ldr.w	r9, [sp, #16]
  411a76:	4648      	mov	r0, r9
  411a78:	f7fc fd48 	bl	40e50c <__aeabi_i2d>
  411a7c:	4602      	mov	r2, r0
  411a7e:	460b      	mov	r3, r1
  411a80:	4630      	mov	r0, r6
  411a82:	4639      	mov	r1, r7
  411a84:	f7fd f810 	bl	40eaa8 <__aeabi_dcmpeq>
  411a88:	2800      	cmp	r0, #0
  411a8a:	f47f ae83 	bne.w	411794 <_dtoa_r+0x144>
  411a8e:	f109 33ff 	add.w	r3, r9, #4294967295
  411a92:	9304      	str	r3, [sp, #16]
  411a94:	e67e      	b.n	411794 <_dtoa_r+0x144>
  411a96:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  411a98:	9d06      	ldr	r5, [sp, #24]
  411a9a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  411a9c:	2d00      	cmp	r5, #0
  411a9e:	dd0c      	ble.n	411aba <_dtoa_r+0x46a>
  411aa0:	9905      	ldr	r1, [sp, #20]
  411aa2:	2900      	cmp	r1, #0
  411aa4:	460b      	mov	r3, r1
  411aa6:	dd08      	ble.n	411aba <_dtoa_r+0x46a>
  411aa8:	42a9      	cmp	r1, r5
  411aaa:	9a06      	ldr	r2, [sp, #24]
  411aac:	bfa8      	it	ge
  411aae:	462b      	movge	r3, r5
  411ab0:	1ad2      	subs	r2, r2, r3
  411ab2:	1aed      	subs	r5, r5, r3
  411ab4:	1acb      	subs	r3, r1, r3
  411ab6:	9206      	str	r2, [sp, #24]
  411ab8:	9305      	str	r3, [sp, #20]
  411aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411abc:	b1d3      	cbz	r3, 411af4 <_dtoa_r+0x4a4>
  411abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411ac0:	2b00      	cmp	r3, #0
  411ac2:	f000 82c0 	beq.w	412046 <_dtoa_r+0x9f6>
  411ac6:	2f00      	cmp	r7, #0
  411ac8:	dd10      	ble.n	411aec <_dtoa_r+0x49c>
  411aca:	4631      	mov	r1, r6
  411acc:	463a      	mov	r2, r7
  411ace:	4620      	mov	r0, r4
  411ad0:	f000 ff9e 	bl	412a10 <__pow5mult>
  411ad4:	4652      	mov	r2, sl
  411ad6:	4601      	mov	r1, r0
  411ad8:	4606      	mov	r6, r0
  411ada:	4620      	mov	r0, r4
  411adc:	f000 ff06 	bl	4128ec <__multiply>
  411ae0:	4651      	mov	r1, sl
  411ae2:	4680      	mov	r8, r0
  411ae4:	4620      	mov	r0, r4
  411ae6:	f000 fe5d 	bl	4127a4 <_Bfree>
  411aea:	46c2      	mov	sl, r8
  411aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411aee:	1bda      	subs	r2, r3, r7
  411af0:	f040 82aa 	bne.w	412048 <_dtoa_r+0x9f8>
  411af4:	2101      	movs	r1, #1
  411af6:	4620      	mov	r0, r4
  411af8:	f000 feee 	bl	4128d8 <__i2b>
  411afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  411afe:	2b00      	cmp	r3, #0
  411b00:	4681      	mov	r9, r0
  411b02:	dd1f      	ble.n	411b44 <_dtoa_r+0x4f4>
  411b04:	4601      	mov	r1, r0
  411b06:	461a      	mov	r2, r3
  411b08:	4620      	mov	r0, r4
  411b0a:	f000 ff81 	bl	412a10 <__pow5mult>
  411b0e:	9b02      	ldr	r3, [sp, #8]
  411b10:	2b01      	cmp	r3, #1
  411b12:	4681      	mov	r9, r0
  411b14:	f340 825b 	ble.w	411fce <_dtoa_r+0x97e>
  411b18:	f04f 0800 	mov.w	r8, #0
  411b1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
  411b20:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  411b24:	6918      	ldr	r0, [r3, #16]
  411b26:	f000 fe87 	bl	412838 <__hi0bits>
  411b2a:	f1c0 0020 	rsb	r0, r0, #32
  411b2e:	e013      	b.n	411b58 <_dtoa_r+0x508>
  411b30:	f1c3 0920 	rsb	r9, r3, #32
  411b34:	9b00      	ldr	r3, [sp, #0]
  411b36:	fa03 f009 	lsl.w	r0, r3, r9
  411b3a:	e67a      	b.n	411832 <_dtoa_r+0x1e2>
  411b3c:	900c      	str	r0, [sp, #48]	; 0x30
  411b3e:	e63d      	b.n	4117bc <_dtoa_r+0x16c>
  411b40:	40240000 	.word	0x40240000
  411b44:	9b02      	ldr	r3, [sp, #8]
  411b46:	2b01      	cmp	r3, #1
  411b48:	f340 828d 	ble.w	412066 <_dtoa_r+0xa16>
  411b4c:	f04f 0800 	mov.w	r8, #0
  411b50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  411b52:	2001      	movs	r0, #1
  411b54:	2b00      	cmp	r3, #0
  411b56:	d1e1      	bne.n	411b1c <_dtoa_r+0x4cc>
  411b58:	9a05      	ldr	r2, [sp, #20]
  411b5a:	4410      	add	r0, r2
  411b5c:	f010 001f 	ands.w	r0, r0, #31
  411b60:	f000 80a1 	beq.w	411ca6 <_dtoa_r+0x656>
  411b64:	f1c0 0320 	rsb	r3, r0, #32
  411b68:	2b04      	cmp	r3, #4
  411b6a:	f340 848c 	ble.w	412486 <_dtoa_r+0xe36>
  411b6e:	9b06      	ldr	r3, [sp, #24]
  411b70:	f1c0 001c 	rsb	r0, r0, #28
  411b74:	4403      	add	r3, r0
  411b76:	9306      	str	r3, [sp, #24]
  411b78:	4613      	mov	r3, r2
  411b7a:	4403      	add	r3, r0
  411b7c:	4405      	add	r5, r0
  411b7e:	9305      	str	r3, [sp, #20]
  411b80:	9b06      	ldr	r3, [sp, #24]
  411b82:	2b00      	cmp	r3, #0
  411b84:	dd05      	ble.n	411b92 <_dtoa_r+0x542>
  411b86:	4651      	mov	r1, sl
  411b88:	461a      	mov	r2, r3
  411b8a:	4620      	mov	r0, r4
  411b8c:	f000 ff90 	bl	412ab0 <__lshift>
  411b90:	4682      	mov	sl, r0
  411b92:	9b05      	ldr	r3, [sp, #20]
  411b94:	2b00      	cmp	r3, #0
  411b96:	dd05      	ble.n	411ba4 <_dtoa_r+0x554>
  411b98:	4649      	mov	r1, r9
  411b9a:	461a      	mov	r2, r3
  411b9c:	4620      	mov	r0, r4
  411b9e:	f000 ff87 	bl	412ab0 <__lshift>
  411ba2:	4681      	mov	r9, r0
  411ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  411ba6:	2b00      	cmp	r3, #0
  411ba8:	f040 8086 	bne.w	411cb8 <_dtoa_r+0x668>
  411bac:	9b08      	ldr	r3, [sp, #32]
  411bae:	2b00      	cmp	r3, #0
  411bb0:	f340 8269 	ble.w	412086 <_dtoa_r+0xa36>
  411bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411bb6:	2b00      	cmp	r3, #0
  411bb8:	f000 8098 	beq.w	411cec <_dtoa_r+0x69c>
  411bbc:	2d00      	cmp	r5, #0
  411bbe:	dd05      	ble.n	411bcc <_dtoa_r+0x57c>
  411bc0:	4631      	mov	r1, r6
  411bc2:	462a      	mov	r2, r5
  411bc4:	4620      	mov	r0, r4
  411bc6:	f000 ff73 	bl	412ab0 <__lshift>
  411bca:	4606      	mov	r6, r0
  411bcc:	f1b8 0f00 	cmp.w	r8, #0
  411bd0:	f040 8336 	bne.w	412240 <_dtoa_r+0xbf0>
  411bd4:	46b0      	mov	r8, r6
  411bd6:	9b08      	ldr	r3, [sp, #32]
  411bd8:	9a07      	ldr	r2, [sp, #28]
  411bda:	3b01      	subs	r3, #1
  411bdc:	18d3      	adds	r3, r2, r3
  411bde:	9308      	str	r3, [sp, #32]
  411be0:	9b00      	ldr	r3, [sp, #0]
  411be2:	f003 0301 	and.w	r3, r3, #1
  411be6:	9309      	str	r3, [sp, #36]	; 0x24
  411be8:	4617      	mov	r7, r2
  411bea:	4649      	mov	r1, r9
  411bec:	4650      	mov	r0, sl
  411bee:	f7ff fc9b 	bl	411528 <quorem>
  411bf2:	4631      	mov	r1, r6
  411bf4:	4605      	mov	r5, r0
  411bf6:	4650      	mov	r0, sl
  411bf8:	f000 ffac 	bl	412b54 <__mcmp>
  411bfc:	4642      	mov	r2, r8
  411bfe:	4649      	mov	r1, r9
  411c00:	4683      	mov	fp, r0
  411c02:	4620      	mov	r0, r4
  411c04:	f000 ffc2 	bl	412b8c <__mdiff>
  411c08:	f105 0230 	add.w	r2, r5, #48	; 0x30
  411c0c:	9200      	str	r2, [sp, #0]
  411c0e:	68c2      	ldr	r2, [r0, #12]
  411c10:	4601      	mov	r1, r0
  411c12:	2a00      	cmp	r2, #0
  411c14:	f040 8232 	bne.w	41207c <_dtoa_r+0xa2c>
  411c18:	9006      	str	r0, [sp, #24]
  411c1a:	4650      	mov	r0, sl
  411c1c:	f000 ff9a 	bl	412b54 <__mcmp>
  411c20:	9b06      	ldr	r3, [sp, #24]
  411c22:	9005      	str	r0, [sp, #20]
  411c24:	4619      	mov	r1, r3
  411c26:	4620      	mov	r0, r4
  411c28:	f000 fdbc 	bl	4127a4 <_Bfree>
  411c2c:	9a05      	ldr	r2, [sp, #20]
  411c2e:	b932      	cbnz	r2, 411c3e <_dtoa_r+0x5ee>
  411c30:	9b02      	ldr	r3, [sp, #8]
  411c32:	b923      	cbnz	r3, 411c3e <_dtoa_r+0x5ee>
  411c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411c36:	2b00      	cmp	r3, #0
  411c38:	f000 83de 	beq.w	4123f8 <_dtoa_r+0xda8>
  411c3c:	9a02      	ldr	r2, [sp, #8]
  411c3e:	f1bb 0f00 	cmp.w	fp, #0
  411c42:	f2c0 82a2 	blt.w	41218a <_dtoa_r+0xb3a>
  411c46:	d105      	bne.n	411c54 <_dtoa_r+0x604>
  411c48:	9b02      	ldr	r3, [sp, #8]
  411c4a:	b91b      	cbnz	r3, 411c54 <_dtoa_r+0x604>
  411c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411c4e:	2b00      	cmp	r3, #0
  411c50:	f000 829b 	beq.w	41218a <_dtoa_r+0xb3a>
  411c54:	2a00      	cmp	r2, #0
  411c56:	f300 8307 	bgt.w	412268 <_dtoa_r+0xc18>
  411c5a:	f89d 3000 	ldrb.w	r3, [sp]
  411c5e:	703b      	strb	r3, [r7, #0]
  411c60:	9b08      	ldr	r3, [sp, #32]
  411c62:	f107 0b01 	add.w	fp, r7, #1
  411c66:	429f      	cmp	r7, r3
  411c68:	465d      	mov	r5, fp
  411c6a:	f000 8308 	beq.w	41227e <_dtoa_r+0xc2e>
  411c6e:	4651      	mov	r1, sl
  411c70:	2300      	movs	r3, #0
  411c72:	220a      	movs	r2, #10
  411c74:	4620      	mov	r0, r4
  411c76:	f000 fd9f 	bl	4127b8 <__multadd>
  411c7a:	4546      	cmp	r6, r8
  411c7c:	4682      	mov	sl, r0
  411c7e:	4631      	mov	r1, r6
  411c80:	f04f 0300 	mov.w	r3, #0
  411c84:	f04f 020a 	mov.w	r2, #10
  411c88:	4620      	mov	r0, r4
  411c8a:	f000 81f1 	beq.w	412070 <_dtoa_r+0xa20>
  411c8e:	f000 fd93 	bl	4127b8 <__multadd>
  411c92:	4641      	mov	r1, r8
  411c94:	4606      	mov	r6, r0
  411c96:	2300      	movs	r3, #0
  411c98:	220a      	movs	r2, #10
  411c9a:	4620      	mov	r0, r4
  411c9c:	f000 fd8c 	bl	4127b8 <__multadd>
  411ca0:	465f      	mov	r7, fp
  411ca2:	4680      	mov	r8, r0
  411ca4:	e7a1      	b.n	411bea <_dtoa_r+0x59a>
  411ca6:	201c      	movs	r0, #28
  411ca8:	9b06      	ldr	r3, [sp, #24]
  411caa:	4403      	add	r3, r0
  411cac:	9306      	str	r3, [sp, #24]
  411cae:	9b05      	ldr	r3, [sp, #20]
  411cb0:	4403      	add	r3, r0
  411cb2:	4405      	add	r5, r0
  411cb4:	9305      	str	r3, [sp, #20]
  411cb6:	e763      	b.n	411b80 <_dtoa_r+0x530>
  411cb8:	4649      	mov	r1, r9
  411cba:	4650      	mov	r0, sl
  411cbc:	f000 ff4a 	bl	412b54 <__mcmp>
  411cc0:	2800      	cmp	r0, #0
  411cc2:	f6bf af73 	bge.w	411bac <_dtoa_r+0x55c>
  411cc6:	9f04      	ldr	r7, [sp, #16]
  411cc8:	4651      	mov	r1, sl
  411cca:	2300      	movs	r3, #0
  411ccc:	220a      	movs	r2, #10
  411cce:	4620      	mov	r0, r4
  411cd0:	3f01      	subs	r7, #1
  411cd2:	9704      	str	r7, [sp, #16]
  411cd4:	f000 fd70 	bl	4127b8 <__multadd>
  411cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411cda:	4682      	mov	sl, r0
  411cdc:	2b00      	cmp	r3, #0
  411cde:	f040 83a7 	bne.w	412430 <_dtoa_r+0xde0>
  411ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411ce4:	2b00      	cmp	r3, #0
  411ce6:	f340 83b0 	ble.w	41244a <_dtoa_r+0xdfa>
  411cea:	9308      	str	r3, [sp, #32]
  411cec:	f8dd b01c 	ldr.w	fp, [sp, #28]
  411cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  411cf4:	465d      	mov	r5, fp
  411cf6:	e002      	b.n	411cfe <_dtoa_r+0x6ae>
  411cf8:	f000 fd5e 	bl	4127b8 <__multadd>
  411cfc:	4682      	mov	sl, r0
  411cfe:	4649      	mov	r1, r9
  411d00:	4650      	mov	r0, sl
  411d02:	f7ff fc11 	bl	411528 <quorem>
  411d06:	f100 0730 	add.w	r7, r0, #48	; 0x30
  411d0a:	f805 7b01 	strb.w	r7, [r5], #1
  411d0e:	eba5 030b 	sub.w	r3, r5, fp
  411d12:	4543      	cmp	r3, r8
  411d14:	f04f 020a 	mov.w	r2, #10
  411d18:	f04f 0300 	mov.w	r3, #0
  411d1c:	4651      	mov	r1, sl
  411d1e:	4620      	mov	r0, r4
  411d20:	dbea      	blt.n	411cf8 <_dtoa_r+0x6a8>
  411d22:	9b07      	ldr	r3, [sp, #28]
  411d24:	9a08      	ldr	r2, [sp, #32]
  411d26:	9700      	str	r7, [sp, #0]
  411d28:	2a01      	cmp	r2, #1
  411d2a:	bfac      	ite	ge
  411d2c:	189b      	addge	r3, r3, r2
  411d2e:	3301      	addlt	r3, #1
  411d30:	461d      	mov	r5, r3
  411d32:	f04f 0b00 	mov.w	fp, #0
  411d36:	4651      	mov	r1, sl
  411d38:	2201      	movs	r2, #1
  411d3a:	4620      	mov	r0, r4
  411d3c:	f000 feb8 	bl	412ab0 <__lshift>
  411d40:	4649      	mov	r1, r9
  411d42:	4682      	mov	sl, r0
  411d44:	f000 ff06 	bl	412b54 <__mcmp>
  411d48:	2800      	cmp	r0, #0
  411d4a:	f340 823a 	ble.w	4121c2 <_dtoa_r+0xb72>
  411d4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  411d52:	9907      	ldr	r1, [sp, #28]
  411d54:	1e6b      	subs	r3, r5, #1
  411d56:	e004      	b.n	411d62 <_dtoa_r+0x712>
  411d58:	428b      	cmp	r3, r1
  411d5a:	f000 81af 	beq.w	4120bc <_dtoa_r+0xa6c>
  411d5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  411d62:	2a39      	cmp	r2, #57	; 0x39
  411d64:	f103 0501 	add.w	r5, r3, #1
  411d68:	d0f6      	beq.n	411d58 <_dtoa_r+0x708>
  411d6a:	3201      	adds	r2, #1
  411d6c:	701a      	strb	r2, [r3, #0]
  411d6e:	4649      	mov	r1, r9
  411d70:	4620      	mov	r0, r4
  411d72:	f000 fd17 	bl	4127a4 <_Bfree>
  411d76:	2e00      	cmp	r6, #0
  411d78:	f43f ae36 	beq.w	4119e8 <_dtoa_r+0x398>
  411d7c:	f1bb 0f00 	cmp.w	fp, #0
  411d80:	d005      	beq.n	411d8e <_dtoa_r+0x73e>
  411d82:	45b3      	cmp	fp, r6
  411d84:	d003      	beq.n	411d8e <_dtoa_r+0x73e>
  411d86:	4659      	mov	r1, fp
  411d88:	4620      	mov	r0, r4
  411d8a:	f000 fd0b 	bl	4127a4 <_Bfree>
  411d8e:	4631      	mov	r1, r6
  411d90:	4620      	mov	r0, r4
  411d92:	f000 fd07 	bl	4127a4 <_Bfree>
  411d96:	e627      	b.n	4119e8 <_dtoa_r+0x398>
  411d98:	2300      	movs	r3, #0
  411d9a:	9309      	str	r3, [sp, #36]	; 0x24
  411d9c:	9b04      	ldr	r3, [sp, #16]
  411d9e:	445b      	add	r3, fp
  411da0:	930d      	str	r3, [sp, #52]	; 0x34
  411da2:	3301      	adds	r3, #1
  411da4:	2b01      	cmp	r3, #1
  411da6:	461e      	mov	r6, r3
  411da8:	461d      	mov	r5, r3
  411daa:	9308      	str	r3, [sp, #32]
  411dac:	bfb8      	it	lt
  411dae:	2601      	movlt	r6, #1
  411db0:	2100      	movs	r1, #0
  411db2:	2e17      	cmp	r6, #23
  411db4:	6461      	str	r1, [r4, #68]	; 0x44
  411db6:	d90a      	bls.n	411dce <_dtoa_r+0x77e>
  411db8:	2201      	movs	r2, #1
  411dba:	2304      	movs	r3, #4
  411dbc:	005b      	lsls	r3, r3, #1
  411dbe:	f103 0014 	add.w	r0, r3, #20
  411dc2:	4286      	cmp	r6, r0
  411dc4:	4611      	mov	r1, r2
  411dc6:	f102 0201 	add.w	r2, r2, #1
  411dca:	d2f7      	bcs.n	411dbc <_dtoa_r+0x76c>
  411dcc:	6461      	str	r1, [r4, #68]	; 0x44
  411dce:	4620      	mov	r0, r4
  411dd0:	f000 fcc2 	bl	412758 <_Balloc>
  411dd4:	2d0e      	cmp	r5, #14
  411dd6:	9007      	str	r0, [sp, #28]
  411dd8:	6420      	str	r0, [r4, #64]	; 0x40
  411dda:	f63f ad44 	bhi.w	411866 <_dtoa_r+0x216>
  411dde:	2f00      	cmp	r7, #0
  411de0:	f43f ad41 	beq.w	411866 <_dtoa_r+0x216>
  411de4:	9904      	ldr	r1, [sp, #16]
  411de6:	2900      	cmp	r1, #0
  411de8:	ed9d 7b00 	vldr	d7, [sp]
  411dec:	f340 81f6 	ble.w	4121dc <_dtoa_r+0xb8c>
  411df0:	4bb9      	ldr	r3, [pc, #740]	; (4120d8 <_dtoa_r+0xa88>)
  411df2:	f001 020f 	and.w	r2, r1, #15
  411df6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  411dfa:	110d      	asrs	r5, r1, #4
  411dfc:	e9d3 6700 	ldrd	r6, r7, [r3]
  411e00:	06eb      	lsls	r3, r5, #27
  411e02:	f140 81ad 	bpl.w	412160 <_dtoa_r+0xb10>
  411e06:	4bb5      	ldr	r3, [pc, #724]	; (4120dc <_dtoa_r+0xa8c>)
  411e08:	ec51 0b17 	vmov	r0, r1, d7
  411e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  411e10:	f7fc fd0c 	bl	40e82c <__aeabi_ddiv>
  411e14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  411e18:	f005 050f 	and.w	r5, r5, #15
  411e1c:	f04f 0903 	mov.w	r9, #3
  411e20:	b18d      	cbz	r5, 411e46 <_dtoa_r+0x7f6>
  411e22:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 4120dc <_dtoa_r+0xa8c>
  411e26:	07e8      	lsls	r0, r5, #31
  411e28:	d509      	bpl.n	411e3e <_dtoa_r+0x7ee>
  411e2a:	4630      	mov	r0, r6
  411e2c:	4639      	mov	r1, r7
  411e2e:	e9d8 2300 	ldrd	r2, r3, [r8]
  411e32:	f7fc fbd1 	bl	40e5d8 <__aeabi_dmul>
  411e36:	f109 0901 	add.w	r9, r9, #1
  411e3a:	4606      	mov	r6, r0
  411e3c:	460f      	mov	r7, r1
  411e3e:	106d      	asrs	r5, r5, #1
  411e40:	f108 0808 	add.w	r8, r8, #8
  411e44:	d1ef      	bne.n	411e26 <_dtoa_r+0x7d6>
  411e46:	463b      	mov	r3, r7
  411e48:	4632      	mov	r2, r6
  411e4a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  411e4e:	f7fc fced 	bl	40e82c <__aeabi_ddiv>
  411e52:	4607      	mov	r7, r0
  411e54:	4688      	mov	r8, r1
  411e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  411e58:	b143      	cbz	r3, 411e6c <_dtoa_r+0x81c>
  411e5a:	2200      	movs	r2, #0
  411e5c:	4ba0      	ldr	r3, [pc, #640]	; (4120e0 <_dtoa_r+0xa90>)
  411e5e:	4638      	mov	r0, r7
  411e60:	4641      	mov	r1, r8
  411e62:	f7fc fe2b 	bl	40eabc <__aeabi_dcmplt>
  411e66:	2800      	cmp	r0, #0
  411e68:	f040 8273 	bne.w	412352 <_dtoa_r+0xd02>
  411e6c:	4648      	mov	r0, r9
  411e6e:	f7fc fb4d 	bl	40e50c <__aeabi_i2d>
  411e72:	463a      	mov	r2, r7
  411e74:	4643      	mov	r3, r8
  411e76:	f7fc fbaf 	bl	40e5d8 <__aeabi_dmul>
  411e7a:	4b9a      	ldr	r3, [pc, #616]	; (4120e4 <_dtoa_r+0xa94>)
  411e7c:	2200      	movs	r2, #0
  411e7e:	f7fc f9f9 	bl	40e274 <__adddf3>
  411e82:	9b08      	ldr	r3, [sp, #32]
  411e84:	4605      	mov	r5, r0
  411e86:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  411e8a:	2b00      	cmp	r3, #0
  411e8c:	f000 8140 	beq.w	412110 <_dtoa_r+0xac0>
  411e90:	9b04      	ldr	r3, [sp, #16]
  411e92:	f8dd 9020 	ldr.w	r9, [sp, #32]
  411e96:	9311      	str	r3, [sp, #68]	; 0x44
  411e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411e9a:	2b00      	cmp	r3, #0
  411e9c:	f000 81f6 	beq.w	41228c <_dtoa_r+0xc3c>
  411ea0:	4b8d      	ldr	r3, [pc, #564]	; (4120d8 <_dtoa_r+0xa88>)
  411ea2:	4991      	ldr	r1, [pc, #580]	; (4120e8 <_dtoa_r+0xa98>)
  411ea4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  411ea8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  411eac:	2000      	movs	r0, #0
  411eae:	f7fc fcbd 	bl	40e82c <__aeabi_ddiv>
  411eb2:	462a      	mov	r2, r5
  411eb4:	4633      	mov	r3, r6
  411eb6:	f7fc f9db 	bl	40e270 <__aeabi_dsub>
  411eba:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  411ebe:	4641      	mov	r1, r8
  411ec0:	4638      	mov	r0, r7
  411ec2:	f7fc fe39 	bl	40eb38 <__aeabi_d2iz>
  411ec6:	4605      	mov	r5, r0
  411ec8:	f7fc fb20 	bl	40e50c <__aeabi_i2d>
  411ecc:	4602      	mov	r2, r0
  411ece:	460b      	mov	r3, r1
  411ed0:	4638      	mov	r0, r7
  411ed2:	4641      	mov	r1, r8
  411ed4:	f7fc f9cc 	bl	40e270 <__aeabi_dsub>
  411ed8:	3530      	adds	r5, #48	; 0x30
  411eda:	fa5f f885 	uxtb.w	r8, r5
  411ede:	9d07      	ldr	r5, [sp, #28]
  411ee0:	4606      	mov	r6, r0
  411ee2:	460f      	mov	r7, r1
  411ee4:	f885 8000 	strb.w	r8, [r5]
  411ee8:	4602      	mov	r2, r0
  411eea:	460b      	mov	r3, r1
  411eec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  411ef0:	3501      	adds	r5, #1
  411ef2:	f7fc fe01 	bl	40eaf8 <__aeabi_dcmpgt>
  411ef6:	2800      	cmp	r0, #0
  411ef8:	d156      	bne.n	411fa8 <_dtoa_r+0x958>
  411efa:	4632      	mov	r2, r6
  411efc:	463b      	mov	r3, r7
  411efe:	2000      	movs	r0, #0
  411f00:	4977      	ldr	r1, [pc, #476]	; (4120e0 <_dtoa_r+0xa90>)
  411f02:	f7fc f9b5 	bl	40e270 <__aeabi_dsub>
  411f06:	4602      	mov	r2, r0
  411f08:	460b      	mov	r3, r1
  411f0a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  411f0e:	f7fc fdf3 	bl	40eaf8 <__aeabi_dcmpgt>
  411f12:	2800      	cmp	r0, #0
  411f14:	f040 8262 	bne.w	4123dc <_dtoa_r+0xd8c>
  411f18:	f1b9 0f01 	cmp.w	r9, #1
  411f1c:	f43f aca3 	beq.w	411866 <_dtoa_r+0x216>
  411f20:	9b07      	ldr	r3, [sp, #28]
  411f22:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  411f26:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  411f2a:	4499      	add	r9, r3
  411f2c:	46a0      	mov	r8, r4
  411f2e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  411f32:	e00d      	b.n	411f50 <_dtoa_r+0x900>
  411f34:	2000      	movs	r0, #0
  411f36:	496a      	ldr	r1, [pc, #424]	; (4120e0 <_dtoa_r+0xa90>)
  411f38:	f7fc f99a 	bl	40e270 <__aeabi_dsub>
  411f3c:	4652      	mov	r2, sl
  411f3e:	465b      	mov	r3, fp
  411f40:	f7fc fdbc 	bl	40eabc <__aeabi_dcmplt>
  411f44:	2800      	cmp	r0, #0
  411f46:	f040 8244 	bne.w	4123d2 <_dtoa_r+0xd82>
  411f4a:	454d      	cmp	r5, r9
  411f4c:	f000 824a 	beq.w	4123e4 <_dtoa_r+0xd94>
  411f50:	4650      	mov	r0, sl
  411f52:	4659      	mov	r1, fp
  411f54:	2200      	movs	r2, #0
  411f56:	4b65      	ldr	r3, [pc, #404]	; (4120ec <_dtoa_r+0xa9c>)
  411f58:	f7fc fb3e 	bl	40e5d8 <__aeabi_dmul>
  411f5c:	2200      	movs	r2, #0
  411f5e:	4b63      	ldr	r3, [pc, #396]	; (4120ec <_dtoa_r+0xa9c>)
  411f60:	4682      	mov	sl, r0
  411f62:	468b      	mov	fp, r1
  411f64:	4630      	mov	r0, r6
  411f66:	4639      	mov	r1, r7
  411f68:	f7fc fb36 	bl	40e5d8 <__aeabi_dmul>
  411f6c:	460f      	mov	r7, r1
  411f6e:	4606      	mov	r6, r0
  411f70:	f7fc fde2 	bl	40eb38 <__aeabi_d2iz>
  411f74:	4604      	mov	r4, r0
  411f76:	f7fc fac9 	bl	40e50c <__aeabi_i2d>
  411f7a:	4602      	mov	r2, r0
  411f7c:	460b      	mov	r3, r1
  411f7e:	4630      	mov	r0, r6
  411f80:	4639      	mov	r1, r7
  411f82:	f7fc f975 	bl	40e270 <__aeabi_dsub>
  411f86:	3430      	adds	r4, #48	; 0x30
  411f88:	b2e4      	uxtb	r4, r4
  411f8a:	4652      	mov	r2, sl
  411f8c:	465b      	mov	r3, fp
  411f8e:	f805 4b01 	strb.w	r4, [r5], #1
  411f92:	4606      	mov	r6, r0
  411f94:	460f      	mov	r7, r1
  411f96:	f7fc fd91 	bl	40eabc <__aeabi_dcmplt>
  411f9a:	4632      	mov	r2, r6
  411f9c:	463b      	mov	r3, r7
  411f9e:	2800      	cmp	r0, #0
  411fa0:	d0c8      	beq.n	411f34 <_dtoa_r+0x8e4>
  411fa2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
  411fa6:	4644      	mov	r4, r8
  411fa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  411faa:	9304      	str	r3, [sp, #16]
  411fac:	e51c      	b.n	4119e8 <_dtoa_r+0x398>
  411fae:	2300      	movs	r3, #0
  411fb0:	9309      	str	r3, [sp, #36]	; 0x24
  411fb2:	f1bb 0f00 	cmp.w	fp, #0
  411fb6:	f340 80da 	ble.w	41216e <_dtoa_r+0xb1e>
  411fba:	465e      	mov	r6, fp
  411fbc:	465d      	mov	r5, fp
  411fbe:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  411fc2:	f8cd b020 	str.w	fp, [sp, #32]
  411fc6:	e6f3      	b.n	411db0 <_dtoa_r+0x760>
  411fc8:	2301      	movs	r3, #1
  411fca:	9309      	str	r3, [sp, #36]	; 0x24
  411fcc:	e7f1      	b.n	411fb2 <_dtoa_r+0x962>
  411fce:	9b00      	ldr	r3, [sp, #0]
  411fd0:	2b00      	cmp	r3, #0
  411fd2:	f47f ada1 	bne.w	411b18 <_dtoa_r+0x4c8>
  411fd6:	e9dd 1200 	ldrd	r1, r2, [sp]
  411fda:	f3c2 0313 	ubfx	r3, r2, #0, #20
  411fde:	2b00      	cmp	r3, #0
  411fe0:	f47f adb4 	bne.w	411b4c <_dtoa_r+0x4fc>
  411fe4:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
  411fe8:	0d3f      	lsrs	r7, r7, #20
  411fea:	053f      	lsls	r7, r7, #20
  411fec:	2f00      	cmp	r7, #0
  411fee:	f000 8200 	beq.w	4123f2 <_dtoa_r+0xda2>
  411ff2:	9b06      	ldr	r3, [sp, #24]
  411ff4:	3301      	adds	r3, #1
  411ff6:	9306      	str	r3, [sp, #24]
  411ff8:	9b05      	ldr	r3, [sp, #20]
  411ffa:	3301      	adds	r3, #1
  411ffc:	9305      	str	r3, [sp, #20]
  411ffe:	f04f 0801 	mov.w	r8, #1
  412002:	e5a5      	b.n	411b50 <_dtoa_r+0x500>
  412004:	9b08      	ldr	r3, [sp, #32]
  412006:	2b00      	cmp	r3, #0
  412008:	f73f ac3e 	bgt.w	411888 <_dtoa_r+0x238>
  41200c:	f040 8099 	bne.w	412142 <_dtoa_r+0xaf2>
  412010:	4649      	mov	r1, r9
  412012:	2200      	movs	r2, #0
  412014:	4b36      	ldr	r3, [pc, #216]	; (4120f0 <_dtoa_r+0xaa0>)
  412016:	4640      	mov	r0, r8
  412018:	f7fc fade 	bl	40e5d8 <__aeabi_dmul>
  41201c:	e9dd 2300 	ldrd	r2, r3, [sp]
  412020:	f7fc fd60 	bl	40eae4 <__aeabi_dcmpge>
  412024:	f8dd 9020 	ldr.w	r9, [sp, #32]
  412028:	464e      	mov	r6, r9
  41202a:	2800      	cmp	r0, #0
  41202c:	d03e      	beq.n	4120ac <_dtoa_r+0xa5c>
  41202e:	ea6f 030b 	mvn.w	r3, fp
  412032:	9d07      	ldr	r5, [sp, #28]
  412034:	9304      	str	r3, [sp, #16]
  412036:	4649      	mov	r1, r9
  412038:	4620      	mov	r0, r4
  41203a:	f000 fbb3 	bl	4127a4 <_Bfree>
  41203e:	2e00      	cmp	r6, #0
  412040:	f43f acd2 	beq.w	4119e8 <_dtoa_r+0x398>
  412044:	e6a3      	b.n	411d8e <_dtoa_r+0x73e>
  412046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  412048:	4651      	mov	r1, sl
  41204a:	4620      	mov	r0, r4
  41204c:	f000 fce0 	bl	412a10 <__pow5mult>
  412050:	4682      	mov	sl, r0
  412052:	e54f      	b.n	411af4 <_dtoa_r+0x4a4>
  412054:	9a10      	ldr	r2, [sp, #64]	; 0x40
  412056:	2a00      	cmp	r2, #0
  412058:	f000 816f 	beq.w	41233a <_dtoa_r+0xcea>
  41205c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  412060:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  412062:	9d06      	ldr	r5, [sp, #24]
  412064:	e4e7      	b.n	411a36 <_dtoa_r+0x3e6>
  412066:	9b00      	ldr	r3, [sp, #0]
  412068:	2b00      	cmp	r3, #0
  41206a:	f47f ad6f 	bne.w	411b4c <_dtoa_r+0x4fc>
  41206e:	e7b2      	b.n	411fd6 <_dtoa_r+0x986>
  412070:	f000 fba2 	bl	4127b8 <__multadd>
  412074:	465f      	mov	r7, fp
  412076:	4606      	mov	r6, r0
  412078:	4680      	mov	r8, r0
  41207a:	e5b6      	b.n	411bea <_dtoa_r+0x59a>
  41207c:	4620      	mov	r0, r4
  41207e:	f000 fb91 	bl	4127a4 <_Bfree>
  412082:	2201      	movs	r2, #1
  412084:	e5db      	b.n	411c3e <_dtoa_r+0x5ee>
  412086:	9b02      	ldr	r3, [sp, #8]
  412088:	2b02      	cmp	r3, #2
  41208a:	f77f ad93 	ble.w	411bb4 <_dtoa_r+0x564>
  41208e:	9b08      	ldr	r3, [sp, #32]
  412090:	2b00      	cmp	r3, #0
  412092:	d1cc      	bne.n	41202e <_dtoa_r+0x9de>
  412094:	4649      	mov	r1, r9
  412096:	2205      	movs	r2, #5
  412098:	4620      	mov	r0, r4
  41209a:	f000 fb8d 	bl	4127b8 <__multadd>
  41209e:	4601      	mov	r1, r0
  4120a0:	4681      	mov	r9, r0
  4120a2:	4650      	mov	r0, sl
  4120a4:	f000 fd56 	bl	412b54 <__mcmp>
  4120a8:	2800      	cmp	r0, #0
  4120aa:	ddc0      	ble.n	41202e <_dtoa_r+0x9de>
  4120ac:	9a04      	ldr	r2, [sp, #16]
  4120ae:	9907      	ldr	r1, [sp, #28]
  4120b0:	2331      	movs	r3, #49	; 0x31
  4120b2:	3201      	adds	r2, #1
  4120b4:	9204      	str	r2, [sp, #16]
  4120b6:	700b      	strb	r3, [r1, #0]
  4120b8:	1c4d      	adds	r5, r1, #1
  4120ba:	e7bc      	b.n	412036 <_dtoa_r+0x9e6>
  4120bc:	9a04      	ldr	r2, [sp, #16]
  4120be:	3201      	adds	r2, #1
  4120c0:	9204      	str	r2, [sp, #16]
  4120c2:	9a07      	ldr	r2, [sp, #28]
  4120c4:	2331      	movs	r3, #49	; 0x31
  4120c6:	7013      	strb	r3, [r2, #0]
  4120c8:	e651      	b.n	411d6e <_dtoa_r+0x71e>
  4120ca:	2301      	movs	r3, #1
  4120cc:	9309      	str	r3, [sp, #36]	; 0x24
  4120ce:	e665      	b.n	411d9c <_dtoa_r+0x74c>
  4120d0:	f8dd a000 	ldr.w	sl, [sp]
  4120d4:	9c02      	ldr	r4, [sp, #8]
  4120d6:	e487      	b.n	4119e8 <_dtoa_r+0x398>
  4120d8:	004139c0 	.word	0x004139c0
  4120dc:	00413998 	.word	0x00413998
  4120e0:	3ff00000 	.word	0x3ff00000
  4120e4:	401c0000 	.word	0x401c0000
  4120e8:	3fe00000 	.word	0x3fe00000
  4120ec:	40240000 	.word	0x40240000
  4120f0:	40140000 	.word	0x40140000
  4120f4:	4648      	mov	r0, r9
  4120f6:	f7fc fa09 	bl	40e50c <__aeabi_i2d>
  4120fa:	463a      	mov	r2, r7
  4120fc:	4643      	mov	r3, r8
  4120fe:	f7fc fa6b 	bl	40e5d8 <__aeabi_dmul>
  412102:	2200      	movs	r2, #0
  412104:	4bc4      	ldr	r3, [pc, #784]	; (412418 <_dtoa_r+0xdc8>)
  412106:	f7fc f8b5 	bl	40e274 <__adddf3>
  41210a:	4605      	mov	r5, r0
  41210c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  412110:	4641      	mov	r1, r8
  412112:	2200      	movs	r2, #0
  412114:	4bc1      	ldr	r3, [pc, #772]	; (41241c <_dtoa_r+0xdcc>)
  412116:	4638      	mov	r0, r7
  412118:	f7fc f8aa 	bl	40e270 <__aeabi_dsub>
  41211c:	462a      	mov	r2, r5
  41211e:	4633      	mov	r3, r6
  412120:	4680      	mov	r8, r0
  412122:	4689      	mov	r9, r1
  412124:	f7fc fce8 	bl	40eaf8 <__aeabi_dcmpgt>
  412128:	2800      	cmp	r0, #0
  41212a:	f040 80ab 	bne.w	412284 <_dtoa_r+0xc34>
  41212e:	462a      	mov	r2, r5
  412130:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  412134:	4640      	mov	r0, r8
  412136:	4649      	mov	r1, r9
  412138:	f7fc fcc0 	bl	40eabc <__aeabi_dcmplt>
  41213c:	2800      	cmp	r0, #0
  41213e:	f43f ab92 	beq.w	411866 <_dtoa_r+0x216>
  412142:	f04f 0900 	mov.w	r9, #0
  412146:	464e      	mov	r6, r9
  412148:	e771      	b.n	41202e <_dtoa_r+0x9de>
  41214a:	9807      	ldr	r0, [sp, #28]
  41214c:	f7ff bab8 	b.w	4116c0 <_dtoa_r+0x70>
  412150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  412154:	970a      	str	r7, [sp, #40]	; 0x28
  412156:	1afb      	subs	r3, r7, r3
  412158:	441a      	add	r2, r3
  41215a:	920b      	str	r2, [sp, #44]	; 0x2c
  41215c:	2700      	movs	r7, #0
  41215e:	e464      	b.n	411a2a <_dtoa_r+0x3da>
  412160:	ed9d 7b00 	vldr	d7, [sp]
  412164:	f04f 0902 	mov.w	r9, #2
  412168:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  41216c:	e658      	b.n	411e20 <_dtoa_r+0x7d0>
  41216e:	2100      	movs	r1, #0
  412170:	6461      	str	r1, [r4, #68]	; 0x44
  412172:	4620      	mov	r0, r4
  412174:	f000 faf0 	bl	412758 <_Balloc>
  412178:	f04f 0b01 	mov.w	fp, #1
  41217c:	9007      	str	r0, [sp, #28]
  41217e:	6420      	str	r0, [r4, #64]	; 0x40
  412180:	f8cd b020 	str.w	fp, [sp, #32]
  412184:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  412188:	e629      	b.n	411dde <_dtoa_r+0x78e>
  41218a:	2a00      	cmp	r2, #0
  41218c:	dd12      	ble.n	4121b4 <_dtoa_r+0xb64>
  41218e:	4651      	mov	r1, sl
  412190:	2201      	movs	r2, #1
  412192:	4620      	mov	r0, r4
  412194:	f000 fc8c 	bl	412ab0 <__lshift>
  412198:	4649      	mov	r1, r9
  41219a:	4682      	mov	sl, r0
  41219c:	f000 fcda 	bl	412b54 <__mcmp>
  4121a0:	2800      	cmp	r0, #0
  4121a2:	f340 8131 	ble.w	412408 <_dtoa_r+0xdb8>
  4121a6:	9b00      	ldr	r3, [sp, #0]
  4121a8:	2b39      	cmp	r3, #57	; 0x39
  4121aa:	f000 80f7 	beq.w	41239c <_dtoa_r+0xd4c>
  4121ae:	f105 0331 	add.w	r3, r5, #49	; 0x31
  4121b2:	9300      	str	r3, [sp, #0]
  4121b4:	f89d 3000 	ldrb.w	r3, [sp]
  4121b8:	703b      	strb	r3, [r7, #0]
  4121ba:	46b3      	mov	fp, r6
  4121bc:	1c7d      	adds	r5, r7, #1
  4121be:	4646      	mov	r6, r8
  4121c0:	e5d5      	b.n	411d6e <_dtoa_r+0x71e>
  4121c2:	d104      	bne.n	4121ce <_dtoa_r+0xb7e>
  4121c4:	9b00      	ldr	r3, [sp, #0]
  4121c6:	07db      	lsls	r3, r3, #31
  4121c8:	d501      	bpl.n	4121ce <_dtoa_r+0xb7e>
  4121ca:	e5c0      	b.n	411d4e <_dtoa_r+0x6fe>
  4121cc:	4615      	mov	r5, r2
  4121ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4121d2:	2b30      	cmp	r3, #48	; 0x30
  4121d4:	f105 32ff 	add.w	r2, r5, #4294967295
  4121d8:	d0f8      	beq.n	4121cc <_dtoa_r+0xb7c>
  4121da:	e5c8      	b.n	411d6e <_dtoa_r+0x71e>
  4121dc:	f000 80b4 	beq.w	412348 <_dtoa_r+0xcf8>
  4121e0:	9b04      	ldr	r3, [sp, #16]
  4121e2:	425d      	negs	r5, r3
  4121e4:	4b8e      	ldr	r3, [pc, #568]	; (412420 <_dtoa_r+0xdd0>)
  4121e6:	f005 020f 	and.w	r2, r5, #15
  4121ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4121ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4121f2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4121f6:	f7fc f9ef 	bl	40e5d8 <__aeabi_dmul>
  4121fa:	112d      	asrs	r5, r5, #4
  4121fc:	4607      	mov	r7, r0
  4121fe:	4688      	mov	r8, r1
  412200:	f000 8128 	beq.w	412454 <_dtoa_r+0xe04>
  412204:	4e87      	ldr	r6, [pc, #540]	; (412424 <_dtoa_r+0xdd4>)
  412206:	f04f 0902 	mov.w	r9, #2
  41220a:	07e9      	lsls	r1, r5, #31
  41220c:	d509      	bpl.n	412222 <_dtoa_r+0xbd2>
  41220e:	4638      	mov	r0, r7
  412210:	4641      	mov	r1, r8
  412212:	e9d6 2300 	ldrd	r2, r3, [r6]
  412216:	f7fc f9df 	bl	40e5d8 <__aeabi_dmul>
  41221a:	f109 0901 	add.w	r9, r9, #1
  41221e:	4607      	mov	r7, r0
  412220:	4688      	mov	r8, r1
  412222:	106d      	asrs	r5, r5, #1
  412224:	f106 0608 	add.w	r6, r6, #8
  412228:	d1ef      	bne.n	41220a <_dtoa_r+0xbba>
  41222a:	e614      	b.n	411e56 <_dtoa_r+0x806>
  41222c:	9907      	ldr	r1, [sp, #28]
  41222e:	2230      	movs	r2, #48	; 0x30
  412230:	700a      	strb	r2, [r1, #0]
  412232:	9a04      	ldr	r2, [sp, #16]
  412234:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  412238:	3201      	adds	r2, #1
  41223a:	9204      	str	r2, [sp, #16]
  41223c:	f7ff bbd0 	b.w	4119e0 <_dtoa_r+0x390>
  412240:	6871      	ldr	r1, [r6, #4]
  412242:	4620      	mov	r0, r4
  412244:	f000 fa88 	bl	412758 <_Balloc>
  412248:	6933      	ldr	r3, [r6, #16]
  41224a:	3302      	adds	r3, #2
  41224c:	009a      	lsls	r2, r3, #2
  41224e:	4605      	mov	r5, r0
  412250:	f106 010c 	add.w	r1, r6, #12
  412254:	300c      	adds	r0, #12
  412256:	f7fd faf3 	bl	40f840 <memcpy>
  41225a:	4629      	mov	r1, r5
  41225c:	2201      	movs	r2, #1
  41225e:	4620      	mov	r0, r4
  412260:	f000 fc26 	bl	412ab0 <__lshift>
  412264:	4680      	mov	r8, r0
  412266:	e4b6      	b.n	411bd6 <_dtoa_r+0x586>
  412268:	9b00      	ldr	r3, [sp, #0]
  41226a:	2b39      	cmp	r3, #57	; 0x39
  41226c:	f000 8096 	beq.w	41239c <_dtoa_r+0xd4c>
  412270:	9b00      	ldr	r3, [sp, #0]
  412272:	3301      	adds	r3, #1
  412274:	46b3      	mov	fp, r6
  412276:	703b      	strb	r3, [r7, #0]
  412278:	1c7d      	adds	r5, r7, #1
  41227a:	4646      	mov	r6, r8
  41227c:	e577      	b.n	411d6e <_dtoa_r+0x71e>
  41227e:	46b3      	mov	fp, r6
  412280:	4646      	mov	r6, r8
  412282:	e558      	b.n	411d36 <_dtoa_r+0x6e6>
  412284:	f04f 0900 	mov.w	r9, #0
  412288:	464e      	mov	r6, r9
  41228a:	e70f      	b.n	4120ac <_dtoa_r+0xa5c>
  41228c:	4964      	ldr	r1, [pc, #400]	; (412420 <_dtoa_r+0xdd0>)
  41228e:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
  412292:	462a      	mov	r2, r5
  412294:	4633      	mov	r3, r6
  412296:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  41229a:	f7fc f99d 	bl	40e5d8 <__aeabi_dmul>
  41229e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  4122a2:	4638      	mov	r0, r7
  4122a4:	4641      	mov	r1, r8
  4122a6:	f7fc fc47 	bl	40eb38 <__aeabi_d2iz>
  4122aa:	4605      	mov	r5, r0
  4122ac:	f7fc f92e 	bl	40e50c <__aeabi_i2d>
  4122b0:	4602      	mov	r2, r0
  4122b2:	460b      	mov	r3, r1
  4122b4:	4638      	mov	r0, r7
  4122b6:	4641      	mov	r1, r8
  4122b8:	f7fb ffda 	bl	40e270 <__aeabi_dsub>
  4122bc:	9a07      	ldr	r2, [sp, #28]
  4122be:	3530      	adds	r5, #48	; 0x30
  4122c0:	f1b9 0f01 	cmp.w	r9, #1
  4122c4:	7015      	strb	r5, [r2, #0]
  4122c6:	4606      	mov	r6, r0
  4122c8:	460f      	mov	r7, r1
  4122ca:	f102 0501 	add.w	r5, r2, #1
  4122ce:	d01c      	beq.n	41230a <_dtoa_r+0xcba>
  4122d0:	9b07      	ldr	r3, [sp, #28]
  4122d2:	4499      	add	r9, r3
  4122d4:	2200      	movs	r2, #0
  4122d6:	4b54      	ldr	r3, [pc, #336]	; (412428 <_dtoa_r+0xdd8>)
  4122d8:	4630      	mov	r0, r6
  4122da:	4639      	mov	r1, r7
  4122dc:	f7fc f97c 	bl	40e5d8 <__aeabi_dmul>
  4122e0:	460f      	mov	r7, r1
  4122e2:	4606      	mov	r6, r0
  4122e4:	f7fc fc28 	bl	40eb38 <__aeabi_d2iz>
  4122e8:	4680      	mov	r8, r0
  4122ea:	f7fc f90f 	bl	40e50c <__aeabi_i2d>
  4122ee:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4122f2:	4602      	mov	r2, r0
  4122f4:	460b      	mov	r3, r1
  4122f6:	4630      	mov	r0, r6
  4122f8:	4639      	mov	r1, r7
  4122fa:	f7fb ffb9 	bl	40e270 <__aeabi_dsub>
  4122fe:	f805 8b01 	strb.w	r8, [r5], #1
  412302:	454d      	cmp	r5, r9
  412304:	4606      	mov	r6, r0
  412306:	460f      	mov	r7, r1
  412308:	d1e4      	bne.n	4122d4 <_dtoa_r+0xc84>
  41230a:	2200      	movs	r2, #0
  41230c:	4b47      	ldr	r3, [pc, #284]	; (41242c <_dtoa_r+0xddc>)
  41230e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  412312:	f7fb ffaf 	bl	40e274 <__adddf3>
  412316:	4632      	mov	r2, r6
  412318:	463b      	mov	r3, r7
  41231a:	f7fc fbcf 	bl	40eabc <__aeabi_dcmplt>
  41231e:	2800      	cmp	r0, #0
  412320:	d042      	beq.n	4123a8 <_dtoa_r+0xd58>
  412322:	9b11      	ldr	r3, [sp, #68]	; 0x44
  412324:	9304      	str	r3, [sp, #16]
  412326:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  41232a:	f7ff bb4c 	b.w	4119c6 <_dtoa_r+0x376>
  41232e:	9b06      	ldr	r3, [sp, #24]
  412330:	9a08      	ldr	r2, [sp, #32]
  412332:	1a9d      	subs	r5, r3, r2
  412334:	2300      	movs	r3, #0
  412336:	f7ff bb7e 	b.w	411a36 <_dtoa_r+0x3e6>
  41233a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41233c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  41233e:	9d06      	ldr	r5, [sp, #24]
  412340:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  412344:	f7ff bb77 	b.w	411a36 <_dtoa_r+0x3e6>
  412348:	e9dd 7800 	ldrd	r7, r8, [sp]
  41234c:	f04f 0902 	mov.w	r9, #2
  412350:	e581      	b.n	411e56 <_dtoa_r+0x806>
  412352:	9b08      	ldr	r3, [sp, #32]
  412354:	2b00      	cmp	r3, #0
  412356:	f43f aecd 	beq.w	4120f4 <_dtoa_r+0xaa4>
  41235a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41235c:	2b00      	cmp	r3, #0
  41235e:	f77f aa82 	ble.w	411866 <_dtoa_r+0x216>
  412362:	2200      	movs	r2, #0
  412364:	4b30      	ldr	r3, [pc, #192]	; (412428 <_dtoa_r+0xdd8>)
  412366:	4638      	mov	r0, r7
  412368:	4641      	mov	r1, r8
  41236a:	f7fc f935 	bl	40e5d8 <__aeabi_dmul>
  41236e:	4607      	mov	r7, r0
  412370:	4688      	mov	r8, r1
  412372:	f109 0001 	add.w	r0, r9, #1
  412376:	f7fc f8c9 	bl	40e50c <__aeabi_i2d>
  41237a:	463a      	mov	r2, r7
  41237c:	4643      	mov	r3, r8
  41237e:	f7fc f92b 	bl	40e5d8 <__aeabi_dmul>
  412382:	2200      	movs	r2, #0
  412384:	4b24      	ldr	r3, [pc, #144]	; (412418 <_dtoa_r+0xdc8>)
  412386:	f7fb ff75 	bl	40e274 <__adddf3>
  41238a:	9a04      	ldr	r2, [sp, #16]
  41238c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  412390:	3a01      	subs	r2, #1
  412392:	4605      	mov	r5, r0
  412394:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  412398:	9211      	str	r2, [sp, #68]	; 0x44
  41239a:	e57d      	b.n	411e98 <_dtoa_r+0x848>
  41239c:	2239      	movs	r2, #57	; 0x39
  41239e:	46b3      	mov	fp, r6
  4123a0:	703a      	strb	r2, [r7, #0]
  4123a2:	4646      	mov	r6, r8
  4123a4:	1c7d      	adds	r5, r7, #1
  4123a6:	e4d4      	b.n	411d52 <_dtoa_r+0x702>
  4123a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4123ac:	2000      	movs	r0, #0
  4123ae:	491f      	ldr	r1, [pc, #124]	; (41242c <_dtoa_r+0xddc>)
  4123b0:	f7fb ff5e 	bl	40e270 <__aeabi_dsub>
  4123b4:	4632      	mov	r2, r6
  4123b6:	463b      	mov	r3, r7
  4123b8:	f7fc fb9e 	bl	40eaf8 <__aeabi_dcmpgt>
  4123bc:	b910      	cbnz	r0, 4123c4 <_dtoa_r+0xd74>
  4123be:	f7ff ba52 	b.w	411866 <_dtoa_r+0x216>
  4123c2:	4615      	mov	r5, r2
  4123c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4123c8:	2b30      	cmp	r3, #48	; 0x30
  4123ca:	f105 32ff 	add.w	r2, r5, #4294967295
  4123ce:	d0f8      	beq.n	4123c2 <_dtoa_r+0xd72>
  4123d0:	e5ea      	b.n	411fa8 <_dtoa_r+0x958>
  4123d2:	4643      	mov	r3, r8
  4123d4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
  4123d8:	46a0      	mov	r8, r4
  4123da:	461c      	mov	r4, r3
  4123dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4123de:	9304      	str	r3, [sp, #16]
  4123e0:	f7ff baf1 	b.w	4119c6 <_dtoa_r+0x376>
  4123e4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
  4123e8:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
  4123ec:	4644      	mov	r4, r8
  4123ee:	f7ff ba3a 	b.w	411866 <_dtoa_r+0x216>
  4123f2:	46b8      	mov	r8, r7
  4123f4:	f7ff bbac 	b.w	411b50 <_dtoa_r+0x500>
  4123f8:	9b00      	ldr	r3, [sp, #0]
  4123fa:	2b39      	cmp	r3, #57	; 0x39
  4123fc:	d0ce      	beq.n	41239c <_dtoa_r+0xd4c>
  4123fe:	f1bb 0f00 	cmp.w	fp, #0
  412402:	f73f aed4 	bgt.w	4121ae <_dtoa_r+0xb5e>
  412406:	e6d5      	b.n	4121b4 <_dtoa_r+0xb64>
  412408:	f47f aed4 	bne.w	4121b4 <_dtoa_r+0xb64>
  41240c:	9b00      	ldr	r3, [sp, #0]
  41240e:	07da      	lsls	r2, r3, #31
  412410:	f57f aed0 	bpl.w	4121b4 <_dtoa_r+0xb64>
  412414:	e6c7      	b.n	4121a6 <_dtoa_r+0xb56>
  412416:	bf00      	nop
  412418:	401c0000 	.word	0x401c0000
  41241c:	40140000 	.word	0x40140000
  412420:	004139c0 	.word	0x004139c0
  412424:	00413998 	.word	0x00413998
  412428:	40240000 	.word	0x40240000
  41242c:	3fe00000 	.word	0x3fe00000
  412430:	4631      	mov	r1, r6
  412432:	2300      	movs	r3, #0
  412434:	220a      	movs	r2, #10
  412436:	4620      	mov	r0, r4
  412438:	f000 f9be 	bl	4127b8 <__multadd>
  41243c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41243e:	2b00      	cmp	r3, #0
  412440:	4606      	mov	r6, r0
  412442:	dd0a      	ble.n	41245a <_dtoa_r+0xe0a>
  412444:	9308      	str	r3, [sp, #32]
  412446:	f7ff bbb9 	b.w	411bbc <_dtoa_r+0x56c>
  41244a:	9b02      	ldr	r3, [sp, #8]
  41244c:	2b02      	cmp	r3, #2
  41244e:	dc22      	bgt.n	412496 <_dtoa_r+0xe46>
  412450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  412452:	e44a      	b.n	411cea <_dtoa_r+0x69a>
  412454:	f04f 0902 	mov.w	r9, #2
  412458:	e4fd      	b.n	411e56 <_dtoa_r+0x806>
  41245a:	9b02      	ldr	r3, [sp, #8]
  41245c:	2b02      	cmp	r3, #2
  41245e:	dc1a      	bgt.n	412496 <_dtoa_r+0xe46>
  412460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  412462:	e7ef      	b.n	412444 <_dtoa_r+0xdf4>
  412464:	2500      	movs	r5, #0
  412466:	6465      	str	r5, [r4, #68]	; 0x44
  412468:	4629      	mov	r1, r5
  41246a:	4620      	mov	r0, r4
  41246c:	f000 f974 	bl	412758 <_Balloc>
  412470:	f04f 33ff 	mov.w	r3, #4294967295
  412474:	9308      	str	r3, [sp, #32]
  412476:	930d      	str	r3, [sp, #52]	; 0x34
  412478:	2301      	movs	r3, #1
  41247a:	9007      	str	r0, [sp, #28]
  41247c:	46ab      	mov	fp, r5
  41247e:	6420      	str	r0, [r4, #64]	; 0x40
  412480:	9309      	str	r3, [sp, #36]	; 0x24
  412482:	f7ff b9f0 	b.w	411866 <_dtoa_r+0x216>
  412486:	f43f ab7b 	beq.w	411b80 <_dtoa_r+0x530>
  41248a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  41248e:	e40b      	b.n	411ca8 <_dtoa_r+0x658>
  412490:	2701      	movs	r7, #1
  412492:	f7ff b9af 	b.w	4117f4 <_dtoa_r+0x1a4>
  412496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  412498:	9308      	str	r3, [sp, #32]
  41249a:	e5f8      	b.n	41208e <_dtoa_r+0xa3e>

0041249c <__libc_fini_array>:
  41249c:	b538      	push	{r3, r4, r5, lr}
  41249e:	4c0a      	ldr	r4, [pc, #40]	; (4124c8 <__libc_fini_array+0x2c>)
  4124a0:	4d0a      	ldr	r5, [pc, #40]	; (4124cc <__libc_fini_array+0x30>)
  4124a2:	1b64      	subs	r4, r4, r5
  4124a4:	10a4      	asrs	r4, r4, #2
  4124a6:	d00a      	beq.n	4124be <__libc_fini_array+0x22>
  4124a8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4124ac:	3b01      	subs	r3, #1
  4124ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4124b2:	3c01      	subs	r4, #1
  4124b4:	f855 3904 	ldr.w	r3, [r5], #-4
  4124b8:	4798      	blx	r3
  4124ba:	2c00      	cmp	r4, #0
  4124bc:	d1f9      	bne.n	4124b2 <__libc_fini_array+0x16>
  4124be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4124c2:	f001 bb7b 	b.w	413bbc <_fini>
  4124c6:	bf00      	nop
  4124c8:	00413bcc 	.word	0x00413bcc
  4124cc:	00413bc8 	.word	0x00413bc8

004124d0 <_malloc_trim_r>:
  4124d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4124d2:	4f24      	ldr	r7, [pc, #144]	; (412564 <_malloc_trim_r+0x94>)
  4124d4:	460c      	mov	r4, r1
  4124d6:	4606      	mov	r6, r0
  4124d8:	f7fd fafe 	bl	40fad8 <__malloc_lock>
  4124dc:	68bb      	ldr	r3, [r7, #8]
  4124de:	685d      	ldr	r5, [r3, #4]
  4124e0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4124e4:	310f      	adds	r1, #15
  4124e6:	f025 0503 	bic.w	r5, r5, #3
  4124ea:	4429      	add	r1, r5
  4124ec:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4124f0:	f021 010f 	bic.w	r1, r1, #15
  4124f4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4124f8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4124fc:	db07      	blt.n	41250e <_malloc_trim_r+0x3e>
  4124fe:	2100      	movs	r1, #0
  412500:	4630      	mov	r0, r6
  412502:	f7fd fc9b 	bl	40fe3c <_sbrk_r>
  412506:	68bb      	ldr	r3, [r7, #8]
  412508:	442b      	add	r3, r5
  41250a:	4298      	cmp	r0, r3
  41250c:	d004      	beq.n	412518 <_malloc_trim_r+0x48>
  41250e:	4630      	mov	r0, r6
  412510:	f7fd fae8 	bl	40fae4 <__malloc_unlock>
  412514:	2000      	movs	r0, #0
  412516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412518:	4261      	negs	r1, r4
  41251a:	4630      	mov	r0, r6
  41251c:	f7fd fc8e 	bl	40fe3c <_sbrk_r>
  412520:	3001      	adds	r0, #1
  412522:	d00d      	beq.n	412540 <_malloc_trim_r+0x70>
  412524:	4b10      	ldr	r3, [pc, #64]	; (412568 <_malloc_trim_r+0x98>)
  412526:	68ba      	ldr	r2, [r7, #8]
  412528:	6819      	ldr	r1, [r3, #0]
  41252a:	1b2d      	subs	r5, r5, r4
  41252c:	f045 0501 	orr.w	r5, r5, #1
  412530:	4630      	mov	r0, r6
  412532:	1b09      	subs	r1, r1, r4
  412534:	6055      	str	r5, [r2, #4]
  412536:	6019      	str	r1, [r3, #0]
  412538:	f7fd fad4 	bl	40fae4 <__malloc_unlock>
  41253c:	2001      	movs	r0, #1
  41253e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412540:	2100      	movs	r1, #0
  412542:	4630      	mov	r0, r6
  412544:	f7fd fc7a 	bl	40fe3c <_sbrk_r>
  412548:	68ba      	ldr	r2, [r7, #8]
  41254a:	1a83      	subs	r3, r0, r2
  41254c:	2b0f      	cmp	r3, #15
  41254e:	ddde      	ble.n	41250e <_malloc_trim_r+0x3e>
  412550:	4c06      	ldr	r4, [pc, #24]	; (41256c <_malloc_trim_r+0x9c>)
  412552:	4905      	ldr	r1, [pc, #20]	; (412568 <_malloc_trim_r+0x98>)
  412554:	6824      	ldr	r4, [r4, #0]
  412556:	f043 0301 	orr.w	r3, r3, #1
  41255a:	1b00      	subs	r0, r0, r4
  41255c:	6053      	str	r3, [r2, #4]
  41255e:	6008      	str	r0, [r1, #0]
  412560:	e7d5      	b.n	41250e <_malloc_trim_r+0x3e>
  412562:	bf00      	nop
  412564:	20002948 	.word	0x20002948
  412568:	2000489c 	.word	0x2000489c
  41256c:	20002d50 	.word	0x20002d50

00412570 <_free_r>:
  412570:	2900      	cmp	r1, #0
  412572:	d044      	beq.n	4125fe <_free_r+0x8e>
  412574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412578:	460d      	mov	r5, r1
  41257a:	4680      	mov	r8, r0
  41257c:	f7fd faac 	bl	40fad8 <__malloc_lock>
  412580:	f855 7c04 	ldr.w	r7, [r5, #-4]
  412584:	4969      	ldr	r1, [pc, #420]	; (41272c <_free_r+0x1bc>)
  412586:	f027 0301 	bic.w	r3, r7, #1
  41258a:	f1a5 0408 	sub.w	r4, r5, #8
  41258e:	18e2      	adds	r2, r4, r3
  412590:	688e      	ldr	r6, [r1, #8]
  412592:	6850      	ldr	r0, [r2, #4]
  412594:	42b2      	cmp	r2, r6
  412596:	f020 0003 	bic.w	r0, r0, #3
  41259a:	d05e      	beq.n	41265a <_free_r+0xea>
  41259c:	07fe      	lsls	r6, r7, #31
  41259e:	6050      	str	r0, [r2, #4]
  4125a0:	d40b      	bmi.n	4125ba <_free_r+0x4a>
  4125a2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4125a6:	1be4      	subs	r4, r4, r7
  4125a8:	f101 0e08 	add.w	lr, r1, #8
  4125ac:	68a5      	ldr	r5, [r4, #8]
  4125ae:	4575      	cmp	r5, lr
  4125b0:	443b      	add	r3, r7
  4125b2:	d06d      	beq.n	412690 <_free_r+0x120>
  4125b4:	68e7      	ldr	r7, [r4, #12]
  4125b6:	60ef      	str	r7, [r5, #12]
  4125b8:	60bd      	str	r5, [r7, #8]
  4125ba:	1815      	adds	r5, r2, r0
  4125bc:	686d      	ldr	r5, [r5, #4]
  4125be:	07ed      	lsls	r5, r5, #31
  4125c0:	d53e      	bpl.n	412640 <_free_r+0xd0>
  4125c2:	f043 0201 	orr.w	r2, r3, #1
  4125c6:	6062      	str	r2, [r4, #4]
  4125c8:	50e3      	str	r3, [r4, r3]
  4125ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4125ce:	d217      	bcs.n	412600 <_free_r+0x90>
  4125d0:	08db      	lsrs	r3, r3, #3
  4125d2:	1c58      	adds	r0, r3, #1
  4125d4:	109a      	asrs	r2, r3, #2
  4125d6:	684d      	ldr	r5, [r1, #4]
  4125d8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4125dc:	60a7      	str	r7, [r4, #8]
  4125de:	2301      	movs	r3, #1
  4125e0:	4093      	lsls	r3, r2
  4125e2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4125e6:	432b      	orrs	r3, r5
  4125e8:	3a08      	subs	r2, #8
  4125ea:	60e2      	str	r2, [r4, #12]
  4125ec:	604b      	str	r3, [r1, #4]
  4125ee:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4125f2:	60fc      	str	r4, [r7, #12]
  4125f4:	4640      	mov	r0, r8
  4125f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4125fa:	f7fd ba73 	b.w	40fae4 <__malloc_unlock>
  4125fe:	4770      	bx	lr
  412600:	0a5a      	lsrs	r2, r3, #9
  412602:	2a04      	cmp	r2, #4
  412604:	d852      	bhi.n	4126ac <_free_r+0x13c>
  412606:	099a      	lsrs	r2, r3, #6
  412608:	f102 0739 	add.w	r7, r2, #57	; 0x39
  41260c:	00ff      	lsls	r7, r7, #3
  41260e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  412612:	19c8      	adds	r0, r1, r7
  412614:	59ca      	ldr	r2, [r1, r7]
  412616:	3808      	subs	r0, #8
  412618:	4290      	cmp	r0, r2
  41261a:	d04f      	beq.n	4126bc <_free_r+0x14c>
  41261c:	6851      	ldr	r1, [r2, #4]
  41261e:	f021 0103 	bic.w	r1, r1, #3
  412622:	428b      	cmp	r3, r1
  412624:	d232      	bcs.n	41268c <_free_r+0x11c>
  412626:	6892      	ldr	r2, [r2, #8]
  412628:	4290      	cmp	r0, r2
  41262a:	d1f7      	bne.n	41261c <_free_r+0xac>
  41262c:	68c3      	ldr	r3, [r0, #12]
  41262e:	60a0      	str	r0, [r4, #8]
  412630:	60e3      	str	r3, [r4, #12]
  412632:	609c      	str	r4, [r3, #8]
  412634:	60c4      	str	r4, [r0, #12]
  412636:	4640      	mov	r0, r8
  412638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41263c:	f7fd ba52 	b.w	40fae4 <__malloc_unlock>
  412640:	6895      	ldr	r5, [r2, #8]
  412642:	4f3b      	ldr	r7, [pc, #236]	; (412730 <_free_r+0x1c0>)
  412644:	42bd      	cmp	r5, r7
  412646:	4403      	add	r3, r0
  412648:	d040      	beq.n	4126cc <_free_r+0x15c>
  41264a:	68d0      	ldr	r0, [r2, #12]
  41264c:	60e8      	str	r0, [r5, #12]
  41264e:	f043 0201 	orr.w	r2, r3, #1
  412652:	6085      	str	r5, [r0, #8]
  412654:	6062      	str	r2, [r4, #4]
  412656:	50e3      	str	r3, [r4, r3]
  412658:	e7b7      	b.n	4125ca <_free_r+0x5a>
  41265a:	07ff      	lsls	r7, r7, #31
  41265c:	4403      	add	r3, r0
  41265e:	d407      	bmi.n	412670 <_free_r+0x100>
  412660:	f855 2c08 	ldr.w	r2, [r5, #-8]
  412664:	1aa4      	subs	r4, r4, r2
  412666:	4413      	add	r3, r2
  412668:	68a0      	ldr	r0, [r4, #8]
  41266a:	68e2      	ldr	r2, [r4, #12]
  41266c:	60c2      	str	r2, [r0, #12]
  41266e:	6090      	str	r0, [r2, #8]
  412670:	4a30      	ldr	r2, [pc, #192]	; (412734 <_free_r+0x1c4>)
  412672:	6812      	ldr	r2, [r2, #0]
  412674:	f043 0001 	orr.w	r0, r3, #1
  412678:	4293      	cmp	r3, r2
  41267a:	6060      	str	r0, [r4, #4]
  41267c:	608c      	str	r4, [r1, #8]
  41267e:	d3b9      	bcc.n	4125f4 <_free_r+0x84>
  412680:	4b2d      	ldr	r3, [pc, #180]	; (412738 <_free_r+0x1c8>)
  412682:	4640      	mov	r0, r8
  412684:	6819      	ldr	r1, [r3, #0]
  412686:	f7ff ff23 	bl	4124d0 <_malloc_trim_r>
  41268a:	e7b3      	b.n	4125f4 <_free_r+0x84>
  41268c:	4610      	mov	r0, r2
  41268e:	e7cd      	b.n	41262c <_free_r+0xbc>
  412690:	1811      	adds	r1, r2, r0
  412692:	6849      	ldr	r1, [r1, #4]
  412694:	07c9      	lsls	r1, r1, #31
  412696:	d444      	bmi.n	412722 <_free_r+0x1b2>
  412698:	6891      	ldr	r1, [r2, #8]
  41269a:	68d2      	ldr	r2, [r2, #12]
  41269c:	60ca      	str	r2, [r1, #12]
  41269e:	4403      	add	r3, r0
  4126a0:	f043 0001 	orr.w	r0, r3, #1
  4126a4:	6091      	str	r1, [r2, #8]
  4126a6:	6060      	str	r0, [r4, #4]
  4126a8:	50e3      	str	r3, [r4, r3]
  4126aa:	e7a3      	b.n	4125f4 <_free_r+0x84>
  4126ac:	2a14      	cmp	r2, #20
  4126ae:	d816      	bhi.n	4126de <_free_r+0x16e>
  4126b0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4126b4:	00ff      	lsls	r7, r7, #3
  4126b6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4126ba:	e7aa      	b.n	412612 <_free_r+0xa2>
  4126bc:	10aa      	asrs	r2, r5, #2
  4126be:	2301      	movs	r3, #1
  4126c0:	684d      	ldr	r5, [r1, #4]
  4126c2:	4093      	lsls	r3, r2
  4126c4:	432b      	orrs	r3, r5
  4126c6:	604b      	str	r3, [r1, #4]
  4126c8:	4603      	mov	r3, r0
  4126ca:	e7b0      	b.n	41262e <_free_r+0xbe>
  4126cc:	f043 0201 	orr.w	r2, r3, #1
  4126d0:	614c      	str	r4, [r1, #20]
  4126d2:	610c      	str	r4, [r1, #16]
  4126d4:	60e5      	str	r5, [r4, #12]
  4126d6:	60a5      	str	r5, [r4, #8]
  4126d8:	6062      	str	r2, [r4, #4]
  4126da:	50e3      	str	r3, [r4, r3]
  4126dc:	e78a      	b.n	4125f4 <_free_r+0x84>
  4126de:	2a54      	cmp	r2, #84	; 0x54
  4126e0:	d806      	bhi.n	4126f0 <_free_r+0x180>
  4126e2:	0b1a      	lsrs	r2, r3, #12
  4126e4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4126e8:	00ff      	lsls	r7, r7, #3
  4126ea:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4126ee:	e790      	b.n	412612 <_free_r+0xa2>
  4126f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4126f4:	d806      	bhi.n	412704 <_free_r+0x194>
  4126f6:	0bda      	lsrs	r2, r3, #15
  4126f8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4126fc:	00ff      	lsls	r7, r7, #3
  4126fe:	f102 0577 	add.w	r5, r2, #119	; 0x77
  412702:	e786      	b.n	412612 <_free_r+0xa2>
  412704:	f240 5054 	movw	r0, #1364	; 0x554
  412708:	4282      	cmp	r2, r0
  41270a:	d806      	bhi.n	41271a <_free_r+0x1aa>
  41270c:	0c9a      	lsrs	r2, r3, #18
  41270e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  412712:	00ff      	lsls	r7, r7, #3
  412714:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  412718:	e77b      	b.n	412612 <_free_r+0xa2>
  41271a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  41271e:	257e      	movs	r5, #126	; 0x7e
  412720:	e777      	b.n	412612 <_free_r+0xa2>
  412722:	f043 0101 	orr.w	r1, r3, #1
  412726:	6061      	str	r1, [r4, #4]
  412728:	6013      	str	r3, [r2, #0]
  41272a:	e763      	b.n	4125f4 <_free_r+0x84>
  41272c:	20002948 	.word	0x20002948
  412730:	20002950 	.word	0x20002950
  412734:	20002d54 	.word	0x20002d54
  412738:	200048cc 	.word	0x200048cc

0041273c <_localeconv_r>:
  41273c:	4a04      	ldr	r2, [pc, #16]	; (412750 <_localeconv_r+0x14>)
  41273e:	4b05      	ldr	r3, [pc, #20]	; (412754 <_localeconv_r+0x18>)
  412740:	6812      	ldr	r2, [r2, #0]
  412742:	6b50      	ldr	r0, [r2, #52]	; 0x34
  412744:	2800      	cmp	r0, #0
  412746:	bf08      	it	eq
  412748:	4618      	moveq	r0, r3
  41274a:	30f0      	adds	r0, #240	; 0xf0
  41274c:	4770      	bx	lr
  41274e:	bf00      	nop
  412750:	20002518 	.word	0x20002518
  412754:	20002d5c 	.word	0x20002d5c

00412758 <_Balloc>:
  412758:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  41275a:	b570      	push	{r4, r5, r6, lr}
  41275c:	4605      	mov	r5, r0
  41275e:	460c      	mov	r4, r1
  412760:	b14b      	cbz	r3, 412776 <_Balloc+0x1e>
  412762:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  412766:	b180      	cbz	r0, 41278a <_Balloc+0x32>
  412768:	6802      	ldr	r2, [r0, #0]
  41276a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  41276e:	2300      	movs	r3, #0
  412770:	6103      	str	r3, [r0, #16]
  412772:	60c3      	str	r3, [r0, #12]
  412774:	bd70      	pop	{r4, r5, r6, pc}
  412776:	2221      	movs	r2, #33	; 0x21
  412778:	2104      	movs	r1, #4
  41277a:	f000 fbc9 	bl	412f10 <_calloc_r>
  41277e:	64e8      	str	r0, [r5, #76]	; 0x4c
  412780:	4603      	mov	r3, r0
  412782:	2800      	cmp	r0, #0
  412784:	d1ed      	bne.n	412762 <_Balloc+0xa>
  412786:	2000      	movs	r0, #0
  412788:	bd70      	pop	{r4, r5, r6, pc}
  41278a:	2101      	movs	r1, #1
  41278c:	fa01 f604 	lsl.w	r6, r1, r4
  412790:	1d72      	adds	r2, r6, #5
  412792:	4628      	mov	r0, r5
  412794:	0092      	lsls	r2, r2, #2
  412796:	f000 fbbb 	bl	412f10 <_calloc_r>
  41279a:	2800      	cmp	r0, #0
  41279c:	d0f3      	beq.n	412786 <_Balloc+0x2e>
  41279e:	6044      	str	r4, [r0, #4]
  4127a0:	6086      	str	r6, [r0, #8]
  4127a2:	e7e4      	b.n	41276e <_Balloc+0x16>

004127a4 <_Bfree>:
  4127a4:	b131      	cbz	r1, 4127b4 <_Bfree+0x10>
  4127a6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4127a8:	684a      	ldr	r2, [r1, #4]
  4127aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4127ae:	6008      	str	r0, [r1, #0]
  4127b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4127b4:	4770      	bx	lr
  4127b6:	bf00      	nop

004127b8 <__multadd>:
  4127b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4127ba:	690c      	ldr	r4, [r1, #16]
  4127bc:	b083      	sub	sp, #12
  4127be:	460d      	mov	r5, r1
  4127c0:	4606      	mov	r6, r0
  4127c2:	f101 0e14 	add.w	lr, r1, #20
  4127c6:	2700      	movs	r7, #0
  4127c8:	f8de 0000 	ldr.w	r0, [lr]
  4127cc:	b281      	uxth	r1, r0
  4127ce:	fb02 3301 	mla	r3, r2, r1, r3
  4127d2:	0c01      	lsrs	r1, r0, #16
  4127d4:	0c18      	lsrs	r0, r3, #16
  4127d6:	fb02 0101 	mla	r1, r2, r1, r0
  4127da:	b29b      	uxth	r3, r3
  4127dc:	3701      	adds	r7, #1
  4127de:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4127e2:	42bc      	cmp	r4, r7
  4127e4:	f84e 3b04 	str.w	r3, [lr], #4
  4127e8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4127ec:	dcec      	bgt.n	4127c8 <__multadd+0x10>
  4127ee:	b13b      	cbz	r3, 412800 <__multadd+0x48>
  4127f0:	68aa      	ldr	r2, [r5, #8]
  4127f2:	4294      	cmp	r4, r2
  4127f4:	da07      	bge.n	412806 <__multadd+0x4e>
  4127f6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4127fa:	3401      	adds	r4, #1
  4127fc:	6153      	str	r3, [r2, #20]
  4127fe:	612c      	str	r4, [r5, #16]
  412800:	4628      	mov	r0, r5
  412802:	b003      	add	sp, #12
  412804:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412806:	6869      	ldr	r1, [r5, #4]
  412808:	9301      	str	r3, [sp, #4]
  41280a:	3101      	adds	r1, #1
  41280c:	4630      	mov	r0, r6
  41280e:	f7ff ffa3 	bl	412758 <_Balloc>
  412812:	692a      	ldr	r2, [r5, #16]
  412814:	3202      	adds	r2, #2
  412816:	f105 010c 	add.w	r1, r5, #12
  41281a:	4607      	mov	r7, r0
  41281c:	0092      	lsls	r2, r2, #2
  41281e:	300c      	adds	r0, #12
  412820:	f7fd f80e 	bl	40f840 <memcpy>
  412824:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  412826:	6869      	ldr	r1, [r5, #4]
  412828:	9b01      	ldr	r3, [sp, #4]
  41282a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  41282e:	6028      	str	r0, [r5, #0]
  412830:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  412834:	463d      	mov	r5, r7
  412836:	e7de      	b.n	4127f6 <__multadd+0x3e>

00412838 <__hi0bits>:
  412838:	0c02      	lsrs	r2, r0, #16
  41283a:	0412      	lsls	r2, r2, #16
  41283c:	4603      	mov	r3, r0
  41283e:	b9b2      	cbnz	r2, 41286e <__hi0bits+0x36>
  412840:	0403      	lsls	r3, r0, #16
  412842:	2010      	movs	r0, #16
  412844:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  412848:	bf04      	itt	eq
  41284a:	021b      	lsleq	r3, r3, #8
  41284c:	3008      	addeq	r0, #8
  41284e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  412852:	bf04      	itt	eq
  412854:	011b      	lsleq	r3, r3, #4
  412856:	3004      	addeq	r0, #4
  412858:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  41285c:	bf04      	itt	eq
  41285e:	009b      	lsleq	r3, r3, #2
  412860:	3002      	addeq	r0, #2
  412862:	2b00      	cmp	r3, #0
  412864:	db02      	blt.n	41286c <__hi0bits+0x34>
  412866:	005b      	lsls	r3, r3, #1
  412868:	d403      	bmi.n	412872 <__hi0bits+0x3a>
  41286a:	2020      	movs	r0, #32
  41286c:	4770      	bx	lr
  41286e:	2000      	movs	r0, #0
  412870:	e7e8      	b.n	412844 <__hi0bits+0xc>
  412872:	3001      	adds	r0, #1
  412874:	4770      	bx	lr
  412876:	bf00      	nop

00412878 <__lo0bits>:
  412878:	6803      	ldr	r3, [r0, #0]
  41287a:	f013 0207 	ands.w	r2, r3, #7
  41287e:	4601      	mov	r1, r0
  412880:	d007      	beq.n	412892 <__lo0bits+0x1a>
  412882:	07da      	lsls	r2, r3, #31
  412884:	d421      	bmi.n	4128ca <__lo0bits+0x52>
  412886:	0798      	lsls	r0, r3, #30
  412888:	d421      	bmi.n	4128ce <__lo0bits+0x56>
  41288a:	089b      	lsrs	r3, r3, #2
  41288c:	600b      	str	r3, [r1, #0]
  41288e:	2002      	movs	r0, #2
  412890:	4770      	bx	lr
  412892:	b298      	uxth	r0, r3
  412894:	b198      	cbz	r0, 4128be <__lo0bits+0x46>
  412896:	4610      	mov	r0, r2
  412898:	f013 0fff 	tst.w	r3, #255	; 0xff
  41289c:	bf04      	itt	eq
  41289e:	0a1b      	lsreq	r3, r3, #8
  4128a0:	3008      	addeq	r0, #8
  4128a2:	071a      	lsls	r2, r3, #28
  4128a4:	bf04      	itt	eq
  4128a6:	091b      	lsreq	r3, r3, #4
  4128a8:	3004      	addeq	r0, #4
  4128aa:	079a      	lsls	r2, r3, #30
  4128ac:	bf04      	itt	eq
  4128ae:	089b      	lsreq	r3, r3, #2
  4128b0:	3002      	addeq	r0, #2
  4128b2:	07da      	lsls	r2, r3, #31
  4128b4:	d407      	bmi.n	4128c6 <__lo0bits+0x4e>
  4128b6:	085b      	lsrs	r3, r3, #1
  4128b8:	d104      	bne.n	4128c4 <__lo0bits+0x4c>
  4128ba:	2020      	movs	r0, #32
  4128bc:	4770      	bx	lr
  4128be:	0c1b      	lsrs	r3, r3, #16
  4128c0:	2010      	movs	r0, #16
  4128c2:	e7e9      	b.n	412898 <__lo0bits+0x20>
  4128c4:	3001      	adds	r0, #1
  4128c6:	600b      	str	r3, [r1, #0]
  4128c8:	4770      	bx	lr
  4128ca:	2000      	movs	r0, #0
  4128cc:	4770      	bx	lr
  4128ce:	085b      	lsrs	r3, r3, #1
  4128d0:	600b      	str	r3, [r1, #0]
  4128d2:	2001      	movs	r0, #1
  4128d4:	4770      	bx	lr
  4128d6:	bf00      	nop

004128d8 <__i2b>:
  4128d8:	b510      	push	{r4, lr}
  4128da:	460c      	mov	r4, r1
  4128dc:	2101      	movs	r1, #1
  4128de:	f7ff ff3b 	bl	412758 <_Balloc>
  4128e2:	2201      	movs	r2, #1
  4128e4:	6144      	str	r4, [r0, #20]
  4128e6:	6102      	str	r2, [r0, #16]
  4128e8:	bd10      	pop	{r4, pc}
  4128ea:	bf00      	nop

004128ec <__multiply>:
  4128ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4128f0:	690c      	ldr	r4, [r1, #16]
  4128f2:	6915      	ldr	r5, [r2, #16]
  4128f4:	42ac      	cmp	r4, r5
  4128f6:	b083      	sub	sp, #12
  4128f8:	468b      	mov	fp, r1
  4128fa:	4616      	mov	r6, r2
  4128fc:	da04      	bge.n	412908 <__multiply+0x1c>
  4128fe:	4622      	mov	r2, r4
  412900:	46b3      	mov	fp, r6
  412902:	462c      	mov	r4, r5
  412904:	460e      	mov	r6, r1
  412906:	4615      	mov	r5, r2
  412908:	f8db 3008 	ldr.w	r3, [fp, #8]
  41290c:	f8db 1004 	ldr.w	r1, [fp, #4]
  412910:	eb04 0805 	add.w	r8, r4, r5
  412914:	4598      	cmp	r8, r3
  412916:	bfc8      	it	gt
  412918:	3101      	addgt	r1, #1
  41291a:	f7ff ff1d 	bl	412758 <_Balloc>
  41291e:	f100 0914 	add.w	r9, r0, #20
  412922:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  412926:	45d1      	cmp	r9, sl
  412928:	9000      	str	r0, [sp, #0]
  41292a:	d205      	bcs.n	412938 <__multiply+0x4c>
  41292c:	464b      	mov	r3, r9
  41292e:	2100      	movs	r1, #0
  412930:	f843 1b04 	str.w	r1, [r3], #4
  412934:	459a      	cmp	sl, r3
  412936:	d8fb      	bhi.n	412930 <__multiply+0x44>
  412938:	f106 0c14 	add.w	ip, r6, #20
  41293c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  412940:	f10b 0b14 	add.w	fp, fp, #20
  412944:	459c      	cmp	ip, r3
  412946:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  41294a:	d24c      	bcs.n	4129e6 <__multiply+0xfa>
  41294c:	f8cd a004 	str.w	sl, [sp, #4]
  412950:	469a      	mov	sl, r3
  412952:	f8dc 5000 	ldr.w	r5, [ip]
  412956:	b2af      	uxth	r7, r5
  412958:	b1ef      	cbz	r7, 412996 <__multiply+0xaa>
  41295a:	2100      	movs	r1, #0
  41295c:	464d      	mov	r5, r9
  41295e:	465e      	mov	r6, fp
  412960:	460c      	mov	r4, r1
  412962:	f856 2b04 	ldr.w	r2, [r6], #4
  412966:	6828      	ldr	r0, [r5, #0]
  412968:	b293      	uxth	r3, r2
  41296a:	b281      	uxth	r1, r0
  41296c:	fb07 1303 	mla	r3, r7, r3, r1
  412970:	0c12      	lsrs	r2, r2, #16
  412972:	0c01      	lsrs	r1, r0, #16
  412974:	4423      	add	r3, r4
  412976:	fb07 1102 	mla	r1, r7, r2, r1
  41297a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  41297e:	b29b      	uxth	r3, r3
  412980:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  412984:	45b6      	cmp	lr, r6
  412986:	f845 3b04 	str.w	r3, [r5], #4
  41298a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  41298e:	d8e8      	bhi.n	412962 <__multiply+0x76>
  412990:	602c      	str	r4, [r5, #0]
  412992:	f8dc 5000 	ldr.w	r5, [ip]
  412996:	0c2d      	lsrs	r5, r5, #16
  412998:	d01d      	beq.n	4129d6 <__multiply+0xea>
  41299a:	f8d9 3000 	ldr.w	r3, [r9]
  41299e:	4648      	mov	r0, r9
  4129a0:	461c      	mov	r4, r3
  4129a2:	4659      	mov	r1, fp
  4129a4:	2200      	movs	r2, #0
  4129a6:	880e      	ldrh	r6, [r1, #0]
  4129a8:	0c24      	lsrs	r4, r4, #16
  4129aa:	fb05 4406 	mla	r4, r5, r6, r4
  4129ae:	4422      	add	r2, r4
  4129b0:	b29b      	uxth	r3, r3
  4129b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4129b6:	f840 3b04 	str.w	r3, [r0], #4
  4129ba:	f851 3b04 	ldr.w	r3, [r1], #4
  4129be:	6804      	ldr	r4, [r0, #0]
  4129c0:	0c1b      	lsrs	r3, r3, #16
  4129c2:	b2a6      	uxth	r6, r4
  4129c4:	fb05 6303 	mla	r3, r5, r3, r6
  4129c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4129cc:	458e      	cmp	lr, r1
  4129ce:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4129d2:	d8e8      	bhi.n	4129a6 <__multiply+0xba>
  4129d4:	6003      	str	r3, [r0, #0]
  4129d6:	f10c 0c04 	add.w	ip, ip, #4
  4129da:	45e2      	cmp	sl, ip
  4129dc:	f109 0904 	add.w	r9, r9, #4
  4129e0:	d8b7      	bhi.n	412952 <__multiply+0x66>
  4129e2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4129e6:	f1b8 0f00 	cmp.w	r8, #0
  4129ea:	dd0b      	ble.n	412a04 <__multiply+0x118>
  4129ec:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4129f0:	f1aa 0a04 	sub.w	sl, sl, #4
  4129f4:	b11b      	cbz	r3, 4129fe <__multiply+0x112>
  4129f6:	e005      	b.n	412a04 <__multiply+0x118>
  4129f8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4129fc:	b913      	cbnz	r3, 412a04 <__multiply+0x118>
  4129fe:	f1b8 0801 	subs.w	r8, r8, #1
  412a02:	d1f9      	bne.n	4129f8 <__multiply+0x10c>
  412a04:	9800      	ldr	r0, [sp, #0]
  412a06:	f8c0 8010 	str.w	r8, [r0, #16]
  412a0a:	b003      	add	sp, #12
  412a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412a10 <__pow5mult>:
  412a10:	f012 0303 	ands.w	r3, r2, #3
  412a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412a18:	4614      	mov	r4, r2
  412a1a:	4607      	mov	r7, r0
  412a1c:	d12e      	bne.n	412a7c <__pow5mult+0x6c>
  412a1e:	460d      	mov	r5, r1
  412a20:	10a4      	asrs	r4, r4, #2
  412a22:	d01c      	beq.n	412a5e <__pow5mult+0x4e>
  412a24:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  412a26:	b396      	cbz	r6, 412a8e <__pow5mult+0x7e>
  412a28:	07e3      	lsls	r3, r4, #31
  412a2a:	f04f 0800 	mov.w	r8, #0
  412a2e:	d406      	bmi.n	412a3e <__pow5mult+0x2e>
  412a30:	1064      	asrs	r4, r4, #1
  412a32:	d014      	beq.n	412a5e <__pow5mult+0x4e>
  412a34:	6830      	ldr	r0, [r6, #0]
  412a36:	b1a8      	cbz	r0, 412a64 <__pow5mult+0x54>
  412a38:	4606      	mov	r6, r0
  412a3a:	07e3      	lsls	r3, r4, #31
  412a3c:	d5f8      	bpl.n	412a30 <__pow5mult+0x20>
  412a3e:	4632      	mov	r2, r6
  412a40:	4629      	mov	r1, r5
  412a42:	4638      	mov	r0, r7
  412a44:	f7ff ff52 	bl	4128ec <__multiply>
  412a48:	b1b5      	cbz	r5, 412a78 <__pow5mult+0x68>
  412a4a:	686a      	ldr	r2, [r5, #4]
  412a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  412a4e:	1064      	asrs	r4, r4, #1
  412a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  412a54:	6029      	str	r1, [r5, #0]
  412a56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  412a5a:	4605      	mov	r5, r0
  412a5c:	d1ea      	bne.n	412a34 <__pow5mult+0x24>
  412a5e:	4628      	mov	r0, r5
  412a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412a64:	4632      	mov	r2, r6
  412a66:	4631      	mov	r1, r6
  412a68:	4638      	mov	r0, r7
  412a6a:	f7ff ff3f 	bl	4128ec <__multiply>
  412a6e:	6030      	str	r0, [r6, #0]
  412a70:	f8c0 8000 	str.w	r8, [r0]
  412a74:	4606      	mov	r6, r0
  412a76:	e7e0      	b.n	412a3a <__pow5mult+0x2a>
  412a78:	4605      	mov	r5, r0
  412a7a:	e7d9      	b.n	412a30 <__pow5mult+0x20>
  412a7c:	1e5a      	subs	r2, r3, #1
  412a7e:	4d0b      	ldr	r5, [pc, #44]	; (412aac <__pow5mult+0x9c>)
  412a80:	2300      	movs	r3, #0
  412a82:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  412a86:	f7ff fe97 	bl	4127b8 <__multadd>
  412a8a:	4605      	mov	r5, r0
  412a8c:	e7c8      	b.n	412a20 <__pow5mult+0x10>
  412a8e:	2101      	movs	r1, #1
  412a90:	4638      	mov	r0, r7
  412a92:	f7ff fe61 	bl	412758 <_Balloc>
  412a96:	f240 2171 	movw	r1, #625	; 0x271
  412a9a:	2201      	movs	r2, #1
  412a9c:	2300      	movs	r3, #0
  412a9e:	6141      	str	r1, [r0, #20]
  412aa0:	6102      	str	r2, [r0, #16]
  412aa2:	4606      	mov	r6, r0
  412aa4:	64b8      	str	r0, [r7, #72]	; 0x48
  412aa6:	6003      	str	r3, [r0, #0]
  412aa8:	e7be      	b.n	412a28 <__pow5mult+0x18>
  412aaa:	bf00      	nop
  412aac:	00413a88 	.word	0x00413a88

00412ab0 <__lshift>:
  412ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  412ab4:	4691      	mov	r9, r2
  412ab6:	690a      	ldr	r2, [r1, #16]
  412ab8:	688b      	ldr	r3, [r1, #8]
  412aba:	ea4f 1469 	mov.w	r4, r9, asr #5
  412abe:	eb04 0802 	add.w	r8, r4, r2
  412ac2:	f108 0501 	add.w	r5, r8, #1
  412ac6:	429d      	cmp	r5, r3
  412ac8:	460e      	mov	r6, r1
  412aca:	4607      	mov	r7, r0
  412acc:	6849      	ldr	r1, [r1, #4]
  412ace:	dd04      	ble.n	412ada <__lshift+0x2a>
  412ad0:	005b      	lsls	r3, r3, #1
  412ad2:	429d      	cmp	r5, r3
  412ad4:	f101 0101 	add.w	r1, r1, #1
  412ad8:	dcfa      	bgt.n	412ad0 <__lshift+0x20>
  412ada:	4638      	mov	r0, r7
  412adc:	f7ff fe3c 	bl	412758 <_Balloc>
  412ae0:	2c00      	cmp	r4, #0
  412ae2:	f100 0314 	add.w	r3, r0, #20
  412ae6:	dd06      	ble.n	412af6 <__lshift+0x46>
  412ae8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  412aec:	2100      	movs	r1, #0
  412aee:	f843 1b04 	str.w	r1, [r3], #4
  412af2:	429a      	cmp	r2, r3
  412af4:	d1fb      	bne.n	412aee <__lshift+0x3e>
  412af6:	6934      	ldr	r4, [r6, #16]
  412af8:	f106 0114 	add.w	r1, r6, #20
  412afc:	f019 091f 	ands.w	r9, r9, #31
  412b00:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  412b04:	d01d      	beq.n	412b42 <__lshift+0x92>
  412b06:	f1c9 0c20 	rsb	ip, r9, #32
  412b0a:	2200      	movs	r2, #0
  412b0c:	680c      	ldr	r4, [r1, #0]
  412b0e:	fa04 f409 	lsl.w	r4, r4, r9
  412b12:	4314      	orrs	r4, r2
  412b14:	f843 4b04 	str.w	r4, [r3], #4
  412b18:	f851 2b04 	ldr.w	r2, [r1], #4
  412b1c:	458e      	cmp	lr, r1
  412b1e:	fa22 f20c 	lsr.w	r2, r2, ip
  412b22:	d8f3      	bhi.n	412b0c <__lshift+0x5c>
  412b24:	601a      	str	r2, [r3, #0]
  412b26:	b10a      	cbz	r2, 412b2c <__lshift+0x7c>
  412b28:	f108 0502 	add.w	r5, r8, #2
  412b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  412b2e:	6872      	ldr	r2, [r6, #4]
  412b30:	3d01      	subs	r5, #1
  412b32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  412b36:	6105      	str	r5, [r0, #16]
  412b38:	6031      	str	r1, [r6, #0]
  412b3a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  412b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  412b42:	3b04      	subs	r3, #4
  412b44:	f851 2b04 	ldr.w	r2, [r1], #4
  412b48:	f843 2f04 	str.w	r2, [r3, #4]!
  412b4c:	458e      	cmp	lr, r1
  412b4e:	d8f9      	bhi.n	412b44 <__lshift+0x94>
  412b50:	e7ec      	b.n	412b2c <__lshift+0x7c>
  412b52:	bf00      	nop

00412b54 <__mcmp>:
  412b54:	b430      	push	{r4, r5}
  412b56:	690b      	ldr	r3, [r1, #16]
  412b58:	4605      	mov	r5, r0
  412b5a:	6900      	ldr	r0, [r0, #16]
  412b5c:	1ac0      	subs	r0, r0, r3
  412b5e:	d10f      	bne.n	412b80 <__mcmp+0x2c>
  412b60:	009b      	lsls	r3, r3, #2
  412b62:	3514      	adds	r5, #20
  412b64:	3114      	adds	r1, #20
  412b66:	4419      	add	r1, r3
  412b68:	442b      	add	r3, r5
  412b6a:	e001      	b.n	412b70 <__mcmp+0x1c>
  412b6c:	429d      	cmp	r5, r3
  412b6e:	d207      	bcs.n	412b80 <__mcmp+0x2c>
  412b70:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  412b74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  412b78:	4294      	cmp	r4, r2
  412b7a:	d0f7      	beq.n	412b6c <__mcmp+0x18>
  412b7c:	d302      	bcc.n	412b84 <__mcmp+0x30>
  412b7e:	2001      	movs	r0, #1
  412b80:	bc30      	pop	{r4, r5}
  412b82:	4770      	bx	lr
  412b84:	f04f 30ff 	mov.w	r0, #4294967295
  412b88:	e7fa      	b.n	412b80 <__mcmp+0x2c>
  412b8a:	bf00      	nop

00412b8c <__mdiff>:
  412b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412b90:	690f      	ldr	r7, [r1, #16]
  412b92:	460e      	mov	r6, r1
  412b94:	6911      	ldr	r1, [r2, #16]
  412b96:	1a7f      	subs	r7, r7, r1
  412b98:	2f00      	cmp	r7, #0
  412b9a:	4690      	mov	r8, r2
  412b9c:	d117      	bne.n	412bce <__mdiff+0x42>
  412b9e:	0089      	lsls	r1, r1, #2
  412ba0:	f106 0514 	add.w	r5, r6, #20
  412ba4:	f102 0e14 	add.w	lr, r2, #20
  412ba8:	186b      	adds	r3, r5, r1
  412baa:	4471      	add	r1, lr
  412bac:	e001      	b.n	412bb2 <__mdiff+0x26>
  412bae:	429d      	cmp	r5, r3
  412bb0:	d25c      	bcs.n	412c6c <__mdiff+0xe0>
  412bb2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  412bb6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  412bba:	42a2      	cmp	r2, r4
  412bbc:	d0f7      	beq.n	412bae <__mdiff+0x22>
  412bbe:	d25e      	bcs.n	412c7e <__mdiff+0xf2>
  412bc0:	4633      	mov	r3, r6
  412bc2:	462c      	mov	r4, r5
  412bc4:	4646      	mov	r6, r8
  412bc6:	4675      	mov	r5, lr
  412bc8:	4698      	mov	r8, r3
  412bca:	2701      	movs	r7, #1
  412bcc:	e005      	b.n	412bda <__mdiff+0x4e>
  412bce:	db58      	blt.n	412c82 <__mdiff+0xf6>
  412bd0:	f106 0514 	add.w	r5, r6, #20
  412bd4:	f108 0414 	add.w	r4, r8, #20
  412bd8:	2700      	movs	r7, #0
  412bda:	6871      	ldr	r1, [r6, #4]
  412bdc:	f7ff fdbc 	bl	412758 <_Balloc>
  412be0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  412be4:	6936      	ldr	r6, [r6, #16]
  412be6:	60c7      	str	r7, [r0, #12]
  412be8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  412bec:	46a6      	mov	lr, r4
  412bee:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  412bf2:	f100 0414 	add.w	r4, r0, #20
  412bf6:	2300      	movs	r3, #0
  412bf8:	f85e 1b04 	ldr.w	r1, [lr], #4
  412bfc:	f855 8b04 	ldr.w	r8, [r5], #4
  412c00:	b28a      	uxth	r2, r1
  412c02:	fa13 f388 	uxtah	r3, r3, r8
  412c06:	0c09      	lsrs	r1, r1, #16
  412c08:	1a9a      	subs	r2, r3, r2
  412c0a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  412c0e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  412c12:	b292      	uxth	r2, r2
  412c14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  412c18:	45f4      	cmp	ip, lr
  412c1a:	f844 2b04 	str.w	r2, [r4], #4
  412c1e:	ea4f 4323 	mov.w	r3, r3, asr #16
  412c22:	d8e9      	bhi.n	412bf8 <__mdiff+0x6c>
  412c24:	42af      	cmp	r7, r5
  412c26:	d917      	bls.n	412c58 <__mdiff+0xcc>
  412c28:	46a4      	mov	ip, r4
  412c2a:	46ae      	mov	lr, r5
  412c2c:	f85e 2b04 	ldr.w	r2, [lr], #4
  412c30:	fa13 f382 	uxtah	r3, r3, r2
  412c34:	1419      	asrs	r1, r3, #16
  412c36:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  412c3a:	b29b      	uxth	r3, r3
  412c3c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  412c40:	4577      	cmp	r7, lr
  412c42:	f84c 2b04 	str.w	r2, [ip], #4
  412c46:	ea4f 4321 	mov.w	r3, r1, asr #16
  412c4a:	d8ef      	bhi.n	412c2c <__mdiff+0xa0>
  412c4c:	43ed      	mvns	r5, r5
  412c4e:	442f      	add	r7, r5
  412c50:	f027 0703 	bic.w	r7, r7, #3
  412c54:	3704      	adds	r7, #4
  412c56:	443c      	add	r4, r7
  412c58:	3c04      	subs	r4, #4
  412c5a:	b922      	cbnz	r2, 412c66 <__mdiff+0xda>
  412c5c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  412c60:	3e01      	subs	r6, #1
  412c62:	2b00      	cmp	r3, #0
  412c64:	d0fa      	beq.n	412c5c <__mdiff+0xd0>
  412c66:	6106      	str	r6, [r0, #16]
  412c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412c6c:	2100      	movs	r1, #0
  412c6e:	f7ff fd73 	bl	412758 <_Balloc>
  412c72:	2201      	movs	r2, #1
  412c74:	2300      	movs	r3, #0
  412c76:	6102      	str	r2, [r0, #16]
  412c78:	6143      	str	r3, [r0, #20]
  412c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412c7e:	4674      	mov	r4, lr
  412c80:	e7ab      	b.n	412bda <__mdiff+0x4e>
  412c82:	4633      	mov	r3, r6
  412c84:	f106 0414 	add.w	r4, r6, #20
  412c88:	f102 0514 	add.w	r5, r2, #20
  412c8c:	4616      	mov	r6, r2
  412c8e:	2701      	movs	r7, #1
  412c90:	4698      	mov	r8, r3
  412c92:	e7a2      	b.n	412bda <__mdiff+0x4e>

00412c94 <__d2b>:
  412c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412c98:	ec57 6b10 	vmov	r6, r7, d0
  412c9c:	b083      	sub	sp, #12
  412c9e:	4688      	mov	r8, r1
  412ca0:	2101      	movs	r1, #1
  412ca2:	463c      	mov	r4, r7
  412ca4:	f3c7 550a 	ubfx	r5, r7, #20, #11
  412ca8:	4617      	mov	r7, r2
  412caa:	f7ff fd55 	bl	412758 <_Balloc>
  412cae:	f3c4 0413 	ubfx	r4, r4, #0, #20
  412cb2:	4681      	mov	r9, r0
  412cb4:	b10d      	cbz	r5, 412cba <__d2b+0x26>
  412cb6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  412cba:	9401      	str	r4, [sp, #4]
  412cbc:	b31e      	cbz	r6, 412d06 <__d2b+0x72>
  412cbe:	a802      	add	r0, sp, #8
  412cc0:	f840 6d08 	str.w	r6, [r0, #-8]!
  412cc4:	f7ff fdd8 	bl	412878 <__lo0bits>
  412cc8:	2800      	cmp	r0, #0
  412cca:	d134      	bne.n	412d36 <__d2b+0xa2>
  412ccc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  412cd0:	f8c9 2014 	str.w	r2, [r9, #20]
  412cd4:	2b00      	cmp	r3, #0
  412cd6:	bf0c      	ite	eq
  412cd8:	2101      	moveq	r1, #1
  412cda:	2102      	movne	r1, #2
  412cdc:	f8c9 3018 	str.w	r3, [r9, #24]
  412ce0:	f8c9 1010 	str.w	r1, [r9, #16]
  412ce4:	b9dd      	cbnz	r5, 412d1e <__d2b+0x8a>
  412ce6:	eb09 0381 	add.w	r3, r9, r1, lsl #2
  412cea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  412cee:	f8c8 0000 	str.w	r0, [r8]
  412cf2:	6918      	ldr	r0, [r3, #16]
  412cf4:	f7ff fda0 	bl	412838 <__hi0bits>
  412cf8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  412cfc:	6038      	str	r0, [r7, #0]
  412cfe:	4648      	mov	r0, r9
  412d00:	b003      	add	sp, #12
  412d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412d06:	a801      	add	r0, sp, #4
  412d08:	f7ff fdb6 	bl	412878 <__lo0bits>
  412d0c:	9b01      	ldr	r3, [sp, #4]
  412d0e:	f8c9 3014 	str.w	r3, [r9, #20]
  412d12:	2101      	movs	r1, #1
  412d14:	3020      	adds	r0, #32
  412d16:	f8c9 1010 	str.w	r1, [r9, #16]
  412d1a:	2d00      	cmp	r5, #0
  412d1c:	d0e3      	beq.n	412ce6 <__d2b+0x52>
  412d1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
  412d22:	4405      	add	r5, r0
  412d24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  412d28:	f8c8 5000 	str.w	r5, [r8]
  412d2c:	6038      	str	r0, [r7, #0]
  412d2e:	4648      	mov	r0, r9
  412d30:	b003      	add	sp, #12
  412d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412d36:	e89d 000a 	ldmia.w	sp, {r1, r3}
  412d3a:	f1c0 0220 	rsb	r2, r0, #32
  412d3e:	fa03 f202 	lsl.w	r2, r3, r2
  412d42:	430a      	orrs	r2, r1
  412d44:	40c3      	lsrs	r3, r0
  412d46:	9301      	str	r3, [sp, #4]
  412d48:	f8c9 2014 	str.w	r2, [r9, #20]
  412d4c:	e7c2      	b.n	412cd4 <__d2b+0x40>
  412d4e:	bf00      	nop

00412d50 <__ssprint_r>:
  412d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412d54:	6893      	ldr	r3, [r2, #8]
  412d56:	b083      	sub	sp, #12
  412d58:	4690      	mov	r8, r2
  412d5a:	2b00      	cmp	r3, #0
  412d5c:	d070      	beq.n	412e40 <__ssprint_r+0xf0>
  412d5e:	4682      	mov	sl, r0
  412d60:	460c      	mov	r4, r1
  412d62:	6817      	ldr	r7, [r2, #0]
  412d64:	688d      	ldr	r5, [r1, #8]
  412d66:	6808      	ldr	r0, [r1, #0]
  412d68:	e042      	b.n	412df0 <__ssprint_r+0xa0>
  412d6a:	89a3      	ldrh	r3, [r4, #12]
  412d6c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  412d70:	d02e      	beq.n	412dd0 <__ssprint_r+0x80>
  412d72:	6965      	ldr	r5, [r4, #20]
  412d74:	6921      	ldr	r1, [r4, #16]
  412d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  412d7a:	eba0 0b01 	sub.w	fp, r0, r1
  412d7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  412d82:	f10b 0001 	add.w	r0, fp, #1
  412d86:	106d      	asrs	r5, r5, #1
  412d88:	4430      	add	r0, r6
  412d8a:	42a8      	cmp	r0, r5
  412d8c:	462a      	mov	r2, r5
  412d8e:	bf84      	itt	hi
  412d90:	4605      	movhi	r5, r0
  412d92:	462a      	movhi	r2, r5
  412d94:	055b      	lsls	r3, r3, #21
  412d96:	d538      	bpl.n	412e0a <__ssprint_r+0xba>
  412d98:	4611      	mov	r1, r2
  412d9a:	4650      	mov	r0, sl
  412d9c:	f7fc fa4c 	bl	40f238 <_malloc_r>
  412da0:	2800      	cmp	r0, #0
  412da2:	d03c      	beq.n	412e1e <__ssprint_r+0xce>
  412da4:	465a      	mov	r2, fp
  412da6:	6921      	ldr	r1, [r4, #16]
  412da8:	9001      	str	r0, [sp, #4]
  412daa:	f7fc fd49 	bl	40f840 <memcpy>
  412dae:	89a2      	ldrh	r2, [r4, #12]
  412db0:	9b01      	ldr	r3, [sp, #4]
  412db2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  412db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  412dba:	81a2      	strh	r2, [r4, #12]
  412dbc:	eba5 020b 	sub.w	r2, r5, fp
  412dc0:	eb03 000b 	add.w	r0, r3, fp
  412dc4:	6165      	str	r5, [r4, #20]
  412dc6:	6123      	str	r3, [r4, #16]
  412dc8:	6020      	str	r0, [r4, #0]
  412dca:	60a2      	str	r2, [r4, #8]
  412dcc:	4635      	mov	r5, r6
  412dce:	46b3      	mov	fp, r6
  412dd0:	465a      	mov	r2, fp
  412dd2:	4649      	mov	r1, r9
  412dd4:	f7fc fdce 	bl	40f974 <memmove>
  412dd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  412ddc:	68a2      	ldr	r2, [r4, #8]
  412dde:	6820      	ldr	r0, [r4, #0]
  412de0:	1b55      	subs	r5, r2, r5
  412de2:	4458      	add	r0, fp
  412de4:	1b9e      	subs	r6, r3, r6
  412de6:	60a5      	str	r5, [r4, #8]
  412de8:	6020      	str	r0, [r4, #0]
  412dea:	f8c8 6008 	str.w	r6, [r8, #8]
  412dee:	b33e      	cbz	r6, 412e40 <__ssprint_r+0xf0>
  412df0:	687e      	ldr	r6, [r7, #4]
  412df2:	463b      	mov	r3, r7
  412df4:	3708      	adds	r7, #8
  412df6:	2e00      	cmp	r6, #0
  412df8:	d0fa      	beq.n	412df0 <__ssprint_r+0xa0>
  412dfa:	42ae      	cmp	r6, r5
  412dfc:	f8d3 9000 	ldr.w	r9, [r3]
  412e00:	46ab      	mov	fp, r5
  412e02:	d2b2      	bcs.n	412d6a <__ssprint_r+0x1a>
  412e04:	4635      	mov	r5, r6
  412e06:	46b3      	mov	fp, r6
  412e08:	e7e2      	b.n	412dd0 <__ssprint_r+0x80>
  412e0a:	4650      	mov	r0, sl
  412e0c:	f7fc fe70 	bl	40faf0 <_realloc_r>
  412e10:	4603      	mov	r3, r0
  412e12:	2800      	cmp	r0, #0
  412e14:	d1d2      	bne.n	412dbc <__ssprint_r+0x6c>
  412e16:	6921      	ldr	r1, [r4, #16]
  412e18:	4650      	mov	r0, sl
  412e1a:	f7ff fba9 	bl	412570 <_free_r>
  412e1e:	230c      	movs	r3, #12
  412e20:	f8ca 3000 	str.w	r3, [sl]
  412e24:	89a3      	ldrh	r3, [r4, #12]
  412e26:	2200      	movs	r2, #0
  412e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  412e2c:	f04f 30ff 	mov.w	r0, #4294967295
  412e30:	81a3      	strh	r3, [r4, #12]
  412e32:	f8c8 2008 	str.w	r2, [r8, #8]
  412e36:	f8c8 2004 	str.w	r2, [r8, #4]
  412e3a:	b003      	add	sp, #12
  412e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412e40:	2000      	movs	r0, #0
  412e42:	f8c8 0004 	str.w	r0, [r8, #4]
  412e46:	b003      	add	sp, #12
  412e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412e4c <__register_exitproc>:
  412e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  412e50:	4d2c      	ldr	r5, [pc, #176]	; (412f04 <__register_exitproc+0xb8>)
  412e52:	4606      	mov	r6, r0
  412e54:	6828      	ldr	r0, [r5, #0]
  412e56:	4698      	mov	r8, r3
  412e58:	460f      	mov	r7, r1
  412e5a:	4691      	mov	r9, r2
  412e5c:	f7fc f9e8 	bl	40f230 <__retarget_lock_acquire_recursive>
  412e60:	4b29      	ldr	r3, [pc, #164]	; (412f08 <__register_exitproc+0xbc>)
  412e62:	681c      	ldr	r4, [r3, #0]
  412e64:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  412e68:	2b00      	cmp	r3, #0
  412e6a:	d03e      	beq.n	412eea <__register_exitproc+0x9e>
  412e6c:	685a      	ldr	r2, [r3, #4]
  412e6e:	2a1f      	cmp	r2, #31
  412e70:	dc1c      	bgt.n	412eac <__register_exitproc+0x60>
  412e72:	f102 0e01 	add.w	lr, r2, #1
  412e76:	b176      	cbz	r6, 412e96 <__register_exitproc+0x4a>
  412e78:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  412e7c:	2401      	movs	r4, #1
  412e7e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  412e82:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  412e86:	4094      	lsls	r4, r2
  412e88:	4320      	orrs	r0, r4
  412e8a:	2e02      	cmp	r6, #2
  412e8c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  412e90:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  412e94:	d023      	beq.n	412ede <__register_exitproc+0x92>
  412e96:	3202      	adds	r2, #2
  412e98:	f8c3 e004 	str.w	lr, [r3, #4]
  412e9c:	6828      	ldr	r0, [r5, #0]
  412e9e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  412ea2:	f7fc f9c7 	bl	40f234 <__retarget_lock_release_recursive>
  412ea6:	2000      	movs	r0, #0
  412ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  412eac:	4b17      	ldr	r3, [pc, #92]	; (412f0c <__register_exitproc+0xc0>)
  412eae:	b30b      	cbz	r3, 412ef4 <__register_exitproc+0xa8>
  412eb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  412eb4:	f3af 8000 	nop.w
  412eb8:	4603      	mov	r3, r0
  412eba:	b1d8      	cbz	r0, 412ef4 <__register_exitproc+0xa8>
  412ebc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  412ec0:	6002      	str	r2, [r0, #0]
  412ec2:	2100      	movs	r1, #0
  412ec4:	6041      	str	r1, [r0, #4]
  412ec6:	460a      	mov	r2, r1
  412ec8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  412ecc:	f04f 0e01 	mov.w	lr, #1
  412ed0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  412ed4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  412ed8:	2e00      	cmp	r6, #0
  412eda:	d0dc      	beq.n	412e96 <__register_exitproc+0x4a>
  412edc:	e7cc      	b.n	412e78 <__register_exitproc+0x2c>
  412ede:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  412ee2:	430c      	orrs	r4, r1
  412ee4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  412ee8:	e7d5      	b.n	412e96 <__register_exitproc+0x4a>
  412eea:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  412eee:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  412ef2:	e7bb      	b.n	412e6c <__register_exitproc+0x20>
  412ef4:	6828      	ldr	r0, [r5, #0]
  412ef6:	f7fc f99d 	bl	40f234 <__retarget_lock_release_recursive>
  412efa:	f04f 30ff 	mov.w	r0, #4294967295
  412efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  412f02:	bf00      	nop
  412f04:	20002d58 	.word	0x20002d58
  412f08:	00413920 	.word	0x00413920
  412f0c:	00000000 	.word	0x00000000

00412f10 <_calloc_r>:
  412f10:	b510      	push	{r4, lr}
  412f12:	fb02 f101 	mul.w	r1, r2, r1
  412f16:	f7fc f98f 	bl	40f238 <_malloc_r>
  412f1a:	4604      	mov	r4, r0
  412f1c:	b1d8      	cbz	r0, 412f56 <_calloc_r+0x46>
  412f1e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  412f22:	f022 0203 	bic.w	r2, r2, #3
  412f26:	3a04      	subs	r2, #4
  412f28:	2a24      	cmp	r2, #36	; 0x24
  412f2a:	d818      	bhi.n	412f5e <_calloc_r+0x4e>
  412f2c:	2a13      	cmp	r2, #19
  412f2e:	d914      	bls.n	412f5a <_calloc_r+0x4a>
  412f30:	2300      	movs	r3, #0
  412f32:	2a1b      	cmp	r2, #27
  412f34:	6003      	str	r3, [r0, #0]
  412f36:	6043      	str	r3, [r0, #4]
  412f38:	d916      	bls.n	412f68 <_calloc_r+0x58>
  412f3a:	2a24      	cmp	r2, #36	; 0x24
  412f3c:	6083      	str	r3, [r0, #8]
  412f3e:	60c3      	str	r3, [r0, #12]
  412f40:	bf11      	iteee	ne
  412f42:	f100 0210 	addne.w	r2, r0, #16
  412f46:	6103      	streq	r3, [r0, #16]
  412f48:	6143      	streq	r3, [r0, #20]
  412f4a:	f100 0218 	addeq.w	r2, r0, #24
  412f4e:	2300      	movs	r3, #0
  412f50:	6013      	str	r3, [r2, #0]
  412f52:	6053      	str	r3, [r2, #4]
  412f54:	6093      	str	r3, [r2, #8]
  412f56:	4620      	mov	r0, r4
  412f58:	bd10      	pop	{r4, pc}
  412f5a:	4602      	mov	r2, r0
  412f5c:	e7f7      	b.n	412f4e <_calloc_r+0x3e>
  412f5e:	2100      	movs	r1, #0
  412f60:	f7fc fd6c 	bl	40fa3c <memset>
  412f64:	4620      	mov	r0, r4
  412f66:	bd10      	pop	{r4, pc}
  412f68:	f100 0208 	add.w	r2, r0, #8
  412f6c:	e7ef      	b.n	412f4e <_calloc_r+0x3e>
  412f6e:	bf00      	nop

00412f70 <__ascii_mbtowc>:
  412f70:	b082      	sub	sp, #8
  412f72:	b149      	cbz	r1, 412f88 <__ascii_mbtowc+0x18>
  412f74:	b15a      	cbz	r2, 412f8e <__ascii_mbtowc+0x1e>
  412f76:	b16b      	cbz	r3, 412f94 <__ascii_mbtowc+0x24>
  412f78:	7813      	ldrb	r3, [r2, #0]
  412f7a:	600b      	str	r3, [r1, #0]
  412f7c:	7812      	ldrb	r2, [r2, #0]
  412f7e:	1c10      	adds	r0, r2, #0
  412f80:	bf18      	it	ne
  412f82:	2001      	movne	r0, #1
  412f84:	b002      	add	sp, #8
  412f86:	4770      	bx	lr
  412f88:	a901      	add	r1, sp, #4
  412f8a:	2a00      	cmp	r2, #0
  412f8c:	d1f3      	bne.n	412f76 <__ascii_mbtowc+0x6>
  412f8e:	4610      	mov	r0, r2
  412f90:	b002      	add	sp, #8
  412f92:	4770      	bx	lr
  412f94:	f06f 0001 	mvn.w	r0, #1
  412f98:	e7f4      	b.n	412f84 <__ascii_mbtowc+0x14>
  412f9a:	bf00      	nop

00412f9c <__ascii_wctomb>:
  412f9c:	b121      	cbz	r1, 412fa8 <__ascii_wctomb+0xc>
  412f9e:	2aff      	cmp	r2, #255	; 0xff
  412fa0:	d804      	bhi.n	412fac <__ascii_wctomb+0x10>
  412fa2:	700a      	strb	r2, [r1, #0]
  412fa4:	2001      	movs	r0, #1
  412fa6:	4770      	bx	lr
  412fa8:	4608      	mov	r0, r1
  412faa:	4770      	bx	lr
  412fac:	238a      	movs	r3, #138	; 0x8a
  412fae:	6003      	str	r3, [r0, #0]
  412fb0:	f04f 30ff 	mov.w	r0, #4294967295
  412fb4:	4770      	bx	lr
  412fb6:	bf00      	nop

00412fb8 <__aeabi_uldivmod>:
  412fb8:	b953      	cbnz	r3, 412fd0 <__aeabi_uldivmod+0x18>
  412fba:	b94a      	cbnz	r2, 412fd0 <__aeabi_uldivmod+0x18>
  412fbc:	2900      	cmp	r1, #0
  412fbe:	bf08      	it	eq
  412fc0:	2800      	cmpeq	r0, #0
  412fc2:	bf1c      	itt	ne
  412fc4:	f04f 31ff 	movne.w	r1, #4294967295
  412fc8:	f04f 30ff 	movne.w	r0, #4294967295
  412fcc:	f7fc b900 	b.w	40f1d0 <__aeabi_idiv0>
  412fd0:	f1ad 0c08 	sub.w	ip, sp, #8
  412fd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  412fd8:	f7fb ff8c 	bl	40eef4 <__udivmoddi4>
  412fdc:	f8dd e004 	ldr.w	lr, [sp, #4]
  412fe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  412fe4:	b004      	add	sp, #16
  412fe6:	4770      	bx	lr
  412fe8:	74696e49 	.word	0x74696e49
  412fec:	696c6169 	.word	0x696c6169
  412ff0:	4920657a 	.word	0x4920657a
  412ff4:	00004d43 	.word	0x00004d43
  412ff8:	20212121 	.word	0x20212121
  412ffc:	4f525245 	.word	0x4f525245
  413000:	203a2052 	.word	0x203a2052
  413004:	6c696166 	.word	0x6c696166
  413008:	74206465 	.word	0x74206465
  41300c:	6e69206f 	.word	0x6e69206f
  413010:	61697469 	.word	0x61697469
  413014:	657a696c 	.word	0x657a696c
  413018:	6d634920 	.word	0x6d634920
  41301c:	78363234 	.word	0x78363234
  413020:	00002e78 	.word	0x00002e78
  413024:	63656843 	.word	0x63656843
  413028:	4349206b 	.word	0x4349206b
  41302c:	6877204d 	.word	0x6877204d
  413030:	696d616f 	.word	0x696d616f
  413034:	6c617620 	.word	0x6c617620
  413038:	00006575 	.word	0x00006575
  41303c:	20212121 	.word	0x20212121
  413040:	4f525245 	.word	0x4f525245
  413044:	203a2052 	.word	0x203a2052
  413048:	6c696166 	.word	0x6c696166
  41304c:	74206465 	.word	0x74206465
  413050:	6572206f 	.word	0x6572206f
  413054:	49206461 	.word	0x49206461
  413058:	32346d63 	.word	0x32346d63
  41305c:	20787836 	.word	0x20787836
  413060:	616f6877 	.word	0x616f6877
  413064:	7620696d 	.word	0x7620696d
  413068:	65756c61 	.word	0x65756c61
  41306c:	0000002e 	.word	0x0000002e
  413070:	20212121 	.word	0x20212121
  413074:	4f525245 	.word	0x4f525245
  413078:	203a2052 	.word	0x203a2052
  41307c:	64616220 	.word	0x64616220
  413080:	4f485720 	.word	0x4f485720
  413084:	20494d41 	.word	0x20494d41
  413088:	756c6176 	.word	0x756c6176
  41308c:	47202e65 	.word	0x47202e65
  413090:	3020746f 	.word	0x3020746f
  413094:	32302578 	.word	0x32302578
  413098:	65282078 	.word	0x65282078
  41309c:	63657078 	.word	0x63657078
  4130a0:	3a646574 	.word	0x3a646574
  4130a4:	25783020 	.word	0x25783020
  4130a8:	29783230 	.word	0x29783230
  4130ac:	00000000 	.word	0x00000000
  4130b0:	42202020 	.word	0x42202020
  4130b4:	65736169 	.word	0x65736169
  4130b8:	6f6c2073 	.word	0x6f6c2073
  4130bc:	64656461 	.word	0x64656461
  4130c0:	6f726620 	.word	0x6f726620
  4130c4:	6c66206d 	.word	0x6c66206d
  4130c8:	3a687361 	.word	0x3a687361
  4130cc:	00000000 	.word	0x00000000
  4130d0:	20202020 	.word	0x20202020
  4130d4:	6341202d 	.word	0x6341202d
  4130d8:	3a6c6563 	.word	0x3a6c6563
  4130dc:	66255b20 	.word	0x66255b20
  4130e0:	20662520 	.word	0x20662520
  4130e4:	675d6625 	.word	0x675d6625
  4130e8:	00000000 	.word	0x00000000
  4130ec:	20202020 	.word	0x20202020
  4130f0:	7947202d 	.word	0x7947202d
  4130f4:	203a6f72 	.word	0x203a6f72
  4130f8:	66255b20 	.word	0x66255b20
  4130fc:	20662520 	.word	0x20662520
  413100:	645d6625 	.word	0x645d6625
  413104:	00007370 	.word	0x00007370
  413108:	20202020 	.word	0x20202020
  41310c:	614d202d 	.word	0x614d202d
  413110:	20203a67 	.word	0x20203a67
  413114:	66255b20 	.word	0x66255b20
  413118:	20662520 	.word	0x20662520
  41311c:	755d6625 	.word	0x755d6625
  413120:	00000054 	.word	0x00000054
  413124:	4e202020 	.word	0x4e202020
  413128:	6962206f 	.word	0x6962206f
  41312c:	76207361 	.word	0x76207361
  413130:	65756c61 	.word	0x65756c61
  413134:	65722073 	.word	0x65722073
  413138:	65697274 	.word	0x65697274
  41313c:	00646576 	.word	0x00646576
  413140:	25207525 	.word	0x25207525
  413144:	66252066 	.word	0x66252066
  413148:	20662520 	.word	0x20662520
  41314c:	25206625 	.word	0x25206625
  413150:	66252066 	.word	0x66252066
  413154:	00662520 	.word	0x00662520
  413158:	6f727245 	.word	0x6f727245
  41315c:	68772072 	.word	0x68772072
  413160:	20656c69 	.word	0x20656c69
  413164:	74746573 	.word	0x74746573
  413168:	20676e69 	.word	0x20676e69
  41316c:	4d207075 	.word	0x4d207075
  413170:	00005543 	.word	0x00005543
  413174:	74696e49 	.word	0x74696e49
  413178:	696c6169 	.word	0x696c6169
  41317c:	676e697a 	.word	0x676e697a
  413180:	4d434920 	.word	0x4d434920
  413184:	76656420 	.word	0x76656420
  413188:	2e656369 	.word	0x2e656369
  41318c:	00002e2e 	.word	0x00002e2e
  413190:	6f727245 	.word	0x6f727245
  413194:	68772072 	.word	0x68772072
  413198:	20656c69 	.word	0x20656c69
  41319c:	74746573 	.word	0x74746573
  4131a0:	20676e69 	.word	0x20676e69
  4131a4:	49207075 	.word	0x49207075
  4131a8:	64204d43 	.word	0x64204d43
  4131ac:	63697665 	.word	0x63697665
  4131b0:	00000065 	.word	0x00000065
  4131b4:	00004b4f 	.word	0x00004b4f
  4131b8:	74696e49 	.word	0x74696e49
  4131bc:	696c6169 	.word	0x696c6169
  4131c0:	676e697a 	.word	0x676e697a
  4131c4:	676c6120 	.word	0x676c6120
  4131c8:	7469726f 	.word	0x7469726f
  4131cc:	2e2e6d68 	.word	0x2e2e6d68
  4131d0:	0000002e 	.word	0x0000002e
  4131d4:	6f727245 	.word	0x6f727245
  4131d8:	68772072 	.word	0x68772072
  4131dc:	20656c69 	.word	0x20656c69
  4131e0:	74696e69 	.word	0x74696e69
  4131e4:	696c6169 	.word	0x696c6169
  4131e8:	676e697a 	.word	0x676e697a
  4131ec:	4d474120 	.word	0x4d474120
  4131f0:	676c6120 	.word	0x676c6120
  4131f4:	7469726f 	.word	0x7469726f
  4131f8:	00006d68 	.word	0x00006d68
  4131fc:	666e6f43 	.word	0x666e6f43
  413200:	72756769 	.word	0x72756769
  413204:	20676e69 	.word	0x20676e69
  413208:	204d4349 	.word	0x204d4349
  41320c:	69766564 	.word	0x69766564
  413210:	2e2e6563 	.word	0x2e2e6563
  413214:	0000002e 	.word	0x0000002e
  413218:	6f727245 	.word	0x6f727245
  41321c:	68772072 	.word	0x68772072
  413220:	20656c69 	.word	0x20656c69
  413224:	666e6f63 	.word	0x666e6f63
  413228:	72756769 	.word	0x72756769
  41322c:	20676e69 	.word	0x20676e69
  413230:	204d4349 	.word	0x204d4349
  413234:	69766564 	.word	0x69766564
  413238:	00006563 	.word	0x00006563
  41323c:	23232323 	.word	0x23232323
  413240:	23232323 	.word	0x23232323
  413244:	23232323 	.word	0x23232323
  413248:	23232323 	.word	0x23232323
  41324c:	23232323 	.word	0x23232323
  413250:	23232323 	.word	0x23232323
  413254:	23232323 	.word	0x23232323
  413258:	23232323 	.word	0x23232323
  41325c:	23232323 	.word	0x23232323
  413260:	23232323 	.word	0x23232323
  413264:	23232323 	.word	0x23232323
  413268:	23232323 	.word	0x23232323
  41326c:	00002323 	.word	0x00002323
  413270:	342d4b44 	.word	0x342d4b44
  413274:	35303632 	.word	0x35303632
  413278:	74616420 	.word	0x74616420
  41327c:	74732061 	.word	0x74732061
  413280:	6d616572 	.word	0x6d616572
  413284:	20676e69 	.word	0x20676e69
  413288:	6c707061 	.word	0x6c707061
  41328c:	74616369 	.word	0x74616369
  413290:	006e6f69 	.word	0x006e6f69
  413294:	67696c53 	.word	0x67696c53
  413298:	796c7468 	.word	0x796c7468
  41329c:	646f6d20 	.word	0x646f6d20
  4132a0:	65696669 	.word	0x65696669
  4132a4:	72662064 	.word	0x72662064
  4132a8:	74206d6f 	.word	0x74206d6f
  4132ac:	6f206568 	.word	0x6f206568
  4132b0:	63696666 	.word	0x63696666
  4132b4:	206c6169 	.word	0x206c6169
  4132b8:	6d617865 	.word	0x6d617865
  4132bc:	20656c70 	.word	0x20656c70
  4132c0:	61786528 	.word	0x61786528
  4132c4:	656c706d 	.word	0x656c706d
  4132c8:	676c612d 	.word	0x676c612d
  4132cc:	0000296f 	.word	0x0000296f
  4132d0:	736e694a 	.word	0x736e694a
  4132d4:	50206e75 	.word	0x50206e75
  4132d8:	206b7261 	.word	0x206b7261
  4132dc:	617a7a28 	.word	0x617a7a28
  4132e0:	696a676e 	.word	0x696a676e
  4132e4:	6e75736e 	.word	0x6e75736e
  4132e8:	65733340 	.word	0x65733340
  4132ec:	646e6f63 	.word	0x646e6f63
  4132f0:	6f632e7a 	.word	0x6f632e7a
  4132f4:	0000296d 	.word	0x0000296d
  4132f8:	00000020 	.word	0x00000020
  4132fc:	72727543 	.word	0x72727543
  413300:	20746e65 	.word	0x20746e65
  413304:	75746573 	.word	0x75746573
  413308:	203a2070 	.word	0x203a2070
  41330c:	00000000 	.word	0x00000000
  413310:	63634120 	.word	0x63634120
  413314:	52534620 	.word	0x52534620
  413318:	32203a20 	.word	0x32203a20
  41331c:	00000067 	.word	0x00000067
  413320:	63634120 	.word	0x63634120
  413324:	52444f20 	.word	0x52444f20
  413328:	31203a20 	.word	0x31203a20
  41332c:	7a483030 	.word	0x7a483030
  413330:	00000000 	.word	0x00000000
  413334:	72794720 	.word	0x72794720
  413338:	52534620 	.word	0x52534620
  41333c:	31203a20 	.word	0x31203a20
  413340:	70643532 	.word	0x70643532
  413344:	00000073 	.word	0x00000073
  413348:	72794720 	.word	0x72794720
  41334c:	52444f20 	.word	0x52444f20
  413350:	31203a20 	.word	0x31203a20
  413354:	7a483030 	.word	0x7a483030
  413358:	00000000 	.word	0x00000000
  41335c:	7074754f 	.word	0x7074754f
  413360:	66207475 	.word	0x66207475
  413364:	616d726f 	.word	0x616d726f
  413368:	203a2074 	.word	0x203a2074
  41336c:	6d69745b 	.word	0x6d69745b
  413370:	61747365 	.word	0x61747365
  413374:	4120706d 	.word	0x4120706d
  413378:	20586363 	.word	0x20586363
  41337c:	59636341 	.word	0x59636341
  413380:	63634120 	.word	0x63634120
  413384:	6554205a 	.word	0x6554205a
  413388:	4720706d 	.word	0x4720706d
  41338c:	20587279 	.word	0x20587279
  413390:	59727947 	.word	0x59727947
  413394:	72794720 	.word	0x72794720
  413398:	0000005a 	.word	0x0000005a
  41339c:	7473614c 	.word	0x7473614c
  4133a0:	64707520 	.word	0x64707520
  4133a4:	64657461 	.word	0x64657461
  4133a8:	32203a20 	.word	0x32203a20
  4133ac:	2d303230 	.word	0x2d303230
  4133b0:	322d3530 	.word	0x322d3530
  4133b4:	35312038 	.word	0x35312038
  4133b8:	0037353a 	.word	0x0037353a
  4133bc:	72617453 	.word	0x72617453
  4133c0:	72702074 	.word	0x72702074
  4133c4:	7365636f 	.word	0x7365636f
  4133c8:	676e6973 	.word	0x676e6973
  4133cc:	00000000 	.word	0x00000000
  4133d0:	6f727265 	.word	0x6f727265
  4133d4:	68772072 	.word	0x68772072
  4133d8:	20656c69 	.word	0x20656c69
  4133dc:	74746567 	.word	0x74746567
  4133e0:	20676e69 	.word	0x20676e69
  4133e4:	61746164 	.word	0x61746164
  4133e8:	6f726620 	.word	0x6f726620
  4133ec:	6349206d 	.word	0x6349206d
  4133f0:	3632346d 	.word	0x3632346d
  4133f4:	00007878 	.word	0x00007878
  4133f8:	6f727245 	.word	0x6f727245
  4133fc:	68772072 	.word	0x68772072
  413400:	20656c69 	.word	0x20656c69
  413404:	74696e69 	.word	0x74696e69
  413408:	696c6169 	.word	0x696c6169
  41340c:	676e697a 	.word	0x676e697a
  413410:	20525620 	.word	0x20525620
  413414:	65726854 	.word	0x65726854
  413418:	666f6465 	.word	0x666f6465
  41341c:	676c6120 	.word	0x676c6120
  413420:	7469726f 	.word	0x7469726f
  413424:	00736d68 	.word	0x00736d68
  413428:	6e6b6e55 	.word	0x6e6b6e55
  41342c:	206e776f 	.word	0x206e776f
  413430:	6d6d6f63 	.word	0x6d6d6f63
  413434:	20646e61 	.word	0x20646e61
  413438:	6325203a 	.word	0x6325203a
  41343c:	00000000 	.word	0x00000000
  413440:	23232323 	.word	0x23232323
  413444:	23232323 	.word	0x23232323
  413448:	23232323 	.word	0x23232323
  41344c:	23232323 	.word	0x23232323
  413450:	23232323 	.word	0x23232323
  413454:	23232323 	.word	0x23232323
  413458:	00002323 	.word	0x00002323
  41345c:	20202023 	.word	0x20202023
  413460:	706c6548 	.word	0x706c6548
  413464:	45202d20 	.word	0x45202d20
  413468:	706d6178 	.word	0x706d6178
  41346c:	4120656c 	.word	0x4120656c
  413470:	206f676c 	.word	0x206f676c
  413474:	00002320 	.word	0x00002320
  413478:	27692709 	.word	0x27692709
  41347c:	70203a20 	.word	0x70203a20
  413480:	746e6972 	.word	0x746e6972
  413484:	706e6920 	.word	0x706e6920
  413488:	64207475 	.word	0x64207475
  41348c:	20617461 	.word	0x20617461
  413490:	77617228 	.word	0x77617228
  413494:	63636120 	.word	0x63636120
  413498:	202c6c65 	.word	0x202c6c65
  41349c:	20776172 	.word	0x20776172
  4134a0:	6f727967 	.word	0x6f727967
  4134a4:	646e6120 	.word	0x646e6120
  4134a8:	77617220 	.word	0x77617220
  4134ac:	67616d20 	.word	0x67616d20
  4134b0:	00000029 	.word	0x00000029
  4134b4:	27612709 	.word	0x27612709
  4134b8:	70203a20 	.word	0x70203a20
  4134bc:	746e6972 	.word	0x746e6972
  4134c0:	63636120 	.word	0x63636120
  4134c4:	64206c65 	.word	0x64206c65
  4134c8:	00617461 	.word	0x00617461
  4134cc:	27672709 	.word	0x27672709
  4134d0:	70203a20 	.word	0x70203a20
  4134d4:	746e6972 	.word	0x746e6972
  4134d8:	72796720 	.word	0x72796720
  4134dc:	6164206f 	.word	0x6164206f
  4134e0:	00006174 	.word	0x00006174
  4134e4:	27362709 	.word	0x27362709
  4134e8:	70203a20 	.word	0x70203a20
  4134ec:	746e6972 	.word	0x746e6972
  4134f0:	76726720 	.word	0x76726720
  4134f4:	61757120 	.word	0x61757120
  4134f8:	6e726574 	.word	0x6e726574
  4134fc:	206e6f69 	.word	0x206e6f69
  413500:	61746164 	.word	0x61746164
  413504:	646e6120 	.word	0x646e6120
  413508:	6c756520 	.word	0x6c756520
  41350c:	20737265 	.word	0x20737265
  413510:	6c676e61 	.word	0x6c676e61
  413514:	28207365 	.word	0x28207365
  413518:	69786136 	.word	0x69786136
  41351c:	75662073 	.word	0x75662073
  413520:	6e6f6973 	.word	0x6e6f6973
  413524:	00000029 	.word	0x00000029
  413528:	27472709 	.word	0x27472709
  41352c:	70203a20 	.word	0x70203a20
  413530:	746e6972 	.word	0x746e6972
  413534:	61726720 	.word	0x61726720
  413538:	79746976 	.word	0x79746976
  41353c:	74736520 	.word	0x74736520
  413540:	74616d69 	.word	0x74616d69
  413544:	206e6f69 	.word	0x206e6f69
  413548:	73206e69 	.word	0x73206e69
  41354c:	6f736e65 	.word	0x6f736e65
  413550:	72662072 	.word	0x72662072
  413554:	00656d61 	.word	0x00656d61
  413558:	276c2709 	.word	0x276c2709
  41355c:	70203a20 	.word	0x70203a20
  413560:	746e6972 	.word	0x746e6972
  413564:	6e696c20 	.word	0x6e696c20
  413568:	20726165 	.word	0x20726165
  41356c:	65636361 	.word	0x65636361
  413570:	6172656c 	.word	0x6172656c
  413574:	6e6f6974 	.word	0x6e6f6974
  413578:	74736520 	.word	0x74736520
  41357c:	74616d69 	.word	0x74616d69
  413580:	206e6f69 	.word	0x206e6f69
  413584:	73206e69 	.word	0x73206e69
  413588:	6f736e65 	.word	0x6f736e65
  41358c:	72662072 	.word	0x72662072
  413590:	00656d61 	.word	0x00656d61
  413594:	27722709 	.word	0x27722709
  413598:	72203a20 	.word	0x72203a20
  41359c:	74657365 	.word	0x74657365
  4135a0:	61696220 	.word	0x61696220
  4135a4:	20736573 	.word	0x20736573
  4135a8:	20646e61 	.word	0x20646e61
  4135ac:	75636361 	.word	0x75636361
  4135b0:	69636172 	.word	0x69636172
  4135b4:	28207365 	.word	0x28207365
  4135b8:	6c6c6977 	.word	0x6c6c6977
  4135bc:	736c6120 	.word	0x736c6120
  4135c0:	6572206f 	.word	0x6572206f
  4135c4:	74696e69 	.word	0x74696e69
  4135c8:	676c6120 	.word	0x676c6120
  4135cc:	7469726f 	.word	0x7469726f
  4135d0:	00296d68 	.word	0x00296d68
  4135d4:	27662709 	.word	0x27662709
  4135d8:	74203a20 	.word	0x74203a20
  4135dc:	6c67676f 	.word	0x6c67676f
  4135e0:	61662065 	.word	0x61662065
  4135e4:	6d2d7473 	.word	0x6d2d7473
  4135e8:	2065646f 	.word	0x2065646f
  4135ec:	74616428 	.word	0x74616428
  4135f0:	72702061 	.word	0x72702061
  4135f4:	65746e69 	.word	0x65746e69
  4135f8:	76652064 	.word	0x76652064
  4135fc:	20797265 	.word	0x20797265
  413600:	6d203032 	.word	0x6d203032
  413604:	726f2073 	.word	0x726f2073
  413608:	65766520 	.word	0x65766520
  41360c:	31207972 	.word	0x31207972
  413610:	00297320 	.word	0x00297320
  413614:	27682709 	.word	0x27682709
  413618:	70203a20 	.word	0x70203a20
  41361c:	746e6972 	.word	0x746e6972
  413620:	69687420 	.word	0x69687420
  413624:	65682073 	.word	0x65682073
  413628:	7265706c 	.word	0x7265706c
  41362c:	00000000 	.word	0x00000000
  413630:	203a7325 	.word	0x203a7325
  413634:	6f727265 	.word	0x6f727265
  413638:	64252072 	.word	0x64252072
  41363c:	73252820 	.word	0x73252820
  413640:	000a0d29 	.word	0x000a0d29
  413644:	00000a0d 	.word	0x00000a0d
  413648:	2e302e32 	.word	0x2e302e32
  41364c:	00000031 	.word	0x00000031
  413650:	00010000 	.word	0x00010000
  413654:	01010101 	.word	0x01010101
  413658:	01010101 	.word	0x01010101
  41365c:	00000101 	.word	0x00000101
  413660:	004c4c50 	.word	0x004c4c50
  413664:	4f5f4352 	.word	0x4f5f4352
  413668:	00004353 	.word	0x00004353
  41366c:	4f5f5557 	.word	0x4f5f5557
  413670:	00004353 	.word	0x00004353
  413674:	73206f4e 	.word	0x73206f4e
  413678:	6372756f 	.word	0x6372756f
  41367c:	00000065 	.word	0x00000065
  413680:	706c6548 	.word	0x706c6548
  413684:	6c437265 	.word	0x6c437265
  413688:	436b636f 	.word	0x436b636f
  41368c:	62696c61 	.word	0x62696c61
  413690:	6e49203a 	.word	0x6e49203a
  413694:	61697469 	.word	0x61697469
  413698:	6f63206c 	.word	0x6f63206c
  41369c:	69666665 	.word	0x69666665
  4136a0:	6e656963 	.word	0x6e656963
  4136a4:	6f632074 	.word	0x6f632074
  4136a8:	7475706d 	.word	0x7475706d
  4136ac:	003a6465 	.word	0x003a6465
  4136b0:	706c6548 	.word	0x706c6548
  4136b4:	6c437265 	.word	0x6c437265
  4136b8:	436b636f 	.word	0x436b636f
  4136bc:	62696c61 	.word	0x62696c61
  4136c0:	2020203a 	.word	0x2020203a
  4136c4:	50202d20 	.word	0x50202d20
  4136c8:	203a4c4c 	.word	0x203a4c4c
  4136cc:	25202020 	.word	0x25202020
  4136d0:	00000066 	.word	0x00000066
  4136d4:	706c6548 	.word	0x706c6548
  4136d8:	6c437265 	.word	0x6c437265
  4136dc:	436b636f 	.word	0x436b636f
  4136e0:	62696c61 	.word	0x62696c61
  4136e4:	2020203a 	.word	0x2020203a
  4136e8:	52202d20 	.word	0x52202d20
  4136ec:	534f5f43 	.word	0x534f5f43
  4136f0:	25203a43 	.word	0x25203a43
  4136f4:	00000066 	.word	0x00000066
  4136f8:	706c6548 	.word	0x706c6548
  4136fc:	6c437265 	.word	0x6c437265
  413700:	436b636f 	.word	0x436b636f
  413704:	62696c61 	.word	0x62696c61
  413708:	2020203a 	.word	0x2020203a
  41370c:	57202d20 	.word	0x57202d20
  413710:	534f5f55 	.word	0x534f5f55
  413714:	25203a43 	.word	0x25203a43
  413718:	00000066 	.word	0x00000066
  41371c:	706c6568 	.word	0x706c6568
  413720:	6c437265 	.word	0x6c437265
  413724:	436b636f 	.word	0x436b636f
  413728:	62696c61 	.word	0x62696c61
  41372c:	654e203a 	.word	0x654e203a
  413730:	6f632077 	.word	0x6f632077
  413734:	69666665 	.word	0x69666665
  413738:	6e656963 	.word	0x6e656963
  41373c:	6f632074 	.word	0x6f632074
  413740:	7475706d 	.word	0x7475706d
  413744:	66206465 	.word	0x66206465
  413748:	2520726f 	.word	0x2520726f
  41374c:	25203a73 	.word	0x25203a73
  413750:	00000066 	.word	0x00000066
  413754:	706c6568 	.word	0x706c6568
  413758:	6c437265 	.word	0x6c437265
  41375c:	436b636f 	.word	0x436b636f
  413760:	62696c61 	.word	0x62696c61
  413764:	6142203a 	.word	0x6142203a
  413768:	6f632064 	.word	0x6f632064
  41376c:	69666665 	.word	0x69666665
  413770:	6e656963 	.word	0x6e656963
  413774:	6f632074 	.word	0x6f632074
  413778:	7475706d 	.word	0x7475706d
  41377c:	66206465 	.word	0x66206465
  413780:	2520726f 	.word	0x2520726f
  413784:	25203a73 	.word	0x25203a73
  413788:	73202c66 	.word	0x73202c66
  41378c:	7070696b 	.word	0x7070696b
  413790:	20676e69 	.word	0x20676e69
  413794:	61207469 	.word	0x61207469
  413798:	6b20646e 	.word	0x6b20646e
  41379c:	69706565 	.word	0x69706565
  4137a0:	2520676e 	.word	0x2520676e
  4137a4:	00000066 	.word	0x00000066
  4137a8:	63637553 	.word	0x63637553
  4137ac:	00737365 	.word	0x00737365
  4137b0:	70736e55 	.word	0x70736e55
  4137b4:	66696365 	.word	0x66696365
  4137b8:	20646569 	.word	0x20646569
  4137bc:	6f727265 	.word	0x6f727265
  4137c0:	00000072 	.word	0x00000072
  4137c4:	20746f4e 	.word	0x20746f4e
  4137c8:	6c706d69 	.word	0x6c706d69
  4137cc:	6e656d65 	.word	0x6e656d65
  4137d0:	00646574 	.word	0x00646574
  4137d4:	6e617254 	.word	0x6e617254
  4137d8:	726f7073 	.word	0x726f7073
  4137dc:	72652074 	.word	0x72652074
  4137e0:	00726f72 	.word	0x00726f72
  4137e4:	656d6954 	.word	0x656d6954
  4137e8:	2c74756f 	.word	0x2c74756f
  4137ec:	74636120 	.word	0x74636120
  4137f0:	206e6f69 	.word	0x206e6f69
  4137f4:	20646964 	.word	0x20646964
  4137f8:	20746f6e 	.word	0x20746f6e
  4137fc:	706d6f63 	.word	0x706d6f63
  413800:	6574656c 	.word	0x6574656c
  413804:	206e6920 	.word	0x206e6920
  413808:	656d6974 	.word	0x656d6974
  41380c:	00000000 	.word	0x00000000
  413810:	6e6f7257 	.word	0x6e6f7257
  413814:	69732067 	.word	0x69732067
  413818:	6520657a 	.word	0x6520657a
  41381c:	726f7272 	.word	0x726f7272
  413820:	00000000 	.word	0x00000000
  413824:	7265704f 	.word	0x7265704f
  413828:	6e697461 	.word	0x6e697461
  41382c:	79732067 	.word	0x79732067
  413830:	6d657473 	.word	0x6d657473
  413834:	69616620 	.word	0x69616620
  413838:	6572756c 	.word	0x6572756c
  41383c:	00000000 	.word	0x00000000
  413840:	75706e49 	.word	0x75706e49
  413844:	754f2f74 	.word	0x754f2f74
  413848:	74757074 	.word	0x74757074
  41384c:	72726520 	.word	0x72726520
  413850:	0000726f 	.word	0x0000726f
  413854:	20646142 	.word	0x20646142
  413858:	6f6c6c61 	.word	0x6f6c6c61
  41385c:	69746163 	.word	0x69746163
  413860:	00006e6f 	.word	0x00006e6f
  413864:	64726148 	.word	0x64726148
  413868:	65726177 	.word	0x65726177
  41386c:	72726520 	.word	0x72726520
  413870:	0000726f 	.word	0x0000726f
  413874:	61766e49 	.word	0x61766e49
  413878:	2064696c 	.word	0x2064696c
  41387c:	75677261 	.word	0x75677261
  413880:	746e656d 	.word	0x746e656d
  413884:	00000073 	.word	0x00000073
  413888:	78656e55 	.word	0x78656e55
  41388c:	74636570 	.word	0x74636570
  413890:	65206465 	.word	0x65206465
  413894:	726f7272 	.word	0x726f7272
  413898:	00000000 	.word	0x00000000
  41389c:	61766e49 	.word	0x61766e49
  4138a0:	2064696c 	.word	0x2064696c
  4138a4:	656c6966 	.word	0x656c6966
  4138a8:	726f6620 	.word	0x726f6620
  4138ac:	0074616d 	.word	0x0074616d
  4138b0:	61766e49 	.word	0x61766e49
  4138b4:	2064696c 	.word	0x2064696c
  4138b8:	656c6966 	.word	0x656c6966
  4138bc:	74617020 	.word	0x74617020
  4138c0:	00000068 	.word	0x00000068
  4138c4:	6e6b6e55 	.word	0x6e6b6e55
  4138c8:	206e776f 	.word	0x206e776f
  4138cc:	67616d69 	.word	0x67616d69
  4138d0:	79742065 	.word	0x79742065
  4138d4:	00006570 	.word	0x00006570
  4138d8:	63746157 	.word	0x63746157
  4138dc:	676f6468 	.word	0x676f6468
  4138e0:	72726520 	.word	0x72726520
  4138e4:	0000726f 	.word	0x0000726f
  4138e8:	6e6b6e55 	.word	0x6e6b6e55
  4138ec:	206e776f 	.word	0x206e776f
  4138f0:	6f727265 	.word	0x6f727265
  4138f4:	00000072 	.word	0x00000072
  4138f8:	6e697361 	.word	0x6e697361
  4138fc:	00000066 	.word	0x00000066

00413900 <atanhi>:
  413900:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

00413910 <atanlo>:
  413910:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

00413920 <_global_impure_ptr>:
  413920:	20002520 00464e49 00666e69 004e414e      %. INF.inf.NAN.
  413930:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  413940:	46454443 00000000 33323130 37363534     CDEF....01234567
  413950:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  413960:	0000296c 00000030                       l)..0...

00413968 <blanks.8346>:
  413968:	20202020 20202020 20202020 20202020                     

00413978 <zeroes.8347>:
  413978:	30303030 30303030 30303030 30303030     0000000000000000
  413988:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00413998 <__mprec_bigtens>:
  413998:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4139a8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4139b8:	7f73bf3c 75154fdd                       <.s..O.u

004139c0 <__mprec_tens>:
  4139c0:	00000000 3ff00000 00000000 40240000     .......?......$@
  4139d0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4139e0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4139f0:	00000000 412e8480 00000000 416312d0     .......A......cA
  413a00:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  413a10:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  413a20:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  413a30:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  413a40:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  413a50:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  413a60:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  413a70:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  413a80:	79d99db4 44ea7843                       ...yCx.D

00413a88 <p05.7178>:
  413a88:	00000005 00000019 0000007d 00000043     ........}...C...
  413a98:	49534f50 00000058 0000002e              POSIX.......

00413aa4 <_ctype_>:
  413aa4:	20202000 20202020 28282020 20282828     .         ((((( 
  413ab4:	20202020 20202020 20202020 20202020                     
  413ac4:	10108820 10101010 10101010 10101010      ...............
  413ad4:	04040410 04040404 10040404 10101010     ................
  413ae4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  413af4:	01010101 01010101 01010101 10101010     ................
  413b04:	42421010 42424242 02020202 02020202     ..BBBBBB........
  413b14:	02020202 02020202 02020202 10101010     ................
  413b24:	00000020 00000000 00000000 00000000      ...............
	...

00413ba8 <_init>:
  413ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413baa:	bf00      	nop
  413bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413bae:	bc08      	pop	{r3}
  413bb0:	469e      	mov	lr, r3
  413bb2:	4770      	bx	lr

00413bb4 <__init_array_start>:
  413bb4:	00411509 	.word	0x00411509

00413bb8 <__frame_dummy_init_array_entry>:
  413bb8:	0040016d                                m.@.

00413bbc <_fini>:
  413bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413bbe:	bf00      	nop
  413bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413bc2:	bc08      	pop	{r3}
  413bc4:	469e      	mov	lr, r3
  413bc6:	4770      	bx	lr

00413bc8 <__fini_array_start>:
  413bc8:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || \
	   SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAMS70 || SAME70)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	683a      	ldr	r2, [r7, #0]
20000052:	4413      	add	r3, r2
20000054:	69fa      	ldr	r2, [r7, #28]
20000056:	0092      	lsls	r2, r2, #2
20000058:	69b9      	ldr	r1, [r7, #24]
2000005a:	440a      	add	r2, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	f85d 7b04 	ldr.w	r7, [sp], #4
200000a2:	4770      	bx	lr

200000a4 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a4:	b480      	push	{r7}
200000a6:	b083      	sub	sp, #12
200000a8:	af00      	add	r7, sp, #0
200000aa:	6078      	str	r0, [r7, #4]
200000ac:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ae:	687b      	ldr	r3, [r7, #4]
200000b0:	683a      	ldr	r2, [r7, #0]
200000b2:	601a      	str	r2, [r3, #0]
}
200000b4:	bf00      	nop
200000b6:	370c      	adds	r7, #12
200000b8:	46bd      	mov	sp, r7
200000ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200000be:	4770      	bx	lr

200000c0 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000c0:	b480      	push	{r7}
200000c2:	b085      	sub	sp, #20
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	683a      	ldr	r2, [r7, #0]
200000ce:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000d0:	687b      	ldr	r3, [r7, #4]
200000d2:	689b      	ldr	r3, [r3, #8]
200000d4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d6:	68fb      	ldr	r3, [r7, #12]
200000d8:	f003 0301 	and.w	r3, r3, #1
200000dc:	2b01      	cmp	r3, #1
200000de:	d1f7      	bne.n	200000d0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	f003 030e 	and.w	r3, r3, #14
}
200000e6:	4618      	mov	r0, r3
200000e8:	3714      	adds	r7, #20
200000ea:	46bd      	mov	sp, r7
200000ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200000f0:	4770      	bx	lr
	...

200000f4 <icm_mounting_matrix>:
200000f4:	0000 4000 0000 0000 0000 0000 0000 0000     ...@............
20000104:	0000 4000 0000 0000 0000 0000 0000 0000     ...@............
20000114:	0000 4000                                   ...@

20000118 <ul_test_page_addr>:
20000118:	fe00 0047                                   ..G.

2000011c <gm>:
2000011c:	1000 400e 000c 0000 0023 0000 0008 0000     ...@....#.......
2000012c:	0000 2800 0070 0000 000c 0000 0000 0000     ...(p...........
2000013c:	0000 0000 1000 400e 000c 0000 002f 0000     .......@..../...
2000014c:	8000 0000 0000 2800 0070 0000 000c 0000     .......(p.......
	...
20000164:	0e00 400e 000b 0000 001d 0000 0000 2000     ...@........... 
20000174:	0000 2800 0070 0000 000b 0000 0000 0000     ...(p...........
20000184:	0000 0000 0e00 400e 000b 0000 000f 0000     .......@........
20000194:	8000 0000 0000 2800 0070 0000 000b 0000     .......(p.......
	...
200001ac:	0e00 400e 000b 0000 0002 0000 0004 0000     ...@............
200001bc:	0000 2800 0059 0000 000b 0000 0000 0000     ...(Y...........
200001cc:	0000 0000 0e00 400e 000b 0000 0011 0000     .......@........
200001dc:	0000 0002 0000 3000 0000 0000 000b 0000     .......0........
	...

200001f4 <i2cm>:
200001f4:	0000 0000 c600 4001 c000 4001 0029 0000     .......@...@)...
20000204:	0000 0000 0028 0000 0000 0000 1a80 0006     ....(...........

20000214 <sm>:
20000214:	8400 4000 0000 0000 8000 4000 0000 0000     ...@.......@....
20000224:	0001 0000 0000 0000 0140 0000 000e 0000     ........@.......
20000234:	0000 0000 000d 0000 0000 0000 000c 0000     ................
20000244:	0000 0000 000b 0000 0000 0000 0000 0000     ................
	...
20001290:	0015 0000 0000 0000 0000 0000 0000 0000     ................
200012a0:	8400 4000 0000 0000 8000 4000 0001 0000     ...@.......@....
200012b0:	0001 0000 0000 0000 0140 0000 000e 0000     ........@.......
200012c0:	0000 0000 000d 0000 0000 0000 000c 0000     ................
200012d0:	0000 0000 0005 0000 0001 0000 0000 0000     ................
	...
2000231c:	0015 0000 0000 0000 0000 0000 0000 0000     ................

2000232c <tm>:
2000232c:	0000 4001 0001 0000 0018 0000 8004 0046     ...@..........F.
2000233c:	7fff 0000 0000 0000 0000 0000 0000 0000     ................
2000234c:	0018 0000 66c9 0040 0000 4001 0002 0000     .....f@....@....
2000235c:	0019 0000 8004 0000 0000 0000 0000 0000     ................
	...
20002374:	0019 0000 66e1 0040 4000 4001 0000 0000     .....f@..@.@....
20002384:	001a 0000 8004 0000 0000 0000 0000 0000     ................
	...
2000239c:	001a 0000 66f9 0040 4000 4001 0001 0000     .....f@..@.@....
200023ac:	001b 0000 8004 0000 0000 0000 0000 0000     ................
	...
200023c4:	001b 0000 6711 0040 4000 4001 0002 0000     .....g@..@.@....
200023d4:	001c 0000 8004 0000 0000 0000 0000 0000     ................
	...
200023ec:	001c 0000 6729 0040 0000 4001 0000 0000     ....)g@....@....
200023fc:	0017 0000 8005 0000 0000 0000 0000 0000     ................
	...
20002414:	0017 0000 66a5 0040                         .....f@.

2000241c <um>:
2000241c:	c200 4000 0000 0000 0008 0000 0008 0000     ...@............
2000242c:	0000 0000 0200 0000 0000 0000 0000 0000     ................
2000243c:	0400 0000 0000 0000 0000 0000 0000 0400     ................
	...
20002454:	0000 0200 0000 0000 0000 0000 0000 0000     ................
	...
20002478:	4200 4003 0000 0000 0007 0000 0007 0000     .B.@............
20002488:	0000 0000 0000 0800 0001 0000 0000 0000     ................
20002498:	0000 1000 0001 0000 ffff ffff 0000 0000     ................
200024a8:	0000 0000 ffff ffff 0000 0000 0000 0000     ................
	...

200024d4 <um>:
200024d4:	0000 0000 4298 2000 0100 0000 0000 0000     .....B. ........
200024e4:	3a98 2000 0040 07c0 0000 0000 0001 0000     .:. @...........
200024f4:	4598 2000 0040 0000 0000 0000 4398 2000     .E. @........C. 
20002504:	0040 01c0 0000 0000                         @.......

2000250c <g_interrupt_enabled>:
2000250c:	0001 0000                                   ....

20002510 <SystemCoreClock>:
20002510:	1200 007a                                   ..z.

20002514 <__fdlib_version>:
20002514:	0001 0000                                   ....

20002518 <_impure_ptr>:
20002518:	2520 2000 0000 0000                          %. ....

20002520 <impure_data>:
20002520:	0000 0000 280c 2000 2874 2000 28dc 2000     .....(. t(. .(. 
	...
200025c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200025d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20002948 <__malloc_av_>:
	...
20002950:	2948 2000 2948 2000 2950 2000 2950 2000     H). H). P). P). 
20002960:	2958 2000 2958 2000 2960 2000 2960 2000     X). X). `). `). 
20002970:	2968 2000 2968 2000 2970 2000 2970 2000     h). h). p). p). 
20002980:	2978 2000 2978 2000 2980 2000 2980 2000     x). x). .). .). 
20002990:	2988 2000 2988 2000 2990 2000 2990 2000     .). .). .). .). 
200029a0:	2998 2000 2998 2000 29a0 2000 29a0 2000     .). .). .). .). 
200029b0:	29a8 2000 29a8 2000 29b0 2000 29b0 2000     .). .). .). .). 
200029c0:	29b8 2000 29b8 2000 29c0 2000 29c0 2000     .). .). .). .). 
200029d0:	29c8 2000 29c8 2000 29d0 2000 29d0 2000     .). .). .). .). 
200029e0:	29d8 2000 29d8 2000 29e0 2000 29e0 2000     .). .). .). .). 
200029f0:	29e8 2000 29e8 2000 29f0 2000 29f0 2000     .). .). .). .). 
20002a00:	29f8 2000 29f8 2000 2a00 2000 2a00 2000     .). .). .*. .*. 
20002a10:	2a08 2000 2a08 2000 2a10 2000 2a10 2000     .*. .*. .*. .*. 
20002a20:	2a18 2000 2a18 2000 2a20 2000 2a20 2000     .*. .*.  *.  *. 
20002a30:	2a28 2000 2a28 2000 2a30 2000 2a30 2000     (*. (*. 0*. 0*. 
20002a40:	2a38 2000 2a38 2000 2a40 2000 2a40 2000     8*. 8*. @*. @*. 
20002a50:	2a48 2000 2a48 2000 2a50 2000 2a50 2000     H*. H*. P*. P*. 
20002a60:	2a58 2000 2a58 2000 2a60 2000 2a60 2000     X*. X*. `*. `*. 
20002a70:	2a68 2000 2a68 2000 2a70 2000 2a70 2000     h*. h*. p*. p*. 
20002a80:	2a78 2000 2a78 2000 2a80 2000 2a80 2000     x*. x*. .*. .*. 
20002a90:	2a88 2000 2a88 2000 2a90 2000 2a90 2000     .*. .*. .*. .*. 
20002aa0:	2a98 2000 2a98 2000 2aa0 2000 2aa0 2000     .*. .*. .*. .*. 
20002ab0:	2aa8 2000 2aa8 2000 2ab0 2000 2ab0 2000     .*. .*. .*. .*. 
20002ac0:	2ab8 2000 2ab8 2000 2ac0 2000 2ac0 2000     .*. .*. .*. .*. 
20002ad0:	2ac8 2000 2ac8 2000 2ad0 2000 2ad0 2000     .*. .*. .*. .*. 
20002ae0:	2ad8 2000 2ad8 2000 2ae0 2000 2ae0 2000     .*. .*. .*. .*. 
20002af0:	2ae8 2000 2ae8 2000 2af0 2000 2af0 2000     .*. .*. .*. .*. 
20002b00:	2af8 2000 2af8 2000 2b00 2000 2b00 2000     .*. .*. .+. .+. 
20002b10:	2b08 2000 2b08 2000 2b10 2000 2b10 2000     .+. .+. .+. .+. 
20002b20:	2b18 2000 2b18 2000 2b20 2000 2b20 2000     .+. .+.  +.  +. 
20002b30:	2b28 2000 2b28 2000 2b30 2000 2b30 2000     (+. (+. 0+. 0+. 
20002b40:	2b38 2000 2b38 2000 2b40 2000 2b40 2000     8+. 8+. @+. @+. 
20002b50:	2b48 2000 2b48 2000 2b50 2000 2b50 2000     H+. H+. P+. P+. 
20002b60:	2b58 2000 2b58 2000 2b60 2000 2b60 2000     X+. X+. `+. `+. 
20002b70:	2b68 2000 2b68 2000 2b70 2000 2b70 2000     h+. h+. p+. p+. 
20002b80:	2b78 2000 2b78 2000 2b80 2000 2b80 2000     x+. x+. .+. .+. 
20002b90:	2b88 2000 2b88 2000 2b90 2000 2b90 2000     .+. .+. .+. .+. 
20002ba0:	2b98 2000 2b98 2000 2ba0 2000 2ba0 2000     .+. .+. .+. .+. 
20002bb0:	2ba8 2000 2ba8 2000 2bb0 2000 2bb0 2000     .+. .+. .+. .+. 
20002bc0:	2bb8 2000 2bb8 2000 2bc0 2000 2bc0 2000     .+. .+. .+. .+. 
20002bd0:	2bc8 2000 2bc8 2000 2bd0 2000 2bd0 2000     .+. .+. .+. .+. 
20002be0:	2bd8 2000 2bd8 2000 2be0 2000 2be0 2000     .+. .+. .+. .+. 
20002bf0:	2be8 2000 2be8 2000 2bf0 2000 2bf0 2000     .+. .+. .+. .+. 
20002c00:	2bf8 2000 2bf8 2000 2c00 2000 2c00 2000     .+. .+. .,. .,. 
20002c10:	2c08 2000 2c08 2000 2c10 2000 2c10 2000     .,. .,. .,. .,. 
20002c20:	2c18 2000 2c18 2000 2c20 2000 2c20 2000     .,. .,.  ,.  ,. 
20002c30:	2c28 2000 2c28 2000 2c30 2000 2c30 2000     (,. (,. 0,. 0,. 
20002c40:	2c38 2000 2c38 2000 2c40 2000 2c40 2000     8,. 8,. @,. @,. 
20002c50:	2c48 2000 2c48 2000 2c50 2000 2c50 2000     H,. H,. P,. P,. 
20002c60:	2c58 2000 2c58 2000 2c60 2000 2c60 2000     X,. X,. `,. `,. 
20002c70:	2c68 2000 2c68 2000 2c70 2000 2c70 2000     h,. h,. p,. p,. 
20002c80:	2c78 2000 2c78 2000 2c80 2000 2c80 2000     x,. x,. .,. .,. 
20002c90:	2c88 2000 2c88 2000 2c90 2000 2c90 2000     .,. .,. .,. .,. 
20002ca0:	2c98 2000 2c98 2000 2ca0 2000 2ca0 2000     .,. .,. .,. .,. 
20002cb0:	2ca8 2000 2ca8 2000 2cb0 2000 2cb0 2000     .,. .,. .,. .,. 
20002cc0:	2cb8 2000 2cb8 2000 2cc0 2000 2cc0 2000     .,. .,. .,. .,. 
20002cd0:	2cc8 2000 2cc8 2000 2cd0 2000 2cd0 2000     .,. .,. .,. .,. 
20002ce0:	2cd8 2000 2cd8 2000 2ce0 2000 2ce0 2000     .,. .,. .,. .,. 
20002cf0:	2ce8 2000 2ce8 2000 2cf0 2000 2cf0 2000     .,. .,. .,. .,. 
20002d00:	2cf8 2000 2cf8 2000 2d00 2000 2d00 2000     .,. .,. .-. .-. 
20002d10:	2d08 2000 2d08 2000 2d10 2000 2d10 2000     .-. .-. .-. .-. 
20002d20:	2d18 2000 2d18 2000 2d20 2000 2d20 2000     .-. .-.  -.  -. 
20002d30:	2d28 2000 2d28 2000 2d30 2000 2d30 2000     (-. (-. 0-. 0-. 
20002d40:	2d38 2000 2d38 2000 2d40 2000 2d40 2000     8-. 8-. @-. @-. 

20002d50 <__malloc_sbrk_base>:
20002d50:	ffff ffff                                   ....

20002d54 <__malloc_trim_threshold>:
20002d54:	0000 0002                                   ....

20002d58 <__atexit_recursive_mutex>:
20002d58:	52c0 2000                                   .R. 

20002d5c <__global_locale>:
20002d5c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002d7c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002d9c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002dbc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002ddc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002dfc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002e1c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002e3c:	2f9d 0041 2f71 0041 0000 0000 3aa4 0041     ./A.q/A......:A.
20002e4c:	3aa0 0041 3944 0041 3944 0041 3944 0041     .:A.D9A.D9A.D9A.
20002e5c:	3944 0041 3944 0041 3944 0041 3944 0041     D9A.D9A.D9A.D9A.
20002e6c:	3944 0041 3944 0041 ffff ffff ffff ffff     D9A.D9A.........
20002e7c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20002ea4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
