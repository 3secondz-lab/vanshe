
example-algo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013be4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00413be4  00413be4  00023be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00002ec8  20000000  00413bec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00002420  20002ec8  00416ab8  00032ec8  2**3
                  ALLOC
  4 .stack        00003000  200052e8  00418ed8  00032ec8  2**0
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00032ec8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00032ef8  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002e4d8  00000000  00000000  00032f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000060ee  00000000  00000000  00061429  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d7d1  00000000  00000000  00067517  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001840  00000000  00000000  00074ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001728  00000000  00000000  00076528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c6d3  00000000  00000000  00077c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a92e  00000000  00000000  00094323  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005eef9  00000000  00000000  000aec51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007494  00000000  00000000  0010db4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 82 00 20 11 98 40 00 e1 98 40 00 e1 98 40 00     ... ..@...@...@.
  400010:	e1 98 40 00 e1 98 40 00 e1 98 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e1 98 40 00 e1 98 40 00 00 00 00 00 e1 98 40 00     ..@...@.......@.
  40003c:	2d 5f 40 00 e1 98 40 00 e1 98 40 00 d5 52 40 00     -_@...@...@..R@.
  40004c:	e1 98 40 00 e1 98 40 00 e1 98 40 00 e1 98 40 00     ..@...@...@...@.
  40005c:	c5 73 40 00 b1 73 40 00 e1 98 40 00 00 00 00 00     .s@..s@...@.....
  40006c:	a5 87 40 00 bd 87 40 00 e1 98 40 00 e1 98 40 00     ..@...@...@...@.
  40007c:	e1 98 40 00 e1 98 40 00 e1 98 40 00 e1 98 40 00     ..@...@...@...@.
  40008c:	e1 98 40 00 e1 98 40 00 19 5f 40 00 e1 98 40 00     ..@...@.._@...@.
  40009c:	c5 66 40 00 e9 66 40 00 01 67 40 00 19 67 40 00     .f@..f@..g@..g@.
  4000ac:	31 67 40 00 49 67 40 00 e1 98 40 00 e1 98 40 00     1g@.Ig@...@...@.
	...
  4000fc:	e1 98 40 00 e1 98 40 00 e1 98 40 00 00 00 00 00     ..@...@...@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20002ec8 	.word	0x20002ec8
  400164:	00000000 	.word	0x00000000
  400168:	00413bec 	.word	0x00413bec

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	00413bec 	.word	0x00413bec
  4001a8:	20002ecc 	.word	0x20002ecc
  4001ac:	00413bec 	.word	0x00413bec
  4001b0:	00000000 	.word	0x00000000

004001b4 <config_uart>:
/* I2C address for Ak09915 */
#define AK_I2C_ADDR      0x0E


void config_uart(inv_uart_num_t log_uart_id)
{
  4001b4:	b580      	push	{r7, lr}
  4001b6:	b086      	sub	sp, #24
  4001b8:	af00      	add	r7, sp, #0
  4001ba:	4603      	mov	r3, r0
  4001bc:	71fb      	strb	r3, [r7, #7]
	inv_uart_mngr_init_struct_t uart_mngr_config;
	
	uart_mngr_config.uart_num = log_uart_id;
  4001be:	79fb      	ldrb	r3, [r7, #7]
  4001c0:	733b      	strb	r3, [r7, #12]
	uart_mngr_config.baudrate = 921600;
  4001c2:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
  4001c6:	613b      	str	r3, [r7, #16]
	uart_mngr_config.flow_ctrl = INV_UART_FLOW_CONTROL_NONE;
  4001c8:	2300      	movs	r3, #0
  4001ca:	753b      	strb	r3, [r7, #20]
	inv_uart_mngr_init(&uart_mngr_config);
  4001cc:	f107 030c 	add.w	r3, r7, #12
  4001d0:	4618      	mov	r0, r3
  4001d2:	4b03      	ldr	r3, [pc, #12]	; (4001e0 <config_uart+0x2c>)
  4001d4:	4798      	blx	r3
}
  4001d6:	bf00      	nop
  4001d8:	3718      	adds	r7, #24
  4001da:	46bd      	mov	sp, r7
  4001dc:	bd80      	pop	{r7, pc}
  4001de:	bf00      	nop
  4001e0:	00407631 	.word	0x00407631

004001e4 <inv_io_hal_init>:
/******************************************************/
/* Low-level serial interface function implementation */
/******************************************************/

int inv_io_hal_init(struct inv_icm426xx_serif * serif)
{
  4001e4:	b580      	push	{r7, lr}
  4001e6:	b082      	sub	sp, #8
  4001e8:	af00      	add	r7, sp, #0
  4001ea:	6078      	str	r0, [r7, #4]
	switch (serif->serif_type) {
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	7e1b      	ldrb	r3, [r3, #24]
  4001f0:	2b00      	cmp	r3, #0
  4001f2:	d006      	beq.n	400202 <inv_io_hal_init+0x1e>
  4001f4:	2b01      	cmp	r3, #1
  4001f6:	d107      	bne.n	400208 <inv_io_hal_init+0x24>
			/* To avoid SPI disturbance on ICM DB, on-chip ICM is forced to SPI by doing a dummy-write*/
			inv_spi_master_init(INV_SPI_ONBOARD, 6*1000*1000);
			/* Write to register MPUREG_WHO_AM_I */
			inv_spi_master_write_register(INV_SPI_ONBOARD, 0x76, 1, &dummy);
#endif
			inv_spi_master_init(INV_SPI_AP, 6*1000*1000);
  4001f8:	4907      	ldr	r1, [pc, #28]	; (400218 <inv_io_hal_init+0x34>)
  4001fa:	2001      	movs	r0, #1
  4001fc:	4b07      	ldr	r3, [pc, #28]	; (40021c <inv_io_hal_init+0x38>)
  4001fe:	4798      	blx	r3
			break;
  400200:	e005      	b.n	40020e <inv_io_hal_init+0x2a>
		}

		case ICM426XX_UI_I2C:
			/* Set I2C clock is 400kHz by default */
			inv_i2c_master_init();
  400202:	4b07      	ldr	r3, [pc, #28]	; (400220 <inv_io_hal_init+0x3c>)
  400204:	4798      	blx	r3
			break;
  400206:	e002      	b.n	40020e <inv_io_hal_init+0x2a>
		default:
			return -1;
  400208:	f04f 33ff 	mov.w	r3, #4294967295
  40020c:	e000      	b.n	400210 <inv_io_hal_init+0x2c>
	}

	return 0;
  40020e:	2300      	movs	r3, #0
}
  400210:	4618      	mov	r0, r3
  400212:	3708      	adds	r7, #8
  400214:	46bd      	mov	sp, r7
  400216:	bd80      	pop	{r7, pc}
  400218:	005b8d80 	.word	0x005b8d80
  40021c:	00405791 	.word	0x00405791
  400220:	00405155 	.word	0x00405155

00400224 <inv_io_hal_read_reg>:
			return -1;
	}
}

int inv_io_hal_read_reg(struct inv_icm426xx_serif * serif, uint8_t reg, uint8_t * rbuffer, uint32_t rlen)
{
  400224:	b590      	push	{r4, r7, lr}
  400226:	b085      	sub	sp, #20
  400228:	af00      	add	r7, sp, #0
  40022a:	60f8      	str	r0, [r7, #12]
  40022c:	607a      	str	r2, [r7, #4]
  40022e:	603b      	str	r3, [r7, #0]
  400230:	460b      	mov	r3, r1
  400232:	72fb      	strb	r3, [r7, #11]
	switch (serif->serif_type) {
  400234:	68fb      	ldr	r3, [r7, #12]
  400236:	7e1b      	ldrb	r3, [r3, #24]
  400238:	2b00      	cmp	r3, #0
  40023a:	d00e      	beq.n	40025a <inv_io_hal_read_reg+0x36>
  40023c:	2b01      	cmp	r3, #1
  40023e:	d118      	bne.n	400272 <inv_io_hal_read_reg+0x4e>
		case ICM426XX_UI_SPI4:
			return inv_spi_master_read_register(INV_SPI_AP, reg, rlen, rbuffer);
  400240:	683b      	ldr	r3, [r7, #0]
  400242:	b29a      	uxth	r2, r3
  400244:	7af9      	ldrb	r1, [r7, #11]
  400246:	687b      	ldr	r3, [r7, #4]
  400248:	2001      	movs	r0, #1
  40024a:	4c0d      	ldr	r4, [pc, #52]	; (400280 <inv_io_hal_read_reg+0x5c>)
  40024c:	47a0      	blx	r4
  40024e:	4603      	mov	r3, r0
  400250:	e011      	b.n	400276 <inv_io_hal_read_reg+0x52>
		case ICM426XX_UI_I2C:
			while(inv_i2c_master_read_register(ICM_I2C_ADDR, reg, rlen, rbuffer)) {
				inv_delay_us(32000); // Loop in case of I2C timeout
  400252:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
  400256:	4b0b      	ldr	r3, [pc, #44]	; (400284 <inv_io_hal_read_reg+0x60>)
  400258:	4798      	blx	r3
			while(inv_i2c_master_read_register(ICM_I2C_ADDR, reg, rlen, rbuffer)) {
  40025a:	683b      	ldr	r3, [r7, #0]
  40025c:	b29a      	uxth	r2, r3
  40025e:	7af9      	ldrb	r1, [r7, #11]
  400260:	687b      	ldr	r3, [r7, #4]
  400262:	2069      	movs	r0, #105	; 0x69
  400264:	4c08      	ldr	r4, [pc, #32]	; (400288 <inv_io_hal_read_reg+0x64>)
  400266:	47a0      	blx	r4
  400268:	4603      	mov	r3, r0
  40026a:	2b00      	cmp	r3, #0
  40026c:	d1f1      	bne.n	400252 <inv_io_hal_read_reg+0x2e>
			}
			return 0;
  40026e:	2300      	movs	r3, #0
  400270:	e001      	b.n	400276 <inv_io_hal_read_reg+0x52>
		default:
			return -1;
  400272:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  400276:	4618      	mov	r0, r3
  400278:	3714      	adds	r7, #20
  40027a:	46bd      	mov	sp, r7
  40027c:	bd90      	pop	{r4, r7, pc}
  40027e:	bf00      	nop
  400280:	00405ce5 	.word	0x00405ce5
  400284:	00404a7d 	.word	0x00404a7d
  400288:	0040527d 	.word	0x0040527d

0040028c <inv_io_hal_write_reg>:

int inv_io_hal_write_reg(struct inv_icm426xx_serif * serif, uint8_t reg, const uint8_t * wbuffer, uint32_t wlen)
{
  40028c:	b590      	push	{r4, r7, lr}
  40028e:	b087      	sub	sp, #28
  400290:	af00      	add	r7, sp, #0
  400292:	60f8      	str	r0, [r7, #12]
  400294:	607a      	str	r2, [r7, #4]
  400296:	603b      	str	r3, [r7, #0]
  400298:	460b      	mov	r3, r1
  40029a:	72fb      	strb	r3, [r7, #11]
	int rc;

	switch (serif->serif_type) {
  40029c:	68fb      	ldr	r3, [r7, #12]
  40029e:	7e1b      	ldrb	r3, [r3, #24]
  4002a0:	2b00      	cmp	r3, #0
  4002a2:	d024      	beq.n	4002ee <inv_io_hal_write_reg+0x62>
  4002a4:	2b01      	cmp	r3, #1
  4002a6:	d12e      	bne.n	400306 <inv_io_hal_write_reg+0x7a>
		case ICM426XX_UI_SPI4:
			for(uint32_t i=0; i<wlen; i++) {
  4002a8:	2300      	movs	r3, #0
  4002aa:	617b      	str	r3, [r7, #20]
  4002ac:	e015      	b.n	4002da <inv_io_hal_write_reg+0x4e>
				rc = inv_spi_master_write_register(INV_SPI_AP, reg+i, 1, &wbuffer[i]);
  4002ae:	697b      	ldr	r3, [r7, #20]
  4002b0:	b2da      	uxtb	r2, r3
  4002b2:	7afb      	ldrb	r3, [r7, #11]
  4002b4:	4413      	add	r3, r2
  4002b6:	b2d9      	uxtb	r1, r3
  4002b8:	687a      	ldr	r2, [r7, #4]
  4002ba:	697b      	ldr	r3, [r7, #20]
  4002bc:	4413      	add	r3, r2
  4002be:	2201      	movs	r2, #1
  4002c0:	2001      	movs	r0, #1
  4002c2:	4c14      	ldr	r4, [pc, #80]	; (400314 <inv_io_hal_write_reg+0x88>)
  4002c4:	47a0      	blx	r4
  4002c6:	4603      	mov	r3, r0
  4002c8:	613b      	str	r3, [r7, #16]
				if(rc)
  4002ca:	693b      	ldr	r3, [r7, #16]
  4002cc:	2b00      	cmp	r3, #0
  4002ce:	d001      	beq.n	4002d4 <inv_io_hal_write_reg+0x48>
					return rc;
  4002d0:	693b      	ldr	r3, [r7, #16]
  4002d2:	e01a      	b.n	40030a <inv_io_hal_write_reg+0x7e>
			for(uint32_t i=0; i<wlen; i++) {
  4002d4:	697b      	ldr	r3, [r7, #20]
  4002d6:	3301      	adds	r3, #1
  4002d8:	617b      	str	r3, [r7, #20]
  4002da:	697a      	ldr	r2, [r7, #20]
  4002dc:	683b      	ldr	r3, [r7, #0]
  4002de:	429a      	cmp	r2, r3
  4002e0:	d3e5      	bcc.n	4002ae <inv_io_hal_write_reg+0x22>
			}
			return 0;
  4002e2:	2300      	movs	r3, #0
  4002e4:	e011      	b.n	40030a <inv_io_hal_write_reg+0x7e>
		case ICM426XX_UI_I2C:
			while(inv_i2c_master_write_register(ICM_I2C_ADDR, reg, wlen, wbuffer)) {
				inv_delay_us(32000); // Loop in case of I2C timeout
  4002e6:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
  4002ea:	4b0b      	ldr	r3, [pc, #44]	; (400318 <inv_io_hal_write_reg+0x8c>)
  4002ec:	4798      	blx	r3
			while(inv_i2c_master_write_register(ICM_I2C_ADDR, reg, wlen, wbuffer)) {
  4002ee:	683b      	ldr	r3, [r7, #0]
  4002f0:	b29a      	uxth	r2, r3
  4002f2:	7af9      	ldrb	r1, [r7, #11]
  4002f4:	687b      	ldr	r3, [r7, #4]
  4002f6:	2069      	movs	r0, #105	; 0x69
  4002f8:	4c08      	ldr	r4, [pc, #32]	; (40031c <inv_io_hal_write_reg+0x90>)
  4002fa:	47a0      	blx	r4
  4002fc:	4603      	mov	r3, r0
  4002fe:	2b00      	cmp	r3, #0
  400300:	d1f1      	bne.n	4002e6 <inv_io_hal_write_reg+0x5a>
			}
			return 0;
  400302:	2300      	movs	r3, #0
  400304:	e001      	b.n	40030a <inv_io_hal_write_reg+0x7e>
		default:
			return -1;
  400306:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  40030a:	4618      	mov	r0, r3
  40030c:	371c      	adds	r7, #28
  40030e:	46bd      	mov	sp, r7
  400310:	bd90      	pop	{r4, r7, pc}
  400312:	bf00      	nop
  400314:	00405b91 	.word	0x00405b91
  400318:	00404a7d 	.word	0x00404a7d
  40031c:	00405211 	.word	0x00405211

00400320 <get_ringbuffer_volatile_size>:
	\return  	current number of items hold in the ringbuffer
*/
#define RINGBUFFER_SIZE(rb) 		((uint16_t)((rb)->write - (rb)->read))

static inline uint16_t get_ringbuffer_volatile_size(void * rb)
{
  400320:	b480      	push	{r7}
  400322:	b085      	sub	sp, #20
  400324:	af00      	add	r7, sp, #0
  400326:	6078      	str	r0, [r7, #4]
	struct { uint16_t read, write; } rb_var;
	memcpy(&rb_var, rb, sizeof(rb_var));
  400328:	687b      	ldr	r3, [r7, #4]
  40032a:	681b      	ldr	r3, [r3, #0]
  40032c:	60fb      	str	r3, [r7, #12]
	return (rb_var.write - rb_var.read);
  40032e:	89fa      	ldrh	r2, [r7, #14]
  400330:	89bb      	ldrh	r3, [r7, #12]
  400332:	1ad3      	subs	r3, r2, r3
  400334:	b29b      	uxth	r3, r3
}
  400336:	4618      	mov	r0, r3
  400338:	3714      	adds	r7, #20
  40033a:	46bd      	mov	sp, r7
  40033c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400340:	4770      	bx	lr
	...

00400344 <SetupInvDevice>:
/* --------------------------------------------------------------------------------------
 *  Functions definition
 * -------------------------------------------------------------------------------------- */

int SetupInvDevice(struct inv_icm426xx_serif * icm_serif)
{
  400344:	b590      	push	{r4, r7, lr}
  400346:	b085      	sub	sp, #20
  400348:	af00      	add	r7, sp, #0
  40034a:	6078      	str	r0, [r7, #4]
	int rc = 0;
  40034c:	2300      	movs	r3, #0
  40034e:	60fb      	str	r3, [r7, #12]
	uint8_t who_am_i;

	INV_MSG(INV_MSG_LEVEL_VERBOSE, "Initialize ICM");
  400350:	491f      	ldr	r1, [pc, #124]	; (4003d0 <SetupInvDevice+0x8c>)
  400352:	2004      	movs	r0, #4
  400354:	4b1f      	ldr	r3, [pc, #124]	; (4003d4 <SetupInvDevice+0x90>)
  400356:	4798      	blx	r3

	/* Init device */
	rc = inv_icm426xx_init(&icm_driver, icm_serif, HandleInvDeviceFifoPacket);
  400358:	4a1f      	ldr	r2, [pc, #124]	; (4003d8 <SetupInvDevice+0x94>)
  40035a:	6879      	ldr	r1, [r7, #4]
  40035c:	481f      	ldr	r0, [pc, #124]	; (4003dc <SetupInvDevice+0x98>)
  40035e:	4b20      	ldr	r3, [pc, #128]	; (4003e0 <SetupInvDevice+0x9c>)
  400360:	4798      	blx	r3
  400362:	60f8      	str	r0, [r7, #12]
	if (rc != INV_ERROR_SUCCESS) {
  400364:	68fb      	ldr	r3, [r7, #12]
  400366:	2b00      	cmp	r3, #0
  400368:	d005      	beq.n	400376 <SetupInvDevice+0x32>
		INV_MSG(INV_MSG_LEVEL_ERROR, "!!! ERROR : failed to initialize Icm426xx.");
  40036a:	491e      	ldr	r1, [pc, #120]	; (4003e4 <SetupInvDevice+0xa0>)
  40036c:	2001      	movs	r0, #1
  40036e:	4b19      	ldr	r3, [pc, #100]	; (4003d4 <SetupInvDevice+0x90>)
  400370:	4798      	blx	r3
		return rc;
  400372:	68fb      	ldr	r3, [r7, #12]
  400374:	e027      	b.n	4003c6 <SetupInvDevice+0x82>
	}
	
	/* Check WHOAMI */
	INV_MSG(INV_MSG_LEVEL_VERBOSE, "Check ICM whoami value");
  400376:	491c      	ldr	r1, [pc, #112]	; (4003e8 <SetupInvDevice+0xa4>)
  400378:	2004      	movs	r0, #4
  40037a:	4b16      	ldr	r3, [pc, #88]	; (4003d4 <SetupInvDevice+0x90>)
  40037c:	4798      	blx	r3

	rc = inv_icm426xx_get_who_am_i(&icm_driver, &who_am_i);
  40037e:	f107 030b 	add.w	r3, r7, #11
  400382:	4619      	mov	r1, r3
  400384:	4815      	ldr	r0, [pc, #84]	; (4003dc <SetupInvDevice+0x98>)
  400386:	4b19      	ldr	r3, [pc, #100]	; (4003ec <SetupInvDevice+0xa8>)
  400388:	4798      	blx	r3
  40038a:	60f8      	str	r0, [r7, #12]
	if (rc != INV_ERROR_SUCCESS) {
  40038c:	68fb      	ldr	r3, [r7, #12]
  40038e:	2b00      	cmp	r3, #0
  400390:	d005      	beq.n	40039e <SetupInvDevice+0x5a>
		INV_MSG(INV_MSG_LEVEL_ERROR, "!!! ERROR : failed to read Icm426xx whoami value.");
  400392:	4917      	ldr	r1, [pc, #92]	; (4003f0 <SetupInvDevice+0xac>)
  400394:	2001      	movs	r0, #1
  400396:	4b0f      	ldr	r3, [pc, #60]	; (4003d4 <SetupInvDevice+0x90>)
  400398:	4798      	blx	r3
		return rc;
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	e013      	b.n	4003c6 <SetupInvDevice+0x82>
	}
	
	if (who_am_i != ICM_WHOAMI) {
  40039e:	7afb      	ldrb	r3, [r7, #11]
  4003a0:	2b42      	cmp	r3, #66	; 0x42
  4003a2:	d009      	beq.n	4003b8 <SetupInvDevice+0x74>
		INV_MSG(INV_MSG_LEVEL_ERROR, "!!! ERROR :  bad WHOAMI value. Got 0x%02x (expected: 0x%02x)", who_am_i, ICM_WHOAMI);
  4003a4:	7afb      	ldrb	r3, [r7, #11]
  4003a6:	461a      	mov	r2, r3
  4003a8:	2342      	movs	r3, #66	; 0x42
  4003aa:	4912      	ldr	r1, [pc, #72]	; (4003f4 <SetupInvDevice+0xb0>)
  4003ac:	2001      	movs	r0, #1
  4003ae:	4c09      	ldr	r4, [pc, #36]	; (4003d4 <SetupInvDevice+0x90>)
  4003b0:	47a0      	blx	r4
		return INV_ERROR;
  4003b2:	f04f 33ff 	mov.w	r3, #4294967295
  4003b6:	e006      	b.n	4003c6 <SetupInvDevice+0x82>
	}
	
	RINGBUFFER_VOLATILE_CLEAR(&timestamp_buffer_icm);
  4003b8:	4b0f      	ldr	r3, [pc, #60]	; (4003f8 <SetupInvDevice+0xb4>)
  4003ba:	2200      	movs	r2, #0
  4003bc:	801a      	strh	r2, [r3, #0]
  4003be:	4b0e      	ldr	r3, [pc, #56]	; (4003f8 <SetupInvDevice+0xb4>)
  4003c0:	2200      	movs	r2, #0
  4003c2:	805a      	strh	r2, [r3, #2]
	return rc;
  4003c4:	68fb      	ldr	r3, [r7, #12]
}
  4003c6:	4618      	mov	r0, r3
  4003c8:	3714      	adds	r7, #20
  4003ca:	46bd      	mov	sp, r7
  4003cc:	bd90      	pop	{r4, r7, pc}
  4003ce:	bf00      	nop
  4003d0:	00413028 	.word	0x00413028
  4003d4:	00407945 	.word	0x00407945
  4003d8:	004007d9 	.word	0x004007d9
  4003dc:	20002ee8 	.word	0x20002ee8
  4003e0:	004016bd 	.word	0x004016bd
  4003e4:	00413038 	.word	0x00413038
  4003e8:	00413064 	.word	0x00413064
  4003ec:	00401929 	.word	0x00401929
  4003f0:	0041307c 	.word	0x0041307c
  4003f4:	004130b0 	.word	0x004130b0
  4003f8:	200048d0 	.word	0x200048d0

004003fc <ConfigureInvDevice>:


int ConfigureInvDevice(void)
{
  4003fc:	b580      	push	{r7, lr}
  4003fe:	b082      	sub	sp, #8
  400400:	af00      	add	r7, sp, #0
	int rc = 0;
  400402:	2300      	movs	r3, #0
  400404:	607b      	str	r3, [r7, #4]

	rc |= inv_flash_manager_init();
  400406:	4b2b      	ldr	r3, [pc, #172]	; (4004b4 <ConfigureInvDevice+0xb8>)
  400408:	4798      	blx	r3
  40040a:	4602      	mov	r2, r0
  40040c:	687b      	ldr	r3, [r7, #4]
  40040e:	4313      	orrs	r3, r2
  400410:	607b      	str	r3, [r7, #4]
		/* Ensure all coefficients are set to 1 as the clock will not drift */
		clk_calib.coef[INV_ICM426XX_PLL] = 1.0f;
		clk_calib.coef[INV_ICM426XX_RC_OSC] = 1.0f;
		clk_calib.coef[INV_ICM426XX_WU_OSC] = 1.0f;
#else
	rc |= clock_calibration_init(&icm_driver, &clk_calib);
  400412:	4929      	ldr	r1, [pc, #164]	; (4004b8 <ConfigureInvDevice+0xbc>)
  400414:	4829      	ldr	r0, [pc, #164]	; (4004bc <ConfigureInvDevice+0xc0>)
  400416:	4b2a      	ldr	r3, [pc, #168]	; (4004c0 <ConfigureInvDevice+0xc4>)
  400418:	4798      	blx	r3
  40041a:	4602      	mov	r2, r0
  40041c:	687b      	ldr	r3, [r7, #4]
  40041e:	4313      	orrs	r3, r2
  400420:	607b      	str	r3, [r7, #4]
#endif
	
	rc |= clock_calibration_init(&icm_driver, &clk_calib);
  400422:	4925      	ldr	r1, [pc, #148]	; (4004b8 <ConfigureInvDevice+0xbc>)
  400424:	4825      	ldr	r0, [pc, #148]	; (4004bc <ConfigureInvDevice+0xc0>)
  400426:	4b26      	ldr	r3, [pc, #152]	; (4004c0 <ConfigureInvDevice+0xc4>)
  400428:	4798      	blx	r3
  40042a:	4602      	mov	r2, r0
  40042c:	687b      	ldr	r3, [r7, #4]
  40042e:	4313      	orrs	r3, r2
  400430:	607b      	str	r3, [r7, #4]
	
#if IS_HIGH_RES_MODE
	rc |= inv_icm426xx_enable_high_resolution_fifo(&icm_driver);
#else
	rc |= inv_icm426xx_set_accel_fsr(&icm_driver, (ICM426XX_ACCEL_CONFIG0_FS_SEL_t)accel_fsr_g_to_bitfield(acc_fsr));
  400432:	2304      	movs	r3, #4
  400434:	4618      	mov	r0, r3
  400436:	4b23      	ldr	r3, [pc, #140]	; (4004c4 <ConfigureInvDevice+0xc8>)
  400438:	4798      	blx	r3
  40043a:	4603      	mov	r3, r0
  40043c:	b2db      	uxtb	r3, r3
  40043e:	4619      	mov	r1, r3
  400440:	481e      	ldr	r0, [pc, #120]	; (4004bc <ConfigureInvDevice+0xc0>)
  400442:	4b21      	ldr	r3, [pc, #132]	; (4004c8 <ConfigureInvDevice+0xcc>)
  400444:	4798      	blx	r3
  400446:	4602      	mov	r2, r0
  400448:	687b      	ldr	r3, [r7, #4]
  40044a:	4313      	orrs	r3, r2
  40044c:	607b      	str	r3, [r7, #4]
	rc |= inv_icm426xx_set_gyro_fsr(&icm_driver,  (ICM426XX_GYRO_CONFIG0_FS_SEL_t) gyro_fsr_dps_to_bitfield(gyr_fsr));
  40044e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  400452:	4618      	mov	r0, r3
  400454:	4b1d      	ldr	r3, [pc, #116]	; (4004cc <ConfigureInvDevice+0xd0>)
  400456:	4798      	blx	r3
  400458:	4603      	mov	r3, r0
  40045a:	b2db      	uxtb	r3, r3
  40045c:	4619      	mov	r1, r3
  40045e:	4817      	ldr	r0, [pc, #92]	; (4004bc <ConfigureInvDevice+0xc0>)
  400460:	4b1b      	ldr	r3, [pc, #108]	; (4004d0 <ConfigureInvDevice+0xd4>)
  400462:	4798      	blx	r3
  400464:	4602      	mov	r2, r0
  400466:	687b      	ldr	r3, [r7, #4]
  400468:	4313      	orrs	r3, r2
  40046a:	607b      	str	r3, [r7, #4]
#endif
	
	rc |= inv_icm426xx_set_accel_frequency(&icm_driver, ACCEL_FREQ);
  40046c:	2106      	movs	r1, #6
  40046e:	4813      	ldr	r0, [pc, #76]	; (4004bc <ConfigureInvDevice+0xc0>)
  400470:	4b18      	ldr	r3, [pc, #96]	; (4004d4 <ConfigureInvDevice+0xd8>)
  400472:	4798      	blx	r3
  400474:	4602      	mov	r2, r0
  400476:	687b      	ldr	r3, [r7, #4]
  400478:	4313      	orrs	r3, r2
  40047a:	607b      	str	r3, [r7, #4]
	rc |= inv_icm426xx_set_gyro_frequency(&icm_driver,  GYRO_FREQ);
  40047c:	2106      	movs	r1, #6
  40047e:	480f      	ldr	r0, [pc, #60]	; (4004bc <ConfigureInvDevice+0xc0>)
  400480:	4b15      	ldr	r3, [pc, #84]	; (4004d8 <ConfigureInvDevice+0xdc>)
  400482:	4798      	blx	r3
  400484:	4602      	mov	r2, r0
  400486:	687b      	ldr	r3, [r7, #4]
  400488:	4313      	orrs	r3, r2
  40048a:	607b      	str	r3, [r7, #4]

#if IS_LOW_NOISE_MODE
	rc |= inv_icm426xx_enable_accel_low_noise_mode(&icm_driver);
  40048c:	480b      	ldr	r0, [pc, #44]	; (4004bc <ConfigureInvDevice+0xc0>)
  40048e:	4b13      	ldr	r3, [pc, #76]	; (4004dc <ConfigureInvDevice+0xe0>)
  400490:	4798      	blx	r3
  400492:	4602      	mov	r2, r0
  400494:	687b      	ldr	r3, [r7, #4]
  400496:	4313      	orrs	r3, r2
  400498:	607b      	str	r3, [r7, #4]
#else
	rc |= inv_icm426xx_enable_accel_low_power_mode(&icm_driver);
#endif

	rc |= inv_icm426xx_enable_gyro_low_noise_mode(&icm_driver);
  40049a:	4808      	ldr	r0, [pc, #32]	; (4004bc <ConfigureInvDevice+0xc0>)
  40049c:	4b10      	ldr	r3, [pc, #64]	; (4004e0 <ConfigureInvDevice+0xe4>)
  40049e:	4798      	blx	r3
  4004a0:	4602      	mov	r2, r0
  4004a2:	687b      	ldr	r3, [r7, #4]
  4004a4:	4313      	orrs	r3, r2
  4004a6:	607b      	str	r3, [r7, #4]
	
	return rc;
  4004a8:	687b      	ldr	r3, [r7, #4]
}
  4004aa:	4618      	mov	r0, r3
  4004ac:	3708      	adds	r7, #8
  4004ae:	46bd      	mov	sp, r7
  4004b0:	bd80      	pop	{r7, pc}
  4004b2:	bf00      	nop
  4004b4:	00404af9 	.word	0x00404af9
  4004b8:	20003768 	.word	0x20003768
  4004bc:	20002ee8 	.word	0x20002ee8
  4004c0:	00403fad 	.word	0x00403fad
  4004c4:	004011f5 	.word	0x004011f5
  4004c8:	00402d05 	.word	0x00402d05
  4004cc:	0040117d 	.word	0x0040117d
  4004d0:	00402d69 	.word	0x00402d69
  4004d4:	00402c01 	.word	0x00402c01
  4004d8:	00402ca1 	.word	0x00402ca1
  4004dc:	004019b9 	.word	0x004019b9
  4004e0:	00401c81 	.word	0x00401c81

004004e4 <InitInvAGMBiases>:

/*
 * This function initializes biases and accuracies for accelerometer, gyroscope and magnetometer.
 */
int InitInvAGMBiases(void)
{
  4004e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
  4004e8:	b084      	sub	sp, #16
  4004ea:	af04      	add	r7, sp, #16
	/* Retrieve stored biases */
	if (retrieve_stored_biases_from_flash(acc_bias, gyr_bias, mag_bias) == 0) {
  4004ec:	4a72      	ldr	r2, [pc, #456]	; (4006b8 <InitInvAGMBiases+0x1d4>)
  4004ee:	4973      	ldr	r1, [pc, #460]	; (4006bc <InitInvAGMBiases+0x1d8>)
  4004f0:	4873      	ldr	r0, [pc, #460]	; (4006c0 <InitInvAGMBiases+0x1dc>)
  4004f2:	4b74      	ldr	r3, [pc, #464]	; (4006c4 <InitInvAGMBiases+0x1e0>)
  4004f4:	4798      	blx	r3
  4004f6:	4603      	mov	r3, r0
  4004f8:	2b00      	cmp	r3, #0
  4004fa:	f040 80bc 	bne.w	400676 <InitInvAGMBiases+0x192>
		INV_MSG(INV_MSG_LEVEL_INFO, "   Biases loaded from flash:");
  4004fe:	4972      	ldr	r1, [pc, #456]	; (4006c8 <InitInvAGMBiases+0x1e4>)
  400500:	2003      	movs	r0, #3
  400502:	4b72      	ldr	r3, [pc, #456]	; (4006cc <InitInvAGMBiases+0x1e8>)
  400504:	4798      	blx	r3
		INV_MSG(INV_MSG_LEVEL_INFO, "    - Accel: [%f %f %f]g",   
  400506:	4b6e      	ldr	r3, [pc, #440]	; (4006c0 <InitInvAGMBiases+0x1dc>)
  400508:	681b      	ldr	r3, [r3, #0]
  40050a:	ee07 3a90 	vmov	s15, r3
  40050e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400512:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 4006d0 <InitInvAGMBiases+0x1ec>
  400516:	eec7 6a87 	vdiv.f32	s13, s15, s14
  40051a:	4b6e      	ldr	r3, [pc, #440]	; (4006d4 <InitInvAGMBiases+0x1f0>)
  40051c:	ee16 0a90 	vmov	r0, s13
  400520:	4798      	blx	r3
  400522:	4680      	mov	r8, r0
  400524:	4689      	mov	r9, r1
  400526:	4b66      	ldr	r3, [pc, #408]	; (4006c0 <InitInvAGMBiases+0x1dc>)
  400528:	685b      	ldr	r3, [r3, #4]
  40052a:	ee07 3a90 	vmov	s15, r3
  40052e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400532:	ed9f 7a67 	vldr	s14, [pc, #412]	; 4006d0 <InitInvAGMBiases+0x1ec>
  400536:	eec7 6a87 	vdiv.f32	s13, s15, s14
  40053a:	4b66      	ldr	r3, [pc, #408]	; (4006d4 <InitInvAGMBiases+0x1f0>)
  40053c:	ee16 0a90 	vmov	r0, s13
  400540:	4798      	blx	r3
  400542:	4604      	mov	r4, r0
  400544:	460d      	mov	r5, r1
  400546:	4b5e      	ldr	r3, [pc, #376]	; (4006c0 <InitInvAGMBiases+0x1dc>)
  400548:	689b      	ldr	r3, [r3, #8]
  40054a:	ee07 3a90 	vmov	s15, r3
  40054e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400552:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 4006d0 <InitInvAGMBiases+0x1ec>
  400556:	eec7 6a87 	vdiv.f32	s13, s15, s14
  40055a:	4b5e      	ldr	r3, [pc, #376]	; (4006d4 <InitInvAGMBiases+0x1f0>)
  40055c:	ee16 0a90 	vmov	r0, s13
  400560:	4798      	blx	r3
  400562:	4602      	mov	r2, r0
  400564:	460b      	mov	r3, r1
  400566:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40056a:	e9cd 4500 	strd	r4, r5, [sp]
  40056e:	4642      	mov	r2, r8
  400570:	464b      	mov	r3, r9
  400572:	4959      	ldr	r1, [pc, #356]	; (4006d8 <InitInvAGMBiases+0x1f4>)
  400574:	2003      	movs	r0, #3
  400576:	4c55      	ldr	r4, [pc, #340]	; (4006cc <InitInvAGMBiases+0x1e8>)
  400578:	47a0      	blx	r4
			(float)acc_bias[0]/(1<<16), (float)acc_bias[1]/(1<<16), (float)acc_bias[2]/(1<<16));
		INV_MSG(INV_MSG_LEVEL_INFO, "    - Gyro:  [%f %f %f]dps", 
  40057a:	4b50      	ldr	r3, [pc, #320]	; (4006bc <InitInvAGMBiases+0x1d8>)
  40057c:	681b      	ldr	r3, [r3, #0]
  40057e:	ee07 3a90 	vmov	s15, r3
  400582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  400586:	ed9f 7a52 	vldr	s14, [pc, #328]	; 4006d0 <InitInvAGMBiases+0x1ec>
  40058a:	eec7 6a87 	vdiv.f32	s13, s15, s14
  40058e:	4b51      	ldr	r3, [pc, #324]	; (4006d4 <InitInvAGMBiases+0x1f0>)
  400590:	ee16 0a90 	vmov	r0, s13
  400594:	4798      	blx	r3
  400596:	4680      	mov	r8, r0
  400598:	4689      	mov	r9, r1
  40059a:	4b48      	ldr	r3, [pc, #288]	; (4006bc <InitInvAGMBiases+0x1d8>)
  40059c:	685b      	ldr	r3, [r3, #4]
  40059e:	ee07 3a90 	vmov	s15, r3
  4005a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4005a6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 4006d0 <InitInvAGMBiases+0x1ec>
  4005aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
  4005ae:	4b49      	ldr	r3, [pc, #292]	; (4006d4 <InitInvAGMBiases+0x1f0>)
  4005b0:	ee16 0a90 	vmov	r0, s13
  4005b4:	4798      	blx	r3
  4005b6:	4604      	mov	r4, r0
  4005b8:	460d      	mov	r5, r1
  4005ba:	4b40      	ldr	r3, [pc, #256]	; (4006bc <InitInvAGMBiases+0x1d8>)
  4005bc:	689b      	ldr	r3, [r3, #8]
  4005be:	ee07 3a90 	vmov	s15, r3
  4005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4005c6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 4006d0 <InitInvAGMBiases+0x1ec>
  4005ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
  4005ce:	4b41      	ldr	r3, [pc, #260]	; (4006d4 <InitInvAGMBiases+0x1f0>)
  4005d0:	ee16 0a90 	vmov	r0, s13
  4005d4:	4798      	blx	r3
  4005d6:	4602      	mov	r2, r0
  4005d8:	460b      	mov	r3, r1
  4005da:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4005de:	e9cd 4500 	strd	r4, r5, [sp]
  4005e2:	4642      	mov	r2, r8
  4005e4:	464b      	mov	r3, r9
  4005e6:	493d      	ldr	r1, [pc, #244]	; (4006dc <InitInvAGMBiases+0x1f8>)
  4005e8:	2003      	movs	r0, #3
  4005ea:	4c38      	ldr	r4, [pc, #224]	; (4006cc <InitInvAGMBiases+0x1e8>)
  4005ec:	47a0      	blx	r4
			(float)gyr_bias[0]/(1<<16), (float)gyr_bias[1]/(1<<16), (float)gyr_bias[2]/(1<<16));
		INV_MSG(INV_MSG_LEVEL_INFO, "    - Mag:   [%f %f %f]uT",  
  4005ee:	4b32      	ldr	r3, [pc, #200]	; (4006b8 <InitInvAGMBiases+0x1d4>)
  4005f0:	681b      	ldr	r3, [r3, #0]
  4005f2:	ee07 3a90 	vmov	s15, r3
  4005f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4005fa:	ed9f 7a35 	vldr	s14, [pc, #212]	; 4006d0 <InitInvAGMBiases+0x1ec>
  4005fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
  400602:	4b34      	ldr	r3, [pc, #208]	; (4006d4 <InitInvAGMBiases+0x1f0>)
  400604:	ee16 0a90 	vmov	r0, s13
  400608:	4798      	blx	r3
  40060a:	4680      	mov	r8, r0
  40060c:	4689      	mov	r9, r1
  40060e:	4b2a      	ldr	r3, [pc, #168]	; (4006b8 <InitInvAGMBiases+0x1d4>)
  400610:	685b      	ldr	r3, [r3, #4]
  400612:	ee07 3a90 	vmov	s15, r3
  400616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40061a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 4006d0 <InitInvAGMBiases+0x1ec>
  40061e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  400622:	4b2c      	ldr	r3, [pc, #176]	; (4006d4 <InitInvAGMBiases+0x1f0>)
  400624:	ee16 0a90 	vmov	r0, s13
  400628:	4798      	blx	r3
  40062a:	4604      	mov	r4, r0
  40062c:	460d      	mov	r5, r1
  40062e:	4b22      	ldr	r3, [pc, #136]	; (4006b8 <InitInvAGMBiases+0x1d4>)
  400630:	689b      	ldr	r3, [r3, #8]
  400632:	ee07 3a90 	vmov	s15, r3
  400636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40063a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 4006d0 <InitInvAGMBiases+0x1ec>
  40063e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  400642:	4b24      	ldr	r3, [pc, #144]	; (4006d4 <InitInvAGMBiases+0x1f0>)
  400644:	ee16 0a90 	vmov	r0, s13
  400648:	4798      	blx	r3
  40064a:	4602      	mov	r2, r0
  40064c:	460b      	mov	r3, r1
  40064e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  400652:	e9cd 4500 	strd	r4, r5, [sp]
  400656:	4642      	mov	r2, r8
  400658:	464b      	mov	r3, r9
  40065a:	4921      	ldr	r1, [pc, #132]	; (4006e0 <InitInvAGMBiases+0x1fc>)
  40065c:	2003      	movs	r0, #3
  40065e:	4c1b      	ldr	r4, [pc, #108]	; (4006cc <InitInvAGMBiases+0x1e8>)
  400660:	47a0      	blx	r4
			(float)mag_bias[0]/(1<<16), (float)mag_bias[1]/(1<<16), (float)mag_bias[2]/(1<<16));
		
		acc_accuracy = 3;
  400662:	4b20      	ldr	r3, [pc, #128]	; (4006e4 <InitInvAGMBiases+0x200>)
  400664:	2203      	movs	r2, #3
  400666:	601a      	str	r2, [r3, #0]
		gyr_accuracy = 2;
  400668:	4b1f      	ldr	r3, [pc, #124]	; (4006e8 <InitInvAGMBiases+0x204>)
  40066a:	2202      	movs	r2, #2
  40066c:	601a      	str	r2, [r3, #0]
		mag_accuracy = 1;
  40066e:	4b1f      	ldr	r3, [pc, #124]	; (4006ec <InitInvAGMBiases+0x208>)
  400670:	2201      	movs	r2, #1
  400672:	601a      	str	r2, [r3, #0]
  400674:	e01b      	b.n	4006ae <InitInvAGMBiases+0x1ca>
	} else {
		INV_MSG(INV_MSG_LEVEL_INFO, "   No bias values retrieved");
  400676:	491e      	ldr	r1, [pc, #120]	; (4006f0 <InitInvAGMBiases+0x20c>)
  400678:	2003      	movs	r0, #3
  40067a:	4b14      	ldr	r3, [pc, #80]	; (4006cc <InitInvAGMBiases+0x1e8>)
  40067c:	4798      	blx	r3
		memset(acc_bias,0,sizeof(acc_bias));
  40067e:	220c      	movs	r2, #12
  400680:	2100      	movs	r1, #0
  400682:	480f      	ldr	r0, [pc, #60]	; (4006c0 <InitInvAGMBiases+0x1dc>)
  400684:	4b1b      	ldr	r3, [pc, #108]	; (4006f4 <InitInvAGMBiases+0x210>)
  400686:	4798      	blx	r3
		memset(gyr_bias,0,sizeof(gyr_bias));
  400688:	220c      	movs	r2, #12
  40068a:	2100      	movs	r1, #0
  40068c:	480b      	ldr	r0, [pc, #44]	; (4006bc <InitInvAGMBiases+0x1d8>)
  40068e:	4b19      	ldr	r3, [pc, #100]	; (4006f4 <InitInvAGMBiases+0x210>)
  400690:	4798      	blx	r3
		memset(mag_bias,0,sizeof(mag_bias));
  400692:	220c      	movs	r2, #12
  400694:	2100      	movs	r1, #0
  400696:	4808      	ldr	r0, [pc, #32]	; (4006b8 <InitInvAGMBiases+0x1d4>)
  400698:	4b16      	ldr	r3, [pc, #88]	; (4006f4 <InitInvAGMBiases+0x210>)
  40069a:	4798      	blx	r3
		acc_accuracy = 0;
  40069c:	4b11      	ldr	r3, [pc, #68]	; (4006e4 <InitInvAGMBiases+0x200>)
  40069e:	2200      	movs	r2, #0
  4006a0:	601a      	str	r2, [r3, #0]
		gyr_accuracy = 0;
  4006a2:	4b11      	ldr	r3, [pc, #68]	; (4006e8 <InitInvAGMBiases+0x204>)
  4006a4:	2200      	movs	r2, #0
  4006a6:	601a      	str	r2, [r3, #0]
		mag_accuracy = 0;
  4006a8:	4b10      	ldr	r3, [pc, #64]	; (4006ec <InitInvAGMBiases+0x208>)
  4006aa:	2200      	movs	r2, #0
  4006ac:	601a      	str	r2, [r3, #0]
	}

	return 0;
  4006ae:	2300      	movs	r3, #0
}
  4006b0:	4618      	mov	r0, r3
  4006b2:	46bd      	mov	sp, r7
  4006b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
  4006b8:	20003920 	.word	0x20003920
  4006bc:	20003914 	.word	0x20003914
  4006c0:	20003908 	.word	0x20003908
  4006c4:	00400b05 	.word	0x00400b05
  4006c8:	004130f0 	.word	0x004130f0
  4006cc:	00407945 	.word	0x00407945
  4006d0:	47800000 	.word	0x47800000
  4006d4:	0040e551 	.word	0x0040e551
  4006d8:	00413110 	.word	0x00413110
  4006dc:	0041312c 	.word	0x0041312c
  4006e0:	00413148 	.word	0x00413148
  4006e4:	2000392c 	.word	0x2000392c
  4006e8:	20003930 	.word	0x20003930
  4006ec:	20003934 	.word	0x20003934
  4006f0:	00413164 	.word	0x00413164
  4006f4:	0040fa5d 	.word	0x0040fa5d

004006f8 <InitInvAGMAlgo>:


int InitInvAGMAlgo(void)
{
  4006f8:	b580      	push	{r7, lr}
  4006fa:	b08e      	sub	sp, #56	; 0x38
  4006fc:	af00      	add	r7, sp, #0
	int rc = 0;
  4006fe:	2300      	movs	r3, #0
  400700:	637b      	str	r3, [r7, #52]	; 0x34
	InvnAlgoAGMConfig config;

	memset(&input,  0, sizeof(input));
  400702:	2248      	movs	r2, #72	; 0x48
  400704:	2100      	movs	r1, #0
  400706:	4822      	ldr	r0, [pc, #136]	; (400790 <InitInvAGMAlgo+0x98>)
  400708:	4b22      	ldr	r3, [pc, #136]	; (400794 <InitInvAGMAlgo+0x9c>)
  40070a:	4798      	blx	r3
	memset(&output, 0, sizeof(output));
  40070c:	22bc      	movs	r2, #188	; 0xbc
  40070e:	2100      	movs	r1, #0
  400710:	4821      	ldr	r0, [pc, #132]	; (400798 <InitInvAGMAlgo+0xa0>)
  400712:	4b20      	ldr	r3, [pc, #128]	; (400794 <InitInvAGMAlgo+0x9c>)
  400714:	4798      	blx	r3
	memset(&config, 0, sizeof(config));
  400716:	1d3b      	adds	r3, r7, #4
  400718:	2230      	movs	r2, #48	; 0x30
  40071a:	2100      	movs	r1, #0
  40071c:	4618      	mov	r0, r3
  40071e:	4b1d      	ldr	r3, [pc, #116]	; (400794 <InitInvAGMAlgo+0x9c>)
  400720:	4798      	blx	r3
	// config.acc_bias_q16 = output.acc_bias_q16;
	// config.gyr_bias_q16 = output.gyr_bias_q16;
	// config.mag_bias_q16 = output.mag_bias_q16;
	
	/* FSR configurations */
	config.acc_fsr = acc_fsr;
  400722:	2304      	movs	r3, #4
  400724:	617b      	str	r3, [r7, #20]
	config.gyr_fsr = gyr_fsr;
  400726:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40072a:	61bb      	str	r3, [r7, #24]

	config.acc_odr_us = odr_bitfield_to_us(ACCEL_FREQ);
  40072c:	2006      	movs	r0, #6
  40072e:	4b1b      	ldr	r3, [pc, #108]	; (40079c <InitInvAGMAlgo+0xa4>)
  400730:	4798      	blx	r3
  400732:	4603      	mov	r3, r0
  400734:	61fb      	str	r3, [r7, #28]
	config.gyr_odr_us = odr_bitfield_to_us(GYRO_FREQ);
  400736:	2006      	movs	r0, #6
  400738:	4b18      	ldr	r3, [pc, #96]	; (40079c <InitInvAGMAlgo+0xa4>)
  40073a:	4798      	blx	r3
  40073c:	4603      	mov	r3, r0
  40073e:	623b      	str	r3, [r7, #32]
	/* Temoperature sensor configuration */
#if IS_HIGH_RES_MODE
	config.temp_sensitivity = (int32_t)((int64_t)((int64_t)100 << 30)/13248); // high-res;
	config.temp_offset = 25 << 16;
#else
	config.temp_sensitivity = (int32_t)((int64_t)((int64_t)100 << 30)/207);
  400740:	4b17      	ldr	r3, [pc, #92]	; (4007a0 <InitInvAGMAlgo+0xa8>)
  400742:	62fb      	str	r3, [r7, #44]	; 0x2c
	config.temp_offset = 25 << 16;
  400744:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
  400748:	633b      	str	r3, [r7, #48]	; 0x30

#if USE_MAG
	config.mag_sc_q16 = 9830;//0.15
	config.mag_odr_us = MAG_ODR_US;
#else
	config.mag_bias_q16 = NULL;
  40074a:	2300      	movs	r3, #0
  40074c:	60fb      	str	r3, [r7, #12]
#endif
	
	config.acc_bias_q16 = acc_bias;
  40074e:	4b15      	ldr	r3, [pc, #84]	; (4007a4 <InitInvAGMAlgo+0xac>)
  400750:	607b      	str	r3, [r7, #4]
	config.gyr_bias_q16 = gyr_bias;
  400752:	4b15      	ldr	r3, [pc, #84]	; (4007a8 <InitInvAGMAlgo+0xb0>)
  400754:	60bb      	str	r3, [r7, #8]
	config.mag_bias_q16 = mag_bias;
  400756:	4b15      	ldr	r3, [pc, #84]	; (4007ac <InitInvAGMAlgo+0xb4>)
  400758:	60fb      	str	r3, [r7, #12]
	config.acc_accuracy = acc_accuracy;
  40075a:	4b15      	ldr	r3, [pc, #84]	; (4007b0 <InitInvAGMAlgo+0xb8>)
  40075c:	681b      	ldr	r3, [r3, #0]
  40075e:	b25b      	sxtb	r3, r3
  400760:	743b      	strb	r3, [r7, #16]
	config.gyr_accuracy = gyr_accuracy;
  400762:	4b14      	ldr	r3, [pc, #80]	; (4007b4 <InitInvAGMAlgo+0xbc>)
  400764:	681b      	ldr	r3, [r3, #0]
  400766:	b25b      	sxtb	r3, r3
  400768:	747b      	strb	r3, [r7, #17]
	config.mag_accuracy = mag_accuracy;
  40076a:	4b13      	ldr	r3, [pc, #76]	; (4007b8 <InitInvAGMAlgo+0xc0>)
  40076c:	681b      	ldr	r3, [r3, #0]
  40076e:	b25b      	sxtb	r3, r3
  400770:	74bb      	strb	r3, [r7, #18]

	/* Initialize algorithm */
	rc |= invn_algo_agm_init(&config);
  400772:	1d3b      	adds	r3, r7, #4
  400774:	4618      	mov	r0, r3
  400776:	4b11      	ldr	r3, [pc, #68]	; (4007bc <InitInvAGMAlgo+0xc4>)
  400778:	4798      	blx	r3
  40077a:	4603      	mov	r3, r0
  40077c:	461a      	mov	r2, r3
  40077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  400780:	4313      	orrs	r3, r2
  400782:	637b      	str	r3, [r7, #52]	; 0x34

	return rc;
  400784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
  400786:	4618      	mov	r0, r3
  400788:	3738      	adds	r7, #56	; 0x38
  40078a:	46bd      	mov	sp, r7
  40078c:	bd80      	pop	{r7, pc}
  40078e:	bf00      	nop
  400790:	20003800 	.word	0x20003800
  400794:	0040fa5d 	.word	0x0040fa5d
  400798:	20003848 	.word	0x20003848
  40079c:	0040110d 	.word	0x0040110d
  4007a0:	1eeaf9d1 	.word	0x1eeaf9d1
  4007a4:	20003908 	.word	0x20003908
  4007a8:	20003914 	.word	0x20003914
  4007ac:	20003920 	.word	0x20003920
  4007b0:	2000392c 	.word	0x2000392c
  4007b4:	20003930 	.word	0x20003930
  4007b8:	20003934 	.word	0x20003934
  4007bc:	0040a571 	.word	0x0040a571

004007c0 <GetDataFromInvDevice>:

int GetDataFromInvDevice(void)
{
  4007c0:	b580      	push	{r7, lr}
  4007c2:	af00      	add	r7, sp, #0
	/*
	 * Extract packets from FIFO. Callback defined at init time (i.e. 
	 * HandleInvDeviceFifoPacket) will be called for each valid packet extracted from 
	 * FIFO.
	 */
	return inv_icm426xx_get_data_from_fifo(&icm_driver);
  4007c4:	4802      	ldr	r0, [pc, #8]	; (4007d0 <GetDataFromInvDevice+0x10>)
  4007c6:	4b03      	ldr	r3, [pc, #12]	; (4007d4 <GetDataFromInvDevice+0x14>)
  4007c8:	4798      	blx	r3
  4007ca:	4603      	mov	r3, r0
}
  4007cc:	4618      	mov	r0, r3
  4007ce:	bd80      	pop	{r7, pc}
  4007d0:	20002ee8 	.word	0x20002ee8
  4007d4:	004025d9 	.word	0x004025d9

004007d8 <HandleInvDeviceFifoPacket>:


void HandleInvDeviceFifoPacket(inv_icm426xx_sensor_event_t * event)
{
  4007d8:	b5b0      	push	{r4, r5, r7, lr}
  4007da:	b08c      	sub	sp, #48	; 0x30
  4007dc:	af04      	add	r7, sp, #16
  4007de:	6078      	str	r0, [r7, #4]
	uint64_t irq_timestamp = 0;
  4007e0:	f04f 0300 	mov.w	r3, #0
  4007e4:	f04f 0400 	mov.w	r4, #0
  4007e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	 * Extract the timestamp that was buffered when current packet IRQ fired. See 
	 * ext_interrupt_cb() in main.c for more details.
	 * As timestamp buffer is filled in interrupt handler, we should pop it with
	 * interrupts disabled to avoid any concurrent access.
	 */
	inv_disable_irq();
  4007ec:	4b54      	ldr	r3, [pc, #336]	; (400940 <HandleInvDeviceFifoPacket+0x168>)
  4007ee:	4798      	blx	r3
	if (!RINGBUFFER_VOLATILE_EMPTY(&timestamp_buffer_icm))
  4007f0:	4854      	ldr	r0, [pc, #336]	; (400944 <HandleInvDeviceFifoPacket+0x16c>)
  4007f2:	4b55      	ldr	r3, [pc, #340]	; (400948 <HandleInvDeviceFifoPacket+0x170>)
  4007f4:	4798      	blx	r3
  4007f6:	4603      	mov	r3, r0
  4007f8:	2b00      	cmp	r3, #0
  4007fa:	d014      	beq.n	400826 <HandleInvDeviceFifoPacket+0x4e>
		RINGBUFFER_VOLATILE_POP(&timestamp_buffer_icm, &irq_timestamp);
  4007fc:	4b51      	ldr	r3, [pc, #324]	; (400944 <HandleInvDeviceFifoPacket+0x16c>)
  4007fe:	881b      	ldrh	r3, [r3, #0]
  400800:	83fb      	strh	r3, [r7, #30]
  400802:	8bfb      	ldrh	r3, [r7, #30]
  400804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400808:	4a4e      	ldr	r2, [pc, #312]	; (400944 <HandleInvDeviceFifoPacket+0x16c>)
  40080a:	3301      	adds	r3, #1
  40080c:	00db      	lsls	r3, r3, #3
  40080e:	4413      	add	r3, r2
  400810:	e9d3 3400 	ldrd	r3, r4, [r3]
  400814:	e9c7 3404 	strd	r3, r4, [r7, #16]
  400818:	4b4a      	ldr	r3, [pc, #296]	; (400944 <HandleInvDeviceFifoPacket+0x16c>)
  40081a:	881b      	ldrh	r3, [r3, #0]
  40081c:	b29b      	uxth	r3, r3
  40081e:	3301      	adds	r3, #1
  400820:	b29a      	uxth	r2, r3
  400822:	4b48      	ldr	r3, [pc, #288]	; (400944 <HandleInvDeviceFifoPacket+0x16c>)
  400824:	801a      	strh	r2, [r3, #0]
	inv_enable_irq();
  400826:	4b49      	ldr	r3, [pc, #292]	; (40094c <HandleInvDeviceFifoPacket+0x174>)
  400828:	4798      	blx	r3

	/*
	 * Extend the 16-bit timestamp from the FIFO to get an accurate timestamping
	 */
	inv_helper_extend_timestamp_from_fifo(&icm_driver, &clk_calib, 
  40082a:	687b      	ldr	r3, [r7, #4]
  40082c:	8898      	ldrh	r0, [r3, #4]
  40082e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  400832:	687a      	ldr	r2, [r7, #4]
  400834:	6812      	ldr	r2, [r2, #0]
  400836:	f107 0108 	add.w	r1, r7, #8
  40083a:	9103      	str	r1, [sp, #12]
  40083c:	9202      	str	r2, [sp, #8]
  40083e:	e9cd 3400 	strd	r3, r4, [sp]
  400842:	4602      	mov	r2, r0
  400844:	4942      	ldr	r1, [pc, #264]	; (400950 <HandleInvDeviceFifoPacket+0x178>)
  400846:	4843      	ldr	r0, [pc, #268]	; (400954 <HandleInvDeviceFifoPacket+0x17c>)
  400848:	4b43      	ldr	r3, [pc, #268]	; (400958 <HandleInvDeviceFifoPacket+0x180>)
  40084a:	4798      	blx	r3
		event->timestamp_fsync, irq_timestamp, event->sensor_mask, &extended_timestamp);

	input.mask = 0;
  40084c:	4b43      	ldr	r3, [pc, #268]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  40084e:	2200      	movs	r2, #0
  400850:	601a      	str	r2, [r3, #0]

	/*
	 * Retrieve accel and gyro data
	 */
	if (event->sensor_mask & (1 << INV_ICM426XX_SENSOR_ACCEL)) {
  400852:	687b      	ldr	r3, [r7, #4]
  400854:	681b      	ldr	r3, [r3, #0]
  400856:	f003 0301 	and.w	r3, r3, #1
  40085a:	2b00      	cmp	r3, #0
  40085c:	d01b      	beq.n	400896 <HandleInvDeviceFifoPacket+0xbe>
#if IS_HIGH_RES_MODE
		input.sRacc_data[0] = (((int32_t)event->accel[0] << 4)) | event->accel_high_res[0];
		input.sRacc_data[1] = (((int32_t)event->accel[1] << 4)) | event->accel_high_res[1];
		input.sRacc_data[2] = (((int32_t)event->accel[2] << 4)) | event->accel_high_res[2];
#else
		input.sRacc_data[0] = (int32_t)event->accel[0] << 4;
  40085e:	687b      	ldr	r3, [r7, #4]
  400860:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  400864:	011b      	lsls	r3, r3, #4
  400866:	4a3d      	ldr	r2, [pc, #244]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  400868:	6113      	str	r3, [r2, #16]
		input.sRacc_data[1] = (int32_t)event->accel[1] << 4;
  40086a:	687b      	ldr	r3, [r7, #4]
  40086c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  400870:	011b      	lsls	r3, r3, #4
  400872:	4a3a      	ldr	r2, [pc, #232]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  400874:	6153      	str	r3, [r2, #20]
		input.sRacc_data[2] = (int32_t)event->accel[2] << 4;
  400876:	687b      	ldr	r3, [r7, #4]
  400878:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
  40087c:	011b      	lsls	r3, r3, #4
  40087e:	4a37      	ldr	r2, [pc, #220]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  400880:	6193      	str	r3, [r2, #24]
#endif
		apply_mounting_matrix(icm_mounting_matrix, input.sRacc_data);
  400882:	4937      	ldr	r1, [pc, #220]	; (400960 <HandleInvDeviceFifoPacket+0x188>)
  400884:	4837      	ldr	r0, [pc, #220]	; (400964 <HandleInvDeviceFifoPacket+0x18c>)
  400886:	4b38      	ldr	r3, [pc, #224]	; (400968 <HandleInvDeviceFifoPacket+0x190>)
  400888:	4798      	blx	r3
		input.mask |= INVN_ALGO_AGM_INPUT_MASK_ACC;
  40088a:	4b34      	ldr	r3, [pc, #208]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  40088c:	681b      	ldr	r3, [r3, #0]
  40088e:	f043 0301 	orr.w	r3, r3, #1
  400892:	4a32      	ldr	r2, [pc, #200]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  400894:	6013      	str	r3, [r2, #0]
	}

	if (event->sensor_mask & (1 << INV_ICM426XX_SENSOR_GYRO)) {
  400896:	687b      	ldr	r3, [r7, #4]
  400898:	681b      	ldr	r3, [r3, #0]
  40089a:	f003 0302 	and.w	r3, r3, #2
  40089e:	2b00      	cmp	r3, #0
  4008a0:	d01b      	beq.n	4008da <HandleInvDeviceFifoPacket+0x102>
#if IS_HIGH_RES_MODE	
		input.sRgyr_data[0] = (((int32_t)event->gyro[0] << 4)) | event->gyro_high_res[0];
		input.sRgyr_data[1] = (((int32_t)event->gyro[1] << 4)) | event->gyro_high_res[1];
		input.sRgyr_data[2] = (((int32_t)event->gyro[2] << 4)) | event->gyro_high_res[2];
#else
		input.sRgyr_data[0] = (int32_t)event->gyro[0] << 4;
  4008a2:	687b      	ldr	r3, [r7, #4]
  4008a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  4008a8:	011b      	lsls	r3, r3, #4
  4008aa:	4a2c      	ldr	r2, [pc, #176]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  4008ac:	61d3      	str	r3, [r2, #28]
		input.sRgyr_data[1] = (int32_t)event->gyro[1] << 4;
  4008ae:	687b      	ldr	r3, [r7, #4]
  4008b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  4008b4:	011b      	lsls	r3, r3, #4
  4008b6:	4a29      	ldr	r2, [pc, #164]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  4008b8:	6213      	str	r3, [r2, #32]
		input.sRgyr_data[2] = (int32_t)event->gyro[2] << 4;
  4008ba:	687b      	ldr	r3, [r7, #4]
  4008bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  4008c0:	011b      	lsls	r3, r3, #4
  4008c2:	4a26      	ldr	r2, [pc, #152]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  4008c4:	6253      	str	r3, [r2, #36]	; 0x24
#endif
		apply_mounting_matrix(icm_mounting_matrix, input.sRgyr_data);
  4008c6:	4929      	ldr	r1, [pc, #164]	; (40096c <HandleInvDeviceFifoPacket+0x194>)
  4008c8:	4826      	ldr	r0, [pc, #152]	; (400964 <HandleInvDeviceFifoPacket+0x18c>)
  4008ca:	4b27      	ldr	r3, [pc, #156]	; (400968 <HandleInvDeviceFifoPacket+0x190>)
  4008cc:	4798      	blx	r3
		input.mask |= INVN_ALGO_AGM_INPUT_MASK_GYR;
  4008ce:	4b23      	ldr	r3, [pc, #140]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  4008d0:	681b      	ldr	r3, [r3, #0]
  4008d2:	f043 0302 	orr.w	r3, r3, #2
  4008d6:	4a21      	ldr	r2, [pc, #132]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  4008d8:	6013      	str	r3, [r2, #0]
	}

	input.sRtemp_data = event->temperature;
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
  4008e0:	4b1e      	ldr	r3, [pc, #120]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  4008e2:	851a      	strh	r2, [r3, #40]	; 0x28
	input.sRimu_time_us = extended_timestamp;
  4008e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4008e8:	4a1c      	ldr	r2, [pc, #112]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  4008ea:	e9c2 3402 	strd	r3, r4, [r2, #8]

	/* Process the AgmFusion Algo */
	invn_algo_agm_process(&input, &output);
  4008ee:	4920      	ldr	r1, [pc, #128]	; (400970 <HandleInvDeviceFifoPacket+0x198>)
  4008f0:	481a      	ldr	r0, [pc, #104]	; (40095c <HandleInvDeviceFifoPacket+0x184>)
  4008f2:	4b20      	ldr	r3, [pc, #128]	; (400974 <HandleInvDeviceFifoPacket+0x19c>)
  4008f4:	4798      	blx	r3
	
	store_biases();
  4008f6:	4b20      	ldr	r3, [pc, #128]	; (400978 <HandleInvDeviceFifoPacket+0x1a0>)
  4008f8:	4798      	blx	r3

	/* Print data based on the gyro rate */
	if (output.mask & INVN_ALGO_AGM_OUTPUT_MASK_GYRO_CAL) {
  4008fa:	4b1d      	ldr	r3, [pc, #116]	; (400970 <HandleInvDeviceFifoPacket+0x198>)
  4008fc:	681b      	ldr	r3, [r3, #0]
  4008fe:	f003 0302 	and.w	r3, r3, #2
  400902:	2b00      	cmp	r3, #0
  400904:	d018      	beq.n	400938 <HandleInvDeviceFifoPacket+0x160>
		iter_algo++;
  400906:	4b1d      	ldr	r3, [pc, #116]	; (40097c <HandleInvDeviceFifoPacket+0x1a4>)
  400908:	681b      	ldr	r3, [r3, #0]
  40090a:	3301      	adds	r3, #1
  40090c:	4a1b      	ldr	r2, [pc, #108]	; (40097c <HandleInvDeviceFifoPacket+0x1a4>)
  40090e:	6013      	str	r3, [r2, #0]

		if (iter_algo % ((int)(print_period_us/odr_bitfield_to_us(GYRO_FREQ))) == 0)
  400910:	4b1a      	ldr	r3, [pc, #104]	; (40097c <HandleInvDeviceFifoPacket+0x1a4>)
  400912:	681c      	ldr	r4, [r3, #0]
  400914:	4b1a      	ldr	r3, [pc, #104]	; (400980 <HandleInvDeviceFifoPacket+0x1a8>)
  400916:	681b      	ldr	r3, [r3, #0]
  400918:	461d      	mov	r5, r3
  40091a:	2006      	movs	r0, #6
  40091c:	4b19      	ldr	r3, [pc, #100]	; (400984 <HandleInvDeviceFifoPacket+0x1ac>)
  40091e:	4798      	blx	r3
  400920:	4603      	mov	r3, r0
  400922:	fbb5 f3f3 	udiv	r3, r5, r3
  400926:	fb94 f2f3 	sdiv	r2, r4, r3
  40092a:	fb03 f302 	mul.w	r3, r3, r2
  40092e:	1ae3      	subs	r3, r4, r3
  400930:	2b00      	cmp	r3, #0
  400932:	d101      	bne.n	400938 <HandleInvDeviceFifoPacket+0x160>
			print_algo_inputs_outputs();
  400934:	4b14      	ldr	r3, [pc, #80]	; (400988 <HandleInvDeviceFifoPacket+0x1b0>)
  400936:	4798      	blx	r3
	}
}
  400938:	bf00      	nop
  40093a:	3720      	adds	r7, #32
  40093c:	46bd      	mov	sp, r7
  40093e:	bdb0      	pop	{r4, r5, r7, pc}
  400940:	00404969 	.word	0x00404969
  400944:	200048d0 	.word	0x200048d0
  400948:	00400321 	.word	0x00400321
  40094c:	00404991 	.word	0x00404991
  400950:	20003768 	.word	0x20003768
  400954:	20002ee8 	.word	0x20002ee8
  400958:	00403d39 	.word	0x00403d39
  40095c:	20003800 	.word	0x20003800
  400960:	20003810 	.word	0x20003810
  400964:	200000f4 	.word	0x200000f4
  400968:	00400cc5 	.word	0x00400cc5
  40096c:	2000381c 	.word	0x2000381c
  400970:	20003848 	.word	0x20003848
  400974:	00409fb5 	.word	0x00409fb5
  400978:	00400c21 	.word	0x00400c21
  40097c:	20003904 	.word	0x20003904
  400980:	20000118 	.word	0x20000118
  400984:	0040110d 	.word	0x0040110d
  400988:	0040098d 	.word	0x0040098d

0040098c <print_algo_inputs_outputs>:

/* --------------------------------------------------------------------------------------
 *  Static functions definition
 * -------------------------------------------------------------------------------------- */
static void print_algo_inputs_outputs(void)
{
  40098c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400990:	b0b3      	sub	sp, #204	; 0xcc
  400992:	af0e      	add	r7, sp, #56	; 0x38
	float mag_cal[3], mag_bias[3];
	float rv_quat[4], angles_deg_rv[3], rv_heading_accuracy;
#endif
	
	/* Convert data to float before send it to the terminal */
	fixedpoint_to_float( output.acc_cal_q16,            acc_g,       16, 3);
  400994:	f107 0180 	add.w	r1, r7, #128	; 0x80
  400998:	2303      	movs	r3, #3
  40099a:	2210      	movs	r2, #16
  40099c:	484a      	ldr	r0, [pc, #296]	; (400ac8 <print_algo_inputs_outputs+0x13c>)
  40099e:	4c4b      	ldr	r4, [pc, #300]	; (400acc <print_algo_inputs_outputs+0x140>)
  4009a0:	47a0      	blx	r4
	fixedpoint_to_float( output.acc_bias_q16,           acc_bias,    16, 3);
  4009a2:	f107 0174 	add.w	r1, r7, #116	; 0x74
  4009a6:	2303      	movs	r3, #3
  4009a8:	2210      	movs	r2, #16
  4009aa:	4849      	ldr	r0, [pc, #292]	; (400ad0 <print_algo_inputs_outputs+0x144>)
  4009ac:	4c47      	ldr	r4, [pc, #284]	; (400acc <print_algo_inputs_outputs+0x140>)
  4009ae:	47a0      	blx	r4
	fixedpoint_to_float( output.gyr_cal_q16,            gyr_dps,     16, 3);
  4009b0:	f107 0168 	add.w	r1, r7, #104	; 0x68
  4009b4:	2303      	movs	r3, #3
  4009b6:	2210      	movs	r2, #16
  4009b8:	4846      	ldr	r0, [pc, #280]	; (400ad4 <print_algo_inputs_outputs+0x148>)
  4009ba:	4c44      	ldr	r4, [pc, #272]	; (400acc <print_algo_inputs_outputs+0x140>)
  4009bc:	47a0      	blx	r4
	fixedpoint_to_float( output.gyr_bias_q16,           gyr_bias,    16, 3);
  4009be:	f107 015c 	add.w	r1, r7, #92	; 0x5c
  4009c2:	2303      	movs	r3, #3
  4009c4:	2210      	movs	r2, #16
  4009c6:	4844      	ldr	r0, [pc, #272]	; (400ad8 <print_algo_inputs_outputs+0x14c>)
  4009c8:	4c40      	ldr	r4, [pc, #256]	; (400acc <print_algo_inputs_outputs+0x140>)
  4009ca:	47a0      	blx	r4
	fixedpoint_to_float( &output.temp_degC_q16,         &temp,       16, 1);
  4009cc:	f107 0158 	add.w	r1, r7, #88	; 0x58
  4009d0:	2301      	movs	r3, #1
  4009d2:	2210      	movs	r2, #16
  4009d4:	4841      	ldr	r0, [pc, #260]	; (400adc <print_algo_inputs_outputs+0x150>)
  4009d6:	4c3d      	ldr	r4, [pc, #244]	; (400acc <print_algo_inputs_outputs+0x140>)
  4009d8:	47a0      	blx	r4
	fixedpoint_to_float( output.grv_quat_q30,           grv_quat,    30, 4);
  4009da:	f107 0148 	add.w	r1, r7, #72	; 0x48
  4009de:	2304      	movs	r3, #4
  4009e0:	221e      	movs	r2, #30
  4009e2:	483f      	ldr	r0, [pc, #252]	; (400ae0 <print_algo_inputs_outputs+0x154>)
  4009e4:	4c39      	ldr	r4, [pc, #228]	; (400acc <print_algo_inputs_outputs+0x140>)
  4009e6:	47a0      	blx	r4
	fixedpoint_to_float( output.gravity_q16,            gravity,     16, 3);
  4009e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
  4009ec:	2303      	movs	r3, #3
  4009ee:	2210      	movs	r2, #16
  4009f0:	483c      	ldr	r0, [pc, #240]	; (400ae4 <print_algo_inputs_outputs+0x158>)
  4009f2:	4c36      	ldr	r4, [pc, #216]	; (400acc <print_algo_inputs_outputs+0x140>)
  4009f4:	47a0      	blx	r4
	fixedpoint_to_float( output.linear_acc_q16,         linear_acc,  16, 3);
  4009f6:	f107 0124 	add.w	r1, r7, #36	; 0x24
  4009fa:	2303      	movs	r3, #3
  4009fc:	2210      	movs	r2, #16
  4009fe:	483a      	ldr	r0, [pc, #232]	; (400ae8 <print_algo_inputs_outputs+0x15c>)
  400a00:	4c32      	ldr	r4, [pc, #200]	; (400acc <print_algo_inputs_outputs+0x140>)
  400a02:	47a0      	blx	r4
	quaternions_to_angles(grv_quat, angles_deg_grv);
  400a04:	f107 023c 	add.w	r2, r7, #60	; 0x3c
  400a08:	f107 0348 	add.w	r3, r7, #72	; 0x48
  400a0c:	4611      	mov	r1, r2
  400a0e:	4618      	mov	r0, r3
  400a10:	4b36      	ldr	r3, [pc, #216]	; (400aec <print_algo_inputs_outputs+0x160>)
  400a12:	4798      	blx	r3
				//);
		//}
//#endif
	//}

	char rchar = inv_uart_mngr_getc(INV_UART_SENSOR_CTRL);
  400a14:	2000      	movs	r0, #0
  400a16:	4b36      	ldr	r3, [pc, #216]	; (400af0 <print_algo_inputs_outputs+0x164>)
  400a18:	4798      	blx	r3
  400a1a:	4603      	mov	r3, r0
  400a1c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	// INV_MSG(INV_MSG_LEVEL_INFO, "Input : %c\n", rchar);
	if(rchar != 's')
  400a20:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
  400a24:	2b73      	cmp	r3, #115	; 0x73
  400a26:	d14a      	bne.n	400abe <print_algo_inputs_outputs+0x132>
		return;

	// Print custom outputs when requested
	// [timestamp ax ay az temp gx gy gz]
	INV_MSG(INV_MSG_LEVEL_INFO, "%u %f %f %f %f %f %f %f",
  400a28:	4b32      	ldr	r3, [pc, #200]	; (400af4 <print_algo_inputs_outputs+0x168>)
  400a2a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
  400a2e:	61fb      	str	r3, [r7, #28]
  400a30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
  400a34:	4b30      	ldr	r3, [pc, #192]	; (400af8 <print_algo_inputs_outputs+0x16c>)
  400a36:	4610      	mov	r0, r2
  400a38:	4798      	blx	r3
  400a3a:	4680      	mov	r8, r0
  400a3c:	4689      	mov	r9, r1
  400a3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
  400a42:	4b2d      	ldr	r3, [pc, #180]	; (400af8 <print_algo_inputs_outputs+0x16c>)
  400a44:	4610      	mov	r0, r2
  400a46:	4798      	blx	r3
  400a48:	4682      	mov	sl, r0
  400a4a:	468b      	mov	fp, r1
  400a4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
  400a50:	4b29      	ldr	r3, [pc, #164]	; (400af8 <print_algo_inputs_outputs+0x16c>)
  400a52:	4610      	mov	r0, r2
  400a54:	4798      	blx	r3
  400a56:	e9c7 0104 	strd	r0, r1, [r7, #16]
  400a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
  400a5c:	4b26      	ldr	r3, [pc, #152]	; (400af8 <print_algo_inputs_outputs+0x16c>)
  400a5e:	4610      	mov	r0, r2
  400a60:	4798      	blx	r3
  400a62:	e9c7 0102 	strd	r0, r1, [r7, #8]
  400a66:	6eba      	ldr	r2, [r7, #104]	; 0x68
  400a68:	4b23      	ldr	r3, [pc, #140]	; (400af8 <print_algo_inputs_outputs+0x16c>)
  400a6a:	4610      	mov	r0, r2
  400a6c:	4798      	blx	r3
  400a6e:	e9c7 0100 	strd	r0, r1, [r7]
  400a72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
  400a74:	4b20      	ldr	r3, [pc, #128]	; (400af8 <print_algo_inputs_outputs+0x16c>)
  400a76:	4610      	mov	r0, r2
  400a78:	4798      	blx	r3
  400a7a:	4605      	mov	r5, r0
  400a7c:	460e      	mov	r6, r1
  400a7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
  400a80:	4b1d      	ldr	r3, [pc, #116]	; (400af8 <print_algo_inputs_outputs+0x16c>)
  400a82:	4610      	mov	r0, r2
  400a84:	4798      	blx	r3
  400a86:	4603      	mov	r3, r0
  400a88:	460c      	mov	r4, r1
  400a8a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  400a8e:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
  400a92:	ed97 7b00 	vldr	d7, [r7]
  400a96:	ed8d 7b08 	vstr	d7, [sp, #32]
  400a9a:	ed97 7b02 	vldr	d7, [r7, #8]
  400a9e:	ed8d 7b06 	vstr	d7, [sp, #24]
  400aa2:	ed97 7b04 	vldr	d7, [r7, #16]
  400aa6:	ed8d 7b04 	vstr	d7, [sp, #16]
  400aaa:	e9cd ab02 	strd	sl, fp, [sp, #8]
  400aae:	e9cd 8900 	strd	r8, r9, [sp]
  400ab2:	69fa      	ldr	r2, [r7, #28]
  400ab4:	4911      	ldr	r1, [pc, #68]	; (400afc <print_algo_inputs_outputs+0x170>)
  400ab6:	2003      	movs	r0, #3
  400ab8:	4b11      	ldr	r3, [pc, #68]	; (400b00 <print_algo_inputs_outputs+0x174>)
  400aba:	4798      	blx	r3
  400abc:	e000      	b.n	400ac0 <print_algo_inputs_outputs+0x134>
		return;
  400abe:	bf00      	nop
	//}
	//
	///* Print cariage return to ease reading, only if some data are printed */
	//if (data_to_print)
		//INV_MSG(INV_MSG_LEVEL_INFO, "");
}
  400ac0:	3794      	adds	r7, #148	; 0x94
  400ac2:	46bd      	mov	sp, r7
  400ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400ac8:	20003858 	.word	0x20003858
  400acc:	00400e45 	.word	0x00400e45
  400ad0:	20003864 	.word	0x20003864
  400ad4:	20003880 	.word	0x20003880
  400ad8:	2000388c 	.word	0x2000388c
  400adc:	20003900 	.word	0x20003900
  400ae0:	200038c4 	.word	0x200038c4
  400ae4:	200038e8 	.word	0x200038e8
  400ae8:	200038f4 	.word	0x200038f4
  400aec:	00400ebd 	.word	0x00400ebd
  400af0:	004077f1 	.word	0x004077f1
  400af4:	20003800 	.word	0x20003800
  400af8:	0040e551 	.word	0x0040e551
  400afc:	00413180 	.word	0x00413180
  400b00:	00407945 	.word	0x00407945

00400b04 <retrieve_stored_biases_from_flash>:
 * \param[out] gyr_bias_q16 Previously stored gyr bias
 * \param[out] mag_bias_q16 Previously stored mag bias
 * \return 0 on success, -1 if no bias are in NV, an error otherwise
 */
static int retrieve_stored_biases_from_flash(int32_t acc_bias_q16[3], int32_t gyr_bias_q16[3], int32_t mag_bias_q16[3])
{
  400b04:	b580      	push	{r7, lr}
  400b06:	b09c      	sub	sp, #112	; 0x70
  400b08:	af00      	add	r7, sp, #0
  400b0a:	60f8      	str	r0, [r7, #12]
  400b0c:	60b9      	str	r1, [r7, #8]
  400b0e:	607a      	str	r2, [r7, #4]
	uint8_t sensor_bias[84];
	uint8_t idx = 0;
  400b10:	2300      	movs	r3, #0
  400b12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	int rc;
	
	/* Retrieve bias stored in NV memory */
	if ((rc = inv_flash_manager_readData(sensor_bias)) != 0) {
  400b16:	f107 0314 	add.w	r3, r7, #20
  400b1a:	4618      	mov	r0, r3
  400b1c:	4b1a      	ldr	r3, [pc, #104]	; (400b88 <retrieve_stored_biases_from_flash+0x84>)
  400b1e:	4798      	blx	r3
  400b20:	66b8      	str	r0, [r7, #104]	; 0x68
  400b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  400b24:	2b00      	cmp	r3, #0
  400b26:	d002      	beq.n	400b2e <retrieve_stored_biases_from_flash+0x2a>
		return -1;
  400b28:	f04f 33ff 	mov.w	r3, #4294967295
  400b2c:	e028      	b.n	400b80 <retrieve_stored_biases_from_flash+0x7c>
	}
	
	memcpy(acc_bias_q16, &sensor_bias[idx], sizeof(acc_bias_q16[0]) * 3);
  400b2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400b32:	f107 0214 	add.w	r2, r7, #20
  400b36:	4413      	add	r3, r2
  400b38:	220c      	movs	r2, #12
  400b3a:	4619      	mov	r1, r3
  400b3c:	68f8      	ldr	r0, [r7, #12]
  400b3e:	4b13      	ldr	r3, [pc, #76]	; (400b8c <retrieve_stored_biases_from_flash+0x88>)
  400b40:	4798      	blx	r3
	idx += sizeof(acc_bias_q16[0]) * 3;
  400b42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400b46:	330c      	adds	r3, #12
  400b48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	
	memcpy(gyr_bias_q16, &sensor_bias[idx], sizeof(gyr_bias_q16[0]) * 3);
  400b4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400b50:	f107 0214 	add.w	r2, r7, #20
  400b54:	4413      	add	r3, r2
  400b56:	220c      	movs	r2, #12
  400b58:	4619      	mov	r1, r3
  400b5a:	68b8      	ldr	r0, [r7, #8]
  400b5c:	4b0b      	ldr	r3, [pc, #44]	; (400b8c <retrieve_stored_biases_from_flash+0x88>)
  400b5e:	4798      	blx	r3
	idx += sizeof(gyr_bias_q16[0]) * 3;
  400b60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400b64:	330c      	adds	r3, #12
  400b66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	
	memcpy(mag_bias_q16, &sensor_bias[idx], sizeof(mag_bias_q16[0]) * 3);
  400b6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
  400b6e:	f107 0214 	add.w	r2, r7, #20
  400b72:	4413      	add	r3, r2
  400b74:	220c      	movs	r2, #12
  400b76:	4619      	mov	r1, r3
  400b78:	6878      	ldr	r0, [r7, #4]
  400b7a:	4b04      	ldr	r3, [pc, #16]	; (400b8c <retrieve_stored_biases_from_flash+0x88>)
  400b7c:	4798      	blx	r3
		
	return rc;
  400b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
  400b80:	4618      	mov	r0, r3
  400b82:	3770      	adds	r7, #112	; 0x70
  400b84:	46bd      	mov	sp, r7
  400b86:	bd80      	pop	{r7, pc}
  400b88:	00404b51 	.word	0x00404b51
  400b8c:	0040f861 	.word	0x0040f861

00400b90 <store_biases_in_flash>:
 * \param[in] acc_bias_q16 acc bias to be written
 * \param[in] gyr_bias_q16 gyr bias to be written
 * \param[in] mag_bias_q16 mag bias to be written
 */
static void store_biases_in_flash(const int32_t acc_bias_q16[3], const int32_t gyr_bias_q16[3], const int32_t mag_bias_q16[3])
{
  400b90:	b580      	push	{r7, lr}
  400b92:	b09a      	sub	sp, #104	; 0x68
  400b94:	af00      	add	r7, sp, #0
  400b96:	60f8      	str	r0, [r7, #12]
  400b98:	60b9      	str	r1, [r7, #8]
  400b9a:	607a      	str	r2, [r7, #4]
	uint8_t sensors_biases[84] = {0};
  400b9c:	f107 0310 	add.w	r3, r7, #16
  400ba0:	2254      	movs	r2, #84	; 0x54
  400ba2:	2100      	movs	r1, #0
  400ba4:	4618      	mov	r0, r3
  400ba6:	4b1b      	ldr	r3, [pc, #108]	; (400c14 <store_biases_in_flash+0x84>)
  400ba8:	4798      	blx	r3
	uint8_t idx = 0;
  400baa:	2300      	movs	r3, #0
  400bac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
	memcpy(&sensors_biases[idx], acc_bias_q16, sizeof(acc_bias_q16[0]) * 3);
  400bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400bb4:	f107 0210 	add.w	r2, r7, #16
  400bb8:	4413      	add	r3, r2
  400bba:	220c      	movs	r2, #12
  400bbc:	68f9      	ldr	r1, [r7, #12]
  400bbe:	4618      	mov	r0, r3
  400bc0:	4b15      	ldr	r3, [pc, #84]	; (400c18 <store_biases_in_flash+0x88>)
  400bc2:	4798      	blx	r3
	idx += sizeof(acc_bias_q16[0]) * 3;
  400bc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400bc8:	330c      	adds	r3, #12
  400bca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
	memcpy(&sensors_biases[idx], gyr_bias_q16, sizeof(gyr_bias_q16[0]) * 3);
  400bce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400bd2:	f107 0210 	add.w	r2, r7, #16
  400bd6:	4413      	add	r3, r2
  400bd8:	220c      	movs	r2, #12
  400bda:	68b9      	ldr	r1, [r7, #8]
  400bdc:	4618      	mov	r0, r3
  400bde:	4b0e      	ldr	r3, [pc, #56]	; (400c18 <store_biases_in_flash+0x88>)
  400be0:	4798      	blx	r3
	idx += sizeof(gyr_bias_q16[0]) * 3;
  400be2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400be6:	330c      	adds	r3, #12
  400be8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	
	memcpy(&sensors_biases[idx], mag_bias_q16, sizeof(mag_bias_q16[0]) * 3);
  400bec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
  400bf0:	f107 0210 	add.w	r2, r7, #16
  400bf4:	4413      	add	r3, r2
  400bf6:	220c      	movs	r2, #12
  400bf8:	6879      	ldr	r1, [r7, #4]
  400bfa:	4618      	mov	r0, r3
  400bfc:	4b06      	ldr	r3, [pc, #24]	; (400c18 <store_biases_in_flash+0x88>)
  400bfe:	4798      	blx	r3
	
	inv_flash_manager_writeData(sensors_biases);
  400c00:	f107 0310 	add.w	r3, r7, #16
  400c04:	4618      	mov	r0, r3
  400c06:	4b05      	ldr	r3, [pc, #20]	; (400c1c <store_biases_in_flash+0x8c>)
  400c08:	4798      	blx	r3
}
  400c0a:	bf00      	nop
  400c0c:	3768      	adds	r7, #104	; 0x68
  400c0e:	46bd      	mov	sp, r7
  400c10:	bd80      	pop	{r7, pc}
  400c12:	bf00      	nop
  400c14:	0040fa5d 	.word	0x0040fa5d
  400c18:	0040f861 	.word	0x0040f861
  400c1c:	00404bed 	.word	0x00404bed

00400c20 <store_biases>:

/*
 * \brief Evaluate wether biases needs to be written to flash depending on accuracies value
 */
static void store_biases(void)
{		
  400c20:	b598      	push	{r3, r4, r7, lr}
  400c22:	af00      	add	r7, sp, #0
	static sensor_biases_t acc_bias;
	static sensor_biases_t gyr_bias;
	static sensor_biases_t mag_bias;
	static uint8_t biases_stored = 0;
	
	if (!biases_stored) {
  400c24:	4b20      	ldr	r3, [pc, #128]	; (400ca8 <store_biases+0x88>)
  400c26:	781b      	ldrb	r3, [r3, #0]
  400c28:	2b00      	cmp	r3, #0
  400c2a:	d13b      	bne.n	400ca4 <store_biases+0x84>
		if (output.acc_accuracy_flag == 3) {
  400c2c:	4b1f      	ldr	r3, [pc, #124]	; (400cac <store_biases+0x8c>)
  400c2e:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
  400c32:	2b03      	cmp	r3, #3
  400c34:	d10a      	bne.n	400c4c <store_biases+0x2c>
			memcpy(acc_bias.bias_q16, output.acc_bias_q16, sizeof(output.acc_bias_q16));
  400c36:	4a1e      	ldr	r2, [pc, #120]	; (400cb0 <store_biases+0x90>)
  400c38:	4b1c      	ldr	r3, [pc, #112]	; (400cac <store_biases+0x8c>)
  400c3a:	4614      	mov	r4, r2
  400c3c:	331c      	adds	r3, #28
  400c3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			acc_bias.is_saved = 1;
  400c46:	4b1a      	ldr	r3, [pc, #104]	; (400cb0 <store_biases+0x90>)
  400c48:	2201      	movs	r2, #1
  400c4a:	731a      	strb	r2, [r3, #12]
		}

		if (output.gyr_accuracy_flag == 3) {
  400c4c:	4b17      	ldr	r3, [pc, #92]	; (400cac <store_biases+0x8c>)
  400c4e:	f993 3050 	ldrsb.w	r3, [r3, #80]	; 0x50
  400c52:	2b03      	cmp	r3, #3
  400c54:	d10a      	bne.n	400c6c <store_biases+0x4c>
			memcpy(gyr_bias.bias_q16, output.gyr_bias_q16, sizeof(output.gyr_bias_q16));
  400c56:	4a17      	ldr	r2, [pc, #92]	; (400cb4 <store_biases+0x94>)
  400c58:	4b14      	ldr	r3, [pc, #80]	; (400cac <store_biases+0x8c>)
  400c5a:	4614      	mov	r4, r2
  400c5c:	3344      	adds	r3, #68	; 0x44
  400c5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  400c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			gyr_bias.is_saved = 1;
  400c66:	4b13      	ldr	r3, [pc, #76]	; (400cb4 <store_biases+0x94>)
  400c68:	2201      	movs	r2, #1
  400c6a:	731a      	strb	r2, [r3, #12]
			memset(mag_bias.bias_q16, 0, sizeof(mag_bias.bias_q16));
			mag_bias.is_saved = 1;		
		}
#else
		/* Mag is not connected so let's put zeros */
		memset(mag_bias.bias_q16, 0, sizeof(mag_bias.bias_q16));
  400c6c:	220c      	movs	r2, #12
  400c6e:	2100      	movs	r1, #0
  400c70:	4811      	ldr	r0, [pc, #68]	; (400cb8 <store_biases+0x98>)
  400c72:	4b12      	ldr	r3, [pc, #72]	; (400cbc <store_biases+0x9c>)
  400c74:	4798      	blx	r3
		mag_bias.is_saved = 1;
  400c76:	4b10      	ldr	r3, [pc, #64]	; (400cb8 <store_biases+0x98>)
  400c78:	2201      	movs	r2, #1
  400c7a:	731a      	strb	r2, [r3, #12]
#endif

		if ((acc_bias.is_saved == 1) && (gyr_bias.is_saved == 1) && (mag_bias.is_saved == 1)) {
  400c7c:	4b0c      	ldr	r3, [pc, #48]	; (400cb0 <store_biases+0x90>)
  400c7e:	7b1b      	ldrb	r3, [r3, #12]
  400c80:	2b01      	cmp	r3, #1
  400c82:	d10f      	bne.n	400ca4 <store_biases+0x84>
  400c84:	4b0b      	ldr	r3, [pc, #44]	; (400cb4 <store_biases+0x94>)
  400c86:	7b1b      	ldrb	r3, [r3, #12]
  400c88:	2b01      	cmp	r3, #1
  400c8a:	d10b      	bne.n	400ca4 <store_biases+0x84>
  400c8c:	4b0a      	ldr	r3, [pc, #40]	; (400cb8 <store_biases+0x98>)
  400c8e:	7b1b      	ldrb	r3, [r3, #12]
  400c90:	2b01      	cmp	r3, #1
  400c92:	d107      	bne.n	400ca4 <store_biases+0x84>
			 * WARNING: With this configuration, the bias can be stored up to 186 iterations in flash before erase sector.
			 * The erase procedure with the first write, can take up to 250ms.
			 * In this example, the erase is done dynamicly. Depending on the context, it could be better to do it 
			 * when the software go to shutdown.
			 */
			store_biases_in_flash(acc_bias.bias_q16, gyr_bias.bias_q16, mag_bias.bias_q16);
  400c94:	4a08      	ldr	r2, [pc, #32]	; (400cb8 <store_biases+0x98>)
  400c96:	4907      	ldr	r1, [pc, #28]	; (400cb4 <store_biases+0x94>)
  400c98:	4805      	ldr	r0, [pc, #20]	; (400cb0 <store_biases+0x90>)
  400c9a:	4b09      	ldr	r3, [pc, #36]	; (400cc0 <store_biases+0xa0>)
  400c9c:	4798      	blx	r3
			biases_stored = 1;
  400c9e:	4b02      	ldr	r3, [pc, #8]	; (400ca8 <store_biases+0x88>)
  400ca0:	2201      	movs	r2, #1
  400ca2:	701a      	strb	r2, [r3, #0]
		}
	}
}
  400ca4:	bf00      	nop
  400ca6:	bd98      	pop	{r3, r4, r7, pc}
  400ca8:	20003938 	.word	0x20003938
  400cac:	20003848 	.word	0x20003848
  400cb0:	2000393c 	.word	0x2000393c
  400cb4:	2000394c 	.word	0x2000394c
  400cb8:	2000395c 	.word	0x2000395c
  400cbc:	0040fa5d 	.word	0x0040fa5d
  400cc0:	00400b91 	.word	0x00400b91

00400cc4 <apply_mounting_matrix>:


static void apply_mounting_matrix(const int32_t matrix[9], int32_t raw[3])
{
  400cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cc8:	b08d      	sub	sp, #52	; 0x34
  400cca:	af00      	add	r7, sp, #0
  400ccc:	60f8      	str	r0, [r7, #12]
  400cce:	60b9      	str	r1, [r7, #8]
	unsigned i;
	int64_t data_q30[3];
	
	for(i = 0; i < 3; i++) {
  400cd0:	2200      	movs	r2, #0
  400cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
  400cd4:	e08e      	b.n	400df4 <apply_mounting_matrix+0x130>
		data_q30[i] =  ((int64_t)matrix[3*i+0] * raw[0]);
  400cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  400cd8:	460a      	mov	r2, r1
  400cda:	0052      	lsls	r2, r2, #1
  400cdc:	440a      	add	r2, r1
  400cde:	0092      	lsls	r2, r2, #2
  400ce0:	4611      	mov	r1, r2
  400ce2:	68fa      	ldr	r2, [r7, #12]
  400ce4:	440a      	add	r2, r1
  400ce6:	6812      	ldr	r2, [r2, #0]
  400ce8:	4692      	mov	sl, r2
  400cea:	ea4f 7bea 	mov.w	fp, sl, asr #31
  400cee:	68ba      	ldr	r2, [r7, #8]
  400cf0:	6812      	ldr	r2, [r2, #0]
  400cf2:	4611      	mov	r1, r2
  400cf4:	ea4f 72e1 	mov.w	r2, r1, asr #31
  400cf8:	fb01 fe0b 	mul.w	lr, r1, fp
  400cfc:	fb0a f002 	mul.w	r0, sl, r2
  400d00:	4470      	add	r0, lr
  400d02:	fbaa 1201 	umull	r1, r2, sl, r1
  400d06:	4410      	add	r0, r2
  400d08:	4602      	mov	r2, r0
  400d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  400d0c:	00c0      	lsls	r0, r0, #3
  400d0e:	f107 0e30 	add.w	lr, r7, #48	; 0x30
  400d12:	4470      	add	r0, lr
  400d14:	3820      	subs	r0, #32
  400d16:	e9c0 1200 	strd	r1, r2, [r0]
		data_q30[i] += ((int64_t)matrix[3*i+1] * raw[1]);
  400d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400d1c:	00d2      	lsls	r2, r2, #3
  400d1e:	f107 0130 	add.w	r1, r7, #48	; 0x30
  400d22:	440a      	add	r2, r1
  400d24:	3a20      	subs	r2, #32
  400d26:	e9d2 1200 	ldrd	r1, r2, [r2]
  400d2a:	e9c7 1200 	strd	r1, r2, [r7]
  400d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  400d30:	460a      	mov	r2, r1
  400d32:	0052      	lsls	r2, r2, #1
  400d34:	440a      	add	r2, r1
  400d36:	0092      	lsls	r2, r2, #2
  400d38:	3204      	adds	r2, #4
  400d3a:	68f9      	ldr	r1, [r7, #12]
  400d3c:	440a      	add	r2, r1
  400d3e:	6812      	ldr	r2, [r2, #0]
  400d40:	4692      	mov	sl, r2
  400d42:	ea4f 7bea 	mov.w	fp, sl, asr #31
  400d46:	68ba      	ldr	r2, [r7, #8]
  400d48:	3204      	adds	r2, #4
  400d4a:	6812      	ldr	r2, [r2, #0]
  400d4c:	4611      	mov	r1, r2
  400d4e:	ea4f 72e1 	mov.w	r2, r1, asr #31
  400d52:	fb01 fe0b 	mul.w	lr, r1, fp
  400d56:	fb0a f002 	mul.w	r0, sl, r2
  400d5a:	4470      	add	r0, lr
  400d5c:	fbaa 1201 	umull	r1, r2, sl, r1
  400d60:	4410      	add	r0, r2
  400d62:	4602      	mov	r2, r0
  400d64:	e9d7 ab00 	ldrd	sl, fp, [r7]
  400d68:	eb1a 0a01 	adds.w	sl, sl, r1
  400d6c:	eb4b 0b02 	adc.w	fp, fp, r2
  400d70:	4651      	mov	r1, sl
  400d72:	465a      	mov	r2, fp
  400d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  400d76:	00c0      	lsls	r0, r0, #3
  400d78:	f107 0e30 	add.w	lr, r7, #48	; 0x30
  400d7c:	4470      	add	r0, lr
  400d7e:	3820      	subs	r0, #32
  400d80:	e9c0 1200 	strd	r1, r2, [r0]
		data_q30[i] += ((int64_t)matrix[3*i+2] * raw[2]);
  400d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400d86:	00d2      	lsls	r2, r2, #3
  400d88:	f107 0130 	add.w	r1, r7, #48	; 0x30
  400d8c:	440a      	add	r2, r1
  400d8e:	3a20      	subs	r2, #32
  400d90:	e9d2 1200 	ldrd	r1, r2, [r2]
  400d94:	e9c7 1200 	strd	r1, r2, [r7]
  400d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  400d9a:	460a      	mov	r2, r1
  400d9c:	0052      	lsls	r2, r2, #1
  400d9e:	440a      	add	r2, r1
  400da0:	0092      	lsls	r2, r2, #2
  400da2:	3208      	adds	r2, #8
  400da4:	68f9      	ldr	r1, [r7, #12]
  400da6:	440a      	add	r2, r1
  400da8:	6812      	ldr	r2, [r2, #0]
  400daa:	4692      	mov	sl, r2
  400dac:	ea4f 7bea 	mov.w	fp, sl, asr #31
  400db0:	68ba      	ldr	r2, [r7, #8]
  400db2:	3208      	adds	r2, #8
  400db4:	6812      	ldr	r2, [r2, #0]
  400db6:	4611      	mov	r1, r2
  400db8:	ea4f 72e1 	mov.w	r2, r1, asr #31
  400dbc:	fb01 fe0b 	mul.w	lr, r1, fp
  400dc0:	fb0a f002 	mul.w	r0, sl, r2
  400dc4:	4470      	add	r0, lr
  400dc6:	fbaa 1201 	umull	r1, r2, sl, r1
  400dca:	4410      	add	r0, r2
  400dcc:	4602      	mov	r2, r0
  400dce:	e9d7 ab00 	ldrd	sl, fp, [r7]
  400dd2:	eb1a 0a01 	adds.w	sl, sl, r1
  400dd6:	eb4b 0b02 	adc.w	fp, fp, r2
  400dda:	4651      	mov	r1, sl
  400ddc:	465a      	mov	r2, fp
  400dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  400de0:	00c0      	lsls	r0, r0, #3
  400de2:	f107 0e30 	add.w	lr, r7, #48	; 0x30
  400de6:	4470      	add	r0, lr
  400de8:	3820      	subs	r0, #32
  400dea:	e9c0 1200 	strd	r1, r2, [r0]
	for(i = 0; i < 3; i++) {
  400dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400df0:	3201      	adds	r2, #1
  400df2:	62fa      	str	r2, [r7, #44]	; 0x2c
  400df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  400df6:	2a02      	cmp	r2, #2
  400df8:	f67f af6d 	bls.w	400cd6 <apply_mounting_matrix+0x12>
	}
	raw[0] = (int32_t)(data_q30[0]>>30);
  400dfc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
  400e00:	ea4f 7891 	mov.w	r8, r1, lsr #30
  400e04:	ea48 0882 	orr.w	r8, r8, r2, lsl #2
  400e08:	ea4f 79a2 	mov.w	r9, r2, asr #30
  400e0c:	4641      	mov	r1, r8
  400e0e:	68ba      	ldr	r2, [r7, #8]
  400e10:	6011      	str	r1, [r2, #0]
	raw[1] = (int32_t)(data_q30[1]>>30);
  400e12:	68ba      	ldr	r2, [r7, #8]
  400e14:	1d10      	adds	r0, r2, #4
  400e16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
  400e1a:	0f8d      	lsrs	r5, r1, #30
  400e1c:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
  400e20:	1796      	asrs	r6, r2, #30
  400e22:	462a      	mov	r2, r5
  400e24:	6002      	str	r2, [r0, #0]
	raw[2] = (int32_t)(data_q30[2]>>30);
  400e26:	68ba      	ldr	r2, [r7, #8]
  400e28:	f102 0008 	add.w	r0, r2, #8
  400e2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
  400e30:	0f8b      	lsrs	r3, r1, #30
  400e32:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  400e36:	1794      	asrs	r4, r2, #30
  400e38:	6003      	str	r3, [r0, #0]
}
  400e3a:	bf00      	nop
  400e3c:	3734      	adds	r7, #52	; 0x34
  400e3e:	46bd      	mov	sp, r7
  400e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00400e44 <fixedpoint_to_float>:

static void fixedpoint_to_float(const int32_t *in, float *out, const uint8_t fxp_shift, const uint8_t dim)
{
  400e44:	b480      	push	{r7}
  400e46:	b087      	sub	sp, #28
  400e48:	af00      	add	r7, sp, #0
  400e4a:	60f8      	str	r0, [r7, #12]
  400e4c:	60b9      	str	r1, [r7, #8]
  400e4e:	4611      	mov	r1, r2
  400e50:	461a      	mov	r2, r3
  400e52:	460b      	mov	r3, r1
  400e54:	71fb      	strb	r3, [r7, #7]
  400e56:	4613      	mov	r3, r2
  400e58:	71bb      	strb	r3, [r7, #6]
	int i;
	float scale = 1.f / (1<<fxp_shift);
  400e5a:	79fb      	ldrb	r3, [r7, #7]
  400e5c:	2201      	movs	r2, #1
  400e5e:	fa02 f303 	lsl.w	r3, r2, r3
  400e62:	ee07 3a90 	vmov	s15, r3
  400e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  400e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  400e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
  400e72:	edc7 7a04 	vstr	s15, [r7, #16]

	for (i = 0; i < dim; i++)
  400e76:	2300      	movs	r3, #0
  400e78:	617b      	str	r3, [r7, #20]
  400e7a:	e015      	b.n	400ea8 <fixedpoint_to_float+0x64>
		out[i] = scale * in[i];
  400e7c:	697b      	ldr	r3, [r7, #20]
  400e7e:	009b      	lsls	r3, r3, #2
  400e80:	68ba      	ldr	r2, [r7, #8]
  400e82:	4413      	add	r3, r2
  400e84:	697a      	ldr	r2, [r7, #20]
  400e86:	0092      	lsls	r2, r2, #2
  400e88:	68f9      	ldr	r1, [r7, #12]
  400e8a:	440a      	add	r2, r1
  400e8c:	6812      	ldr	r2, [r2, #0]
  400e8e:	ee07 2a90 	vmov	s15, r2
  400e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  400e96:	edd7 7a04 	vldr	s15, [r7, #16]
  400e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
  400e9e:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < dim; i++)
  400ea2:	697b      	ldr	r3, [r7, #20]
  400ea4:	3301      	adds	r3, #1
  400ea6:	617b      	str	r3, [r7, #20]
  400ea8:	79ba      	ldrb	r2, [r7, #6]
  400eaa:	697b      	ldr	r3, [r7, #20]
  400eac:	429a      	cmp	r2, r3
  400eae:	dce5      	bgt.n	400e7c <fixedpoint_to_float+0x38>
}
  400eb0:	bf00      	nop
  400eb2:	371c      	adds	r7, #28
  400eb4:	46bd      	mov	sp, r7
  400eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eba:	4770      	bx	lr

00400ebc <quaternions_to_angles>:

static void quaternions_to_angles(const float quat[4], float angles[3])
{
  400ebc:	b590      	push	{r4, r7, lr}
  400ebe:	b099      	sub	sp, #100	; 0x64
  400ec0:	af00      	add	r7, sp, #0
  400ec2:	6078      	str	r0, [r7, #4]
  400ec4:	6039      	str	r1, [r7, #0]
	const float RAD_2_DEG = (180.f/3.14159265358979f);
  400ec6:	4b8d      	ldr	r3, [pc, #564]	; (4010fc <quaternions_to_angles+0x240>)
  400ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
	float rot_matrix[9];

	{ // quaternion_to_rotation_matrix
		const float dTx  = 2.0f * quat[1];
  400eca:	687b      	ldr	r3, [r7, #4]
  400ecc:	3304      	adds	r3, #4
  400ece:	edd3 7a00 	vldr	s15, [r3]
  400ed2:	ee77 7aa7 	vadd.f32	s15, s15, s15
  400ed6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		const float dTy  = 2.0f * quat[2];
  400eda:	687b      	ldr	r3, [r7, #4]
  400edc:	3308      	adds	r3, #8
  400ede:	edd3 7a00 	vldr	s15, [r3]
  400ee2:	ee77 7aa7 	vadd.f32	s15, s15, s15
  400ee6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		const float dTz  = 2.0f * quat[3];
  400eea:	687b      	ldr	r3, [r7, #4]
  400eec:	330c      	adds	r3, #12
  400eee:	edd3 7a00 	vldr	s15, [r3]
  400ef2:	ee77 7aa7 	vadd.f32	s15, s15, s15
  400ef6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		const float dTwx = dTx  * quat[0];
  400efa:	687b      	ldr	r3, [r7, #4]
  400efc:	ed93 7a00 	vldr	s14, [r3]
  400f00:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
  400f04:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f08:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		const float dTwy = dTy  * quat[0];
  400f0c:	687b      	ldr	r3, [r7, #4]
  400f0e:	ed93 7a00 	vldr	s14, [r3]
  400f12:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
  400f16:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f1a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		const float dTwz = dTz  * quat[0];
  400f1e:	687b      	ldr	r3, [r7, #4]
  400f20:	ed93 7a00 	vldr	s14, [r3]
  400f24:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
  400f28:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f2c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		const float dTxx = dTx  * quat[1];
  400f30:	687b      	ldr	r3, [r7, #4]
  400f32:	3304      	adds	r3, #4
  400f34:	ed93 7a00 	vldr	s14, [r3]
  400f38:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
  400f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f40:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		const float dTxy = dTy  * quat[1];
  400f44:	687b      	ldr	r3, [r7, #4]
  400f46:	3304      	adds	r3, #4
  400f48:	ed93 7a00 	vldr	s14, [r3]
  400f4c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
  400f50:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f54:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		const float dTxz = dTz  * quat[1];
  400f58:	687b      	ldr	r3, [r7, #4]
  400f5a:	3304      	adds	r3, #4
  400f5c:	ed93 7a00 	vldr	s14, [r3]
  400f60:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
  400f64:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		const float dTyy = dTy  * quat[2];
  400f6c:	687b      	ldr	r3, [r7, #4]
  400f6e:	3308      	adds	r3, #8
  400f70:	ed93 7a00 	vldr	s14, [r3]
  400f74:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
  400f78:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f7c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		const float dTyz = dTz  * quat[2];
  400f80:	687b      	ldr	r3, [r7, #4]
  400f82:	3308      	adds	r3, #8
  400f84:	ed93 7a00 	vldr	s14, [r3]
  400f88:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
  400f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
  400f90:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		const float dTzz = dTz  * quat[3];
  400f94:	687b      	ldr	r3, [r7, #4]
  400f96:	330c      	adds	r3, #12
  400f98:	ed93 7a00 	vldr	s14, [r3]
  400f9c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
  400fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
  400fa4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		rot_matrix[0] = 1.0f - (dTyy + dTzz);
  400fa8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
  400fac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
  400fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
  400fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  400fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
  400fbc:	edc7 7a02 	vstr	s15, [r7, #8]
		rot_matrix[1] = dTxy - dTwz;
  400fc0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
  400fc4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
  400fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
  400fcc:	edc7 7a03 	vstr	s15, [r7, #12]
		rot_matrix[2] = dTxz + dTwy;
  400fd0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
  400fd4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
  400fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
  400fdc:	edc7 7a04 	vstr	s15, [r7, #16]
		rot_matrix[3] = dTxy + dTwz;
  400fe0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
  400fe4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
  400fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
  400fec:	edc7 7a05 	vstr	s15, [r7, #20]
		rot_matrix[4] = 1.0f - (dTxx + dTzz);
  400ff0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
  400ff4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
  400ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
  400ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  401000:	ee77 7a67 	vsub.f32	s15, s14, s15
  401004:	edc7 7a06 	vstr	s15, [r7, #24]
		rot_matrix[5] = dTyz - dTwx;
  401008:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
  40100c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
  401010:	ee77 7a67 	vsub.f32	s15, s14, s15
  401014:	edc7 7a07 	vstr	s15, [r7, #28]
		rot_matrix[6] = dTxz - dTwy;
  401018:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
  40101c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
  401020:	ee77 7a67 	vsub.f32	s15, s14, s15
  401024:	edc7 7a08 	vstr	s15, [r7, #32]
		rot_matrix[7] = dTyz + dTwx;
  401028:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
  40102c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
  401030:	ee77 7a27 	vadd.f32	s15, s14, s15
  401034:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		rot_matrix[8] = 1.0f - (dTxx + dTyy);
  401038:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
  40103c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
  401040:	ee77 7a27 	vadd.f32	s15, s14, s15
  401044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  401048:	ee77 7a67 	vsub.f32	s15, s14, s15
  40104c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	}

	angles[0] = atan2f(-rot_matrix[3], rot_matrix[0])*RAD_2_DEG;
  401050:	edd7 7a05 	vldr	s15, [r7, #20]
  401054:	eef1 7a67 	vneg.f32	s15, s15
  401058:	ed97 7a02 	vldr	s14, [r7, #8]
  40105c:	eef0 0a47 	vmov.f32	s1, s14
  401060:	eeb0 0a67 	vmov.f32	s0, s15
  401064:	4b26      	ldr	r3, [pc, #152]	; (401100 <quaternions_to_angles+0x244>)
  401066:	4798      	blx	r3
  401068:	eeb0 7a40 	vmov.f32	s14, s0
  40106c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
  401070:	ee67 7a27 	vmul.f32	s15, s14, s15
  401074:	683b      	ldr	r3, [r7, #0]
  401076:	edc3 7a00 	vstr	s15, [r3]
	angles[1] = atan2f(-rot_matrix[7], rot_matrix[8])*RAD_2_DEG;
  40107a:	683b      	ldr	r3, [r7, #0]
  40107c:	1d1c      	adds	r4, r3, #4
  40107e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  401082:	eef1 7a67 	vneg.f32	s15, s15
  401086:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
  40108a:	eef0 0a47 	vmov.f32	s1, s14
  40108e:	eeb0 0a67 	vmov.f32	s0, s15
  401092:	4b1b      	ldr	r3, [pc, #108]	; (401100 <quaternions_to_angles+0x244>)
  401094:	4798      	blx	r3
  401096:	eeb0 7a40 	vmov.f32	s14, s0
  40109a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
  40109e:	ee67 7a27 	vmul.f32	s15, s14, s15
  4010a2:	edc4 7a00 	vstr	s15, [r4]
	angles[2] = asinf(-rot_matrix[6])*RAD_2_DEG;
  4010a6:	683b      	ldr	r3, [r7, #0]
  4010a8:	f103 0408 	add.w	r4, r3, #8
  4010ac:	edd7 7a08 	vldr	s15, [r7, #32]
  4010b0:	eef1 7a67 	vneg.f32	s15, s15
  4010b4:	eeb0 0a67 	vmov.f32	s0, s15
  4010b8:	4b12      	ldr	r3, [pc, #72]	; (401104 <quaternions_to_angles+0x248>)
  4010ba:	4798      	blx	r3
  4010bc:	eeb0 7a40 	vmov.f32	s14, s0
  4010c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
  4010c4:	ee67 7a27 	vmul.f32	s15, s14, s15
  4010c8:	edc4 7a00 	vstr	s15, [r4]

	if (angles[0] < 0.f)
  4010cc:	683b      	ldr	r3, [r7, #0]
  4010ce:	edd3 7a00 	vldr	s15, [r3]
  4010d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  4010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4010da:	d400      	bmi.n	4010de <quaternions_to_angles+0x222>
		angles[0] += 360.f;
}
  4010dc:	e009      	b.n	4010f2 <quaternions_to_angles+0x236>
		angles[0] += 360.f;
  4010de:	683b      	ldr	r3, [r7, #0]
  4010e0:	edd3 7a00 	vldr	s15, [r3]
  4010e4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 401108 <quaternions_to_angles+0x24c>
  4010e8:	ee77 7a87 	vadd.f32	s15, s15, s14
  4010ec:	683b      	ldr	r3, [r7, #0]
  4010ee:	edc3 7a00 	vstr	s15, [r3]
}
  4010f2:	bf00      	nop
  4010f4:	3764      	adds	r7, #100	; 0x64
  4010f6:	46bd      	mov	sp, r7
  4010f8:	bd90      	pop	{r4, r7, pc}
  4010fa:	bf00      	nop
  4010fc:	42652ee0 	.word	0x42652ee0
  401100:	0040dd31 	.word	0x0040dd31
  401104:	0040dc79 	.word	0x0040dc79
  401108:	43b40000 	.word	0x43b40000

0040110c <odr_bitfield_to_us>:

static uint32_t odr_bitfield_to_us(uint32_t odr_bitfield)
{
  40110c:	b480      	push	{r7}
  40110e:	b083      	sub	sp, #12
  401110:	af00      	add	r7, sp, #0
  401112:	6078      	str	r0, [r7, #4]
	switch ((ICM426XX_GYRO_CONFIG0_ODR_t)odr_bitfield) {
  401114:	687b      	ldr	r3, [r7, #4]
  401116:	b2db      	uxtb	r3, r3
  401118:	3b06      	subs	r3, #6
  40111a:	2b09      	cmp	r3, #9
  40111c:	d825      	bhi.n	40116a <odr_bitfield_to_us+0x5e>
  40111e:	a201      	add	r2, pc, #4	; (adr r2, 401124 <odr_bitfield_to_us+0x18>)
  401120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401124:	0040114d 	.word	0x0040114d
  401128:	00401159 	.word	0x00401159
  40112c:	0040115f 	.word	0x0040115f
  401130:	00401165 	.word	0x00401165
  401134:	0040116b 	.word	0x0040116b
  401138:	0040116b 	.word	0x0040116b
  40113c:	0040116b 	.word	0x0040116b
  401140:	0040116b 	.word	0x0040116b
  401144:	0040116b 	.word	0x0040116b
  401148:	00401153 	.word	0x00401153
		case ICM426XX_GYRO_CONFIG0_ODR_1_KHZ:      return 1000;
  40114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401150:	e00c      	b.n	40116c <odr_bitfield_to_us+0x60>
		case ICM426XX_GYRO_CONFIG0_ODR_500_HZ:     return 2000;
  401152:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  401156:	e009      	b.n	40116c <odr_bitfield_to_us+0x60>
		case ICM426XX_GYRO_CONFIG0_ODR_200_HZ:     return 5000;
  401158:	f241 3388 	movw	r3, #5000	; 0x1388
  40115c:	e006      	b.n	40116c <odr_bitfield_to_us+0x60>
		case ICM426XX_GYRO_CONFIG0_ODR_100_HZ:     return 10000;
  40115e:	f242 7310 	movw	r3, #10000	; 0x2710
  401162:	e003      	b.n	40116c <odr_bitfield_to_us+0x60>
		case ICM426XX_GYRO_CONFIG0_ODR_50_HZ:      return 20000;
  401164:	f644 6320 	movw	r3, #20000	; 0x4e20
  401168:	e000      	b.n	40116c <odr_bitfield_to_us+0x60>
		default:                                   return 640000;
  40116a:	4b03      	ldr	r3, [pc, #12]	; (401178 <odr_bitfield_to_us+0x6c>)
	}
}
  40116c:	4618      	mov	r0, r3
  40116e:	370c      	adds	r7, #12
  401170:	46bd      	mov	sp, r7
  401172:	f85d 7b04 	ldr.w	r7, [sp], #4
  401176:	4770      	bx	lr
  401178:	0009c400 	.word	0x0009c400

0040117c <gyro_fsr_dps_to_bitfield>:
#if !IS_HIGH_RES_MODE
static int gyro_fsr_dps_to_bitfield(int32_t fsr)
{
  40117c:	b480      	push	{r7}
  40117e:	b083      	sub	sp, #12
  401180:	af00      	add	r7, sp, #0
  401182:	6078      	str	r0, [r7, #4]
	switch (fsr) {
  401184:	687b      	ldr	r3, [r7, #4]
  401186:	2b3f      	cmp	r3, #63	; 0x3f
  401188:	dc09      	bgt.n	40119e <gyro_fsr_dps_to_bitfield+0x22>
  40118a:	2b3e      	cmp	r3, #62	; 0x3e
  40118c:	da1d      	bge.n	4011ca <gyro_fsr_dps_to_bitfield+0x4e>
  40118e:	2b0f      	cmp	r3, #15
  401190:	db27      	blt.n	4011e2 <gyro_fsr_dps_to_bitfield+0x66>
  401192:	2b10      	cmp	r3, #16
  401194:	dd15      	ble.n	4011c2 <gyro_fsr_dps_to_bitfield+0x46>
  401196:	3b1f      	subs	r3, #31
  401198:	2b01      	cmp	r3, #1
  40119a:	d822      	bhi.n	4011e2 <gyro_fsr_dps_to_bitfield+0x66>
  40119c:	e013      	b.n	4011c6 <gyro_fsr_dps_to_bitfield+0x4a>
  40119e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4011a2:	d018      	beq.n	4011d6 <gyro_fsr_dps_to_bitfield+0x5a>
  4011a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  4011a8:	dc04      	bgt.n	4011b4 <gyro_fsr_dps_to_bitfield+0x38>
  4011aa:	2b7d      	cmp	r3, #125	; 0x7d
  4011ac:	d00f      	beq.n	4011ce <gyro_fsr_dps_to_bitfield+0x52>
  4011ae:	2bfa      	cmp	r3, #250	; 0xfa
  4011b0:	d00f      	beq.n	4011d2 <gyro_fsr_dps_to_bitfield+0x56>
  4011b2:	e016      	b.n	4011e2 <gyro_fsr_dps_to_bitfield+0x66>
  4011b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4011b8:	d00f      	beq.n	4011da <gyro_fsr_dps_to_bitfield+0x5e>
  4011ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  4011be:	d00e      	beq.n	4011de <gyro_fsr_dps_to_bitfield+0x62>
  4011c0:	e00f      	b.n	4011e2 <gyro_fsr_dps_to_bitfield+0x66>
#if !defined(ICM42686)
	case 15:
	case 16:   return ICM426XX_GYRO_CONFIG0_FS_SEL_16dps;
  4011c2:	23e0      	movs	r3, #224	; 0xe0
  4011c4:	e00f      	b.n	4011e6 <gyro_fsr_dps_to_bitfield+0x6a>
#endif
	case 31:
	case 32:   return ICM426XX_GYRO_CONFIG0_FS_SEL_31dps;
  4011c6:	23c0      	movs	r3, #192	; 0xc0
  4011c8:	e00d      	b.n	4011e6 <gyro_fsr_dps_to_bitfield+0x6a>
	case 62:
	case 63:   return ICM426XX_GYRO_CONFIG0_FS_SEL_62dps;
  4011ca:	23a0      	movs	r3, #160	; 0xa0
  4011cc:	e00b      	b.n	4011e6 <gyro_fsr_dps_to_bitfield+0x6a>
	case 125:  return ICM426XX_GYRO_CONFIG0_FS_SEL_125dps;
  4011ce:	2380      	movs	r3, #128	; 0x80
  4011d0:	e009      	b.n	4011e6 <gyro_fsr_dps_to_bitfield+0x6a>
	case 250:  return ICM426XX_GYRO_CONFIG0_FS_SEL_250dps;
  4011d2:	2360      	movs	r3, #96	; 0x60
  4011d4:	e007      	b.n	4011e6 <gyro_fsr_dps_to_bitfield+0x6a>
	case 500:  return ICM426XX_GYRO_CONFIG0_FS_SEL_500dps;
  4011d6:	2340      	movs	r3, #64	; 0x40
  4011d8:	e005      	b.n	4011e6 <gyro_fsr_dps_to_bitfield+0x6a>
	case 1000: return ICM426XX_GYRO_CONFIG0_FS_SEL_1000dps;
  4011da:	2320      	movs	r3, #32
  4011dc:	e003      	b.n	4011e6 <gyro_fsr_dps_to_bitfield+0x6a>
	case 2000: return ICM426XX_GYRO_CONFIG0_FS_SEL_2000dps;
  4011de:	2300      	movs	r3, #0
  4011e0:	e001      	b.n	4011e6 <gyro_fsr_dps_to_bitfield+0x6a>
#if defined(ICM42686)
	case 4000: return ICM426XX_GYRO_CONFIG0_FS_SEL_4000dps;
#endif
	default:   return -1;
  4011e2:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  4011e6:	4618      	mov	r0, r3
  4011e8:	370c      	adds	r7, #12
  4011ea:	46bd      	mov	sp, r7
  4011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011f0:	4770      	bx	lr
	...

004011f4 <accel_fsr_g_to_bitfield>:

static int accel_fsr_g_to_bitfield(int32_t fsr)
{
  4011f4:	b480      	push	{r7}
  4011f6:	b083      	sub	sp, #12
  4011f8:	af00      	add	r7, sp, #0
  4011fa:	6078      	str	r0, [r7, #4]
	switch (fsr) {
  4011fc:	687b      	ldr	r3, [r7, #4]
  4011fe:	3b02      	subs	r3, #2
  401200:	2b0e      	cmp	r3, #14
  401202:	d829      	bhi.n	401258 <accel_fsr_g_to_bitfield+0x64>
  401204:	a201      	add	r2, pc, #4	; (adr r2, 40120c <accel_fsr_g_to_bitfield+0x18>)
  401206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40120a:	bf00      	nop
  40120c:	00401249 	.word	0x00401249
  401210:	00401259 	.word	0x00401259
  401214:	0040124d 	.word	0x0040124d
  401218:	00401259 	.word	0x00401259
  40121c:	00401259 	.word	0x00401259
  401220:	00401259 	.word	0x00401259
  401224:	00401251 	.word	0x00401251
  401228:	00401259 	.word	0x00401259
  40122c:	00401259 	.word	0x00401259
  401230:	00401259 	.word	0x00401259
  401234:	00401259 	.word	0x00401259
  401238:	00401259 	.word	0x00401259
  40123c:	00401259 	.word	0x00401259
  401240:	00401259 	.word	0x00401259
  401244:	00401255 	.word	0x00401255
	case 2:  return ICM426XX_ACCEL_CONFIG0_FS_SEL_2g;
  401248:	2360      	movs	r3, #96	; 0x60
  40124a:	e007      	b.n	40125c <accel_fsr_g_to_bitfield+0x68>
	case 4:  return ICM426XX_ACCEL_CONFIG0_FS_SEL_4g;
  40124c:	2340      	movs	r3, #64	; 0x40
  40124e:	e005      	b.n	40125c <accel_fsr_g_to_bitfield+0x68>
	case 8:  return ICM426XX_ACCEL_CONFIG0_FS_SEL_8g;
  401250:	2320      	movs	r3, #32
  401252:	e003      	b.n	40125c <accel_fsr_g_to_bitfield+0x68>
	case 16: return ICM426XX_ACCEL_CONFIG0_FS_SEL_16g;
  401254:	2300      	movs	r3, #0
  401256:	e001      	b.n	40125c <accel_fsr_g_to_bitfield+0x68>
#if defined(ICM42686)
	case 32: return ICM426XX_ACCEL_CONFIG0_FS_SEL_32g;
#endif
	default:   return -1;
  401258:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  40125c:	4618      	mov	r0, r3
  40125e:	370c      	adds	r7, #12
  401260:	46bd      	mov	sp, r7
  401262:	f85d 7b04 	ldr.w	r7, [sp], #4
  401266:	4770      	bx	lr

00401268 <get_ringbuffer_volatile_size>:
{
  401268:	b480      	push	{r7}
  40126a:	b085      	sub	sp, #20
  40126c:	af00      	add	r7, sp, #0
  40126e:	6078      	str	r0, [r7, #4]
	memcpy(&rb_var, rb, sizeof(rb_var));
  401270:	687b      	ldr	r3, [r7, #4]
  401272:	681b      	ldr	r3, [r3, #0]
  401274:	60fb      	str	r3, [r7, #12]
	return (rb_var.write - rb_var.read);
  401276:	89fa      	ldrh	r2, [r7, #14]
  401278:	89bb      	ldrh	r3, [r7, #12]
  40127a:	1ad3      	subs	r3, r2, r3
  40127c:	b29b      	uxth	r3, r3
}
  40127e:	4618      	mov	r0, r3
  401280:	3714      	adds	r7, #20
  401282:	46bd      	mov	sp, r7
  401284:	f85d 7b04 	ldr.w	r7, [sp], #4
  401288:	4770      	bx	lr
	...

0040128c <main>:
/* --------------------------------------------------------------------------------------
 *  Main
 * -------------------------------------------------------------------------------------- */

int main(void)
{
  40128c:	b580      	push	{r7, lr}
  40128e:	b08e      	sub	sp, #56	; 0x38
  401290:	af00      	add	r7, sp, #0
	int rc = 0;
  401292:	2300      	movs	r3, #0
  401294:	637b      	str	r3, [r7, #52]	; 0x34
	struct inv_icm426xx_serif icm426xx_serif;
	struct inv_ak0991x_serif ak09915_serif;

	/* Initialize MCU hardware */
	rc = SetupMCUHardware(&icm426xx_serif, &ak09915_serif);
  401296:	463a      	mov	r2, r7
  401298:	f107 0318 	add.w	r3, r7, #24
  40129c:	4611      	mov	r1, r2
  40129e:	4618      	mov	r0, r3
  4012a0:	4b46      	ldr	r3, [pc, #280]	; (4013bc <main+0x130>)
  4012a2:	4798      	blx	r3
  4012a4:	6378      	str	r0, [r7, #52]	; 0x34
	check_rc(rc, "Error while setting up MCU");
  4012a6:	4946      	ldr	r1, [pc, #280]	; (4013c0 <main+0x134>)
  4012a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4012aa:	4b46      	ldr	r3, [pc, #280]	; (4013c4 <main+0x138>)
  4012ac:	4798      	blx	r3

	/* Initialize ICM device */
	INV_MSG(INV_MSG_LEVEL_INFO, "Initializing ICM device...");
  4012ae:	4946      	ldr	r1, [pc, #280]	; (4013c8 <main+0x13c>)
  4012b0:	2003      	movs	r0, #3
  4012b2:	4b46      	ldr	r3, [pc, #280]	; (4013cc <main+0x140>)
  4012b4:	4798      	blx	r3
	rc = SetupInvDevice(&icm426xx_serif);
  4012b6:	f107 0318 	add.w	r3, r7, #24
  4012ba:	4618      	mov	r0, r3
  4012bc:	4b44      	ldr	r3, [pc, #272]	; (4013d0 <main+0x144>)
  4012be:	4798      	blx	r3
  4012c0:	6378      	str	r0, [r7, #52]	; 0x34
	check_rc(rc, "Error while setting up ICM device");
  4012c2:	4944      	ldr	r1, [pc, #272]	; (4013d4 <main+0x148>)
  4012c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4012c6:	4b3f      	ldr	r3, [pc, #252]	; (4013c4 <main+0x138>)
  4012c8:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "OK");
  4012ca:	4943      	ldr	r1, [pc, #268]	; (4013d8 <main+0x14c>)
  4012cc:	2003      	movs	r0, #3
  4012ce:	4b3f      	ldr	r3, [pc, #252]	; (4013cc <main+0x140>)
  4012d0:	4798      	blx	r3

	/* Initialize algorithm */
	INV_MSG(INV_MSG_LEVEL_INFO, "Initializing algorithm...");
  4012d2:	4942      	ldr	r1, [pc, #264]	; (4013dc <main+0x150>)
  4012d4:	2003      	movs	r0, #3
  4012d6:	4b3d      	ldr	r3, [pc, #244]	; (4013cc <main+0x140>)
  4012d8:	4798      	blx	r3
	rc  = InitInvAGMBiases();
  4012da:	4b41      	ldr	r3, [pc, #260]	; (4013e0 <main+0x154>)
  4012dc:	4798      	blx	r3
  4012de:	6378      	str	r0, [r7, #52]	; 0x34
	rc |= InitInvAGMAlgo();
  4012e0:	4b40      	ldr	r3, [pc, #256]	; (4013e4 <main+0x158>)
  4012e2:	4798      	blx	r3
  4012e4:	4602      	mov	r2, r0
  4012e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4012e8:	4313      	orrs	r3, r2
  4012ea:	637b      	str	r3, [r7, #52]	; 0x34
	check_rc(rc, "Error while initializing AGM algorithm");
  4012ec:	493e      	ldr	r1, [pc, #248]	; (4013e8 <main+0x15c>)
  4012ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4012f0:	4b34      	ldr	r3, [pc, #208]	; (4013c4 <main+0x138>)
  4012f2:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "OK");
  4012f4:	4938      	ldr	r1, [pc, #224]	; (4013d8 <main+0x14c>)
  4012f6:	2003      	movs	r0, #3
  4012f8:	4b34      	ldr	r3, [pc, #208]	; (4013cc <main+0x140>)
  4012fa:	4798      	blx	r3
	
	/* Configure ICM device */
	INV_MSG(INV_MSG_LEVEL_INFO, "Configuring ICM device...");
  4012fc:	493b      	ldr	r1, [pc, #236]	; (4013ec <main+0x160>)
  4012fe:	2003      	movs	r0, #3
  401300:	4b32      	ldr	r3, [pc, #200]	; (4013cc <main+0x140>)
  401302:	4798      	blx	r3
	rc = ConfigureInvDevice();
  401304:	4b3a      	ldr	r3, [pc, #232]	; (4013f0 <main+0x164>)
  401306:	4798      	blx	r3
  401308:	6378      	str	r0, [r7, #52]	; 0x34
	check_rc(rc, "Error while configuring ICM device");
  40130a:	493a      	ldr	r1, [pc, #232]	; (4013f4 <main+0x168>)
  40130c:	6b78      	ldr	r0, [r7, #52]	; 0x34
  40130e:	4b2d      	ldr	r3, [pc, #180]	; (4013c4 <main+0x138>)
  401310:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "OK");
  401312:	4931      	ldr	r1, [pc, #196]	; (4013d8 <main+0x14c>)
  401314:	2003      	movs	r0, #3
  401316:	4b2d      	ldr	r3, [pc, #180]	; (4013cc <main+0x140>)
  401318:	4798      	blx	r3
	}
	
#endif

	/* Welcome message*/
	INV_MSG(INV_MSG_LEVEL_INFO, "##################################################");
  40131a:	4937      	ldr	r1, [pc, #220]	; (4013f8 <main+0x16c>)
  40131c:	2003      	movs	r0, #3
  40131e:	4b2b      	ldr	r3, [pc, #172]	; (4013cc <main+0x140>)
  401320:	4798      	blx	r3

	INV_MSG(INV_MSG_LEVEL_INFO, "DK-42605 data streaming application");
  401322:	4936      	ldr	r1, [pc, #216]	; (4013fc <main+0x170>)
  401324:	2003      	movs	r0, #3
  401326:	4b29      	ldr	r3, [pc, #164]	; (4013cc <main+0x140>)
  401328:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Slightly modified from the official example (example-algo)");
  40132a:	4935      	ldr	r1, [pc, #212]	; (401400 <main+0x174>)
  40132c:	2003      	movs	r0, #3
  40132e:	4b27      	ldr	r3, [pc, #156]	; (4013cc <main+0x140>)
  401330:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Jinsun Park (zzangjinsun@3secondz.com)");
  401332:	4934      	ldr	r1, [pc, #208]	; (401404 <main+0x178>)
  401334:	2003      	movs	r0, #3
  401336:	4b25      	ldr	r3, [pc, #148]	; (4013cc <main+0x140>)
  401338:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  40133a:	4933      	ldr	r1, [pc, #204]	; (401408 <main+0x17c>)
  40133c:	2003      	movs	r0, #3
  40133e:	4b23      	ldr	r3, [pc, #140]	; (4013cc <main+0x140>)
  401340:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Current setup : ");
  401342:	4932      	ldr	r1, [pc, #200]	; (40140c <main+0x180>)
  401344:	2003      	movs	r0, #3
  401346:	4b21      	ldr	r3, [pc, #132]	; (4013cc <main+0x140>)
  401348:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Acc FSR : 4g");
  40134a:	4931      	ldr	r1, [pc, #196]	; (401410 <main+0x184>)
  40134c:	2003      	movs	r0, #3
  40134e:	4b1f      	ldr	r3, [pc, #124]	; (4013cc <main+0x140>)
  401350:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Acc ODR : 1kHz");
  401352:	4930      	ldr	r1, [pc, #192]	; (401414 <main+0x188>)
  401354:	2003      	movs	r0, #3
  401356:	4b1d      	ldr	r3, [pc, #116]	; (4013cc <main+0x140>)
  401358:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Gyr FSR : 2000dps");
  40135a:	492f      	ldr	r1, [pc, #188]	; (401418 <main+0x18c>)
  40135c:	2003      	movs	r0, #3
  40135e:	4b1b      	ldr	r3, [pc, #108]	; (4013cc <main+0x140>)
  401360:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Gyr ODR : 1kHz");
  401362:	492e      	ldr	r1, [pc, #184]	; (40141c <main+0x190>)
  401364:	2003      	movs	r0, #3
  401366:	4b19      	ldr	r3, [pc, #100]	; (4013cc <main+0x140>)
  401368:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  40136a:	4927      	ldr	r1, [pc, #156]	; (401408 <main+0x17c>)
  40136c:	2003      	movs	r0, #3
  40136e:	4b17      	ldr	r3, [pc, #92]	; (4013cc <main+0x140>)
  401370:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Output format : [timestamp AccX AccY AccZ Temp GyrX GyrY GyrZ");
  401372:	492b      	ldr	r1, [pc, #172]	; (401420 <main+0x194>)
  401374:	2003      	movs	r0, #3
  401376:	4b15      	ldr	r3, [pc, #84]	; (4013cc <main+0x140>)
  401378:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  40137a:	4923      	ldr	r1, [pc, #140]	; (401408 <main+0x17c>)
  40137c:	2003      	movs	r0, #3
  40137e:	4b13      	ldr	r3, [pc, #76]	; (4013cc <main+0x140>)
  401380:	4798      	blx	r3

	/* Print reminder on how to use example */
	 //print_help();
	
	INV_MSG(INV_MSG_LEVEL_INFO, "Start processing");
  401382:	4928      	ldr	r1, [pc, #160]	; (401424 <main+0x198>)
  401384:	2003      	movs	r0, #3
  401386:	4b11      	ldr	r3, [pc, #68]	; (4013cc <main+0x140>)
  401388:	4798      	blx	r3
			}
		}
#endif

		/* Check Icm426xx IRQ */
		if (irq_from_device & TO_MASK(INV_GPIO_INT1)) {
  40138a:	4b27      	ldr	r3, [pc, #156]	; (401428 <main+0x19c>)
  40138c:	681b      	ldr	r3, [r3, #0]
  40138e:	f003 0301 	and.w	r3, r3, #1
  401392:	2b00      	cmp	r3, #0
  401394:	d0f9      	beq.n	40138a <main+0xfe>
			
			rc = GetDataFromInvDevice();
  401396:	4b25      	ldr	r3, [pc, #148]	; (40142c <main+0x1a0>)
  401398:	4798      	blx	r3
  40139a:	6378      	str	r0, [r7, #52]	; 0x34
			check_rc(rc, "error while getting data from Icm426xx");
  40139c:	4924      	ldr	r1, [pc, #144]	; (401430 <main+0x1a4>)
  40139e:	6b78      	ldr	r0, [r7, #52]	; 0x34
  4013a0:	4b08      	ldr	r3, [pc, #32]	; (4013c4 <main+0x138>)
  4013a2:	4798      	blx	r3

			inv_disable_irq();
  4013a4:	4b23      	ldr	r3, [pc, #140]	; (401434 <main+0x1a8>)
  4013a6:	4798      	blx	r3
			irq_from_device &= ~TO_MASK(INV_GPIO_INT1);
  4013a8:	4b1f      	ldr	r3, [pc, #124]	; (401428 <main+0x19c>)
  4013aa:	681b      	ldr	r3, [r3, #0]
  4013ac:	f023 0301 	bic.w	r3, r3, #1
  4013b0:	4a1d      	ldr	r2, [pc, #116]	; (401428 <main+0x19c>)
  4013b2:	6013      	str	r3, [r2, #0]
			inv_enable_irq();
  4013b4:	4b20      	ldr	r3, [pc, #128]	; (401438 <main+0x1ac>)
  4013b6:	4798      	blx	r3
		if (irq_from_device & TO_MASK(INV_GPIO_INT1)) {
  4013b8:	e7e7      	b.n	40138a <main+0xfe>
  4013ba:	bf00      	nop
  4013bc:	0040143d 	.word	0x0040143d
  4013c0:	00413198 	.word	0x00413198
  4013c4:	0040157d 	.word	0x0040157d
  4013c8:	004131b4 	.word	0x004131b4
  4013cc:	00407945 	.word	0x00407945
  4013d0:	00400345 	.word	0x00400345
  4013d4:	004131d0 	.word	0x004131d0
  4013d8:	004131f4 	.word	0x004131f4
  4013dc:	004131f8 	.word	0x004131f8
  4013e0:	004004e5 	.word	0x004004e5
  4013e4:	004006f9 	.word	0x004006f9
  4013e8:	00413214 	.word	0x00413214
  4013ec:	0041323c 	.word	0x0041323c
  4013f0:	004003fd 	.word	0x004003fd
  4013f4:	00413258 	.word	0x00413258
  4013f8:	0041327c 	.word	0x0041327c
  4013fc:	004132b0 	.word	0x004132b0
  401400:	004132d4 	.word	0x004132d4
  401404:	00413310 	.word	0x00413310
  401408:	00413338 	.word	0x00413338
  40140c:	0041333c 	.word	0x0041333c
  401410:	00413350 	.word	0x00413350
  401414:	00413360 	.word	0x00413360
  401418:	00413370 	.word	0x00413370
  40141c:	00413384 	.word	0x00413384
  401420:	00413394 	.word	0x00413394
  401424:	004133d4 	.word	0x004133d4
  401428:	2000396c 	.word	0x2000396c
  40142c:	004007c1 	.word	0x004007c1
  401430:	004133e8 	.word	0x004133e8
  401434:	00404969 	.word	0x00404969
  401438:	00404991 	.word	0x00404991

0040143c <SetupMCUHardware>:
 *   - a microsecond timer used to periodically starts magneto data acquisition
 *   - a serial link to communicate from MCU to Icm426xx
 *   - a serial link to communicate from MCU to Akm09915
 */
static int SetupMCUHardware(struct inv_icm426xx_serif * icm_serif, struct inv_ak0991x_serif * akm_serif)
{
  40143c:	b580      	push	{r7, lr}
  40143e:	b084      	sub	sp, #16
  401440:	af00      	add	r7, sp, #0
  401442:	6078      	str	r0, [r7, #4]
  401444:	6039      	str	r1, [r7, #0]
	int rc = 0;
  401446:	2300      	movs	r3, #0
  401448:	60fb      	str	r3, [r7, #12]

	inv_board_hal_init();
  40144a:	4b1f      	ldr	r3, [pc, #124]	; (4014c8 <SetupMCUHardware+0x8c>)
  40144c:	4798      	blx	r3

	/* configure UART */
	config_uart(LOG_UART_ID);
  40144e:	2000      	movs	r0, #0
  401450:	4b1e      	ldr	r3, [pc, #120]	; (4014cc <SetupMCUHardware+0x90>)
  401452:	4798      	blx	r3

	/* Setup message facility to see internal traces from FW */
	INV_MSG_SETUP(MSG_LEVEL, msg_printer);
  401454:	491e      	ldr	r1, [pc, #120]	; (4014d0 <SetupMCUHardware+0x94>)
  401456:	2003      	movs	r0, #3
  401458:	4b1e      	ldr	r3, [pc, #120]	; (4014d4 <SetupMCUHardware+0x98>)
  40145a:	4798      	blx	r3
	 * This pin is connected to Icm426xx INT1 output and thus will receive interrupts 
	 * enabled on INT1 from the device.
	 * A callback function is also passed that will be executed each time an interrupt
	 * fires.
	*/
	inv_gpio_sensor_irq_init(INV_GPIO_INT1, ext_interrupt_inv_cb, 0);
  40145c:	2200      	movs	r2, #0
  40145e:	491e      	ldr	r1, [pc, #120]	; (4014d8 <SetupMCUHardware+0x9c>)
  401460:	2000      	movs	r0, #0
  401462:	4b1e      	ldr	r3, [pc, #120]	; (4014dc <SetupMCUHardware+0xa0>)
  401464:	4798      	blx	r3
	
	/* Init timer peripheral for delay */
	rc |= inv_delay_init(DELAY_TIMER);
  401466:	2001      	movs	r0, #1
  401468:	4b1d      	ldr	r3, [pc, #116]	; (4014e0 <SetupMCUHardware+0xa4>)
  40146a:	4798      	blx	r3
  40146c:	4602      	mov	r2, r0
  40146e:	68fb      	ldr	r3, [r7, #12]
  401470:	4313      	orrs	r3, r2
  401472:	60fb      	str	r3, [r7, #12]
	rtc_timer_init(NULL);
	/* Output 32kHz SLCK to PA17, it is up to user to connect it or not at board level to have CLKIN capability */
	rc |= inv_gpio_output_clk_on_pin(INV_GPIO_CLKIN);
#else
	/* Configure the timer for the timebase */
	rc |= inv_timer_configure_timebase(1000000);
  401474:	481b      	ldr	r0, [pc, #108]	; (4014e4 <SetupMCUHardware+0xa8>)
  401476:	4b1c      	ldr	r3, [pc, #112]	; (4014e8 <SetupMCUHardware+0xac>)
  401478:	4798      	blx	r3
  40147a:	4602      	mov	r2, r0
  40147c:	68fb      	ldr	r3, [r7, #12]
  40147e:	4313      	orrs	r3, r2
  401480:	60fb      	str	r3, [r7, #12]
	inv_timer_enable(TIMEBASE_TIMER);
  401482:	2000      	movs	r0, #0
  401484:	4b19      	ldr	r3, [pc, #100]	; (4014ec <SetupMCUHardware+0xb0>)
  401486:	4798      	blx	r3
#endif

	/* Initialize serial inteface between MCU and Icm426xx */
	icm_serif->context   = 0;        /* no need */
  401488:	687b      	ldr	r3, [r7, #4]
  40148a:	2200      	movs	r2, #0
  40148c:	601a      	str	r2, [r3, #0]
	icm_serif->read_reg  = inv_io_hal_read_reg;
  40148e:	687b      	ldr	r3, [r7, #4]
  401490:	4a17      	ldr	r2, [pc, #92]	; (4014f0 <SetupMCUHardware+0xb4>)
  401492:	605a      	str	r2, [r3, #4]
	icm_serif->write_reg = inv_io_hal_write_reg;
  401494:	687b      	ldr	r3, [r7, #4]
  401496:	4a17      	ldr	r2, [pc, #92]	; (4014f4 <SetupMCUHardware+0xb8>)
  401498:	609a      	str	r2, [r3, #8]
	icm_serif->max_read  = 1024*32;  /* maximum number of bytes allowed per serial read */
  40149a:	687b      	ldr	r3, [r7, #4]
  40149c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4014a0:	611a      	str	r2, [r3, #16]
	icm_serif->max_write = 1024*32;  /* maximum number of bytes allowed per serial write */
  4014a2:	687b      	ldr	r3, [r7, #4]
  4014a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4014a8:	615a      	str	r2, [r3, #20]
	icm_serif->serif_type = SERIF_TYPE;
  4014aa:	687b      	ldr	r3, [r7, #4]
  4014ac:	2201      	movs	r2, #1
  4014ae:	761a      	strb	r2, [r3, #24]
	rc |= inv_io_hal_init(icm_serif);
  4014b0:	6878      	ldr	r0, [r7, #4]
  4014b2:	4b11      	ldr	r3, [pc, #68]	; (4014f8 <SetupMCUHardware+0xbc>)
  4014b4:	4798      	blx	r3
  4014b6:	4602      	mov	r2, r0
  4014b8:	68fb      	ldr	r3, [r7, #12]
  4014ba:	4313      	orrs	r3, r2
  4014bc:	60fb      	str	r3, [r7, #12]
	rc |= akm_io_hal_init(akm_serif);
#else
	(void)akm_serif;
#endif

	return rc;
  4014be:	68fb      	ldr	r3, [r7, #12]
}
  4014c0:	4618      	mov	r0, r3
  4014c2:	3710      	adds	r7, #16
  4014c4:	46bd      	mov	sp, r7
  4014c6:	bd80      	pop	{r7, pc}
  4014c8:	0040492d 	.word	0x0040492d
  4014cc:	004001b5 	.word	0x004001b5
  4014d0:	004015b9 	.word	0x004015b9
  4014d4:	00407901 	.word	0x00407901
  4014d8:	004014fd 	.word	0x004014fd
  4014dc:	00404d39 	.word	0x00404d39
  4014e0:	00404a51 	.word	0x00404a51
  4014e4:	000f4240 	.word	0x000f4240
  4014e8:	004061e5 	.word	0x004061e5
  4014ec:	00406165 	.word	0x00406165
  4014f0:	00400225 	.word	0x00400225
  4014f4:	0040028d 	.word	0x0040028d
  4014f8:	004001e5 	.word	0x004001e5

004014fc <ext_interrupt_inv_cb>:
 * This function get a timestamp and store it in a dedicated timestamp buffer.
 * Note that this function is executed in an interrupt handler and thus no protection
 * is implemented for shared variable timestamp_buffer.
 */
void ext_interrupt_inv_cb(void * context, unsigned int_num)
{
  4014fc:	b590      	push	{r4, r7, lr}
  4014fe:	b087      	sub	sp, #28
  401500:	af00      	add	r7, sp, #0
  401502:	6078      	str	r0, [r7, #4]
  401504:	6039      	str	r1, [r7, #0]
#if USE_CLK_IN
	/* Read timestamp from the RTC derived from SLCK since CLKIN is used */
	uint64_t timestamp = rtc_timer_get_time_us();
#else /* ICM42686 */
	/* Read timestamp from the timer */
	uint64_t timestamp = inv_timer_get_counter(TIMEBASE_TIMER);
  401506:	2000      	movs	r0, #0
  401508:	4b18      	ldr	r3, [pc, #96]	; (40156c <ext_interrupt_inv_cb+0x70>)
  40150a:	4798      	blx	r3
  40150c:	4603      	mov	r3, r0
  40150e:	460c      	mov	r4, r1
  401510:	e9c7 3402 	strd	r3, r4, [r7, #8]
#endif

	if (int_num == INV_GPIO_INT1) {
  401514:	683b      	ldr	r3, [r7, #0]
  401516:	2b00      	cmp	r3, #0
  401518:	d11a      	bne.n	401550 <ext_interrupt_inv_cb+0x54>
		if (!RINGBUFFER_VOLATILE_FULL(&timestamp_buffer_icm))
  40151a:	4815      	ldr	r0, [pc, #84]	; (401570 <ext_interrupt_inv_cb+0x74>)
  40151c:	4b15      	ldr	r3, [pc, #84]	; (401574 <ext_interrupt_inv_cb+0x78>)
  40151e:	4798      	blx	r3
  401520:	4603      	mov	r3, r0
  401522:	2b40      	cmp	r3, #64	; 0x40
  401524:	d014      	beq.n	401550 <ext_interrupt_inv_cb+0x54>
			RINGBUFFER_VOLATILE_PUSH(&timestamp_buffer_icm, &timestamp);
  401526:	4b12      	ldr	r3, [pc, #72]	; (401570 <ext_interrupt_inv_cb+0x74>)
  401528:	885b      	ldrh	r3, [r3, #2]
  40152a:	82fb      	strh	r3, [r7, #22]
  40152c:	8afb      	ldrh	r3, [r7, #22]
  40152e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  401532:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  401536:	490e      	ldr	r1, [pc, #56]	; (401570 <ext_interrupt_inv_cb+0x74>)
  401538:	3201      	adds	r2, #1
  40153a:	00d2      	lsls	r2, r2, #3
  40153c:	440a      	add	r2, r1
  40153e:	e9c2 3400 	strd	r3, r4, [r2]
  401542:	4b0b      	ldr	r3, [pc, #44]	; (401570 <ext_interrupt_inv_cb+0x74>)
  401544:	885b      	ldrh	r3, [r3, #2]
  401546:	b29b      	uxth	r3, r3
  401548:	3301      	adds	r3, #1
  40154a:	b29a      	uxth	r2, r3
  40154c:	4b08      	ldr	r3, [pc, #32]	; (401570 <ext_interrupt_inv_cb+0x74>)
  40154e:	805a      	strh	r2, [r3, #2]
	}

	irq_from_device |= TO_MASK(int_num);
  401550:	2201      	movs	r2, #1
  401552:	683b      	ldr	r3, [r7, #0]
  401554:	fa02 f303 	lsl.w	r3, r2, r3
  401558:	4a07      	ldr	r2, [pc, #28]	; (401578 <ext_interrupt_inv_cb+0x7c>)
  40155a:	6812      	ldr	r2, [r2, #0]
  40155c:	4313      	orrs	r3, r2
  40155e:	461a      	mov	r2, r3
  401560:	4b05      	ldr	r3, [pc, #20]	; (401578 <ext_interrupt_inv_cb+0x7c>)
  401562:	601a      	str	r2, [r3, #0]
}
  401564:	bf00      	nop
  401566:	371c      	adds	r7, #28
  401568:	46bd      	mov	sp, r7
  40156a:	bd90      	pop	{r4, r7, pc}
  40156c:	004063f1 	.word	0x004063f1
  401570:	200048d0 	.word	0x200048d0
  401574:	00401269 	.word	0x00401269
  401578:	2000396c 	.word	0x2000396c

0040157c <check_rc>:

/*
 * Helper function to check RC value and block programm execution
 */
void check_rc(int rc, const char * msg_context)
{
  40157c:	b590      	push	{r4, r7, lr}
  40157e:	b085      	sub	sp, #20
  401580:	af02      	add	r7, sp, #8
  401582:	6078      	str	r0, [r7, #4]
  401584:	6039      	str	r1, [r7, #0]
	if (rc < 0) {
  401586:	687b      	ldr	r3, [r7, #4]
  401588:	2b00      	cmp	r3, #0
  40158a:	da0b      	bge.n	4015a4 <check_rc+0x28>
		INV_MSG(INV_MSG_LEVEL_ERROR, "%s: error %d (%s)\r\n", msg_context, rc, inv_error_str(rc));
  40158c:	6878      	ldr	r0, [r7, #4]
  40158e:	4b07      	ldr	r3, [pc, #28]	; (4015ac <check_rc+0x30>)
  401590:	4798      	blx	r3
  401592:	4603      	mov	r3, r0
  401594:	9300      	str	r3, [sp, #0]
  401596:	687b      	ldr	r3, [r7, #4]
  401598:	683a      	ldr	r2, [r7, #0]
  40159a:	4905      	ldr	r1, [pc, #20]	; (4015b0 <check_rc+0x34>)
  40159c:	2001      	movs	r0, #1
  40159e:	4c05      	ldr	r4, [pc, #20]	; (4015b4 <check_rc+0x38>)
  4015a0:	47a0      	blx	r4
		while(1);
  4015a2:	e7fe      	b.n	4015a2 <check_rc+0x26>
	}
}
  4015a4:	bf00      	nop
  4015a6:	370c      	adds	r7, #12
  4015a8:	46bd      	mov	sp, r7
  4015aa:	bd90      	pop	{r4, r7, pc}
  4015ac:	00407811 	.word	0x00407811
  4015b0:	00413648 	.word	0x00413648
  4015b4:	00407945 	.word	0x00407945

004015b8 <msg_printer>:

/*
 * Printer function for message facility
 */
void msg_printer(int level, const char * str, va_list ap)
{
  4015b8:	b590      	push	{r4, r7, lr}
  4015ba:	b087      	sub	sp, #28
  4015bc:	af00      	add	r7, sp, #0
  4015be:	60f8      	str	r0, [r7, #12]
  4015c0:	60b9      	str	r1, [r7, #8]
  4015c2:	607a      	str	r2, [r7, #4]
	static char out_str[256]; /* static to limit stack usage */
	unsigned idx = 0;
  4015c4:	2300      	movs	r3, #0
  4015c6:	617b      	str	r3, [r7, #20]

	//idx += snprintf(&out_str[idx], sizeof(out_str) - idx, "%s", s[level]);
	//if (idx >= (sizeof(out_str)))
		//return;

	idx += vsnprintf(&out_str[idx], sizeof(out_str) - idx, str, ap);
  4015c8:	697b      	ldr	r3, [r7, #20]
  4015ca:	4a18      	ldr	r2, [pc, #96]	; (40162c <msg_printer+0x74>)
  4015cc:	1898      	adds	r0, r3, r2
  4015ce:	697b      	ldr	r3, [r7, #20]
  4015d0:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
  4015d4:	687b      	ldr	r3, [r7, #4]
  4015d6:	68ba      	ldr	r2, [r7, #8]
  4015d8:	4c15      	ldr	r4, [pc, #84]	; (401630 <msg_printer+0x78>)
  4015da:	47a0      	blx	r4
  4015dc:	4603      	mov	r3, r0
  4015de:	461a      	mov	r2, r3
  4015e0:	697b      	ldr	r3, [r7, #20]
  4015e2:	4413      	add	r3, r2
  4015e4:	617b      	str	r3, [r7, #20]
	if (idx >= (sizeof(out_str)))
  4015e6:	697b      	ldr	r3, [r7, #20]
  4015e8:	2bff      	cmp	r3, #255	; 0xff
  4015ea:	d819      	bhi.n	401620 <msg_printer+0x68>
		return;
	idx += snprintf(&out_str[idx], sizeof(out_str) - idx, "\r\n");
  4015ec:	697b      	ldr	r3, [r7, #20]
  4015ee:	4a0f      	ldr	r2, [pc, #60]	; (40162c <msg_printer+0x74>)
  4015f0:	1898      	adds	r0, r3, r2
  4015f2:	697b      	ldr	r3, [r7, #20]
  4015f4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
  4015f8:	4a0e      	ldr	r2, [pc, #56]	; (401634 <msg_printer+0x7c>)
  4015fa:	4619      	mov	r1, r3
  4015fc:	4b0e      	ldr	r3, [pc, #56]	; (401638 <msg_printer+0x80>)
  4015fe:	4798      	blx	r3
  401600:	4603      	mov	r3, r0
  401602:	461a      	mov	r2, r3
  401604:	697b      	ldr	r3, [r7, #20]
  401606:	4413      	add	r3, r2
  401608:	617b      	str	r3, [r7, #20]
	if (idx >= (sizeof(out_str)))
  40160a:	697b      	ldr	r3, [r7, #20]
  40160c:	2bff      	cmp	r3, #255	; 0xff
  40160e:	d809      	bhi.n	401624 <msg_printer+0x6c>
		return;

	inv_uart_mngr_puts(LOG_UART_ID, out_str, idx);
  401610:	697b      	ldr	r3, [r7, #20]
  401612:	b29b      	uxth	r3, r3
  401614:	461a      	mov	r2, r3
  401616:	4905      	ldr	r1, [pc, #20]	; (40162c <msg_printer+0x74>)
  401618:	2000      	movs	r0, #0
  40161a:	4b08      	ldr	r3, [pc, #32]	; (40163c <msg_printer+0x84>)
  40161c:	4798      	blx	r3
  40161e:	e002      	b.n	401626 <msg_printer+0x6e>
		return;
  401620:	bf00      	nop
  401622:	e000      	b.n	401626 <msg_printer+0x6e>
		return;
  401624:	bf00      	nop
}
  401626:	371c      	adds	r7, #28
  401628:	46bd      	mov	sp, r7
  40162a:	bd90      	pop	{r4, r7, pc}
  40162c:	20003970 	.word	0x20003970
  401630:	00411529 	.word	0x00411529
  401634:	0041365c 	.word	0x0041365c
  401638:	0040fe81 	.word	0x0040fe81
  40163c:	004076e5 	.word	0x004076e5

00401640 <inv_icm426xx_get_time_us>:

/*
 * Icm426xx driver needs to get time in us. Let's give its implementation here.
 */
uint64_t inv_icm426xx_get_time_us(void)
{
  401640:	b598      	push	{r3, r4, r7, lr}
  401642:	af00      	add	r7, sp, #0
#if USE_CLK_IN
	return rtc_timer_get_time_us();
#else
	return inv_timer_get_counter(TIMEBASE_TIMER);
  401644:	2000      	movs	r0, #0
  401646:	4b03      	ldr	r3, [pc, #12]	; (401654 <inv_icm426xx_get_time_us+0x14>)
  401648:	4798      	blx	r3
  40164a:	4603      	mov	r3, r0
  40164c:	460c      	mov	r4, r1
#endif
}
  40164e:	4618      	mov	r0, r3
  401650:	4621      	mov	r1, r4
  401652:	bd98      	pop	{r3, r4, r7, pc}
  401654:	004063f1 	.word	0x004063f1

00401658 <inv_helper_disable_irq>:
 * Clock calibration module needs to disable IRQ. Thus inv_helper_disable_irq is
 * defined as extern symbol in clock calibration module. Let's give its implementation
 * here.
 */
void inv_helper_disable_irq(void)
{
  401658:	b580      	push	{r7, lr}
  40165a:	af00      	add	r7, sp, #0
	inv_disable_irq();
  40165c:	4b01      	ldr	r3, [pc, #4]	; (401664 <inv_helper_disable_irq+0xc>)
  40165e:	4798      	blx	r3
}
  401660:	bf00      	nop
  401662:	bd80      	pop	{r7, pc}
  401664:	00404969 	.word	0x00404969

00401668 <inv_helper_enable_irq>:
 * Clock calibration module needs to enable IRQ. Thus inv_helper_enable_irq is
 * defined as extern symbol in clock calibration module. Let's give its implementation
 * here.
 */
void inv_helper_enable_irq(void)
{
  401668:	b580      	push	{r7, lr}
  40166a:	af00      	add	r7, sp, #0
	inv_enable_irq();
  40166c:	4b01      	ldr	r3, [pc, #4]	; (401674 <inv_helper_enable_irq+0xc>)
  40166e:	4798      	blx	r3
}
  401670:	bf00      	nop
  401672:	bd80      	pop	{r7, pc}
  401674:	00404991 	.word	0x00404991

00401678 <inv_icm426xx_sleep_us>:
/*
 * Icm426xx driver needs a sleep feature from external device. Thus inv_icm426xx_sleep_us
 * is defined as extern symbol in driver. Let's give its implementation here.
 */
void inv_icm426xx_sleep_us(uint32_t us)
{
  401678:	b580      	push	{r7, lr}
  40167a:	b082      	sub	sp, #8
  40167c:	af00      	add	r7, sp, #0
  40167e:	6078      	str	r0, [r7, #4]
	inv_delay_us(us);
  401680:	6878      	ldr	r0, [r7, #4]
  401682:	4b03      	ldr	r3, [pc, #12]	; (401690 <inv_icm426xx_sleep_us+0x18>)
  401684:	4798      	blx	r3
}
  401686:	bf00      	nop
  401688:	3708      	adds	r7, #8
  40168a:	46bd      	mov	sp, r7
  40168c:	bd80      	pop	{r7, pc}
  40168e:	bf00      	nop
  401690:	00404a7d 	.word	0x00404a7d

00401694 <inv_icm426xx_set_reg_bank>:
static int inv_icm426xx_init_hardware_from_ui(struct inv_icm426xx * s);
static int inv_icm426xx_is_wu_osc_active(struct inv_icm426xx * s);
static void inv_icm426xx_format_data(const uint8_t endian, const uint8_t *in, uint16_t *out);

int inv_icm426xx_set_reg_bank(struct inv_icm426xx * s, uint8_t bank)
{
  401694:	b590      	push	{r4, r7, lr}
  401696:	b083      	sub	sp, #12
  401698:	af00      	add	r7, sp, #0
  40169a:	6078      	str	r0, [r7, #4]
  40169c:	460b      	mov	r3, r1
  40169e:	70fb      	strb	r3, [r7, #3]
	return inv_icm426xx_write_reg(s, MPUREG_REG_BANK_SEL, 1, &bank);
  4016a0:	1cfb      	adds	r3, r7, #3
  4016a2:	2201      	movs	r2, #1
  4016a4:	2176      	movs	r1, #118	; 0x76
  4016a6:	6878      	ldr	r0, [r7, #4]
  4016a8:	4c03      	ldr	r4, [pc, #12]	; (4016b8 <inv_icm426xx_set_reg_bank+0x24>)
  4016aa:	47a0      	blx	r4
  4016ac:	4603      	mov	r3, r0
}
  4016ae:	4618      	mov	r0, r3
  4016b0:	370c      	adds	r7, #12
  4016b2:	46bd      	mov	sp, r7
  4016b4:	bd90      	pop	{r4, r7, pc}
  4016b6:	bf00      	nop
  4016b8:	00403a1d 	.word	0x00403a1d

004016bc <inv_icm426xx_init>:

int inv_icm426xx_init(struct inv_icm426xx * s, struct inv_icm426xx_serif * serif, void (*sensor_event_cb)(inv_icm426xx_sensor_event_t * event))
{
  4016bc:	b5b0      	push	{r4, r5, r7, lr}
  4016be:	b086      	sub	sp, #24
  4016c0:	af00      	add	r7, sp, #0
  4016c2:	60f8      	str	r0, [r7, #12]
  4016c4:	60b9      	str	r1, [r7, #8]
  4016c6:	607a      	str	r2, [r7, #4]
	int status = 0;
  4016c8:	2300      	movs	r3, #0
  4016ca:	617b      	str	r3, [r7, #20]

	memset(s, 0, sizeof(*s));
  4016cc:	f44f 6208 	mov.w	r2, #2176	; 0x880
  4016d0:	2100      	movs	r1, #0
  4016d2:	68f8      	ldr	r0, [r7, #12]
  4016d4:	4b22      	ldr	r3, [pc, #136]	; (401760 <inv_icm426xx_init+0xa4>)
  4016d6:	4798      	blx	r3
	
	s->transport.serif = *serif;
  4016d8:	68fa      	ldr	r2, [r7, #12]
  4016da:	68bb      	ldr	r3, [r7, #8]
  4016dc:	4614      	mov	r4, r2
  4016de:	461d      	mov	r5, r3
  4016e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4016e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4016e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4016e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	/* Wait some time for ICM to be properly supplied */
	inv_icm426xx_sleep_us(3000);
  4016ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4016f0:	4b1c      	ldr	r3, [pc, #112]	; (401764 <inv_icm426xx_init+0xa8>)
  4016f2:	4798      	blx	r3
	
	if((status |= inv_icm426xx_configure_serial_interface(s)) != 0 )
  4016f4:	68f8      	ldr	r0, [r7, #12]
  4016f6:	4b1c      	ldr	r3, [pc, #112]	; (401768 <inv_icm426xx_init+0xac>)
  4016f8:	4798      	blx	r3
  4016fa:	4602      	mov	r2, r0
  4016fc:	697b      	ldr	r3, [r7, #20]
  4016fe:	4313      	orrs	r3, r2
  401700:	617b      	str	r3, [r7, #20]
  401702:	697b      	ldr	r3, [r7, #20]
  401704:	2b00      	cmp	r3, #0
  401706:	d001      	beq.n	40170c <inv_icm426xx_init+0x50>
		return status;
  401708:	697b      	ldr	r3, [r7, #20]
  40170a:	e025      	b.n	401758 <inv_icm426xx_init+0x9c>

	/* Register the callback to be executed each time inv_icm426xx_get_data_from_fifo extracts 
	 * a packet from fifo or inv_icm426xx_get_data_from_registers read data 
	 */
	s->sensor_event_cb = sensor_event_cb;
  40170c:	68fb      	ldr	r3, [r7, #12]
  40170e:	687a      	ldr	r2, [r7, #4]
  401710:	625a      	str	r2, [r3, #36]	; 0x24
	
	/* initialize hardware */
	status |= inv_icm426xx_init_hardware_from_ui(s);
  401712:	68f8      	ldr	r0, [r7, #12]
  401714:	4b15      	ldr	r3, [pc, #84]	; (40176c <inv_icm426xx_init+0xb0>)
  401716:	4798      	blx	r3
  401718:	4602      	mov	r2, r0
  40171a:	697b      	ldr	r3, [r7, #20]
  40171c:	4313      	orrs	r3, r2
  40171e:	617b      	str	r3, [r7, #20]
		
	/* First data are noisy after enabling sensor
	 * This variable keeps track of gyro start time. Set to UINT32_MAX at init 
	 */
	s->gyro_start_time_us = UINT32_MAX;
  401720:	68fb      	ldr	r3, [r7, #12]
  401722:	f603 0258 	addw	r2, r3, #2136	; 0x858
  401726:	f04f 33ff 	mov.w	r3, #4294967295
  40172a:	f04f 0400 	mov.w	r4, #0
  40172e:	e9c2 3400 	strd	r3, r4, [r2]
	/* First data are noisy after enabling sensor
	 * This variable keeps track of accel start time. Set to UINT32_MAX at init 
	 */
	s->accel_start_time_us = UINT32_MAX;
  401732:	68fb      	ldr	r3, [r7, #12]
  401734:	f503 6206 	add.w	r2, r3, #2144	; 0x860
  401738:	f04f 33ff 	mov.w	r3, #4294967295
  40173c:	f04f 0400 	mov.w	r4, #0
  401740:	e9c2 3400 	strd	r3, r4, [r2]

	/* Gyro power-off to power-on transition can cause ring down issue
	 * This variable keeps track of timestamp when gyro is power off. Set to UINT32_MAX at init
	 */
	s->gyro_power_off_tmst = UINT32_MAX;
  401744:	68fb      	ldr	r3, [r7, #12]
  401746:	f603 0278 	addw	r2, r3, #2168	; 0x878
  40174a:	f04f 33ff 	mov.w	r3, #4294967295
  40174e:	f04f 0400 	mov.w	r4, #0
  401752:	e9c2 3400 	strd	r3, r4, [r2]

	return status;
  401756:	697b      	ldr	r3, [r7, #20]
}
  401758:	4618      	mov	r0, r3
  40175a:	3718      	adds	r7, #24
  40175c:	46bd      	mov	sp, r7
  40175e:	bdb0      	pop	{r4, r5, r7, pc}
  401760:	0040fa5d 	.word	0x0040fa5d
  401764:	00401679 	.word	0x00401679
  401768:	00403359 	.word	0x00403359
  40176c:	00403451 	.word	0x00403451

00401770 <inv_icm426xx_device_reset>:

int inv_icm426xx_device_reset(struct inv_icm426xx * s)
{
  401770:	b590      	push	{r4, r7, lr}
  401772:	b085      	sub	sp, #20
  401774:	af00      	add	r7, sp, #0
  401776:	6078      	str	r0, [r7, #4]
	int status = INV_ERROR_SUCCESS;
  401778:	2300      	movs	r3, #0
  40177a:	60fb      	str	r3, [r7, #12]
	uint8_t data;
	uint8_t intf_cfg4_reg, intf_cfg6_reg;

	/* Set memory bank 1 */
	status |= inv_icm426xx_set_reg_bank(s, 1);
  40177c:	2101      	movs	r1, #1
  40177e:	6878      	ldr	r0, [r7, #4]
  401780:	4b64      	ldr	r3, [pc, #400]	; (401914 <inv_icm426xx_device_reset+0x1a4>)
  401782:	4798      	blx	r3
  401784:	4602      	mov	r2, r0
  401786:	68fb      	ldr	r3, [r7, #12]
  401788:	4313      	orrs	r3, r2
  40178a:	60fb      	str	r3, [r7, #12]
	/* save registers necessary to perform soft reset while still keeping communication link alive */
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG4_B1, 1, &intf_cfg4_reg); // AUX SPI and AP SPI fields
  40178c:	f107 030a 	add.w	r3, r7, #10
  401790:	2201      	movs	r2, #1
  401792:	217a      	movs	r1, #122	; 0x7a
  401794:	6878      	ldr	r0, [r7, #4]
  401796:	4c60      	ldr	r4, [pc, #384]	; (401918 <inv_icm426xx_device_reset+0x1a8>)
  401798:	47a0      	blx	r4
  40179a:	4602      	mov	r2, r0
  40179c:	68fb      	ldr	r3, [r7, #12]
  40179e:	4313      	orrs	r3, r2
  4017a0:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &intf_cfg6_reg);
  4017a2:	f107 0309 	add.w	r3, r7, #9
  4017a6:	2201      	movs	r2, #1
  4017a8:	217c      	movs	r1, #124	; 0x7c
  4017aa:	6878      	ldr	r0, [r7, #4]
  4017ac:	4c5a      	ldr	r4, [pc, #360]	; (401918 <inv_icm426xx_device_reset+0x1a8>)
  4017ae:	47a0      	blx	r4
  4017b0:	4602      	mov	r2, r0
  4017b2:	68fb      	ldr	r3, [r7, #12]
  4017b4:	4313      	orrs	r3, r2
  4017b6:	60fb      	str	r3, [r7, #12]
	/* Set memory bank 0 */
	status |= inv_icm426xx_set_reg_bank(s, 0);
  4017b8:	2100      	movs	r1, #0
  4017ba:	6878      	ldr	r0, [r7, #4]
  4017bc:	4b55      	ldr	r3, [pc, #340]	; (401914 <inv_icm426xx_device_reset+0x1a4>)
  4017be:	4798      	blx	r3
  4017c0:	4602      	mov	r2, r0
  4017c2:	68fb      	ldr	r3, [r7, #12]
  4017c4:	4313      	orrs	r3, r2
  4017c6:	60fb      	str	r3, [r7, #12]
	
	/* Reset the internal registers and restores the default settings.
	 * The bit automatically clears to 0 once the reset is done.
	 * Since soft-reset will trigger OTP reload, SPI mode (bit4) does not need saving
	 */
	data = ICM426XX_DEVICE_CONFIG_RESET_EN;
  4017c8:	2301      	movs	r3, #1
  4017ca:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_DEVICE_CONFIG, 1, &data);
  4017cc:	f107 030b 	add.w	r3, r7, #11
  4017d0:	2201      	movs	r2, #1
  4017d2:	2111      	movs	r1, #17
  4017d4:	6878      	ldr	r0, [r7, #4]
  4017d6:	4c51      	ldr	r4, [pc, #324]	; (40191c <inv_icm426xx_device_reset+0x1ac>)
  4017d8:	47a0      	blx	r4
  4017da:	4602      	mov	r2, r0
  4017dc:	68fb      	ldr	r3, [r7, #12]
  4017de:	4313      	orrs	r3, r2
  4017e0:	60fb      	str	r3, [r7, #12]
	if(status)
  4017e2:	68fb      	ldr	r3, [r7, #12]
  4017e4:	2b00      	cmp	r3, #0
  4017e6:	d001      	beq.n	4017ec <inv_icm426xx_device_reset+0x7c>
		return status;
  4017e8:	68fb      	ldr	r3, [r7, #12]
  4017ea:	e08e      	b.n	40190a <inv_icm426xx_device_reset+0x19a>

	/* Wait 1000us for soft reset to be effective before trying to perform any further read */
	inv_icm426xx_sleep_us(1000);
  4017ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4017f0:	4b4b      	ldr	r3, [pc, #300]	; (401920 <inv_icm426xx_device_reset+0x1b0>)
  4017f2:	4798      	blx	r3

	status |= inv_icm426xx_set_reg_bank(s, 1);
  4017f4:	2101      	movs	r1, #1
  4017f6:	6878      	ldr	r0, [r7, #4]
  4017f8:	4b46      	ldr	r3, [pc, #280]	; (401914 <inv_icm426xx_device_reset+0x1a4>)
  4017fa:	4798      	blx	r3
  4017fc:	4602      	mov	r2, r0
  4017fe:	68fb      	ldr	r3, [r7, #12]
  401800:	4313      	orrs	r3, r2
  401802:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG4_B1, 1, &intf_cfg4_reg);
  401804:	f107 030a 	add.w	r3, r7, #10
  401808:	2201      	movs	r2, #1
  40180a:	217a      	movs	r1, #122	; 0x7a
  40180c:	6878      	ldr	r0, [r7, #4]
  40180e:	4c43      	ldr	r4, [pc, #268]	; (40191c <inv_icm426xx_device_reset+0x1ac>)
  401810:	47a0      	blx	r4
  401812:	4602      	mov	r2, r0
  401814:	68fb      	ldr	r3, [r7, #12]
  401816:	4313      	orrs	r3, r2
  401818:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  40181a:	2100      	movs	r1, #0
  40181c:	6878      	ldr	r0, [r7, #4]
  40181e:	4b3d      	ldr	r3, [pc, #244]	; (401914 <inv_icm426xx_device_reset+0x1a4>)
  401820:	4798      	blx	r3
  401822:	4602      	mov	r2, r0
  401824:	68fb      	ldr	r3, [r7, #12]
  401826:	4313      	orrs	r3, r2
  401828:	60fb      	str	r3, [r7, #12]

	/* Check the Int Reset Done bit */
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_STATUS, 1, &data);
  40182a:	f107 030b 	add.w	r3, r7, #11
  40182e:	2201      	movs	r2, #1
  401830:	212d      	movs	r1, #45	; 0x2d
  401832:	6878      	ldr	r0, [r7, #4]
  401834:	4c38      	ldr	r4, [pc, #224]	; (401918 <inv_icm426xx_device_reset+0x1a8>)
  401836:	47a0      	blx	r4
  401838:	4602      	mov	r2, r0
  40183a:	68fb      	ldr	r3, [r7, #12]
  40183c:	4313      	orrs	r3, r2
  40183e:	60fb      	str	r3, [r7, #12]
	if (0 == (data & BIT_INT_STATUS_RESET_DONE)) {
  401840:	7afb      	ldrb	r3, [r7, #11]
  401842:	f003 0310 	and.w	r3, r3, #16
  401846:	2b00      	cmp	r3, #0
  401848:	d102      	bne.n	401850 <inv_icm426xx_device_reset+0xe0>
		return INV_ERROR_UNEXPECTED;
  40184a:	f06f 030b 	mvn.w	r3, #11
  40184e:	e05c      	b.n	40190a <inv_icm426xx_device_reset+0x19a>
	}

	/* Init transport layer */
	inv_icm426xx_init_transport(s);
  401850:	6878      	ldr	r0, [r7, #4]
  401852:	4b34      	ldr	r3, [pc, #208]	; (401924 <inv_icm426xx_device_reset+0x1b4>)
  401854:	4798      	blx	r3
	
	status |= inv_icm426xx_set_reg_bank(s, 1);
  401856:	2101      	movs	r1, #1
  401858:	6878      	ldr	r0, [r7, #4]
  40185a:	4b2e      	ldr	r3, [pc, #184]	; (401914 <inv_icm426xx_device_reset+0x1a4>)
  40185c:	4798      	blx	r3
  40185e:	4602      	mov	r2, r0
  401860:	68fb      	ldr	r3, [r7, #12]
  401862:	4313      	orrs	r3, r2
  401864:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &intf_cfg6_reg);
  401866:	f107 0309 	add.w	r3, r7, #9
  40186a:	2201      	movs	r2, #1
  40186c:	217c      	movs	r1, #124	; 0x7c
  40186e:	6878      	ldr	r0, [r7, #4]
  401870:	4c2a      	ldr	r4, [pc, #168]	; (40191c <inv_icm426xx_device_reset+0x1ac>)
  401872:	47a0      	blx	r4
  401874:	4602      	mov	r2, r0
  401876:	68fb      	ldr	r3, [r7, #12]
  401878:	4313      	orrs	r3, r2
  40187a:	60fb      	str	r3, [r7, #12]
	/* Configure FSYNC on INT2=pin 9 */
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG5_B1, 1, &data);
  40187c:	f107 030b 	add.w	r3, r7, #11
  401880:	2201      	movs	r2, #1
  401882:	217b      	movs	r1, #123	; 0x7b
  401884:	6878      	ldr	r0, [r7, #4]
  401886:	4c24      	ldr	r4, [pc, #144]	; (401918 <inv_icm426xx_device_reset+0x1a8>)
  401888:	47a0      	blx	r4
  40188a:	4602      	mov	r2, r0
  40188c:	68fb      	ldr	r3, [r7, #12]
  40188e:	4313      	orrs	r3, r2
  401890:	60fb      	str	r3, [r7, #12]
	data &= (uint8_t)~BIT_INTF_CONFIG5_GPIO_PAD_SEL_MASK;
  401892:	7afb      	ldrb	r3, [r7, #11]
  401894:	f023 0306 	bic.w	r3, r3, #6
  401898:	b2db      	uxtb	r3, r3
  40189a:	72fb      	strb	r3, [r7, #11]
	data |= (1 << BIT_INTF_CONFIG5_GPIO_PAD_SEL_POS);
  40189c:	7afb      	ldrb	r3, [r7, #11]
  40189e:	f043 0302 	orr.w	r3, r3, #2
  4018a2:	b2db      	uxtb	r3, r3
  4018a4:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG5_B1, 1, &data);
  4018a6:	f107 030b 	add.w	r3, r7, #11
  4018aa:	2201      	movs	r2, #1
  4018ac:	217b      	movs	r1, #123	; 0x7b
  4018ae:	6878      	ldr	r0, [r7, #4]
  4018b0:	4c1a      	ldr	r4, [pc, #104]	; (40191c <inv_icm426xx_device_reset+0x1ac>)
  4018b2:	47a0      	blx	r4
  4018b4:	4602      	mov	r2, r0
  4018b6:	68fb      	ldr	r3, [r7, #12]
  4018b8:	4313      	orrs	r3, r2
  4018ba:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  4018bc:	2100      	movs	r1, #0
  4018be:	6878      	ldr	r0, [r7, #4]
  4018c0:	4b14      	ldr	r3, [pc, #80]	; (401914 <inv_icm426xx_device_reset+0x1a4>)
  4018c2:	4798      	blx	r3
  4018c4:	4602      	mov	r2, r0
  4018c6:	68fb      	ldr	r3, [r7, #12]
  4018c8:	4313      	orrs	r3, r2
  4018ca:	60fb      	str	r3, [r7, #12]

	/* Read and set endianess for further processing */
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data);
  4018cc:	f107 030b 	add.w	r3, r7, #11
  4018d0:	2201      	movs	r2, #1
  4018d2:	214c      	movs	r1, #76	; 0x4c
  4018d4:	6878      	ldr	r0, [r7, #4]
  4018d6:	4c10      	ldr	r4, [pc, #64]	; (401918 <inv_icm426xx_device_reset+0x1a8>)
  4018d8:	47a0      	blx	r4
  4018da:	4602      	mov	r2, r0
  4018dc:	68fb      	ldr	r3, [r7, #12]
  4018de:	4313      	orrs	r3, r2
  4018e0:	60fb      	str	r3, [r7, #12]
	s->endianess_data = data & BIT_DATA_ENDIAN_MASK;
  4018e2:	7afb      	ldrb	r3, [r7, #11]
  4018e4:	f003 0310 	and.w	r3, r3, #16
  4018e8:	b2da      	uxtb	r2, r3
  4018ea:	687b      	ldr	r3, [r7, #4]
  4018ec:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868

	if(s->transport.serif.serif_type == ICM426XX_UI_I3C){
  4018f0:	687b      	ldr	r3, [r7, #4]
  4018f2:	7e1b      	ldrb	r3, [r3, #24]
  4018f4:	2b02      	cmp	r3, #2
  4018f6:	d107      	bne.n	401908 <inv_icm426xx_device_reset+0x198>
		status |= s->transport.serif.configure((struct inv_icm426xx_serif *)s);
  4018f8:	687b      	ldr	r3, [r7, #4]
  4018fa:	68db      	ldr	r3, [r3, #12]
  4018fc:	6878      	ldr	r0, [r7, #4]
  4018fe:	4798      	blx	r3
  401900:	4602      	mov	r2, r0
  401902:	68fb      	ldr	r3, [r7, #12]
  401904:	4313      	orrs	r3, r2
  401906:	60fb      	str	r3, [r7, #12]
	}

	return status;
  401908:	68fb      	ldr	r3, [r7, #12]
}
  40190a:	4618      	mov	r0, r3
  40190c:	3714      	adds	r7, #20
  40190e:	46bd      	mov	sp, r7
  401910:	bd90      	pop	{r4, r7, pc}
  401912:	bf00      	nop
  401914:	00401695 	.word	0x00401695
  401918:	00403951 	.word	0x00403951
  40191c:	00403a1d 	.word	0x00403a1d
  401920:	00401679 	.word	0x00401679
  401924:	00403889 	.word	0x00403889

00401928 <inv_icm426xx_get_who_am_i>:

int inv_icm426xx_get_who_am_i(struct inv_icm426xx * s, uint8_t * who_am_i)
{
  401928:	b590      	push	{r4, r7, lr}
  40192a:	b083      	sub	sp, #12
  40192c:	af00      	add	r7, sp, #0
  40192e:	6078      	str	r0, [r7, #4]
  401930:	6039      	str	r1, [r7, #0]
	return inv_icm426xx_read_reg(s, MPUREG_WHO_AM_I, 1, who_am_i);
  401932:	683b      	ldr	r3, [r7, #0]
  401934:	2201      	movs	r2, #1
  401936:	2175      	movs	r1, #117	; 0x75
  401938:	6878      	ldr	r0, [r7, #4]
  40193a:	4c03      	ldr	r4, [pc, #12]	; (401948 <inv_icm426xx_get_who_am_i+0x20>)
  40193c:	47a0      	blx	r4
  40193e:	4603      	mov	r3, r0
}
  401940:	4618      	mov	r0, r3
  401942:	370c      	adds	r7, #12
  401944:	46bd      	mov	sp, r7
  401946:	bd90      	pop	{r4, r7, pc}
  401948:	00403951 	.word	0x00403951

0040194c <inv_icm426xx_force_clock_source>:

int inv_icm426xx_force_clock_source(struct inv_icm426xx * s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t clk_src)
{
  40194c:	b590      	push	{r4, r7, lr}
  40194e:	b085      	sub	sp, #20
  401950:	af00      	add	r7, sp, #0
  401952:	6078      	str	r0, [r7, #4]
  401954:	460b      	mov	r3, r1
  401956:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  401958:	2300      	movs	r3, #0
  40195a:	60fb      	str	r3, [r7, #12]
	uint8_t data;
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  40195c:	f107 030b 	add.w	r3, r7, #11
  401960:	2201      	movs	r2, #1
  401962:	214d      	movs	r1, #77	; 0x4d
  401964:	6878      	ldr	r0, [r7, #4]
  401966:	4c12      	ldr	r4, [pc, #72]	; (4019b0 <inv_icm426xx_force_clock_source+0x64>)
  401968:	47a0      	blx	r4
  40196a:	4602      	mov	r2, r0
  40196c:	68fb      	ldr	r3, [r7, #12]
  40196e:	4313      	orrs	r3, r2
  401970:	60fb      	str	r3, [r7, #12]
	if(clk_src == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC)
  401972:	78fb      	ldrb	r3, [r7, #3]
  401974:	2b00      	cmp	r3, #0
  401976:	d105      	bne.n	401984 <inv_icm426xx_force_clock_source+0x38>
		data &= (uint8_t)~BIT_ACCEL_LP_CLK_SEL_MASK;
  401978:	7afb      	ldrb	r3, [r7, #11]
  40197a:	f023 0308 	bic.w	r3, r3, #8
  40197e:	b2db      	uxtb	r3, r3
  401980:	72fb      	strb	r3, [r7, #11]
  401982:	e004      	b.n	40198e <inv_icm426xx_force_clock_source+0x42>
	else
		data |= (uint8_t)ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC;
  401984:	7afb      	ldrb	r3, [r7, #11]
  401986:	f043 0308 	orr.w	r3, r3, #8
  40198a:	b2db      	uxtb	r3, r3
  40198c:	72fb      	strb	r3, [r7, #11]

	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  40198e:	f107 030b 	add.w	r3, r7, #11
  401992:	2201      	movs	r2, #1
  401994:	214d      	movs	r1, #77	; 0x4d
  401996:	6878      	ldr	r0, [r7, #4]
  401998:	4c06      	ldr	r4, [pc, #24]	; (4019b4 <inv_icm426xx_force_clock_source+0x68>)
  40199a:	47a0      	blx	r4
  40199c:	4602      	mov	r2, r0
  40199e:	68fb      	ldr	r3, [r7, #12]
  4019a0:	4313      	orrs	r3, r2
  4019a2:	60fb      	str	r3, [r7, #12]
	
	return status;
  4019a4:	68fb      	ldr	r3, [r7, #12]
}
  4019a6:	4618      	mov	r0, r3
  4019a8:	3714      	adds	r7, #20
  4019aa:	46bd      	mov	sp, r7
  4019ac:	bd90      	pop	{r4, r7, pc}
  4019ae:	bf00      	nop
  4019b0:	00403951 	.word	0x00403951
  4019b4:	00403a1d 	.word	0x00403a1d

004019b8 <inv_icm426xx_enable_accel_low_noise_mode>:

	return status;
}

int inv_icm426xx_enable_accel_low_noise_mode(struct inv_icm426xx * s)
{
  4019b8:	b590      	push	{r4, r7, lr}
  4019ba:	b087      	sub	sp, #28
  4019bc:	af00      	add	r7, sp, #0
  4019be:	6078      	str	r0, [r7, #4]
	int status = 0;
  4019c0:	2300      	movs	r3, #0
  4019c2:	617b      	str	r3, [r7, #20]
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t  gyro_mode;
	ICM426XX_ACCEL_CONFIG0_ODR_t acc_odr_bitfield;
	uint32_t accel_odr_us;
	uint8_t accel_cfg_0_reg;

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  4019c4:	f107 030a 	add.w	r3, r7, #10
  4019c8:	2201      	movs	r2, #1
  4019ca:	214e      	movs	r1, #78	; 0x4e
  4019cc:	6878      	ldr	r0, [r7, #4]
  4019ce:	4c6c      	ldr	r4, [pc, #432]	; (401b80 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  4019d0:	47a0      	blx	r4
  4019d2:	4602      	mov	r2, r0
  4019d4:	697b      	ldr	r3, [r7, #20]
  4019d6:	4313      	orrs	r3, r2
  4019d8:	617b      	str	r3, [r7, #20]
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mgmt0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  4019da:	7abb      	ldrb	r3, [r7, #10]
  4019dc:	f003 0303 	and.w	r3, r3, #3
  4019e0:	74fb      	strb	r3, [r7, #19]
	gyro_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mgmt0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  4019e2:	7abb      	ldrb	r3, [r7, #10]
  4019e4:	f003 030c 	and.w	r3, r3, #12
  4019e8:	74bb      	strb	r3, [r7, #18]

	/* Subroutines need to be followed when enabling or disabling sensor to ensure ODR regularity
	 * Check if the accelerometer is the only one enabled 
	 */
	if ((accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) && 
  4019ea:	7cfb      	ldrb	r3, [r7, #19]
  4019ec:	2b02      	cmp	r3, #2
  4019ee:	d124      	bne.n	401a3a <inv_icm426xx_enable_accel_low_noise_mode+0x82>
  4019f0:	7cbb      	ldrb	r3, [r7, #18]
  4019f2:	2b00      	cmp	r3, #0
  4019f4:	d002      	beq.n	4019fc <inv_icm426xx_enable_accel_low_noise_mode+0x44>
	    ((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY))){
  4019f6:	7cbb      	ldrb	r3, [r7, #18]
  4019f8:	2b04      	cmp	r3, #4
  4019fa:	d11e      	bne.n	401a3a <inv_icm426xx_enable_accel_low_noise_mode+0x82>
		/* Get accelerometer's ODR for next required wait */
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  4019fc:	f107 0309 	add.w	r3, r7, #9
  401a00:	2201      	movs	r2, #1
  401a02:	2150      	movs	r1, #80	; 0x50
  401a04:	6878      	ldr	r0, [r7, #4]
  401a06:	4c5e      	ldr	r4, [pc, #376]	; (401b80 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401a08:	47a0      	blx	r4
  401a0a:	4602      	mov	r2, r0
  401a0c:	697b      	ldr	r3, [r7, #20]
  401a0e:	4313      	orrs	r3, r2
  401a10:	617b      	str	r3, [r7, #20]
		acc_odr_bitfield = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  401a12:	7a7b      	ldrb	r3, [r7, #9]
  401a14:	f003 030f 	and.w	r3, r3, #15
  401a18:	747b      	strb	r3, [r7, #17]
		accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(acc_odr_bitfield);
  401a1a:	7c7b      	ldrb	r3, [r7, #17]
  401a1c:	4618      	mov	r0, r3
  401a1e:	4b59      	ldr	r3, [pc, #356]	; (401b84 <inv_icm426xx_enable_accel_low_noise_mode+0x1cc>)
  401a20:	4798      	blx	r3
  401a22:	60f8      	str	r0, [r7, #12]
		/* Select the RC OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC);
  401a24:	2108      	movs	r1, #8
  401a26:	6878      	ldr	r0, [r7, #4]
  401a28:	4b57      	ldr	r3, [pc, #348]	; (401b88 <inv_icm426xx_enable_accel_low_noise_mode+0x1d0>)
  401a2a:	4798      	blx	r3
  401a2c:	4602      	mov	r2, r0
  401a2e:	697b      	ldr	r3, [r7, #20]
  401a30:	4313      	orrs	r3, r2
  401a32:	617b      	str	r3, [r7, #20]
		/* Wait one accel ODR before switching to low noise mode */
		inv_icm426xx_sleep_us(accel_odr_us);
  401a34:	68f8      	ldr	r0, [r7, #12]
  401a36:	4b55      	ldr	r3, [pc, #340]	; (401b8c <inv_icm426xx_enable_accel_low_noise_mode+0x1d4>)
  401a38:	4798      	blx	r3
	}

	/* FIFO contains Gyro and Accel data if enabled on the OIS path
	 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
	 */
	if(accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF && gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  401a3a:	7cfb      	ldrb	r3, [r7, #19]
  401a3c:	2b00      	cmp	r3, #0
  401a3e:	d143      	bne.n	401ac8 <inv_icm426xx_enable_accel_low_noise_mode+0x110>
  401a40:	7cbb      	ldrb	r3, [r7, #18]
  401a42:	2b00      	cmp	r3, #0
  401a44:	d140      	bne.n	401ac8 <inv_icm426xx_enable_accel_low_noise_mode+0x110>
		uint8_t data_endianess;
		
		if(s->fifo_is_used) {
  401a46:	687b      	ldr	r3, [r7, #4]
  401a48:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401a4c:	2b00      	cmp	r3, #0
  401a4e:	d029      	beq.n	401aa4 <inv_icm426xx_enable_accel_low_noise_mode+0xec>
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401a50:	f107 030b 	add.w	r3, r7, #11
  401a54:	2201      	movs	r2, #1
  401a56:	215f      	movs	r1, #95	; 0x5f
  401a58:	6878      	ldr	r0, [r7, #4]
  401a5a:	4c49      	ldr	r4, [pc, #292]	; (401b80 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401a5c:	47a0      	blx	r4
  401a5e:	4602      	mov	r2, r0
  401a60:	697b      	ldr	r3, [r7, #20]
  401a62:	4313      	orrs	r3, r2
  401a64:	617b      	str	r3, [r7, #20]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_ACCEL_EN;
  401a66:	7afb      	ldrb	r3, [r7, #11]
  401a68:	f043 0301 	orr.w	r3, r3, #1
  401a6c:	b2db      	uxtb	r3, r3
  401a6e:	72fb      	strb	r3, [r7, #11]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_GYRO_EN;
  401a70:	7afb      	ldrb	r3, [r7, #11]
  401a72:	f043 0302 	orr.w	r3, r3, #2
  401a76:	b2db      	uxtb	r3, r3
  401a78:	72fb      	strb	r3, [r7, #11]
			if(s->fifo_highres_enabled)
  401a7a:	687b      	ldr	r3, [r7, #4]
  401a7c:	f893 3869 	ldrb.w	r3, [r3, #2153]	; 0x869
  401a80:	2b00      	cmp	r3, #0
  401a82:	d004      	beq.n	401a8e <inv_icm426xx_enable_accel_low_noise_mode+0xd6>
				data |= (uint8_t)ICM426XX_FIFO_CONFIG1_HIRES_EN;
  401a84:	7afb      	ldrb	r3, [r7, #11]
  401a86:	f043 0310 	orr.w	r3, r3, #16
  401a8a:	b2db      	uxtb	r3, r3
  401a8c:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401a8e:	f107 030b 	add.w	r3, r7, #11
  401a92:	2201      	movs	r2, #1
  401a94:	215f      	movs	r1, #95	; 0x5f
  401a96:	6878      	ldr	r0, [r7, #4]
  401a98:	4c3d      	ldr	r4, [pc, #244]	; (401b90 <inv_icm426xx_enable_accel_low_noise_mode+0x1d8>)
  401a9a:	47a0      	blx	r4
  401a9c:	4602      	mov	r2, r0
  401a9e:	697b      	ldr	r3, [r7, #20]
  401aa0:	4313      	orrs	r3, r2
  401aa2:	617b      	str	r3, [r7, #20]
		}
		/* Read data endianess in order to process correctly data */
		status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data_endianess);
  401aa4:	f107 0308 	add.w	r3, r7, #8
  401aa8:	2201      	movs	r2, #1
  401aaa:	214c      	movs	r1, #76	; 0x4c
  401aac:	6878      	ldr	r0, [r7, #4]
  401aae:	4c34      	ldr	r4, [pc, #208]	; (401b80 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401ab0:	47a0      	blx	r4
  401ab2:	4602      	mov	r2, r0
  401ab4:	697b      	ldr	r3, [r7, #20]
  401ab6:	4313      	orrs	r3, r2
  401ab8:	617b      	str	r3, [r7, #20]
		s->endianess_data = data_endianess & BIT_DATA_ENDIAN_MASK;
  401aba:	7a3b      	ldrb	r3, [r7, #8]
  401abc:	f003 0310 	and.w	r3, r3, #16
  401ac0:	b2da      	uxtb	r2, r3
  401ac2:	687b      	ldr	r3, [r7, #4]
  401ac4:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
	}
#endif
	
	/* Restore filter BW settings */
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401ac8:	f107 030b 	add.w	r3, r7, #11
  401acc:	2201      	movs	r2, #1
  401ace:	2152      	movs	r1, #82	; 0x52
  401ad0:	6878      	ldr	r0, [r7, #4]
  401ad2:	4c2b      	ldr	r4, [pc, #172]	; (401b80 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401ad4:	47a0      	blx	r4
  401ad6:	4602      	mov	r2, r0
  401ad8:	697b      	ldr	r3, [r7, #20]
  401ada:	4313      	orrs	r3, r2
  401adc:	617b      	str	r3, [r7, #20]
	data &= (uint8_t)~BIT_GYRO_ACCEL_CONFIG0_ACCEL_FILT_MASK;
  401ade:	7afb      	ldrb	r3, [r7, #11]
  401ae0:	f003 030f 	and.w	r3, r3, #15
  401ae4:	b2db      	uxtb	r3, r3
  401ae6:	72fb      	strb	r3, [r7, #11]
	data |= s->avg_bw_setting.acc_ln_bw;
  401ae8:	687b      	ldr	r3, [r7, #4]
  401aea:	f893 2874 	ldrb.w	r2, [r3, #2164]	; 0x874
  401aee:	7afb      	ldrb	r3, [r7, #11]
  401af0:	4313      	orrs	r3, r2
  401af2:	b2db      	uxtb	r3, r3
  401af4:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401af6:	f107 030b 	add.w	r3, r7, #11
  401afa:	2201      	movs	r2, #1
  401afc:	2152      	movs	r1, #82	; 0x52
  401afe:	6878      	ldr	r0, [r7, #4]
  401b00:	4c23      	ldr	r4, [pc, #140]	; (401b90 <inv_icm426xx_enable_accel_low_noise_mode+0x1d8>)
  401b02:	47a0      	blx	r4
  401b04:	4602      	mov	r2, r0
  401b06:	697b      	ldr	r3, [r7, #20]
  401b08:	4313      	orrs	r3, r2
  401b0a:	617b      	str	r3, [r7, #20]
	
	/* Enable/Switch the accelerometer in/to low noise mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  401b0c:	f107 030a 	add.w	r3, r7, #10
  401b10:	2201      	movs	r2, #1
  401b12:	214e      	movs	r1, #78	; 0x4e
  401b14:	6878      	ldr	r0, [r7, #4]
  401b16:	4c1a      	ldr	r4, [pc, #104]	; (401b80 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401b18:	47a0      	blx	r4
  401b1a:	4602      	mov	r2, r0
  401b1c:	697b      	ldr	r3, [r7, #20]
  401b1e:	4313      	orrs	r3, r2
  401b20:	617b      	str	r3, [r7, #20]
	pwr_mgmt0_reg &= (uint8_t)~BIT_PWR_MGMT_0_ACCEL_MODE_MASK;
  401b22:	7abb      	ldrb	r3, [r7, #10]
  401b24:	f023 0303 	bic.w	r3, r3, #3
  401b28:	b2db      	uxtb	r3, r3
  401b2a:	72bb      	strb	r3, [r7, #10]
	pwr_mgmt0_reg |= (uint8_t)ICM426XX_PWR_MGMT_0_ACCEL_MODE_LN;
  401b2c:	7abb      	ldrb	r3, [r7, #10]
  401b2e:	f043 0303 	orr.w	r3, r3, #3
  401b32:	b2db      	uxtb	r3, r3
  401b34:	72bb      	strb	r3, [r7, #10]
	status |= inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  401b36:	f107 030a 	add.w	r3, r7, #10
  401b3a:	2201      	movs	r2, #1
  401b3c:	214e      	movs	r1, #78	; 0x4e
  401b3e:	6878      	ldr	r0, [r7, #4]
  401b40:	4c13      	ldr	r4, [pc, #76]	; (401b90 <inv_icm426xx_enable_accel_low_noise_mode+0x1d8>)
  401b42:	47a0      	blx	r4
  401b44:	4602      	mov	r2, r0
  401b46:	697b      	ldr	r3, [r7, #20]
  401b48:	4313      	orrs	r3, r2
  401b4a:	617b      	str	r3, [r7, #20]
	inv_icm426xx_sleep_us(200);
  401b4c:	20c8      	movs	r0, #200	; 0xc8
  401b4e:	4b0f      	ldr	r3, [pc, #60]	; (401b8c <inv_icm426xx_enable_accel_low_noise_mode+0x1d4>)
  401b50:	4798      	blx	r3

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if (accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF) {
  401b52:	7cfb      	ldrb	r3, [r7, #19]
  401b54:	2b00      	cmp	r3, #0
  401b56:	d10d      	bne.n	401b74 <inv_icm426xx_enable_accel_low_noise_mode+0x1bc>
		/* First data are noisy after enabling sensor 
		 * Keeps track of the start time to discard first sample
		 */
		if(s->fifo_is_used) {
  401b58:	687b      	ldr	r3, [r7, #4]
  401b5a:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401b5e:	2b00      	cmp	r3, #0
  401b60:	d008      	beq.n	401b74 <inv_icm426xx_enable_accel_low_noise_mode+0x1bc>
			s->accel_start_time_us = inv_icm426xx_get_time_us();
  401b62:	4b0c      	ldr	r3, [pc, #48]	; (401b94 <inv_icm426xx_enable_accel_low_noise_mode+0x1dc>)
  401b64:	4798      	blx	r3
  401b66:	4603      	mov	r3, r0
  401b68:	460c      	mov	r4, r1
  401b6a:	687a      	ldr	r2, [r7, #4]
  401b6c:	f502 6206 	add.w	r2, r2, #2144	; 0x860
  401b70:	e9c2 3400 	strd	r3, r4, [r2]
		}
	}
#endif

	return status;
  401b74:	697b      	ldr	r3, [r7, #20]
}
  401b76:	4618      	mov	r0, r3
  401b78:	371c      	adds	r7, #28
  401b7a:	46bd      	mov	sp, r7
  401b7c:	bd90      	pop	{r4, r7, pc}
  401b7e:	bf00      	nop
  401b80:	00403951 	.word	0x00403951
  401b84:	00402b49 	.word	0x00402b49
  401b88:	0040194d 	.word	0x0040194d
  401b8c:	00401679 	.word	0x00401679
  401b90:	00403a1d 	.word	0x00403a1d
  401b94:	00401641 	.word	0x00401641

00401b98 <inv_icm426xx_disable_accel>:

int inv_icm426xx_disable_accel(struct inv_icm426xx * s)
{
  401b98:	b590      	push	{r4, r7, lr}
  401b9a:	b087      	sub	sp, #28
  401b9c:	af00      	add	r7, sp, #0
  401b9e:	6078      	str	r0, [r7, #4]
	int status=0;
  401ba0:	2300      	movs	r3, #0
  401ba2:	617b      	str	r3, [r7, #20]
	uint8_t pwr_mngt_0_reg;
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t gyro_mode;
	int stop_fifo_usage = 0;
  401ba4:	2300      	movs	r3, #0
  401ba6:	613b      	str	r3, [r7, #16]
	uint8_t data;
#endif
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401ba8:	f107 030e 	add.w	r3, r7, #14
  401bac:	2201      	movs	r2, #1
  401bae:	214e      	movs	r1, #78	; 0x4e
  401bb0:	6878      	ldr	r0, [r7, #4]
  401bb2:	4c2f      	ldr	r4, [pc, #188]	; (401c70 <inv_icm426xx_disable_accel+0xd8>)
  401bb4:	47a0      	blx	r4
  401bb6:	4602      	mov	r2, r0
  401bb8:	697b      	ldr	r3, [r7, #20]
  401bba:	4313      	orrs	r3, r2
  401bbc:	617b      	str	r3, [r7, #20]
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	gyro_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  401bbe:	7bbb      	ldrb	r3, [r7, #14]
  401bc0:	f003 030c 	and.w	r3, r3, #12
  401bc4:	73fb      	strb	r3, [r7, #15]
	if((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) && s->fifo_is_used) {
  401bc6:	7bfb      	ldrb	r3, [r7, #15]
  401bc8:	2b00      	cmp	r3, #0
  401bca:	d10a      	bne.n	401be2 <inv_icm426xx_disable_accel+0x4a>
  401bcc:	687b      	ldr	r3, [r7, #4]
  401bce:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401bd2:	2b00      	cmp	r3, #0
  401bd4:	d005      	beq.n	401be2 <inv_icm426xx_disable_accel+0x4a>
		/* First FSYNC event after enable is irrelevant */
		s->fsync_to_be_ignored = 1;
  401bd6:	687b      	ldr	r3, [r7, #4]
  401bd8:	2201      	movs	r2, #1
  401bda:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
		/* FIFO contains Gyro and Accel data if enabled on the OIS path
		 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
		 */
		stop_fifo_usage = 1;
  401bde:	2301      	movs	r3, #1
  401be0:	613b      	str	r3, [r7, #16]
	}
#endif
	
	pwr_mngt_0_reg &= (uint8_t)~BIT_PWR_MGMT_0_ACCEL_MODE_MASK;
  401be2:	7bbb      	ldrb	r3, [r7, #14]
  401be4:	f023 0303 	bic.w	r3, r3, #3
  401be8:	b2db      	uxtb	r3, r3
  401bea:	73bb      	strb	r3, [r7, #14]
	pwr_mngt_0_reg |= (uint8_t) ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF;
  401bec:	7bbb      	ldrb	r3, [r7, #14]
  401bee:	73bb      	strb	r3, [r7, #14]
	status = inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401bf0:	f107 030e 	add.w	r3, r7, #14
  401bf4:	2201      	movs	r2, #1
  401bf6:	214e      	movs	r1, #78	; 0x4e
  401bf8:	6878      	ldr	r0, [r7, #4]
  401bfa:	4c1e      	ldr	r4, [pc, #120]	; (401c74 <inv_icm426xx_disable_accel+0xdc>)
  401bfc:	47a0      	blx	r4
  401bfe:	6178      	str	r0, [r7, #20]
	
	/* Restore POR clock source for the accelerometer */
	status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC);
  401c00:	2100      	movs	r1, #0
  401c02:	6878      	ldr	r0, [r7, #4]
  401c04:	4b1c      	ldr	r3, [pc, #112]	; (401c78 <inv_icm426xx_disable_accel+0xe0>)
  401c06:	4798      	blx	r3
  401c08:	4602      	mov	r2, r0
  401c0a:	697b      	ldr	r3, [r7, #20]
  401c0c:	4313      	orrs	r3, r2
  401c0e:	617b      	str	r3, [r7, #20]

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if(stop_fifo_usage && s->fifo_is_used) {
  401c10:	693b      	ldr	r3, [r7, #16]
  401c12:	2b00      	cmp	r3, #0
  401c14:	d026      	beq.n	401c64 <inv_icm426xx_disable_accel+0xcc>
  401c16:	687b      	ldr	r3, [r7, #4]
  401c18:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401c1c:	2b00      	cmp	r3, #0
  401c1e:	d021      	beq.n	401c64 <inv_icm426xx_disable_accel+0xcc>
		status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401c20:	f107 030d 	add.w	r3, r7, #13
  401c24:	2201      	movs	r2, #1
  401c26:	215f      	movs	r1, #95	; 0x5f
  401c28:	6878      	ldr	r0, [r7, #4]
  401c2a:	4c11      	ldr	r4, [pc, #68]	; (401c70 <inv_icm426xx_disable_accel+0xd8>)
  401c2c:	47a0      	blx	r4
  401c2e:	4602      	mov	r2, r0
  401c30:	697b      	ldr	r3, [r7, #20]
  401c32:	4313      	orrs	r3, r2
  401c34:	617b      	str	r3, [r7, #20]
		data &= (uint8_t)~(BIT_FIFO_CONFIG1_ACCEL_MASK | BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_HIRES_MASK);
  401c36:	7b7b      	ldrb	r3, [r7, #13]
  401c38:	f023 0313 	bic.w	r3, r3, #19
  401c3c:	b2db      	uxtb	r3, r3
  401c3e:	737b      	strb	r3, [r7, #13]
		status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401c40:	f107 030d 	add.w	r3, r7, #13
  401c44:	2201      	movs	r2, #1
  401c46:	215f      	movs	r1, #95	; 0x5f
  401c48:	6878      	ldr	r0, [r7, #4]
  401c4a:	4c0a      	ldr	r4, [pc, #40]	; (401c74 <inv_icm426xx_disable_accel+0xdc>)
  401c4c:	47a0      	blx	r4
  401c4e:	4602      	mov	r2, r0
  401c50:	697b      	ldr	r3, [r7, #20]
  401c52:	4313      	orrs	r3, r2
  401c54:	617b      	str	r3, [r7, #20]

		/* Reset FIFO explicitely so the new configuration is taken into account */
		status |= inv_icm426xx_reset_fifo(s);
  401c56:	6878      	ldr	r0, [r7, #4]
  401c58:	4b08      	ldr	r3, [pc, #32]	; (401c7c <inv_icm426xx_disable_accel+0xe4>)
  401c5a:	4798      	blx	r3
  401c5c:	4602      	mov	r2, r0
  401c5e:	697b      	ldr	r3, [r7, #20]
  401c60:	4313      	orrs	r3, r2
  401c62:	617b      	str	r3, [r7, #20]
	}
#endif
	
	return status;
  401c64:	697b      	ldr	r3, [r7, #20]
}
  401c66:	4618      	mov	r0, r3
  401c68:	371c      	adds	r7, #28
  401c6a:	46bd      	mov	sp, r7
  401c6c:	bd90      	pop	{r4, r7, pc}
  401c6e:	bf00      	nop
  401c70:	00403951 	.word	0x00403951
  401c74:	00403a1d 	.word	0x00403a1d
  401c78:	0040194d 	.word	0x0040194d
  401c7c:	00402dcd 	.word	0x00402dcd

00401c80 <inv_icm426xx_enable_gyro_low_noise_mode>:

int inv_icm426xx_enable_gyro_low_noise_mode(struct inv_icm426xx * s)
{
  401c80:	b590      	push	{r4, r7, lr}
  401c82:	b08b      	sub	sp, #44	; 0x2c
  401c84:	af00      	add	r7, sp, #0
  401c86:	6078      	str	r0, [r7, #4]
	int status = 0;
  401c88:	2300      	movs	r3, #0
  401c8a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Powering the gyroscope on immediately after powering it off can result in device failure. 
	 * The gyroscope proof mass can continue vibrating after it has been powered off, 
	 * and powering it back on immediately can result in unpredictable proof mass movement.
	 * After powering the gyroscope off, a period of > 150ms should be allowed to elapse before it is powered back on. */
	if (s->gyro_power_off_tmst != UINT32_MAX) {
  401c8c:	687b      	ldr	r3, [r7, #4]
  401c8e:	f603 0378 	addw	r3, r3, #2168	; 0x878
  401c92:	e9d3 3400 	ldrd	r3, r4, [r3]
  401c96:	2c00      	cmp	r4, #0
  401c98:	bf08      	it	eq
  401c9a:	f1b3 3fff 	cmpeq.w	r3, #4294967295
  401c9e:	d02a      	beq.n	401cf6 <inv_icm426xx_enable_gyro_low_noise_mode+0x76>
		current_time = inv_icm426xx_get_time_us();
  401ca0:	4b83      	ldr	r3, [pc, #524]	; (401eb0 <inv_icm426xx_enable_gyro_low_noise_mode+0x230>)
  401ca2:	4798      	blx	r3
  401ca4:	e9c7 0106 	strd	r0, r1, [r7, #24]
		/* Handle rollover */
		if (current_time <= s->gyro_power_off_tmst)
  401ca8:	687b      	ldr	r3, [r7, #4]
  401caa:	f603 0378 	addw	r3, r3, #2168	; 0x878
  401cae:	e9d3 1200 	ldrd	r1, r2, [r3]
  401cb2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  401cb6:	42a2      	cmp	r2, r4
  401cb8:	bf08      	it	eq
  401cba:	4299      	cmpeq	r1, r3
  401cbc:	d307      	bcc.n	401cce <inv_icm426xx_enable_gyro_low_noise_mode+0x4e>
			current_time += UINT32_MAX;
  401cbe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  401cc2:	f113 33ff 	adds.w	r3, r3, #4294967295
  401cc6:	f144 0400 	adc.w	r4, r4, #0
  401cca:	e9c7 3406 	strd	r3, r4, [r7, #24]
		/* If 150 ms are not elapsed since power-off error is returned */
		if ((current_time - s->gyro_power_off_tmst) <= (150 * 1000))
  401cce:	687b      	ldr	r3, [r7, #4]
  401cd0:	f603 0378 	addw	r3, r3, #2168	; 0x878
  401cd4:	e9d3 3400 	ldrd	r3, r4, [r3]
  401cd8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
  401cdc:	1acb      	subs	r3, r1, r3
  401cde:	eb62 0404 	sbc.w	r4, r2, r4
  401ce2:	4974      	ldr	r1, [pc, #464]	; (401eb4 <inv_icm426xx_enable_gyro_low_noise_mode+0x234>)
  401ce4:	f04f 0200 	mov.w	r2, #0
  401ce8:	42a2      	cmp	r2, r4
  401cea:	bf08      	it	eq
  401cec:	4299      	cmpeq	r1, r3
  401cee:	d302      	bcc.n	401cf6 <inv_icm426xx_enable_gyro_low_noise_mode+0x76>
			return INV_ERROR_HW;
  401cf0:	f06f 0309 	mvn.w	r3, #9
  401cf4:	e0d8      	b.n	401ea8 <inv_icm426xx_enable_gyro_low_noise_mode+0x228>
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t accel_mode;
	ICM426XX_ACCEL_CONFIG0_ODR_t acc_odr_bitfield;
	uint32_t accel_odr_us;
	uint8_t accel_cfg_0_reg;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401cf6:	f107 030e 	add.w	r3, r7, #14
  401cfa:	2201      	movs	r2, #1
  401cfc:	214e      	movs	r1, #78	; 0x4e
  401cfe:	6878      	ldr	r0, [r7, #4]
  401d00:	4c6d      	ldr	r4, [pc, #436]	; (401eb8 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401d02:	47a0      	blx	r4
  401d04:	4602      	mov	r2, r0
  401d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d08:	4313      	orrs	r3, r2
  401d0a:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  401d0c:	7bbb      	ldrb	r3, [r7, #14]
  401d0e:	f003 030c 	and.w	r3, r3, #12
  401d12:	75fb      	strb	r3, [r7, #23]
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  401d14:	7bbb      	ldrb	r3, [r7, #14]
  401d16:	f003 0303 	and.w	r3, r3, #3
  401d1a:	75bb      	strb	r3, [r7, #22]

	/* Subroutines need to be followed when enabling or disabling sensor to ensure ODR regularity
	 * Check if the accelerometer is the only one enabled 
	 */	
	if ((accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) &&
  401d1c:	7dbb      	ldrb	r3, [r7, #22]
  401d1e:	2b02      	cmp	r3, #2
  401d20:	d124      	bne.n	401d6c <inv_icm426xx_enable_gyro_low_noise_mode+0xec>
  401d22:	7dfb      	ldrb	r3, [r7, #23]
  401d24:	2b00      	cmp	r3, #0
  401d26:	d002      	beq.n	401d2e <inv_icm426xx_enable_gyro_low_noise_mode+0xae>
	    ((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY))) {
  401d28:	7dfb      	ldrb	r3, [r7, #23]
  401d2a:	2b04      	cmp	r3, #4
  401d2c:	d11e      	bne.n	401d6c <inv_icm426xx_enable_gyro_low_noise_mode+0xec>
		/* Get accelerometer's ODR for next required wait */
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  401d2e:	f107 030d 	add.w	r3, r7, #13
  401d32:	2201      	movs	r2, #1
  401d34:	2150      	movs	r1, #80	; 0x50
  401d36:	6878      	ldr	r0, [r7, #4]
  401d38:	4c5f      	ldr	r4, [pc, #380]	; (401eb8 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401d3a:	47a0      	blx	r4
  401d3c:	4602      	mov	r2, r0
  401d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d40:	4313      	orrs	r3, r2
  401d42:	627b      	str	r3, [r7, #36]	; 0x24
		acc_odr_bitfield = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  401d44:	7b7b      	ldrb	r3, [r7, #13]
  401d46:	f003 030f 	and.w	r3, r3, #15
  401d4a:	757b      	strb	r3, [r7, #21]
		accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(acc_odr_bitfield);
  401d4c:	7d7b      	ldrb	r3, [r7, #21]
  401d4e:	4618      	mov	r0, r3
  401d50:	4b5a      	ldr	r3, [pc, #360]	; (401ebc <inv_icm426xx_enable_gyro_low_noise_mode+0x23c>)
  401d52:	4798      	blx	r3
  401d54:	6138      	str	r0, [r7, #16]
		/* Select the RC OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC);
  401d56:	2108      	movs	r1, #8
  401d58:	6878      	ldr	r0, [r7, #4]
  401d5a:	4b59      	ldr	r3, [pc, #356]	; (401ec0 <inv_icm426xx_enable_gyro_low_noise_mode+0x240>)
  401d5c:	4798      	blx	r3
  401d5e:	4602      	mov	r2, r0
  401d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d62:	4313      	orrs	r3, r2
  401d64:	627b      	str	r3, [r7, #36]	; 0x24
		/* Wait one accel ODR before enabling the gyroscope */
		inv_icm426xx_sleep_us(accel_odr_us);
  401d66:	6938      	ldr	r0, [r7, #16]
  401d68:	4b56      	ldr	r3, [pc, #344]	; (401ec4 <inv_icm426xx_enable_gyro_low_noise_mode+0x244>)
  401d6a:	4798      	blx	r3
	}

	/* FIFO contains Gyro and Accel data if enabled on the OIS path
	 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
	 */
	if(accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF && gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  401d6c:	7dbb      	ldrb	r3, [r7, #22]
  401d6e:	2b00      	cmp	r3, #0
  401d70:	d143      	bne.n	401dfa <inv_icm426xx_enable_gyro_low_noise_mode+0x17a>
  401d72:	7dfb      	ldrb	r3, [r7, #23]
  401d74:	2b00      	cmp	r3, #0
  401d76:	d140      	bne.n	401dfa <inv_icm426xx_enable_gyro_low_noise_mode+0x17a>
		uint8_t data_endianess;

		if(s->fifo_is_used) {
  401d78:	687b      	ldr	r3, [r7, #4]
  401d7a:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401d7e:	2b00      	cmp	r3, #0
  401d80:	d029      	beq.n	401dd6 <inv_icm426xx_enable_gyro_low_noise_mode+0x156>
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401d82:	f107 030f 	add.w	r3, r7, #15
  401d86:	2201      	movs	r2, #1
  401d88:	215f      	movs	r1, #95	; 0x5f
  401d8a:	6878      	ldr	r0, [r7, #4]
  401d8c:	4c4a      	ldr	r4, [pc, #296]	; (401eb8 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401d8e:	47a0      	blx	r4
  401d90:	4602      	mov	r2, r0
  401d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401d94:	4313      	orrs	r3, r2
  401d96:	627b      	str	r3, [r7, #36]	; 0x24
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_ACCEL_EN;
  401d98:	7bfb      	ldrb	r3, [r7, #15]
  401d9a:	f043 0301 	orr.w	r3, r3, #1
  401d9e:	b2db      	uxtb	r3, r3
  401da0:	73fb      	strb	r3, [r7, #15]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_GYRO_EN;
  401da2:	7bfb      	ldrb	r3, [r7, #15]
  401da4:	f043 0302 	orr.w	r3, r3, #2
  401da8:	b2db      	uxtb	r3, r3
  401daa:	73fb      	strb	r3, [r7, #15]
			if(s->fifo_highres_enabled)
  401dac:	687b      	ldr	r3, [r7, #4]
  401dae:	f893 3869 	ldrb.w	r3, [r3, #2153]	; 0x869
  401db2:	2b00      	cmp	r3, #0
  401db4:	d004      	beq.n	401dc0 <inv_icm426xx_enable_gyro_low_noise_mode+0x140>
				data |= (uint8_t)ICM426XX_FIFO_CONFIG1_HIRES_EN;
  401db6:	7bfb      	ldrb	r3, [r7, #15]
  401db8:	f043 0310 	orr.w	r3, r3, #16
  401dbc:	b2db      	uxtb	r3, r3
  401dbe:	73fb      	strb	r3, [r7, #15]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401dc0:	f107 030f 	add.w	r3, r7, #15
  401dc4:	2201      	movs	r2, #1
  401dc6:	215f      	movs	r1, #95	; 0x5f
  401dc8:	6878      	ldr	r0, [r7, #4]
  401dca:	4c3f      	ldr	r4, [pc, #252]	; (401ec8 <inv_icm426xx_enable_gyro_low_noise_mode+0x248>)
  401dcc:	47a0      	blx	r4
  401dce:	4602      	mov	r2, r0
  401dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401dd2:	4313      	orrs	r3, r2
  401dd4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		/* Read data endianess in order to process correctly data */
		status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data_endianess);
  401dd6:	f107 030c 	add.w	r3, r7, #12
  401dda:	2201      	movs	r2, #1
  401ddc:	214c      	movs	r1, #76	; 0x4c
  401dde:	6878      	ldr	r0, [r7, #4]
  401de0:	4c35      	ldr	r4, [pc, #212]	; (401eb8 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401de2:	47a0      	blx	r4
  401de4:	4602      	mov	r2, r0
  401de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401de8:	4313      	orrs	r3, r2
  401dea:	627b      	str	r3, [r7, #36]	; 0x24
		s->endianess_data = data_endianess & BIT_DATA_ENDIAN_MASK;
  401dec:	7b3b      	ldrb	r3, [r7, #12]
  401dee:	f003 0310 	and.w	r3, r3, #16
  401df2:	b2da      	uxtb	r2, r3
  401df4:	687b      	ldr	r3, [r7, #4]
  401df6:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
	}
#endif

	/* Restore filter BW settings */
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401dfa:	f107 030f 	add.w	r3, r7, #15
  401dfe:	2201      	movs	r2, #1
  401e00:	2152      	movs	r1, #82	; 0x52
  401e02:	6878      	ldr	r0, [r7, #4]
  401e04:	4c2c      	ldr	r4, [pc, #176]	; (401eb8 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401e06:	47a0      	blx	r4
  401e08:	4602      	mov	r2, r0
  401e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e0c:	4313      	orrs	r3, r2
  401e0e:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_GYRO_ACCEL_CONFIG0_GYRO_FILT_MASK;
  401e10:	7bfb      	ldrb	r3, [r7, #15]
  401e12:	f023 030f 	bic.w	r3, r3, #15
  401e16:	b2db      	uxtb	r3, r3
  401e18:	73fb      	strb	r3, [r7, #15]
	data |= s->avg_bw_setting.gyr_ln_bw;
  401e1a:	687b      	ldr	r3, [r7, #4]
  401e1c:	f893 2875 	ldrb.w	r2, [r3, #2165]	; 0x875
  401e20:	7bfb      	ldrb	r3, [r7, #15]
  401e22:	4313      	orrs	r3, r2
  401e24:	b2db      	uxtb	r3, r3
  401e26:	73fb      	strb	r3, [r7, #15]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401e28:	f107 030f 	add.w	r3, r7, #15
  401e2c:	2201      	movs	r2, #1
  401e2e:	2152      	movs	r1, #82	; 0x52
  401e30:	6878      	ldr	r0, [r7, #4]
  401e32:	4c25      	ldr	r4, [pc, #148]	; (401ec8 <inv_icm426xx_enable_gyro_low_noise_mode+0x248>)
  401e34:	47a0      	blx	r4
  401e36:	4602      	mov	r2, r0
  401e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e3a:	4313      	orrs	r3, r2
  401e3c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enable/Switch the gyroscope in/to low noise mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401e3e:	f107 030e 	add.w	r3, r7, #14
  401e42:	2201      	movs	r2, #1
  401e44:	214e      	movs	r1, #78	; 0x4e
  401e46:	6878      	ldr	r0, [r7, #4]
  401e48:	4c1b      	ldr	r4, [pc, #108]	; (401eb8 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401e4a:	47a0      	blx	r4
  401e4c:	4602      	mov	r2, r0
  401e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e50:	4313      	orrs	r3, r2
  401e52:	627b      	str	r3, [r7, #36]	; 0x24
	pwr_mngt_0_reg &= (uint8_t)~BIT_PWR_MGMT_0_GYRO_MODE_MASK;
  401e54:	7bbb      	ldrb	r3, [r7, #14]
  401e56:	f023 030c 	bic.w	r3, r3, #12
  401e5a:	b2db      	uxtb	r3, r3
  401e5c:	73bb      	strb	r3, [r7, #14]
	pwr_mngt_0_reg |= (uint8_t)ICM426XX_PWR_MGMT_0_GYRO_MODE_LN;
  401e5e:	7bbb      	ldrb	r3, [r7, #14]
  401e60:	f043 030c 	orr.w	r3, r3, #12
  401e64:	b2db      	uxtb	r3, r3
  401e66:	73bb      	strb	r3, [r7, #14]
	status |= inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401e68:	f107 030e 	add.w	r3, r7, #14
  401e6c:	2201      	movs	r2, #1
  401e6e:	214e      	movs	r1, #78	; 0x4e
  401e70:	6878      	ldr	r0, [r7, #4]
  401e72:	4c15      	ldr	r4, [pc, #84]	; (401ec8 <inv_icm426xx_enable_gyro_low_noise_mode+0x248>)
  401e74:	47a0      	blx	r4
  401e76:	4602      	mov	r2, r0
  401e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401e7a:	4313      	orrs	r3, r2
  401e7c:	627b      	str	r3, [r7, #36]	; 0x24
	inv_icm426xx_sleep_us(200);
  401e7e:	20c8      	movs	r0, #200	; 0xc8
  401e80:	4b10      	ldr	r3, [pc, #64]	; (401ec4 <inv_icm426xx_enable_gyro_low_noise_mode+0x244>)
  401e82:	4798      	blx	r3
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  401e84:	7dfb      	ldrb	r3, [r7, #23]
  401e86:	2b00      	cmp	r3, #0
  401e88:	d10d      	bne.n	401ea6 <inv_icm426xx_enable_gyro_low_noise_mode+0x226>
		/* First data are noisy after enabling sensor 
		 * Keeps track of the start time to discard first sample
		 */
		if(s->fifo_is_used) {
  401e8a:	687b      	ldr	r3, [r7, #4]
  401e8c:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401e90:	2b00      	cmp	r3, #0
  401e92:	d008      	beq.n	401ea6 <inv_icm426xx_enable_gyro_low_noise_mode+0x226>
			s->gyro_start_time_us = inv_icm426xx_get_time_us();
  401e94:	4b06      	ldr	r3, [pc, #24]	; (401eb0 <inv_icm426xx_enable_gyro_low_noise_mode+0x230>)
  401e96:	4798      	blx	r3
  401e98:	4603      	mov	r3, r0
  401e9a:	460c      	mov	r4, r1
  401e9c:	687a      	ldr	r2, [r7, #4]
  401e9e:	f602 0258 	addw	r2, r2, #2136	; 0x858
  401ea2:	e9c2 3400 	strd	r3, r4, [r2]
		}
	}
#endif
	
	return status;
  401ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  401ea8:	4618      	mov	r0, r3
  401eaa:	372c      	adds	r7, #44	; 0x2c
  401eac:	46bd      	mov	sp, r7
  401eae:	bd90      	pop	{r4, r7, pc}
  401eb0:	00401641 	.word	0x00401641
  401eb4:	000249f0 	.word	0x000249f0
  401eb8:	00403951 	.word	0x00403951
  401ebc:	00402b49 	.word	0x00402b49
  401ec0:	0040194d 	.word	0x0040194d
  401ec4:	00401679 	.word	0x00401679
  401ec8:	00403a1d 	.word	0x00403a1d

00401ecc <inv_icm426xx_disable_gyro>:

int inv_icm426xx_disable_gyro(struct inv_icm426xx * s)
{
  401ecc:	b590      	push	{r4, r7, lr}
  401ece:	b087      	sub	sp, #28
  401ed0:	af00      	add	r7, sp, #0
  401ed2:	6078      	str	r0, [r7, #4]
	int status = 0;
  401ed4:	2300      	movs	r3, #0
  401ed6:	617b      	str	r3, [r7, #20]
	uint8_t pwr_mngt_0_reg;
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t accel_mode;
	int stop_fifo_usage = 0;
  401ed8:	2300      	movs	r3, #0
  401eda:	613b      	str	r3, [r7, #16]
	uint8_t data;
	uint8_t accel_cfg_0_reg;
	ICM426XX_ACCEL_CONFIG0_ODR_t acc_odr_bitfield;
#endif

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);	
  401edc:	f107 030d 	add.w	r3, r7, #13
  401ee0:	2201      	movs	r2, #1
  401ee2:	214e      	movs	r1, #78	; 0x4e
  401ee4:	6878      	ldr	r0, [r7, #4]
  401ee6:	4c48      	ldr	r4, [pc, #288]	; (402008 <inv_icm426xx_disable_gyro+0x13c>)
  401ee8:	47a0      	blx	r4
  401eea:	4602      	mov	r2, r0
  401eec:	697b      	ldr	r3, [r7, #20]
  401eee:	4313      	orrs	r3, r2
  401ef0:	617b      	str	r3, [r7, #20]
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  401ef2:	7b7b      	ldrb	r3, [r7, #13]
  401ef4:	f003 0303 	and.w	r3, r3, #3
  401ef8:	73fb      	strb	r3, [r7, #15]
	if((accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF) && s->fifo_is_used) {
  401efa:	7bfb      	ldrb	r3, [r7, #15]
  401efc:	2b00      	cmp	r3, #0
  401efe:	d10a      	bne.n	401f16 <inv_icm426xx_disable_gyro+0x4a>
  401f00:	687b      	ldr	r3, [r7, #4]
  401f02:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401f06:	2b00      	cmp	r3, #0
  401f08:	d005      	beq.n	401f16 <inv_icm426xx_disable_gyro+0x4a>
		/* First FSYNC event after enable is irrelevant */
		s->fsync_to_be_ignored = 1;
  401f0a:	687b      	ldr	r3, [r7, #4]
  401f0c:	2201      	movs	r2, #1
  401f0e:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
		/* FIFO contains Gyro and Accel data if enabled on the OIS path
		 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
		 */
		stop_fifo_usage = 1;
  401f12:	2301      	movs	r3, #1
  401f14:	613b      	str	r3, [r7, #16]
	}
#endif
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	/* Check if the accelerometer is enabled in low power mode */
	if (accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) {
  401f16:	7bfb      	ldrb	r3, [r7, #15]
  401f18:	2b02      	cmp	r3, #2
  401f1a:	d107      	bne.n	401f2c <inv_icm426xx_disable_gyro+0x60>
		/* Select the RC OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC);
  401f1c:	2108      	movs	r1, #8
  401f1e:	6878      	ldr	r0, [r7, #4]
  401f20:	4b3a      	ldr	r3, [pc, #232]	; (40200c <inv_icm426xx_disable_gyro+0x140>)
  401f22:	4798      	blx	r3
  401f24:	4602      	mov	r2, r0
  401f26:	697b      	ldr	r3, [r7, #20]
  401f28:	4313      	orrs	r3, r2
  401f2a:	617b      	str	r3, [r7, #20]
	}
#endif
	
	pwr_mngt_0_reg &= (uint8_t)~BIT_PWR_MGMT_0_GYRO_MODE_MASK;
  401f2c:	7b7b      	ldrb	r3, [r7, #13]
  401f2e:	f023 030c 	bic.w	r3, r3, #12
  401f32:	b2db      	uxtb	r3, r3
  401f34:	737b      	strb	r3, [r7, #13]
	pwr_mngt_0_reg |= ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF;
  401f36:	7b7b      	ldrb	r3, [r7, #13]
  401f38:	737b      	strb	r3, [r7, #13]
	status |= inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401f3a:	f107 030d 	add.w	r3, r7, #13
  401f3e:	2201      	movs	r2, #1
  401f40:	214e      	movs	r1, #78	; 0x4e
  401f42:	6878      	ldr	r0, [r7, #4]
  401f44:	4c32      	ldr	r4, [pc, #200]	; (402010 <inv_icm426xx_disable_gyro+0x144>)
  401f46:	47a0      	blx	r4
  401f48:	4602      	mov	r2, r0
  401f4a:	697b      	ldr	r3, [r7, #20]
  401f4c:	4313      	orrs	r3, r2
  401f4e:	617b      	str	r3, [r7, #20]
	/* keep track of gyro power-off time to check if gyro will be power-on after more than 150ms*/
	s->gyro_power_off_tmst = inv_icm426xx_get_time_us();
  401f50:	4b30      	ldr	r3, [pc, #192]	; (402014 <inv_icm426xx_disable_gyro+0x148>)
  401f52:	4798      	blx	r3
  401f54:	4603      	mov	r3, r0
  401f56:	460c      	mov	r4, r1
  401f58:	687a      	ldr	r2, [r7, #4]
  401f5a:	f602 0278 	addw	r2, r2, #2168	; 0x878
  401f5e:	e9c2 3400 	strd	r3, r4, [r2]

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if (accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) {
  401f62:	7bfb      	ldrb	r3, [r7, #15]
  401f64:	2b02      	cmp	r3, #2
  401f66:	d11f      	bne.n	401fa8 <inv_icm426xx_disable_gyro+0xdc>
		/* Wait based on accelerometer ODR */
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  401f68:	f107 030b 	add.w	r3, r7, #11
  401f6c:	2201      	movs	r2, #1
  401f6e:	2150      	movs	r1, #80	; 0x50
  401f70:	6878      	ldr	r0, [r7, #4]
  401f72:	4c25      	ldr	r4, [pc, #148]	; (402008 <inv_icm426xx_disable_gyro+0x13c>)
  401f74:	47a0      	blx	r4
  401f76:	4602      	mov	r2, r0
  401f78:	697b      	ldr	r3, [r7, #20]
  401f7a:	4313      	orrs	r3, r2
  401f7c:	617b      	str	r3, [r7, #20]
		acc_odr_bitfield = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  401f7e:	7afb      	ldrb	r3, [r7, #11]
  401f80:	f003 030f 	and.w	r3, r3, #15
  401f84:	73bb      	strb	r3, [r7, #14]
		inv_icm426xx_sleep_us(2 * inv_icm426xx_convert_odr_bitfield_to_us(acc_odr_bitfield));
  401f86:	7bbb      	ldrb	r3, [r7, #14]
  401f88:	4618      	mov	r0, r3
  401f8a:	4b23      	ldr	r3, [pc, #140]	; (402018 <inv_icm426xx_disable_gyro+0x14c>)
  401f8c:	4798      	blx	r3
  401f8e:	4603      	mov	r3, r0
  401f90:	005b      	lsls	r3, r3, #1
  401f92:	4618      	mov	r0, r3
  401f94:	4b21      	ldr	r3, [pc, #132]	; (40201c <inv_icm426xx_disable_gyro+0x150>)
  401f96:	4798      	blx	r3
		/* Select the WU OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC);
  401f98:	2100      	movs	r1, #0
  401f9a:	6878      	ldr	r0, [r7, #4]
  401f9c:	4b1b      	ldr	r3, [pc, #108]	; (40200c <inv_icm426xx_disable_gyro+0x140>)
  401f9e:	4798      	blx	r3
  401fa0:	4602      	mov	r2, r0
  401fa2:	697b      	ldr	r3, [r7, #20]
  401fa4:	4313      	orrs	r3, r2
  401fa6:	617b      	str	r3, [r7, #20]
	}

	if(stop_fifo_usage && s->fifo_is_used) {
  401fa8:	693b      	ldr	r3, [r7, #16]
  401faa:	2b00      	cmp	r3, #0
  401fac:	d026      	beq.n	401ffc <inv_icm426xx_disable_gyro+0x130>
  401fae:	687b      	ldr	r3, [r7, #4]
  401fb0:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401fb4:	2b00      	cmp	r3, #0
  401fb6:	d021      	beq.n	401ffc <inv_icm426xx_disable_gyro+0x130>
		status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401fb8:	f107 030c 	add.w	r3, r7, #12
  401fbc:	2201      	movs	r2, #1
  401fbe:	215f      	movs	r1, #95	; 0x5f
  401fc0:	6878      	ldr	r0, [r7, #4]
  401fc2:	4c11      	ldr	r4, [pc, #68]	; (402008 <inv_icm426xx_disable_gyro+0x13c>)
  401fc4:	47a0      	blx	r4
  401fc6:	4602      	mov	r2, r0
  401fc8:	697b      	ldr	r3, [r7, #20]
  401fca:	4313      	orrs	r3, r2
  401fcc:	617b      	str	r3, [r7, #20]
		data &= (uint8_t)~(BIT_FIFO_CONFIG1_ACCEL_MASK | BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_HIRES_MASK);
  401fce:	7b3b      	ldrb	r3, [r7, #12]
  401fd0:	f023 0313 	bic.w	r3, r3, #19
  401fd4:	b2db      	uxtb	r3, r3
  401fd6:	733b      	strb	r3, [r7, #12]
		status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401fd8:	f107 030c 	add.w	r3, r7, #12
  401fdc:	2201      	movs	r2, #1
  401fde:	215f      	movs	r1, #95	; 0x5f
  401fe0:	6878      	ldr	r0, [r7, #4]
  401fe2:	4c0b      	ldr	r4, [pc, #44]	; (402010 <inv_icm426xx_disable_gyro+0x144>)
  401fe4:	47a0      	blx	r4
  401fe6:	4602      	mov	r2, r0
  401fe8:	697b      	ldr	r3, [r7, #20]
  401fea:	4313      	orrs	r3, r2
  401fec:	617b      	str	r3, [r7, #20]

		/* Reset FIFO explicitely so the new configuration is taken into account */
		status |= inv_icm426xx_reset_fifo(s);
  401fee:	6878      	ldr	r0, [r7, #4]
  401ff0:	4b0b      	ldr	r3, [pc, #44]	; (402020 <inv_icm426xx_disable_gyro+0x154>)
  401ff2:	4798      	blx	r3
  401ff4:	4602      	mov	r2, r0
  401ff6:	697b      	ldr	r3, [r7, #20]
  401ff8:	4313      	orrs	r3, r2
  401ffa:	617b      	str	r3, [r7, #20]
	}
#endif
	
	return status;
  401ffc:	697b      	ldr	r3, [r7, #20]
}
  401ffe:	4618      	mov	r0, r3
  402000:	371c      	adds	r7, #28
  402002:	46bd      	mov	sp, r7
  402004:	bd90      	pop	{r4, r7, pc}
  402006:	bf00      	nop
  402008:	00403951 	.word	0x00403951
  40200c:	0040194d 	.word	0x0040194d
  402010:	00403a1d 	.word	0x00403a1d
  402014:	00401641 	.word	0x00401641
  402018:	00402b49 	.word	0x00402b49
  40201c:	00401679 	.word	0x00401679
  402020:	00402dcd 	.word	0x00402dcd

00402024 <inv_icm426xx_configure_timestamp_resolution>:

	return status;
}

int inv_icm426xx_configure_timestamp_resolution(struct inv_icm426xx * s, ICM426XX_TMST_CONFIG_RESOL_t resol)
{
  402024:	b590      	push	{r4, r7, lr}
  402026:	b085      	sub	sp, #20
  402028:	af00      	add	r7, sp, #0
  40202a:	6078      	str	r0, [r7, #4]
  40202c:	460b      	mov	r3, r1
  40202e:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402030:	2300      	movs	r3, #0
  402032:	60fb      	str	r3, [r7, #12]
	uint8_t value;

	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &value);
  402034:	f107 030b 	add.w	r3, r7, #11
  402038:	2201      	movs	r2, #1
  40203a:	2154      	movs	r1, #84	; 0x54
  40203c:	6878      	ldr	r0, [r7, #4]
  40203e:	4c10      	ldr	r4, [pc, #64]	; (402080 <inv_icm426xx_configure_timestamp_resolution+0x5c>)
  402040:	47a0      	blx	r4
  402042:	4602      	mov	r2, r0
  402044:	68fb      	ldr	r3, [r7, #12]
  402046:	4313      	orrs	r3, r2
  402048:	60fb      	str	r3, [r7, #12]
	value &= (uint8_t)~BIT_TMST_CONFIG_RESOL_MASK;
  40204a:	7afb      	ldrb	r3, [r7, #11]
  40204c:	f023 0308 	bic.w	r3, r3, #8
  402050:	b2db      	uxtb	r3, r3
  402052:	72fb      	strb	r3, [r7, #11]
	value |= (uint8_t)resol;
  402054:	7afa      	ldrb	r2, [r7, #11]
  402056:	78fb      	ldrb	r3, [r7, #3]
  402058:	4313      	orrs	r3, r2
  40205a:	b2db      	uxtb	r3, r3
  40205c:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &value);
  40205e:	f107 030b 	add.w	r3, r7, #11
  402062:	2201      	movs	r2, #1
  402064:	2154      	movs	r1, #84	; 0x54
  402066:	6878      	ldr	r0, [r7, #4]
  402068:	4c06      	ldr	r4, [pc, #24]	; (402084 <inv_icm426xx_configure_timestamp_resolution+0x60>)
  40206a:	47a0      	blx	r4
  40206c:	4602      	mov	r2, r0
  40206e:	68fb      	ldr	r3, [r7, #12]
  402070:	4313      	orrs	r3, r2
  402072:	60fb      	str	r3, [r7, #12]

	return status;
  402074:	68fb      	ldr	r3, [r7, #12]
}
  402076:	4618      	mov	r0, r3
  402078:	3714      	adds	r7, #20
  40207a:	46bd      	mov	sp, r7
  40207c:	bd90      	pop	{r4, r7, pc}
  40207e:	bf00      	nop
  402080:	00403951 	.word	0x00403951
  402084:	00403a1d 	.word	0x00403a1d

00402088 <inv_icm426xx_get_config_int1>:

	return status;
}

int inv_icm426xx_get_config_int1(struct inv_icm426xx * s, inv_icm426xx_interrupt_parameter_t * interrupt_to_configure)
{
  402088:	b590      	push	{r4, r7, lr}
  40208a:	b085      	sub	sp, #20
  40208c:	af00      	add	r7, sp, #0
  40208e:	6078      	str	r0, [r7, #4]
  402090:	6039      	str	r1, [r7, #0]
	int status = 0;
  402092:	2300      	movs	r3, #0
  402094:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {0};
  402096:	f107 0308 	add.w	r3, r7, #8
  40209a:	2100      	movs	r1, #0
  40209c:	460a      	mov	r2, r1
  40209e:	801a      	strh	r2, [r3, #0]
  4020a0:	460a      	mov	r2, r1
  4020a2:	709a      	strb	r2, [r3, #2]

	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE0, 2, data); /* burst read int_source0/int_source1 */
  4020a4:	f107 0308 	add.w	r3, r7, #8
  4020a8:	2202      	movs	r2, #2
  4020aa:	2165      	movs	r1, #101	; 0x65
  4020ac:	6878      	ldr	r0, [r7, #4]
  4020ae:	4c43      	ldr	r4, [pc, #268]	; (4021bc <inv_icm426xx_get_config_int1+0x134>)
  4020b0:	47a0      	blx	r4
  4020b2:	4602      	mov	r2, r0
  4020b4:	68fb      	ldr	r3, [r7, #12]
  4020b6:	4313      	orrs	r3, r2
  4020b8:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  4020ba:	2104      	movs	r1, #4
  4020bc:	6878      	ldr	r0, [r7, #4]
  4020be:	4b40      	ldr	r3, [pc, #256]	; (4021c0 <inv_icm426xx_get_config_int1+0x138>)
  4020c0:	4798      	blx	r3
  4020c2:	4602      	mov	r2, r0
  4020c4:	68fb      	ldr	r3, [r7, #12]
  4020c6:	4313      	orrs	r3, r2
  4020c8:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE6_B4, 1, &data[2]); /* int_source6 */
  4020ca:	f107 0308 	add.w	r3, r7, #8
  4020ce:	3302      	adds	r3, #2
  4020d0:	2201      	movs	r2, #1
  4020d2:	214d      	movs	r1, #77	; 0x4d
  4020d4:	6878      	ldr	r0, [r7, #4]
  4020d6:	4c39      	ldr	r4, [pc, #228]	; (4021bc <inv_icm426xx_get_config_int1+0x134>)
  4020d8:	47a0      	blx	r4
  4020da:	4602      	mov	r2, r0
  4020dc:	68fb      	ldr	r3, [r7, #12]
  4020de:	4313      	orrs	r3, r2
  4020e0:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  4020e2:	2100      	movs	r1, #0
  4020e4:	6878      	ldr	r0, [r7, #4]
  4020e6:	4b36      	ldr	r3, [pc, #216]	; (4021c0 <inv_icm426xx_get_config_int1+0x138>)
  4020e8:	4798      	blx	r3
  4020ea:	4602      	mov	r2, r0
  4020ec:	68fb      	ldr	r3, [r7, #12]
  4020ee:	4313      	orrs	r3, r2
  4020f0:	60fb      	str	r3, [r7, #12]

	/* Handles INT_SOURCE0 bits */
	interrupt_to_configure->INV_ICM426XX_UI_FSYNC  = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_UI_FSYNC_INT1_EN)  >> BIT_INT_UI_FSYNC_INT_EN_POS);
  4020f2:	7a3b      	ldrb	r3, [r7, #8]
  4020f4:	119b      	asrs	r3, r3, #6
  4020f6:	f003 0301 	and.w	r3, r3, #1
  4020fa:	b2da      	uxtb	r2, r3
  4020fc:	683b      	ldr	r3, [r7, #0]
  4020fe:	701a      	strb	r2, [r3, #0]
	interrupt_to_configure->INV_ICM426XX_UI_DRDY   = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_UI_DRDY_INT1_EN)   >> BIT_INT_UI_DRDY_INT_EN_POS);
  402100:	7a3b      	ldrb	r3, [r7, #8]
  402102:	10db      	asrs	r3, r3, #3
  402104:	f003 0301 	and.w	r3, r3, #1
  402108:	b2da      	uxtb	r2, r3
  40210a:	683b      	ldr	r3, [r7, #0]
  40210c:	705a      	strb	r2, [r3, #1]
	interrupt_to_configure->INV_ICM426XX_FIFO_THS  = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_FIFO_THS_INT1_EN)  >> BIT_INT_FIFO_THS_INT_EN_POS);
  40210e:	7a3b      	ldrb	r3, [r7, #8]
  402110:	109b      	asrs	r3, r3, #2
  402112:	f003 0301 	and.w	r3, r3, #1
  402116:	b2da      	uxtb	r2, r3
  402118:	683b      	ldr	r3, [r7, #0]
  40211a:	709a      	strb	r2, [r3, #2]
	interrupt_to_configure->INV_ICM426XX_FIFO_FULL = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_FIFO_FULL_INT1_EN) >> BIT_INT_FIFO_FULL_INT_EN_POS);
  40211c:	7a3b      	ldrb	r3, [r7, #8]
  40211e:	105b      	asrs	r3, r3, #1
  402120:	f003 0301 	and.w	r3, r3, #1
  402124:	b2da      	uxtb	r2, r3
  402126:	683b      	ldr	r3, [r7, #0]
  402128:	70da      	strb	r2, [r3, #3]

	/* Handles INT_SOURCE1 bits */
	interrupt_to_configure->INV_ICM426XX_SMD   = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_SMD_INT1_EN )   >> BIT_INT_SMD_INT_EN_POS);
  40212a:	7a7b      	ldrb	r3, [r7, #9]
  40212c:	10db      	asrs	r3, r3, #3
  40212e:	f003 0301 	and.w	r3, r3, #1
  402132:	b2da      	uxtb	r2, r3
  402134:	683b      	ldr	r3, [r7, #0]
  402136:	711a      	strb	r2, [r3, #4]
	interrupt_to_configure->INV_ICM426XX_WOM_X = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_WOM_X_INT1_EN ) >> BIT_INT_WOM_X_INT_EN_POS);
  402138:	7a7b      	ldrb	r3, [r7, #9]
  40213a:	f003 0301 	and.w	r3, r3, #1
  40213e:	b2da      	uxtb	r2, r3
  402140:	683b      	ldr	r3, [r7, #0]
  402142:	715a      	strb	r2, [r3, #5]
	interrupt_to_configure->INV_ICM426XX_WOM_Y = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_WOM_Y_INT1_EN ) >> BIT_INT_WOM_Y_INT_EN_POS);
  402144:	7a7b      	ldrb	r3, [r7, #9]
  402146:	105b      	asrs	r3, r3, #1
  402148:	f003 0301 	and.w	r3, r3, #1
  40214c:	b2da      	uxtb	r2, r3
  40214e:	683b      	ldr	r3, [r7, #0]
  402150:	719a      	strb	r2, [r3, #6]
	interrupt_to_configure->INV_ICM426XX_WOM_Z = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_WOM_Z_INT1_EN ) >> BIT_INT_WOM_Z_INT_EN_POS);
  402152:	7a7b      	ldrb	r3, [r7, #9]
  402154:	109b      	asrs	r3, r3, #2
  402156:	f003 0301 	and.w	r3, r3, #1
  40215a:	b2da      	uxtb	r2, r3
  40215c:	683b      	ldr	r3, [r7, #0]
  40215e:	71da      	strb	r2, [r3, #7]

	/* Handles INT_SOURCE6 bits */
	interrupt_to_configure->INV_ICM426XX_STEP_DET      = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_STEP_DET_INT1_EN)      >> BIT_INT_STEP_DET_INT_EN_POS);
  402160:	7abb      	ldrb	r3, [r7, #10]
  402162:	115b      	asrs	r3, r3, #5
  402164:	f003 0301 	and.w	r3, r3, #1
  402168:	b2da      	uxtb	r2, r3
  40216a:	683b      	ldr	r3, [r7, #0]
  40216c:	721a      	strb	r2, [r3, #8]
	interrupt_to_configure->INV_ICM426XX_STEP_CNT_OVFL = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_STEP_CNT_OVFL_INT1_EN) >> BIT_INT_STEP_CNT_OVFL_INT_EN_POS);
  40216e:	7abb      	ldrb	r3, [r7, #10]
  402170:	111b      	asrs	r3, r3, #4
  402172:	f003 0301 	and.w	r3, r3, #1
  402176:	b2da      	uxtb	r2, r3
  402178:	683b      	ldr	r3, [r7, #0]
  40217a:	725a      	strb	r2, [r3, #9]
	interrupt_to_configure->INV_ICM426XX_TILT_DET      = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_TILT_DET_INT1_EN)      >> BIT_INT_TILT_DET_INT_EN_POS);
  40217c:	7abb      	ldrb	r3, [r7, #10]
  40217e:	10db      	asrs	r3, r3, #3
  402180:	f003 0301 	and.w	r3, r3, #1
  402184:	b2da      	uxtb	r2, r3
  402186:	683b      	ldr	r3, [r7, #0]
  402188:	729a      	strb	r2, [r3, #10]
	interrupt_to_configure->INV_ICM426XX_SLEEP_DET     = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_SLEEP_DET_INT1_EN)     >> BIT_INT_SLEEP_DET_INT_EN_POS);
  40218a:	7abb      	ldrb	r3, [r7, #10]
  40218c:	105b      	asrs	r3, r3, #1
  40218e:	f003 0301 	and.w	r3, r3, #1
  402192:	b2da      	uxtb	r2, r3
  402194:	683b      	ldr	r3, [r7, #0]
  402196:	72da      	strb	r2, [r3, #11]
	interrupt_to_configure->INV_ICM426XX_WAKE_DET      = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_WAKE_DET_INT1_EN)      >> BIT_INT_WAKE_DET_INT_EN_POS);
  402198:	7abb      	ldrb	r3, [r7, #10]
  40219a:	109b      	asrs	r3, r3, #2
  40219c:	f003 0301 	and.w	r3, r3, #1
  4021a0:	b2da      	uxtb	r2, r3
  4021a2:	683b      	ldr	r3, [r7, #0]
  4021a4:	731a      	strb	r2, [r3, #12]
	interrupt_to_configure->INV_ICM426XX_TAP_DET       = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_TAP_DET_INT1_EN)       >> BIT_INT_TAP_DET_INT_EN_POS);
  4021a6:	7abb      	ldrb	r3, [r7, #10]
  4021a8:	f003 0301 	and.w	r3, r3, #1
  4021ac:	b2da      	uxtb	r2, r3
  4021ae:	683b      	ldr	r3, [r7, #0]
  4021b0:	735a      	strb	r2, [r3, #13]

	return status;
  4021b2:	68fb      	ldr	r3, [r7, #12]
}
  4021b4:	4618      	mov	r0, r3
  4021b6:	3714      	adds	r7, #20
  4021b8:	46bd      	mov	sp, r7
  4021ba:	bd90      	pop	{r4, r7, pc}
  4021bc:	00403951 	.word	0x00403951
  4021c0:	00401695 	.word	0x00401695

004021c4 <inv_icm426xx_set_config_ibi>:

	return status;
}

int inv_icm426xx_set_config_ibi(struct inv_icm426xx * s, inv_icm426xx_interrupt_parameter_t * interrupt_to_configure)
{
  4021c4:	b590      	push	{r4, r7, lr}
  4021c6:	b085      	sub	sp, #20
  4021c8:	af00      	add	r7, sp, #0
  4021ca:	6078      	str	r0, [r7, #4]
  4021cc:	6039      	str	r1, [r7, #0]
	int status = 0;
  4021ce:	2300      	movs	r3, #0
  4021d0:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {0};
  4021d2:	f107 0308 	add.w	r3, r7, #8
  4021d6:	2100      	movs	r1, #0
  4021d8:	460a      	mov	r2, r1
  4021da:	801a      	strh	r2, [r3, #0]
  4021dc:	460a      	mov	r2, r1
  4021de:	709a      	strb	r2, [r3, #2]

	status |= inv_icm426xx_set_reg_bank(s, 4);
  4021e0:	2104      	movs	r1, #4
  4021e2:	6878      	ldr	r0, [r7, #4]
  4021e4:	4b6a      	ldr	r3, [pc, #424]	; (402390 <inv_icm426xx_set_config_ibi+0x1cc>)
  4021e6:	4798      	blx	r3
  4021e8:	4602      	mov	r2, r0
  4021ea:	68fb      	ldr	r3, [r7, #12]
  4021ec:	4313      	orrs	r3, r2
  4021ee:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE8_B4, 3, data); /* burst read int_source8/int_source9/int_source10 */
  4021f0:	f107 0308 	add.w	r3, r7, #8
  4021f4:	2203      	movs	r2, #3
  4021f6:	214f      	movs	r1, #79	; 0x4f
  4021f8:	6878      	ldr	r0, [r7, #4]
  4021fa:	4c66      	ldr	r4, [pc, #408]	; (402394 <inv_icm426xx_set_config_ibi+0x1d0>)
  4021fc:	47a0      	blx	r4
  4021fe:	4602      	mov	r2, r0
  402200:	68fb      	ldr	r3, [r7, #12]
  402202:	4313      	orrs	r3, r2
  402204:	60fb      	str	r3, [r7, #12]

	/* Set INT_SOURCE8 bits */
	data[0] &= (uint8_t)~(BIT_INT_SOURCE8_UI_FSYNC_IBI_EN 
  402206:	7a3b      	ldrb	r3, [r7, #8]
  402208:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
  40220c:	b2db      	uxtb	r3, r3
  40220e:	723b      	strb	r3, [r7, #8]
			| BIT_INT_SOURCE8_UI_DRDY_IBI_EN 
			| BIT_INT_SOURCE8_FIFO_THS_IBI_EN 
			| BIT_INT_SOURCE8_FIFO_FULL_IBI_EN);
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_FSYNC != 0)  << BIT_INT_UI_FSYNC_IBI_EN_POS);
  402210:	7a3b      	ldrb	r3, [r7, #8]
  402212:	b25a      	sxtb	r2, r3
  402214:	683b      	ldr	r3, [r7, #0]
  402216:	781b      	ldrb	r3, [r3, #0]
  402218:	2b00      	cmp	r3, #0
  40221a:	d001      	beq.n	402220 <inv_icm426xx_set_config_ibi+0x5c>
  40221c:	2320      	movs	r3, #32
  40221e:	e000      	b.n	402222 <inv_icm426xx_set_config_ibi+0x5e>
  402220:	2300      	movs	r3, #0
  402222:	4313      	orrs	r3, r2
  402224:	b25b      	sxtb	r3, r3
  402226:	b2db      	uxtb	r3, r3
  402228:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_DRDY != 0)   << BIT_INT_UI_DRDY_IBI_EN_POS);
  40222a:	7a3b      	ldrb	r3, [r7, #8]
  40222c:	b25a      	sxtb	r2, r3
  40222e:	683b      	ldr	r3, [r7, #0]
  402230:	785b      	ldrb	r3, [r3, #1]
  402232:	2b00      	cmp	r3, #0
  402234:	d001      	beq.n	40223a <inv_icm426xx_set_config_ibi+0x76>
  402236:	2308      	movs	r3, #8
  402238:	e000      	b.n	40223c <inv_icm426xx_set_config_ibi+0x78>
  40223a:	2300      	movs	r3, #0
  40223c:	4313      	orrs	r3, r2
  40223e:	b25b      	sxtb	r3, r3
  402240:	b2db      	uxtb	r3, r3
  402242:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_THS != 0)  << BIT_INT_FIFO_THS_IBI_EN_POS);
  402244:	7a3b      	ldrb	r3, [r7, #8]
  402246:	b25a      	sxtb	r2, r3
  402248:	683b      	ldr	r3, [r7, #0]
  40224a:	789b      	ldrb	r3, [r3, #2]
  40224c:	2b00      	cmp	r3, #0
  40224e:	d001      	beq.n	402254 <inv_icm426xx_set_config_ibi+0x90>
  402250:	2304      	movs	r3, #4
  402252:	e000      	b.n	402256 <inv_icm426xx_set_config_ibi+0x92>
  402254:	2300      	movs	r3, #0
  402256:	4313      	orrs	r3, r2
  402258:	b25b      	sxtb	r3, r3
  40225a:	b2db      	uxtb	r3, r3
  40225c:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_FULL != 0) << BIT_INT_FIFO_FULL_IBI_EN_POS);
  40225e:	7a3b      	ldrb	r3, [r7, #8]
  402260:	b25a      	sxtb	r2, r3
  402262:	683b      	ldr	r3, [r7, #0]
  402264:	78db      	ldrb	r3, [r3, #3]
  402266:	2b00      	cmp	r3, #0
  402268:	d001      	beq.n	40226e <inv_icm426xx_set_config_ibi+0xaa>
  40226a:	2302      	movs	r3, #2
  40226c:	e000      	b.n	402270 <inv_icm426xx_set_config_ibi+0xac>
  40226e:	2300      	movs	r3, #0
  402270:	4313      	orrs	r3, r2
  402272:	b25b      	sxtb	r3, r3
  402274:	b2db      	uxtb	r3, r3
  402276:	723b      	strb	r3, [r7, #8]

	/* Set INT_SOURCE9 bits */
	data[1] &= (uint8_t)~(BIT_INT_SOURCE9_SMD_IBI_EN 
  402278:	7a7b      	ldrb	r3, [r7, #9]
  40227a:	f023 031e 	bic.w	r3, r3, #30
  40227e:	b2db      	uxtb	r3, r3
  402280:	727b      	strb	r3, [r7, #9]
			| BIT_INT_SOURCE9_WOM_X_IBI_EN 
			| BIT_INT_SOURCE9_WOM_Y_IBI_EN 
			| BIT_INT_SOURCE9_WOM_Z_IBI_EN);
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_SMD != 0)   << BIT_INT_SMD_IBI_EN_POS);
  402282:	7a7b      	ldrb	r3, [r7, #9]
  402284:	b25a      	sxtb	r2, r3
  402286:	683b      	ldr	r3, [r7, #0]
  402288:	791b      	ldrb	r3, [r3, #4]
  40228a:	2b00      	cmp	r3, #0
  40228c:	d001      	beq.n	402292 <inv_icm426xx_set_config_ibi+0xce>
  40228e:	2310      	movs	r3, #16
  402290:	e000      	b.n	402294 <inv_icm426xx_set_config_ibi+0xd0>
  402292:	2300      	movs	r3, #0
  402294:	4313      	orrs	r3, r2
  402296:	b25b      	sxtb	r3, r3
  402298:	b2db      	uxtb	r3, r3
  40229a:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_X != 0) << BIT_INT_WOM_X_IBI_EN_POS);
  40229c:	7a7b      	ldrb	r3, [r7, #9]
  40229e:	b25a      	sxtb	r2, r3
  4022a0:	683b      	ldr	r3, [r7, #0]
  4022a2:	795b      	ldrb	r3, [r3, #5]
  4022a4:	2b00      	cmp	r3, #0
  4022a6:	d001      	beq.n	4022ac <inv_icm426xx_set_config_ibi+0xe8>
  4022a8:	2302      	movs	r3, #2
  4022aa:	e000      	b.n	4022ae <inv_icm426xx_set_config_ibi+0xea>
  4022ac:	2300      	movs	r3, #0
  4022ae:	4313      	orrs	r3, r2
  4022b0:	b25b      	sxtb	r3, r3
  4022b2:	b2db      	uxtb	r3, r3
  4022b4:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Y != 0) << BIT_INT_WOM_Y_IBI_EN_POS);
  4022b6:	7a7b      	ldrb	r3, [r7, #9]
  4022b8:	b25a      	sxtb	r2, r3
  4022ba:	683b      	ldr	r3, [r7, #0]
  4022bc:	799b      	ldrb	r3, [r3, #6]
  4022be:	2b00      	cmp	r3, #0
  4022c0:	d001      	beq.n	4022c6 <inv_icm426xx_set_config_ibi+0x102>
  4022c2:	2304      	movs	r3, #4
  4022c4:	e000      	b.n	4022c8 <inv_icm426xx_set_config_ibi+0x104>
  4022c6:	2300      	movs	r3, #0
  4022c8:	4313      	orrs	r3, r2
  4022ca:	b25b      	sxtb	r3, r3
  4022cc:	b2db      	uxtb	r3, r3
  4022ce:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Z != 0) << BIT_INT_WOM_Z_IBI_EN_POS);
  4022d0:	7a7b      	ldrb	r3, [r7, #9]
  4022d2:	b25a      	sxtb	r2, r3
  4022d4:	683b      	ldr	r3, [r7, #0]
  4022d6:	79db      	ldrb	r3, [r3, #7]
  4022d8:	2b00      	cmp	r3, #0
  4022da:	d001      	beq.n	4022e0 <inv_icm426xx_set_config_ibi+0x11c>
  4022dc:	2308      	movs	r3, #8
  4022de:	e000      	b.n	4022e2 <inv_icm426xx_set_config_ibi+0x11e>
  4022e0:	2300      	movs	r3, #0
  4022e2:	4313      	orrs	r3, r2
  4022e4:	b25b      	sxtb	r3, r3
  4022e6:	b2db      	uxtb	r3, r3
  4022e8:	727b      	strb	r3, [r7, #9]

	/* Set INT_SOURCE10 bits */
	data[2] &= (uint8_t)~(BIT_INT_SOURCE10_STEP_DET_IBI_EN
  4022ea:	7abb      	ldrb	r3, [r7, #10]
  4022ec:	f023 0339 	bic.w	r3, r3, #57	; 0x39
  4022f0:	b2db      	uxtb	r3, r3
  4022f2:	72bb      	strb	r3, [r7, #10]
			| BIT_INT_SOURCE10_STEP_CNT_OVFL_IBI_EN
			| BIT_INT_SOURCE10_TILT_DET_IBI_EN
			| BIT_INT_SOURCE10_TAP_DET_IBI_EN);
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_DET != 0)      << BIT_INT_STEP_DET_IBI_EN_POS);
  4022f4:	7abb      	ldrb	r3, [r7, #10]
  4022f6:	b25a      	sxtb	r2, r3
  4022f8:	683b      	ldr	r3, [r7, #0]
  4022fa:	7a1b      	ldrb	r3, [r3, #8]
  4022fc:	2b00      	cmp	r3, #0
  4022fe:	d001      	beq.n	402304 <inv_icm426xx_set_config_ibi+0x140>
  402300:	2320      	movs	r3, #32
  402302:	e000      	b.n	402306 <inv_icm426xx_set_config_ibi+0x142>
  402304:	2300      	movs	r3, #0
  402306:	4313      	orrs	r3, r2
  402308:	b25b      	sxtb	r3, r3
  40230a:	b2db      	uxtb	r3, r3
  40230c:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_CNT_OVFL != 0) << BIT_INT_STEP_CNT_OVFL_IBI_EN_POS);
  40230e:	7abb      	ldrb	r3, [r7, #10]
  402310:	b25a      	sxtb	r2, r3
  402312:	683b      	ldr	r3, [r7, #0]
  402314:	7a5b      	ldrb	r3, [r3, #9]
  402316:	2b00      	cmp	r3, #0
  402318:	d001      	beq.n	40231e <inv_icm426xx_set_config_ibi+0x15a>
  40231a:	2310      	movs	r3, #16
  40231c:	e000      	b.n	402320 <inv_icm426xx_set_config_ibi+0x15c>
  40231e:	2300      	movs	r3, #0
  402320:	4313      	orrs	r3, r2
  402322:	b25b      	sxtb	r3, r3
  402324:	b2db      	uxtb	r3, r3
  402326:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TILT_DET != 0)      << BIT_INT_TILT_DET_IBI_EN_POS);
  402328:	7abb      	ldrb	r3, [r7, #10]
  40232a:	b25a      	sxtb	r2, r3
  40232c:	683b      	ldr	r3, [r7, #0]
  40232e:	7a9b      	ldrb	r3, [r3, #10]
  402330:	2b00      	cmp	r3, #0
  402332:	d001      	beq.n	402338 <inv_icm426xx_set_config_ibi+0x174>
  402334:	2308      	movs	r3, #8
  402336:	e000      	b.n	40233a <inv_icm426xx_set_config_ibi+0x176>
  402338:	2300      	movs	r3, #0
  40233a:	4313      	orrs	r3, r2
  40233c:	b25b      	sxtb	r3, r3
  40233e:	b2db      	uxtb	r3, r3
  402340:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TAP_DET != 0)       << BIT_INT_TAP_DET_IBI_EN_POS);
  402342:	7abb      	ldrb	r3, [r7, #10]
  402344:	b25a      	sxtb	r2, r3
  402346:	683b      	ldr	r3, [r7, #0]
  402348:	7b5b      	ldrb	r3, [r3, #13]
  40234a:	2b00      	cmp	r3, #0
  40234c:	bf14      	ite	ne
  40234e:	2301      	movne	r3, #1
  402350:	2300      	moveq	r3, #0
  402352:	b2db      	uxtb	r3, r3
  402354:	b25b      	sxtb	r3, r3
  402356:	4313      	orrs	r3, r2
  402358:	b25b      	sxtb	r3, r3
  40235a:	b2db      	uxtb	r3, r3
  40235c:	72bb      	strb	r3, [r7, #10]

	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE8_B4, 3, data); /* burst write int_source8/int_source9/int_source10 */
  40235e:	f107 0308 	add.w	r3, r7, #8
  402362:	2203      	movs	r2, #3
  402364:	214f      	movs	r1, #79	; 0x4f
  402366:	6878      	ldr	r0, [r7, #4]
  402368:	4c0b      	ldr	r4, [pc, #44]	; (402398 <inv_icm426xx_set_config_ibi+0x1d4>)
  40236a:	47a0      	blx	r4
  40236c:	4602      	mov	r2, r0
  40236e:	68fb      	ldr	r3, [r7, #12]
  402370:	4313      	orrs	r3, r2
  402372:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  402374:	2100      	movs	r1, #0
  402376:	6878      	ldr	r0, [r7, #4]
  402378:	4b05      	ldr	r3, [pc, #20]	; (402390 <inv_icm426xx_set_config_ibi+0x1cc>)
  40237a:	4798      	blx	r3
  40237c:	4602      	mov	r2, r0
  40237e:	68fb      	ldr	r3, [r7, #12]
  402380:	4313      	orrs	r3, r2
  402382:	60fb      	str	r3, [r7, #12]
	
	return status;
  402384:	68fb      	ldr	r3, [r7, #12]
}
  402386:	4618      	mov	r0, r3
  402388:	3714      	adds	r7, #20
  40238a:	46bd      	mov	sp, r7
  40238c:	bd90      	pop	{r4, r7, pc}
  40238e:	bf00      	nop
  402390:	00401695 	.word	0x00401695
  402394:	00403951 	.word	0x00403951
  402398:	00403a1d 	.word	0x00403a1d

0040239c <inv_icm426xx_set_config_int1>:

int inv_icm426xx_set_config_int1(struct inv_icm426xx * s, inv_icm426xx_interrupt_parameter_t * interrupt_to_configure)
{
  40239c:	b590      	push	{r4, r7, lr}
  40239e:	b085      	sub	sp, #20
  4023a0:	af00      	add	r7, sp, #0
  4023a2:	6078      	str	r0, [r7, #4]
  4023a4:	6039      	str	r1, [r7, #0]
	int status = 0;
  4023a6:	2300      	movs	r3, #0
  4023a8:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {0};
  4023aa:	f107 0308 	add.w	r3, r7, #8
  4023ae:	2100      	movs	r1, #0
  4023b0:	460a      	mov	r2, r1
  4023b2:	801a      	strh	r2, [r3, #0]
  4023b4:	460a      	mov	r2, r1
  4023b6:	709a      	strb	r2, [r3, #2]

	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE0, 2, data); /* burst read int_source0/int_source1 */
  4023b8:	f107 0308 	add.w	r3, r7, #8
  4023bc:	2202      	movs	r2, #2
  4023be:	2165      	movs	r1, #101	; 0x65
  4023c0:	6878      	ldr	r0, [r7, #4]
  4023c2:	4c82      	ldr	r4, [pc, #520]	; (4025cc <inv_icm426xx_set_config_int1+0x230>)
  4023c4:	47a0      	blx	r4
  4023c6:	4602      	mov	r2, r0
  4023c8:	68fb      	ldr	r3, [r7, #12]
  4023ca:	4313      	orrs	r3, r2
  4023cc:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  4023ce:	2104      	movs	r1, #4
  4023d0:	6878      	ldr	r0, [r7, #4]
  4023d2:	4b7f      	ldr	r3, [pc, #508]	; (4025d0 <inv_icm426xx_set_config_int1+0x234>)
  4023d4:	4798      	blx	r3
  4023d6:	4602      	mov	r2, r0
  4023d8:	68fb      	ldr	r3, [r7, #12]
  4023da:	4313      	orrs	r3, r2
  4023dc:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE6_B4, 1, &data[2]); /* switch to bank4 for int_source6 */
  4023de:	f107 0308 	add.w	r3, r7, #8
  4023e2:	3302      	adds	r3, #2
  4023e4:	2201      	movs	r2, #1
  4023e6:	214d      	movs	r1, #77	; 0x4d
  4023e8:	6878      	ldr	r0, [r7, #4]
  4023ea:	4c78      	ldr	r4, [pc, #480]	; (4025cc <inv_icm426xx_set_config_int1+0x230>)
  4023ec:	47a0      	blx	r4
  4023ee:	4602      	mov	r2, r0
  4023f0:	68fb      	ldr	r3, [r7, #12]
  4023f2:	4313      	orrs	r3, r2
  4023f4:	60fb      	str	r3, [r7, #12]

	/* Set INT_SOURCE0 bits */
	data[0] &= (uint8_t)~(BIT_INT_SOURCE0_UI_FSYNC_INT1_EN 
  4023f6:	7a3b      	ldrb	r3, [r7, #8]
  4023f8:	f023 034e 	bic.w	r3, r3, #78	; 0x4e
  4023fc:	b2db      	uxtb	r3, r3
  4023fe:	723b      	strb	r3, [r7, #8]
			| BIT_INT_SOURCE0_UI_DRDY_INT1_EN 
			| BIT_INT_SOURCE0_FIFO_THS_INT1_EN 
			| BIT_INT_SOURCE0_FIFO_FULL_INT1_EN);
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_FSYNC != 0)  << BIT_INT_UI_FSYNC_INT_EN_POS);
  402400:	7a3b      	ldrb	r3, [r7, #8]
  402402:	b25a      	sxtb	r2, r3
  402404:	683b      	ldr	r3, [r7, #0]
  402406:	781b      	ldrb	r3, [r3, #0]
  402408:	2b00      	cmp	r3, #0
  40240a:	d001      	beq.n	402410 <inv_icm426xx_set_config_int1+0x74>
  40240c:	2340      	movs	r3, #64	; 0x40
  40240e:	e000      	b.n	402412 <inv_icm426xx_set_config_int1+0x76>
  402410:	2300      	movs	r3, #0
  402412:	4313      	orrs	r3, r2
  402414:	b25b      	sxtb	r3, r3
  402416:	b2db      	uxtb	r3, r3
  402418:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_DRDY != 0)   << BIT_INT_UI_DRDY_INT_EN_POS);
  40241a:	7a3b      	ldrb	r3, [r7, #8]
  40241c:	b25a      	sxtb	r2, r3
  40241e:	683b      	ldr	r3, [r7, #0]
  402420:	785b      	ldrb	r3, [r3, #1]
  402422:	2b00      	cmp	r3, #0
  402424:	d001      	beq.n	40242a <inv_icm426xx_set_config_int1+0x8e>
  402426:	2308      	movs	r3, #8
  402428:	e000      	b.n	40242c <inv_icm426xx_set_config_int1+0x90>
  40242a:	2300      	movs	r3, #0
  40242c:	4313      	orrs	r3, r2
  40242e:	b25b      	sxtb	r3, r3
  402430:	b2db      	uxtb	r3, r3
  402432:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_THS != 0)  << BIT_INT_FIFO_THS_INT_EN_POS);
  402434:	7a3b      	ldrb	r3, [r7, #8]
  402436:	b25a      	sxtb	r2, r3
  402438:	683b      	ldr	r3, [r7, #0]
  40243a:	789b      	ldrb	r3, [r3, #2]
  40243c:	2b00      	cmp	r3, #0
  40243e:	d001      	beq.n	402444 <inv_icm426xx_set_config_int1+0xa8>
  402440:	2304      	movs	r3, #4
  402442:	e000      	b.n	402446 <inv_icm426xx_set_config_int1+0xaa>
  402444:	2300      	movs	r3, #0
  402446:	4313      	orrs	r3, r2
  402448:	b25b      	sxtb	r3, r3
  40244a:	b2db      	uxtb	r3, r3
  40244c:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_FULL != 0) << BIT_INT_FIFO_FULL_INT_EN_POS);
  40244e:	7a3b      	ldrb	r3, [r7, #8]
  402450:	b25a      	sxtb	r2, r3
  402452:	683b      	ldr	r3, [r7, #0]
  402454:	78db      	ldrb	r3, [r3, #3]
  402456:	2b00      	cmp	r3, #0
  402458:	d001      	beq.n	40245e <inv_icm426xx_set_config_int1+0xc2>
  40245a:	2302      	movs	r3, #2
  40245c:	e000      	b.n	402460 <inv_icm426xx_set_config_int1+0xc4>
  40245e:	2300      	movs	r3, #0
  402460:	4313      	orrs	r3, r2
  402462:	b25b      	sxtb	r3, r3
  402464:	b2db      	uxtb	r3, r3
  402466:	723b      	strb	r3, [r7, #8]

	/* Set INT_SOURCE1 bits */
	data[1] &= (uint8_t)~(BIT_INT_SOURCE1_SMD_INT1_EN 
  402468:	7a7b      	ldrb	r3, [r7, #9]
  40246a:	f023 030f 	bic.w	r3, r3, #15
  40246e:	b2db      	uxtb	r3, r3
  402470:	727b      	strb	r3, [r7, #9]
			| BIT_INT_SOURCE1_WOM_X_INT1_EN 
			| BIT_INT_SOURCE1_WOM_Y_INT1_EN 
			| BIT_INT_SOURCE1_WOM_Z_INT1_EN);
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_SMD   != 0) << BIT_INT_SMD_INT_EN_POS);
  402472:	7a7b      	ldrb	r3, [r7, #9]
  402474:	b25a      	sxtb	r2, r3
  402476:	683b      	ldr	r3, [r7, #0]
  402478:	791b      	ldrb	r3, [r3, #4]
  40247a:	2b00      	cmp	r3, #0
  40247c:	d001      	beq.n	402482 <inv_icm426xx_set_config_int1+0xe6>
  40247e:	2308      	movs	r3, #8
  402480:	e000      	b.n	402484 <inv_icm426xx_set_config_int1+0xe8>
  402482:	2300      	movs	r3, #0
  402484:	4313      	orrs	r3, r2
  402486:	b25b      	sxtb	r3, r3
  402488:	b2db      	uxtb	r3, r3
  40248a:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_X != 0) << BIT_INT_WOM_X_INT_EN_POS);
  40248c:	7a7b      	ldrb	r3, [r7, #9]
  40248e:	b25a      	sxtb	r2, r3
  402490:	683b      	ldr	r3, [r7, #0]
  402492:	795b      	ldrb	r3, [r3, #5]
  402494:	2b00      	cmp	r3, #0
  402496:	bf14      	ite	ne
  402498:	2301      	movne	r3, #1
  40249a:	2300      	moveq	r3, #0
  40249c:	b2db      	uxtb	r3, r3
  40249e:	b25b      	sxtb	r3, r3
  4024a0:	4313      	orrs	r3, r2
  4024a2:	b25b      	sxtb	r3, r3
  4024a4:	b2db      	uxtb	r3, r3
  4024a6:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Y != 0) << BIT_INT_WOM_Y_INT_EN_POS);
  4024a8:	7a7b      	ldrb	r3, [r7, #9]
  4024aa:	b25a      	sxtb	r2, r3
  4024ac:	683b      	ldr	r3, [r7, #0]
  4024ae:	799b      	ldrb	r3, [r3, #6]
  4024b0:	2b00      	cmp	r3, #0
  4024b2:	d001      	beq.n	4024b8 <inv_icm426xx_set_config_int1+0x11c>
  4024b4:	2302      	movs	r3, #2
  4024b6:	e000      	b.n	4024ba <inv_icm426xx_set_config_int1+0x11e>
  4024b8:	2300      	movs	r3, #0
  4024ba:	4313      	orrs	r3, r2
  4024bc:	b25b      	sxtb	r3, r3
  4024be:	b2db      	uxtb	r3, r3
  4024c0:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Z != 0) << BIT_INT_WOM_Z_INT_EN_POS);
  4024c2:	7a7b      	ldrb	r3, [r7, #9]
  4024c4:	b25a      	sxtb	r2, r3
  4024c6:	683b      	ldr	r3, [r7, #0]
  4024c8:	79db      	ldrb	r3, [r3, #7]
  4024ca:	2b00      	cmp	r3, #0
  4024cc:	d001      	beq.n	4024d2 <inv_icm426xx_set_config_int1+0x136>
  4024ce:	2304      	movs	r3, #4
  4024d0:	e000      	b.n	4024d4 <inv_icm426xx_set_config_int1+0x138>
  4024d2:	2300      	movs	r3, #0
  4024d4:	4313      	orrs	r3, r2
  4024d6:	b25b      	sxtb	r3, r3
  4024d8:	b2db      	uxtb	r3, r3
  4024da:	727b      	strb	r3, [r7, #9]

	/* Set INT_SOURCE6 bits */
	data[2] &= (uint8_t)~(BIT_INT_SOURCE6_STEP_DET_INT1_EN
  4024dc:	7abb      	ldrb	r3, [r7, #10]
  4024de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  4024e2:	b2db      	uxtb	r3, r3
  4024e4:	72bb      	strb	r3, [r7, #10]
			| BIT_INT_SOURCE6_STEP_CNT_OVFL_INT1_EN
			| BIT_INT_SOURCE6_TILT_DET_INT1_EN
			| BIT_INT_SOURCE6_SLEEP_DET_INT1_EN
			| BIT_INT_SOURCE6_WAKE_DET_INT1_EN
			| BIT_INT_SOURCE6_TAP_DET_INT1_EN);
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_DET != 0)      << BIT_INT_STEP_DET_INT_EN_POS);
  4024e6:	7abb      	ldrb	r3, [r7, #10]
  4024e8:	b25a      	sxtb	r2, r3
  4024ea:	683b      	ldr	r3, [r7, #0]
  4024ec:	7a1b      	ldrb	r3, [r3, #8]
  4024ee:	2b00      	cmp	r3, #0
  4024f0:	d001      	beq.n	4024f6 <inv_icm426xx_set_config_int1+0x15a>
  4024f2:	2320      	movs	r3, #32
  4024f4:	e000      	b.n	4024f8 <inv_icm426xx_set_config_int1+0x15c>
  4024f6:	2300      	movs	r3, #0
  4024f8:	4313      	orrs	r3, r2
  4024fa:	b25b      	sxtb	r3, r3
  4024fc:	b2db      	uxtb	r3, r3
  4024fe:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_CNT_OVFL != 0) << BIT_INT_STEP_CNT_OVFL_INT_EN_POS);
  402500:	7abb      	ldrb	r3, [r7, #10]
  402502:	b25a      	sxtb	r2, r3
  402504:	683b      	ldr	r3, [r7, #0]
  402506:	7a5b      	ldrb	r3, [r3, #9]
  402508:	2b00      	cmp	r3, #0
  40250a:	d001      	beq.n	402510 <inv_icm426xx_set_config_int1+0x174>
  40250c:	2310      	movs	r3, #16
  40250e:	e000      	b.n	402512 <inv_icm426xx_set_config_int1+0x176>
  402510:	2300      	movs	r3, #0
  402512:	4313      	orrs	r3, r2
  402514:	b25b      	sxtb	r3, r3
  402516:	b2db      	uxtb	r3, r3
  402518:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TILT_DET != 0)      << BIT_INT_TILT_DET_INT_EN_POS);
  40251a:	7abb      	ldrb	r3, [r7, #10]
  40251c:	b25a      	sxtb	r2, r3
  40251e:	683b      	ldr	r3, [r7, #0]
  402520:	7a9b      	ldrb	r3, [r3, #10]
  402522:	2b00      	cmp	r3, #0
  402524:	d001      	beq.n	40252a <inv_icm426xx_set_config_int1+0x18e>
  402526:	2308      	movs	r3, #8
  402528:	e000      	b.n	40252c <inv_icm426xx_set_config_int1+0x190>
  40252a:	2300      	movs	r3, #0
  40252c:	4313      	orrs	r3, r2
  40252e:	b25b      	sxtb	r3, r3
  402530:	b2db      	uxtb	r3, r3
  402532:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_SLEEP_DET != 0)     << BIT_INT_SLEEP_DET_INT_EN_POS);
  402534:	7abb      	ldrb	r3, [r7, #10]
  402536:	b25a      	sxtb	r2, r3
  402538:	683b      	ldr	r3, [r7, #0]
  40253a:	7adb      	ldrb	r3, [r3, #11]
  40253c:	2b00      	cmp	r3, #0
  40253e:	d001      	beq.n	402544 <inv_icm426xx_set_config_int1+0x1a8>
  402540:	2302      	movs	r3, #2
  402542:	e000      	b.n	402546 <inv_icm426xx_set_config_int1+0x1aa>
  402544:	2300      	movs	r3, #0
  402546:	4313      	orrs	r3, r2
  402548:	b25b      	sxtb	r3, r3
  40254a:	b2db      	uxtb	r3, r3
  40254c:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_WAKE_DET != 0)      << BIT_INT_WAKE_DET_INT_EN_POS);
  40254e:	7abb      	ldrb	r3, [r7, #10]
  402550:	b25a      	sxtb	r2, r3
  402552:	683b      	ldr	r3, [r7, #0]
  402554:	7b1b      	ldrb	r3, [r3, #12]
  402556:	2b00      	cmp	r3, #0
  402558:	d001      	beq.n	40255e <inv_icm426xx_set_config_int1+0x1c2>
  40255a:	2304      	movs	r3, #4
  40255c:	e000      	b.n	402560 <inv_icm426xx_set_config_int1+0x1c4>
  40255e:	2300      	movs	r3, #0
  402560:	4313      	orrs	r3, r2
  402562:	b25b      	sxtb	r3, r3
  402564:	b2db      	uxtb	r3, r3
  402566:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TAP_DET != 0)       << BIT_INT_TAP_DET_INT_EN_POS);
  402568:	7abb      	ldrb	r3, [r7, #10]
  40256a:	b25a      	sxtb	r2, r3
  40256c:	683b      	ldr	r3, [r7, #0]
  40256e:	7b5b      	ldrb	r3, [r3, #13]
  402570:	2b00      	cmp	r3, #0
  402572:	bf14      	ite	ne
  402574:	2301      	movne	r3, #1
  402576:	2300      	moveq	r3, #0
  402578:	b2db      	uxtb	r3, r3
  40257a:	b25b      	sxtb	r3, r3
  40257c:	4313      	orrs	r3, r2
  40257e:	b25b      	sxtb	r3, r3
  402580:	b2db      	uxtb	r3, r3
  402582:	72bb      	strb	r3, [r7, #10]
	
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE6_B4, 1, &data[2]); /* start with int_source6 since we are still in bank4 */
  402584:	f107 0308 	add.w	r3, r7, #8
  402588:	3302      	adds	r3, #2
  40258a:	2201      	movs	r2, #1
  40258c:	214d      	movs	r1, #77	; 0x4d
  40258e:	6878      	ldr	r0, [r7, #4]
  402590:	4c10      	ldr	r4, [pc, #64]	; (4025d4 <inv_icm426xx_set_config_int1+0x238>)
  402592:	47a0      	blx	r4
  402594:	4602      	mov	r2, r0
  402596:	68fb      	ldr	r3, [r7, #12]
  402598:	4313      	orrs	r3, r2
  40259a:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  40259c:	2100      	movs	r1, #0
  40259e:	6878      	ldr	r0, [r7, #4]
  4025a0:	4b0b      	ldr	r3, [pc, #44]	; (4025d0 <inv_icm426xx_set_config_int1+0x234>)
  4025a2:	4798      	blx	r3
  4025a4:	4602      	mov	r2, r0
  4025a6:	68fb      	ldr	r3, [r7, #12]
  4025a8:	4313      	orrs	r3, r2
  4025aa:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE0, 2, data); /* burst write int_source0/int_source1 */
  4025ac:	f107 0308 	add.w	r3, r7, #8
  4025b0:	2202      	movs	r2, #2
  4025b2:	2165      	movs	r1, #101	; 0x65
  4025b4:	6878      	ldr	r0, [r7, #4]
  4025b6:	4c07      	ldr	r4, [pc, #28]	; (4025d4 <inv_icm426xx_set_config_int1+0x238>)
  4025b8:	47a0      	blx	r4
  4025ba:	4602      	mov	r2, r0
  4025bc:	68fb      	ldr	r3, [r7, #12]
  4025be:	4313      	orrs	r3, r2
  4025c0:	60fb      	str	r3, [r7, #12]

	return status;
  4025c2:	68fb      	ldr	r3, [r7, #12]
}
  4025c4:	4618      	mov	r0, r3
  4025c6:	3714      	adds	r7, #20
  4025c8:	46bd      	mov	sp, r7
  4025ca:	bd90      	pop	{r4, r7, pc}
  4025cc:	00403951 	.word	0x00403951
  4025d0:	00401695 	.word	0x00401695
  4025d4:	00403a1d 	.word	0x00403a1d

004025d8 <inv_icm426xx_get_data_from_fifo>:
	
	return status;
}

int inv_icm426xx_get_data_from_fifo(struct inv_icm426xx * s)
{
  4025d8:	b590      	push	{r4, r7, lr}
  4025da:	b091      	sub	sp, #68	; 0x44
  4025dc:	af00      	add	r7, sp, #0
  4025de:	6078      	str	r0, [r7, #4]
	int status = 0; 
  4025e0:	2300      	movs	r3, #0
  4025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t int_status;
	uint8_t data_reg = 0;
  4025e4:	2300      	movs	r3, #0
  4025e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t data[2];
	uint16_t packet_count_i, packet_count = 0;
  4025ea:	2300      	movs	r3, #0
  4025ec:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t packet_size = FIFO_HEADER_SIZE + FIFO_ACCEL_DATA_SIZE + FIFO_GYRO_DATA_SIZE + FIFO_TEMP_DATA_SIZE + FIFO_TS_FSYNC_SIZE;
  4025ee:	2310      	movs	r3, #16
  4025f0:	873b      	strh	r3, [r7, #56]	; 0x38
	fifo_header_t * header;

	/* Ensure data ready status bit is set */
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_STATUS, 1, &int_status);
  4025f2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
  4025f6:	2201      	movs	r2, #1
  4025f8:	212d      	movs	r1, #45	; 0x2d
  4025fa:	6878      	ldr	r0, [r7, #4]
  4025fc:	4c99      	ldr	r4, [pc, #612]	; (402864 <inv_icm426xx_get_data_from_fifo+0x28c>)
  4025fe:	47a0      	blx	r4
  402600:	4602      	mov	r2, r0
  402602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402604:	4313      	orrs	r3, r2
  402606:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(status)
  402608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40260a:	2b00      	cmp	r3, #0
  40260c:	d001      	beq.n	402612 <inv_icm426xx_get_data_from_fifo+0x3a>
		return status;
  40260e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402610:	e290      	b.n	402b34 <inv_icm426xx_get_data_from_fifo+0x55c>

	if((int_status & BIT_INT_STATUS_FIFO_THS) || (int_status & BIT_INT_STATUS_FIFO_FULL)) {
  402612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402616:	f003 0304 	and.w	r3, r3, #4
  40261a:	2b00      	cmp	r3, #0
  40261c:	d106      	bne.n	40262c <inv_icm426xx_get_data_from_fifo+0x54>
  40261e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402622:	f003 0302 	and.w	r3, r3, #2
  402626:	2b00      	cmp	r3, #0
  402628:	f000 8283 	beq.w	402b32 <inv_icm426xx_get_data_from_fifo+0x55a>
		
		/* FIFO record mode configured at driver init, so we read packet number, not byte count */
		status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_COUNTH, 2, data);
  40262c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  402630:	2202      	movs	r2, #2
  402632:	212e      	movs	r1, #46	; 0x2e
  402634:	6878      	ldr	r0, [r7, #4]
  402636:	4c8b      	ldr	r4, [pc, #556]	; (402864 <inv_icm426xx_get_data_from_fifo+0x28c>)
  402638:	47a0      	blx	r4
  40263a:	4602      	mov	r2, r0
  40263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40263e:	4313      	orrs	r3, r2
  402640:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(status != INV_ERROR_SUCCESS)
  402642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402644:	2b00      	cmp	r3, #0
  402646:	d001      	beq.n	40264c <inv_icm426xx_get_data_from_fifo+0x74>
			return status;
  402648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40264a:	e273      	b.n	402b34 <inv_icm426xx_get_data_from_fifo+0x55c>
		inv_icm426xx_format_data(ICM426XX_INTF_CONFIG0_DATA_LITTLE_ENDIAN, data, &packet_count);
  40264c:	f107 022a 	add.w	r2, r7, #42	; 0x2a
  402650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  402654:	4619      	mov	r1, r3
  402656:	2000      	movs	r0, #0
  402658:	4b83      	ldr	r3, [pc, #524]	; (402868 <inv_icm426xx_get_data_from_fifo+0x290>)
  40265a:	4798      	blx	r3

		if (packet_count > 0) {
  40265c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40265e:	2b00      	cmp	r3, #0
  402660:	f000 8267 	beq.w	402b32 <inv_icm426xx_get_data_from_fifo+0x55a>
			/* Read FIFO only when data is expected in FIFO */
			/* fifo_idx type variable must be large enough to parse the FIFO_MIRRORING_SIZE */
			uint16_t fifo_idx = 0;
  402664:	2300      	movs	r3, #0
  402666:	86fb      	strh	r3, [r7, #54]	; 0x36

			if(s->fifo_highres_enabled)
  402668:	687b      	ldr	r3, [r7, #4]
  40266a:	f893 3869 	ldrb.w	r3, [r3, #2153]	; 0x869
  40266e:	2b00      	cmp	r3, #0
  402670:	d001      	beq.n	402676 <inv_icm426xx_get_data_from_fifo+0x9e>
				packet_size = FIFO_20BYTES_PACKET_SIZE;
  402672:	2314      	movs	r3, #20
  402674:	873b      	strh	r3, [r7, #56]	; 0x38

			if(s->transport.serif.serif_type == ICM426XX_UI_I3C) {
  402676:	687b      	ldr	r3, [r7, #4]
  402678:	7e1b      	ldrb	r3, [r3, #24]
  40267a:	2b02      	cmp	r3, #2
  40267c:	d124      	bne.n	4026c8 <inv_icm426xx_get_data_from_fifo+0xf0>
				To handle this, 2 solution :
				- handle fifo lost packet & partial read
				- read packet by packet
				2nd solution prefered here because less heavy from driver point of view but it is less optimal
				for the timing because we have to initiate N transactions in any case */
				for(packet_count_i = 0 ; packet_count_i < packet_count ; packet_count_i++) {
  40267e:	2300      	movs	r3, #0
  402680:	877b      	strh	r3, [r7, #58]	; 0x3a
  402682:	e01c      	b.n	4026be <inv_icm426xx_get_data_from_fifo+0xe6>
					status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_DATA, packet_size, &s->fifo_data[packet_count_i*packet_size]);
  402684:	8f39      	ldrh	r1, [r7, #56]	; 0x38
  402686:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  402688:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
  40268a:	fb02 f303 	mul.w	r3, r2, r3
  40268e:	3340      	adds	r3, #64	; 0x40
  402690:	687a      	ldr	r2, [r7, #4]
  402692:	4413      	add	r3, r2
  402694:	3304      	adds	r3, #4
  402696:	460a      	mov	r2, r1
  402698:	2130      	movs	r1, #48	; 0x30
  40269a:	6878      	ldr	r0, [r7, #4]
  40269c:	4c71      	ldr	r4, [pc, #452]	; (402864 <inv_icm426xx_get_data_from_fifo+0x28c>)
  40269e:	47a0      	blx	r4
  4026a0:	4602      	mov	r2, r0
  4026a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4026a4:	4313      	orrs	r3, r2
  4026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
					if(status) {
  4026a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4026aa:	2b00      	cmp	r3, #0
  4026ac:	d004      	beq.n	4026b8 <inv_icm426xx_get_data_from_fifo+0xe0>
						/* sensor data is in FIFO according to FIFO_COUNT but failed to read FIFO,
							  reset FIFO and try next chance */
						inv_icm426xx_reset_fifo(s);
  4026ae:	6878      	ldr	r0, [r7, #4]
  4026b0:	4b6e      	ldr	r3, [pc, #440]	; (40286c <inv_icm426xx_get_data_from_fifo+0x294>)
  4026b2:	4798      	blx	r3
						return status;
  4026b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4026b6:	e23d      	b.n	402b34 <inv_icm426xx_get_data_from_fifo+0x55c>
				for(packet_count_i = 0 ; packet_count_i < packet_count ; packet_count_i++) {
  4026b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  4026ba:	3301      	adds	r3, #1
  4026bc:	877b      	strh	r3, [r7, #58]	; 0x3a
  4026be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4026c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  4026c2:	429a      	cmp	r2, r3
  4026c4:	d3de      	bcc.n	402684 <inv_icm426xx_get_data_from_fifo+0xac>
  4026c6:	e016      	b.n	4026f6 <inv_icm426xx_get_data_from_fifo+0x11e>
					}
				}
			} else {
				status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_DATA, packet_size * packet_count, s->fifo_data);
  4026c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  4026ca:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
  4026cc:	fb02 f303 	mul.w	r3, r2, r3
  4026d0:	461a      	mov	r2, r3
  4026d2:	687b      	ldr	r3, [r7, #4]
  4026d4:	3344      	adds	r3, #68	; 0x44
  4026d6:	2130      	movs	r1, #48	; 0x30
  4026d8:	6878      	ldr	r0, [r7, #4]
  4026da:	4c62      	ldr	r4, [pc, #392]	; (402864 <inv_icm426xx_get_data_from_fifo+0x28c>)
  4026dc:	47a0      	blx	r4
  4026de:	4602      	mov	r2, r0
  4026e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4026e2:	4313      	orrs	r3, r2
  4026e4:	63fb      	str	r3, [r7, #60]	; 0x3c
				if(status) {
  4026e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4026e8:	2b00      	cmp	r3, #0
  4026ea:	d004      	beq.n	4026f6 <inv_icm426xx_get_data_from_fifo+0x11e>
					/* sensor data is in FIFO according to FIFO_COUNT but failed to read FIFO,
						  reset FIFO and try next chance */
					inv_icm426xx_reset_fifo(s);
  4026ec:	6878      	ldr	r0, [r7, #4]
  4026ee:	4b5f      	ldr	r3, [pc, #380]	; (40286c <inv_icm426xx_get_data_from_fifo+0x294>)
  4026f0:	4798      	blx	r3
					return status;
  4026f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4026f4:	e21e      	b.n	402b34 <inv_icm426xx_get_data_from_fifo+0x55c>
				}
			}
			
			for(packet_count_i = 0; packet_count_i < packet_count; packet_count_i++) {
  4026f6:	2300      	movs	r3, #0
  4026f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  4026fa:	e215      	b.n	402b28 <inv_icm426xx_get_data_from_fifo+0x550>
				inv_icm426xx_sensor_event_t event;
				event.sensor_mask = 0;
  4026fc:	2300      	movs	r3, #0
  4026fe:	60fb      	str	r3, [r7, #12]
				
				header = (fifo_header_t *) &s->fifo_data[fifo_idx];
  402700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402702:	3340      	adds	r3, #64	; 0x40
  402704:	687a      	ldr	r2, [r7, #4]
  402706:	4413      	add	r3, r2
  402708:	3304      	adds	r3, #4
  40270a:	633b      	str	r3, [r7, #48]	; 0x30
				fifo_idx += FIFO_HEADER_SIZE;
  40270c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40270e:	3301      	adds	r3, #1
  402710:	86fb      	strh	r3, [r7, #54]	; 0x36
				
				/* Decode packet */
				if (header->bits.msg_bit) {
  402712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402714:	781b      	ldrb	r3, [r3, #0]
  402716:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40271a:	b2db      	uxtb	r3, r3
  40271c:	2b00      	cmp	r3, #0
  40271e:	d005      	beq.n	40272c <inv_icm426xx_get_data_from_fifo+0x154>
					/* MSG BIT set in FIFO header, Resetting FIFO */
					inv_icm426xx_reset_fifo(s);
  402720:	6878      	ldr	r0, [r7, #4]
  402722:	4b52      	ldr	r3, [pc, #328]	; (40286c <inv_icm426xx_get_data_from_fifo+0x294>)
  402724:	4798      	blx	r3
					return INV_ERROR;
  402726:	f04f 33ff 	mov.w	r3, #4294967295
  40272a:	e203      	b.n	402b34 <inv_icm426xx_get_data_from_fifo+0x55c>
				}

				if(header->bits.accel_bit) {
  40272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40272e:	781b      	ldrb	r3, [r3, #0]
  402730:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402734:	b2db      	uxtb	r3, r3
  402736:	2b00      	cmp	r3, #0
  402738:	d02e      	beq.n	402798 <inv_icm426xx_get_data_from_fifo+0x1c0>
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[0+fifo_idx], (uint16_t *)&event.accel[0]);
  40273a:	687b      	ldr	r3, [r7, #4]
  40273c:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  402740:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402742:	3340      	adds	r3, #64	; 0x40
  402744:	687a      	ldr	r2, [r7, #4]
  402746:	4413      	add	r3, r2
  402748:	1d19      	adds	r1, r3, #4
  40274a:	f107 030c 	add.w	r3, r7, #12
  40274e:	3306      	adds	r3, #6
  402750:	461a      	mov	r2, r3
  402752:	4b45      	ldr	r3, [pc, #276]	; (402868 <inv_icm426xx_get_data_from_fifo+0x290>)
  402754:	4798      	blx	r3
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[2+fifo_idx], (uint16_t *)&event.accel[1]);
  402756:	687b      	ldr	r3, [r7, #4]
  402758:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  40275c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40275e:	3302      	adds	r3, #2
  402760:	3340      	adds	r3, #64	; 0x40
  402762:	687a      	ldr	r2, [r7, #4]
  402764:	4413      	add	r3, r2
  402766:	1d19      	adds	r1, r3, #4
  402768:	f107 030c 	add.w	r3, r7, #12
  40276c:	3308      	adds	r3, #8
  40276e:	461a      	mov	r2, r3
  402770:	4b3d      	ldr	r3, [pc, #244]	; (402868 <inv_icm426xx_get_data_from_fifo+0x290>)
  402772:	4798      	blx	r3
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[4+fifo_idx], (uint16_t *)&event.accel[2]);
  402774:	687b      	ldr	r3, [r7, #4]
  402776:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  40277a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40277c:	3304      	adds	r3, #4
  40277e:	3340      	adds	r3, #64	; 0x40
  402780:	687a      	ldr	r2, [r7, #4]
  402782:	4413      	add	r3, r2
  402784:	1d19      	adds	r1, r3, #4
  402786:	f107 030c 	add.w	r3, r7, #12
  40278a:	330a      	adds	r3, #10
  40278c:	461a      	mov	r2, r3
  40278e:	4b36      	ldr	r3, [pc, #216]	; (402868 <inv_icm426xx_get_data_from_fifo+0x290>)
  402790:	4798      	blx	r3
					fifo_idx += FIFO_ACCEL_DATA_SIZE;
  402792:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402794:	3306      	adds	r3, #6
  402796:	86fb      	strh	r3, [r7, #54]	; 0x36
				}

				if (header->bits.gyro_bit) {
  402798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40279a:	781b      	ldrb	r3, [r3, #0]
  40279c:	f003 0320 	and.w	r3, r3, #32
  4027a0:	b2db      	uxtb	r3, r3
  4027a2:	2b00      	cmp	r3, #0
  4027a4:	d02e      	beq.n	402804 <inv_icm426xx_get_data_from_fifo+0x22c>
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[0+fifo_idx], (uint16_t *)&event.gyro[0]);
  4027a6:	687b      	ldr	r3, [r7, #4]
  4027a8:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  4027ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4027ae:	3340      	adds	r3, #64	; 0x40
  4027b0:	687a      	ldr	r2, [r7, #4]
  4027b2:	4413      	add	r3, r2
  4027b4:	1d19      	adds	r1, r3, #4
  4027b6:	f107 030c 	add.w	r3, r7, #12
  4027ba:	330c      	adds	r3, #12
  4027bc:	461a      	mov	r2, r3
  4027be:	4b2a      	ldr	r3, [pc, #168]	; (402868 <inv_icm426xx_get_data_from_fifo+0x290>)
  4027c0:	4798      	blx	r3
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[2+fifo_idx], (uint16_t *)&event.gyro[1]);
  4027c2:	687b      	ldr	r3, [r7, #4]
  4027c4:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  4027c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4027ca:	3302      	adds	r3, #2
  4027cc:	3340      	adds	r3, #64	; 0x40
  4027ce:	687a      	ldr	r2, [r7, #4]
  4027d0:	4413      	add	r3, r2
  4027d2:	1d19      	adds	r1, r3, #4
  4027d4:	f107 030c 	add.w	r3, r7, #12
  4027d8:	330e      	adds	r3, #14
  4027da:	461a      	mov	r2, r3
  4027dc:	4b22      	ldr	r3, [pc, #136]	; (402868 <inv_icm426xx_get_data_from_fifo+0x290>)
  4027de:	4798      	blx	r3
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[4+fifo_idx], (uint16_t *)&event.gyro[2]);
  4027e0:	687b      	ldr	r3, [r7, #4]
  4027e2:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  4027e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4027e8:	3304      	adds	r3, #4
  4027ea:	3340      	adds	r3, #64	; 0x40
  4027ec:	687a      	ldr	r2, [r7, #4]
  4027ee:	4413      	add	r3, r2
  4027f0:	1d19      	adds	r1, r3, #4
  4027f2:	f107 030c 	add.w	r3, r7, #12
  4027f6:	3310      	adds	r3, #16
  4027f8:	461a      	mov	r2, r3
  4027fa:	4b1b      	ldr	r3, [pc, #108]	; (402868 <inv_icm426xx_get_data_from_fifo+0x290>)
  4027fc:	4798      	blx	r3
					fifo_idx += FIFO_GYRO_DATA_SIZE;
  4027fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402800:	3306      	adds	r3, #6
  402802:	86fb      	strh	r3, [r7, #54]	; 0x36
				}

				if ((header->bits.accel_bit) || (header->bits.gyro_bit)) {
  402804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402806:	781b      	ldrb	r3, [r3, #0]
  402808:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40280c:	b2db      	uxtb	r3, r3
  40280e:	2b00      	cmp	r3, #0
  402810:	d106      	bne.n	402820 <inv_icm426xx_get_data_from_fifo+0x248>
  402812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402814:	781b      	ldrb	r3, [r3, #0]
  402816:	f003 0320 	and.w	r3, r3, #32
  40281a:	b2db      	uxtb	r3, r3
  40281c:	2b00      	cmp	r3, #0
  40281e:	d03b      	beq.n	402898 <inv_icm426xx_get_data_from_fifo+0x2c0>
					if(header->bits.twentybits_bit) {
  402820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402822:	781b      	ldrb	r3, [r3, #0]
  402824:	f003 0310 	and.w	r3, r3, #16
  402828:	b2db      	uxtb	r3, r3
  40282a:	2b00      	cmp	r3, #0
  40282c:	d020      	beq.n	402870 <inv_icm426xx_get_data_from_fifo+0x298>
						inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[0+fifo_idx], (uint16_t *)&event.temperature);
  40282e:	687b      	ldr	r3, [r7, #4]
  402830:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  402834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402836:	3340      	adds	r3, #64	; 0x40
  402838:	687a      	ldr	r2, [r7, #4]
  40283a:	4413      	add	r3, r2
  40283c:	1d19      	adds	r1, r3, #4
  40283e:	f107 030c 	add.w	r3, r7, #12
  402842:	3312      	adds	r3, #18
  402844:	461a      	mov	r2, r3
  402846:	4b08      	ldr	r3, [pc, #32]	; (402868 <inv_icm426xx_get_data_from_fifo+0x290>)
  402848:	4798      	blx	r3
						fifo_idx += FIFO_TEMP_DATA_SIZE + FIFO_TEMP_HIGH_RES_SIZE;
  40284a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40284c:	3302      	adds	r3, #2
  40284e:	86fb      	strh	r3, [r7, #54]	; 0x36

						/* new temperature data */
						if (event.temperature != INVALID_VALUE_FIFO)
  402850:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  402854:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  402858:	d01e      	beq.n	402898 <inv_icm426xx_get_data_from_fifo+0x2c0>
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_TEMPERATURE);
  40285a:	68fb      	ldr	r3, [r7, #12]
  40285c:	f043 0310 	orr.w	r3, r3, #16
  402860:	60fb      	str	r3, [r7, #12]
  402862:	e019      	b.n	402898 <inv_icm426xx_get_data_from_fifo+0x2c0>
  402864:	00403951 	.word	0x00403951
  402868:	00403831 	.word	0x00403831
  40286c:	00402dcd 	.word	0x00402dcd
					} else {
						event.temperature = (int8_t)s->fifo_data[0+fifo_idx]; /* cast to int8_t since FIFO is in 16 bits mode (temperature on 8 bits) */
  402870:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402872:	687a      	ldr	r2, [r7, #4]
  402874:	4413      	add	r3, r2
  402876:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  40287a:	b25b      	sxtb	r3, r3
  40287c:	b21b      	sxth	r3, r3
  40287e:	83fb      	strh	r3, [r7, #30]
						fifo_idx += FIFO_TEMP_DATA_SIZE;
  402880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402882:	3301      	adds	r3, #1
  402884:	86fb      	strh	r3, [r7, #54]	; 0x36

						/* new temperature data */
						if (event.temperature != INVALID_VALUE_FIFO_1B)
  402886:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  40288a:	f113 0f80 	cmn.w	r3, #128	; 0x80
  40288e:	d003      	beq.n	402898 <inv_icm426xx_get_data_from_fifo+0x2c0>
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_TEMPERATURE);
  402890:	68fb      	ldr	r3, [r7, #12]
  402892:	f043 0310 	orr.w	r3, r3, #16
  402896:	60fb      	str	r3, [r7, #12]
					}
				}

				if ((header->bits.timestamp_bit) || (header->bits.fsync_bit)) {
  402898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40289a:	781b      	ldrb	r3, [r3, #0]
  40289c:	f003 0308 	and.w	r3, r3, #8
  4028a0:	b2db      	uxtb	r3, r3
  4028a2:	2b00      	cmp	r3, #0
  4028a4:	d106      	bne.n	4028b4 <inv_icm426xx_get_data_from_fifo+0x2dc>
  4028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4028a8:	781b      	ldrb	r3, [r3, #0]
  4028aa:	f003 0304 	and.w	r3, r3, #4
  4028ae:	b2db      	uxtb	r3, r3
  4028b0:	2b00      	cmp	r3, #0
  4028b2:	d024      	beq.n	4028fe <inv_icm426xx_get_data_from_fifo+0x326>
					inv_icm426xx_format_data(s->endianess_data, &s->fifo_data[0+fifo_idx], (uint16_t *)&event.timestamp_fsync);
  4028b4:	687b      	ldr	r3, [r7, #4]
  4028b6:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  4028ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4028bc:	3340      	adds	r3, #64	; 0x40
  4028be:	687a      	ldr	r2, [r7, #4]
  4028c0:	4413      	add	r3, r2
  4028c2:	1d19      	adds	r1, r3, #4
  4028c4:	f107 030c 	add.w	r3, r7, #12
  4028c8:	3304      	adds	r3, #4
  4028ca:	461a      	mov	r2, r3
  4028cc:	4b9b      	ldr	r3, [pc, #620]	; (402b3c <inv_icm426xx_get_data_from_fifo+0x564>)
  4028ce:	4798      	blx	r3
					fifo_idx += FIFO_TS_FSYNC_SIZE;
  4028d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4028d2:	3302      	adds	r3, #2
  4028d4:	86fb      	strh	r3, [r7, #54]	; 0x36
					
					/* new fsync event */
					/* First FSYNC event after enable is irrelevant
					 * FSYNC tag and FSYNC data should be ignored on the first ODR after restart.
					 */
					if (header->bits.fsync_bit){
  4028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4028d8:	781b      	ldrb	r3, [r3, #0]
  4028da:	f003 0304 	and.w	r3, r3, #4
  4028de:	b2db      	uxtb	r3, r3
  4028e0:	2b00      	cmp	r3, #0
  4028e2:	d008      	beq.n	4028f6 <inv_icm426xx_get_data_from_fifo+0x31e>
						#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
						if(s->fsync_to_be_ignored == 0)
  4028e4:	687b      	ldr	r3, [r7, #4]
  4028e6:	f893 386b 	ldrb.w	r3, [r3, #2155]	; 0x86b
  4028ea:	2b00      	cmp	r3, #0
  4028ec:	d103      	bne.n	4028f6 <inv_icm426xx_get_data_from_fifo+0x31e>
						#endif
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_FSYNC_EVENT);
  4028ee:	68fb      	ldr	r3, [r7, #12]
  4028f0:	f043 0304 	orr.w	r3, r3, #4
  4028f4:	60fb      	str	r3, [r7, #12]
					}
					#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
					s->fsync_to_be_ignored = 0;
  4028f6:	687b      	ldr	r3, [r7, #4]
  4028f8:	2200      	movs	r2, #0
  4028fa:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
					#endif
				}
				
				if (header->bits.accel_bit) {
  4028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402900:	781b      	ldrb	r3, [r3, #0]
  402902:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402906:	b2db      	uxtb	r3, r3
  402908:	2b00      	cmp	r3, #0
  40290a:	d06c      	beq.n	4029e6 <inv_icm426xx_get_data_from_fifo+0x40e>
					if( (event.accel[0] != INVALID_VALUE_FIFO) &&
  40290c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
  402910:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  402914:	d067      	beq.n	4029e6 <inv_icm426xx_get_data_from_fifo+0x40e>
					    (event.accel[1] != INVALID_VALUE_FIFO) &&
  402916:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
					if( (event.accel[0] != INVALID_VALUE_FIFO) &&
  40291a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  40291e:	d062      	beq.n	4029e6 <inv_icm426xx_get_data_from_fifo+0x40e>
					    (event.accel[2] != INVALID_VALUE_FIFO) ) {
  402920:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
					    (event.accel[1] != INVALID_VALUE_FIFO) &&
  402924:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  402928:	d05d      	beq.n	4029e6 <inv_icm426xx_get_data_from_fifo+0x40e>

						if (header->bits.twentybits_bit) {
  40292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40292c:	781b      	ldrb	r3, [r3, #0]
  40292e:	f003 0310 	and.w	r3, r3, #16
  402932:	b2db      	uxtb	r3, r3
  402934:	2b00      	cmp	r3, #0
  402936:	d01f      	beq.n	402978 <inv_icm426xx_get_data_from_fifo+0x3a0>
							event.accel_high_res[0] = (s->fifo_data[0+fifo_idx] >> 4) & 0xF;
  402938:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40293a:	687a      	ldr	r2, [r7, #4]
  40293c:	4413      	add	r3, r2
  40293e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402942:	091b      	lsrs	r3, r3, #4
  402944:	b2db      	uxtb	r3, r3
  402946:	b25b      	sxtb	r3, r3
  402948:	f887 3020 	strb.w	r3, [r7, #32]
							event.accel_high_res[1] = (s->fifo_data[1+fifo_idx] >> 4) & 0xF;
  40294c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40294e:	3301      	adds	r3, #1
  402950:	687a      	ldr	r2, [r7, #4]
  402952:	4413      	add	r3, r2
  402954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402958:	091b      	lsrs	r3, r3, #4
  40295a:	b2db      	uxtb	r3, r3
  40295c:	b25b      	sxtb	r3, r3
  40295e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
							event.accel_high_res[2] = (s->fifo_data[2+fifo_idx] >> 4) & 0xF;
  402962:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402964:	3302      	adds	r3, #2
  402966:	687a      	ldr	r2, [r7, #4]
  402968:	4413      	add	r3, r2
  40296a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  40296e:	091b      	lsrs	r3, r3, #4
  402970:	b2db      	uxtb	r3, r3
  402972:	b25b      	sxtb	r3, r3
  402974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						}

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
						if (s->accel_start_time_us == UINT32_MAX) {
  402978:	687b      	ldr	r3, [r7, #4]
  40297a:	f503 6306 	add.w	r3, r3, #2144	; 0x860
  40297e:	e9d3 3400 	ldrd	r3, r4, [r3]
  402982:	2c00      	cmp	r4, #0
  402984:	bf08      	it	eq
  402986:	f1b3 3fff 	cmpeq.w	r3, #4294967295
  40298a:	d104      	bne.n	402996 <inv_icm426xx_get_data_from_fifo+0x3be>
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_ACCEL);
  40298c:	68fb      	ldr	r3, [r7, #12]
  40298e:	f043 0301 	orr.w	r3, r3, #1
  402992:	60fb      	str	r3, [r7, #12]
  402994:	e027      	b.n	4029e6 <inv_icm426xx_get_data_from_fifo+0x40e>
						} else {
							if (!header->bits.fsync_bit) {
  402996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402998:	781b      	ldrb	r3, [r3, #0]
  40299a:	f003 0304 	and.w	r3, r3, #4
  40299e:	b2db      	uxtb	r3, r3
  4029a0:	2b00      	cmp	r3, #0
  4029a2:	d120      	bne.n	4029e6 <inv_icm426xx_get_data_from_fifo+0x40e>
								/* First data are noisy after enabling sensor
								 * Compare start time with current time to notify the event
								 */
								if((inv_icm426xx_get_time_us() - s->accel_start_time_us) >= ICM426XX_ACC_STARTUP_TIME_US) {
  4029a4:	4b66      	ldr	r3, [pc, #408]	; (402b40 <inv_icm426xx_get_data_from_fifo+0x568>)
  4029a6:	4798      	blx	r3
  4029a8:	460a      	mov	r2, r1
  4029aa:	4601      	mov	r1, r0
  4029ac:	687b      	ldr	r3, [r7, #4]
  4029ae:	f503 6306 	add.w	r3, r3, #2144	; 0x860
  4029b2:	e9d3 3400 	ldrd	r3, r4, [r3]
  4029b6:	1acb      	subs	r3, r1, r3
  4029b8:	eb62 0404 	sbc.w	r4, r2, r4
  4029bc:	f644 611f 	movw	r1, #19999	; 0x4e1f
  4029c0:	f04f 0200 	mov.w	r2, #0
  4029c4:	42a2      	cmp	r2, r4
  4029c6:	bf08      	it	eq
  4029c8:	4299      	cmpeq	r1, r3
  4029ca:	d20c      	bcs.n	4029e6 <inv_icm426xx_get_data_from_fifo+0x40e>
									s->accel_start_time_us = UINT32_MAX;
  4029cc:	687b      	ldr	r3, [r7, #4]
  4029ce:	f503 6206 	add.w	r2, r3, #2144	; 0x860
  4029d2:	f04f 33ff 	mov.w	r3, #4294967295
  4029d6:	f04f 0400 	mov.w	r4, #0
  4029da:	e9c2 3400 	strd	r3, r4, [r2]
									event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_ACCEL);
  4029de:	68fb      	ldr	r3, [r7, #12]
  4029e0:	f043 0301 	orr.w	r3, r3, #1
  4029e4:	60fb      	str	r3, [r7, #12]
						event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_ACCEL);
#endif
					}
				}
				
				if (header->bits.gyro_bit) {
  4029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4029e8:	781b      	ldrb	r3, [r3, #0]
  4029ea:	f003 0320 	and.w	r3, r3, #32
  4029ee:	b2db      	uxtb	r3, r3
  4029f0:	2b00      	cmp	r3, #0
  4029f2:	d06f      	beq.n	402ad4 <inv_icm426xx_get_data_from_fifo+0x4fc>
					if( (event.gyro[0] != INVALID_VALUE_FIFO) &&
  4029f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
  4029f8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  4029fc:	d06a      	beq.n	402ad4 <inv_icm426xx_get_data_from_fifo+0x4fc>
					    (event.gyro[1] != INVALID_VALUE_FIFO) &&
  4029fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
					if( (event.gyro[0] != INVALID_VALUE_FIFO) &&
  402a02:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  402a06:	d065      	beq.n	402ad4 <inv_icm426xx_get_data_from_fifo+0x4fc>
					    (event.gyro[2] != INVALID_VALUE_FIFO) ) {
  402a08:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
					    (event.gyro[1] != INVALID_VALUE_FIFO) &&
  402a0c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  402a10:	d060      	beq.n	402ad4 <inv_icm426xx_get_data_from_fifo+0x4fc>

						if (header->bits.twentybits_bit) {
  402a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402a14:	781b      	ldrb	r3, [r3, #0]
  402a16:	f003 0310 	and.w	r3, r3, #16
  402a1a:	b2db      	uxtb	r3, r3
  402a1c:	2b00      	cmp	r3, #0
  402a1e:	d022      	beq.n	402a66 <inv_icm426xx_get_data_from_fifo+0x48e>
							event.gyro_high_res[0] = (s->fifo_data[0+fifo_idx]) & 0xF;
  402a20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402a22:	687a      	ldr	r2, [r7, #4]
  402a24:	4413      	add	r3, r2
  402a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402a2a:	b25b      	sxtb	r3, r3
  402a2c:	f003 030f 	and.w	r3, r3, #15
  402a30:	b25b      	sxtb	r3, r3
  402a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							event.gyro_high_res[1] = (s->fifo_data[1+fifo_idx]) & 0xF;
  402a36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402a38:	3301      	adds	r3, #1
  402a3a:	687a      	ldr	r2, [r7, #4]
  402a3c:	4413      	add	r3, r2
  402a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402a42:	b25b      	sxtb	r3, r3
  402a44:	f003 030f 	and.w	r3, r3, #15
  402a48:	b25b      	sxtb	r3, r3
  402a4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
							event.gyro_high_res[2] = (s->fifo_data[2+fifo_idx]) & 0xF;
  402a4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402a50:	3302      	adds	r3, #2
  402a52:	687a      	ldr	r2, [r7, #4]
  402a54:	4413      	add	r3, r2
  402a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  402a5a:	b25b      	sxtb	r3, r3
  402a5c:	f003 030f 	and.w	r3, r3, #15
  402a60:	b25b      	sxtb	r3, r3
  402a62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						}

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
						if (s->gyro_start_time_us == UINT32_MAX) {
  402a66:	687b      	ldr	r3, [r7, #4]
  402a68:	f603 0358 	addw	r3, r3, #2136	; 0x858
  402a6c:	e9d3 3400 	ldrd	r3, r4, [r3]
  402a70:	2c00      	cmp	r4, #0
  402a72:	bf08      	it	eq
  402a74:	f1b3 3fff 	cmpeq.w	r3, #4294967295
  402a78:	d104      	bne.n	402a84 <inv_icm426xx_get_data_from_fifo+0x4ac>
							event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_GYRO);
  402a7a:	68fb      	ldr	r3, [r7, #12]
  402a7c:	f043 0302 	orr.w	r3, r3, #2
  402a80:	60fb      	str	r3, [r7, #12]
  402a82:	e027      	b.n	402ad4 <inv_icm426xx_get_data_from_fifo+0x4fc>
						} else {
							if (!header->bits.fsync_bit) {
  402a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402a86:	781b      	ldrb	r3, [r3, #0]
  402a88:	f003 0304 	and.w	r3, r3, #4
  402a8c:	b2db      	uxtb	r3, r3
  402a8e:	2b00      	cmp	r3, #0
  402a90:	d120      	bne.n	402ad4 <inv_icm426xx_get_data_from_fifo+0x4fc>
								/* First data are noisy after enabling sensor
								 * Compare start time with current time to notify the event
								 */
								if((inv_icm426xx_get_time_us() - s->gyro_start_time_us) >= ICM426XX_GYR_STARTUP_TIME_US) {
  402a92:	4b2b      	ldr	r3, [pc, #172]	; (402b40 <inv_icm426xx_get_data_from_fifo+0x568>)
  402a94:	4798      	blx	r3
  402a96:	460a      	mov	r2, r1
  402a98:	4601      	mov	r1, r0
  402a9a:	687b      	ldr	r3, [r7, #4]
  402a9c:	f603 0358 	addw	r3, r3, #2136	; 0x858
  402aa0:	e9d3 3400 	ldrd	r3, r4, [r3]
  402aa4:	1acb      	subs	r3, r1, r3
  402aa6:	eb62 0404 	sbc.w	r4, r2, r4
  402aaa:	f64e 215f 	movw	r1, #59999	; 0xea5f
  402aae:	f04f 0200 	mov.w	r2, #0
  402ab2:	42a2      	cmp	r2, r4
  402ab4:	bf08      	it	eq
  402ab6:	4299      	cmpeq	r1, r3
  402ab8:	d20c      	bcs.n	402ad4 <inv_icm426xx_get_data_from_fifo+0x4fc>
									s->gyro_start_time_us = UINT32_MAX;
  402aba:	687b      	ldr	r3, [r7, #4]
  402abc:	f603 0258 	addw	r2, r3, #2136	; 0x858
  402ac0:	f04f 33ff 	mov.w	r3, #4294967295
  402ac4:	f04f 0400 	mov.w	r4, #0
  402ac8:	e9c2 3400 	strd	r3, r4, [r2]
									event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_GYRO);
  402acc:	68fb      	ldr	r3, [r7, #12]
  402ace:	f043 0302 	orr.w	r3, r3, #2
  402ad2:	60fb      	str	r3, [r7, #12]
						event.sensor_mask |= (1 << INV_ICM426XX_SENSOR_GYRO);
#endif
					}
				}

				if (header->bits.twentybits_bit)
  402ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402ad6:	781b      	ldrb	r3, [r3, #0]
  402ad8:	f003 0310 	and.w	r3, r3, #16
  402adc:	b2db      	uxtb	r3, r3
  402ade:	2b00      	cmp	r3, #0
  402ae0:	d002      	beq.n	402ae8 <inv_icm426xx_get_data_from_fifo+0x510>
					fifo_idx += FIFO_ACCEL_GYRO_HIGH_RES_SIZE;
  402ae2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  402ae4:	3303      	adds	r3, #3
  402ae6:	86fb      	strh	r3, [r7, #54]	; 0x36

				/* call sensor event callback */
				if(s->sensor_event_cb)
  402ae8:	687b      	ldr	r3, [r7, #4]
  402aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402aec:	2b00      	cmp	r3, #0
  402aee:	d005      	beq.n	402afc <inv_icm426xx_get_data_from_fifo+0x524>
					s->sensor_event_cb(&event);
  402af0:	687b      	ldr	r3, [r7, #4]
  402af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402af4:	f107 020c 	add.w	r2, r7, #12
  402af8:	4610      	mov	r0, r2
  402afa:	4798      	blx	r3

				/* Device interrupts delayed when communicating with other slaves connected to same bus 
				 * Semi-Write to release interrupt in I2C
				 */
				if((s->transport.serif.serif_type == ICM426XX_UI_I2C) || (s->transport.serif.serif_type == ICM426XX_UI_I3C)) {					
  402afc:	687b      	ldr	r3, [r7, #4]
  402afe:	7e1b      	ldrb	r3, [r3, #24]
  402b00:	2b00      	cmp	r3, #0
  402b02:	d003      	beq.n	402b0c <inv_icm426xx_get_data_from_fifo+0x534>
  402b04:	687b      	ldr	r3, [r7, #4]
  402b06:	7e1b      	ldrb	r3, [r3, #24]
  402b08:	2b02      	cmp	r3, #2
  402b0a:	d10a      	bne.n	402b22 <inv_icm426xx_get_data_from_fifo+0x54a>
					status |= inv_icm426xx_write_reg(s, MPUREG_WHO_AM_I, 1, &data_reg);
  402b0c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
  402b10:	2201      	movs	r2, #1
  402b12:	2175      	movs	r1, #117	; 0x75
  402b14:	6878      	ldr	r0, [r7, #4]
  402b16:	4c0b      	ldr	r4, [pc, #44]	; (402b44 <inv_icm426xx_get_data_from_fifo+0x56c>)
  402b18:	47a0      	blx	r4
  402b1a:	4602      	mov	r2, r0
  402b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402b1e:	4313      	orrs	r3, r2
  402b20:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(packet_count_i = 0; packet_count_i < packet_count; packet_count_i++) {
  402b22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  402b24:	3301      	adds	r3, #1
  402b26:	877b      	strh	r3, [r7, #58]	; 0x3a
  402b28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  402b2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  402b2c:	429a      	cmp	r2, r3
  402b2e:	f4ff ade5 	bcc.w	4026fc <inv_icm426xx_get_data_from_fifo+0x124>
		}
		/*else: packet_count was 0*/
	}
	/*else: FIFO threshold was not reached and FIFO was not full*/

	return packet_count;
  402b32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
  402b34:	4618      	mov	r0, r3
  402b36:	3744      	adds	r7, #68	; 0x44
  402b38:	46bd      	mov	sp, r7
  402b3a:	bd90      	pop	{r4, r7, pc}
  402b3c:	00403831 	.word	0x00403831
  402b40:	00401641 	.word	0x00401641
  402b44:	00403a1d 	.word	0x00403a1d

00402b48 <inv_icm426xx_convert_odr_bitfield_to_us>:

uint32_t inv_icm426xx_convert_odr_bitfield_to_us(uint32_t odr_bitfield)
{
  402b48:	b480      	push	{r7}
  402b4a:	b083      	sub	sp, #12
  402b4c:	af00      	add	r7, sp, #0
  402b4e:	6078      	str	r0, [r7, #4]
			13 - 3.125    : 320 ms
			14 - 1.5625   : 640 ms
			15 - 500      : 2 ms
		*/
	
	switch(odr_bitfield ) {
  402b50:	687b      	ldr	r3, [r7, #4]
  402b52:	3b01      	subs	r3, #1
  402b54:	2b0e      	cmp	r3, #14
  402b56:	d844      	bhi.n	402be2 <inv_icm426xx_convert_odr_bitfield_to_us+0x9a>
  402b58:	a201      	add	r2, pc, #4	; (adr r2, 402b60 <inv_icm426xx_convert_odr_bitfield_to_us+0x18>)
  402b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402b5e:	bf00      	nop
  402b60:	00402b9d 	.word	0x00402b9d
  402b64:	00402ba1 	.word	0x00402ba1
  402b68:	00402ba5 	.word	0x00402ba5
  402b6c:	00402ba9 	.word	0x00402ba9
  402b70:	00402bad 	.word	0x00402bad
  402b74:	00402bb3 	.word	0x00402bb3
  402b78:	00402bbf 	.word	0x00402bbf
  402b7c:	00402bc5 	.word	0x00402bc5
  402b80:	00402bcb 	.word	0x00402bcb
  402b84:	00402bd1 	.word	0x00402bd1
  402b88:	00402bd7 	.word	0x00402bd7
  402b8c:	00402bdb 	.word	0x00402bdb
  402b90:	00402bdf 	.word	0x00402bdf
  402b94:	00402be3 	.word	0x00402be3
  402b98:	00402bb9 	.word	0x00402bb9
		case ICM426XX_ACCEL_CONFIG0_ODR_32_KHZ:      return 32;
  402b9c:	2320      	movs	r3, #32
  402b9e:	e021      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_16_KHZ:      return 63;
  402ba0:	233f      	movs	r3, #63	; 0x3f
  402ba2:	e01f      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_8_KHZ:      return 125;
  402ba4:	237d      	movs	r3, #125	; 0x7d
  402ba6:	e01d      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_4_KHZ:      return 250;
  402ba8:	23fa      	movs	r3, #250	; 0xfa
  402baa:	e01b      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_2_KHZ:      return 500;
  402bac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  402bb0:	e018      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_1_KHZ:      return 1000;
  402bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402bb6:	e015      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_500_HZ:     return 2000;
  402bb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  402bbc:	e012      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_200_HZ:     return 5000;
  402bbe:	f241 3388 	movw	r3, #5000	; 0x1388
  402bc2:	e00f      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_100_HZ:     return 10000;
  402bc4:	f242 7310 	movw	r3, #10000	; 0x2710
  402bc8:	e00c      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_50_HZ:      return 20000;
  402bca:	f644 6320 	movw	r3, #20000	; 0x4e20
  402bce:	e009      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_25_HZ:      return 40000;
  402bd0:	f649 4340 	movw	r3, #40000	; 0x9c40
  402bd4:	e006      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_12_5_HZ:    return 80000;
  402bd6:	4b06      	ldr	r3, [pc, #24]	; (402bf0 <inv_icm426xx_convert_odr_bitfield_to_us+0xa8>)
  402bd8:	e004      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_6_25_HZ:    return 160000;
  402bda:	4b06      	ldr	r3, [pc, #24]	; (402bf4 <inv_icm426xx_convert_odr_bitfield_to_us+0xac>)
  402bdc:	e002      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_3_125_HZ:   return 320000;
  402bde:	4b06      	ldr	r3, [pc, #24]	; (402bf8 <inv_icm426xx_convert_odr_bitfield_to_us+0xb0>)
  402be0:	e000      	b.n	402be4 <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_1_5625_HZ:
		default:                                    return 640000;
  402be2:	4b06      	ldr	r3, [pc, #24]	; (402bfc <inv_icm426xx_convert_odr_bitfield_to_us+0xb4>)
	}
}
  402be4:	4618      	mov	r0, r3
  402be6:	370c      	adds	r7, #12
  402be8:	46bd      	mov	sp, r7
  402bea:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bee:	4770      	bx	lr
  402bf0:	00013880 	.word	0x00013880
  402bf4:	00027100 	.word	0x00027100
  402bf8:	0004e200 	.word	0x0004e200
  402bfc:	0009c400 	.word	0x0009c400

00402c00 <inv_icm426xx_set_accel_frequency>:

int inv_icm426xx_set_accel_frequency(struct inv_icm426xx * s, const ICM426XX_ACCEL_CONFIG0_ODR_t frequency)
{
  402c00:	b590      	push	{r4, r7, lr}
  402c02:	b085      	sub	sp, #20
  402c04:	af00      	add	r7, sp, #0
  402c06:	6078      	str	r0, [r7, #4]
  402c08:	460b      	mov	r3, r1
  402c0a:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402c0c:	2300      	movs	r3, #0
  402c0e:	60fb      	str	r3, [r7, #12]
	 * Update software counter to handle the overflow
	 */
	uint8_t pwr_mngt_0_reg;
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t accel_pwr_mode;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  402c10:	f107 0309 	add.w	r3, r7, #9
  402c14:	2201      	movs	r2, #1
  402c16:	214e      	movs	r1, #78	; 0x4e
  402c18:	6878      	ldr	r0, [r7, #4]
  402c1a:	4c1f      	ldr	r4, [pc, #124]	; (402c98 <inv_icm426xx_set_accel_frequency+0x98>)
  402c1c:	47a0      	blx	r4
  402c1e:	4602      	mov	r2, r0
  402c20:	68fb      	ldr	r3, [r7, #12]
  402c22:	4313      	orrs	r3, r2
  402c24:	60fb      	str	r3, [r7, #12]
	accel_pwr_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  402c26:	7a7b      	ldrb	r3, [r7, #9]
  402c28:	f003 0303 	and.w	r3, r3, #3
  402c2c:	72fb      	strb	r3, [r7, #11]
	if(ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP != accel_pwr_mode)
  402c2e:	7afb      	ldrb	r3, [r7, #11]
  402c30:	2b02      	cmp	r3, #2
  402c32:	d007      	beq.n	402c44 <inv_icm426xx_set_accel_frequency+0x44>
		s->wu_off_acc_odr_changes++; /* WUOSC is not clock source, this ODR change could be missed */
  402c34:	687b      	ldr	r3, [r7, #4]
  402c36:	f8d3 386c 	ldr.w	r3, [r3, #2156]	; 0x86c
  402c3a:	1c5a      	adds	r2, r3, #1
  402c3c:	687b      	ldr	r3, [r7, #4]
  402c3e:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  402c42:	e003      	b.n	402c4c <inv_icm426xx_set_accel_frequency+0x4c>
	else
		s->wu_off_acc_odr_changes = 0; /* WUOSC is on and acc is running, ODR change will be taken into account */
  402c44:	687b      	ldr	r3, [r7, #4]
  402c46:	2200      	movs	r2, #0
  402c48:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
#endif
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  402c4c:	f107 030a 	add.w	r3, r7, #10
  402c50:	2201      	movs	r2, #1
  402c52:	2150      	movs	r1, #80	; 0x50
  402c54:	6878      	ldr	r0, [r7, #4]
  402c56:	4c10      	ldr	r4, [pc, #64]	; (402c98 <inv_icm426xx_set_accel_frequency+0x98>)
  402c58:	47a0      	blx	r4
  402c5a:	4602      	mov	r2, r0
  402c5c:	68fb      	ldr	r3, [r7, #12]
  402c5e:	4313      	orrs	r3, r2
  402c60:	60fb      	str	r3, [r7, #12]
	accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_ODR_MASK;
  402c62:	7abb      	ldrb	r3, [r7, #10]
  402c64:	f023 030f 	bic.w	r3, r3, #15
  402c68:	b2db      	uxtb	r3, r3
  402c6a:	72bb      	strb	r3, [r7, #10]
	accel_cfg_0_reg |= (uint8_t)frequency;
  402c6c:	7aba      	ldrb	r2, [r7, #10]
  402c6e:	78fb      	ldrb	r3, [r7, #3]
  402c70:	4313      	orrs	r3, r2
  402c72:	b2db      	uxtb	r3, r3
  402c74:	72bb      	strb	r3, [r7, #10]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  402c76:	f107 030a 	add.w	r3, r7, #10
  402c7a:	2201      	movs	r2, #1
  402c7c:	2150      	movs	r1, #80	; 0x50
  402c7e:	6878      	ldr	r0, [r7, #4]
  402c80:	4c06      	ldr	r4, [pc, #24]	; (402c9c <inv_icm426xx_set_accel_frequency+0x9c>)
  402c82:	47a0      	blx	r4
  402c84:	4602      	mov	r2, r0
  402c86:	68fb      	ldr	r3, [r7, #12]
  402c88:	4313      	orrs	r3, r2
  402c8a:	60fb      	str	r3, [r7, #12]
	
	return status;
  402c8c:	68fb      	ldr	r3, [r7, #12]
}
  402c8e:	4618      	mov	r0, r3
  402c90:	3714      	adds	r7, #20
  402c92:	46bd      	mov	sp, r7
  402c94:	bd90      	pop	{r4, r7, pc}
  402c96:	bf00      	nop
  402c98:	00403951 	.word	0x00403951
  402c9c:	00403a1d 	.word	0x00403a1d

00402ca0 <inv_icm426xx_set_gyro_frequency>:

int inv_icm426xx_set_gyro_frequency(struct inv_icm426xx * s, const ICM426XX_GYRO_CONFIG0_ODR_t frequency)
{
  402ca0:	b590      	push	{r4, r7, lr}
  402ca2:	b085      	sub	sp, #20
  402ca4:	af00      	add	r7, sp, #0
  402ca6:	6078      	str	r0, [r7, #4]
  402ca8:	460b      	mov	r3, r1
  402caa:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402cac:	2300      	movs	r3, #0
  402cae:	60fb      	str	r3, [r7, #12]
	uint8_t gyro_cfg_0_reg;
	status |= inv_icm426xx_read_reg( s, MPUREG_GYRO_CONFIG0 , 1, &gyro_cfg_0_reg);
  402cb0:	f107 030b 	add.w	r3, r7, #11
  402cb4:	2201      	movs	r2, #1
  402cb6:	214f      	movs	r1, #79	; 0x4f
  402cb8:	6878      	ldr	r0, [r7, #4]
  402cba:	4c10      	ldr	r4, [pc, #64]	; (402cfc <inv_icm426xx_set_gyro_frequency+0x5c>)
  402cbc:	47a0      	blx	r4
  402cbe:	4602      	mov	r2, r0
  402cc0:	68fb      	ldr	r3, [r7, #12]
  402cc2:	4313      	orrs	r3, r2
  402cc4:	60fb      	str	r3, [r7, #12]
	gyro_cfg_0_reg &= (uint8_t)~BIT_GYRO_CONFIG0_ODR_MASK;
  402cc6:	7afb      	ldrb	r3, [r7, #11]
  402cc8:	f023 030f 	bic.w	r3, r3, #15
  402ccc:	b2db      	uxtb	r3, r3
  402cce:	72fb      	strb	r3, [r7, #11]
	gyro_cfg_0_reg |= (uint8_t)frequency;
  402cd0:	7afa      	ldrb	r2, [r7, #11]
  402cd2:	78fb      	ldrb	r3, [r7, #3]
  402cd4:	4313      	orrs	r3, r2
  402cd6:	b2db      	uxtb	r3, r3
  402cd8:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  402cda:	f107 030b 	add.w	r3, r7, #11
  402cde:	2201      	movs	r2, #1
  402ce0:	214f      	movs	r1, #79	; 0x4f
  402ce2:	6878      	ldr	r0, [r7, #4]
  402ce4:	4c06      	ldr	r4, [pc, #24]	; (402d00 <inv_icm426xx_set_gyro_frequency+0x60>)
  402ce6:	47a0      	blx	r4
  402ce8:	4602      	mov	r2, r0
  402cea:	68fb      	ldr	r3, [r7, #12]
  402cec:	4313      	orrs	r3, r2
  402cee:	60fb      	str	r3, [r7, #12]
	
	return status;
  402cf0:	68fb      	ldr	r3, [r7, #12]
}
  402cf2:	4618      	mov	r0, r3
  402cf4:	3714      	adds	r7, #20
  402cf6:	46bd      	mov	sp, r7
  402cf8:	bd90      	pop	{r4, r7, pc}
  402cfa:	bf00      	nop
  402cfc:	00403951 	.word	0x00403951
  402d00:	00403a1d 	.word	0x00403a1d

00402d04 <inv_icm426xx_set_accel_fsr>:

int inv_icm426xx_set_accel_fsr(struct inv_icm426xx * s, ICM426XX_ACCEL_CONFIG0_FS_SEL_t accel_fsr_g)
{
  402d04:	b590      	push	{r4, r7, lr}
  402d06:	b085      	sub	sp, #20
  402d08:	af00      	add	r7, sp, #0
  402d0a:	6078      	str	r0, [r7, #4]
  402d0c:	460b      	mov	r3, r1
  402d0e:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402d10:	2300      	movs	r3, #0
  402d12:	60fb      	str	r3, [r7, #12]
	uint8_t accel_cfg_0_reg;
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  402d14:	f107 030b 	add.w	r3, r7, #11
  402d18:	2201      	movs	r2, #1
  402d1a:	2150      	movs	r1, #80	; 0x50
  402d1c:	6878      	ldr	r0, [r7, #4]
  402d1e:	4c10      	ldr	r4, [pc, #64]	; (402d60 <inv_icm426xx_set_accel_fsr+0x5c>)
  402d20:	47a0      	blx	r4
  402d22:	4602      	mov	r2, r0
  402d24:	68fb      	ldr	r3, [r7, #12]
  402d26:	4313      	orrs	r3, r2
  402d28:	60fb      	str	r3, [r7, #12]
	accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_FS_SEL_MASK;
  402d2a:	7afb      	ldrb	r3, [r7, #11]
  402d2c:	f003 031f 	and.w	r3, r3, #31
  402d30:	b2db      	uxtb	r3, r3
  402d32:	72fb      	strb	r3, [r7, #11]
	accel_cfg_0_reg |= (uint8_t)accel_fsr_g;
  402d34:	7afa      	ldrb	r2, [r7, #11]
  402d36:	78fb      	ldrb	r3, [r7, #3]
  402d38:	4313      	orrs	r3, r2
  402d3a:	b2db      	uxtb	r3, r3
  402d3c:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  402d3e:	f107 030b 	add.w	r3, r7, #11
  402d42:	2201      	movs	r2, #1
  402d44:	2150      	movs	r1, #80	; 0x50
  402d46:	6878      	ldr	r0, [r7, #4]
  402d48:	4c06      	ldr	r4, [pc, #24]	; (402d64 <inv_icm426xx_set_accel_fsr+0x60>)
  402d4a:	47a0      	blx	r4
  402d4c:	4602      	mov	r2, r0
  402d4e:	68fb      	ldr	r3, [r7, #12]
  402d50:	4313      	orrs	r3, r2
  402d52:	60fb      	str	r3, [r7, #12]
	
	return status;
  402d54:	68fb      	ldr	r3, [r7, #12]
}
  402d56:	4618      	mov	r0, r3
  402d58:	3714      	adds	r7, #20
  402d5a:	46bd      	mov	sp, r7
  402d5c:	bd90      	pop	{r4, r7, pc}
  402d5e:	bf00      	nop
  402d60:	00403951 	.word	0x00403951
  402d64:	00403a1d 	.word	0x00403a1d

00402d68 <inv_icm426xx_set_gyro_fsr>:

int inv_icm426xx_set_gyro_fsr(struct inv_icm426xx * s, ICM426XX_GYRO_CONFIG0_FS_SEL_t gyro_fsr_dps)
{
  402d68:	b590      	push	{r4, r7, lr}
  402d6a:	b085      	sub	sp, #20
  402d6c:	af00      	add	r7, sp, #0
  402d6e:	6078      	str	r0, [r7, #4]
  402d70:	460b      	mov	r3, r1
  402d72:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  402d74:	2300      	movs	r3, #0
  402d76:	60fb      	str	r3, [r7, #12]
	uint8_t gyro_cfg_0_reg;
	status |= inv_icm426xx_read_reg( s, MPUREG_GYRO_CONFIG0 , 1, &gyro_cfg_0_reg);
  402d78:	f107 030b 	add.w	r3, r7, #11
  402d7c:	2201      	movs	r2, #1
  402d7e:	214f      	movs	r1, #79	; 0x4f
  402d80:	6878      	ldr	r0, [r7, #4]
  402d82:	4c10      	ldr	r4, [pc, #64]	; (402dc4 <inv_icm426xx_set_gyro_fsr+0x5c>)
  402d84:	47a0      	blx	r4
  402d86:	4602      	mov	r2, r0
  402d88:	68fb      	ldr	r3, [r7, #12]
  402d8a:	4313      	orrs	r3, r2
  402d8c:	60fb      	str	r3, [r7, #12]
	gyro_cfg_0_reg &= (uint8_t)~BIT_GYRO_CONFIG0_FS_SEL_MASK;
  402d8e:	7afb      	ldrb	r3, [r7, #11]
  402d90:	f003 031f 	and.w	r3, r3, #31
  402d94:	b2db      	uxtb	r3, r3
  402d96:	72fb      	strb	r3, [r7, #11]
	gyro_cfg_0_reg |= (uint8_t)gyro_fsr_dps;
  402d98:	7afa      	ldrb	r2, [r7, #11]
  402d9a:	78fb      	ldrb	r3, [r7, #3]
  402d9c:	4313      	orrs	r3, r2
  402d9e:	b2db      	uxtb	r3, r3
  402da0:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  402da2:	f107 030b 	add.w	r3, r7, #11
  402da6:	2201      	movs	r2, #1
  402da8:	214f      	movs	r1, #79	; 0x4f
  402daa:	6878      	ldr	r0, [r7, #4]
  402dac:	4c06      	ldr	r4, [pc, #24]	; (402dc8 <inv_icm426xx_set_gyro_fsr+0x60>)
  402dae:	47a0      	blx	r4
  402db0:	4602      	mov	r2, r0
  402db2:	68fb      	ldr	r3, [r7, #12]
  402db4:	4313      	orrs	r3, r2
  402db6:	60fb      	str	r3, [r7, #12]
	
	return status;
  402db8:	68fb      	ldr	r3, [r7, #12]
}
  402dba:	4618      	mov	r0, r3
  402dbc:	3714      	adds	r7, #20
  402dbe:	46bd      	mov	sp, r7
  402dc0:	bd90      	pop	{r4, r7, pc}
  402dc2:	bf00      	nop
  402dc4:	00403951 	.word	0x00403951
  402dc8:	00403a1d 	.word	0x00403a1d

00402dcc <inv_icm426xx_reset_fifo>:

	return status;
}

int inv_icm426xx_reset_fifo(struct inv_icm426xx * s)
{
  402dcc:	b590      	push	{r4, r7, lr}
  402dce:	b087      	sub	sp, #28
  402dd0:	af00      	add	r7, sp, #0
  402dd2:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t saved_fifo_config;
	int status = 0;
  402dd4:	2300      	movs	r3, #0
  402dd6:	617b      	str	r3, [r7, #20]
	uint8_t pwr_mngt_0_reg;
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t acc_mode;
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t gyr_mode;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  402dd8:	f107 030f 	add.w	r3, r7, #15
  402ddc:	2201      	movs	r2, #1
  402dde:	214e      	movs	r1, #78	; 0x4e
  402de0:	6878      	ldr	r0, [r7, #4]
  402de2:	4c2c      	ldr	r4, [pc, #176]	; (402e94 <inv_icm426xx_reset_fifo+0xc8>)
  402de4:	47a0      	blx	r4
  402de6:	4602      	mov	r2, r0
  402de8:	697b      	ldr	r3, [r7, #20]
  402dea:	4313      	orrs	r3, r2
  402dec:	617b      	str	r3, [r7, #20]
	gyr_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  402dee:	7bfb      	ldrb	r3, [r7, #15]
  402df0:	f003 030c 	and.w	r3, r3, #12
  402df4:	74fb      	strb	r3, [r7, #19]
	acc_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  402df6:	7bfb      	ldrb	r3, [r7, #15]
  402df8:	f003 0303 	and.w	r3, r3, #3
  402dfc:	74bb      	strb	r3, [r7, #18]
	
	if ( ( (gyr_mode != ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (acc_mode != ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF) )
  402dfe:	7cfb      	ldrb	r3, [r7, #19]
  402e00:	2b00      	cmp	r3, #0
  402e02:	d102      	bne.n	402e0a <inv_icm426xx_reset_fifo+0x3e>
  402e04:	7cbb      	ldrb	r3, [r7, #18]
  402e06:	2b00      	cmp	r3, #0
  402e08:	d010      	beq.n	402e2c <inv_icm426xx_reset_fifo+0x60>
		&& (acc_mode != ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) ) {
  402e0a:	7cbb      	ldrb	r3, [r7, #18]
  402e0c:	2b02      	cmp	r3, #2
  402e0e:	d00d      	beq.n	402e2c <inv_icm426xx_reset_fifo+0x60>
		data = (uint8_t)ICM426XX_SIGNAL_PATH_RESET_FIFO_FLUSH_EN;
  402e10:	2302      	movs	r3, #2
  402e12:	747b      	strb	r3, [r7, #17]
		status |= inv_icm426xx_write_reg(s, MPUREG_SIGNAL_PATH_RESET, 1, &data);
  402e14:	f107 0311 	add.w	r3, r7, #17
  402e18:	2201      	movs	r2, #1
  402e1a:	214b      	movs	r1, #75	; 0x4b
  402e1c:	6878      	ldr	r0, [r7, #4]
  402e1e:	4c1e      	ldr	r4, [pc, #120]	; (402e98 <inv_icm426xx_reset_fifo+0xcc>)
  402e20:	47a0      	blx	r4
  402e22:	4602      	mov	r2, r0
  402e24:	697b      	ldr	r3, [r7, #20]
  402e26:	4313      	orrs	r3, r2
  402e28:	617b      	str	r3, [r7, #20]
  402e2a:	e02d      	b.n	402e88 <inv_icm426xx_reset_fifo+0xbc>
	else {
		/* In case no sensor is enabled or in accel low power mode, change the FIFO_MODE to “bypass” (00) mode to force the FIFO reset,
		 * potentials remaining data will be flushed 
		 * Then proceed to a dummy read to released the FIFO reset synchronously with the serial clock
		 */
		status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG, 1, &saved_fifo_config);
  402e2c:	f107 0310 	add.w	r3, r7, #16
  402e30:	2201      	movs	r2, #1
  402e32:	2116      	movs	r1, #22
  402e34:	6878      	ldr	r0, [r7, #4]
  402e36:	4c17      	ldr	r4, [pc, #92]	; (402e94 <inv_icm426xx_reset_fifo+0xc8>)
  402e38:	47a0      	blx	r4
  402e3a:	4602      	mov	r2, r0
  402e3c:	697b      	ldr	r3, [r7, #20]
  402e3e:	4313      	orrs	r3, r2
  402e40:	617b      	str	r3, [r7, #20]
		data = (uint8_t)ICM426XX_FIFO_CONFIG_MODE_BYPASS;
  402e42:	2300      	movs	r3, #0
  402e44:	747b      	strb	r3, [r7, #17]
		status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  402e46:	f107 0311 	add.w	r3, r7, #17
  402e4a:	2201      	movs	r2, #1
  402e4c:	2116      	movs	r1, #22
  402e4e:	6878      	ldr	r0, [r7, #4]
  402e50:	4c11      	ldr	r4, [pc, #68]	; (402e98 <inv_icm426xx_reset_fifo+0xcc>)
  402e52:	47a0      	blx	r4
  402e54:	4602      	mov	r2, r0
  402e56:	697b      	ldr	r3, [r7, #20]
  402e58:	4313      	orrs	r3, r2
  402e5a:	617b      	str	r3, [r7, #20]
		status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &saved_fifo_config);
  402e5c:	f107 0310 	add.w	r3, r7, #16
  402e60:	2201      	movs	r2, #1
  402e62:	2116      	movs	r1, #22
  402e64:	6878      	ldr	r0, [r7, #4]
  402e66:	4c0c      	ldr	r4, [pc, #48]	; (402e98 <inv_icm426xx_reset_fifo+0xcc>)
  402e68:	47a0      	blx	r4
  402e6a:	4602      	mov	r2, r0
  402e6c:	697b      	ldr	r3, [r7, #20]
  402e6e:	4313      	orrs	r3, r2
  402e70:	617b      	str	r3, [r7, #20]
		status |= inv_icm426xx_read_reg(s, MPUREG_WHO_AM_I, 1, &data);
  402e72:	f107 0311 	add.w	r3, r7, #17
  402e76:	2201      	movs	r2, #1
  402e78:	2175      	movs	r1, #117	; 0x75
  402e7a:	6878      	ldr	r0, [r7, #4]
  402e7c:	4c05      	ldr	r4, [pc, #20]	; (402e94 <inv_icm426xx_reset_fifo+0xc8>)
  402e7e:	47a0      	blx	r4
  402e80:	4602      	mov	r2, r0
  402e82:	697b      	ldr	r3, [r7, #20]
  402e84:	4313      	orrs	r3, r2
  402e86:	617b      	str	r3, [r7, #20]
	}
	
	return status;
  402e88:	697b      	ldr	r3, [r7, #20]
}
  402e8a:	4618      	mov	r0, r3
  402e8c:	371c      	adds	r7, #28
  402e8e:	46bd      	mov	sp, r7
  402e90:	bd90      	pop	{r4, r7, pc}
  402e92:	bf00      	nop
  402e94:	00403951 	.word	0x00403951
  402e98:	00403a1d 	.word	0x00403a1d

00402e9c <inv_icm426xx_enable_timestamp_to_register>:

int inv_icm426xx_enable_timestamp_to_register(struct inv_icm426xx * s)
{
  402e9c:	b590      	push	{r4, r7, lr}
  402e9e:	b085      	sub	sp, #20
  402ea0:	af00      	add	r7, sp, #0
  402ea2:	6078      	str	r0, [r7, #4]
	int status = 0;
  402ea4:	2300      	movs	r3, #0
  402ea6:	60fb      	str	r3, [r7, #12]
	uint8_t tmst_cfg_reg;
	
	if(!s->tmst_to_reg_en_cnt) {
  402ea8:	687b      	ldr	r3, [r7, #4]
  402eaa:	f893 3854 	ldrb.w	r3, [r3, #2132]	; 0x854
  402eae:	2b00      	cmp	r3, #0
  402eb0:	d122      	bne.n	402ef8 <inv_icm426xx_enable_timestamp_to_register+0x5c>
		/* Enable the 20-bits timestamp register reading
		 * It's needed to wait at least 200us before doing the strobe 
		 */
		status |= inv_icm426xx_read_reg( s, MPUREG_TMST_CONFIG , 1, &tmst_cfg_reg);
  402eb2:	f107 030b 	add.w	r3, r7, #11
  402eb6:	2201      	movs	r2, #1
  402eb8:	2154      	movs	r1, #84	; 0x54
  402eba:	6878      	ldr	r0, [r7, #4]
  402ebc:	4c15      	ldr	r4, [pc, #84]	; (402f14 <inv_icm426xx_enable_timestamp_to_register+0x78>)
  402ebe:	47a0      	blx	r4
  402ec0:	4602      	mov	r2, r0
  402ec2:	68fb      	ldr	r3, [r7, #12]
  402ec4:	4313      	orrs	r3, r2
  402ec6:	60fb      	str	r3, [r7, #12]
		tmst_cfg_reg &= ~(uint8_t)BIT_TMST_CONFIG_TMST_TO_REGS_EN_MASK;
  402ec8:	7afb      	ldrb	r3, [r7, #11]
  402eca:	f023 0310 	bic.w	r3, r3, #16
  402ece:	b2db      	uxtb	r3, r3
  402ed0:	72fb      	strb	r3, [r7, #11]
		tmst_cfg_reg |= (uint8_t)ICM426XX_TMST_CONFIG_TMST_TO_REGS_EN;
  402ed2:	7afb      	ldrb	r3, [r7, #11]
  402ed4:	f043 0310 	orr.w	r3, r3, #16
  402ed8:	b2db      	uxtb	r3, r3
  402eda:	72fb      	strb	r3, [r7, #11]
		status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  402edc:	f107 030b 	add.w	r3, r7, #11
  402ee0:	2201      	movs	r2, #1
  402ee2:	2154      	movs	r1, #84	; 0x54
  402ee4:	6878      	ldr	r0, [r7, #4]
  402ee6:	4c0c      	ldr	r4, [pc, #48]	; (402f18 <inv_icm426xx_enable_timestamp_to_register+0x7c>)
  402ee8:	47a0      	blx	r4
  402eea:	4602      	mov	r2, r0
  402eec:	68fb      	ldr	r3, [r7, #12]
  402eee:	4313      	orrs	r3, r2
  402ef0:	60fb      	str	r3, [r7, #12]
		
		inv_icm426xx_sleep_us(200);
  402ef2:	20c8      	movs	r0, #200	; 0xc8
  402ef4:	4b09      	ldr	r3, [pc, #36]	; (402f1c <inv_icm426xx_enable_timestamp_to_register+0x80>)
  402ef6:	4798      	blx	r3
	}
	s->tmst_to_reg_en_cnt ++;
  402ef8:	687b      	ldr	r3, [r7, #4]
  402efa:	f893 3854 	ldrb.w	r3, [r3, #2132]	; 0x854
  402efe:	3301      	adds	r3, #1
  402f00:	b2da      	uxtb	r2, r3
  402f02:	687b      	ldr	r3, [r7, #4]
  402f04:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
	
	return status;
  402f08:	68fb      	ldr	r3, [r7, #12]
}
  402f0a:	4618      	mov	r0, r3
  402f0c:	3714      	adds	r7, #20
  402f0e:	46bd      	mov	sp, r7
  402f10:	bd90      	pop	{r4, r7, pc}
  402f12:	bf00      	nop
  402f14:	00403951 	.word	0x00403951
  402f18:	00403a1d 	.word	0x00403a1d
  402f1c:	00401679 	.word	0x00401679

00402f20 <inv_icm426xx_disable_timestamp_to_register>:

int inv_icm426xx_disable_timestamp_to_register(struct inv_icm426xx * s)
{
  402f20:	b590      	push	{r4, r7, lr}
  402f22:	b085      	sub	sp, #20
  402f24:	af00      	add	r7, sp, #0
  402f26:	6078      	str	r0, [r7, #4]
	int status = 0;
  402f28:	2300      	movs	r3, #0
  402f2a:	60fb      	str	r3, [r7, #12]
	uint8_t tmst_cfg_reg;

	if(!s->tmst_to_reg_en_cnt) {
  402f2c:	687b      	ldr	r3, [r7, #4]
  402f2e:	f893 3854 	ldrb.w	r3, [r3, #2132]	; 0x854
  402f32:	2b00      	cmp	r3, #0
  402f34:	d11c      	bne.n	402f70 <inv_icm426xx_disable_timestamp_to_register+0x50>
		/* Disable the 20-bits timestamp register reading */
		status |= inv_icm426xx_read_reg( s, MPUREG_TMST_CONFIG , 1, &tmst_cfg_reg);
  402f36:	f107 030b 	add.w	r3, r7, #11
  402f3a:	2201      	movs	r2, #1
  402f3c:	2154      	movs	r1, #84	; 0x54
  402f3e:	6878      	ldr	r0, [r7, #4]
  402f40:	4c12      	ldr	r4, [pc, #72]	; (402f8c <inv_icm426xx_disable_timestamp_to_register+0x6c>)
  402f42:	47a0      	blx	r4
  402f44:	4602      	mov	r2, r0
  402f46:	68fb      	ldr	r3, [r7, #12]
  402f48:	4313      	orrs	r3, r2
  402f4a:	60fb      	str	r3, [r7, #12]
		tmst_cfg_reg &= (uint8_t)~BIT_TMST_CONFIG_TMST_TO_REGS_EN_MASK;
  402f4c:	7afb      	ldrb	r3, [r7, #11]
  402f4e:	f023 0310 	bic.w	r3, r3, #16
  402f52:	b2db      	uxtb	r3, r3
  402f54:	72fb      	strb	r3, [r7, #11]
		tmst_cfg_reg |=(uint8_t) ICM426XX_TMST_CONFIG_TMST_TO_REGS_DIS;
  402f56:	7afb      	ldrb	r3, [r7, #11]
  402f58:	72fb      	strb	r3, [r7, #11]
		status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  402f5a:	f107 030b 	add.w	r3, r7, #11
  402f5e:	2201      	movs	r2, #1
  402f60:	2154      	movs	r1, #84	; 0x54
  402f62:	6878      	ldr	r0, [r7, #4]
  402f64:	4c0a      	ldr	r4, [pc, #40]	; (402f90 <inv_icm426xx_disable_timestamp_to_register+0x70>)
  402f66:	47a0      	blx	r4
  402f68:	4602      	mov	r2, r0
  402f6a:	68fb      	ldr	r3, [r7, #12]
  402f6c:	4313      	orrs	r3, r2
  402f6e:	60fb      	str	r3, [r7, #12]
	}
	s->tmst_to_reg_en_cnt --;
  402f70:	687b      	ldr	r3, [r7, #4]
  402f72:	f893 3854 	ldrb.w	r3, [r3, #2132]	; 0x854
  402f76:	3b01      	subs	r3, #1
  402f78:	b2da      	uxtb	r2, r3
  402f7a:	687b      	ldr	r3, [r7, #4]
  402f7c:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
	
	return status;
  402f80:	68fb      	ldr	r3, [r7, #12]
}
  402f82:	4618      	mov	r0, r3
  402f84:	3714      	adds	r7, #20
  402f86:	46bd      	mov	sp, r7
  402f88:	bd90      	pop	{r4, r7, pc}
  402f8a:	bf00      	nop
  402f8c:	00403951 	.word	0x00403951
  402f90:	00403a1d 	.word	0x00403a1d

00402f94 <inv_icm426xx_get_current_timestamp>:

int inv_icm426xx_get_current_timestamp(struct inv_icm426xx * s, uint32_t * icm_time)
{
  402f94:	b590      	push	{r4, r7, lr}
  402f96:	b085      	sub	sp, #20
  402f98:	af00      	add	r7, sp, #0
  402f9a:	6078      	str	r0, [r7, #4]
  402f9c:	6039      	str	r1, [r7, #0]
	int status = 0;
  402f9e:	2300      	movs	r3, #0
  402fa0:	60fb      	str	r3, [r7, #12]
	uint8_t data[3];
	
	/* Enable timestamp counter to be latched in timestamp register */
	data[0] = (uint8_t)ICM426XX_SIGNAL_PATH_RESET_TMST_STROBE_EN;
  402fa2:	2304      	movs	r3, #4
  402fa4:	723b      	strb	r3, [r7, #8]
	status |= inv_icm426xx_write_reg(s, MPUREG_SIGNAL_PATH_RESET, 1, &data[0]);
  402fa6:	f107 0308 	add.w	r3, r7, #8
  402faa:	2201      	movs	r2, #1
  402fac:	214b      	movs	r1, #75	; 0x4b
  402fae:	6878      	ldr	r0, [r7, #4]
  402fb0:	4c18      	ldr	r4, [pc, #96]	; (403014 <inv_icm426xx_get_current_timestamp+0x80>)
  402fb2:	47a0      	blx	r4
  402fb4:	4602      	mov	r2, r0
  402fb6:	68fb      	ldr	r3, [r7, #12]
  402fb8:	4313      	orrs	r3, r2
  402fba:	60fb      	str	r3, [r7, #12]
	
	/* Get ICM timestamp */
	status |= inv_icm426xx_set_reg_bank(s, 1);
  402fbc:	2101      	movs	r1, #1
  402fbe:	6878      	ldr	r0, [r7, #4]
  402fc0:	4b15      	ldr	r3, [pc, #84]	; (403018 <inv_icm426xx_get_current_timestamp+0x84>)
  402fc2:	4798      	blx	r3
  402fc4:	4602      	mov	r2, r0
  402fc6:	68fb      	ldr	r3, [r7, #12]
  402fc8:	4313      	orrs	r3, r2
  402fca:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_VAL0_B1, 3, data);
  402fcc:	f107 0308 	add.w	r3, r7, #8
  402fd0:	2203      	movs	r2, #3
  402fd2:	2162      	movs	r1, #98	; 0x62
  402fd4:	6878      	ldr	r0, [r7, #4]
  402fd6:	4c11      	ldr	r4, [pc, #68]	; (40301c <inv_icm426xx_get_current_timestamp+0x88>)
  402fd8:	47a0      	blx	r4
  402fda:	4602      	mov	r2, r0
  402fdc:	68fb      	ldr	r3, [r7, #12]
  402fde:	4313      	orrs	r3, r2
  402fe0:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  402fe2:	2100      	movs	r1, #0
  402fe4:	6878      	ldr	r0, [r7, #4]
  402fe6:	4b0c      	ldr	r3, [pc, #48]	; (403018 <inv_icm426xx_get_current_timestamp+0x84>)
  402fe8:	4798      	blx	r3
  402fea:	4602      	mov	r2, r0
  402fec:	68fb      	ldr	r3, [r7, #12]
  402fee:	4313      	orrs	r3, r2
  402ff0:	60fb      	str	r3, [r7, #12]
	*icm_time = ((uint32_t)(data[2] & 0x0F) << 16) + ((uint32_t)data[1] << 8) + data[0];
  402ff2:	7abb      	ldrb	r3, [r7, #10]
  402ff4:	041b      	lsls	r3, r3, #16
  402ff6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
  402ffa:	7a7b      	ldrb	r3, [r7, #9]
  402ffc:	021b      	lsls	r3, r3, #8
  402ffe:	4413      	add	r3, r2
  403000:	7a3a      	ldrb	r2, [r7, #8]
  403002:	441a      	add	r2, r3
  403004:	683b      	ldr	r3, [r7, #0]
  403006:	601a      	str	r2, [r3, #0]
	
	return status;
  403008:	68fb      	ldr	r3, [r7, #12]
}
  40300a:	4618      	mov	r0, r3
  40300c:	3714      	adds	r7, #20
  40300e:	46bd      	mov	sp, r7
  403010:	bd90      	pop	{r4, r7, pc}
  403012:	bf00      	nop
  403014:	00403a1d 	.word	0x00403a1d
  403018:	00401695 	.word	0x00401695
  40301c:	00403951 	.word	0x00403951

00403020 <inv_icm426xx_get_clkin_rtc_status>:
	
	return status;
}

int inv_icm426xx_get_clkin_rtc_status(struct inv_icm426xx * s)
{
  403020:	b590      	push	{r4, r7, lr}
  403022:	b085      	sub	sp, #20
  403024:	af00      	add	r7, sp, #0
  403026:	6078      	str	r0, [r7, #4]
	uint8_t data;
	int status=0;
  403028:	2300      	movs	r3, #0
  40302a:	60fb      	str	r3, [r7, #12]
	
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  40302c:	f107 030b 	add.w	r3, r7, #11
  403030:	2201      	movs	r2, #1
  403032:	214d      	movs	r1, #77	; 0x4d
  403034:	6878      	ldr	r0, [r7, #4]
  403036:	4c09      	ldr	r4, [pc, #36]	; (40305c <inv_icm426xx_get_clkin_rtc_status+0x3c>)
  403038:	47a0      	blx	r4
  40303a:	4602      	mov	r2, r0
  40303c:	68fb      	ldr	r3, [r7, #12]
  40303e:	4313      	orrs	r3, r2
  403040:	60fb      	str	r3, [r7, #12]
	if ((data & BIT_RTC_MODE_MASK) == ICM426XX_INTF_CONFIG1_RTC_MODE_EN)
  403042:	7afb      	ldrb	r3, [r7, #11]
  403044:	f003 0304 	and.w	r3, r3, #4
  403048:	2b00      	cmp	r3, #0
  40304a:	d001      	beq.n	403050 <inv_icm426xx_get_clkin_rtc_status+0x30>
		return 1;
  40304c:	2301      	movs	r3, #1
  40304e:	e000      	b.n	403052 <inv_icm426xx_get_clkin_rtc_status+0x32>
	else
		return 0;
  403050:	2300      	movs	r3, #0
}
  403052:	4618      	mov	r0, r3
  403054:	3714      	adds	r7, #20
  403056:	46bd      	mov	sp, r7
  403058:	bd90      	pop	{r4, r7, pc}
  40305a:	bf00      	nop
  40305c:	00403951 	.word	0x00403951

00403060 <inv_icm426xx_disable_high_resolution_fifo>:
	
	return 0;
}

int inv_icm426xx_disable_high_resolution_fifo(struct inv_icm426xx * s)
{
  403060:	b480      	push	{r7}
  403062:	b083      	sub	sp, #12
  403064:	af00      	add	r7, sp, #0
  403066:	6078      	str	r0, [r7, #4]
	data |= (uint8_t)~BIT_FIFO_CONFIG1_HIRES_MASK; /* == ICM426XX_FIFO_CONFIG1_HIRES_DIS */
	status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
#endif

	/* set FIFO packets to 16bit format (i.e. high res is disabled) */
	s->fifo_highres_enabled = 0;
  403068:	687b      	ldr	r3, [r7, #4]
  40306a:	2200      	movs	r2, #0
  40306c:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
	
	return 0;
  403070:	2300      	movs	r3, #0
}
  403072:	4618      	mov	r0, r3
  403074:	370c      	adds	r7, #12
  403076:	46bd      	mov	sp, r7
  403078:	f85d 7b04 	ldr.w	r7, [sp], #4
  40307c:	4770      	bx	lr
	...

00403080 <inv_icm426xx_configure_fifo>:

int inv_icm426xx_configure_fifo(struct inv_icm426xx * s, INV_ICM426XX_FIFO_CONFIG_t fifo_config)
{
  403080:	b590      	push	{r4, r7, lr}
  403082:	b089      	sub	sp, #36	; 0x24
  403084:	af00      	add	r7, sp, #0
  403086:	6078      	str	r0, [r7, #4]
  403088:	460b      	mov	r3, r1
  40308a:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  40308c:	2300      	movs	r3, #0
  40308e:	61fb      	str	r3, [r7, #28]
	uint8_t data;
	inv_icm426xx_interrupt_parameter_t config_int = {(inv_icm426xx_interrupt_value)0};
  403090:	f107 030c 	add.w	r3, r7, #12
  403094:	2200      	movs	r2, #0
  403096:	601a      	str	r2, [r3, #0]
  403098:	605a      	str	r2, [r3, #4]
  40309a:	609a      	str	r2, [r3, #8]
  40309c:	819a      	strh	r2, [r3, #12]
	
	s->fifo_is_used = fifo_config;
  40309e:	687b      	ldr	r3, [r7, #4]
  4030a0:	78fa      	ldrb	r2, [r7, #3]
  4030a2:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
	
	switch (fifo_config) {
  4030a6:	78fb      	ldrb	r3, [r7, #3]
  4030a8:	2b00      	cmp	r3, #0
  4030aa:	f000 8094 	beq.w	4031d6 <inv_icm426xx_configure_fifo+0x156>
  4030ae:	2b01      	cmp	r3, #1
  4030b0:	f040 80d5 	bne.w	40325e <inv_icm426xx_configure_fifo+0x1de>
			 * - FIFO record mode i.e FIFO count unit is packet 
			 * - FIFO snapshot mode i.e drop the data when the FIFO overflows
			 * - Timestamp is logged in FIFO
			 * - Little Endian fifo_count
			*/
			status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data);
  4030b4:	f107 031b 	add.w	r3, r7, #27
  4030b8:	2201      	movs	r2, #1
  4030ba:	214c      	movs	r1, #76	; 0x4c
  4030bc:	6878      	ldr	r0, [r7, #4]
  4030be:	4c6c      	ldr	r4, [pc, #432]	; (403270 <inv_icm426xx_configure_fifo+0x1f0>)
  4030c0:	47a0      	blx	r4
  4030c2:	4602      	mov	r2, r0
  4030c4:	69fb      	ldr	r3, [r7, #28]
  4030c6:	4313      	orrs	r3, r2
  4030c8:	61fb      	str	r3, [r7, #28]
			data |= (uint8_t)ICM426XX_INTF_CONFIG0_FIFO_COUNT_REC_RECORD;
  4030ca:	7efb      	ldrb	r3, [r7, #27]
  4030cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4030d0:	b2db      	uxtb	r3, r3
  4030d2:	76fb      	strb	r3, [r7, #27]
			data &= (uint8_t)~BIT_FIFO_COUNT_ENDIAN_MASK; // little endian
  4030d4:	7efb      	ldrb	r3, [r7, #27]
  4030d6:	f023 0320 	bic.w	r3, r3, #32
  4030da:	b2db      	uxtb	r3, r3
  4030dc:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG0, 1, &data);
  4030de:	f107 031b 	add.w	r3, r7, #27
  4030e2:	2201      	movs	r2, #1
  4030e4:	214c      	movs	r1, #76	; 0x4c
  4030e6:	6878      	ldr	r0, [r7, #4]
  4030e8:	4c62      	ldr	r4, [pc, #392]	; (403274 <inv_icm426xx_configure_fifo+0x1f4>)
  4030ea:	47a0      	blx	r4
  4030ec:	4602      	mov	r2, r0
  4030ee:	69fb      	ldr	r3, [r7, #28]
  4030f0:	4313      	orrs	r3, r2
  4030f2:	61fb      	str	r3, [r7, #28]
			data = (uint8_t)ICM426XX_FIFO_CONFIG_MODE_STOP_ON_FULL;
  4030f4:	2380      	movs	r3, #128	; 0x80
  4030f6:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  4030f8:	f107 031b 	add.w	r3, r7, #27
  4030fc:	2201      	movs	r2, #1
  4030fe:	2116      	movs	r1, #22
  403100:	6878      	ldr	r0, [r7, #4]
  403102:	4c5c      	ldr	r4, [pc, #368]	; (403274 <inv_icm426xx_configure_fifo+0x1f4>)
  403104:	47a0      	blx	r4
  403106:	4602      	mov	r2, r0
  403108:	69fb      	ldr	r3, [r7, #28]
  40310a:	4313      	orrs	r3, r2
  40310c:	61fb      	str	r3, [r7, #28]
			status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &data);
  40310e:	f107 031b 	add.w	r3, r7, #27
  403112:	2201      	movs	r2, #1
  403114:	2154      	movs	r1, #84	; 0x54
  403116:	6878      	ldr	r0, [r7, #4]
  403118:	4c55      	ldr	r4, [pc, #340]	; (403270 <inv_icm426xx_configure_fifo+0x1f0>)
  40311a:	47a0      	blx	r4
  40311c:	4602      	mov	r2, r0
  40311e:	69fb      	ldr	r3, [r7, #28]
  403120:	4313      	orrs	r3, r2
  403122:	61fb      	str	r3, [r7, #28]
			data |= ICM426XX_TMST_CONFIG_TMST_EN;
  403124:	7efb      	ldrb	r3, [r7, #27]
  403126:	f043 0301 	orr.w	r3, r3, #1
  40312a:	b2db      	uxtb	r3, r3
  40312c:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &data);
  40312e:	f107 031b 	add.w	r3, r7, #27
  403132:	2201      	movs	r2, #1
  403134:	2154      	movs	r1, #84	; 0x54
  403136:	6878      	ldr	r0, [r7, #4]
  403138:	4c4e      	ldr	r4, [pc, #312]	; (403274 <inv_icm426xx_configure_fifo+0x1f4>)
  40313a:	47a0      	blx	r4
  40313c:	4602      	mov	r2, r0
  40313e:	69fb      	ldr	r3, [r7, #28]
  403140:	4313      	orrs	r3, r2
  403142:	61fb      	str	r3, [r7, #28]

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
			/* restart and reset FIFO configuration */
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  403144:	f107 031b 	add.w	r3, r7, #27
  403148:	2201      	movs	r2, #1
  40314a:	215f      	movs	r1, #95	; 0x5f
  40314c:	6878      	ldr	r0, [r7, #4]
  40314e:	4c48      	ldr	r4, [pc, #288]	; (403270 <inv_icm426xx_configure_fifo+0x1f0>)
  403150:	47a0      	blx	r4
  403152:	4602      	mov	r2, r0
  403154:	69fb      	ldr	r3, [r7, #28]
  403156:	4313      	orrs	r3, r2
  403158:	61fb      	str	r3, [r7, #28]
			data &= (uint8_t)~(BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_ACCEL_MASK);
  40315a:	7efb      	ldrb	r3, [r7, #27]
  40315c:	f023 0303 	bic.w	r3, r3, #3
  403160:	b2db      	uxtb	r3, r3
  403162:	76fb      	strb	r3, [r7, #27]
			data |= (BIT_FIFO_CONFIG1_TEMP_MASK | BIT_FIFO_CONFIG1_TMST_FSYNC_MASK);
  403164:	7efb      	ldrb	r3, [r7, #27]
  403166:	f043 030c 	orr.w	r3, r3, #12
  40316a:	b2db      	uxtb	r3, r3
  40316c:	76fb      	strb	r3, [r7, #27]
#else
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
			data |= (BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_ACCEL_MASK | BIT_FIFO_CONFIG1_TEMP_MASK | BIT_FIFO_CONFIG1_TMST_FSYNC_MASK);
#endif
			/* Set fifo_wm_int_w generating condition : fifo_wm_int_w generated when counter >= threshold */
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_WM_GT_TH_EN;
  40316e:	7efb      	ldrb	r3, [r7, #27]
  403170:	f043 0320 	orr.w	r3, r3, #32
  403174:	b2db      	uxtb	r3, r3
  403176:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  403178:	f107 031b 	add.w	r3, r7, #27
  40317c:	2201      	movs	r2, #1
  40317e:	215f      	movs	r1, #95	; 0x5f
  403180:	6878      	ldr	r0, [r7, #4]
  403182:	4c3c      	ldr	r4, [pc, #240]	; (403274 <inv_icm426xx_configure_fifo+0x1f4>)
  403184:	47a0      	blx	r4
  403186:	4602      	mov	r2, r0
  403188:	69fb      	ldr	r3, [r7, #28]
  40318a:	4313      	orrs	r3, r2
  40318c:	61fb      	str	r3, [r7, #28]
			/* Configure FIFO WM so that INT is triggered for each packet */
			data = 0x1;
  40318e:	2301      	movs	r3, #1
  403190:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG2, 1, &data);
  403192:	f107 031b 	add.w	r3, r7, #27
  403196:	2201      	movs	r2, #1
  403198:	2160      	movs	r1, #96	; 0x60
  40319a:	6878      	ldr	r0, [r7, #4]
  40319c:	4c35      	ldr	r4, [pc, #212]	; (403274 <inv_icm426xx_configure_fifo+0x1f4>)
  40319e:	47a0      	blx	r4
  4031a0:	4602      	mov	r2, r0
  4031a2:	69fb      	ldr	r3, [r7, #28]
  4031a4:	4313      	orrs	r3, r2
  4031a6:	61fb      	str	r3, [r7, #28]

			/* Disable Data Ready Interrupt */
			status |= inv_icm426xx_get_config_int1(s, &config_int);
  4031a8:	f107 030c 	add.w	r3, r7, #12
  4031ac:	4619      	mov	r1, r3
  4031ae:	6878      	ldr	r0, [r7, #4]
  4031b0:	4b31      	ldr	r3, [pc, #196]	; (403278 <inv_icm426xx_configure_fifo+0x1f8>)
  4031b2:	4798      	blx	r3
  4031b4:	4602      	mov	r2, r0
  4031b6:	69fb      	ldr	r3, [r7, #28]
  4031b8:	4313      	orrs	r3, r2
  4031ba:	61fb      	str	r3, [r7, #28]
			config_int.INV_ICM426XX_UI_DRDY = INV_ICM426XX_DISABLE;
  4031bc:	2300      	movs	r3, #0
  4031be:	737b      	strb	r3, [r7, #13]
			status |= inv_icm426xx_set_config_int1(s, &config_int);
  4031c0:	f107 030c 	add.w	r3, r7, #12
  4031c4:	4619      	mov	r1, r3
  4031c6:	6878      	ldr	r0, [r7, #4]
  4031c8:	4b2c      	ldr	r3, [pc, #176]	; (40327c <inv_icm426xx_configure_fifo+0x1fc>)
  4031ca:	4798      	blx	r3
  4031cc:	4602      	mov	r2, r0
  4031ce:	69fb      	ldr	r3, [r7, #28]
  4031d0:	4313      	orrs	r3, r2
  4031d2:	61fb      	str	r3, [r7, #28]
			break;
  4031d4:	e046      	b.n	403264 <inv_icm426xx_configure_fifo+0x1e4>
		
		case INV_ICM426XX_FIFO_DISABLED :
			/* make sure FIFO is disabled */
			data = ICM426XX_FIFO_CONFIG_MODE_BYPASS;
  4031d6:	2300      	movs	r3, #0
  4031d8:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  4031da:	f107 031b 	add.w	r3, r7, #27
  4031de:	2201      	movs	r2, #1
  4031e0:	2116      	movs	r1, #22
  4031e2:	6878      	ldr	r0, [r7, #4]
  4031e4:	4c23      	ldr	r4, [pc, #140]	; (403274 <inv_icm426xx_configure_fifo+0x1f4>)
  4031e6:	47a0      	blx	r4
  4031e8:	4602      	mov	r2, r0
  4031ea:	69fb      	ldr	r3, [r7, #28]
  4031ec:	4313      	orrs	r3, r2
  4031ee:	61fb      	str	r3, [r7, #28]
			
			/* restart and reset FIFO configuration */
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  4031f0:	f107 031b 	add.w	r3, r7, #27
  4031f4:	2201      	movs	r2, #1
  4031f6:	215f      	movs	r1, #95	; 0x5f
  4031f8:	6878      	ldr	r0, [r7, #4]
  4031fa:	4c1d      	ldr	r4, [pc, #116]	; (403270 <inv_icm426xx_configure_fifo+0x1f0>)
  4031fc:	47a0      	blx	r4
  4031fe:	4602      	mov	r2, r0
  403200:	69fb      	ldr	r3, [r7, #28]
  403202:	4313      	orrs	r3, r2
  403204:	61fb      	str	r3, [r7, #28]
			data &= (uint8_t)~(BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_ACCEL_MASK);
  403206:	7efb      	ldrb	r3, [r7, #27]
  403208:	f023 0303 	bic.w	r3, r3, #3
  40320c:	b2db      	uxtb	r3, r3
  40320e:	76fb      	strb	r3, [r7, #27]
			data |= (BIT_FIFO_CONFIG1_TEMP_MASK | BIT_FIFO_CONFIG1_TMST_FSYNC_MASK);
  403210:	7efb      	ldrb	r3, [r7, #27]
  403212:	f043 030c 	orr.w	r3, r3, #12
  403216:	b2db      	uxtb	r3, r3
  403218:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  40321a:	f107 031b 	add.w	r3, r7, #27
  40321e:	2201      	movs	r2, #1
  403220:	215f      	movs	r1, #95	; 0x5f
  403222:	6878      	ldr	r0, [r7, #4]
  403224:	4c13      	ldr	r4, [pc, #76]	; (403274 <inv_icm426xx_configure_fifo+0x1f4>)
  403226:	47a0      	blx	r4
  403228:	4602      	mov	r2, r0
  40322a:	69fb      	ldr	r3, [r7, #28]
  40322c:	4313      	orrs	r3, r2
  40322e:	61fb      	str	r3, [r7, #28]
			
			/* Enable Data Ready Interrupt */
			status |= inv_icm426xx_get_config_int1(s, &config_int);
  403230:	f107 030c 	add.w	r3, r7, #12
  403234:	4619      	mov	r1, r3
  403236:	6878      	ldr	r0, [r7, #4]
  403238:	4b0f      	ldr	r3, [pc, #60]	; (403278 <inv_icm426xx_configure_fifo+0x1f8>)
  40323a:	4798      	blx	r3
  40323c:	4602      	mov	r2, r0
  40323e:	69fb      	ldr	r3, [r7, #28]
  403240:	4313      	orrs	r3, r2
  403242:	61fb      	str	r3, [r7, #28]
			config_int.INV_ICM426XX_UI_DRDY = INV_ICM426XX_ENABLE;
  403244:	2301      	movs	r3, #1
  403246:	737b      	strb	r3, [r7, #13]
			status |= inv_icm426xx_set_config_int1(s, &config_int);
  403248:	f107 030c 	add.w	r3, r7, #12
  40324c:	4619      	mov	r1, r3
  40324e:	6878      	ldr	r0, [r7, #4]
  403250:	4b0a      	ldr	r3, [pc, #40]	; (40327c <inv_icm426xx_configure_fifo+0x1fc>)
  403252:	4798      	blx	r3
  403254:	4602      	mov	r2, r0
  403256:	69fb      	ldr	r3, [r7, #28]
  403258:	4313      	orrs	r3, r2
  40325a:	61fb      	str	r3, [r7, #28]
			break;
  40325c:	e002      	b.n	403264 <inv_icm426xx_configure_fifo+0x1e4>

		default :
			status = -1;
  40325e:	f04f 33ff 	mov.w	r3, #4294967295
  403262:	61fb      	str	r3, [r7, #28]
	}
	return status;
  403264:	69fb      	ldr	r3, [r7, #28]
}
  403266:	4618      	mov	r0, r3
  403268:	3724      	adds	r7, #36	; 0x24
  40326a:	46bd      	mov	sp, r7
  40326c:	bd90      	pop	{r4, r7, pc}
  40326e:	bf00      	nop
  403270:	00403951 	.word	0x00403951
  403274:	00403a1d 	.word	0x00403a1d
  403278:	00402089 	.word	0x00402089
  40327c:	0040239d 	.word	0x0040239d

00403280 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24>:

	return status;
}

uint32_t inv_icm426xx_get_fifo_timestamp_resolution_us_q24(struct inv_icm426xx * s)
{
  403280:	b590      	push	{r4, r7, lr}
  403282:	b087      	sub	sp, #28
  403284:	af00      	add	r7, sp, #0
  403286:	6078      	str	r0, [r7, #4]
	int status = 0;
  403288:	2300      	movs	r3, #0
  40328a:	613b      	str	r3, [r7, #16]
	uint8_t tmst_cfg_reg;
	ICM426XX_TMST_CONFIG_RESOL_t tmst_resol;
	uint32_t scale_factor_q24 = 1<<24;
  40328c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  403290:	617b      	str	r3, [r7, #20]
	
	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  403292:	f107 030e 	add.w	r3, r7, #14
  403296:	2201      	movs	r2, #1
  403298:	2154      	movs	r1, #84	; 0x54
  40329a:	6878      	ldr	r0, [r7, #4]
  40329c:	4c18      	ldr	r4, [pc, #96]	; (403300 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x80>)
  40329e:	47a0      	blx	r4
  4032a0:	4602      	mov	r2, r0
  4032a2:	693b      	ldr	r3, [r7, #16]
  4032a4:	4313      	orrs	r3, r2
  4032a6:	613b      	str	r3, [r7, #16]
	if (status < 0)
  4032a8:	693b      	ldr	r3, [r7, #16]
  4032aa:	2b00      	cmp	r3, #0
  4032ac:	da02      	bge.n	4032b4 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x34>
		return INV_ERROR;
  4032ae:	f04f 33ff 	mov.w	r3, #4294967295
  4032b2:	e020      	b.n	4032f6 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x76>
		
	tmst_resol = (ICM426XX_TMST_CONFIG_RESOL_t)(tmst_cfg_reg & BIT_TMST_CONFIG_RESOL_MASK);
  4032b4:	7bbb      	ldrb	r3, [r7, #14]
  4032b6:	f003 0308 	and.w	r3, r3, #8
  4032ba:	73fb      	strb	r3, [r7, #15]

	/* RTC is enabled, the resolution of the timestamp is one tick of RTC
	 * RTC runs at 32768 Hz, so resolution is 1/32768 s, or 1000000/32768 us	
	 */
	if (inv_icm426xx_get_clkin_rtc_status(s))
  4032bc:	6878      	ldr	r0, [r7, #4]
  4032be:	4b11      	ldr	r3, [pc, #68]	; (403304 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x84>)
  4032c0:	4798      	blx	r3
  4032c2:	4603      	mov	r3, r0
  4032c4:	2b00      	cmp	r3, #0
  4032c6:	d001      	beq.n	4032cc <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x4c>
		return ((1000000UL<<12)/32768UL)<<(24-12);
  4032c8:	4b0f      	ldr	r3, [pc, #60]	; (403308 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x88>)
  4032ca:	e014      	b.n	4032f6 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x76>

	/* PLL scale factor doesn't apply when WU oscillator is in use */
	if (!inv_icm426xx_is_wu_osc_active(s))
  4032cc:	6878      	ldr	r0, [r7, #4]
  4032ce:	4b0f      	ldr	r3, [pc, #60]	; (40330c <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x8c>)
  4032d0:	4798      	blx	r3
  4032d2:	4603      	mov	r3, r0
  4032d4:	2b00      	cmp	r3, #0
  4032d6:	d102      	bne.n	4032de <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x5e>
		scale_factor_q24 = PLL_SCALE_FACTOR_Q24;
  4032d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4032dc:	617b      	str	r3, [r7, #20]
	
	if (tmst_resol == ICM426XX_TMST_CONFIG_RESOL_16us)
  4032de:	7bfb      	ldrb	r3, [r7, #15]
  4032e0:	2b08      	cmp	r3, #8
  4032e2:	d102      	bne.n	4032ea <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x6a>
		return 16 * scale_factor_q24;
  4032e4:	697b      	ldr	r3, [r7, #20]
  4032e6:	011b      	lsls	r3, r3, #4
  4032e8:	e005      	b.n	4032f6 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x76>
	else if (tmst_resol == ICM426XX_TMST_CONFIG_RESOL_1us)
  4032ea:	7bfb      	ldrb	r3, [r7, #15]
  4032ec:	2b00      	cmp	r3, #0
  4032ee:	d101      	bne.n	4032f4 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x74>
		return 1 * scale_factor_q24;
  4032f0:	697b      	ldr	r3, [r7, #20]
  4032f2:	e000      	b.n	4032f6 <inv_icm426xx_get_fifo_timestamp_resolution_us_q24+0x76>

	/* Should not happen, return 0 */
	return 0; 
  4032f4:	2300      	movs	r3, #0
}
  4032f6:	4618      	mov	r0, r3
  4032f8:	371c      	adds	r7, #28
  4032fa:	46bd      	mov	sp, r7
  4032fc:	bd90      	pop	{r4, r7, pc}
  4032fe:	bf00      	nop
  403300:	00403951 	.word	0x00403951
  403304:	00403021 	.word	0x00403021
  403308:	1e848000 	.word	0x1e848000
  40330c:	004037b5 	.word	0x004037b5

00403310 <inv_icm426xx_get_reg_timestamp_resolution_us_q24>:

uint32_t inv_icm426xx_get_reg_timestamp_resolution_us_q24(struct inv_icm426xx * s)
{
  403310:	b580      	push	{r7, lr}
  403312:	b084      	sub	sp, #16
  403314:	af00      	add	r7, sp, #0
  403316:	6078      	str	r0, [r7, #4]
	uint32_t scale_factor_q24 = 1<<24;
  403318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40331c:	60fb      	str	r3, [r7, #12]

	/* RTC is enabled, the resolution of the timestamp is one tick of RTC
	 * Our RTC runs at 32768 Hz, so resolution is 1/32768 s, or 1000000/32768 us	
	 */
	if (inv_icm426xx_get_clkin_rtc_status(s))
  40331e:	6878      	ldr	r0, [r7, #4]
  403320:	4b0a      	ldr	r3, [pc, #40]	; (40334c <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x3c>)
  403322:	4798      	blx	r3
  403324:	4603      	mov	r3, r0
  403326:	2b00      	cmp	r3, #0
  403328:	d001      	beq.n	40332e <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x1e>
		return ((1000000UL<<12)/32768UL)<<(24-12);
  40332a:	4b09      	ldr	r3, [pc, #36]	; (403350 <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x40>)
  40332c:	e009      	b.n	403342 <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x32>

	/* PLL scale factor doesn't apply when WU oscillator is in use */
	if (!inv_icm426xx_is_wu_osc_active(s))
  40332e:	6878      	ldr	r0, [r7, #4]
  403330:	4b08      	ldr	r3, [pc, #32]	; (403354 <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x44>)
  403332:	4798      	blx	r3
  403334:	4603      	mov	r3, r0
  403336:	2b00      	cmp	r3, #0
  403338:	d102      	bne.n	403340 <inv_icm426xx_get_reg_timestamp_resolution_us_q24+0x30>
		scale_factor_q24 = PLL_SCALE_FACTOR_Q24;
  40333a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40333e:	60fb      	str	r3, [r7, #12]
	
	return 1 * scale_factor_q24;
  403340:	68fb      	ldr	r3, [r7, #12]
}
  403342:	4618      	mov	r0, r3
  403344:	3710      	adds	r7, #16
  403346:	46bd      	mov	sp, r7
  403348:	bd80      	pop	{r7, pc}
  40334a:	bf00      	nop
  40334c:	00403021 	.word	0x00403021
  403350:	1e848000 	.word	0x1e848000
  403354:	004037b5 	.word	0x004037b5

00403358 <inv_icm426xx_configure_serial_interface>:

/*
 * Static functions definition
 */
static int inv_icm426xx_configure_serial_interface(struct inv_icm426xx * s)
{
  403358:	b590      	push	{r4, r7, lr}
  40335a:	b085      	sub	sp, #20
  40335c:	af00      	add	r7, sp, #0
  40335e:	6078      	str	r0, [r7, #4]
	int status = 0;
  403360:	2300      	movs	r3, #0
  403362:	60fb      	str	r3, [r7, #12]
	uint8_t value;

	/* Set memory bank 1 */
	status |= inv_icm426xx_set_reg_bank(s, 1);
  403364:	2101      	movs	r1, #1
  403366:	6878      	ldr	r0, [r7, #4]
  403368:	4b36      	ldr	r3, [pc, #216]	; (403444 <inv_icm426xx_configure_serial_interface+0xec>)
  40336a:	4798      	blx	r3
  40336c:	4602      	mov	r2, r0
  40336e:	68fb      	ldr	r3, [r7, #12]
  403370:	4313      	orrs	r3, r2
  403372:	60fb      	str	r3, [r7, #12]

	switch(s->transport.serif.serif_type) {
  403374:	687b      	ldr	r3, [r7, #4]
  403376:	7e1b      	ldrb	r3, [r3, #24]
  403378:	2b01      	cmp	r3, #1
  40337a:	d043      	beq.n	403404 <inv_icm426xx_configure_serial_interface+0xac>
  40337c:	2b02      	cmp	r3, #2
  40337e:	d01d      	beq.n	4033bc <inv_icm426xx_configure_serial_interface+0x64>
  403380:	2b00      	cmp	r3, #0
  403382:	d14d      	bne.n	403420 <inv_icm426xx_configure_serial_interface+0xc8>
	
		case ICM426XX_UI_I2C:
			/* Enable I2C 50ns spike filtering */
			status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  403384:	f107 030b 	add.w	r3, r7, #11
  403388:	2201      	movs	r2, #1
  40338a:	217c      	movs	r1, #124	; 0x7c
  40338c:	6878      	ldr	r0, [r7, #4]
  40338e:	4c2e      	ldr	r4, [pc, #184]	; (403448 <inv_icm426xx_configure_serial_interface+0xf0>)
  403390:	47a0      	blx	r4
  403392:	4602      	mov	r2, r0
  403394:	68fb      	ldr	r3, [r7, #12]
  403396:	4313      	orrs	r3, r2
  403398:	60fb      	str	r3, [r7, #12]
			value &= (uint8_t)~(BIT_INTF_CONFIG6_I3C_SDR_EN_MASK | BIT_INTF_CONFIG6_I3C_DDR_EN_MASK);
  40339a:	7afb      	ldrb	r3, [r7, #11]
  40339c:	f023 0303 	bic.w	r3, r3, #3
  4033a0:	b2db      	uxtb	r3, r3
  4033a2:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  4033a4:	f107 030b 	add.w	r3, r7, #11
  4033a8:	2201      	movs	r2, #1
  4033aa:	217c      	movs	r1, #124	; 0x7c
  4033ac:	6878      	ldr	r0, [r7, #4]
  4033ae:	4c27      	ldr	r4, [pc, #156]	; (40344c <inv_icm426xx_configure_serial_interface+0xf4>)
  4033b0:	47a0      	blx	r4
  4033b2:	4602      	mov	r2, r0
  4033b4:	68fb      	ldr	r3, [r7, #12]
  4033b6:	4313      	orrs	r3, r2
  4033b8:	60fb      	str	r3, [r7, #12]
			break;
  4033ba:	e035      	b.n	403428 <inv_icm426xx_configure_serial_interface+0xd0>
			
		case ICM426XX_UI_I3C:
			/* Enable In Band Interrupt for I3C UI interface and associated payload byte and assign dynamic address */
			status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  4033bc:	f107 030b 	add.w	r3, r7, #11
  4033c0:	2201      	movs	r2, #1
  4033c2:	217c      	movs	r1, #124	; 0x7c
  4033c4:	6878      	ldr	r0, [r7, #4]
  4033c6:	4c20      	ldr	r4, [pc, #128]	; (403448 <inv_icm426xx_configure_serial_interface+0xf0>)
  4033c8:	47a0      	blx	r4
  4033ca:	4602      	mov	r2, r0
  4033cc:	68fb      	ldr	r3, [r7, #12]
  4033ce:	4313      	orrs	r3, r2
  4033d0:	60fb      	str	r3, [r7, #12]
			value |= (BIT_INTF_CONFIG6_I3C_IBI_BYTE_EN_MASK | BIT_INTF_CONFIG6_I3C_IBI_EN_MASK);
  4033d2:	7afb      	ldrb	r3, [r7, #11]
  4033d4:	f043 030c 	orr.w	r3, r3, #12
  4033d8:	b2db      	uxtb	r3, r3
  4033da:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  4033dc:	f107 030b 	add.w	r3, r7, #11
  4033e0:	2201      	movs	r2, #1
  4033e2:	217c      	movs	r1, #124	; 0x7c
  4033e4:	6878      	ldr	r0, [r7, #4]
  4033e6:	4c19      	ldr	r4, [pc, #100]	; (40344c <inv_icm426xx_configure_serial_interface+0xf4>)
  4033e8:	47a0      	blx	r4
  4033ea:	4602      	mov	r2, r0
  4033ec:	68fb      	ldr	r3, [r7, #12]
  4033ee:	4313      	orrs	r3, r2
  4033f0:	60fb      	str	r3, [r7, #12]
			status |= s->transport.serif.configure((struct inv_icm426xx_serif *)s);
  4033f2:	687b      	ldr	r3, [r7, #4]
  4033f4:	68db      	ldr	r3, [r3, #12]
  4033f6:	6878      	ldr	r0, [r7, #4]
  4033f8:	4798      	blx	r3
  4033fa:	4602      	mov	r2, r0
  4033fc:	68fb      	ldr	r3, [r7, #12]
  4033fe:	4313      	orrs	r3, r2
  403400:	60fb      	str	r3, [r7, #12]
			break;
  403402:	e011      	b.n	403428 <inv_icm426xx_configure_serial_interface+0xd0>
			
		case ICM426XX_UI_SPI4:
			value = ICM426XX_INTF_CONFIG4_AP_SPI4W;
  403404:	2302      	movs	r3, #2
  403406:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG4_B1, 1, &value);
  403408:	f107 030b 	add.w	r3, r7, #11
  40340c:	2201      	movs	r2, #1
  40340e:	217a      	movs	r1, #122	; 0x7a
  403410:	6878      	ldr	r0, [r7, #4]
  403412:	4c0e      	ldr	r4, [pc, #56]	; (40344c <inv_icm426xx_configure_serial_interface+0xf4>)
  403414:	47a0      	blx	r4
  403416:	4602      	mov	r2, r0
  403418:	68fb      	ldr	r3, [r7, #12]
  40341a:	4313      	orrs	r3, r2
  40341c:	60fb      	str	r3, [r7, #12]
			break;
  40341e:	e003      	b.n	403428 <inv_icm426xx_configure_serial_interface+0xd0>
			
		default:
			status |= INV_ERROR_BAD_ARG;
  403420:	68fb      	ldr	r3, [r7, #12]
  403422:	f063 030a 	orn	r3, r3, #10
  403426:	60fb      	str	r3, [r7, #12]
	}

	/* Set memory bank 0 */
	status |= inv_icm426xx_set_reg_bank(s, 0);
  403428:	2100      	movs	r1, #0
  40342a:	6878      	ldr	r0, [r7, #4]
  40342c:	4b05      	ldr	r3, [pc, #20]	; (403444 <inv_icm426xx_configure_serial_interface+0xec>)
  40342e:	4798      	blx	r3
  403430:	4602      	mov	r2, r0
  403432:	68fb      	ldr	r3, [r7, #12]
  403434:	4313      	orrs	r3, r2
  403436:	60fb      	str	r3, [r7, #12]
	
	return status;
  403438:	68fb      	ldr	r3, [r7, #12]
}
  40343a:	4618      	mov	r0, r3
  40343c:	3714      	adds	r7, #20
  40343e:	46bd      	mov	sp, r7
  403440:	bd90      	pop	{r4, r7, pc}
  403442:	bf00      	nop
  403444:	00401695 	.word	0x00401695
  403448:	00403951 	.word	0x00403951
  40344c:	00403a1d 	.word	0x00403a1d

00403450 <inv_icm426xx_init_hardware_from_ui>:

static int inv_icm426xx_init_hardware_from_ui(struct inv_icm426xx * s)
{
  403450:	b590      	push	{r4, r7, lr}
  403452:	b08b      	sub	sp, #44	; 0x2c
  403454:	af00      	add	r7, sp, #0
  403456:	6078      	str	r0, [r7, #4]
	uint8_t data;
	int status = 0;
  403458:	2300      	movs	r3, #0
  40345a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t wom_threshold[3];
	uint8_t gyro_cfg_0_reg, accel_cfg_0_reg, tmst_cfg_reg; 
	inv_icm426xx_interrupt_parameter_t config_int = {
  40345c:	4bb4      	ldr	r3, [pc, #720]	; (403730 <inv_icm426xx_init_hardware_from_ui+0x2e0>)
  40345e:	f107 040c 	add.w	r4, r7, #12
  403462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403464:	c407      	stmia	r4!, {r0, r1, r2}
  403466:	8023      	strh	r3, [r4, #0]
		.INV_ICM426XX_SLEEP_DET     = INV_ICM426XX_ENABLE,	
		.INV_ICM426XX_WAKE_DET      = INV_ICM426XX_ENABLE,	
		.INV_ICM426XX_TAP_DET       = INV_ICM426XX_ENABLE,	
	};

	status |= inv_icm426xx_device_reset(s);
  403468:	6878      	ldr	r0, [r7, #4]
  40346a:	4bb2      	ldr	r3, [pc, #712]	; (403734 <inv_icm426xx_init_hardware_from_ui+0x2e4>)
  40346c:	4798      	blx	r3
  40346e:	4602      	mov	r2, r0
  403470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403472:	4313      	orrs	r3, r2
  403474:	627b      	str	r3, [r7, #36]	; 0x24

	/* Setup MEMs properties */
	status |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  403476:	f107 031f 	add.w	r3, r7, #31
  40347a:	2201      	movs	r2, #1
  40347c:	214f      	movs	r1, #79	; 0x4f
  40347e:	6878      	ldr	r0, [r7, #4]
  403480:	4cad      	ldr	r4, [pc, #692]	; (403738 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403482:	47a0      	blx	r4
  403484:	4602      	mov	r2, r0
  403486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403488:	4313      	orrs	r3, r2
  40348a:	627b      	str	r3, [r7, #36]	; 0x24
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  40348c:	f107 031e 	add.w	r3, r7, #30
  403490:	2201      	movs	r2, #1
  403492:	2150      	movs	r1, #80	; 0x50
  403494:	6878      	ldr	r0, [r7, #4]
  403496:	4ca8      	ldr	r4, [pc, #672]	; (403738 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403498:	47a0      	blx	r4
  40349a:	4602      	mov	r2, r0
  40349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40349e:	4313      	orrs	r3, r2
  4034a0:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_cfg_0_reg &= (uint8_t)~BIT_GYRO_CONFIG0_FS_SEL_MASK;
  4034a2:	7ffb      	ldrb	r3, [r7, #31]
  4034a4:	f003 031f 	and.w	r3, r3, #31
  4034a8:	b2db      	uxtb	r3, r3
  4034aa:	77fb      	strb	r3, [r7, #31]
	gyro_cfg_0_reg |= (uint8_t)ICM426XX_GYRO_CONFIG0_FS_SEL_2000dps;
  4034ac:	7ffb      	ldrb	r3, [r7, #31]
  4034ae:	77fb      	strb	r3, [r7, #31]
	accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_FS_SEL_MASK;
  4034b0:	7fbb      	ldrb	r3, [r7, #30]
  4034b2:	f003 031f 	and.w	r3, r3, #31
  4034b6:	b2db      	uxtb	r3, r3
  4034b8:	77bb      	strb	r3, [r7, #30]
	accel_cfg_0_reg |= (uint8_t)ICM426XX_ACCEL_CONFIG0_FS_SEL_4g;
  4034ba:	7fbb      	ldrb	r3, [r7, #30]
  4034bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4034c0:	b2db      	uxtb	r3, r3
  4034c2:	77bb      	strb	r3, [r7, #30]
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  4034c4:	f107 031f 	add.w	r3, r7, #31
  4034c8:	2201      	movs	r2, #1
  4034ca:	214f      	movs	r1, #79	; 0x4f
  4034cc:	6878      	ldr	r0, [r7, #4]
  4034ce:	4c9b      	ldr	r4, [pc, #620]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4034d0:	47a0      	blx	r4
  4034d2:	4602      	mov	r2, r0
  4034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4034d6:	4313      	orrs	r3, r2
  4034d8:	627b      	str	r3, [r7, #36]	; 0x24
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  4034da:	f107 031e 	add.w	r3, r7, #30
  4034de:	2201      	movs	r2, #1
  4034e0:	2150      	movs	r1, #80	; 0x50
  4034e2:	6878      	ldr	r0, [r7, #4]
  4034e4:	4c95      	ldr	r4, [pc, #596]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4034e6:	47a0      	blx	r4
  4034e8:	4602      	mov	r2, r0
  4034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4034ec:	4313      	orrs	r3, r2
  4034ee:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* make sure FIFO is disabled */
	data = ICM426XX_FIFO_CONFIG_MODE_BYPASS;
  4034f0:	2300      	movs	r3, #0
  4034f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  4034f6:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4034fa:	2201      	movs	r2, #1
  4034fc:	2116      	movs	r1, #22
  4034fe:	6878      	ldr	r0, [r7, #4]
  403500:	4c8e      	ldr	r4, [pc, #568]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  403502:	47a0      	blx	r4
  403504:	4602      	mov	r2, r0
  403506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403508:	4313      	orrs	r3, r2
  40350a:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Deactivate FSYNC by default */
	status |= inv_icm426xx_read_reg(s, MPUREG_FSYNC_CONFIG, 1, &data);
  40350c:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403510:	2201      	movs	r2, #1
  403512:	2162      	movs	r1, #98	; 0x62
  403514:	6878      	ldr	r0, [r7, #4]
  403516:	4c88      	ldr	r4, [pc, #544]	; (403738 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403518:	47a0      	blx	r4
  40351a:	4602      	mov	r2, r0
  40351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40351e:	4313      	orrs	r3, r2
  403520:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_FSYNC_CONFIG_UI_SEL_MASK;
  403522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40352a:	b2db      	uxtb	r3, r3
  40352c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_FSYNC_CONFIG, 1, &data);
  403530:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403534:	2201      	movs	r2, #1
  403536:	2162      	movs	r1, #98	; 0x62
  403538:	6878      	ldr	r0, [r7, #4]
  40353a:	4c80      	ldr	r4, [pc, #512]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  40353c:	47a0      	blx	r4
  40353e:	4602      	mov	r2, r0
  403540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403542:	4313      	orrs	r3, r2
  403544:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  403546:	f107 031d 	add.w	r3, r7, #29
  40354a:	2201      	movs	r2, #1
  40354c:	2154      	movs	r1, #84	; 0x54
  40354e:	6878      	ldr	r0, [r7, #4]
  403550:	4c79      	ldr	r4, [pc, #484]	; (403738 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403552:	47a0      	blx	r4
  403554:	4602      	mov	r2, r0
  403556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403558:	4313      	orrs	r3, r2
  40355a:	627b      	str	r3, [r7, #36]	; 0x24
	tmst_cfg_reg &= (uint8_t)~BIT_TMST_CONFIG_TMST_FSYNC_MASK; // == ICM426XX_FSYNC_CONFIG_UI_SEL_NO
  40355c:	7f7b      	ldrb	r3, [r7, #29]
  40355e:	f023 0302 	bic.w	r3, r3, #2
  403562:	b2db      	uxtb	r3, r3
  403564:	777b      	strb	r3, [r7, #29]
	status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  403566:	f107 031d 	add.w	r3, r7, #29
  40356a:	2201      	movs	r2, #1
  40356c:	2154      	movs	r1, #84	; 0x54
  40356e:	6878      	ldr	r0, [r7, #4]
  403570:	4c72      	ldr	r4, [pc, #456]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  403572:	47a0      	blx	r4
  403574:	4602      	mov	r2, r0
  403576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403578:	4313      	orrs	r3, r2
  40357a:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Set default timestamp resolution 16us (Mobile use cases) */
	status |= inv_icm426xx_configure_timestamp_resolution(s, ICM426XX_TMST_CONFIG_RESOL_16us);
  40357c:	2108      	movs	r1, #8
  40357e:	6878      	ldr	r0, [r7, #4]
  403580:	4b6f      	ldr	r3, [pc, #444]	; (403740 <inv_icm426xx_init_hardware_from_ui+0x2f0>)
  403582:	4798      	blx	r3
  403584:	4602      	mov	r2, r0
  403586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403588:	4313      	orrs	r3, r2
  40358a:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_configure_fifo(s, INV_ICM426XX_FIFO_ENABLED);
  40358c:	2101      	movs	r1, #1
  40358e:	6878      	ldr	r0, [r7, #4]
  403590:	4b6c      	ldr	r3, [pc, #432]	; (403744 <inv_icm426xx_init_hardware_from_ui+0x2f4>)
  403592:	4798      	blx	r3
  403594:	4602      	mov	r2, r0
  403596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403598:	4313      	orrs	r3, r2
  40359a:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_CONFIG, 1, &data);
  40359c:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4035a0:	2201      	movs	r2, #1
  4035a2:	2114      	movs	r1, #20
  4035a4:	6878      	ldr	r0, [r7, #4]
  4035a6:	4c64      	ldr	r4, [pc, #400]	; (403738 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  4035a8:	47a0      	blx	r4
  4035aa:	4602      	mov	r2, r0
  4035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035ae:	4313      	orrs	r3, r2
  4035b0:	627b      	str	r3, [r7, #36]	; 0x24
	/* Enable push pull on INT1 to avoid moving in Test Mode after a soft reset */
	data |= (uint8_t)ICM426XX_INT_CONFIG_INT1_DRIVE_CIRCUIT_PP;
  4035b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4035b6:	f043 0302 	orr.w	r3, r3, #2
  4035ba:	b2db      	uxtb	r3, r3
  4035bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Configure the INT1 interrupt pulse as active high */
	data |= (uint8_t)ICM426XX_INT_CONFIG_INT1_POLARITY_HIGH;
  4035c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4035c4:	f043 0301 	orr.w	r3, r3, #1
  4035c8:	b2db      	uxtb	r3, r3
  4035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_CONFIG, 1, &data);
  4035ce:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4035d2:	2201      	movs	r2, #1
  4035d4:	2114      	movs	r1, #20
  4035d6:	6878      	ldr	r0, [r7, #4]
  4035d8:	4c58      	ldr	r4, [pc, #352]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4035da:	47a0      	blx	r4
  4035dc:	4602      	mov	r2, r0
  4035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035e0:	4313      	orrs	r3, r2
  4035e2:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Set interrupt config */
	status |= inv_icm426xx_set_config_int1(s,&config_int);
  4035e4:	f107 030c 	add.w	r3, r7, #12
  4035e8:	4619      	mov	r1, r3
  4035ea:	6878      	ldr	r0, [r7, #4]
  4035ec:	4b56      	ldr	r3, [pc, #344]	; (403748 <inv_icm426xx_init_hardware_from_ui+0x2f8>)
  4035ee:	4798      	blx	r3
  4035f0:	4602      	mov	r2, r0
  4035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035f4:	4313      	orrs	r3, r2
  4035f6:	627b      	str	r3, [r7, #36]	; 0x24
	config_int.INV_ICM426XX_UI_DRDY  = INV_ICM426XX_ENABLE;
  4035f8:	2301      	movs	r3, #1
  4035fa:	737b      	strb	r3, [r7, #13]
	config_int.INV_ICM426XX_FIFO_THS = INV_ICM426XX_DISABLE;
  4035fc:	2300      	movs	r3, #0
  4035fe:	73bb      	strb	r3, [r7, #14]
	status |= inv_icm426xx_set_config_ibi(s,&config_int);
  403600:	f107 030c 	add.w	r3, r7, #12
  403604:	4619      	mov	r1, r3
  403606:	6878      	ldr	r0, [r7, #4]
  403608:	4b50      	ldr	r3, [pc, #320]	; (40374c <inv_icm426xx_init_hardware_from_ui+0x2fc>)
  40360a:	4798      	blx	r3
  40360c:	4602      	mov	r2, r0
  40360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403610:	4313      	orrs	r3, r2
  403612:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Set the ASY_RESET_DISABLE bit to 0 (async enabled) in order to chop Tpulse as soon as interrupt status is read
	 * Guideline is to set the ASY_RESET_DISABLE bit to 0 in pulse mode
	 * No effect in latch mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_CONFIG1, 1, &data);
  403614:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403618:	2201      	movs	r2, #1
  40361a:	2164      	movs	r1, #100	; 0x64
  40361c:	6878      	ldr	r0, [r7, #4]
  40361e:	4c46      	ldr	r4, [pc, #280]	; (403738 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403620:	47a0      	blx	r4
  403622:	4602      	mov	r2, r0
  403624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403626:	4313      	orrs	r3, r2
  403628:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_INT_CONFIG1_ASY_RST_MASK;
  40362a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40362e:	f023 0310 	bic.w	r3, r3, #16
  403632:	b2db      	uxtb	r3, r3
  403634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	data |= (uint8_t)ICM426XX_INT_CONFIG1_ASY_RST_ENABLED;
  403638:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40363c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_CONFIG1, 1, &data);
  403640:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403644:	2201      	movs	r2, #1
  403646:	2164      	movs	r1, #100	; 0x64
  403648:	6878      	ldr	r0, [r7, #4]
  40364a:	4c3c      	ldr	r4, [pc, #240]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  40364c:	47a0      	blx	r4
  40364e:	4602      	mov	r2, r0
  403650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403652:	4313      	orrs	r3, r2
  403654:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set the UI filter order to 2 for both gyro and accel */
	status |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG1, 1, &data);
  403656:	f107 0323 	add.w	r3, r7, #35	; 0x23
  40365a:	2201      	movs	r2, #1
  40365c:	2151      	movs	r1, #81	; 0x51
  40365e:	6878      	ldr	r0, [r7, #4]
  403660:	4c35      	ldr	r4, [pc, #212]	; (403738 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  403662:	47a0      	blx	r4
  403664:	4602      	mov	r2, r0
  403666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403668:	4313      	orrs	r3, r2
  40366a:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_GYRO_CONFIG1_GYRO_UI_FILT_ORD_MASK;
  40366c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403670:	f023 030c 	bic.w	r3, r3, #12
  403674:	b2db      	uxtb	r3, r3
  403676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	data |= (uint8_t)ICM426XX_GYRO_CONFIG_GYRO_UI_FILT_ORD_2ND_ORDER;
  40367a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40367e:	f043 0304 	orr.w	r3, r3, #4
  403682:	b2db      	uxtb	r3, r3
  403684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG1, 1, &data);
  403688:	f107 0323 	add.w	r3, r7, #35	; 0x23
  40368c:	2201      	movs	r2, #1
  40368e:	2151      	movs	r1, #81	; 0x51
  403690:	6878      	ldr	r0, [r7, #4]
  403692:	4c2a      	ldr	r4, [pc, #168]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  403694:	47a0      	blx	r4
  403696:	4602      	mov	r2, r0
  403698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40369a:	4313      	orrs	r3, r2
  40369c:	627b      	str	r3, [r7, #36]	; 0x24
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG1, 1, &data);
  40369e:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4036a2:	2201      	movs	r2, #1
  4036a4:	2153      	movs	r1, #83	; 0x53
  4036a6:	6878      	ldr	r0, [r7, #4]
  4036a8:	4c23      	ldr	r4, [pc, #140]	; (403738 <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  4036aa:	47a0      	blx	r4
  4036ac:	4602      	mov	r2, r0
  4036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4036b0:	4313      	orrs	r3, r2
  4036b2:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_ACCEL_CONFIG1_ACCEL_UI_FILT_ORD_MASK;
  4036b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4036b8:	f023 0318 	bic.w	r3, r3, #24
  4036bc:	b2db      	uxtb	r3, r3
  4036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	data |= (uint8_t)ICM426XX_ACCEL_CONFIG_ACCEL_UI_FILT_ORD_2ND_ORDER;
  4036c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4036c6:	f043 0308 	orr.w	r3, r3, #8
  4036ca:	b2db      	uxtb	r3, r3
  4036cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG1, 1, &data);
  4036d0:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4036d4:	2201      	movs	r2, #1
  4036d6:	2153      	movs	r1, #83	; 0x53
  4036d8:	6878      	ldr	r0, [r7, #4]
  4036da:	4c18      	ldr	r4, [pc, #96]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4036dc:	47a0      	blx	r4
  4036de:	4602      	mov	r2, r0
  4036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4036e2:	4313      	orrs	r3, r2
  4036e4:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* FIFO packets are 16bit format by default (i.e. high res is disabled) */
	status |= inv_icm426xx_disable_high_resolution_fifo(s);
  4036e6:	6878      	ldr	r0, [r7, #4]
  4036e8:	4b19      	ldr	r3, [pc, #100]	; (403750 <inv_icm426xx_init_hardware_from_ui+0x300>)
  4036ea:	4798      	blx	r3
  4036ec:	4602      	mov	r2, r0
  4036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4036f0:	4313      	orrs	r3, r2
  4036f2:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* For retro-compatibility, configure WOM to compare current sample with the previous sample and to produce signal when all axis exceed 52 mg */
	status |= inv_icm426xx_set_reg_bank(s, 4); /* Set memory bank 4 */
  4036f4:	2104      	movs	r1, #4
  4036f6:	6878      	ldr	r0, [r7, #4]
  4036f8:	4b16      	ldr	r3, [pc, #88]	; (403754 <inv_icm426xx_init_hardware_from_ui+0x304>)
  4036fa:	4798      	blx	r3
  4036fc:	4602      	mov	r2, r0
  4036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403700:	4313      	orrs	r3, r2
  403702:	627b      	str	r3, [r7, #36]	; 0x24
	wom_threshold[0] = ICM426XX_DEFAULT_WOM_THS_MG; /* Set X threshold */
  403704:	230d      	movs	r3, #13
  403706:	f887 3020 	strb.w	r3, [r7, #32]
	wom_threshold[1] = ICM426XX_DEFAULT_WOM_THS_MG; /* Set Y threshold */
  40370a:	230d      	movs	r3, #13
  40370c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	wom_threshold[2] = ICM426XX_DEFAULT_WOM_THS_MG; /* Set Z threshold */
  403710:	230d      	movs	r3, #13
  403712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_WOM_X_THR_B4, sizeof(wom_threshold), &wom_threshold[0]);
  403716:	f107 0320 	add.w	r3, r7, #32
  40371a:	2203      	movs	r2, #3
  40371c:	214a      	movs	r1, #74	; 0x4a
  40371e:	6878      	ldr	r0, [r7, #4]
  403720:	4c06      	ldr	r4, [pc, #24]	; (40373c <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  403722:	47a0      	blx	r4
  403724:	4602      	mov	r2, r0
  403726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403728:	4313      	orrs	r3, r2
  40372a:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_set_reg_bank(s, 0); /* Set memory bank 0 */
  40372c:	2100      	movs	r1, #0
  40372e:	e013      	b.n	403758 <inv_icm426xx_init_hardware_from_ui+0x308>
  403730:	00413668 	.word	0x00413668
  403734:	00401771 	.word	0x00401771
  403738:	00403951 	.word	0x00403951
  40373c:	00403a1d 	.word	0x00403a1d
  403740:	00402025 	.word	0x00402025
  403744:	00403081 	.word	0x00403081
  403748:	0040239d 	.word	0x0040239d
  40374c:	004021c5 	.word	0x004021c5
  403750:	00403061 	.word	0x00403061
  403754:	00401695 	.word	0x00401695
  403758:	6878      	ldr	r0, [r7, #4]
  40375a:	4b14      	ldr	r3, [pc, #80]	; (4037ac <inv_icm426xx_init_hardware_from_ui+0x35c>)
  40375c:	4798      	blx	r3
  40375e:	4602      	mov	r2, r0
  403760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403762:	4313      	orrs	r3, r2
  403764:	627b      	str	r3, [r7, #36]	; 0x24
	data = ((uint8_t)ICM426XX_SMD_CONFIG_WOM_INT_MODE_ANDED) | ((uint8_t)ICM426XX_SMD_CONFIG_WOM_MODE_CMP_PREV);
  403766:	230c      	movs	r3, #12
  403768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_SMD_CONFIG, 1, &data);
  40376c:	f107 0323 	add.w	r3, r7, #35	; 0x23
  403770:	2201      	movs	r2, #1
  403772:	2157      	movs	r1, #87	; 0x57
  403774:	6878      	ldr	r0, [r7, #4]
  403776:	4c0e      	ldr	r4, [pc, #56]	; (4037b0 <inv_icm426xx_init_hardware_from_ui+0x360>)
  403778:	47a0      	blx	r4
  40377a:	4602      	mov	r2, r0
  40377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40377e:	4313      	orrs	r3, r2
  403780:	627b      	str	r3, [r7, #36]	; 0x24

	/* by default, set IIR filter BW to ODR/4 for LN, 16x averaging for GLP, 16x averaging for ALP */
	s->avg_bw_setting.acc_ln_bw = (uint8_t)ICM426XX_GYRO_ACCEL_CONFIG0_ACCEL_FILT_BW_4;
  403782:	687b      	ldr	r3, [r7, #4]
  403784:	2210      	movs	r2, #16
  403786:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	s->avg_bw_setting.gyr_ln_bw = (uint8_t)ICM426XX_GYRO_ACCEL_CONFIG0_GYRO_FILT_BW_4;
  40378a:	687b      	ldr	r3, [r7, #4]
  40378c:	2201      	movs	r2, #1
  40378e:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
	s->avg_bw_setting.acc_lp_avg = (uint8_t)ICM426XX_GYRO_ACCEL_CONFIG0_ACCEL_FILT_AVG_16;
  403792:	687b      	ldr	r3, [r7, #4]
  403794:	2260      	movs	r2, #96	; 0x60
  403796:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872

	/* Reset self-test result variable*/
	s->st_result = 0;
  40379a:	687b      	ldr	r3, [r7, #4]
  40379c:	2200      	movs	r2, #0
  40379e:	641a      	str	r2, [r3, #64]	; 0x40

	return status;
  4037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  4037a2:	4618      	mov	r0, r3
  4037a4:	372c      	adds	r7, #44	; 0x2c
  4037a6:	46bd      	mov	sp, r7
  4037a8:	bd90      	pop	{r4, r7, pc}
  4037aa:	bf00      	nop
  4037ac:	00401695 	.word	0x00401695
  4037b0:	00403a1d 	.word	0x00403a1d

004037b4 <inv_icm426xx_is_wu_osc_active>:

static int inv_icm426xx_is_wu_osc_active(struct inv_icm426xx * s)
{
  4037b4:	b590      	push	{r4, r7, lr}
  4037b6:	b087      	sub	sp, #28
  4037b8:	af00      	add	r7, sp, #0
  4037ba:	6078      	str	r0, [r7, #4]
	int status = 0;
  4037bc:	2300      	movs	r3, #0
  4037be:	617b      	str	r3, [r7, #20]
	/* WU oscillator is active is Accel is enabled alone, in LP, with lp_clk_sel sets to WU_OSC */
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t      gyr_mode;
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t     acc_mode;
	ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t lp_clk;

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt0_reg);
  4037c0:	f107 0310 	add.w	r3, r7, #16
  4037c4:	2201      	movs	r2, #1
  4037c6:	214e      	movs	r1, #78	; 0x4e
  4037c8:	6878      	ldr	r0, [r7, #4]
  4037ca:	4c18      	ldr	r4, [pc, #96]	; (40382c <inv_icm426xx_is_wu_osc_active+0x78>)
  4037cc:	47a0      	blx	r4
  4037ce:	4602      	mov	r2, r0
  4037d0:	697b      	ldr	r3, [r7, #20]
  4037d2:	4313      	orrs	r3, r2
  4037d4:	617b      	str	r3, [r7, #20]
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &intf_cfg_1_reg);
  4037d6:	f107 030f 	add.w	r3, r7, #15
  4037da:	2201      	movs	r2, #1
  4037dc:	214d      	movs	r1, #77	; 0x4d
  4037de:	6878      	ldr	r0, [r7, #4]
  4037e0:	4c12      	ldr	r4, [pc, #72]	; (40382c <inv_icm426xx_is_wu_osc_active+0x78>)
  4037e2:	47a0      	blx	r4
  4037e4:	4602      	mov	r2, r0
  4037e6:	697b      	ldr	r3, [r7, #20]
  4037e8:	4313      	orrs	r3, r2
  4037ea:	617b      	str	r3, [r7, #20]
	gyr_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)      (pwr_mngt0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  4037ec:	7c3b      	ldrb	r3, [r7, #16]
  4037ee:	f003 030c 	and.w	r3, r3, #12
  4037f2:	74fb      	strb	r3, [r7, #19]
	acc_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)     (pwr_mngt0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  4037f4:	7c3b      	ldrb	r3, [r7, #16]
  4037f6:	f003 0303 	and.w	r3, r3, #3
  4037fa:	74bb      	strb	r3, [r7, #18]
	lp_clk   = (ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t) (intf_cfg_1_reg & BIT_ACCEL_LP_CLK_SEL_MASK);
  4037fc:	7bfb      	ldrb	r3, [r7, #15]
  4037fe:	f003 0308 	and.w	r3, r3, #8
  403802:	747b      	strb	r3, [r7, #17]


	return (  (gyr_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF || gyr_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY) /* Gyro is off or standby */
	       && (acc_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) /* Accel is enabled in LP */
	       && (lp_clk == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC)); /* WU oscillator is selected */
  403804:	7cfb      	ldrb	r3, [r7, #19]
  403806:	2b00      	cmp	r3, #0
  403808:	d002      	beq.n	403810 <inv_icm426xx_is_wu_osc_active+0x5c>
	return (  (gyr_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF || gyr_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY) /* Gyro is off or standby */
  40380a:	7cfb      	ldrb	r3, [r7, #19]
  40380c:	2b04      	cmp	r3, #4
  40380e:	d107      	bne.n	403820 <inv_icm426xx_is_wu_osc_active+0x6c>
	       && (acc_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) /* Accel is enabled in LP */
  403810:	7cbb      	ldrb	r3, [r7, #18]
  403812:	2b02      	cmp	r3, #2
  403814:	d104      	bne.n	403820 <inv_icm426xx_is_wu_osc_active+0x6c>
	       && (lp_clk == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC)); /* WU oscillator is selected */
  403816:	7c7b      	ldrb	r3, [r7, #17]
  403818:	2b00      	cmp	r3, #0
  40381a:	d101      	bne.n	403820 <inv_icm426xx_is_wu_osc_active+0x6c>
  40381c:	2301      	movs	r3, #1
  40381e:	e000      	b.n	403822 <inv_icm426xx_is_wu_osc_active+0x6e>
  403820:	2300      	movs	r3, #0
}
  403822:	4618      	mov	r0, r3
  403824:	371c      	adds	r7, #28
  403826:	46bd      	mov	sp, r7
  403828:	bd90      	pop	{r4, r7, pc}
  40382a:	bf00      	nop
  40382c:	00403951 	.word	0x00403951

00403830 <inv_icm426xx_format_data>:

/* Default implementation converts ICM endian to little endian */
static void inv_icm426xx_format_data(const uint8_t endian, const uint8_t *in, uint16_t *out)
{
  403830:	b480      	push	{r7}
  403832:	b085      	sub	sp, #20
  403834:	af00      	add	r7, sp, #0
  403836:	4603      	mov	r3, r0
  403838:	60b9      	str	r1, [r7, #8]
  40383a:	607a      	str	r2, [r7, #4]
  40383c:	73fb      	strb	r3, [r7, #15]
	if(endian == ICM426XX_INTF_CONFIG0_DATA_BIG_ENDIAN)
  40383e:	7bfb      	ldrb	r3, [r7, #15]
  403840:	2b10      	cmp	r3, #16
  403842:	d10d      	bne.n	403860 <inv_icm426xx_format_data+0x30>
		*out = (in[0] << 8) | in[1];
  403844:	68bb      	ldr	r3, [r7, #8]
  403846:	781b      	ldrb	r3, [r3, #0]
  403848:	021b      	lsls	r3, r3, #8
  40384a:	b21a      	sxth	r2, r3
  40384c:	68bb      	ldr	r3, [r7, #8]
  40384e:	3301      	adds	r3, #1
  403850:	781b      	ldrb	r3, [r3, #0]
  403852:	b21b      	sxth	r3, r3
  403854:	4313      	orrs	r3, r2
  403856:	b21b      	sxth	r3, r3
  403858:	b29a      	uxth	r2, r3
  40385a:	687b      	ldr	r3, [r7, #4]
  40385c:	801a      	strh	r2, [r3, #0]
	else
		*out = (in[1] << 8) | in[0];
}
  40385e:	e00c      	b.n	40387a <inv_icm426xx_format_data+0x4a>
		*out = (in[1] << 8) | in[0];
  403860:	68bb      	ldr	r3, [r7, #8]
  403862:	3301      	adds	r3, #1
  403864:	781b      	ldrb	r3, [r3, #0]
  403866:	021b      	lsls	r3, r3, #8
  403868:	b21a      	sxth	r2, r3
  40386a:	68bb      	ldr	r3, [r7, #8]
  40386c:	781b      	ldrb	r3, [r3, #0]
  40386e:	b21b      	sxth	r3, r3
  403870:	4313      	orrs	r3, r2
  403872:	b21b      	sxth	r3, r3
  403874:	b29a      	uxth	r2, r3
  403876:	687b      	ldr	r3, [r7, #4]
  403878:	801a      	strh	r2, [r3, #0]
}
  40387a:	bf00      	nop
  40387c:	3714      	adds	r7, #20
  40387e:	46bd      	mov	sp, r7
  403880:	f85d 7b04 	ldr.w	r7, [sp], #4
  403884:	4770      	bx	lr
	...

00403888 <inv_icm426xx_init_transport>:
static uint8_t * get_register_cache_addr(struct inv_icm426xx * s, uint8_t reg);
static uint8_t is_aux_interface(struct inv_icm426xx_transport *t);


int inv_icm426xx_init_transport(struct inv_icm426xx * s)
{
  403888:	b590      	push	{r4, r7, lr}
  40388a:	b085      	sub	sp, #20
  40388c:	af00      	add	r7, sp, #0
  40388e:	6078      	str	r0, [r7, #4]
	// Registers in cache must be in bank 0
	int status = 0;
  403890:	2300      	movs	r3, #0
  403892:	60fb      	str	r3, [r7, #12]
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  403894:	687b      	ldr	r3, [r7, #4]
  403896:	60bb      	str	r3, [r7, #8]

	if(!is_aux_interface(t)){
  403898:	68b8      	ldr	r0, [r7, #8]
  40389a:	4b2c      	ldr	r3, [pc, #176]	; (40394c <inv_icm426xx_init_transport+0xc4>)
  40389c:	4798      	blx	r3
  40389e:	4603      	mov	r3, r0
  4038a0:	2b00      	cmp	r3, #0
  4038a2:	d140      	bne.n	403926 <inv_icm426xx_init_transport+0x9e>
		status |= t->serif.read_reg(&(t->serif), MPUREG_INTF_CONFIG1,  &(t->register_cache.intf_cfg_1_reg), 1);
  4038a4:	68bb      	ldr	r3, [r7, #8]
  4038a6:	685c      	ldr	r4, [r3, #4]
  4038a8:	68b8      	ldr	r0, [r7, #8]
  4038aa:	68bb      	ldr	r3, [r7, #8]
  4038ac:	f103 021c 	add.w	r2, r3, #28
  4038b0:	2301      	movs	r3, #1
  4038b2:	214d      	movs	r1, #77	; 0x4d
  4038b4:	47a0      	blx	r4
  4038b6:	4602      	mov	r2, r0
  4038b8:	68fb      	ldr	r3, [r7, #12]
  4038ba:	4313      	orrs	r3, r2
  4038bc:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_PWR_MGMT_0,    &(t->register_cache.pwr_mngt_0_reg), 1);
  4038be:	68bb      	ldr	r3, [r7, #8]
  4038c0:	685c      	ldr	r4, [r3, #4]
  4038c2:	68b8      	ldr	r0, [r7, #8]
  4038c4:	68bb      	ldr	r3, [r7, #8]
  4038c6:	f103 021d 	add.w	r2, r3, #29
  4038ca:	2301      	movs	r3, #1
  4038cc:	214e      	movs	r1, #78	; 0x4e
  4038ce:	47a0      	blx	r4
  4038d0:	4602      	mov	r2, r0
  4038d2:	68fb      	ldr	r3, [r7, #12]
  4038d4:	4313      	orrs	r3, r2
  4038d6:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_GYRO_CONFIG0,  &(t->register_cache.gyro_cfg_0_reg), 1);
  4038d8:	68bb      	ldr	r3, [r7, #8]
  4038da:	685c      	ldr	r4, [r3, #4]
  4038dc:	68b8      	ldr	r0, [r7, #8]
  4038de:	68bb      	ldr	r3, [r7, #8]
  4038e0:	f103 021e 	add.w	r2, r3, #30
  4038e4:	2301      	movs	r3, #1
  4038e6:	214f      	movs	r1, #79	; 0x4f
  4038e8:	47a0      	blx	r4
  4038ea:	4602      	mov	r2, r0
  4038ec:	68fb      	ldr	r3, [r7, #12]
  4038ee:	4313      	orrs	r3, r2
  4038f0:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_ACCEL_CONFIG0, &(t->register_cache.accel_cfg_0_reg), 1);
  4038f2:	68bb      	ldr	r3, [r7, #8]
  4038f4:	685c      	ldr	r4, [r3, #4]
  4038f6:	68b8      	ldr	r0, [r7, #8]
  4038f8:	68bb      	ldr	r3, [r7, #8]
  4038fa:	f103 021f 	add.w	r2, r3, #31
  4038fe:	2301      	movs	r3, #1
  403900:	2150      	movs	r1, #80	; 0x50
  403902:	47a0      	blx	r4
  403904:	4602      	mov	r2, r0
  403906:	68fb      	ldr	r3, [r7, #12]
  403908:	4313      	orrs	r3, r2
  40390a:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_TMST_CONFIG,   &(t->register_cache.tmst_cfg_reg), 1);
  40390c:	68bb      	ldr	r3, [r7, #8]
  40390e:	685c      	ldr	r4, [r3, #4]
  403910:	68b8      	ldr	r0, [r7, #8]
  403912:	68bb      	ldr	r3, [r7, #8]
  403914:	f103 0220 	add.w	r2, r3, #32
  403918:	2301      	movs	r3, #1
  40391a:	2154      	movs	r1, #84	; 0x54
  40391c:	47a0      	blx	r4
  40391e:	4602      	mov	r2, r0
  403920:	68fb      	ldr	r3, [r7, #12]
  403922:	4313      	orrs	r3, r2
  403924:	60fb      	str	r3, [r7, #12]
	}
	
	status |= t->serif.read_reg(&(t->serif), MPUREG_REG_BANK_SEL,  &(t->register_cache.bank_sel_reg), 1);
  403926:	68bb      	ldr	r3, [r7, #8]
  403928:	685c      	ldr	r4, [r3, #4]
  40392a:	68b8      	ldr	r0, [r7, #8]
  40392c:	68bb      	ldr	r3, [r7, #8]
  40392e:	f103 0221 	add.w	r2, r3, #33	; 0x21
  403932:	2301      	movs	r3, #1
  403934:	2176      	movs	r1, #118	; 0x76
  403936:	47a0      	blx	r4
  403938:	4602      	mov	r2, r0
  40393a:	68fb      	ldr	r3, [r7, #12]
  40393c:	4313      	orrs	r3, r2
  40393e:	60fb      	str	r3, [r7, #12]

	return status;
  403940:	68fb      	ldr	r3, [r7, #12]
}
  403942:	4618      	mov	r0, r3
  403944:	3714      	adds	r7, #20
  403946:	46bd      	mov	sp, r7
  403948:	bd90      	pop	{r4, r7, pc}
  40394a:	bf00      	nop
  40394c:	00403b49 	.word	0x00403b49

00403950 <inv_icm426xx_read_reg>:

int inv_icm426xx_read_reg(struct inv_icm426xx * s, uint8_t reg, uint32_t len, uint8_t * buf)
{
  403950:	b5b0      	push	{r4, r5, r7, lr}
  403952:	b088      	sub	sp, #32
  403954:	af00      	add	r7, sp, #0
  403956:	60f8      	str	r0, [r7, #12]
  403958:	607a      	str	r2, [r7, #4]
  40395a:	603b      	str	r3, [r7, #0]
  40395c:	460b      	mov	r3, r1
  40395e:	72fb      	strb	r3, [r7, #11]
	// First field of struct inv_icm426xx is assumed to be a struct inv_icm426xx_transport object.
	// So let's cast s to struct inv_icm426xx_transport and ignore the rest of struct inv_icm426xx.
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  403960:	68fb      	ldr	r3, [r7, #12]
  403962:	61bb      	str	r3, [r7, #24]
	uint32_t i=0;
  403964:	2300      	movs	r3, #0
  403966:	61fb      	str	r3, [r7, #28]
	
	// Registers in cache are only in bank 0
	// Check if bank0 is used because of duplicate register addresses between banks
	// For AUX interface, register cache must not be used
	if((t->register_cache.bank_sel_reg == 0) && (is_aux_interface(t) == 0)) {
  403968:	69bb      	ldr	r3, [r7, #24]
  40396a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  40396e:	2b00      	cmp	r3, #0
  403970:	d12a      	bne.n	4039c8 <inv_icm426xx_read_reg+0x78>
  403972:	69b8      	ldr	r0, [r7, #24]
  403974:	4b27      	ldr	r3, [pc, #156]	; (403a14 <inv_icm426xx_read_reg+0xc4>)
  403976:	4798      	blx	r3
  403978:	4603      	mov	r3, r0
  40397a:	2b00      	cmp	r3, #0
  40397c:	d124      	bne.n	4039c8 <inv_icm426xx_read_reg+0x78>
		for(i=0; i<len ; i++) {
  40397e:	2300      	movs	r3, #0
  403980:	61fb      	str	r3, [r7, #28]
  403982:	e015      	b.n	4039b0 <inv_icm426xx_read_reg+0x60>
			uint8_t * cache_addr  = get_register_cache_addr(s, reg+i);
  403984:	69fb      	ldr	r3, [r7, #28]
  403986:	b2da      	uxtb	r2, r3
  403988:	7afb      	ldrb	r3, [r7, #11]
  40398a:	4413      	add	r3, r2
  40398c:	b2db      	uxtb	r3, r3
  40398e:	4619      	mov	r1, r3
  403990:	68f8      	ldr	r0, [r7, #12]
  403992:	4b21      	ldr	r3, [pc, #132]	; (403a18 <inv_icm426xx_read_reg+0xc8>)
  403994:	4798      	blx	r3
  403996:	6178      	str	r0, [r7, #20]
			if(cache_addr)
  403998:	697b      	ldr	r3, [r7, #20]
  40399a:	2b00      	cmp	r3, #0
  40399c:	d00d      	beq.n	4039ba <inv_icm426xx_read_reg+0x6a>
				buf[i] = *cache_addr;
  40399e:	683a      	ldr	r2, [r7, #0]
  4039a0:	69fb      	ldr	r3, [r7, #28]
  4039a2:	4413      	add	r3, r2
  4039a4:	697a      	ldr	r2, [r7, #20]
  4039a6:	7812      	ldrb	r2, [r2, #0]
  4039a8:	701a      	strb	r2, [r3, #0]
		for(i=0; i<len ; i++) {
  4039aa:	69fb      	ldr	r3, [r7, #28]
  4039ac:	3301      	adds	r3, #1
  4039ae:	61fb      	str	r3, [r7, #28]
  4039b0:	69fa      	ldr	r2, [r7, #28]
  4039b2:	687b      	ldr	r3, [r7, #4]
  4039b4:	429a      	cmp	r2, r3
  4039b6:	d3e5      	bcc.n	403984 <inv_icm426xx_read_reg+0x34>
  4039b8:	e000      	b.n	4039bc <inv_icm426xx_read_reg+0x6c>
			else
				break; // If one register isn't in cache, exit the loop and proceed a physical access
  4039ba:	bf00      	nop
		}
		
		if(i==len) // If the end of loop is reached, then all registers have been read in cache so return
  4039bc:	69fa      	ldr	r2, [r7, #28]
  4039be:	687b      	ldr	r3, [r7, #4]
  4039c0:	429a      	cmp	r2, r3
  4039c2:	d101      	bne.n	4039c8 <inv_icm426xx_read_reg+0x78>
			return 0;
  4039c4:	2300      	movs	r3, #0
  4039c6:	e020      	b.n	403a0a <inv_icm426xx_read_reg+0xba>
	}
	
	// Physical access to read registers
	if((len-i) > t->serif.max_read)
  4039c8:	687a      	ldr	r2, [r7, #4]
  4039ca:	69fb      	ldr	r3, [r7, #28]
  4039cc:	1ad2      	subs	r2, r2, r3
  4039ce:	69bb      	ldr	r3, [r7, #24]
  4039d0:	691b      	ldr	r3, [r3, #16]
  4039d2:	429a      	cmp	r2, r3
  4039d4:	d902      	bls.n	4039dc <inv_icm426xx_read_reg+0x8c>
		return INV_ERROR_SIZE;
  4039d6:	f06f 0304 	mvn.w	r3, #4
  4039da:	e016      	b.n	403a0a <inv_icm426xx_read_reg+0xba>
	if(t->serif.read_reg(&(t->serif), reg+i, &buf[i], len-i) != 0)
  4039dc:	69bb      	ldr	r3, [r7, #24]
  4039de:	685c      	ldr	r4, [r3, #4]
  4039e0:	69b8      	ldr	r0, [r7, #24]
  4039e2:	69fb      	ldr	r3, [r7, #28]
  4039e4:	b2da      	uxtb	r2, r3
  4039e6:	7afb      	ldrb	r3, [r7, #11]
  4039e8:	4413      	add	r3, r2
  4039ea:	b2d9      	uxtb	r1, r3
  4039ec:	683a      	ldr	r2, [r7, #0]
  4039ee:	69fb      	ldr	r3, [r7, #28]
  4039f0:	18d5      	adds	r5, r2, r3
  4039f2:	687a      	ldr	r2, [r7, #4]
  4039f4:	69fb      	ldr	r3, [r7, #28]
  4039f6:	1ad3      	subs	r3, r2, r3
  4039f8:	462a      	mov	r2, r5
  4039fa:	47a0      	blx	r4
  4039fc:	4603      	mov	r3, r0
  4039fe:	2b00      	cmp	r3, #0
  403a00:	d002      	beq.n	403a08 <inv_icm426xx_read_reg+0xb8>
		return INV_ERROR_TRANSPORT;
  403a02:	f06f 0302 	mvn.w	r3, #2
  403a06:	e000      	b.n	403a0a <inv_icm426xx_read_reg+0xba>
	
	return 0;
  403a08:	2300      	movs	r3, #0
}
  403a0a:	4618      	mov	r0, r3
  403a0c:	3720      	adds	r7, #32
  403a0e:	46bd      	mov	sp, r7
  403a10:	bdb0      	pop	{r4, r5, r7, pc}
  403a12:	bf00      	nop
  403a14:	00403b49 	.word	0x00403b49
  403a18:	00403add 	.word	0x00403add

00403a1c <inv_icm426xx_write_reg>:

int inv_icm426xx_write_reg(struct inv_icm426xx * s, uint8_t reg, uint32_t len, const uint8_t * buf)
{
  403a1c:	b590      	push	{r4, r7, lr}
  403a1e:	b089      	sub	sp, #36	; 0x24
  403a20:	af00      	add	r7, sp, #0
  403a22:	60f8      	str	r0, [r7, #12]
  403a24:	607a      	str	r2, [r7, #4]
  403a26:	603b      	str	r3, [r7, #0]
  403a28:	460b      	mov	r3, r1
  403a2a:	72fb      	strb	r3, [r7, #11]
	// First field of struct inv_icm426xx is assumed to be a struct inv_icm426xx_transport object.
	// So let's cast s to struct inv_icm426xx_transport and ignore the rest of struct inv_icm426xx.
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  403a2c:	68fb      	ldr	r3, [r7, #12]
  403a2e:	61bb      	str	r3, [r7, #24]
	uint32_t i;
	
	if(len > t->serif.max_write)
  403a30:	69bb      	ldr	r3, [r7, #24]
  403a32:	695a      	ldr	r2, [r3, #20]
  403a34:	687b      	ldr	r3, [r7, #4]
  403a36:	429a      	cmp	r2, r3
  403a38:	d202      	bcs.n	403a40 <inv_icm426xx_write_reg+0x24>
		return INV_ERROR_SIZE;
  403a3a:	f06f 0304 	mvn.w	r3, #4
  403a3e:	e045      	b.n	403acc <inv_icm426xx_write_reg+0xb0>
	
	
	for(i=0; i<len; i++) {
  403a40:	2300      	movs	r3, #0
  403a42:	61fb      	str	r3, [r7, #28]
  403a44:	e030      	b.n	403aa8 <inv_icm426xx_write_reg+0x8c>
		// Update bank_sel_reg in the cache
		if((reg+i) == MPUREG_REG_BANK_SEL){
  403a46:	7afa      	ldrb	r2, [r7, #11]
  403a48:	69fb      	ldr	r3, [r7, #28]
  403a4a:	4413      	add	r3, r2
  403a4c:	2b76      	cmp	r3, #118	; 0x76
  403a4e:	d107      	bne.n	403a60 <inv_icm426xx_write_reg+0x44>
			t->register_cache.bank_sel_reg = buf[i];
  403a50:	683a      	ldr	r2, [r7, #0]
  403a52:	69fb      	ldr	r3, [r7, #28]
  403a54:	4413      	add	r3, r2
  403a56:	781a      	ldrb	r2, [r3, #0]
  403a58:	69bb      	ldr	r3, [r7, #24]
  403a5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  403a5e:	e020      	b.n	403aa2 <inv_icm426xx_write_reg+0x86>
		}
		else {
			uint8_t * cache_addr  = get_register_cache_addr(s, reg+i);
  403a60:	69fb      	ldr	r3, [r7, #28]
  403a62:	b2da      	uxtb	r2, r3
  403a64:	7afb      	ldrb	r3, [r7, #11]
  403a66:	4413      	add	r3, r2
  403a68:	b2db      	uxtb	r3, r3
  403a6a:	4619      	mov	r1, r3
  403a6c:	68f8      	ldr	r0, [r7, #12]
  403a6e:	4b19      	ldr	r3, [pc, #100]	; (403ad4 <inv_icm426xx_write_reg+0xb8>)
  403a70:	4798      	blx	r3
  403a72:	6178      	str	r0, [r7, #20]
			if(cache_addr){
  403a74:	697b      	ldr	r3, [r7, #20]
  403a76:	2b00      	cmp	r3, #0
  403a78:	d013      	beq.n	403aa2 <inv_icm426xx_write_reg+0x86>
				if (t->register_cache.bank_sel_reg == 0){
  403a7a:	69bb      	ldr	r3, [r7, #24]
  403a7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  403a80:	2b00      	cmp	r3, #0
  403a82:	d10e      	bne.n	403aa2 <inv_icm426xx_write_reg+0x86>
					if(is_aux_interface(t) == 1)
  403a84:	69b8      	ldr	r0, [r7, #24]
  403a86:	4b14      	ldr	r3, [pc, #80]	; (403ad8 <inv_icm426xx_write_reg+0xbc>)
  403a88:	4798      	blx	r3
  403a8a:	4603      	mov	r3, r0
  403a8c:	2b01      	cmp	r3, #1
  403a8e:	d102      	bne.n	403a96 <inv_icm426xx_write_reg+0x7a>
						return INV_ERROR_BAD_ARG; // Cached registers must not be written from AUX interface
  403a90:	f06f 030a 	mvn.w	r3, #10
  403a94:	e01a      	b.n	403acc <inv_icm426xx_write_reg+0xb0>
					else
						*cache_addr = buf[i]; // Update register cache if the current bank is 0
  403a96:	683a      	ldr	r2, [r7, #0]
  403a98:	69fb      	ldr	r3, [r7, #28]
  403a9a:	4413      	add	r3, r2
  403a9c:	781a      	ldrb	r2, [r3, #0]
  403a9e:	697b      	ldr	r3, [r7, #20]
  403aa0:	701a      	strb	r2, [r3, #0]
	for(i=0; i<len; i++) {
  403aa2:	69fb      	ldr	r3, [r7, #28]
  403aa4:	3301      	adds	r3, #1
  403aa6:	61fb      	str	r3, [r7, #28]
  403aa8:	69fa      	ldr	r2, [r7, #28]
  403aaa:	687b      	ldr	r3, [r7, #4]
  403aac:	429a      	cmp	r2, r3
  403aae:	d3ca      	bcc.n	403a46 <inv_icm426xx_write_reg+0x2a>
			}
		}
	}
	
	// Physical access to write registers
	if(t->serif.write_reg(&(t->serif), reg, buf, len) != 0)
  403ab0:	69bb      	ldr	r3, [r7, #24]
  403ab2:	689c      	ldr	r4, [r3, #8]
  403ab4:	69b8      	ldr	r0, [r7, #24]
  403ab6:	7af9      	ldrb	r1, [r7, #11]
  403ab8:	687b      	ldr	r3, [r7, #4]
  403aba:	683a      	ldr	r2, [r7, #0]
  403abc:	47a0      	blx	r4
  403abe:	4603      	mov	r3, r0
  403ac0:	2b00      	cmp	r3, #0
  403ac2:	d002      	beq.n	403aca <inv_icm426xx_write_reg+0xae>
		return INV_ERROR_TRANSPORT;
  403ac4:	f06f 0302 	mvn.w	r3, #2
  403ac8:	e000      	b.n	403acc <inv_icm426xx_write_reg+0xb0>

	return 0;
  403aca:	2300      	movs	r3, #0
}
  403acc:	4618      	mov	r0, r3
  403ace:	3724      	adds	r7, #36	; 0x24
  403ad0:	46bd      	mov	sp, r7
  403ad2:	bd90      	pop	{r4, r7, pc}
  403ad4:	00403add 	.word	0x00403add
  403ad8:	00403b49 	.word	0x00403b49

00403adc <get_register_cache_addr>:

/* Static function */

/* MPUREG_REG_BANK_SEL shall never be added to the function get_register_cache_addr() */
static uint8_t * get_register_cache_addr(struct inv_icm426xx * s, uint8_t reg)
{
  403adc:	b480      	push	{r7}
  403ade:	b085      	sub	sp, #20
  403ae0:	af00      	add	r7, sp, #0
  403ae2:	6078      	str	r0, [r7, #4]
  403ae4:	460b      	mov	r3, r1
  403ae6:	70fb      	strb	r3, [r7, #3]
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  403ae8:	687b      	ldr	r3, [r7, #4]
  403aea:	60fb      	str	r3, [r7, #12]

	switch(reg) {
  403aec:	78fb      	ldrb	r3, [r7, #3]
  403aee:	3b4d      	subs	r3, #77	; 0x4d
  403af0:	2b07      	cmp	r3, #7
  403af2:	d822      	bhi.n	403b3a <get_register_cache_addr+0x5e>
  403af4:	a201      	add	r2, pc, #4	; (adr r2, 403afc <get_register_cache_addr+0x20>)
  403af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403afa:	bf00      	nop
  403afc:	00403b1d 	.word	0x00403b1d
  403b00:	00403b23 	.word	0x00403b23
  403b04:	00403b29 	.word	0x00403b29
  403b08:	00403b2f 	.word	0x00403b2f
  403b0c:	00403b3b 	.word	0x00403b3b
  403b10:	00403b3b 	.word	0x00403b3b
  403b14:	00403b3b 	.word	0x00403b3b
  403b18:	00403b35 	.word	0x00403b35
		case MPUREG_INTF_CONFIG1:     return &(t->register_cache.intf_cfg_1_reg);
  403b1c:	68fb      	ldr	r3, [r7, #12]
  403b1e:	331c      	adds	r3, #28
  403b20:	e00c      	b.n	403b3c <get_register_cache_addr+0x60>
		case MPUREG_PWR_MGMT_0:       return &(t->register_cache.pwr_mngt_0_reg);
  403b22:	68fb      	ldr	r3, [r7, #12]
  403b24:	331d      	adds	r3, #29
  403b26:	e009      	b.n	403b3c <get_register_cache_addr+0x60>
		case MPUREG_GYRO_CONFIG0:     return &(t->register_cache.gyro_cfg_0_reg);
  403b28:	68fb      	ldr	r3, [r7, #12]
  403b2a:	331e      	adds	r3, #30
  403b2c:	e006      	b.n	403b3c <get_register_cache_addr+0x60>
		case MPUREG_ACCEL_CONFIG0:    return &(t->register_cache.accel_cfg_0_reg);
  403b2e:	68fb      	ldr	r3, [r7, #12]
  403b30:	331f      	adds	r3, #31
  403b32:	e003      	b.n	403b3c <get_register_cache_addr+0x60>
		case MPUREG_TMST_CONFIG:      return &(t->register_cache.tmst_cfg_reg);
  403b34:	68fb      	ldr	r3, [r7, #12]
  403b36:	3320      	adds	r3, #32
  403b38:	e000      	b.n	403b3c <get_register_cache_addr+0x60>
		default:                      return (uint8_t *)0; // Not found
  403b3a:	2300      	movs	r3, #0
	}
}
  403b3c:	4618      	mov	r0, r3
  403b3e:	3714      	adds	r7, #20
  403b40:	46bd      	mov	sp, r7
  403b42:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b46:	4770      	bx	lr

00403b48 <is_aux_interface>:

static uint8_t is_aux_interface(struct inv_icm426xx_transport *t)
{
  403b48:	b480      	push	{r7}
  403b4a:	b083      	sub	sp, #12
  403b4c:	af00      	add	r7, sp, #0
  403b4e:	6078      	str	r0, [r7, #4]
	if ((t->serif.serif_type == ICM426XX_AUX1_SPI3) || (t->serif.serif_type == ICM426XX_AUX2_SPI3))
  403b50:	687b      	ldr	r3, [r7, #4]
  403b52:	7e1b      	ldrb	r3, [r3, #24]
  403b54:	2b03      	cmp	r3, #3
  403b56:	d003      	beq.n	403b60 <is_aux_interface+0x18>
  403b58:	687b      	ldr	r3, [r7, #4]
  403b5a:	7e1b      	ldrb	r3, [r3, #24]
  403b5c:	2b04      	cmp	r3, #4
  403b5e:	d101      	bne.n	403b64 <is_aux_interface+0x1c>
		return 1;
  403b60:	2301      	movs	r3, #1
  403b62:	e000      	b.n	403b66 <is_aux_interface+0x1e>
	else
		return 0;
  403b64:	2300      	movs	r3, #0
}
  403b66:	4618      	mov	r0, r3
  403b68:	370c      	adds	r7, #12
  403b6a:	46bd      	mov	sp, r7
  403b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b70:	4770      	bx	lr
	...

00403b74 <get_current_clock_source>:
static int clock_calibration_update_coef(struct inv_icm426xx * s, struct clk_calib *clk_cal, uint8_t *on_going, uint64_t irq_timestamp, uint16_t fifo_timestamp);
static int get_fastest_running_odr(struct inv_icm426xx * s, uint32_t *odr);
static enum inv_icm426xx_sensor get_fastest_sensor(struct inv_icm426xx * s);

static enum inv_icm426xx_clock_source get_current_clock_source(struct inv_icm426xx * s)
{
  403b74:	b590      	push	{r4, r7, lr}
  403b76:	b087      	sub	sp, #28
  403b78:	af00      	add	r7, sp, #0
  403b7a:	6078      	str	r0, [r7, #4]
	// WU oscillator is active if Accel is enabled alone, in LP, with lp_clk_sel sets to WU_OSC 
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t      gyr_mode;
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t     acc_mode;
	ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t lp_clk;
	int status = 0;
  403b7c:	2300      	movs	r3, #0
  403b7e:	617b      	str	r3, [r7, #20]
	uint8_t pwr_mngt_0_reg, intf_cfg_1_reg;

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  403b80:	f107 0310 	add.w	r3, r7, #16
  403b84:	2201      	movs	r2, #1
  403b86:	214e      	movs	r1, #78	; 0x4e
  403b88:	6878      	ldr	r0, [r7, #4]
  403b8a:	4c1d      	ldr	r4, [pc, #116]	; (403c00 <get_current_clock_source+0x8c>)
  403b8c:	47a0      	blx	r4
  403b8e:	4602      	mov	r2, r0
  403b90:	697b      	ldr	r3, [r7, #20]
  403b92:	4313      	orrs	r3, r2
  403b94:	617b      	str	r3, [r7, #20]
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &intf_cfg_1_reg);
  403b96:	f107 030f 	add.w	r3, r7, #15
  403b9a:	2201      	movs	r2, #1
  403b9c:	214d      	movs	r1, #77	; 0x4d
  403b9e:	6878      	ldr	r0, [r7, #4]
  403ba0:	4c17      	ldr	r4, [pc, #92]	; (403c00 <get_current_clock_source+0x8c>)
  403ba2:	47a0      	blx	r4
  403ba4:	4602      	mov	r2, r0
  403ba6:	697b      	ldr	r3, [r7, #20]
  403ba8:	4313      	orrs	r3, r2
  403baa:	617b      	str	r3, [r7, #20]
	
	if (0 > status)
  403bac:	697b      	ldr	r3, [r7, #20]
  403bae:	2b00      	cmp	r3, #0
  403bb0:	da01      	bge.n	403bb6 <get_current_clock_source+0x42>
		return INV_ICM426XX_CLOCK_SOURCE_MAX; // error
  403bb2:	2303      	movs	r3, #3
  403bb4:	e01f      	b.n	403bf6 <get_current_clock_source+0x82>
		
	gyr_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)      (pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  403bb6:	7c3b      	ldrb	r3, [r7, #16]
  403bb8:	f003 030c 	and.w	r3, r3, #12
  403bbc:	74fb      	strb	r3, [r7, #19]
	acc_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)     (pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  403bbe:	7c3b      	ldrb	r3, [r7, #16]
  403bc0:	f003 0303 	and.w	r3, r3, #3
  403bc4:	74bb      	strb	r3, [r7, #18]
	lp_clk   = (ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t) (intf_cfg_1_reg & BIT_ACCEL_LP_CLK_SEL_MASK);
  403bc6:	7bfb      	ldrb	r3, [r7, #15]
  403bc8:	f003 0308 	and.w	r3, r3, #8
  403bcc:	747b      	strb	r3, [r7, #17]

	if (gyr_mode != ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF && gyr_mode != ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY)
  403bce:	7cfb      	ldrb	r3, [r7, #19]
  403bd0:	2b00      	cmp	r3, #0
  403bd2:	d004      	beq.n	403bde <get_current_clock_source+0x6a>
  403bd4:	7cfb      	ldrb	r3, [r7, #19]
  403bd6:	2b04      	cmp	r3, #4
  403bd8:	d001      	beq.n	403bde <get_current_clock_source+0x6a>
		return INV_ICM426XX_PLL;
  403bda:	2300      	movs	r3, #0
  403bdc:	e00b      	b.n	403bf6 <get_current_clock_source+0x82>
	else if ((acc_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LN)
  403bde:	7cbb      	ldrb	r3, [r7, #18]
  403be0:	2b03      	cmp	r3, #3
  403be2:	d005      	beq.n	403bf0 <get_current_clock_source+0x7c>
		  || (acc_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP && lp_clk == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC))
  403be4:	7cbb      	ldrb	r3, [r7, #18]
  403be6:	2b02      	cmp	r3, #2
  403be8:	d104      	bne.n	403bf4 <get_current_clock_source+0x80>
  403bea:	7c7b      	ldrb	r3, [r7, #17]
  403bec:	2b08      	cmp	r3, #8
  403bee:	d101      	bne.n	403bf4 <get_current_clock_source+0x80>
		return INV_ICM426XX_RC_OSC;
  403bf0:	2301      	movs	r3, #1
  403bf2:	e000      	b.n	403bf6 <get_current_clock_source+0x82>
	else 
		return INV_ICM426XX_WU_OSC;
  403bf4:	2302      	movs	r3, #2
}
  403bf6:	4618      	mov	r0, r3
  403bf8:	371c      	adds	r7, #28
  403bfa:	46bd      	mov	sp, r7
  403bfc:	bd90      	pop	{r4, r7, pc}
  403bfe:	bf00      	nop
  403c00:	00403951 	.word	0x00403951

00403c04 <get_current_clock_source_name>:

static char * get_current_clock_source_name(struct inv_icm426xx * s)
{
  403c04:	b580      	push	{r7, lr}
  403c06:	b082      	sub	sp, #8
  403c08:	af00      	add	r7, sp, #0
  403c0a:	6078      	str	r0, [r7, #4]
	switch(get_current_clock_source(s)) {
  403c0c:	6878      	ldr	r0, [r7, #4]
  403c0e:	4b0a      	ldr	r3, [pc, #40]	; (403c38 <get_current_clock_source_name+0x34>)
  403c10:	4798      	blx	r3
  403c12:	4603      	mov	r3, r0
  403c14:	2b01      	cmp	r3, #1
  403c16:	d005      	beq.n	403c24 <get_current_clock_source_name+0x20>
  403c18:	2b02      	cmp	r3, #2
  403c1a:	d005      	beq.n	403c28 <get_current_clock_source_name+0x24>
  403c1c:	2b00      	cmp	r3, #0
  403c1e:	d105      	bne.n	403c2c <get_current_clock_source_name+0x28>
		case INV_ICM426XX_PLL:    return "PLL";
  403c20:	4b06      	ldr	r3, [pc, #24]	; (403c3c <get_current_clock_source_name+0x38>)
  403c22:	e004      	b.n	403c2e <get_current_clock_source_name+0x2a>
		case INV_ICM426XX_RC_OSC: return "RC_OSC";
  403c24:	4b06      	ldr	r3, [pc, #24]	; (403c40 <get_current_clock_source_name+0x3c>)
  403c26:	e002      	b.n	403c2e <get_current_clock_source_name+0x2a>
		case INV_ICM426XX_WU_OSC: return "WU_OSC";
  403c28:	4b06      	ldr	r3, [pc, #24]	; (403c44 <get_current_clock_source_name+0x40>)
  403c2a:	e000      	b.n	403c2e <get_current_clock_source_name+0x2a>
		default:                  return "No source";
  403c2c:	4b06      	ldr	r3, [pc, #24]	; (403c48 <get_current_clock_source_name+0x44>)
	}
}
  403c2e:	4618      	mov	r0, r3
  403c30:	3708      	adds	r7, #8
  403c32:	46bd      	mov	sp, r7
  403c34:	bd80      	pop	{r7, pc}
  403c36:	bf00      	nop
  403c38:	00403b75 	.word	0x00403b75
  403c3c:	00413678 	.word	0x00413678
  403c40:	0041367c 	.word	0x0041367c
  403c44:	00413684 	.word	0x00413684
  403c48:	0041368c 	.word	0x0041368c

00403c4c <apply_time_factor>:

static int64_t apply_time_factor(struct inv_icm426xx * s, struct clk_calib *clk_cal, float dt_fifo)
{
  403c4c:	b590      	push	{r4, r7, lr}
  403c4e:	b087      	sub	sp, #28
  403c50:	af00      	add	r7, sp, #0
  403c52:	60f8      	str	r0, [r7, #12]
  403c54:	60b9      	str	r1, [r7, #8]
  403c56:	ed87 0a01 	vstr	s0, [r7, #4]
	// Retrieve coef that needs to be applied
	float time_factor = clk_cal->coef[get_current_clock_source(s)];
  403c5a:	68f8      	ldr	r0, [r7, #12]
  403c5c:	4b19      	ldr	r3, [pc, #100]	; (403cc4 <apply_time_factor+0x78>)
  403c5e:	4798      	blx	r3
  403c60:	4603      	mov	r3, r0
  403c62:	68ba      	ldr	r2, [r7, #8]
  403c64:	3302      	adds	r3, #2
  403c66:	009b      	lsls	r3, r3, #2
  403c68:	4413      	add	r3, r2
  403c6a:	3304      	adds	r3, #4
  403c6c:	681b      	ldr	r3, [r3, #0]
  403c6e:	617b      	str	r3, [r7, #20]

	float dt_float = ((dt_fifo) * (time_factor)) + clk_cal->dt_error;
  403c70:	ed97 7a01 	vldr	s14, [r7, #4]
  403c74:	edd7 7a05 	vldr	s15, [r7, #20]
  403c78:	ee27 7a27 	vmul.f32	s14, s14, s15
  403c7c:	68bb      	ldr	r3, [r7, #8]
  403c7e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
  403c82:	ee77 7a27 	vadd.f32	s15, s14, s15
  403c86:	edc7 7a04 	vstr	s15, [r7, #16]
	clk_cal->dt_error = dt_float - (int64_t)(dt_float);
  403c8a:	4b0f      	ldr	r3, [pc, #60]	; (403cc8 <apply_time_factor+0x7c>)
  403c8c:	6938      	ldr	r0, [r7, #16]
  403c8e:	4798      	blx	r3
  403c90:	460a      	mov	r2, r1
  403c92:	4601      	mov	r1, r0
  403c94:	4b0d      	ldr	r3, [pc, #52]	; (403ccc <apply_time_factor+0x80>)
  403c96:	4608      	mov	r0, r1
  403c98:	4611      	mov	r1, r2
  403c9a:	4798      	blx	r3
  403c9c:	ee07 0a10 	vmov	s14, r0
  403ca0:	edd7 7a04 	vldr	s15, [r7, #16]
  403ca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403ca8:	68bb      	ldr	r3, [r7, #8]
  403caa:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	return (int64_t)(dt_float);
  403cae:	4b06      	ldr	r3, [pc, #24]	; (403cc8 <apply_time_factor+0x7c>)
  403cb0:	6938      	ldr	r0, [r7, #16]
  403cb2:	4798      	blx	r3
  403cb4:	4603      	mov	r3, r0
  403cb6:	460c      	mov	r4, r1
}
  403cb8:	4618      	mov	r0, r3
  403cba:	4621      	mov	r1, r4
  403cbc:	371c      	adds	r7, #28
  403cbe:	46bd      	mov	sp, r7
  403cc0:	bd90      	pop	{r4, r7, pc}
  403cc2:	bf00      	nop
  403cc4:	00403b75 	.word	0x00403b75
  403cc8:	0040eea5 	.word	0x0040eea5
  403ccc:	0040ee29 	.word	0x0040ee29

00403cd0 <get_fifo_timestamp_resolution>:

static float get_fifo_timestamp_resolution(struct inv_icm426xx * s)
{
  403cd0:	b580      	push	{r7, lr}
  403cd2:	b082      	sub	sp, #8
  403cd4:	af00      	add	r7, sp, #0
  403cd6:	6078      	str	r0, [r7, #4]
	return (float)inv_icm426xx_get_fifo_timestamp_resolution_us_q24(s)/(1UL<<24);
  403cd8:	6878      	ldr	r0, [r7, #4]
  403cda:	4b08      	ldr	r3, [pc, #32]	; (403cfc <get_fifo_timestamp_resolution+0x2c>)
  403cdc:	4798      	blx	r3
  403cde:	ee07 0a90 	vmov	s15, r0
  403ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  403ce6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 403d00 <get_fifo_timestamp_resolution+0x30>
  403cea:	eec7 6a87 	vdiv.f32	s13, s15, s14
  403cee:	eef0 7a66 	vmov.f32	s15, s13
}
  403cf2:	eeb0 0a67 	vmov.f32	s0, s15
  403cf6:	3708      	adds	r7, #8
  403cf8:	46bd      	mov	sp, r7
  403cfa:	bd80      	pop	{r7, pc}
  403cfc:	00403281 	.word	0x00403281
  403d00:	4b800000 	.word	0x4b800000

00403d04 <get_reg_timestamp_resolution>:

static float get_reg_timestamp_resolution(struct inv_icm426xx * s)
{
  403d04:	b580      	push	{r7, lr}
  403d06:	b082      	sub	sp, #8
  403d08:	af00      	add	r7, sp, #0
  403d0a:	6078      	str	r0, [r7, #4]
	return (float)inv_icm426xx_get_reg_timestamp_resolution_us_q24(s)/(1UL<<24);
  403d0c:	6878      	ldr	r0, [r7, #4]
  403d0e:	4b08      	ldr	r3, [pc, #32]	; (403d30 <get_reg_timestamp_resolution+0x2c>)
  403d10:	4798      	blx	r3
  403d12:	ee07 0a90 	vmov	s15, r0
  403d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
  403d1a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 403d34 <get_reg_timestamp_resolution+0x30>
  403d1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  403d22:	eef0 7a66 	vmov.f32	s15, s13
}
  403d26:	eeb0 0a67 	vmov.f32	s0, s15
  403d2a:	3708      	adds	r7, #8
  403d2c:	46bd      	mov	sp, r7
  403d2e:	bd80      	pop	{r7, pc}
  403d30:	00403311 	.word	0x00403311
  403d34:	4b800000 	.word	0x4b800000

00403d38 <inv_helper_extend_timestamp_from_fifo>:
	                                      struct clk_calib *clk_cal, 
	                                      uint16_t cur_fifo_timestamp, 
	                                      uint64_t irq_timestamp, 
	                                      int sensor_mask, 
	                                      uint64_t * timestamp)
{
  403d38:	b590      	push	{r4, r7, lr}
  403d3a:	b08b      	sub	sp, #44	; 0x2c
  403d3c:	af02      	add	r7, sp, #8
  403d3e:	60f8      	str	r0, [r7, #12]
  403d40:	60b9      	str	r1, [r7, #8]
  403d42:	4613      	mov	r3, r2
  403d44:	80fb      	strh	r3, [r7, #6]
	enum inv_icm426xx_sensor sensor_ref;
	float dt_fifo;
	int64_t dt_us;

	// by default we assume there is nothing in FIFO. timestamp is reset.
	*timestamp = 0;
  403d46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403d48:	f04f 0300 	mov.w	r3, #0
  403d4c:	f04f 0400 	mov.w	r4, #0
  403d50:	e9c2 3400 	strd	r3, r4, [r2]

	// If FSYNC event is received, the FSYNC delay will replace the timestamp field
	if (sensor_mask & (1 << INV_ICM426XX_SENSOR_FSYNC_EVENT)) { 
  403d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403d56:	f003 0304 	and.w	r3, r3, #4
  403d5a:	2b00      	cmp	r3, #0
  403d5c:	d011      	beq.n	403d82 <inv_helper_extend_timestamp_from_fifo+0x4a>
		// Use timestamp from MCU
		*timestamp = irq_timestamp;
  403d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403d60:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  403d64:	e9c2 3400 	strd	r3, r4, [r2]
		clk_cal->last_fifo_timestamp[INV_ICM426XX_SENSOR_ACCEL] = 0xDEADBEEF;
  403d68:	68bb      	ldr	r3, [r7, #8]
  403d6a:	4a5c      	ldr	r2, [pc, #368]	; (403edc <inv_helper_extend_timestamp_from_fifo+0x1a4>)
  403d6c:	669a      	str	r2, [r3, #104]	; 0x68
		clk_cal->last_fifo_timestamp[INV_ICM426XX_SENSOR_GYRO] = 0xDEADBEEF;
  403d6e:	68bb      	ldr	r3, [r7, #8]
  403d70:	4a5a      	ldr	r2, [pc, #360]	; (403edc <inv_helper_extend_timestamp_from_fifo+0x1a4>)
  403d72:	66da      	str	r2, [r3, #108]	; 0x6c
		clk_cal->dt_error = 0; // reset error on deltatime*/
  403d74:	68bb      	ldr	r3, [r7, #8]
  403d76:	f04f 0200 	mov.w	r2, #0
  403d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return 0;
  403d7e:	2300      	movs	r3, #0
  403d80:	e0a8      	b.n	403ed4 <inv_helper_extend_timestamp_from_fifo+0x19c>
	} else if (!inv_icm426xx_get_clkin_rtc_status(s)) { 
  403d82:	68f8      	ldr	r0, [r7, #12]
  403d84:	4b56      	ldr	r3, [pc, #344]	; (403ee0 <inv_helper_extend_timestamp_from_fifo+0x1a8>)
  403d86:	4798      	blx	r3
  403d88:	4603      	mov	r3, r0
  403d8a:	2b00      	cmp	r3, #0
  403d8c:	d107      	bne.n	403d9e <inv_helper_extend_timestamp_from_fifo+0x66>
		// Update calibration coefficient unless RTC is enabled
		clock_calibration_update(s, clk_cal, irq_timestamp, cur_fifo_timestamp);	
  403d8e:	88fb      	ldrh	r3, [r7, #6]
  403d90:	9300      	str	r3, [sp, #0]
  403d92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
  403d96:	68b9      	ldr	r1, [r7, #8]
  403d98:	68f8      	ldr	r0, [r7, #12]
  403d9a:	4c52      	ldr	r4, [pc, #328]	; (403ee4 <inv_helper_extend_timestamp_from_fifo+0x1ac>)
  403d9c:	47a0      	blx	r4
	}

	// Select which sensor to use for reference (sensor_ref) depending on FIFO content
	if ((sensor_mask & (1 << INV_ICM426XX_SENSOR_ACCEL)) && (sensor_mask & (1 << INV_ICM426XX_SENSOR_GYRO))) {
  403d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403da0:	f003 0301 	and.w	r3, r3, #1
  403da4:	2b00      	cmp	r3, #0
  403da6:	d00a      	beq.n	403dbe <inv_helper_extend_timestamp_from_fifo+0x86>
  403da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403daa:	f003 0302 	and.w	r3, r3, #2
  403dae:	2b00      	cmp	r3, #0
  403db0:	d005      	beq.n	403dbe <inv_helper_extend_timestamp_from_fifo+0x86>
		// ACC and GYR are in FIFO, use the fastest sensor
		sensor_ref = get_fastest_sensor(s);
  403db2:	68f8      	ldr	r0, [r7, #12]
  403db4:	4b4c      	ldr	r3, [pc, #304]	; (403ee8 <inv_helper_extend_timestamp_from_fifo+0x1b0>)
  403db6:	4798      	blx	r3
  403db8:	4603      	mov	r3, r0
  403dba:	77fb      	strb	r3, [r7, #31]
  403dbc:	e01b      	b.n	403df6 <inv_helper_extend_timestamp_from_fifo+0xbe>
	} else if (sensor_mask & (1 << INV_ICM426XX_SENSOR_ACCEL)) {
  403dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403dc0:	f003 0301 	and.w	r3, r3, #1
  403dc4:	2b00      	cmp	r3, #0
  403dc6:	d002      	beq.n	403dce <inv_helper_extend_timestamp_from_fifo+0x96>
		// ACC in FIFO
		sensor_ref = INV_ICM426XX_SENSOR_ACCEL; 
  403dc8:	2300      	movs	r3, #0
  403dca:	77fb      	strb	r3, [r7, #31]
  403dcc:	e013      	b.n	403df6 <inv_helper_extend_timestamp_from_fifo+0xbe>
	} else if (sensor_mask & (1 << INV_ICM426XX_SENSOR_GYRO)) {
  403dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403dd0:	f003 0302 	and.w	r3, r3, #2
  403dd4:	2b00      	cmp	r3, #0
  403dd6:	d002      	beq.n	403dde <inv_helper_extend_timestamp_from_fifo+0xa6>
		// GYR in FIFO
		sensor_ref = INV_ICM426XX_SENSOR_GYRO; 
  403dd8:	2301      	movs	r3, #1
  403dda:	77fb      	strb	r3, [r7, #31]
  403ddc:	e00b      	b.n	403df6 <inv_helper_extend_timestamp_from_fifo+0xbe>
	} else {
		// Only temperature is in the FIFO, use MCU timestamp
		*timestamp = irq_timestamp;
  403dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403de0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  403de4:	e9c2 3400 	strd	r3, r4, [r2]
		clk_cal->dt_error = 0; // reset error on deltatime
  403de8:	68bb      	ldr	r3, [r7, #8]
  403dea:	f04f 0200 	mov.w	r2, #0
  403dee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return 0; // return here, no need to execute the rest
  403df2:	2300      	movs	r3, #0
  403df4:	e06e      	b.n	403ed4 <inv_helper_extend_timestamp_from_fifo+0x19c>
	}

	if(clk_cal->last_fifo_timestamp[sensor_ref] == 0xDEADBEEF) {
  403df6:	7ffa      	ldrb	r2, [r7, #31]
  403df8:	68bb      	ldr	r3, [r7, #8]
  403dfa:	321a      	adds	r2, #26
  403dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403e00:	4a36      	ldr	r2, [pc, #216]	; (403edc <inv_helper_extend_timestamp_from_fifo+0x1a4>)
  403e02:	4293      	cmp	r3, r2
  403e04:	d10a      	bne.n	403e1c <inv_helper_extend_timestamp_from_fifo+0xe4>
		// no last timestamp from FIFO to compute a valid delta, so timestamp from FIFO not used
		*timestamp = irq_timestamp;
  403e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403e08:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  403e0c:	e9c2 3400 	strd	r3, r4, [r2]
		clk_cal->dt_error = 0; // reset error on deltatime
  403e10:	68bb      	ldr	r3, [r7, #8]
  403e12:	f04f 0200 	mov.w	r2, #0
  403e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  403e1a:	e03e      	b.n	403e9a <inv_helper_extend_timestamp_from_fifo+0x162>
	} else {
		// last timestamp from FIFO is available to compute a valid dt based on read timestamp from FIFO
		dt_fifo = (float)(cur_fifo_timestamp - (uint16_t)clk_cal->last_fifo_timestamp[sensor_ref]);
  403e1c:	88fb      	ldrh	r3, [r7, #6]
  403e1e:	7ff9      	ldrb	r1, [r7, #31]
  403e20:	68ba      	ldr	r2, [r7, #8]
  403e22:	311a      	adds	r1, #26
  403e24:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  403e28:	b292      	uxth	r2, r2
  403e2a:	1a9b      	subs	r3, r3, r2
  403e2c:	ee07 3a90 	vmov	s15, r3
  403e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403e34:	edc7 7a06 	vstr	s15, [r7, #24]
		
		// Handle rollover
		if (dt_fifo <= 0)
  403e38:	edd7 7a06 	vldr	s15, [r7, #24]
  403e3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  403e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403e44:	d807      	bhi.n	403e56 <inv_helper_extend_timestamp_from_fifo+0x11e>
			dt_fifo += (UINT16_MAX+1);
  403e46:	edd7 7a06 	vldr	s15, [r7, #24]
  403e4a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 403eec <inv_helper_extend_timestamp_from_fifo+0x1b4>
  403e4e:	ee77 7a87 	vadd.f32	s15, s15, s14
  403e52:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply proper timestamp resolution
		dt_fifo *= get_fifo_timestamp_resolution(s);
  403e56:	68f8      	ldr	r0, [r7, #12]
  403e58:	4b25      	ldr	r3, [pc, #148]	; (403ef0 <inv_helper_extend_timestamp_from_fifo+0x1b8>)
  403e5a:	4798      	blx	r3
  403e5c:	eeb0 7a40 	vmov.f32	s14, s0
  403e60:	edd7 7a06 	vldr	s15, [r7, #24]
  403e64:	ee67 7a87 	vmul.f32	s15, s15, s14
  403e68:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply calibration coefficient
		dt_us = apply_time_factor(s, clk_cal, dt_fifo);
  403e6c:	ed97 0a06 	vldr	s0, [r7, #24]
  403e70:	68b9      	ldr	r1, [r7, #8]
  403e72:	68f8      	ldr	r0, [r7, #12]
  403e74:	4b1f      	ldr	r3, [pc, #124]	; (403ef4 <inv_helper_extend_timestamp_from_fifo+0x1bc>)
  403e76:	4798      	blx	r3
  403e78:	e9c7 0104 	strd	r0, r1, [r7, #16]

		// Compute timestamp
		*timestamp = clk_cal->last_timestamp_sent[sensor_ref] + dt_us;
  403e7c:	7ffb      	ldrb	r3, [r7, #31]
  403e7e:	68ba      	ldr	r2, [r7, #8]
  403e80:	3303      	adds	r3, #3
  403e82:	00db      	lsls	r3, r3, #3
  403e84:	4413      	add	r3, r2
  403e86:	e9d3 1200 	ldrd	r1, r2, [r3]
  403e8a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  403e8e:	185b      	adds	r3, r3, r1
  403e90:	eb44 0402 	adc.w	r4, r4, r2
  403e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  403e96:	e9c2 3400 	strd	r3, r4, [r2]
	}
	
	if (sensor_mask & (1 << INV_ICM426XX_SENSOR_ACCEL)) {
  403e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403e9c:	f003 0301 	and.w	r3, r3, #1
  403ea0:	2b00      	cmp	r3, #0
  403ea2:	d008      	beq.n	403eb6 <inv_helper_extend_timestamp_from_fifo+0x17e>
		clk_cal->last_fifo_timestamp[INV_ICM426XX_SENSOR_ACCEL] = cur_fifo_timestamp;
  403ea4:	88fa      	ldrh	r2, [r7, #6]
  403ea6:	68bb      	ldr	r3, [r7, #8]
  403ea8:	669a      	str	r2, [r3, #104]	; 0x68
		clk_cal->last_timestamp_sent[INV_ICM426XX_SENSOR_ACCEL] = *timestamp;
  403eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403eac:	e9d3 3400 	ldrd	r3, r4, [r3]
  403eb0:	68ba      	ldr	r2, [r7, #8]
  403eb2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	}

	if (sensor_mask & (1 << INV_ICM426XX_SENSOR_GYRO)) {
  403eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403eb8:	f003 0302 	and.w	r3, r3, #2
  403ebc:	2b00      	cmp	r3, #0
  403ebe:	d008      	beq.n	403ed2 <inv_helper_extend_timestamp_from_fifo+0x19a>
		clk_cal->last_fifo_timestamp[INV_ICM426XX_SENSOR_GYRO] = cur_fifo_timestamp;
  403ec0:	88fa      	ldrh	r2, [r7, #6]
  403ec2:	68bb      	ldr	r3, [r7, #8]
  403ec4:	66da      	str	r2, [r3, #108]	; 0x6c
		clk_cal->last_timestamp_sent[INV_ICM426XX_SENSOR_GYRO] = *timestamp;
  403ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403ec8:	e9d3 3400 	ldrd	r3, r4, [r3]
  403ecc:	68ba      	ldr	r2, [r7, #8]
  403ece:	e9c2 3408 	strd	r3, r4, [r2, #32]
	}

	return 0;
  403ed2:	2300      	movs	r3, #0
}
  403ed4:	4618      	mov	r0, r3
  403ed6:	3724      	adds	r7, #36	; 0x24
  403ed8:	46bd      	mov	sp, r7
  403eda:	bd90      	pop	{r4, r7, pc}
  403edc:	deadbeef 	.word	0xdeadbeef
  403ee0:	00403021 	.word	0x00403021
  403ee4:	004043a9 	.word	0x004043a9
  403ee8:	00404781 	.word	0x00404781
  403eec:	47800000 	.word	0x47800000
  403ef0:	00403cd1 	.word	0x00403cd1
  403ef4:	00403c4d 	.word	0x00403c4d

00403ef8 <clock_calibration_reset>:

void clock_calibration_reset(struct inv_icm426xx * s, struct clk_calib *clk_cal)
{
  403ef8:	b590      	push	{r4, r7, lr}
  403efa:	b083      	sub	sp, #12
  403efc:	af00      	add	r7, sp, #0
  403efe:	6078      	str	r0, [r7, #4]
  403f00:	6039      	str	r1, [r7, #0]
	/* Let's compute the number of samples before calibration based on the ODR configured at POR */
	clk_cal->initial_recalib_after_n_samples = NUMBER_OF_SAMPLES_FOR_ODR(inv_icm426xx_convert_odr_bitfield_to_us(ICM426XX_ACCEL_CONFIG0_ODR_200_HZ));
  403f02:	2007      	movs	r0, #7
  403f04:	4b16      	ldr	r3, [pc, #88]	; (403f60 <clock_calibration_reset+0x68>)
  403f06:	4798      	blx	r3
  403f08:	4602      	mov	r2, r0
  403f0a:	4b16      	ldr	r3, [pc, #88]	; (403f64 <clock_calibration_reset+0x6c>)
  403f0c:	fbb3 f4f2 	udiv	r4, r3, r2
  403f10:	2007      	movs	r0, #7
  403f12:	4b13      	ldr	r3, [pc, #76]	; (403f60 <clock_calibration_reset+0x68>)
  403f14:	4798      	blx	r3
  403f16:	4602      	mov	r2, r0
  403f18:	4b12      	ldr	r3, [pc, #72]	; (403f64 <clock_calibration_reset+0x6c>)
  403f1a:	fbb3 f1f2 	udiv	r1, r3, r2
  403f1e:	fb02 f201 	mul.w	r2, r2, r1
  403f22:	1a9b      	subs	r3, r3, r2
  403f24:	4423      	add	r3, r4
  403f26:	461a      	mov	r2, r3
  403f28:	683b      	ldr	r3, [r7, #0]
  403f2a:	601a      	str	r2, [r3, #0]
	clk_cal->recalib_after_n_samples = clk_cal->initial_recalib_after_n_samples;
  403f2c:	683b      	ldr	r3, [r7, #0]
  403f2e:	681a      	ldr	r2, [r3, #0]
  403f30:	683b      	ldr	r3, [r7, #0]
  403f32:	605a      	str	r2, [r3, #4]
	clk_cal->on_going = 0;
  403f34:	683b      	ldr	r3, [r7, #0]
  403f36:	2200      	movs	r2, #0
  403f38:	721a      	strb	r2, [r3, #8]
	clk_cal->dt_error = 0;
  403f3a:	683b      	ldr	r3, [r7, #0]
  403f3c:	f04f 0200 	mov.w	r2, #0
  403f40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	clock_calibration_reset_sensors_stats(s, clk_cal, INV_ICM426XX_SENSOR_ACCEL);
  403f44:	2200      	movs	r2, #0
  403f46:	6839      	ldr	r1, [r7, #0]
  403f48:	6878      	ldr	r0, [r7, #4]
  403f4a:	4b07      	ldr	r3, [pc, #28]	; (403f68 <clock_calibration_reset+0x70>)
  403f4c:	4798      	blx	r3
	clock_calibration_reset_sensors_stats(s, clk_cal, INV_ICM426XX_SENSOR_GYRO);
  403f4e:	2201      	movs	r2, #1
  403f50:	6839      	ldr	r1, [r7, #0]
  403f52:	6878      	ldr	r0, [r7, #4]
  403f54:	4b04      	ldr	r3, [pc, #16]	; (403f68 <clock_calibration_reset+0x70>)
  403f56:	4798      	blx	r3
}
  403f58:	bf00      	nop
  403f5a:	370c      	adds	r7, #12
  403f5c:	46bd      	mov	sp, r7
  403f5e:	bd90      	pop	{r4, r7, pc}
  403f60:	00402b49 	.word	0x00402b49
  403f64:	00124f80 	.word	0x00124f80
  403f68:	00403f6d 	.word	0x00403f6d

00403f6c <clock_calibration_reset_sensors_stats>:

void clock_calibration_reset_sensors_stats(struct inv_icm426xx * s, struct clk_calib *clk_cal, enum inv_icm426xx_sensor sensor)
{
  403f6c:	b490      	push	{r4, r7}
  403f6e:	b084      	sub	sp, #16
  403f70:	af00      	add	r7, sp, #0
  403f72:	60f8      	str	r0, [r7, #12]
  403f74:	60b9      	str	r1, [r7, #8]
  403f76:	4613      	mov	r3, r2
  403f78:	71fb      	strb	r3, [r7, #7]
	clk_cal->last_timestamp_sent[sensor] = 0;
  403f7a:	79fb      	ldrb	r3, [r7, #7]
  403f7c:	68ba      	ldr	r2, [r7, #8]
  403f7e:	3303      	adds	r3, #3
  403f80:	00db      	lsls	r3, r3, #3
  403f82:	441a      	add	r2, r3
  403f84:	f04f 0300 	mov.w	r3, #0
  403f88:	f04f 0400 	mov.w	r4, #0
  403f8c:	e9c2 3400 	strd	r3, r4, [r2]
	clk_cal->last_fifo_timestamp[sensor] = 0xDEADBEEF;
  403f90:	79fa      	ldrb	r2, [r7, #7]
  403f92:	68bb      	ldr	r3, [r7, #8]
  403f94:	321a      	adds	r2, #26
  403f96:	4904      	ldr	r1, [pc, #16]	; (403fa8 <clock_calibration_reset_sensors_stats+0x3c>)
  403f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403f9c:	bf00      	nop
  403f9e:	3710      	adds	r7, #16
  403fa0:	46bd      	mov	sp, r7
  403fa2:	bc90      	pop	{r4, r7}
  403fa4:	4770      	bx	lr
  403fa6:	bf00      	nop
  403fa8:	deadbeef 	.word	0xdeadbeef

00403fac <clock_calibration_init>:
	return rc;
}


int clock_calibration_init(struct inv_icm426xx * s, struct clk_calib *clk_cal)
{
  403fac:	b580      	push	{r7, lr}
  403fae:	b084      	sub	sp, #16
  403fb0:	af00      	add	r7, sp, #0
  403fb2:	6078      	str	r0, [r7, #4]
  403fb4:	6039      	str	r1, [r7, #0]
	int rc;
	
	clock_calibration_reset(s, clk_cal);
  403fb6:	6839      	ldr	r1, [r7, #0]
  403fb8:	6878      	ldr	r0, [r7, #4]
  403fba:	4b06      	ldr	r3, [pc, #24]	; (403fd4 <clock_calibration_init+0x28>)
  403fbc:	4798      	blx	r3
	rc = clock_calibration_initial(s, clk_cal);
  403fbe:	6839      	ldr	r1, [r7, #0]
  403fc0:	6878      	ldr	r0, [r7, #4]
  403fc2:	4b05      	ldr	r3, [pc, #20]	; (403fd8 <clock_calibration_init+0x2c>)
  403fc4:	4798      	blx	r3
  403fc6:	60f8      	str	r0, [r7, #12]
	
	return rc;
  403fc8:	68fb      	ldr	r3, [r7, #12]
}
  403fca:	4618      	mov	r0, r3
  403fcc:	3710      	adds	r7, #16
  403fce:	46bd      	mov	sp, r7
  403fd0:	bd80      	pop	{r7, pc}
  403fd2:	bf00      	nop
  403fd4:	00403ef9 	.word	0x00403ef9
  403fd8:	00404151 	.word	0x00404151

00403fdc <compute_calibration_coefficient>:

static float compute_calibration_coefficient(struct inv_icm426xx * s, uint32_t duration_us)
{
  403fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  403fde:	ed2d 8b02 	vpush	{d8}
  403fe2:	b091      	sub	sp, #68	; 0x44
  403fe4:	af00      	add	r7, sp, #0
  403fe6:	60f8      	str	r0, [r7, #12]
  403fe8:	60b9      	str	r1, [r7, #8]
	uint8_t nb_rollover;
	float tICM_rollover;
	float tICM_1f, tICM_2f;

	/* Get the MCU and ICM time */
	inv_helper_disable_irq();
  403fea:	4b52      	ldr	r3, [pc, #328]	; (404134 <compute_calibration_coefficient+0x158>)
  403fec:	4798      	blx	r3
	tMCU_1 = inv_icm426xx_get_time_us();
  403fee:	4b52      	ldr	r3, [pc, #328]	; (404138 <compute_calibration_coefficient+0x15c>)
  403ff0:	4798      	blx	r3
  403ff2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	inv_icm426xx_get_current_timestamp(s, &tICM_1);
  403ff6:	f107 0318 	add.w	r3, r7, #24
  403ffa:	4619      	mov	r1, r3
  403ffc:	68f8      	ldr	r0, [r7, #12]
  403ffe:	4b4f      	ldr	r3, [pc, #316]	; (40413c <compute_calibration_coefficient+0x160>)
  404000:	4798      	blx	r3
	inv_helper_enable_irq();
  404002:	4b4f      	ldr	r3, [pc, #316]	; (404140 <compute_calibration_coefficient+0x164>)
  404004:	4798      	blx	r3

	/* Wait 200ms */
	while(inv_icm426xx_get_time_us() < (tMCU_1 + duration_us));
  404006:	bf00      	nop
  404008:	4b4b      	ldr	r3, [pc, #300]	; (404138 <compute_calibration_coefficient+0x15c>)
  40400a:	4798      	blx	r3
  40400c:	4605      	mov	r5, r0
  40400e:	460e      	mov	r6, r1
  404010:	68bb      	ldr	r3, [r7, #8]
  404012:	4619      	mov	r1, r3
  404014:	f04f 0200 	mov.w	r2, #0
  404018:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  40401c:	185b      	adds	r3, r3, r1
  40401e:	eb44 0402 	adc.w	r4, r4, r2
  404022:	42a6      	cmp	r6, r4
  404024:	bf08      	it	eq
  404026:	429d      	cmpeq	r5, r3
  404028:	d3ee      	bcc.n	404008 <compute_calibration_coefficient+0x2c>

	/* Get the MCU and ICM time once again */
	inv_helper_disable_irq();
  40402a:	4b42      	ldr	r3, [pc, #264]	; (404134 <compute_calibration_coefficient+0x158>)
  40402c:	4798      	blx	r3
	tMCU_2 = inv_icm426xx_get_time_us();
  40402e:	4b42      	ldr	r3, [pc, #264]	; (404138 <compute_calibration_coefficient+0x15c>)
  404030:	4798      	blx	r3
  404032:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	inv_icm426xx_get_current_timestamp(s, &tICM_2);
  404036:	f107 0314 	add.w	r3, r7, #20
  40403a:	4619      	mov	r1, r3
  40403c:	68f8      	ldr	r0, [r7, #12]
  40403e:	4b3f      	ldr	r3, [pc, #252]	; (40413c <compute_calibration_coefficient+0x160>)
  404040:	4798      	blx	r3
	inv_helper_enable_irq();
  404042:	4b3f      	ldr	r3, [pc, #252]	; (404140 <compute_calibration_coefficient+0x164>)
  404044:	4798      	blx	r3
	
	tICM_2f = (float)tICM_2 * get_reg_timestamp_resolution(s);
  404046:	697b      	ldr	r3, [r7, #20]
  404048:	ee07 3a90 	vmov	s15, r3
  40404c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  404050:	68f8      	ldr	r0, [r7, #12]
  404052:	4b3c      	ldr	r3, [pc, #240]	; (404144 <compute_calibration_coefficient+0x168>)
  404054:	4798      	blx	r3
  404056:	eef0 7a40 	vmov.f32	s15, s0
  40405a:	ee68 7a27 	vmul.f32	s15, s16, s15
  40405e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	tICM_1f = (float)tICM_1 * get_reg_timestamp_resolution(s);
  404062:	69bb      	ldr	r3, [r7, #24]
  404064:	ee07 3a90 	vmov	s15, r3
  404068:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  40406c:	68f8      	ldr	r0, [r7, #12]
  40406e:	4b35      	ldr	r3, [pc, #212]	; (404144 <compute_calibration_coefficient+0x168>)
  404070:	4798      	blx	r3
  404072:	eef0 7a40 	vmov.f32	s15, s0
  404076:	ee68 7a27 	vmul.f32	s15, s16, s15
  40407a:	edc7 7a08 	vstr	s15, [r7, #32]
	tICM_rollover = (float) ROLLOVER_20BITS * get_reg_timestamp_resolution(s);
  40407e:	68f8      	ldr	r0, [r7, #12]
  404080:	4b30      	ldr	r3, [pc, #192]	; (404144 <compute_calibration_coefficient+0x168>)
  404082:	4798      	blx	r3
  404084:	eeb0 7a40 	vmov.f32	s14, s0
  404088:	eddf 7a2f 	vldr	s15, [pc, #188]	; 404148 <compute_calibration_coefficient+0x16c>
  40408c:	ee67 7a27 	vmul.f32	s15, s14, s15
  404090:	edc7 7a07 	vstr	s15, [r7, #28]

	/* Compute the time factor in order to align the MCU time to the icm426xx timestamp outputted from the FIFO */
	nb_rollover = (uint8_t)((tMCU_2 - tMCU_1) / tICM_rollover);
  404094:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
  404098:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  40409c:	1acb      	subs	r3, r1, r3
  40409e:	eb62 0404 	sbc.w	r4, r2, r4
  4040a2:	4a2a      	ldr	r2, [pc, #168]	; (40414c <compute_calibration_coefficient+0x170>)
  4040a4:	4618      	mov	r0, r3
  4040a6:	4621      	mov	r1, r4
  4040a8:	4790      	blx	r2
  4040aa:	ee06 0a90 	vmov	s13, r0
  4040ae:	ed97 7a07 	vldr	s14, [r7, #28]
  4040b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
  4040b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4040ba:	edc7 7a01 	vstr	s15, [r7, #4]
  4040be:	793b      	ldrb	r3, [r7, #4]
  4040c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* If tICM_2 is smaller than tICM_1, there was one more rollover than what we estimated */
	if (tICM_2f < tICM_1f)
  4040c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
  4040c8:	edd7 7a08 	vldr	s15, [r7, #32]
  4040cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
  4040d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4040d4:	d504      	bpl.n	4040e0 <compute_calibration_coefficient+0x104>
		nb_rollover += 1;
  4040d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
  4040da:	3301      	adds	r3, #1
  4040dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	return (float) (tMCU_2 - tMCU_1) / (float) (nb_rollover * tICM_rollover + tICM_2f - tICM_1f);
  4040e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
  4040e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
  4040e8:	1acb      	subs	r3, r1, r3
  4040ea:	eb62 0404 	sbc.w	r4, r2, r4
  4040ee:	4a17      	ldr	r2, [pc, #92]	; (40414c <compute_calibration_coefficient+0x170>)
  4040f0:	4618      	mov	r0, r3
  4040f2:	4621      	mov	r1, r4
  4040f4:	4790      	blx	r2
  4040f6:	ee06 0a90 	vmov	s13, r0
  4040fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
  4040fe:	ee07 3a90 	vmov	s15, r3
  404102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  404106:	edd7 7a07 	vldr	s15, [r7, #28]
  40410a:	ee27 7a27 	vmul.f32	s14, s14, s15
  40410e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
  404112:	ee37 7a27 	vadd.f32	s14, s14, s15
  404116:	edd7 7a08 	vldr	s15, [r7, #32]
  40411a:	ee77 7a67 	vsub.f32	s15, s14, s15
  40411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  404122:	eef0 7a47 	vmov.f32	s15, s14
}
  404126:	eeb0 0a67 	vmov.f32	s0, s15
  40412a:	3744      	adds	r7, #68	; 0x44
  40412c:	46bd      	mov	sp, r7
  40412e:	ecbd 8b02 	vpop	{d8}
  404132:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404134:	00401659 	.word	0x00401659
  404138:	00401641 	.word	0x00401641
  40413c:	00402f95 	.word	0x00402f95
  404140:	00401669 	.word	0x00401669
  404144:	00403d05 	.word	0x00403d05
  404148:	49800000 	.word	0x49800000
  40414c:	0040ee19 	.word	0x0040ee19

00404150 <clock_calibration_initial>:

static int clock_calibration_initial(struct inv_icm426xx * s, struct clk_calib *clk_cal)
{
  404150:	b5f0      	push	{r4, r5, r6, r7, lr}
  404152:	b089      	sub	sp, #36	; 0x24
  404154:	af00      	add	r7, sp, #0
  404156:	6078      	str	r0, [r7, #4]
  404158:	6039      	str	r1, [r7, #0]
	int status = 0;
  40415a:	2300      	movs	r3, #0
  40415c:	61fb      	str	r3, [r7, #28]
	uint8_t prev_src0, prev_src8, data;
	
	/*
	 * Enable the ICM time register reading
	 */
	status |= inv_icm426xx_enable_timestamp_to_register(s);
  40415e:	6878      	ldr	r0, [r7, #4]
  404160:	4b7f      	ldr	r3, [pc, #508]	; (404360 <clock_calibration_initial+0x210>)
  404162:	4798      	blx	r3
  404164:	4602      	mov	r2, r0
  404166:	69fb      	ldr	r3, [r7, #28]
  404168:	4313      	orrs	r3, r2
  40416a:	61fb      	str	r3, [r7, #28]
	/*
	 * Power ON the ICM
	 * Enable gyro (the gyro clock is used for combo accel/gyro clocking)
	 * But disable interrupt since we don't want the data here
	 */
	data = 0;
  40416c:	2300      	movs	r3, #0
  40416e:	737b      	strb	r3, [r7, #13]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE0, 1, &prev_src0);
  404170:	f107 030f 	add.w	r3, r7, #15
  404174:	2201      	movs	r2, #1
  404176:	2165      	movs	r1, #101	; 0x65
  404178:	6878      	ldr	r0, [r7, #4]
  40417a:	4c7a      	ldr	r4, [pc, #488]	; (404364 <clock_calibration_initial+0x214>)
  40417c:	47a0      	blx	r4
  40417e:	4602      	mov	r2, r0
  404180:	69fb      	ldr	r3, [r7, #28]
  404182:	4313      	orrs	r3, r2
  404184:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE0, 1, &data);
  404186:	f107 030d 	add.w	r3, r7, #13
  40418a:	2201      	movs	r2, #1
  40418c:	2165      	movs	r1, #101	; 0x65
  40418e:	6878      	ldr	r0, [r7, #4]
  404190:	4c75      	ldr	r4, [pc, #468]	; (404368 <clock_calibration_initial+0x218>)
  404192:	47a0      	blx	r4
  404194:	4602      	mov	r2, r0
  404196:	69fb      	ldr	r3, [r7, #28]
  404198:	4313      	orrs	r3, r2
  40419a:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  40419c:	2104      	movs	r1, #4
  40419e:	6878      	ldr	r0, [r7, #4]
  4041a0:	4b72      	ldr	r3, [pc, #456]	; (40436c <clock_calibration_initial+0x21c>)
  4041a2:	4798      	blx	r3
  4041a4:	4602      	mov	r2, r0
  4041a6:	69fb      	ldr	r3, [r7, #28]
  4041a8:	4313      	orrs	r3, r2
  4041aa:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE8_B4, 1, &prev_src8);
  4041ac:	f107 030e 	add.w	r3, r7, #14
  4041b0:	2201      	movs	r2, #1
  4041b2:	214f      	movs	r1, #79	; 0x4f
  4041b4:	6878      	ldr	r0, [r7, #4]
  4041b6:	4c6b      	ldr	r4, [pc, #428]	; (404364 <clock_calibration_initial+0x214>)
  4041b8:	47a0      	blx	r4
  4041ba:	4602      	mov	r2, r0
  4041bc:	69fb      	ldr	r3, [r7, #28]
  4041be:	4313      	orrs	r3, r2
  4041c0:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE8_B4, 1, &data);
  4041c2:	f107 030d 	add.w	r3, r7, #13
  4041c6:	2201      	movs	r2, #1
  4041c8:	214f      	movs	r1, #79	; 0x4f
  4041ca:	6878      	ldr	r0, [r7, #4]
  4041cc:	4c66      	ldr	r4, [pc, #408]	; (404368 <clock_calibration_initial+0x218>)
  4041ce:	47a0      	blx	r4
  4041d0:	4602      	mov	r2, r0
  4041d2:	69fb      	ldr	r3, [r7, #28]
  4041d4:	4313      	orrs	r3, r2
  4041d6:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  4041d8:	2100      	movs	r1, #0
  4041da:	6878      	ldr	r0, [r7, #4]
  4041dc:	4b63      	ldr	r3, [pc, #396]	; (40436c <clock_calibration_initial+0x21c>)
  4041de:	4798      	blx	r3
  4041e0:	4602      	mov	r2, r0
  4041e2:	69fb      	ldr	r3, [r7, #28]
  4041e4:	4313      	orrs	r3, r2
  4041e6:	61fb      	str	r3, [r7, #28]

	/* Compute coefficient for PLL */ 
	status |= inv_icm426xx_enable_gyro_low_noise_mode(s);
  4041e8:	6878      	ldr	r0, [r7, #4]
  4041ea:	4b61      	ldr	r3, [pc, #388]	; (404370 <clock_calibration_initial+0x220>)
  4041ec:	4798      	blx	r3
  4041ee:	4602      	mov	r2, r0
  4041f0:	69fb      	ldr	r3, [r7, #28]
  4041f2:	4313      	orrs	r3, r2
  4041f4:	61fb      	str	r3, [r7, #28]
	/* Wait 40 ms for MEMS start-up */
	time = inv_icm426xx_get_time_us();
  4041f6:	4b5f      	ldr	r3, [pc, #380]	; (404374 <clock_calibration_initial+0x224>)
  4041f8:	4798      	blx	r3
  4041fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
	while(inv_icm426xx_get_time_us() < (time + (40 * 1000)));
  4041fe:	bf00      	nop
  404200:	4b5c      	ldr	r3, [pc, #368]	; (404374 <clock_calibration_initial+0x224>)
  404202:	4798      	blx	r3
  404204:	4605      	mov	r5, r0
  404206:	460e      	mov	r6, r1
  404208:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  40420c:	f649 4140 	movw	r1, #40000	; 0x9c40
  404210:	f04f 0200 	mov.w	r2, #0
  404214:	185b      	adds	r3, r3, r1
  404216:	eb44 0402 	adc.w	r4, r4, r2
  40421a:	42a6      	cmp	r6, r4
  40421c:	bf08      	it	eq
  40421e:	429d      	cmpeq	r5, r3
  404220:	d3ee      	bcc.n	404200 <clock_calibration_initial+0xb0>
	clk_cal->coef[INV_ICM426XX_PLL] = compute_calibration_coefficient(s, 200000); // 200 msec
  404222:	4955      	ldr	r1, [pc, #340]	; (404378 <clock_calibration_initial+0x228>)
  404224:	6878      	ldr	r0, [r7, #4]
  404226:	4b55      	ldr	r3, [pc, #340]	; (40437c <clock_calibration_initial+0x22c>)
  404228:	4798      	blx	r3
  40422a:	eef0 7a40 	vmov.f32	s15, s0
  40422e:	683b      	ldr	r3, [r7, #0]
  404230:	edc3 7a03 	vstr	s15, [r3, #12]
	status |= inv_icm426xx_disable_gyro(s);
  404234:	6878      	ldr	r0, [r7, #4]
  404236:	4b52      	ldr	r3, [pc, #328]	; (404380 <clock_calibration_initial+0x230>)
  404238:	4798      	blx	r3
  40423a:	4602      	mov	r2, r0
  40423c:	69fb      	ldr	r3, [r7, #28]
  40423e:	4313      	orrs	r3, r2
  404240:	61fb      	str	r3, [r7, #28]

	/* Compute coefficient for RC osc*/
	status |= inv_icm426xx_enable_accel_low_noise_mode(s);
  404242:	6878      	ldr	r0, [r7, #4]
  404244:	4b4f      	ldr	r3, [pc, #316]	; (404384 <clock_calibration_initial+0x234>)
  404246:	4798      	blx	r3
  404248:	4602      	mov	r2, r0
  40424a:	69fb      	ldr	r3, [r7, #28]
  40424c:	4313      	orrs	r3, r2
  40424e:	61fb      	str	r3, [r7, #28]
	/* Wait 40 ms for MEMS start-up */
	time = inv_icm426xx_get_time_us();
  404250:	4b48      	ldr	r3, [pc, #288]	; (404374 <clock_calibration_initial+0x224>)
  404252:	4798      	blx	r3
  404254:	e9c7 0104 	strd	r0, r1, [r7, #16]
	while(inv_icm426xx_get_time_us() < (time + (40 * 1000)));
  404258:	bf00      	nop
  40425a:	4b46      	ldr	r3, [pc, #280]	; (404374 <clock_calibration_initial+0x224>)
  40425c:	4798      	blx	r3
  40425e:	4605      	mov	r5, r0
  404260:	460e      	mov	r6, r1
  404262:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
  404266:	f649 4140 	movw	r1, #40000	; 0x9c40
  40426a:	f04f 0200 	mov.w	r2, #0
  40426e:	185b      	adds	r3, r3, r1
  404270:	eb44 0402 	adc.w	r4, r4, r2
  404274:	42a6      	cmp	r6, r4
  404276:	bf08      	it	eq
  404278:	429d      	cmpeq	r5, r3
  40427a:	d3ee      	bcc.n	40425a <clock_calibration_initial+0x10a>
	clk_cal->coef[INV_ICM426XX_RC_OSC] = compute_calibration_coefficient(s, 200000); // 200 msec
  40427c:	493e      	ldr	r1, [pc, #248]	; (404378 <clock_calibration_initial+0x228>)
  40427e:	6878      	ldr	r0, [r7, #4]
  404280:	4b3e      	ldr	r3, [pc, #248]	; (40437c <clock_calibration_initial+0x22c>)
  404282:	4798      	blx	r3
  404284:	eef0 7a40 	vmov.f32	s15, s0
  404288:	683b      	ldr	r3, [r7, #0]
  40428a:	edc3 7a04 	vstr	s15, [r3, #16]
	status |= inv_icm426xx_disable_accel(s);
  40428e:	6878      	ldr	r0, [r7, #4]
  404290:	4b3d      	ldr	r3, [pc, #244]	; (404388 <clock_calibration_initial+0x238>)
  404292:	4798      	blx	r3
  404294:	4602      	mov	r2, r0
  404296:	69fb      	ldr	r3, [r7, #28]
  404298:	4313      	orrs	r3, r2
  40429a:	61fb      	str	r3, [r7, #28]

	/* Coefficient for WU osc can't be measured as timestamp register is not reliable in this mode */
	clk_cal->coef[INV_ICM426XX_WU_OSC] = clk_cal->coef[INV_ICM426XX_RC_OSC];
  40429c:	683b      	ldr	r3, [r7, #0]
  40429e:	691a      	ldr	r2, [r3, #16]
  4042a0:	683b      	ldr	r3, [r7, #0]
  4042a2:	615a      	str	r2, [r3, #20]

	INV_MSG(INV_MSG_LEVEL_DEBUG, "HelperClockCalib: Initial coefficient computed:");
  4042a4:	4939      	ldr	r1, [pc, #228]	; (40438c <clock_calibration_initial+0x23c>)
  4042a6:	2005      	movs	r0, #5
  4042a8:	4b39      	ldr	r3, [pc, #228]	; (404390 <clock_calibration_initial+0x240>)
  4042aa:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_DEBUG, "HelperClockCalib:    - PLL:    %f", clk_cal->coef[INV_ICM426XX_PLL]);
  4042ac:	683b      	ldr	r3, [r7, #0]
  4042ae:	68da      	ldr	r2, [r3, #12]
  4042b0:	4b38      	ldr	r3, [pc, #224]	; (404394 <clock_calibration_initial+0x244>)
  4042b2:	4610      	mov	r0, r2
  4042b4:	4798      	blx	r3
  4042b6:	4603      	mov	r3, r0
  4042b8:	460c      	mov	r4, r1
  4042ba:	461a      	mov	r2, r3
  4042bc:	4623      	mov	r3, r4
  4042be:	4936      	ldr	r1, [pc, #216]	; (404398 <clock_calibration_initial+0x248>)
  4042c0:	2005      	movs	r0, #5
  4042c2:	4c33      	ldr	r4, [pc, #204]	; (404390 <clock_calibration_initial+0x240>)
  4042c4:	47a0      	blx	r4
	INV_MSG(INV_MSG_LEVEL_DEBUG, "HelperClockCalib:    - RC_OSC: %f", clk_cal->coef[INV_ICM426XX_RC_OSC]);
  4042c6:	683b      	ldr	r3, [r7, #0]
  4042c8:	691a      	ldr	r2, [r3, #16]
  4042ca:	4b32      	ldr	r3, [pc, #200]	; (404394 <clock_calibration_initial+0x244>)
  4042cc:	4610      	mov	r0, r2
  4042ce:	4798      	blx	r3
  4042d0:	4603      	mov	r3, r0
  4042d2:	460c      	mov	r4, r1
  4042d4:	461a      	mov	r2, r3
  4042d6:	4623      	mov	r3, r4
  4042d8:	4930      	ldr	r1, [pc, #192]	; (40439c <clock_calibration_initial+0x24c>)
  4042da:	2005      	movs	r0, #5
  4042dc:	4c2c      	ldr	r4, [pc, #176]	; (404390 <clock_calibration_initial+0x240>)
  4042de:	47a0      	blx	r4
	INV_MSG(INV_MSG_LEVEL_DEBUG, "HelperClockCalib:    - WU_OSC: %f", clk_cal->coef[INV_ICM426XX_WU_OSC]);
  4042e0:	683b      	ldr	r3, [r7, #0]
  4042e2:	695a      	ldr	r2, [r3, #20]
  4042e4:	4b2b      	ldr	r3, [pc, #172]	; (404394 <clock_calibration_initial+0x244>)
  4042e6:	4610      	mov	r0, r2
  4042e8:	4798      	blx	r3
  4042ea:	4603      	mov	r3, r0
  4042ec:	460c      	mov	r4, r1
  4042ee:	461a      	mov	r2, r3
  4042f0:	4623      	mov	r3, r4
  4042f2:	492b      	ldr	r1, [pc, #172]	; (4043a0 <clock_calibration_initial+0x250>)
  4042f4:	2005      	movs	r0, #5
  4042f6:	4c26      	ldr	r4, [pc, #152]	; (404390 <clock_calibration_initial+0x240>)
  4042f8:	47a0      	blx	r4

	/* Disable the 20-bits timestamp register reading */
	status |= inv_icm426xx_disable_timestamp_to_register(s);
  4042fa:	6878      	ldr	r0, [r7, #4]
  4042fc:	4b29      	ldr	r3, [pc, #164]	; (4043a4 <clock_calibration_initial+0x254>)
  4042fe:	4798      	blx	r3
  404300:	4602      	mov	r2, r0
  404302:	69fb      	ldr	r3, [r7, #28]
  404304:	4313      	orrs	r3, r2
  404306:	61fb      	str	r3, [r7, #28]

	/* Re-enable interrupts */
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE0, 1, &prev_src0);
  404308:	f107 030f 	add.w	r3, r7, #15
  40430c:	2201      	movs	r2, #1
  40430e:	2165      	movs	r1, #101	; 0x65
  404310:	6878      	ldr	r0, [r7, #4]
  404312:	4c15      	ldr	r4, [pc, #84]	; (404368 <clock_calibration_initial+0x218>)
  404314:	47a0      	blx	r4
  404316:	4602      	mov	r2, r0
  404318:	69fb      	ldr	r3, [r7, #28]
  40431a:	4313      	orrs	r3, r2
  40431c:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  40431e:	2104      	movs	r1, #4
  404320:	6878      	ldr	r0, [r7, #4]
  404322:	4b12      	ldr	r3, [pc, #72]	; (40436c <clock_calibration_initial+0x21c>)
  404324:	4798      	blx	r3
  404326:	4602      	mov	r2, r0
  404328:	69fb      	ldr	r3, [r7, #28]
  40432a:	4313      	orrs	r3, r2
  40432c:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE8_B4, 1, &prev_src8);
  40432e:	f107 030e 	add.w	r3, r7, #14
  404332:	2201      	movs	r2, #1
  404334:	214f      	movs	r1, #79	; 0x4f
  404336:	6878      	ldr	r0, [r7, #4]
  404338:	4c0b      	ldr	r4, [pc, #44]	; (404368 <clock_calibration_initial+0x218>)
  40433a:	47a0      	blx	r4
  40433c:	4602      	mov	r2, r0
  40433e:	69fb      	ldr	r3, [r7, #28]
  404340:	4313      	orrs	r3, r2
  404342:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  404344:	2100      	movs	r1, #0
  404346:	6878      	ldr	r0, [r7, #4]
  404348:	4b08      	ldr	r3, [pc, #32]	; (40436c <clock_calibration_initial+0x21c>)
  40434a:	4798      	blx	r3
  40434c:	4602      	mov	r2, r0
  40434e:	69fb      	ldr	r3, [r7, #28]
  404350:	4313      	orrs	r3, r2
  404352:	61fb      	str	r3, [r7, #28]
	
	return status;
  404354:	69fb      	ldr	r3, [r7, #28]
}
  404356:	4618      	mov	r0, r3
  404358:	3724      	adds	r7, #36	; 0x24
  40435a:	46bd      	mov	sp, r7
  40435c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40435e:	bf00      	nop
  404360:	00402e9d 	.word	0x00402e9d
  404364:	00403951 	.word	0x00403951
  404368:	00403a1d 	.word	0x00403a1d
  40436c:	00401695 	.word	0x00401695
  404370:	00401c81 	.word	0x00401c81
  404374:	00401641 	.word	0x00401641
  404378:	00030d40 	.word	0x00030d40
  40437c:	00403fdd 	.word	0x00403fdd
  404380:	00401ecd 	.word	0x00401ecd
  404384:	004019b9 	.word	0x004019b9
  404388:	00401b99 	.word	0x00401b99
  40438c:	00413698 	.word	0x00413698
  404390:	00407945 	.word	0x00407945
  404394:	0040e551 	.word	0x0040e551
  404398:	004136c8 	.word	0x004136c8
  40439c:	004136ec 	.word	0x004136ec
  4043a0:	00413710 	.word	0x00413710
  4043a4:	00402f21 	.word	0x00402f21

004043a8 <clock_calibration_update>:

/*
 * Update the calibration factor after N samples (60 x 20ms at default ODR, every 1200ms)
 */
int clock_calibration_update(struct inv_icm426xx * s, struct clk_calib *clk_cal, uint64_t irq_timestamp, uint16_t fifo_timestamp)
{
  4043a8:	b590      	push	{r4, r7, lr}
  4043aa:	b08b      	sub	sp, #44	; 0x2c
  4043ac:	af04      	add	r7, sp, #16
  4043ae:	60f8      	str	r0, [r7, #12]
  4043b0:	60b9      	str	r1, [r7, #8]
  4043b2:	e9c7 2300 	strd	r2, r3, [r7]
	int rc = 0;
  4043b6:	2300      	movs	r3, #0
  4043b8:	617b      	str	r3, [r7, #20]

	if((--clk_cal->recalib_after_n_samples) == 0) {
  4043ba:	68bb      	ldr	r3, [r7, #8]
  4043bc:	685b      	ldr	r3, [r3, #4]
  4043be:	1e5a      	subs	r2, r3, #1
  4043c0:	68bb      	ldr	r3, [r7, #8]
  4043c2:	605a      	str	r2, [r3, #4]
  4043c4:	68bb      	ldr	r3, [r7, #8]
  4043c6:	685b      	ldr	r3, [r3, #4]
  4043c8:	2b00      	cmp	r3, #0
  4043ca:	d132      	bne.n	404432 <clock_calibration_update+0x8a>
		uint32_t smallest_running_odr_us;
		
		rc = clock_calibration_update_coef(s, clk_cal, &clk_cal->on_going, irq_timestamp, fifo_timestamp);
  4043cc:	68bb      	ldr	r3, [r7, #8]
  4043ce:	f103 0208 	add.w	r2, r3, #8
  4043d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  4043d4:	9302      	str	r3, [sp, #8]
  4043d6:	e9d7 3400 	ldrd	r3, r4, [r7]
  4043da:	e9cd 3400 	strd	r3, r4, [sp]
  4043de:	68b9      	ldr	r1, [r7, #8]
  4043e0:	68f8      	ldr	r0, [r7, #12]
  4043e2:	4b16      	ldr	r3, [pc, #88]	; (40443c <clock_calibration_update+0x94>)
  4043e4:	4798      	blx	r3
  4043e6:	6178      	str	r0, [r7, #20]
		
		/* now find the smallest running odr to program new calibration */
		if ((rc = get_fastest_running_odr(s, &smallest_running_odr_us)) != 0) {
  4043e8:	f107 0310 	add.w	r3, r7, #16
  4043ec:	4619      	mov	r1, r3
  4043ee:	68f8      	ldr	r0, [r7, #12]
  4043f0:	4b13      	ldr	r3, [pc, #76]	; (404440 <clock_calibration_update+0x98>)
  4043f2:	4798      	blx	r3
  4043f4:	6178      	str	r0, [r7, #20]
  4043f6:	697b      	ldr	r3, [r7, #20]
  4043f8:	2b00      	cmp	r3, #0
  4043fa:	d005      	beq.n	404408 <clock_calibration_update+0x60>
			/* in case off error we set recalib n sample to the initial one */
			clk_cal->recalib_after_n_samples = clk_cal->initial_recalib_after_n_samples;
  4043fc:	68bb      	ldr	r3, [r7, #8]
  4043fe:	681a      	ldr	r2, [r3, #0]
  404400:	68bb      	ldr	r3, [r7, #8]
  404402:	605a      	str	r2, [r3, #4]
			return rc;
  404404:	697b      	ldr	r3, [r7, #20]
  404406:	e015      	b.n	404434 <clock_calibration_update+0x8c>
		}
		/* in case no valid odr was returned, let's use the default odr value */
		if(smallest_running_odr_us == 0xffffffff)
  404408:	693b      	ldr	r3, [r7, #16]
  40440a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40440e:	d101      	bne.n	404414 <clock_calibration_update+0x6c>
			smallest_running_odr_us = 10;	
  404410:	230a      	movs	r3, #10
  404412:	613b      	str	r3, [r7, #16]
		
		clk_cal->recalib_after_n_samples = NUMBER_OF_SAMPLES_FOR_ODR(smallest_running_odr_us);
  404414:	693b      	ldr	r3, [r7, #16]
  404416:	4a0b      	ldr	r2, [pc, #44]	; (404444 <clock_calibration_update+0x9c>)
  404418:	fbb2 f1f3 	udiv	r1, r2, r3
  40441c:	693b      	ldr	r3, [r7, #16]
  40441e:	4a09      	ldr	r2, [pc, #36]	; (404444 <clock_calibration_update+0x9c>)
  404420:	fbb2 f0f3 	udiv	r0, r2, r3
  404424:	fb03 f300 	mul.w	r3, r3, r0
  404428:	1ad3      	subs	r3, r2, r3
  40442a:	440b      	add	r3, r1
  40442c:	461a      	mov	r2, r3
  40442e:	68bb      	ldr	r3, [r7, #8]
  404430:	605a      	str	r2, [r3, #4]
	}
	
	return rc;
  404432:	697b      	ldr	r3, [r7, #20]
}
  404434:	4618      	mov	r0, r3
  404436:	371c      	adds	r7, #28
  404438:	46bd      	mov	sp, r7
  40443a:	bd90      	pop	{r4, r7, pc}
  40443c:	00404449 	.word	0x00404449
  404440:	004046c1 	.word	0x004046c1
  404444:	00124f80 	.word	0x00124f80

00404448 <clock_calibration_update_coef>:

static int clock_calibration_update_coef(struct inv_icm426xx * s, struct clk_calib *clk_cal, uint8_t *on_going, uint64_t irq_timestamp, uint16_t fifo_timestamp)
{
  404448:	b5f0      	push	{r4, r5, r6, r7, lr}
  40444a:	ed2d 8b02 	vpush	{d8}
  40444e:	b093      	sub	sp, #76	; 0x4c
  404450:	af04      	add	r7, sp, #16
  404452:	60f8      	str	r0, [r7, #12]
  404454:	60b9      	str	r1, [r7, #8]
  404456:	607a      	str	r2, [r7, #4]
	int status = 0;
  404458:	2300      	movs	r3, #0
  40445a:	633b      	str	r3, [r7, #48]	; 0x30
	static uint64_t tMCU_1;
	static uint32_t tICM_1;
	static enum inv_icm426xx_clock_source cur_source;
	
	
	if(*on_going == 0) {
  40445c:	687b      	ldr	r3, [r7, #4]
  40445e:	781b      	ldrb	r3, [r3, #0]
  404460:	2b00      	cmp	r3, #0
  404462:	d113      	bne.n	40448c <clock_calibration_update_coef+0x44>
		/* Stage 1 */ 

		/* Set initial MCU and ICM time */
		tICM_1 = fifo_timestamp;
  404464:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
  404468:	4a87      	ldr	r2, [pc, #540]	; (404688 <clock_calibration_update_coef+0x240>)
  40446a:	6013      	str	r3, [r2, #0]
		tMCU_1 = irq_timestamp;
  40446c:	4a87      	ldr	r2, [pc, #540]	; (40468c <clock_calibration_update_coef+0x244>)
  40446e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
  404472:	e9c2 3400 	strd	r3, r4, [r2]
		*on_going = 1;
  404476:	687b      	ldr	r3, [r7, #4]
  404478:	2201      	movs	r2, #1
  40447a:	701a      	strb	r2, [r3, #0]
		cur_source = get_current_clock_source(s);
  40447c:	68f8      	ldr	r0, [r7, #12]
  40447e:	4b84      	ldr	r3, [pc, #528]	; (404690 <clock_calibration_update_coef+0x248>)
  404480:	4798      	blx	r3
  404482:	4603      	mov	r3, r0
  404484:	461a      	mov	r2, r3
  404486:	4b83      	ldr	r3, [pc, #524]	; (404694 <clock_calibration_update_coef+0x24c>)
  404488:	701a      	strb	r2, [r3, #0]
  40448a:	e0ec      	b.n	404666 <clock_calibration_update_coef+0x21e>
	} else if(*on_going == 1) {
  40448c:	687b      	ldr	r3, [r7, #4]
  40448e:	781b      	ldrb	r3, [r3, #0]
  404490:	2b01      	cmp	r3, #1
  404492:	f040 80e8 	bne.w	404666 <clock_calibration_update_coef+0x21e>
		/* Stage 2 */ 

		/* If the clock source has changed between both stages, do not compute new coef */
		if (cur_source != get_current_clock_source(s)) {
  404496:	68f8      	ldr	r0, [r7, #12]
  404498:	4b7d      	ldr	r3, [pc, #500]	; (404690 <clock_calibration_update_coef+0x248>)
  40449a:	4798      	blx	r3
  40449c:	4603      	mov	r3, r0
  40449e:	461a      	mov	r2, r3
  4044a0:	4b7c      	ldr	r3, [pc, #496]	; (404694 <clock_calibration_update_coef+0x24c>)
  4044a2:	781b      	ldrb	r3, [r3, #0]
  4044a4:	429a      	cmp	r2, r3
  4044a6:	d004      	beq.n	4044b2 <clock_calibration_update_coef+0x6a>
			*on_going = 0;
  4044a8:	687b      	ldr	r3, [r7, #4]
  4044aa:	2200      	movs	r2, #0
  4044ac:	701a      	strb	r2, [r3, #0]
			return status;
  4044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4044b0:	e0da      	b.n	404668 <clock_calibration_update_coef+0x220>
		}

		/* Set second MCU and ICM time */
		tICM_2 = fifo_timestamp;
  4044b2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
  4044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		tMCU_2 = irq_timestamp;
  4044b8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
  4044bc:	e9c7 3408 	strd	r3, r4, [r7, #32]

		tICM_1f = (float)tICM_1 * get_fifo_timestamp_resolution(s);
  4044c0:	4b71      	ldr	r3, [pc, #452]	; (404688 <clock_calibration_update_coef+0x240>)
  4044c2:	681b      	ldr	r3, [r3, #0]
  4044c4:	ee07 3a90 	vmov	s15, r3
  4044c8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  4044cc:	68f8      	ldr	r0, [r7, #12]
  4044ce:	4b72      	ldr	r3, [pc, #456]	; (404698 <clock_calibration_update_coef+0x250>)
  4044d0:	4798      	blx	r3
  4044d2:	eef0 7a40 	vmov.f32	s15, s0
  4044d6:	ee68 7a27 	vmul.f32	s15, s16, s15
  4044da:	edc7 7a07 	vstr	s15, [r7, #28]
		tICM_2f = (float)tICM_2 * get_fifo_timestamp_resolution(s);
  4044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4044e0:	ee07 3a90 	vmov	s15, r3
  4044e4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  4044e8:	68f8      	ldr	r0, [r7, #12]
  4044ea:	4b6b      	ldr	r3, [pc, #428]	; (404698 <clock_calibration_update_coef+0x250>)
  4044ec:	4798      	blx	r3
  4044ee:	eef0 7a40 	vmov.f32	s15, s0
  4044f2:	ee68 7a27 	vmul.f32	s15, s16, s15
  4044f6:	edc7 7a06 	vstr	s15, [r7, #24]
		tICM_rollover = (float) ROLLOVER_16BITS * get_fifo_timestamp_resolution(s);
  4044fa:	68f8      	ldr	r0, [r7, #12]
  4044fc:	4b66      	ldr	r3, [pc, #408]	; (404698 <clock_calibration_update_coef+0x250>)
  4044fe:	4798      	blx	r3
  404500:	eeb0 7a40 	vmov.f32	s14, s0
  404504:	eddf 7a65 	vldr	s15, [pc, #404]	; 40469c <clock_calibration_update_coef+0x254>
  404508:	ee67 7a27 	vmul.f32	s15, s14, s15
  40450c:	edc7 7a05 	vstr	s15, [r7, #20]

		/* Estimate number of rollover of the FIFO timestamp */
		nb_rollover = (uint8_t)((tMCU_2 - tMCU_1) / tICM_rollover);
  404510:	4b5e      	ldr	r3, [pc, #376]	; (40468c <clock_calibration_update_coef+0x244>)
  404512:	e9d3 3400 	ldrd	r3, r4, [r3]
  404516:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
  40451a:	1acb      	subs	r3, r1, r3
  40451c:	eb62 0404 	sbc.w	r4, r2, r4
  404520:	4a5f      	ldr	r2, [pc, #380]	; (4046a0 <clock_calibration_update_coef+0x258>)
  404522:	4618      	mov	r0, r3
  404524:	4621      	mov	r1, r4
  404526:	4790      	blx	r2
  404528:	ee06 0a90 	vmov	s13, r0
  40452c:	ed97 7a05 	vldr	s14, [r7, #20]
  404530:	eec6 7a87 	vdiv.f32	s15, s13, s14
  404534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  404538:	edc7 7a00 	vstr	s15, [r7]
  40453c:	783b      	ldrb	r3, [r7, #0]
  40453e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		/* If tICM_2 is smaller than tICM_1, there was one more rollover than what we estimated */
		if (tICM_2f < tICM_1f)
  404542:	ed97 7a06 	vldr	s14, [r7, #24]
  404546:	edd7 7a07 	vldr	s15, [r7, #28]
  40454a:	eeb4 7ae7 	vcmpe.f32	s14, s15
  40454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  404552:	d504      	bpl.n	40455e <clock_calibration_update_coef+0x116>
			nb_rollover += 1;
  404554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404558:	3301      	adds	r3, #1
  40455a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		computed_coef_time = (tMCU_2 - tMCU_1) / (float) (nb_rollover * tICM_rollover + tICM_2f - tICM_1f);
  40455e:	4b4b      	ldr	r3, [pc, #300]	; (40468c <clock_calibration_update_coef+0x244>)
  404560:	e9d3 3400 	ldrd	r3, r4, [r3]
  404564:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
  404568:	1acb      	subs	r3, r1, r3
  40456a:	eb62 0404 	sbc.w	r4, r2, r4
  40456e:	4a4c      	ldr	r2, [pc, #304]	; (4046a0 <clock_calibration_update_coef+0x258>)
  404570:	4618      	mov	r0, r3
  404572:	4621      	mov	r1, r4
  404574:	4790      	blx	r2
  404576:	ee06 0a90 	vmov	s13, r0
  40457a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40457e:	ee07 3a90 	vmov	s15, r3
  404582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  404586:	edd7 7a05 	vldr	s15, [r7, #20]
  40458a:	ee27 7a27 	vmul.f32	s14, s14, s15
  40458e:	edd7 7a06 	vldr	s15, [r7, #24]
  404592:	ee37 7a27 	vadd.f32	s14, s14, s15
  404596:	edd7 7a07 	vldr	s15, [r7, #28]
  40459a:	ee37 7a67 	vsub.f32	s14, s14, s15
  40459e:	eec6 7a87 	vdiv.f32	s15, s13, s14
  4045a2:	edc7 7a04 	vstr	s15, [r7, #16]

		/* error management : only allow 90-110% variation */
		if ( (computed_coef_time < 1.1) && (computed_coef_time > 0.9) ) {
  4045a6:	4b3f      	ldr	r3, [pc, #252]	; (4046a4 <clock_calibration_update_coef+0x25c>)
  4045a8:	6938      	ldr	r0, [r7, #16]
  4045aa:	4798      	blx	r3
  4045ac:	4c3e      	ldr	r4, [pc, #248]	; (4046a8 <clock_calibration_update_coef+0x260>)
  4045ae:	a332      	add	r3, pc, #200	; (adr r3, 404678 <clock_calibration_update_coef+0x230>)
  4045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045b4:	47a0      	blx	r4
  4045b6:	4603      	mov	r3, r0
  4045b8:	2b00      	cmp	r3, #0
  4045ba:	d030      	beq.n	40461e <clock_calibration_update_coef+0x1d6>
  4045bc:	4b39      	ldr	r3, [pc, #228]	; (4046a4 <clock_calibration_update_coef+0x25c>)
  4045be:	6938      	ldr	r0, [r7, #16]
  4045c0:	4798      	blx	r3
  4045c2:	4c3a      	ldr	r4, [pc, #232]	; (4046ac <clock_calibration_update_coef+0x264>)
  4045c4:	a32e      	add	r3, pc, #184	; (adr r3, 404680 <clock_calibration_update_coef+0x238>)
  4045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045ca:	47a0      	blx	r4
  4045cc:	4603      	mov	r3, r0
  4045ce:	2b00      	cmp	r3, #0
  4045d0:	d025      	beq.n	40461e <clock_calibration_update_coef+0x1d6>
			clk_cal->coef[get_current_clock_source(s)] = computed_coef_time;
  4045d2:	68f8      	ldr	r0, [r7, #12]
  4045d4:	4b2e      	ldr	r3, [pc, #184]	; (404690 <clock_calibration_update_coef+0x248>)
  4045d6:	4798      	blx	r3
  4045d8:	4603      	mov	r3, r0
  4045da:	68ba      	ldr	r2, [r7, #8]
  4045dc:	3302      	adds	r3, #2
  4045de:	009b      	lsls	r3, r3, #2
  4045e0:	4413      	add	r3, r2
  4045e2:	3304      	adds	r3, #4
  4045e4:	693a      	ldr	r2, [r7, #16]
  4045e6:	601a      	str	r2, [r3, #0]
			INV_MSG(INV_MSG_LEVEL_DEBUG, "helperClockCalib: New coefficient computed for %s: %f", 
  4045e8:	68f8      	ldr	r0, [r7, #12]
  4045ea:	4b31      	ldr	r3, [pc, #196]	; (4046b0 <clock_calibration_update_coef+0x268>)
  4045ec:	4798      	blx	r3
  4045ee:	4605      	mov	r5, r0
  4045f0:	68f8      	ldr	r0, [r7, #12]
  4045f2:	4b27      	ldr	r3, [pc, #156]	; (404690 <clock_calibration_update_coef+0x248>)
  4045f4:	4798      	blx	r3
  4045f6:	4603      	mov	r3, r0
  4045f8:	68ba      	ldr	r2, [r7, #8]
  4045fa:	3302      	adds	r3, #2
  4045fc:	009b      	lsls	r3, r3, #2
  4045fe:	4413      	add	r3, r2
  404600:	3304      	adds	r3, #4
  404602:	681a      	ldr	r2, [r3, #0]
  404604:	4b27      	ldr	r3, [pc, #156]	; (4046a4 <clock_calibration_update_coef+0x25c>)
  404606:	4610      	mov	r0, r2
  404608:	4798      	blx	r3
  40460a:	4603      	mov	r3, r0
  40460c:	460c      	mov	r4, r1
  40460e:	e9cd 3400 	strd	r3, r4, [sp]
  404612:	462a      	mov	r2, r5
  404614:	4927      	ldr	r1, [pc, #156]	; (4046b4 <clock_calibration_update_coef+0x26c>)
  404616:	2005      	movs	r0, #5
  404618:	4b27      	ldr	r3, [pc, #156]	; (4046b8 <clock_calibration_update_coef+0x270>)
  40461a:	4798      	blx	r3
  40461c:	e020      	b.n	404660 <clock_calibration_update_coef+0x218>
				get_current_clock_source_name(s), clk_cal->coef[get_current_clock_source(s)]);
		} else
			INV_MSG(INV_MSG_LEVEL_ERROR, "helperClockCalib: Bad coefficient computed for %s: %f, skipping it and keeping %f", 
  40461e:	68f8      	ldr	r0, [r7, #12]
  404620:	4b23      	ldr	r3, [pc, #140]	; (4046b0 <clock_calibration_update_coef+0x268>)
  404622:	4798      	blx	r3
  404624:	4606      	mov	r6, r0
  404626:	4b1f      	ldr	r3, [pc, #124]	; (4046a4 <clock_calibration_update_coef+0x25c>)
  404628:	6938      	ldr	r0, [r7, #16]
  40462a:	4798      	blx	r3
  40462c:	4604      	mov	r4, r0
  40462e:	460d      	mov	r5, r1
  404630:	68f8      	ldr	r0, [r7, #12]
  404632:	4b17      	ldr	r3, [pc, #92]	; (404690 <clock_calibration_update_coef+0x248>)
  404634:	4798      	blx	r3
  404636:	4603      	mov	r3, r0
  404638:	68ba      	ldr	r2, [r7, #8]
  40463a:	3302      	adds	r3, #2
  40463c:	009b      	lsls	r3, r3, #2
  40463e:	4413      	add	r3, r2
  404640:	3304      	adds	r3, #4
  404642:	681a      	ldr	r2, [r3, #0]
  404644:	4b17      	ldr	r3, [pc, #92]	; (4046a4 <clock_calibration_update_coef+0x25c>)
  404646:	4610      	mov	r0, r2
  404648:	4798      	blx	r3
  40464a:	4602      	mov	r2, r0
  40464c:	460b      	mov	r3, r1
  40464e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404652:	e9cd 4500 	strd	r4, r5, [sp]
  404656:	4632      	mov	r2, r6
  404658:	4918      	ldr	r1, [pc, #96]	; (4046bc <clock_calibration_update_coef+0x274>)
  40465a:	2001      	movs	r0, #1
  40465c:	4b16      	ldr	r3, [pc, #88]	; (4046b8 <clock_calibration_update_coef+0x270>)
  40465e:	4798      	blx	r3
				get_current_clock_source_name(s), computed_coef_time, clk_cal->coef[get_current_clock_source(s)]);

		*on_going = 0;
  404660:	687b      	ldr	r3, [r7, #4]
  404662:	2200      	movs	r2, #0
  404664:	701a      	strb	r2, [r3, #0]
	}
	return status;
  404666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
  404668:	4618      	mov	r0, r3
  40466a:	373c      	adds	r7, #60	; 0x3c
  40466c:	46bd      	mov	sp, r7
  40466e:	ecbd 8b02 	vpop	{d8}
  404672:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404674:	f3af 8000 	nop.w
  404678:	9999999a 	.word	0x9999999a
  40467c:	3ff19999 	.word	0x3ff19999
  404680:	cccccccd 	.word	0xcccccccd
  404684:	3feccccc 	.word	0x3feccccc
  404688:	20003a70 	.word	0x20003a70
  40468c:	20003a78 	.word	0x20003a78
  404690:	00403b75 	.word	0x00403b75
  404694:	20003a80 	.word	0x20003a80
  404698:	00403cd1 	.word	0x00403cd1
  40469c:	47800000 	.word	0x47800000
  4046a0:	0040ee19 	.word	0x0040ee19
  4046a4:	0040e551 	.word	0x0040e551
  4046a8:	0040eadd 	.word	0x0040eadd
  4046ac:	0040eb19 	.word	0x0040eb19
  4046b0:	00403c05 	.word	0x00403c05
  4046b4:	00413734 	.word	0x00413734
  4046b8:	00407945 	.word	0x00407945
  4046bc:	0041376c 	.word	0x0041376c

004046c0 <get_fastest_running_odr>:

static int get_fastest_running_odr(struct inv_icm426xx * s, uint32_t *odr)
{
  4046c0:	b590      	push	{r4, r7, lr}
  4046c2:	b089      	sub	sp, #36	; 0x24
  4046c4:	af00      	add	r7, sp, #0
  4046c6:	6078      	str	r0, [r7, #4]
  4046c8:	6039      	str	r1, [r7, #0]
	int rc = 0;
  4046ca:	2300      	movs	r3, #0
  4046cc:	61bb      	str	r3, [r7, #24]
	uint8_t accel_cfg_0_reg, gyro_cfg_0_reg, pwr_mngt_0_reg;

	uint32_t smallest_odr = 0xffffffff, accel_odr_us, gyro_odr_us;
  4046ce:	f04f 33ff 	mov.w	r3, #4294967295
  4046d2:	61fb      	str	r3, [r7, #28]
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t gyro_mode;
	ICM426XX_ACCEL_CONFIG0_ODR_t accel_odr;
	ICM426XX_GYRO_CONFIG0_ODR_t gyro_odr;

	/* Access current sensors ODR */
	rc |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  4046d4:	f107 030b 	add.w	r3, r7, #11
  4046d8:	2201      	movs	r2, #1
  4046da:	2150      	movs	r1, #80	; 0x50
  4046dc:	6878      	ldr	r0, [r7, #4]
  4046de:	4c26      	ldr	r4, [pc, #152]	; (404778 <get_fastest_running_odr+0xb8>)
  4046e0:	47a0      	blx	r4
  4046e2:	4602      	mov	r2, r0
  4046e4:	69bb      	ldr	r3, [r7, #24]
  4046e6:	4313      	orrs	r3, r2
  4046e8:	61bb      	str	r3, [r7, #24]
	rc |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  4046ea:	f107 030a 	add.w	r3, r7, #10
  4046ee:	2201      	movs	r2, #1
  4046f0:	214f      	movs	r1, #79	; 0x4f
  4046f2:	6878      	ldr	r0, [r7, #4]
  4046f4:	4c20      	ldr	r4, [pc, #128]	; (404778 <get_fastest_running_odr+0xb8>)
  4046f6:	47a0      	blx	r4
  4046f8:	4602      	mov	r2, r0
  4046fa:	69bb      	ldr	r3, [r7, #24]
  4046fc:	4313      	orrs	r3, r2
  4046fe:	61bb      	str	r3, [r7, #24]
	rc |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  404700:	f107 0309 	add.w	r3, r7, #9
  404704:	2201      	movs	r2, #1
  404706:	214e      	movs	r1, #78	; 0x4e
  404708:	6878      	ldr	r0, [r7, #4]
  40470a:	4c1b      	ldr	r4, [pc, #108]	; (404778 <get_fastest_running_odr+0xb8>)
  40470c:	47a0      	blx	r4
  40470e:	4602      	mov	r2, r0
  404710:	69bb      	ldr	r3, [r7, #24]
  404712:	4313      	orrs	r3, r2
  404714:	61bb      	str	r3, [r7, #24]
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  404716:	7a7b      	ldrb	r3, [r7, #9]
  404718:	f003 0303 	and.w	r3, r3, #3
  40471c:	75fb      	strb	r3, [r7, #23]
	gyro_mode  = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  40471e:	7a7b      	ldrb	r3, [r7, #9]
  404720:	f003 030c 	and.w	r3, r3, #12
  404724:	75bb      	strb	r3, [r7, #22]
	gyro_odr   = (ICM426XX_GYRO_CONFIG0_ODR_t)(gyro_cfg_0_reg & BIT_GYRO_CONFIG0_ODR_MASK);
  404726:	7abb      	ldrb	r3, [r7, #10]
  404728:	f003 030f 	and.w	r3, r3, #15
  40472c:	757b      	strb	r3, [r7, #21]
	accel_odr  = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  40472e:	7afb      	ldrb	r3, [r7, #11]
  404730:	f003 030f 	and.w	r3, r3, #15
  404734:	753b      	strb	r3, [r7, #20]
	accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(accel_odr);
  404736:	7d3b      	ldrb	r3, [r7, #20]
  404738:	4618      	mov	r0, r3
  40473a:	4b10      	ldr	r3, [pc, #64]	; (40477c <get_fastest_running_odr+0xbc>)
  40473c:	4798      	blx	r3
  40473e:	6138      	str	r0, [r7, #16]
	gyro_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(gyro_odr);
  404740:	7d7b      	ldrb	r3, [r7, #21]
  404742:	4618      	mov	r0, r3
  404744:	4b0d      	ldr	r3, [pc, #52]	; (40477c <get_fastest_running_odr+0xbc>)
  404746:	4798      	blx	r3
  404748:	60f8      	str	r0, [r7, #12]

	/* now let's find the smallest ODR of running sensors among ACC and GYR */
	if (accel_mode != ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF)
  40474a:	7dfb      	ldrb	r3, [r7, #23]
  40474c:	2b00      	cmp	r3, #0
  40474e:	d001      	beq.n	404754 <get_fastest_running_odr+0x94>
		smallest_odr = accel_odr_us;
  404750:	693b      	ldr	r3, [r7, #16]
  404752:	61fb      	str	r3, [r7, #28]

	if (gyro_mode != ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF)
  404754:	7dbb      	ldrb	r3, [r7, #22]
  404756:	2b00      	cmp	r3, #0
  404758:	d005      	beq.n	404766 <get_fastest_running_odr+0xa6>
		if (gyro_odr_us < smallest_odr)
  40475a:	68fa      	ldr	r2, [r7, #12]
  40475c:	69fb      	ldr	r3, [r7, #28]
  40475e:	429a      	cmp	r2, r3
  404760:	d201      	bcs.n	404766 <get_fastest_running_odr+0xa6>
			smallest_odr = gyro_odr_us;
  404762:	68fb      	ldr	r3, [r7, #12]
  404764:	61fb      	str	r3, [r7, #28]

	*odr = smallest_odr;
  404766:	683b      	ldr	r3, [r7, #0]
  404768:	69fa      	ldr	r2, [r7, #28]
  40476a:	601a      	str	r2, [r3, #0]

	return rc;
  40476c:	69bb      	ldr	r3, [r7, #24]
}
  40476e:	4618      	mov	r0, r3
  404770:	3724      	adds	r7, #36	; 0x24
  404772:	46bd      	mov	sp, r7
  404774:	bd90      	pop	{r4, r7, pc}
  404776:	bf00      	nop
  404778:	00403951 	.word	0x00403951
  40477c:	00402b49 	.word	0x00402b49

00404780 <get_fastest_sensor>:

static enum inv_icm426xx_sensor get_fastest_sensor(struct inv_icm426xx * s)
{
  404780:	b590      	push	{r4, r7, lr}
  404782:	b089      	sub	sp, #36	; 0x24
  404784:	af00      	add	r7, sp, #0
  404786:	6078      	str	r0, [r7, #4]
	int status = 0;
  404788:	2300      	movs	r3, #0
  40478a:	61fb      	str	r3, [r7, #28]
	uint8_t accel_cfg_0_reg, gyro_cfg_0_reg;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  40478c:	f107 030f 	add.w	r3, r7, #15
  404790:	2201      	movs	r2, #1
  404792:	2150      	movs	r1, #80	; 0x50
  404794:	6878      	ldr	r0, [r7, #4]
  404796:	4c19      	ldr	r4, [pc, #100]	; (4047fc <get_fastest_sensor+0x7c>)
  404798:	47a0      	blx	r4
  40479a:	4602      	mov	r2, r0
  40479c:	69fb      	ldr	r3, [r7, #28]
  40479e:	4313      	orrs	r3, r2
  4047a0:	61fb      	str	r3, [r7, #28]
	status |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  4047a2:	f107 030e 	add.w	r3, r7, #14
  4047a6:	2201      	movs	r2, #1
  4047a8:	214f      	movs	r1, #79	; 0x4f
  4047aa:	6878      	ldr	r0, [r7, #4]
  4047ac:	4c13      	ldr	r4, [pc, #76]	; (4047fc <get_fastest_sensor+0x7c>)
  4047ae:	47a0      	blx	r4
  4047b0:	4602      	mov	r2, r0
  4047b2:	69fb      	ldr	r3, [r7, #28]
  4047b4:	4313      	orrs	r3, r2
  4047b6:	61fb      	str	r3, [r7, #28]
	
	if (0 > status)
  4047b8:	69fb      	ldr	r3, [r7, #28]
  4047ba:	2b00      	cmp	r3, #0
  4047bc:	da01      	bge.n	4047c2 <get_fastest_sensor+0x42>
		return INV_ICM426XX_SENSOR_MAX; // error
  4047be:	230a      	movs	r3, #10
  4047c0:	e018      	b.n	4047f4 <get_fastest_sensor+0x74>
	
	ICM426XX_ACCEL_CONFIG0_ODR_t accel_odr = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  4047c2:	7bfb      	ldrb	r3, [r7, #15]
  4047c4:	f003 030f 	and.w	r3, r3, #15
  4047c8:	76fb      	strb	r3, [r7, #27]
	ICM426XX_GYRO_CONFIG0_ODR_t gyro_odr   = (ICM426XX_GYRO_CONFIG0_ODR_t)(gyro_cfg_0_reg & BIT_GYRO_CONFIG0_ODR_MASK);
  4047ca:	7bbb      	ldrb	r3, [r7, #14]
  4047cc:	f003 030f 	and.w	r3, r3, #15
  4047d0:	76bb      	strb	r3, [r7, #26]
	uint32_t accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(accel_odr);
  4047d2:	7efb      	ldrb	r3, [r7, #27]
  4047d4:	4618      	mov	r0, r3
  4047d6:	4b0a      	ldr	r3, [pc, #40]	; (404800 <get_fastest_sensor+0x80>)
  4047d8:	4798      	blx	r3
  4047da:	6178      	str	r0, [r7, #20]
	uint32_t gyro_odr_us  = inv_icm426xx_convert_odr_bitfield_to_us(gyro_odr);
  4047dc:	7ebb      	ldrb	r3, [r7, #26]
  4047de:	4618      	mov	r0, r3
  4047e0:	4b07      	ldr	r3, [pc, #28]	; (404800 <get_fastest_sensor+0x80>)
  4047e2:	4798      	blx	r3
  4047e4:	6138      	str	r0, [r7, #16]

	return (accel_odr_us > gyro_odr_us) ? INV_ICM426XX_SENSOR_GYRO : INV_ICM426XX_SENSOR_ACCEL;
  4047e6:	697a      	ldr	r2, [r7, #20]
  4047e8:	693b      	ldr	r3, [r7, #16]
  4047ea:	429a      	cmp	r2, r3
  4047ec:	bf8c      	ite	hi
  4047ee:	2301      	movhi	r3, #1
  4047f0:	2300      	movls	r3, #0
  4047f2:	b2db      	uxtb	r3, r3
}
  4047f4:	4618      	mov	r0, r3
  4047f6:	3724      	adds	r7, #36	; 0x24
  4047f8:	46bd      	mov	sp, r7
  4047fa:	bd90      	pop	{r4, r7, pc}
  4047fc:	00403951 	.word	0x00403951
  404800:	00402b49 	.word	0x00402b49

00404804 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  404804:	b580      	push	{r7, lr}
  404806:	b082      	sub	sp, #8
  404808:	af00      	add	r7, sp, #0
  40480a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40480c:	6878      	ldr	r0, [r7, #4]
  40480e:	4b03      	ldr	r3, [pc, #12]	; (40481c <sysclk_enable_peripheral_clock+0x18>)
  404810:	4798      	blx	r3
}
  404812:	bf00      	nop
  404814:	3708      	adds	r7, #8
  404816:	46bd      	mov	sp, r7
  404818:	bd80      	pop	{r7, pc}
  40481a:	bf00      	nop
  40481c:	00408ab5 	.word	0x00408ab5

00404820 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  404820:	b580      	push	{r7, lr}
  404822:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  404824:	200b      	movs	r0, #11
  404826:	4b03      	ldr	r3, [pc, #12]	; (404834 <ioport_init+0x14>)
  404828:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40482a:	200c      	movs	r0, #12
  40482c:	4b01      	ldr	r3, [pc, #4]	; (404834 <ioport_init+0x14>)
  40482e:	4798      	blx	r3
	arch_ioport_init();
}
  404830:	bf00      	nop
  404832:	bd80      	pop	{r7, pc}
  404834:	00404805 	.word	0x00404805

00404838 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  404838:	b480      	push	{r7}
  40483a:	b08d      	sub	sp, #52	; 0x34
  40483c:	af00      	add	r7, sp, #0
  40483e:	6078      	str	r0, [r7, #4]
  404840:	460b      	mov	r3, r1
  404842:	70fb      	strb	r3, [r7, #3]
  404844:	687b      	ldr	r3, [r7, #4]
  404846:	62fb      	str	r3, [r7, #44]	; 0x2c
  404848:	78fb      	ldrb	r3, [r7, #3]
  40484a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404850:	627b      	str	r3, [r7, #36]	; 0x24
  404852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404854:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  404856:	6a3b      	ldr	r3, [r7, #32]
  404858:	095b      	lsrs	r3, r3, #5
  40485a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40485c:	69fb      	ldr	r3, [r7, #28]
  40485e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404862:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404866:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404868:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40486a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40486e:	2b01      	cmp	r3, #1
  404870:	d109      	bne.n	404886 <ioport_set_pin_dir+0x4e>
  404872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404874:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404876:	697b      	ldr	r3, [r7, #20]
  404878:	f003 031f 	and.w	r3, r3, #31
  40487c:	2201      	movs	r2, #1
  40487e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404880:	69bb      	ldr	r3, [r7, #24]
  404882:	611a      	str	r2, [r3, #16]
  404884:	e00c      	b.n	4048a0 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  404886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40488a:	2b00      	cmp	r3, #0
  40488c:	d108      	bne.n	4048a0 <ioport_set_pin_dir+0x68>
  40488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404890:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  404892:	693b      	ldr	r3, [r7, #16]
  404894:	f003 031f 	and.w	r3, r3, #31
  404898:	2201      	movs	r2, #1
  40489a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40489c:	69bb      	ldr	r3, [r7, #24]
  40489e:	615a      	str	r2, [r3, #20]
  4048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4048a2:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4048a4:	68fb      	ldr	r3, [r7, #12]
  4048a6:	f003 031f 	and.w	r3, r3, #31
  4048aa:	2201      	movs	r2, #1
  4048ac:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4048ae:	69bb      	ldr	r3, [r7, #24]
  4048b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4048b4:	bf00      	nop
  4048b6:	3734      	adds	r7, #52	; 0x34
  4048b8:	46bd      	mov	sp, r7
  4048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048be:	4770      	bx	lr

004048c0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4048c0:	b480      	push	{r7}
  4048c2:	b08b      	sub	sp, #44	; 0x2c
  4048c4:	af00      	add	r7, sp, #0
  4048c6:	6078      	str	r0, [r7, #4]
  4048c8:	460b      	mov	r3, r1
  4048ca:	70fb      	strb	r3, [r7, #3]
  4048cc:	687b      	ldr	r3, [r7, #4]
  4048ce:	627b      	str	r3, [r7, #36]	; 0x24
  4048d0:	78fb      	ldrb	r3, [r7, #3]
  4048d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4048d8:	61fb      	str	r3, [r7, #28]
  4048da:	69fb      	ldr	r3, [r7, #28]
  4048dc:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4048de:	69bb      	ldr	r3, [r7, #24]
  4048e0:	095b      	lsrs	r3, r3, #5
  4048e2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4048e4:	697b      	ldr	r3, [r7, #20]
  4048e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4048ea:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4048ee:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4048f0:	613b      	str	r3, [r7, #16]

	if (level) {
  4048f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4048f6:	2b00      	cmp	r3, #0
  4048f8:	d009      	beq.n	40490e <ioport_set_pin_level+0x4e>
  4048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4048fc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4048fe:	68fb      	ldr	r3, [r7, #12]
  404900:	f003 031f 	and.w	r3, r3, #31
  404904:	2201      	movs	r2, #1
  404906:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404908:	693b      	ldr	r3, [r7, #16]
  40490a:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  40490c:	e008      	b.n	404920 <ioport_set_pin_level+0x60>
  40490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404910:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  404912:	68bb      	ldr	r3, [r7, #8]
  404914:	f003 031f 	and.w	r3, r3, #31
  404918:	2201      	movs	r2, #1
  40491a:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40491c:	693b      	ldr	r3, [r7, #16]
  40491e:	635a      	str	r2, [r3, #52]	; 0x34
  404920:	bf00      	nop
  404922:	372c      	adds	r7, #44	; 0x2c
  404924:	46bd      	mov	sp, r7
  404926:	f85d 7b04 	ldr.w	r7, [sp], #4
  40492a:	4770      	bx	lr

0040492c <inv_board_hal_init>:

/* This variable contains the number of nested calls to disable_irq */
static uint32_t sDisableIntCount = 0;

void inv_board_hal_init(void)
{
  40492c:	b580      	push	{r7, lr}
  40492e:	af00      	add	r7, sp, #0
	/* Initialize the SAM system */
	sysclk_init();
  404930:	4b08      	ldr	r3, [pc, #32]	; (404954 <inv_board_hal_init+0x28>)
  404932:	4798      	blx	r3
	
	ioport_init();
  404934:	4b08      	ldr	r3, [pc, #32]	; (404958 <inv_board_hal_init+0x2c>)
  404936:	4798      	blx	r3
	
	/* Initialize LED0, turned off */
	ioport_set_pin_dir(PIO_PA6_IDX, IOPORT_DIR_OUTPUT);
  404938:	2101      	movs	r1, #1
  40493a:	2006      	movs	r0, #6
  40493c:	4b07      	ldr	r3, [pc, #28]	; (40495c <inv_board_hal_init+0x30>)
  40493e:	4798      	blx	r3
	ioport_set_pin_level(PIO_PA6_IDX, IOPORT_PIN_LEVEL_HIGH);
  404940:	2101      	movs	r1, #1
  404942:	2006      	movs	r0, #6
  404944:	4b06      	ldr	r3, [pc, #24]	; (404960 <inv_board_hal_init+0x34>)
  404946:	4798      	blx	r3
	
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404948:	4b06      	ldr	r3, [pc, #24]	; (404964 <inv_board_hal_init+0x38>)
  40494a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40494e:	605a      	str	r2, [r3, #4]
}
  404950:	bf00      	nop
  404952:	bd80      	pop	{r7, pc}
  404954:	00407c81 	.word	0x00407c81
  404958:	00404821 	.word	0x00404821
  40495c:	00404839 	.word	0x00404839
  404960:	004048c1 	.word	0x004048c1
  404964:	400e1450 	.word	0x400e1450

00404968 <inv_disable_irq>:

void inv_disable_irq(void)
{
  404968:	b480      	push	{r7}
  40496a:	af00      	add	r7, sp, #0
	if(sDisableIntCount == 0) {
  40496c:	4b07      	ldr	r3, [pc, #28]	; (40498c <inv_disable_irq+0x24>)
  40496e:	681b      	ldr	r3, [r3, #0]
  404970:	2b00      	cmp	r3, #0
  404972:	d100      	bne.n	404976 <inv_disable_irq+0xe>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  404974:	b672      	cpsid	i
		__disable_irq();
	}
	sDisableIntCount ++;
  404976:	4b05      	ldr	r3, [pc, #20]	; (40498c <inv_disable_irq+0x24>)
  404978:	681b      	ldr	r3, [r3, #0]
  40497a:	3301      	adds	r3, #1
  40497c:	4a03      	ldr	r2, [pc, #12]	; (40498c <inv_disable_irq+0x24>)
  40497e:	6013      	str	r3, [r2, #0]
}
  404980:	bf00      	nop
  404982:	46bd      	mov	sp, r7
  404984:	f85d 7b04 	ldr.w	r7, [sp], #4
  404988:	4770      	bx	lr
  40498a:	bf00      	nop
  40498c:	20003a84 	.word	0x20003a84

00404990 <inv_enable_irq>:

void inv_enable_irq(void)
{
  404990:	b480      	push	{r7}
  404992:	af00      	add	r7, sp, #0
	sDisableIntCount --;
  404994:	4b07      	ldr	r3, [pc, #28]	; (4049b4 <inv_enable_irq+0x24>)
  404996:	681b      	ldr	r3, [r3, #0]
  404998:	3b01      	subs	r3, #1
  40499a:	4a06      	ldr	r2, [pc, #24]	; (4049b4 <inv_enable_irq+0x24>)
  40499c:	6013      	str	r3, [r2, #0]
	if(sDisableIntCount == 0) {
  40499e:	4b05      	ldr	r3, [pc, #20]	; (4049b4 <inv_enable_irq+0x24>)
  4049a0:	681b      	ldr	r3, [r3, #0]
  4049a2:	2b00      	cmp	r3, #0
  4049a4:	d100      	bne.n	4049a8 <inv_enable_irq+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
  4049a6:	b662      	cpsie	i
		__enable_irq();
	}
}
  4049a8:	bf00      	nop
  4049aa:	46bd      	mov	sp, r7
  4049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049b0:	4770      	bx	lr
  4049b2:	bf00      	nop
  4049b4:	20003a84 	.word	0x20003a84

004049b8 <start_timer>:
#include <stdint.h>

static unsigned timer_num;

static void start_timer(void) 
{
  4049b8:	b580      	push	{r7, lr}
  4049ba:	af00      	add	r7, sp, #0
	inv_timer_enable(timer_num);
  4049bc:	4b03      	ldr	r3, [pc, #12]	; (4049cc <start_timer+0x14>)
  4049be:	681b      	ldr	r3, [r3, #0]
  4049c0:	4618      	mov	r0, r3
  4049c2:	4b03      	ldr	r3, [pc, #12]	; (4049d0 <start_timer+0x18>)
  4049c4:	4798      	blx	r3
}
  4049c6:	bf00      	nop
  4049c8:	bd80      	pop	{r7, pc}
  4049ca:	bf00      	nop
  4049cc:	20003a88 	.word	0x20003a88
  4049d0:	00406165 	.word	0x00406165

004049d4 <stop_timer>:

static void stop_timer(void) 
{
  4049d4:	b580      	push	{r7, lr}
  4049d6:	af00      	add	r7, sp, #0
	inv_timer_channel_stop(timer_num, 0);
  4049d8:	4b03      	ldr	r3, [pc, #12]	; (4049e8 <stop_timer+0x14>)
  4049da:	681b      	ldr	r3, [r3, #0]
  4049dc:	2100      	movs	r1, #0
  4049de:	4618      	mov	r0, r3
  4049e0:	4b02      	ldr	r3, [pc, #8]	; (4049ec <stop_timer+0x18>)
  4049e2:	4798      	blx	r3
}
  4049e4:	bf00      	nop
  4049e6:	bd80      	pop	{r7, pc}
  4049e8:	20003a88 	.word	0x20003a88
  4049ec:	00406525 	.word	0x00406525

004049f0 <internal_delay>:

static void internal_delay(uint16_t us)
{
  4049f0:	b590      	push	{r4, r7, lr}
  4049f2:	b087      	sub	sp, #28
  4049f4:	af00      	add	r7, sp, #0
  4049f6:	4603      	mov	r3, r0
  4049f8:	80fb      	strh	r3, [r7, #6]
	const uint32_t start = (uint32_t)inv_timer_get_counter(timer_num);
  4049fa:	4b13      	ldr	r3, [pc, #76]	; (404a48 <internal_delay+0x58>)
  4049fc:	681b      	ldr	r3, [r3, #0]
  4049fe:	4618      	mov	r0, r3
  404a00:	4b12      	ldr	r3, [pc, #72]	; (404a4c <internal_delay+0x5c>)
  404a02:	4798      	blx	r3
  404a04:	4603      	mov	r3, r0
  404a06:	460c      	mov	r4, r1
  404a08:	60fb      	str	r3, [r7, #12]

	uint32_t now, prev = 0;
  404a0a:	2300      	movs	r3, #0
  404a0c:	613b      	str	r3, [r7, #16]
	do{
		now = (uint32_t)inv_timer_get_counter(timer_num);
  404a0e:	4b0e      	ldr	r3, [pc, #56]	; (404a48 <internal_delay+0x58>)
  404a10:	681b      	ldr	r3, [r3, #0]
  404a12:	4618      	mov	r0, r3
  404a14:	4b0d      	ldr	r3, [pc, #52]	; (404a4c <internal_delay+0x5c>)
  404a16:	4798      	blx	r3
  404a18:	4603      	mov	r3, r0
  404a1a:	460c      	mov	r4, r1
  404a1c:	617b      	str	r3, [r7, #20]

		/* handle rollover */
		if(now < prev)
  404a1e:	697a      	ldr	r2, [r7, #20]
  404a20:	693b      	ldr	r3, [r7, #16]
  404a22:	429a      	cmp	r2, r3
  404a24:	d204      	bcs.n	404a30 <internal_delay+0x40>
			now = UINT16_MAX + now;
  404a26:	697b      	ldr	r3, [r7, #20]
  404a28:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  404a2c:	33ff      	adds	r3, #255	; 0xff
  404a2e:	617b      	str	r3, [r7, #20]
		prev = now;
  404a30:	697b      	ldr	r3, [r7, #20]
  404a32:	613b      	str	r3, [r7, #16]

	}while((now - start) <= us);
  404a34:	697a      	ldr	r2, [r7, #20]
  404a36:	68fb      	ldr	r3, [r7, #12]
  404a38:	1ad2      	subs	r2, r2, r3
  404a3a:	88fb      	ldrh	r3, [r7, #6]
  404a3c:	429a      	cmp	r2, r3
  404a3e:	d9e6      	bls.n	404a0e <internal_delay+0x1e>
}
  404a40:	bf00      	nop
  404a42:	371c      	adds	r7, #28
  404a44:	46bd      	mov	sp, r7
  404a46:	bd90      	pop	{r4, r7, pc}
  404a48:	20003a88 	.word	0x20003a88
  404a4c:	004063f1 	.word	0x004063f1

00404a50 <inv_delay_init>:

int inv_delay_init(unsigned tim_num)
{
  404a50:	b580      	push	{r7, lr}
  404a52:	b082      	sub	sp, #8
  404a54:	af00      	add	r7, sp, #0
  404a56:	6078      	str	r0, [r7, #4]
	timer_num = tim_num;
  404a58:	4a05      	ldr	r2, [pc, #20]	; (404a70 <inv_delay_init+0x20>)
  404a5a:	687b      	ldr	r3, [r7, #4]
  404a5c:	6013      	str	r3, [r2, #0]
	
	/* Timer configuration at 1MHz frequency */
	return inv_timer_configure_timebase(1000000);
  404a5e:	4805      	ldr	r0, [pc, #20]	; (404a74 <inv_delay_init+0x24>)
  404a60:	4b05      	ldr	r3, [pc, #20]	; (404a78 <inv_delay_init+0x28>)
  404a62:	4798      	blx	r3
  404a64:	4603      	mov	r3, r0
}
  404a66:	4618      	mov	r0, r3
  404a68:	3708      	adds	r7, #8
  404a6a:	46bd      	mov	sp, r7
  404a6c:	bd80      	pop	{r7, pc}
  404a6e:	bf00      	nop
  404a70:	20003a88 	.word	0x20003a88
  404a74:	000f4240 	.word	0x000f4240
  404a78:	004061e5 	.word	0x004061e5

00404a7c <inv_delay_us>:

void inv_delay_us(uint32_t us)
{
  404a7c:	b580      	push	{r7, lr}
  404a7e:	b084      	sub	sp, #16
  404a80:	af00      	add	r7, sp, #0
  404a82:	6078      	str	r0, [r7, #4]
	start_timer();
  404a84:	4b18      	ldr	r3, [pc, #96]	; (404ae8 <inv_delay_us+0x6c>)
  404a86:	4798      	blx	r3

	/* in case the delay is up to UINT16_MAX */
	if(us >= UINT16_MAX) {
  404a88:	687b      	ldr	r3, [r7, #4]
  404a8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  404a8e:	4293      	cmp	r3, r2
  404a90:	d91f      	bls.n	404ad2 <inv_delay_us+0x56>
		/* go to the loop as the internal_delay function only support uint16_t argument type */
		for(uint32_t i = 0; i < (uint32_t)(us / UINT16_MAX); i++) {
  404a92:	2300      	movs	r3, #0
  404a94:	60fb      	str	r3, [r7, #12]
  404a96:	e006      	b.n	404aa6 <inv_delay_us+0x2a>
			internal_delay(UINT16_MAX);
  404a98:	f64f 70ff 	movw	r0, #65535	; 0xffff
  404a9c:	4b13      	ldr	r3, [pc, #76]	; (404aec <inv_delay_us+0x70>)
  404a9e:	4798      	blx	r3
		for(uint32_t i = 0; i < (uint32_t)(us / UINT16_MAX); i++) {
  404aa0:	68fb      	ldr	r3, [r7, #12]
  404aa2:	3301      	adds	r3, #1
  404aa4:	60fb      	str	r3, [r7, #12]
  404aa6:	687b      	ldr	r3, [r7, #4]
  404aa8:	4a11      	ldr	r2, [pc, #68]	; (404af0 <inv_delay_us+0x74>)
  404aaa:	fba2 2303 	umull	r2, r3, r2, r3
  404aae:	0bda      	lsrs	r2, r3, #15
  404ab0:	68fb      	ldr	r3, [r7, #12]
  404ab2:	429a      	cmp	r2, r3
  404ab4:	d8f0      	bhi.n	404a98 <inv_delay_us+0x1c>
		}
		internal_delay(us % UINT16_MAX);
  404ab6:	6879      	ldr	r1, [r7, #4]
  404ab8:	4b0d      	ldr	r3, [pc, #52]	; (404af0 <inv_delay_us+0x74>)
  404aba:	fba3 2301 	umull	r2, r3, r3, r1
  404abe:	0bda      	lsrs	r2, r3, #15
  404ac0:	4613      	mov	r3, r2
  404ac2:	041b      	lsls	r3, r3, #16
  404ac4:	1a9b      	subs	r3, r3, r2
  404ac6:	1aca      	subs	r2, r1, r3
  404ac8:	b293      	uxth	r3, r2
  404aca:	4618      	mov	r0, r3
  404acc:	4b07      	ldr	r3, [pc, #28]	; (404aec <inv_delay_us+0x70>)
  404ace:	4798      	blx	r3
  404ad0:	e004      	b.n	404adc <inv_delay_us+0x60>
	}
	else
		internal_delay(us);
  404ad2:	687b      	ldr	r3, [r7, #4]
  404ad4:	b29b      	uxth	r3, r3
  404ad6:	4618      	mov	r0, r3
  404ad8:	4b04      	ldr	r3, [pc, #16]	; (404aec <inv_delay_us+0x70>)
  404ada:	4798      	blx	r3

	stop_timer();
  404adc:	4b05      	ldr	r3, [pc, #20]	; (404af4 <inv_delay_us+0x78>)
  404ade:	4798      	blx	r3
}
  404ae0:	bf00      	nop
  404ae2:	3710      	adds	r7, #16
  404ae4:	46bd      	mov	sp, r7
  404ae6:	bd80      	pop	{r7, pc}
  404ae8:	004049b9 	.word	0x004049b9
  404aec:	004049f1 	.word	0x004049f1
  404af0:	80008001 	.word	0x80008001
  404af4:	004049d5 	.word	0x004049d5

00404af8 <inv_flash_manager_init>:
uint32_t ul_test_page_addr = FLASH_PAGE_ADDRESS_START;

/** Public functions **/

int inv_flash_manager_init(void)
{
  404af8:	b590      	push	{r4, r7, lr}
  404afa:	b083      	sub	sp, #12
  404afc:	af00      	add	r7, sp, #0
	uint32_t rc;

	/* Lock the flash in default case */
	if (flash_is_locked(ul_test_page_addr, ul_test_page_addr+IFLASH_PAGE_SIZE-1) == 0) {
  404afe:	4b10      	ldr	r3, [pc, #64]	; (404b40 <inv_flash_manager_init+0x48>)
  404b00:	681a      	ldr	r2, [r3, #0]
  404b02:	4b0f      	ldr	r3, [pc, #60]	; (404b40 <inv_flash_manager_init+0x48>)
  404b04:	681b      	ldr	r3, [r3, #0]
  404b06:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  404b0a:	4619      	mov	r1, r3
  404b0c:	4610      	mov	r0, r2
  404b0e:	4b0d      	ldr	r3, [pc, #52]	; (404b44 <inv_flash_manager_init+0x4c>)
  404b10:	4798      	blx	r3
  404b12:	4603      	mov	r3, r0
  404b14:	2b00      	cmp	r3, #0
  404b16:	d109      	bne.n	404b2c <inv_flash_manager_init+0x34>
		flash_lock(ul_test_page_addr,
  404b18:	4b09      	ldr	r3, [pc, #36]	; (404b40 <inv_flash_manager_init+0x48>)
  404b1a:	6818      	ldr	r0, [r3, #0]
  404b1c:	4b08      	ldr	r3, [pc, #32]	; (404b40 <inv_flash_manager_init+0x48>)
  404b1e:	681b      	ldr	r3, [r3, #0]
  404b20:	f203 11ff 	addw	r1, r3, #511	; 0x1ff
  404b24:	2300      	movs	r3, #0
  404b26:	2200      	movs	r2, #0
  404b28:	4c07      	ldr	r4, [pc, #28]	; (404b48 <inv_flash_manager_init+0x50>)
  404b2a:	47a0      	blx	r4
			ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	}

	/* Initialize flash: 6 wait states for flash writing. */
	rc = flash_init(FLASH_ACCESS_MODE_128, 6);
  404b2c:	2106      	movs	r1, #6
  404b2e:	2000      	movs	r0, #0
  404b30:	4b06      	ldr	r3, [pc, #24]	; (404b4c <inv_flash_manager_init+0x54>)
  404b32:	4798      	blx	r3
  404b34:	6078      	str	r0, [r7, #4]

	return rc;
  404b36:	687b      	ldr	r3, [r7, #4]
}
  404b38:	4618      	mov	r0, r3
  404b3a:	370c      	adds	r7, #12
  404b3c:	46bd      	mov	sp, r7
  404b3e:	bd90      	pop	{r4, r7, pc}
  404b40:	2000011c 	.word	0x2000011c
  404b44:	00409eb5 	.word	0x00409eb5
  404b48:	00409d7d 	.word	0x00409d7d
  404b4c:	00409be1 	.word	0x00409be1

00404b50 <inv_flash_manager_readData>:

	return rc;
}

int inv_flash_manager_readData(uint8_t* pData)
{
  404b50:	b580      	push	{r7, lr}
  404b52:	b088      	sub	sp, #32
  404b54:	af00      	add	r7, sp, #0
  404b56:	6078      	str	r0, [r7, #4]
	uint32_t *pul_test_page = (uint32_t *) ul_test_page_addr;
  404b58:	4b21      	ldr	r3, [pc, #132]	; (404be0 <inv_flash_manager_readData+0x90>)
  404b5a:	681b      	ldr	r3, [r3, #0]
  404b5c:	60fb      	str	r3, [r7, #12]
	uint32_t FlashHeader = 0;
  404b5e:	2300      	movs	r3, #0
  404b60:	61fb      	str	r3, [r7, #28]
	int rc = 0;
  404b62:	2300      	movs	r3, #0
  404b64:	61bb      	str	r3, [r7, #24]

	/* check Header */
	for (int i = 0; i < FLASH_HEADER_SIZE; i++)
  404b66:	2300      	movs	r3, #0
  404b68:	617b      	str	r3, [r7, #20]
  404b6a:	e00e      	b.n	404b8a <inv_flash_manager_readData+0x3a>
		FlashHeader |= pul_test_page[i] << i * 8;
  404b6c:	697b      	ldr	r3, [r7, #20]
  404b6e:	009b      	lsls	r3, r3, #2
  404b70:	68fa      	ldr	r2, [r7, #12]
  404b72:	4413      	add	r3, r2
  404b74:	681a      	ldr	r2, [r3, #0]
  404b76:	697b      	ldr	r3, [r7, #20]
  404b78:	00db      	lsls	r3, r3, #3
  404b7a:	fa02 f303 	lsl.w	r3, r2, r3
  404b7e:	69fa      	ldr	r2, [r7, #28]
  404b80:	4313      	orrs	r3, r2
  404b82:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < FLASH_HEADER_SIZE; i++)
  404b84:	697b      	ldr	r3, [r7, #20]
  404b86:	3301      	adds	r3, #1
  404b88:	617b      	str	r3, [r7, #20]
  404b8a:	697b      	ldr	r3, [r7, #20]
  404b8c:	2b03      	cmp	r3, #3
  404b8e:	dded      	ble.n	404b6c <inv_flash_manager_readData+0x1c>
		
	if (FlashHeader == FLASH_HEADER) {
  404b90:	69fb      	ldr	r3, [r7, #28]
  404b92:	4a14      	ldr	r2, [pc, #80]	; (404be4 <inv_flash_manager_readData+0x94>)
  404b94:	4293      	cmp	r3, r2
  404b96:	d114      	bne.n	404bc2 <inv_flash_manager_readData+0x72>
		for (int i = 0; i < FLASH_DATA_SIZE; i++)
  404b98:	2300      	movs	r3, #0
  404b9a:	613b      	str	r3, [r7, #16]
  404b9c:	e00d      	b.n	404bba <inv_flash_manager_readData+0x6a>
			pData[i] = pul_test_page[i + FLASH_HEADER_SIZE];
  404b9e:	693b      	ldr	r3, [r7, #16]
  404ba0:	687a      	ldr	r2, [r7, #4]
  404ba2:	4413      	add	r3, r2
  404ba4:	693a      	ldr	r2, [r7, #16]
  404ba6:	3204      	adds	r2, #4
  404ba8:	0092      	lsls	r2, r2, #2
  404baa:	68f9      	ldr	r1, [r7, #12]
  404bac:	440a      	add	r2, r1
  404bae:	6812      	ldr	r2, [r2, #0]
  404bb0:	b2d2      	uxtb	r2, r2
  404bb2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < FLASH_DATA_SIZE; i++)
  404bb4:	693b      	ldr	r3, [r7, #16]
  404bb6:	3301      	adds	r3, #1
  404bb8:	613b      	str	r3, [r7, #16]
  404bba:	693b      	ldr	r3, [r7, #16]
  404bbc:	2b53      	cmp	r3, #83	; 0x53
  404bbe:	ddee      	ble.n	404b9e <inv_flash_manager_readData+0x4e>
  404bc0:	e008      	b.n	404bd4 <inv_flash_manager_readData+0x84>
	}
	else {
		memset(pData, 0, FLASH_DATA_SIZE);
  404bc2:	2254      	movs	r2, #84	; 0x54
  404bc4:	2100      	movs	r1, #0
  404bc6:	6878      	ldr	r0, [r7, #4]
  404bc8:	4b07      	ldr	r3, [pc, #28]	; (404be8 <inv_flash_manager_readData+0x98>)
  404bca:	4798      	blx	r3
		rc |= FLASH_HEADER_MISSING_RC;
  404bcc:	69bb      	ldr	r3, [r7, #24]
  404bce:	f043 0301 	orr.w	r3, r3, #1
  404bd2:	61bb      	str	r3, [r7, #24]
	}

	return rc;
  404bd4:	69bb      	ldr	r3, [r7, #24]
}
  404bd6:	4618      	mov	r0, r3
  404bd8:	3720      	adds	r7, #32
  404bda:	46bd      	mov	sp, r7
  404bdc:	bd80      	pop	{r7, pc}
  404bde:	bf00      	nop
  404be0:	2000011c 	.word	0x2000011c
  404be4:	0a0b0b0a 	.word	0x0a0b0b0a
  404be8:	0040fa5d 	.word	0x0040fa5d

00404bec <inv_flash_manager_writeData>:


int inv_flash_manager_writeData(const uint8_t* pData)
{
  404bec:	b590      	push	{r4, r7, lr}
  404bee:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
  404bf2:	af00      	add	r7, sp, #0
  404bf4:	1d3b      	adds	r3, r7, #4
  404bf6:	6018      	str	r0, [r3, #0]
	uint32_t rc;
	uint32_t ul_idx;
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)] = {0};
  404bf8:	f107 0308 	add.w	r3, r7, #8
  404bfc:	4618      	mov	r0, r3
  404bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
  404c02:	461a      	mov	r2, r3
  404c04:	2100      	movs	r1, #0
  404c06:	4b45      	ldr	r3, [pc, #276]	; (404d1c <inv_flash_manager_writeData+0x130>)
  404c08:	4798      	blx	r3

	/* Unlock page */
	rc = flash_unlock(ul_test_page_addr,
  404c0a:	4b45      	ldr	r3, [pc, #276]	; (404d20 <inv_flash_manager_writeData+0x134>)
  404c0c:	6818      	ldr	r0, [r3, #0]
  404c0e:	4b44      	ldr	r3, [pc, #272]	; (404d20 <inv_flash_manager_writeData+0x134>)
  404c10:	681b      	ldr	r3, [r3, #0]
  404c12:	f203 11ff 	addw	r1, r3, #511	; 0x1ff
  404c16:	2300      	movs	r3, #0
  404c18:	2200      	movs	r2, #0
  404c1a:	4c42      	ldr	r4, [pc, #264]	; (404d24 <inv_flash_manager_writeData+0x138>)
  404c1c:	47a0      	blx	r4
  404c1e:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
			ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (rc != FLASH_RC_OK) {
  404c22:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404c26:	2b00      	cmp	r3, #0
  404c28:	d15d      	bne.n	404ce6 <inv_flash_manager_writeData+0xfa>
		goto LOCK_FLASH;
	}
		
	/* Write Header */
	for (ul_idx = 0; ul_idx < FLASH_HEADER_SIZE; ul_idx++)
  404c2a:	2300      	movs	r3, #0
  404c2c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  404c30:	e016      	b.n	404c60 <inv_flash_manager_writeData+0x74>
		ul_page_buffer[ul_idx] = (FLASH_HEADER & (0xFF << ul_idx * 8)) >> ul_idx * 8;
  404c32:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c36:	00db      	lsls	r3, r3, #3
  404c38:	22ff      	movs	r2, #255	; 0xff
  404c3a:	409a      	lsls	r2, r3
  404c3c:	4b3a      	ldr	r3, [pc, #232]	; (404d28 <inv_flash_manager_writeData+0x13c>)
  404c3e:	4013      	ands	r3, r2
  404c40:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
  404c44:	00d2      	lsls	r2, r2, #3
  404c46:	4113      	asrs	r3, r2
  404c48:	4619      	mov	r1, r3
  404c4a:	f107 0308 	add.w	r3, r7, #8
  404c4e:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
  404c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_idx = 0; ul_idx < FLASH_HEADER_SIZE; ul_idx++)
  404c56:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c5a:	3301      	adds	r3, #1
  404c5c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  404c60:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c64:	2b03      	cmp	r3, #3
  404c66:	d9e4      	bls.n	404c32 <inv_flash_manager_writeData+0x46>

	/* Write page */
	for (ul_idx = 0; ul_idx < FLASH_DATA_SIZE; ul_idx++) {
  404c68:	2300      	movs	r3, #0
  404c6a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  404c6e:	e014      	b.n	404c9a <inv_flash_manager_writeData+0xae>
		ul_page_buffer[ul_idx + FLASH_HEADER_SIZE] = *pData;
  404c70:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c74:	1d1a      	adds	r2, r3, #4
  404c76:	1d3b      	adds	r3, r7, #4
  404c78:	681b      	ldr	r3, [r3, #0]
  404c7a:	781b      	ldrb	r3, [r3, #0]
  404c7c:	4619      	mov	r1, r3
  404c7e:	f107 0308 	add.w	r3, r7, #8
  404c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pData ++;
  404c86:	1d3b      	adds	r3, r7, #4
  404c88:	1d3a      	adds	r2, r7, #4
  404c8a:	6812      	ldr	r2, [r2, #0]
  404c8c:	3201      	adds	r2, #1
  404c8e:	601a      	str	r2, [r3, #0]
	for (ul_idx = 0; ul_idx < FLASH_DATA_SIZE; ul_idx++) {
  404c90:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c94:	3301      	adds	r3, #1
  404c96:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  404c9a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
  404c9e:	2b53      	cmp	r3, #83	; 0x53
  404ca0:	d9e6      	bls.n	404c70 <inv_flash_manager_writeData+0x84>
	}

	/* The EWP command is not supported for non-8KByte sectors in all devices
	 *  SAM4 series, so an erase command is requried before the write operation.
	 */
	rc |= flash_erase_sector(ul_test_page_addr);
  404ca2:	4b1f      	ldr	r3, [pc, #124]	; (404d20 <inv_flash_manager_writeData+0x134>)
  404ca4:	681b      	ldr	r3, [r3, #0]
  404ca6:	4618      	mov	r0, r3
  404ca8:	4b20      	ldr	r3, [pc, #128]	; (404d2c <inv_flash_manager_writeData+0x140>)
  404caa:	4798      	blx	r3
  404cac:	4602      	mov	r2, r0
  404cae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404cb2:	4313      	orrs	r3, r2
  404cb4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	if (rc != FLASH_RC_OK) {
  404cb8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404cbc:	2b00      	cmp	r3, #0
  404cbe:	d114      	bne.n	404cea <inv_flash_manager_writeData+0xfe>
		goto LOCK_FLASH;
	}

	rc |= flash_write(ul_test_page_addr, ul_page_buffer,
  404cc0:	4b17      	ldr	r3, [pc, #92]	; (404d20 <inv_flash_manager_writeData+0x134>)
  404cc2:	6818      	ldr	r0, [r3, #0]
  404cc4:	f107 0108 	add.w	r1, r7, #8
  404cc8:	2300      	movs	r3, #0
  404cca:	f44f 7200 	mov.w	r2, #512	; 0x200
  404cce:	4c18      	ldr	r4, [pc, #96]	; (404d30 <inv_flash_manager_writeData+0x144>)
  404cd0:	47a0      	blx	r4
  404cd2:	4602      	mov	r2, r0
  404cd4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404cd8:	4313      	orrs	r3, r2
  404cda:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
		IFLASH_PAGE_SIZE, 0);

	if (rc != FLASH_RC_OK) {
  404cde:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404ce2:	2b00      	cmp	r3, #0
  404ce4:	e002      	b.n	404cec <inv_flash_manager_writeData+0x100>
		goto LOCK_FLASH;
  404ce6:	bf00      	nop
  404ce8:	e000      	b.n	404cec <inv_flash_manager_writeData+0x100>
		goto LOCK_FLASH;
  404cea:	bf00      	nop
		goto LOCK_FLASH;
	}

LOCK_FLASH :
	rc |= flash_lock(ul_test_page_addr,
  404cec:	4b0c      	ldr	r3, [pc, #48]	; (404d20 <inv_flash_manager_writeData+0x134>)
  404cee:	6818      	ldr	r0, [r3, #0]
  404cf0:	4b0b      	ldr	r3, [pc, #44]	; (404d20 <inv_flash_manager_writeData+0x134>)
  404cf2:	681b      	ldr	r3, [r3, #0]
  404cf4:	f203 11ff 	addw	r1, r3, #511	; 0x1ff
  404cf8:	2300      	movs	r3, #0
  404cfa:	2200      	movs	r2, #0
  404cfc:	4c0d      	ldr	r4, [pc, #52]	; (404d34 <inv_flash_manager_writeData+0x148>)
  404cfe:	47a0      	blx	r4
  404d00:	4602      	mov	r2, r0
  404d02:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404d06:	4313      	orrs	r3, r2
  404d08:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
			ul_test_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);

	return rc;
  404d0c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
  404d10:	4618      	mov	r0, r3
  404d12:	f507 7705 	add.w	r7, r7, #532	; 0x214
  404d16:	46bd      	mov	sp, r7
  404d18:	bd90      	pop	{r4, r7, pc}
  404d1a:	bf00      	nop
  404d1c:	0040fa5d 	.word	0x0040fa5d
  404d20:	2000011c 	.word	0x2000011c
  404d24:	00409e19 	.word	0x00409e19
  404d28:	0a0b0b0a 	.word	0x0a0b0b0a
  404d2c:	00409c09 	.word	0x00409c09
  404d30:	00409c49 	.word	0x00409c49
  404d34:	00409d7d 	.word	0x00409d7d

00404d38 <inv_gpio_sensor_irq_init>:
	return 0;
}

void inv_gpio_sensor_irq_init(unsigned pin_num,
		void (*interrupt_cb)(void * context, unsigned pin_num), void * context)
{
  404d38:	b5b0      	push	{r4, r5, r7, lr}
  404d3a:	b086      	sub	sp, #24
  404d3c:	af02      	add	r7, sp, #8
  404d3e:	60f8      	str	r0, [r7, #12]
  404d40:	60b9      	str	r1, [r7, #8]
  404d42:	607a      	str	r2, [r7, #4]
	if(pin_num >= INV_GPIO_MAX)
  404d44:	68fb      	ldr	r3, [r7, #12]
  404d46:	2b05      	cmp	r3, #5
  404d48:	f200 809c 	bhi.w	404e84 <inv_gpio_sensor_irq_init+0x14c>
		return;
	
	gm[pin_num].callback = interrupt_cb;
  404d4c:	494f      	ldr	r1, [pc, #316]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404d4e:	68fa      	ldr	r2, [r7, #12]
  404d50:	4613      	mov	r3, r2
  404d52:	00db      	lsls	r3, r3, #3
  404d54:	4413      	add	r3, r2
  404d56:	009b      	lsls	r3, r3, #2
  404d58:	440b      	add	r3, r1
  404d5a:	331c      	adds	r3, #28
  404d5c:	68ba      	ldr	r2, [r7, #8]
  404d5e:	601a      	str	r2, [r3, #0]
	gm[pin_num].context = context;
  404d60:	494a      	ldr	r1, [pc, #296]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404d62:	68fa      	ldr	r2, [r7, #12]
  404d64:	4613      	mov	r3, r2
  404d66:	00db      	lsls	r3, r3, #3
  404d68:	4413      	add	r3, r2
  404d6a:	009b      	lsls	r3, r3, #2
  404d6c:	440b      	add	r3, r1
  404d6e:	3320      	adds	r3, #32
  404d70:	687a      	ldr	r2, [r7, #4]
  404d72:	601a      	str	r2, [r3, #0]
	
	pmc_enable_periph_clk(gm[pin_num].pio_id);
  404d74:	4945      	ldr	r1, [pc, #276]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404d76:	68fa      	ldr	r2, [r7, #12]
  404d78:	4613      	mov	r3, r2
  404d7a:	00db      	lsls	r3, r3, #3
  404d7c:	4413      	add	r3, r2
  404d7e:	009b      	lsls	r3, r3, #2
  404d80:	440b      	add	r3, r1
  404d82:	3304      	adds	r3, #4
  404d84:	681b      	ldr	r3, [r3, #0]
  404d86:	4618      	mov	r0, r3
  404d88:	4b41      	ldr	r3, [pc, #260]	; (404e90 <inv_gpio_sensor_irq_init+0x158>)
  404d8a:	4798      	blx	r3
	
	pio_configure(gm[pin_num].p_pio, gm[pin_num].pio_type, gm[pin_num].pio_mask, 
  404d8c:	493f      	ldr	r1, [pc, #252]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404d8e:	68fa      	ldr	r2, [r7, #12]
  404d90:	4613      	mov	r3, r2
  404d92:	00db      	lsls	r3, r3, #3
  404d94:	4413      	add	r3, r2
  404d96:	009b      	lsls	r3, r3, #2
  404d98:	440b      	add	r3, r1
  404d9a:	6818      	ldr	r0, [r3, #0]
  404d9c:	493b      	ldr	r1, [pc, #236]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404d9e:	68fa      	ldr	r2, [r7, #12]
  404da0:	4613      	mov	r3, r2
  404da2:	00db      	lsls	r3, r3, #3
  404da4:	4413      	add	r3, r2
  404da6:	009b      	lsls	r3, r3, #2
  404da8:	440b      	add	r3, r1
  404daa:	3310      	adds	r3, #16
  404dac:	681c      	ldr	r4, [r3, #0]
  404dae:	4937      	ldr	r1, [pc, #220]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404db0:	68fa      	ldr	r2, [r7, #12]
  404db2:	4613      	mov	r3, r2
  404db4:	00db      	lsls	r3, r3, #3
  404db6:	4413      	add	r3, r2
  404db8:	009b      	lsls	r3, r3, #2
  404dba:	440b      	add	r3, r1
  404dbc:	330c      	adds	r3, #12
  404dbe:	681d      	ldr	r5, [r3, #0]
  404dc0:	4932      	ldr	r1, [pc, #200]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404dc2:	68fa      	ldr	r2, [r7, #12]
  404dc4:	4613      	mov	r3, r2
  404dc6:	00db      	lsls	r3, r3, #3
  404dc8:	4413      	add	r3, r2
  404dca:	009b      	lsls	r3, r3, #2
  404dcc:	440b      	add	r3, r1
  404dce:	3314      	adds	r3, #20
  404dd0:	681b      	ldr	r3, [r3, #0]
  404dd2:	462a      	mov	r2, r5
  404dd4:	4621      	mov	r1, r4
  404dd6:	4c2f      	ldr	r4, [pc, #188]	; (404e94 <inv_gpio_sensor_irq_init+0x15c>)
  404dd8:	47a0      	blx	r4
			 gm[pin_num].pio_attributes);
	
	pio_handler_set(gm[pin_num].p_pio, gm[pin_num].pio_id, gm[pin_num].pio_mask, 
  404dda:	492c      	ldr	r1, [pc, #176]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404ddc:	68fa      	ldr	r2, [r7, #12]
  404dde:	4613      	mov	r3, r2
  404de0:	00db      	lsls	r3, r3, #3
  404de2:	4413      	add	r3, r2
  404de4:	009b      	lsls	r3, r3, #2
  404de6:	440b      	add	r3, r1
  404de8:	6818      	ldr	r0, [r3, #0]
  404dea:	4928      	ldr	r1, [pc, #160]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404dec:	68fa      	ldr	r2, [r7, #12]
  404dee:	4613      	mov	r3, r2
  404df0:	00db      	lsls	r3, r3, #3
  404df2:	4413      	add	r3, r2
  404df4:	009b      	lsls	r3, r3, #2
  404df6:	440b      	add	r3, r1
  404df8:	3304      	adds	r3, #4
  404dfa:	681c      	ldr	r4, [r3, #0]
  404dfc:	4923      	ldr	r1, [pc, #140]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404dfe:	68fa      	ldr	r2, [r7, #12]
  404e00:	4613      	mov	r3, r2
  404e02:	00db      	lsls	r3, r3, #3
  404e04:	4413      	add	r3, r2
  404e06:	009b      	lsls	r3, r3, #2
  404e08:	440b      	add	r3, r1
  404e0a:	330c      	adds	r3, #12
  404e0c:	681d      	ldr	r5, [r3, #0]
  404e0e:	491f      	ldr	r1, [pc, #124]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404e10:	68fa      	ldr	r2, [r7, #12]
  404e12:	4613      	mov	r3, r2
  404e14:	00db      	lsls	r3, r3, #3
  404e16:	4413      	add	r3, r2
  404e18:	009b      	lsls	r3, r3, #2
  404e1a:	440b      	add	r3, r1
  404e1c:	3314      	adds	r3, #20
  404e1e:	681a      	ldr	r2, [r3, #0]
  404e20:	4b1d      	ldr	r3, [pc, #116]	; (404e98 <inv_gpio_sensor_irq_init+0x160>)
  404e22:	9300      	str	r3, [sp, #0]
  404e24:	4613      	mov	r3, r2
  404e26:	462a      	mov	r2, r5
  404e28:	4621      	mov	r1, r4
  404e2a:	4c1c      	ldr	r4, [pc, #112]	; (404e9c <inv_gpio_sensor_irq_init+0x164>)
  404e2c:	47a0      	blx	r4
			gm[pin_num].pio_attributes, gpio_common_callback);
	
	pio_enable_interrupt(gm[pin_num].p_pio, gm[pin_num].pio_mask);
  404e2e:	4917      	ldr	r1, [pc, #92]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404e30:	68fa      	ldr	r2, [r7, #12]
  404e32:	4613      	mov	r3, r2
  404e34:	00db      	lsls	r3, r3, #3
  404e36:	4413      	add	r3, r2
  404e38:	009b      	lsls	r3, r3, #2
  404e3a:	440b      	add	r3, r1
  404e3c:	6818      	ldr	r0, [r3, #0]
  404e3e:	4913      	ldr	r1, [pc, #76]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404e40:	68fa      	ldr	r2, [r7, #12]
  404e42:	4613      	mov	r3, r2
  404e44:	00db      	lsls	r3, r3, #3
  404e46:	4413      	add	r3, r2
  404e48:	009b      	lsls	r3, r3, #2
  404e4a:	440b      	add	r3, r1
  404e4c:	330c      	adds	r3, #12
  404e4e:	681b      	ldr	r3, [r3, #0]
  404e50:	4619      	mov	r1, r3
  404e52:	4b13      	ldr	r3, [pc, #76]	; (404ea0 <inv_gpio_sensor_irq_init+0x168>)
  404e54:	4798      	blx	r3
	
	pio_handler_set_priority(gm[pin_num].p_pio, gm[pin_num].pio_irqn, 0);// TODO: make the priority configurable
  404e56:	490d      	ldr	r1, [pc, #52]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404e58:	68fa      	ldr	r2, [r7, #12]
  404e5a:	4613      	mov	r3, r2
  404e5c:	00db      	lsls	r3, r3, #3
  404e5e:	4413      	add	r3, r2
  404e60:	009b      	lsls	r3, r3, #2
  404e62:	440b      	add	r3, r1
  404e64:	6818      	ldr	r0, [r3, #0]
  404e66:	4909      	ldr	r1, [pc, #36]	; (404e8c <inv_gpio_sensor_irq_init+0x154>)
  404e68:	68fa      	ldr	r2, [r7, #12]
  404e6a:	4613      	mov	r3, r2
  404e6c:	00db      	lsls	r3, r3, #3
  404e6e:	4413      	add	r3, r2
  404e70:	009b      	lsls	r3, r3, #2
  404e72:	440b      	add	r3, r1
  404e74:	3318      	adds	r3, #24
  404e76:	f993 3000 	ldrsb.w	r3, [r3]
  404e7a:	2200      	movs	r2, #0
  404e7c:	4619      	mov	r1, r3
  404e7e:	4b09      	ldr	r3, [pc, #36]	; (404ea4 <inv_gpio_sensor_irq_init+0x16c>)
  404e80:	4798      	blx	r3
  404e82:	e000      	b.n	404e86 <inv_gpio_sensor_irq_init+0x14e>
		return;
  404e84:	bf00      	nop
}
  404e86:	3710      	adds	r7, #16
  404e88:	46bd      	mov	sp, r7
  404e8a:	bdb0      	pop	{r4, r5, r7, pc}
  404e8c:	20000120 	.word	0x20000120
  404e90:	00408ab5 	.word	0x00408ab5
  404e94:	004083cd 	.word	0x004083cd
  404e98:	00404ea9 	.word	0x00404ea9
  404e9c:	00408705 	.word	0x00408705
  404ea0:	004084f9 	.word	0x004084f9
  404ea4:	004087d5 	.word	0x004087d5

00404ea8 <gpio_common_callback>:

static void gpio_common_callback(const uint32_t id, const uint32_t index)
{
  404ea8:	b590      	push	{r4, r7, lr}
  404eaa:	b085      	sub	sp, #20
  404eac:	af00      	add	r7, sp, #0
  404eae:	6078      	str	r0, [r7, #4]
  404eb0:	6039      	str	r1, [r7, #0]
	for(unsigned i=0; i<sizeof(gm)/sizeof(gm[0]); i++) {
  404eb2:	2300      	movs	r3, #0
  404eb4:	60fb      	str	r3, [r7, #12]
  404eb6:	e03b      	b.n	404f30 <gpio_common_callback+0x88>
		if((gm[i].pio_id == id) && (gm[i].pio_mask == index)) {
  404eb8:	4922      	ldr	r1, [pc, #136]	; (404f44 <gpio_common_callback+0x9c>)
  404eba:	68fa      	ldr	r2, [r7, #12]
  404ebc:	4613      	mov	r3, r2
  404ebe:	00db      	lsls	r3, r3, #3
  404ec0:	4413      	add	r3, r2
  404ec2:	009b      	lsls	r3, r3, #2
  404ec4:	440b      	add	r3, r1
  404ec6:	3304      	adds	r3, #4
  404ec8:	681a      	ldr	r2, [r3, #0]
  404eca:	687b      	ldr	r3, [r7, #4]
  404ecc:	429a      	cmp	r2, r3
  404ece:	d12c      	bne.n	404f2a <gpio_common_callback+0x82>
  404ed0:	491c      	ldr	r1, [pc, #112]	; (404f44 <gpio_common_callback+0x9c>)
  404ed2:	68fa      	ldr	r2, [r7, #12]
  404ed4:	4613      	mov	r3, r2
  404ed6:	00db      	lsls	r3, r3, #3
  404ed8:	4413      	add	r3, r2
  404eda:	009b      	lsls	r3, r3, #2
  404edc:	440b      	add	r3, r1
  404ede:	330c      	adds	r3, #12
  404ee0:	681a      	ldr	r2, [r3, #0]
  404ee2:	683b      	ldr	r3, [r7, #0]
  404ee4:	429a      	cmp	r2, r3
  404ee6:	d120      	bne.n	404f2a <gpio_common_callback+0x82>
			if(gm[i].callback)
  404ee8:	4916      	ldr	r1, [pc, #88]	; (404f44 <gpio_common_callback+0x9c>)
  404eea:	68fa      	ldr	r2, [r7, #12]
  404eec:	4613      	mov	r3, r2
  404eee:	00db      	lsls	r3, r3, #3
  404ef0:	4413      	add	r3, r2
  404ef2:	009b      	lsls	r3, r3, #2
  404ef4:	440b      	add	r3, r1
  404ef6:	331c      	adds	r3, #28
  404ef8:	681b      	ldr	r3, [r3, #0]
  404efa:	2b00      	cmp	r3, #0
  404efc:	d01c      	beq.n	404f38 <gpio_common_callback+0x90>
				gm[i].callback(gm[i].context, i);
  404efe:	4911      	ldr	r1, [pc, #68]	; (404f44 <gpio_common_callback+0x9c>)
  404f00:	68fa      	ldr	r2, [r7, #12]
  404f02:	4613      	mov	r3, r2
  404f04:	00db      	lsls	r3, r3, #3
  404f06:	4413      	add	r3, r2
  404f08:	009b      	lsls	r3, r3, #2
  404f0a:	440b      	add	r3, r1
  404f0c:	331c      	adds	r3, #28
  404f0e:	681c      	ldr	r4, [r3, #0]
  404f10:	490c      	ldr	r1, [pc, #48]	; (404f44 <gpio_common_callback+0x9c>)
  404f12:	68fa      	ldr	r2, [r7, #12]
  404f14:	4613      	mov	r3, r2
  404f16:	00db      	lsls	r3, r3, #3
  404f18:	4413      	add	r3, r2
  404f1a:	009b      	lsls	r3, r3, #2
  404f1c:	440b      	add	r3, r1
  404f1e:	3320      	adds	r3, #32
  404f20:	681b      	ldr	r3, [r3, #0]
  404f22:	68f9      	ldr	r1, [r7, #12]
  404f24:	4618      	mov	r0, r3
  404f26:	47a0      	blx	r4
			break;
  404f28:	e006      	b.n	404f38 <gpio_common_callback+0x90>
	for(unsigned i=0; i<sizeof(gm)/sizeof(gm[0]); i++) {
  404f2a:	68fb      	ldr	r3, [r7, #12]
  404f2c:	3301      	adds	r3, #1
  404f2e:	60fb      	str	r3, [r7, #12]
  404f30:	68fb      	ldr	r3, [r7, #12]
  404f32:	2b05      	cmp	r3, #5
  404f34:	d9c0      	bls.n	404eb8 <gpio_common_callback+0x10>
		}
	}
  404f36:	e000      	b.n	404f3a <gpio_common_callback+0x92>
			break;
  404f38:	bf00      	nop
  404f3a:	bf00      	nop
  404f3c:	3714      	adds	r7, #20
  404f3e:	46bd      	mov	sp, r7
  404f40:	bd90      	pop	{r4, r7, pc}
  404f42:	bf00      	nop
  404f44:	20000120 	.word	0x20000120

00404f48 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  404f48:	b480      	push	{r7}
  404f4a:	b083      	sub	sp, #12
  404f4c:	af00      	add	r7, sp, #0
  404f4e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404f50:	687b      	ldr	r3, [r7, #4]
  404f52:	2b07      	cmp	r3, #7
  404f54:	d825      	bhi.n	404fa2 <osc_get_rate+0x5a>
  404f56:	a201      	add	r2, pc, #4	; (adr r2, 404f5c <osc_get_rate+0x14>)
  404f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404f5c:	00404f7d 	.word	0x00404f7d
  404f60:	00404f83 	.word	0x00404f83
  404f64:	00404f89 	.word	0x00404f89
  404f68:	00404f8f 	.word	0x00404f8f
  404f6c:	00404f93 	.word	0x00404f93
  404f70:	00404f97 	.word	0x00404f97
  404f74:	00404f9b 	.word	0x00404f9b
  404f78:	00404f9f 	.word	0x00404f9f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  404f7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404f80:	e010      	b.n	404fa4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  404f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404f86:	e00d      	b.n	404fa4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  404f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404f8c:	e00a      	b.n	404fa4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  404f8e:	4b08      	ldr	r3, [pc, #32]	; (404fb0 <osc_get_rate+0x68>)
  404f90:	e008      	b.n	404fa4 <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  404f92:	4b08      	ldr	r3, [pc, #32]	; (404fb4 <osc_get_rate+0x6c>)
  404f94:	e006      	b.n	404fa4 <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  404f96:	4b08      	ldr	r3, [pc, #32]	; (404fb8 <osc_get_rate+0x70>)
  404f98:	e004      	b.n	404fa4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  404f9a:	2300      	movs	r3, #0
  404f9c:	e002      	b.n	404fa4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  404f9e:	2300      	movs	r3, #0
  404fa0:	e000      	b.n	404fa4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
  404fa2:	2300      	movs	r3, #0
}
  404fa4:	4618      	mov	r0, r3
  404fa6:	370c      	adds	r7, #12
  404fa8:	46bd      	mov	sp, r7
  404faa:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fae:	4770      	bx	lr
  404fb0:	007a1200 	.word	0x007a1200
  404fb4:	00f42400 	.word	0x00f42400
  404fb8:	016e3600 	.word	0x016e3600

00404fbc <sysclk_get_main_hz>:
{
  404fbc:	b580      	push	{r7, lr}
  404fbe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  404fc0:	2001      	movs	r0, #1
  404fc2:	4b04      	ldr	r3, [pc, #16]	; (404fd4 <sysclk_get_main_hz+0x18>)
  404fc4:	4798      	blx	r3
  404fc6:	4602      	mov	r2, r0
  404fc8:	f640 634e 	movw	r3, #3662	; 0xe4e
  404fcc:	fb03 f302 	mul.w	r3, r3, r2
}
  404fd0:	4618      	mov	r0, r3
  404fd2:	bd80      	pop	{r7, pc}
  404fd4:	00404f49 	.word	0x00404f49

00404fd8 <sysclk_get_peripheral_hz>:
{
  404fd8:	b580      	push	{r7, lr}
  404fda:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  404fdc:	4b02      	ldr	r3, [pc, #8]	; (404fe8 <sysclk_get_peripheral_hz+0x10>)
  404fde:	4798      	blx	r3
  404fe0:	4603      	mov	r3, r0
}
  404fe2:	4618      	mov	r0, r3
  404fe4:	bd80      	pop	{r7, pc}
  404fe6:	bf00      	nop
  404fe8:	00404fbd 	.word	0x00404fbd

00404fec <ioport_disable_pin>:
{
  404fec:	b480      	push	{r7}
  404fee:	b089      	sub	sp, #36	; 0x24
  404ff0:	af00      	add	r7, sp, #0
  404ff2:	6078      	str	r0, [r7, #4]
  404ff4:	687b      	ldr	r3, [r7, #4]
  404ff6:	61fb      	str	r3, [r7, #28]
  404ff8:	69fb      	ldr	r3, [r7, #28]
  404ffa:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  404ffc:	69bb      	ldr	r3, [r7, #24]
  404ffe:	095a      	lsrs	r2, r3, #5
  405000:	69fb      	ldr	r3, [r7, #28]
  405002:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  405004:	697b      	ldr	r3, [r7, #20]
  405006:	f003 031f 	and.w	r3, r3, #31
  40500a:	2101      	movs	r1, #1
  40500c:	fa01 f303 	lsl.w	r3, r1, r3
  405010:	613a      	str	r2, [r7, #16]
  405012:	60fb      	str	r3, [r7, #12]
  405014:	693b      	ldr	r3, [r7, #16]
  405016:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405018:	68bb      	ldr	r3, [r7, #8]
  40501a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40501e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405022:	025b      	lsls	r3, r3, #9
  405024:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  405026:	68fb      	ldr	r3, [r7, #12]
  405028:	6053      	str	r3, [r2, #4]
}
  40502a:	bf00      	nop
  40502c:	3724      	adds	r7, #36	; 0x24
  40502e:	46bd      	mov	sp, r7
  405030:	f85d 7b04 	ldr.w	r7, [sp], #4
  405034:	4770      	bx	lr

00405036 <ioport_set_pin_mode>:
{
  405036:	b480      	push	{r7}
  405038:	b08d      	sub	sp, #52	; 0x34
  40503a:	af00      	add	r7, sp, #0
  40503c:	6078      	str	r0, [r7, #4]
  40503e:	6039      	str	r1, [r7, #0]
  405040:	687b      	ldr	r3, [r7, #4]
  405042:	62fb      	str	r3, [r7, #44]	; 0x2c
  405044:	683b      	ldr	r3, [r7, #0]
  405046:	62bb      	str	r3, [r7, #40]	; 0x28
  405048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40504a:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40504e:	095a      	lsrs	r2, r3, #5
  405050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405052:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  405054:	6a3b      	ldr	r3, [r7, #32]
  405056:	f003 031f 	and.w	r3, r3, #31
  40505a:	2101      	movs	r1, #1
  40505c:	fa01 f303 	lsl.w	r3, r1, r3
  405060:	61fa      	str	r2, [r7, #28]
  405062:	61bb      	str	r3, [r7, #24]
  405064:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405066:	617b      	str	r3, [r7, #20]
  405068:	69fb      	ldr	r3, [r7, #28]
  40506a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40506c:	693b      	ldr	r3, [r7, #16]
  40506e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405072:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405076:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  405078:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  40507a:	697b      	ldr	r3, [r7, #20]
  40507c:	f003 0308 	and.w	r3, r3, #8
  405080:	2b00      	cmp	r3, #0
  405082:	d003      	beq.n	40508c <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  405084:	68fb      	ldr	r3, [r7, #12]
  405086:	69ba      	ldr	r2, [r7, #24]
  405088:	665a      	str	r2, [r3, #100]	; 0x64
  40508a:	e002      	b.n	405092 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  40508c:	68fb      	ldr	r3, [r7, #12]
  40508e:	69ba      	ldr	r2, [r7, #24]
  405090:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  405092:	697b      	ldr	r3, [r7, #20]
  405094:	f003 0310 	and.w	r3, r3, #16
  405098:	2b00      	cmp	r3, #0
  40509a:	d004      	beq.n	4050a6 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40509c:	68fb      	ldr	r3, [r7, #12]
  40509e:	69ba      	ldr	r2, [r7, #24]
  4050a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4050a4:	e003      	b.n	4050ae <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  4050a6:	68fb      	ldr	r3, [r7, #12]
  4050a8:	69ba      	ldr	r2, [r7, #24]
  4050aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4050ae:	697b      	ldr	r3, [r7, #20]
  4050b0:	f003 0320 	and.w	r3, r3, #32
  4050b4:	2b00      	cmp	r3, #0
  4050b6:	d003      	beq.n	4050c0 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4050b8:	68fb      	ldr	r3, [r7, #12]
  4050ba:	69ba      	ldr	r2, [r7, #24]
  4050bc:	651a      	str	r2, [r3, #80]	; 0x50
  4050be:	e002      	b.n	4050c6 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  4050c0:	68fb      	ldr	r3, [r7, #12]
  4050c2:	69ba      	ldr	r2, [r7, #24]
  4050c4:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4050c6:	697b      	ldr	r3, [r7, #20]
  4050c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4050cc:	2b00      	cmp	r3, #0
  4050ce:	d003      	beq.n	4050d8 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4050d0:	68fb      	ldr	r3, [r7, #12]
  4050d2:	69ba      	ldr	r2, [r7, #24]
  4050d4:	621a      	str	r2, [r3, #32]
  4050d6:	e002      	b.n	4050de <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  4050d8:	68fb      	ldr	r3, [r7, #12]
  4050da:	69ba      	ldr	r2, [r7, #24]
  4050dc:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4050de:	697b      	ldr	r3, [r7, #20]
  4050e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4050e4:	2b00      	cmp	r3, #0
  4050e6:	d004      	beq.n	4050f2 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  4050e8:	68fb      	ldr	r3, [r7, #12]
  4050ea:	69ba      	ldr	r2, [r7, #24]
  4050ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4050f0:	e003      	b.n	4050fa <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  4050f2:	68fb      	ldr	r3, [r7, #12]
  4050f4:	69ba      	ldr	r2, [r7, #24]
  4050f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4050fa:	697b      	ldr	r3, [r7, #20]
  4050fc:	f003 0301 	and.w	r3, r3, #1
  405100:	2b00      	cmp	r3, #0
  405102:	d006      	beq.n	405112 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  405104:	68fb      	ldr	r3, [r7, #12]
  405106:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405108:	69bb      	ldr	r3, [r7, #24]
  40510a:	431a      	orrs	r2, r3
  40510c:	68fb      	ldr	r3, [r7, #12]
  40510e:	671a      	str	r2, [r3, #112]	; 0x70
  405110:	e006      	b.n	405120 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  405112:	68fb      	ldr	r3, [r7, #12]
  405114:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405116:	69bb      	ldr	r3, [r7, #24]
  405118:	43db      	mvns	r3, r3
  40511a:	401a      	ands	r2, r3
  40511c:	68fb      	ldr	r3, [r7, #12]
  40511e:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  405120:	697b      	ldr	r3, [r7, #20]
  405122:	f003 0302 	and.w	r3, r3, #2
  405126:	2b00      	cmp	r3, #0
  405128:	d006      	beq.n	405138 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  40512a:	68fb      	ldr	r3, [r7, #12]
  40512c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40512e:	69bb      	ldr	r3, [r7, #24]
  405130:	431a      	orrs	r2, r3
  405132:	68fb      	ldr	r3, [r7, #12]
  405134:	675a      	str	r2, [r3, #116]	; 0x74
}
  405136:	e006      	b.n	405146 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  405138:	68fb      	ldr	r3, [r7, #12]
  40513a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40513c:	69bb      	ldr	r3, [r7, #24]
  40513e:	43db      	mvns	r3, r3
  405140:	401a      	ands	r2, r3
  405142:	68fb      	ldr	r3, [r7, #12]
  405144:	675a      	str	r2, [r3, #116]	; 0x74
  405146:	bf00      	nop
  405148:	3734      	adds	r7, #52	; 0x34
  40514a:	46bd      	mov	sp, r7
  40514c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405150:	4770      	bx	lr
	...

00405154 <inv_i2c_master_init>:
};

/********************************* Prototypes *********************************/

void inv_i2c_master_init(void)
{
  405154:	b580      	push	{r7, lr}
  405156:	b084      	sub	sp, #16
  405158:	af00      	add	r7, sp, #0
	twi_options_t opt;
	if (i2cm.is_inited != 0)
  40515a:	4b25      	ldr	r3, [pc, #148]	; (4051f0 <inv_i2c_master_init+0x9c>)
  40515c:	781b      	ldrb	r3, [r3, #0]
  40515e:	2b00      	cmp	r3, #0
  405160:	d13f      	bne.n	4051e2 <inv_i2c_master_init+0x8e>
		return;

	memset(&opt, 0, sizeof(twi_options_t));
  405162:	1d3b      	adds	r3, r7, #4
  405164:	220c      	movs	r2, #12
  405166:	2100      	movs	r1, #0
  405168:	4618      	mov	r0, r3
  40516a:	4b22      	ldr	r3, [pc, #136]	; (4051f4 <inv_i2c_master_init+0xa0>)
  40516c:	4798      	blx	r3
	
	ioport_set_pin_mode(i2cm.sda_pin, i2cm.sda_pin_mode);
  40516e:	4b20      	ldr	r3, [pc, #128]	; (4051f0 <inv_i2c_master_init+0x9c>)
  405170:	695a      	ldr	r2, [r3, #20]
  405172:	4b1f      	ldr	r3, [pc, #124]	; (4051f0 <inv_i2c_master_init+0x9c>)
  405174:	699b      	ldr	r3, [r3, #24]
  405176:	4619      	mov	r1, r3
  405178:	4610      	mov	r0, r2
  40517a:	4b1f      	ldr	r3, [pc, #124]	; (4051f8 <inv_i2c_master_init+0xa4>)
  40517c:	4798      	blx	r3
	ioport_disable_pin(i2cm.sda_pin);
  40517e:	4b1c      	ldr	r3, [pc, #112]	; (4051f0 <inv_i2c_master_init+0x9c>)
  405180:	695b      	ldr	r3, [r3, #20]
  405182:	4618      	mov	r0, r3
  405184:	4b1d      	ldr	r3, [pc, #116]	; (4051fc <inv_i2c_master_init+0xa8>)
  405186:	4798      	blx	r3
	ioport_set_pin_mode(i2cm.clk_pin, i2cm.clk_pin_mode);
  405188:	4b19      	ldr	r3, [pc, #100]	; (4051f0 <inv_i2c_master_init+0x9c>)
  40518a:	68da      	ldr	r2, [r3, #12]
  40518c:	4b18      	ldr	r3, [pc, #96]	; (4051f0 <inv_i2c_master_init+0x9c>)
  40518e:	691b      	ldr	r3, [r3, #16]
  405190:	4619      	mov	r1, r3
  405192:	4610      	mov	r0, r2
  405194:	4b18      	ldr	r3, [pc, #96]	; (4051f8 <inv_i2c_master_init+0xa4>)
  405196:	4798      	blx	r3
	ioport_disable_pin(i2cm.clk_pin);
  405198:	4b15      	ldr	r3, [pc, #84]	; (4051f0 <inv_i2c_master_init+0x9c>)
  40519a:	68db      	ldr	r3, [r3, #12]
  40519c:	4618      	mov	r0, r3
  40519e:	4b17      	ldr	r3, [pc, #92]	; (4051fc <inv_i2c_master_init+0xa8>)
  4051a0:	4798      	blx	r3

	/* Enable the peripheral and set TWI mode. */
	flexcom_enable(i2cm.p_flexcom);
  4051a2:	4b13      	ldr	r3, [pc, #76]	; (4051f0 <inv_i2c_master_init+0x9c>)
  4051a4:	689b      	ldr	r3, [r3, #8]
  4051a6:	4618      	mov	r0, r3
  4051a8:	4b15      	ldr	r3, [pc, #84]	; (405200 <inv_i2c_master_init+0xac>)
  4051aa:	4798      	blx	r3
	flexcom_set_opmode(i2cm.p_flexcom, FLEXCOM_TWI);
  4051ac:	4b10      	ldr	r3, [pc, #64]	; (4051f0 <inv_i2c_master_init+0x9c>)
  4051ae:	689b      	ldr	r3, [r3, #8]
  4051b0:	2103      	movs	r1, #3
  4051b2:	4618      	mov	r0, r3
  4051b4:	4b13      	ldr	r3, [pc, #76]	; (405204 <inv_i2c_master_init+0xb0>)
  4051b6:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  4051b8:	4b13      	ldr	r3, [pc, #76]	; (405208 <inv_i2c_master_init+0xb4>)
  4051ba:	4798      	blx	r3
  4051bc:	4603      	mov	r3, r0
  4051be:	607b      	str	r3, [r7, #4]
	opt.speed      = i2cm.clk_speed;
  4051c0:	4b0b      	ldr	r3, [pc, #44]	; (4051f0 <inv_i2c_master_init+0x9c>)
  4051c2:	69db      	ldr	r3, [r3, #28]
  4051c4:	60bb      	str	r3, [r7, #8]

	if (twi_master_init(i2cm.p_i2c, &opt) != TWI_SUCCESS)
  4051c6:	4b0a      	ldr	r3, [pc, #40]	; (4051f0 <inv_i2c_master_init+0x9c>)
  4051c8:	685b      	ldr	r3, [r3, #4]
  4051ca:	1d3a      	adds	r2, r7, #4
  4051cc:	4611      	mov	r1, r2
  4051ce:	4618      	mov	r0, r3
  4051d0:	4b0e      	ldr	r3, [pc, #56]	; (40520c <inv_i2c_master_init+0xb8>)
  4051d2:	4798      	blx	r3
  4051d4:	4603      	mov	r3, r0
  4051d6:	2b00      	cmp	r3, #0
  4051d8:	d105      	bne.n	4051e6 <inv_i2c_master_init+0x92>
		return;
	
	i2cm.is_inited = 1;
  4051da:	4b05      	ldr	r3, [pc, #20]	; (4051f0 <inv_i2c_master_init+0x9c>)
  4051dc:	2201      	movs	r2, #1
  4051de:	701a      	strb	r2, [r3, #0]
  4051e0:	e002      	b.n	4051e8 <inv_i2c_master_init+0x94>
		return;
  4051e2:	bf00      	nop
  4051e4:	e000      	b.n	4051e8 <inv_i2c_master_init+0x94>
		return;
  4051e6:	bf00      	nop
}
  4051e8:	3710      	adds	r7, #16
  4051ea:	46bd      	mov	sp, r7
  4051ec:	bd80      	pop	{r7, pc}
  4051ee:	bf00      	nop
  4051f0:	200001f8 	.word	0x200001f8
  4051f4:	0040fa5d 	.word	0x0040fa5d
  4051f8:	00405037 	.word	0x00405037
  4051fc:	00404fed 	.word	0x00404fed
  405200:	00407f69 	.word	0x00407f69
  405204:	004080d1 	.word	0x004080d1
  405208:	00404fd9 	.word	0x00404fd9
  40520c:	00409081 	.word	0x00409081

00405210 <inv_i2c_master_write_register>:

unsigned long inv_i2c_master_write_register(unsigned char Address, unsigned char RegisterAddr, unsigned short RegisterLen, const unsigned char *RegisterValue)
{
  405210:	b580      	push	{r7, lr}
  405212:	b088      	sub	sp, #32
  405214:	af00      	add	r7, sp, #0
  405216:	603b      	str	r3, [r7, #0]
  405218:	4603      	mov	r3, r0
  40521a:	71fb      	strb	r3, [r7, #7]
  40521c:	460b      	mov	r3, r1
  40521e:	71bb      	strb	r3, [r7, #6]
  405220:	4613      	mov	r3, r2
  405222:	80bb      	strh	r3, [r7, #4]
	uint8_t data = 0;
  405224:	2300      	movs	r3, #0
  405226:	77fb      	strb	r3, [r7, #31]
	twi_packet_t packet_tx;
	
	/* Configure the data packet to be transmitted */
	packet_tx.chip        = Address;
  405228:	79fb      	ldrb	r3, [r7, #7]
  40522a:	763b      	strb	r3, [r7, #24]
	packet_tx.addr[0]     = RegisterAddr;
  40522c:	79bb      	ldrb	r3, [r7, #6]
  40522e:	723b      	strb	r3, [r7, #8]
	packet_tx.addr_length = 1;
  405230:	2301      	movs	r3, #1
  405232:	60fb      	str	r3, [r7, #12]

	/* I2C Semi-Write is basically not supported
	 * Force packet length to 1 and 0 in packet buffer in case of I2C Semi-Write needed */
	if (RegisterLen == 0) {
  405234:	88bb      	ldrh	r3, [r7, #4]
  405236:	2b00      	cmp	r3, #0
  405238:	d105      	bne.n	405246 <inv_i2c_master_write_register+0x36>
		packet_tx.buffer  = &data;
  40523a:	f107 031f 	add.w	r3, r7, #31
  40523e:	613b      	str	r3, [r7, #16]
		packet_tx.length  = 1;
  405240:	2301      	movs	r3, #1
  405242:	617b      	str	r3, [r7, #20]
  405244:	e003      	b.n	40524e <inv_i2c_master_write_register+0x3e>
	} else {
		packet_tx.buffer  = (uint8_t *) RegisterValue;
  405246:	683b      	ldr	r3, [r7, #0]
  405248:	613b      	str	r3, [r7, #16]
		packet_tx.length  = RegisterLen;
  40524a:	88bb      	ldrh	r3, [r7, #4]
  40524c:	617b      	str	r3, [r7, #20]
	}

	/* Send data to attached I2C slave */
	if (twi_master_write(i2cm.p_i2c, &packet_tx) != TWI_SUCCESS)
  40524e:	4b09      	ldr	r3, [pc, #36]	; (405274 <inv_i2c_master_write_register+0x64>)
  405250:	685b      	ldr	r3, [r3, #4]
  405252:	f107 0208 	add.w	r2, r7, #8
  405256:	4611      	mov	r1, r2
  405258:	4618      	mov	r0, r3
  40525a:	4b07      	ldr	r3, [pc, #28]	; (405278 <inv_i2c_master_write_register+0x68>)
  40525c:	4798      	blx	r3
  40525e:	4603      	mov	r3, r0
  405260:	2b00      	cmp	r3, #0
  405262:	d002      	beq.n	40526a <inv_i2c_master_write_register+0x5a>
		return -1;
  405264:	f04f 33ff 	mov.w	r3, #4294967295
  405268:	e000      	b.n	40526c <inv_i2c_master_write_register+0x5c>
	else
		return 0;
  40526a:	2300      	movs	r3, #0
}
  40526c:	4618      	mov	r0, r3
  40526e:	3720      	adds	r7, #32
  405270:	46bd      	mov	sp, r7
  405272:	bd80      	pop	{r7, pc}
  405274:	200001f8 	.word	0x200001f8
  405278:	00409341 	.word	0x00409341

0040527c <inv_i2c_master_read_register>:
	else
		return 0;    
}

unsigned long inv_i2c_master_read_register(unsigned char Address, unsigned char RegisterAddr, unsigned short RegisterLen, unsigned char *RegisterValue)
{
  40527c:	b580      	push	{r7, lr}
  40527e:	b088      	sub	sp, #32
  405280:	af00      	add	r7, sp, #0
  405282:	603b      	str	r3, [r7, #0]
  405284:	4603      	mov	r3, r0
  405286:	71fb      	strb	r3, [r7, #7]
  405288:	460b      	mov	r3, r1
  40528a:	71bb      	strb	r3, [r7, #6]
  40528c:	4613      	mov	r3, r2
  40528e:	80bb      	strh	r3, [r7, #4]
	twi_packet_t packet_rx;
	
	/* Configure the data packet to be received */
	packet_rx.chip        = Address;
  405290:	79fb      	ldrb	r3, [r7, #7]
  405292:	773b      	strb	r3, [r7, #28]
	packet_rx.addr[0]     = RegisterAddr;
  405294:	79bb      	ldrb	r3, [r7, #6]
  405296:	733b      	strb	r3, [r7, #12]
	packet_rx.addr_length = 1;
  405298:	2301      	movs	r3, #1
  40529a:	613b      	str	r3, [r7, #16]
	packet_rx.buffer      = RegisterValue;
  40529c:	683b      	ldr	r3, [r7, #0]
  40529e:	617b      	str	r3, [r7, #20]
	packet_rx.length      = RegisterLen;
  4052a0:	88bb      	ldrh	r3, [r7, #4]
  4052a2:	61bb      	str	r3, [r7, #24]

	/* Get data out of attached I2C slave */
	if (twi_master_read(i2cm.p_i2c, &packet_rx) != TWI_SUCCESS)
  4052a4:	4b09      	ldr	r3, [pc, #36]	; (4052cc <inv_i2c_master_read_register+0x50>)
  4052a6:	685b      	ldr	r3, [r3, #4]
  4052a8:	f107 020c 	add.w	r2, r7, #12
  4052ac:	4611      	mov	r1, r2
  4052ae:	4618      	mov	r0, r3
  4052b0:	4b07      	ldr	r3, [pc, #28]	; (4052d0 <inv_i2c_master_read_register+0x54>)
  4052b2:	4798      	blx	r3
  4052b4:	4603      	mov	r3, r0
  4052b6:	2b00      	cmp	r3, #0
  4052b8:	d002      	beq.n	4052c0 <inv_i2c_master_read_register+0x44>
		return -1;
  4052ba:	f04f 33ff 	mov.w	r3, #4294967295
  4052be:	e000      	b.n	4052c2 <inv_i2c_master_read_register+0x46>
	else
		return 0;
  4052c0:	2300      	movs	r3, #0
}
  4052c2:	4618      	mov	r0, r3
  4052c4:	3720      	adds	r7, #32
  4052c6:	46bd      	mov	sp, r7
  4052c8:	bd80      	pop	{r7, pc}
  4052ca:	bf00      	nop
  4052cc:	200001f8 	.word	0x200001f8
  4052d0:	00409235 	.word	0x00409235

004052d4 <RTC_Handler>:

/**
 * \brief Interrupt handler for the RTC.
 */
void RTC_Handler(void)
{
  4052d4:	b580      	push	{r7, lr}
  4052d6:	b082      	sub	sp, #8
  4052d8:	af00      	add	r7, sp, #0
	uint32_t ul_status = rtc_get_status(RTC);
  4052da:	4810      	ldr	r0, [pc, #64]	; (40531c <RTC_Handler+0x48>)
  4052dc:	4b10      	ldr	r3, [pc, #64]	; (405320 <RTC_Handler+0x4c>)
  4052de:	4798      	blx	r3
  4052e0:	6078      	str	r0, [r7, #4]

	/* Time event interrupt */
	if ((ul_status & RTC_SR_TIMEV) == RTC_SR_TIMEV) {
  4052e2:	687b      	ldr	r3, [r7, #4]
  4052e4:	f003 0308 	and.w	r3, r3, #8
  4052e8:	2b00      	cmp	r3, #0
  4052ea:	d012      	beq.n	405312 <RTC_Handler+0x3e>
		/* Disable RTC interrupt */
		rtc_disable_interrupt(RTC, RTC_IDR_TIMDIS);
  4052ec:	2108      	movs	r1, #8
  4052ee:	480b      	ldr	r0, [pc, #44]	; (40531c <RTC_Handler+0x48>)
  4052f0:	4b0c      	ldr	r3, [pc, #48]	; (405324 <RTC_Handler+0x50>)
  4052f2:	4798      	blx	r3

		rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  4052f4:	2108      	movs	r1, #8
  4052f6:	4809      	ldr	r0, [pc, #36]	; (40531c <RTC_Handler+0x48>)
  4052f8:	4b0b      	ldr	r3, [pc, #44]	; (405328 <RTC_Handler+0x54>)
  4052fa:	4798      	blx	r3

		rtc_enable_interrupt(RTC, RTC_IER_TIMEN);
  4052fc:	2108      	movs	r1, #8
  4052fe:	4807      	ldr	r0, [pc, #28]	; (40531c <RTC_Handler+0x48>)
  405300:	4b0a      	ldr	r3, [pc, #40]	; (40532c <RTC_Handler+0x58>)
  405302:	4798      	blx	r3
	
		if (sRtc_irq_handler_cb != NULL)
  405304:	4b0a      	ldr	r3, [pc, #40]	; (405330 <RTC_Handler+0x5c>)
  405306:	681b      	ldr	r3, [r3, #0]
  405308:	2b00      	cmp	r3, #0
  40530a:	d002      	beq.n	405312 <RTC_Handler+0x3e>
			sRtc_irq_handler_cb();
  40530c:	4b08      	ldr	r3, [pc, #32]	; (405330 <RTC_Handler+0x5c>)
  40530e:	681b      	ldr	r3, [r3, #0]
  405310:	4798      	blx	r3
	}
}
  405312:	bf00      	nop
  405314:	3708      	adds	r7, #8
  405316:	46bd      	mov	sp, r7
  405318:	bd80      	pop	{r7, pc}
  40531a:	bf00      	nop
  40531c:	400e1460 	.word	0x400e1460
  405320:	00408c19 	.word	0x00408c19
  405324:	00408bfd 	.word	0x00408bfd
  405328:	00408c31 	.word	0x00408c31
  40532c:	00408be1 	.word	0x00408be1
  405330:	20003a8c 	.word	0x20003a8c

00405334 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  405334:	b480      	push	{r7}
  405336:	b083      	sub	sp, #12
  405338:	af00      	add	r7, sp, #0
  40533a:	4603      	mov	r3, r0
  40533c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40533e:	4909      	ldr	r1, [pc, #36]	; (405364 <NVIC_ClearPendingIRQ+0x30>)
  405340:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405344:	095b      	lsrs	r3, r3, #5
  405346:	79fa      	ldrb	r2, [r7, #7]
  405348:	f002 021f 	and.w	r2, r2, #31
  40534c:	2001      	movs	r0, #1
  40534e:	fa00 f202 	lsl.w	r2, r0, r2
  405352:	3360      	adds	r3, #96	; 0x60
  405354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405358:	bf00      	nop
  40535a:	370c      	adds	r7, #12
  40535c:	46bd      	mov	sp, r7
  40535e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405362:	4770      	bx	lr
  405364:	e000e100 	.word	0xe000e100

00405368 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  405368:	b480      	push	{r7}
  40536a:	b083      	sub	sp, #12
  40536c:	af00      	add	r7, sp, #0
  40536e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  405370:	687b      	ldr	r3, [r7, #4]
  405372:	2280      	movs	r2, #128	; 0x80
  405374:	601a      	str	r2, [r3, #0]
}
  405376:	bf00      	nop
  405378:	370c      	adds	r7, #12
  40537a:	46bd      	mov	sp, r7
  40537c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405380:	4770      	bx	lr

00405382 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
  405382:	b480      	push	{r7}
  405384:	b083      	sub	sp, #12
  405386:	af00      	add	r7, sp, #0
  405388:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40538a:	687b      	ldr	r3, [r7, #4]
  40538c:	2201      	movs	r2, #1
  40538e:	601a      	str	r2, [r3, #0]
}
  405390:	bf00      	nop
  405392:	370c      	adds	r7, #12
  405394:	46bd      	mov	sp, r7
  405396:	f85d 7b04 	ldr.w	r7, [sp], #4
  40539a:	4770      	bx	lr

0040539c <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
  40539c:	b480      	push	{r7}
  40539e:	b083      	sub	sp, #12
  4053a0:	af00      	add	r7, sp, #0
  4053a2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4053a4:	687b      	ldr	r3, [r7, #4]
  4053a6:	2202      	movs	r2, #2
  4053a8:	601a      	str	r2, [r3, #0]
}
  4053aa:	bf00      	nop
  4053ac:	370c      	adds	r7, #12
  4053ae:	46bd      	mov	sp, r7
  4053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053b4:	4770      	bx	lr

004053b6 <spi_set_lastxfer>:
 *  The next transfer is the last transfer and after that CS is de-asserted.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
  4053b6:	b480      	push	{r7}
  4053b8:	b083      	sub	sp, #12
  4053ba:	af00      	add	r7, sp, #0
  4053bc:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4053be:	687b      	ldr	r3, [r7, #4]
  4053c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4053c4:	601a      	str	r2, [r3, #0]
}
  4053c6:	bf00      	nop
  4053c8:	370c      	adds	r7, #12
  4053ca:	46bd      	mov	sp, r7
  4053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053d0:	4770      	bx	lr

004053d2 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  4053d2:	b480      	push	{r7}
  4053d4:	b083      	sub	sp, #12
  4053d6:	af00      	add	r7, sp, #0
  4053d8:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4053da:	687b      	ldr	r3, [r7, #4]
  4053dc:	685b      	ldr	r3, [r3, #4]
  4053de:	f043 0201 	orr.w	r2, r3, #1
  4053e2:	687b      	ldr	r3, [r7, #4]
  4053e4:	605a      	str	r2, [r3, #4]
}
  4053e6:	bf00      	nop
  4053e8:	370c      	adds	r7, #12
  4053ea:	46bd      	mov	sp, r7
  4053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053f0:	4770      	bx	lr

004053f2 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  4053f2:	b480      	push	{r7}
  4053f4:	b083      	sub	sp, #12
  4053f6:	af00      	add	r7, sp, #0
  4053f8:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4053fa:	687b      	ldr	r3, [r7, #4]
  4053fc:	685b      	ldr	r3, [r3, #4]
  4053fe:	f043 0210 	orr.w	r2, r3, #16
  405402:	687b      	ldr	r3, [r7, #4]
  405404:	605a      	str	r2, [r3, #4]
}
  405406:	bf00      	nop
  405408:	370c      	adds	r7, #12
  40540a:	46bd      	mov	sp, r7
  40540c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405410:	4770      	bx	lr

00405412 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
  405412:	b480      	push	{r7}
  405414:	b083      	sub	sp, #12
  405416:	af00      	add	r7, sp, #0
  405418:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
  40541a:	687b      	ldr	r3, [r7, #4]
  40541c:	691b      	ldr	r3, [r3, #16]
}
  40541e:	4618      	mov	r0, r3
  405420:	370c      	adds	r7, #12
  405422:	46bd      	mov	sp, r7
  405424:	f85d 7b04 	ldr.w	r7, [sp], #4
  405428:	4770      	bx	lr

0040542a <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  40542a:	b480      	push	{r7}
  40542c:	b083      	sub	sp, #12
  40542e:	af00      	add	r7, sp, #0
  405430:	6078      	str	r0, [r7, #4]
  405432:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
  405434:	687b      	ldr	r3, [r7, #4]
  405436:	683a      	ldr	r2, [r7, #0]
  405438:	615a      	str	r2, [r3, #20]
}
  40543a:	bf00      	nop
  40543c:	370c      	adds	r7, #12
  40543e:	46bd      	mov	sp, r7
  405440:	f85d 7b04 	ldr.w	r7, [sp], #4
  405444:	4770      	bx	lr

00405446 <spi_disable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be disabled.
 */
static inline void spi_disable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  405446:	b480      	push	{r7}
  405448:	b083      	sub	sp, #12
  40544a:	af00      	add	r7, sp, #0
  40544c:	6078      	str	r0, [r7, #4]
  40544e:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IDR = ul_sources;
  405450:	687b      	ldr	r3, [r7, #4]
  405452:	683a      	ldr	r2, [r7, #0]
  405454:	619a      	str	r2, [r3, #24]
}
  405456:	bf00      	nop
  405458:	370c      	adds	r7, #12
  40545a:	46bd      	mov	sp, r7
  40545c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405460:	4770      	bx	lr

00405462 <spi_get_pdc_base>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return PDC registers base for PDC driver to access.
 */
static inline Pdc *spi_get_pdc_base(Spi *p_spi)
{
  405462:	b480      	push	{r7}
  405464:	b083      	sub	sp, #12
  405466:	af00      	add	r7, sp, #0
  405468:	6078      	str	r0, [r7, #4]
	return (Pdc *)&(p_spi->SPI_RPR);
  40546a:	687b      	ldr	r3, [r7, #4]
  40546c:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
  405470:	4618      	mov	r0, r3
  405472:	370c      	adds	r7, #12
  405474:	46bd      	mov	sp, r7
  405476:	f85d 7b04 	ldr.w	r7, [sp], #4
  40547a:	4770      	bx	lr

0040547c <osc_get_rate>:
{
  40547c:	b480      	push	{r7}
  40547e:	b083      	sub	sp, #12
  405480:	af00      	add	r7, sp, #0
  405482:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405484:	687b      	ldr	r3, [r7, #4]
  405486:	2b07      	cmp	r3, #7
  405488:	d825      	bhi.n	4054d6 <osc_get_rate+0x5a>
  40548a:	a201      	add	r2, pc, #4	; (adr r2, 405490 <osc_get_rate+0x14>)
  40548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405490:	004054b1 	.word	0x004054b1
  405494:	004054b7 	.word	0x004054b7
  405498:	004054bd 	.word	0x004054bd
  40549c:	004054c3 	.word	0x004054c3
  4054a0:	004054c7 	.word	0x004054c7
  4054a4:	004054cb 	.word	0x004054cb
  4054a8:	004054cf 	.word	0x004054cf
  4054ac:	004054d3 	.word	0x004054d3
		return OSC_SLCK_32K_RC_HZ;
  4054b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4054b4:	e010      	b.n	4054d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4054b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4054ba:	e00d      	b.n	4054d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4054bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4054c0:	e00a      	b.n	4054d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4054c2:	4b08      	ldr	r3, [pc, #32]	; (4054e4 <osc_get_rate+0x68>)
  4054c4:	e008      	b.n	4054d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  4054c6:	4b08      	ldr	r3, [pc, #32]	; (4054e8 <osc_get_rate+0x6c>)
  4054c8:	e006      	b.n	4054d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  4054ca:	4b08      	ldr	r3, [pc, #32]	; (4054ec <osc_get_rate+0x70>)
  4054cc:	e004      	b.n	4054d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4054ce:	2300      	movs	r3, #0
  4054d0:	e002      	b.n	4054d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4054d2:	2300      	movs	r3, #0
  4054d4:	e000      	b.n	4054d8 <osc_get_rate+0x5c>
	return 0;
  4054d6:	2300      	movs	r3, #0
}
  4054d8:	4618      	mov	r0, r3
  4054da:	370c      	adds	r7, #12
  4054dc:	46bd      	mov	sp, r7
  4054de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054e2:	4770      	bx	lr
  4054e4:	007a1200 	.word	0x007a1200
  4054e8:	00f42400 	.word	0x00f42400
  4054ec:	016e3600 	.word	0x016e3600

004054f0 <sysclk_get_main_hz>:
{
  4054f0:	b580      	push	{r7, lr}
  4054f2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4054f4:	2001      	movs	r0, #1
  4054f6:	4b04      	ldr	r3, [pc, #16]	; (405508 <sysclk_get_main_hz+0x18>)
  4054f8:	4798      	blx	r3
  4054fa:	4602      	mov	r2, r0
  4054fc:	f640 634e 	movw	r3, #3662	; 0xe4e
  405500:	fb03 f302 	mul.w	r3, r3, r2
}
  405504:	4618      	mov	r0, r3
  405506:	bd80      	pop	{r7, pc}
  405508:	0040547d 	.word	0x0040547d

0040550c <sysclk_get_peripheral_hz>:
{
  40550c:	b580      	push	{r7, lr}
  40550e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  405510:	4b02      	ldr	r3, [pc, #8]	; (40551c <sysclk_get_peripheral_hz+0x10>)
  405512:	4798      	blx	r3
  405514:	4603      	mov	r3, r0
}
  405516:	4618      	mov	r0, r3
  405518:	bd80      	pop	{r7, pc}
  40551a:	bf00      	nop
  40551c:	004054f1 	.word	0x004054f1

00405520 <ioport_disable_pin>:
{
  405520:	b480      	push	{r7}
  405522:	b089      	sub	sp, #36	; 0x24
  405524:	af00      	add	r7, sp, #0
  405526:	6078      	str	r0, [r7, #4]
  405528:	687b      	ldr	r3, [r7, #4]
  40552a:	61fb      	str	r3, [r7, #28]
  40552c:	69fb      	ldr	r3, [r7, #28]
  40552e:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  405530:	69bb      	ldr	r3, [r7, #24]
  405532:	095a      	lsrs	r2, r3, #5
  405534:	69fb      	ldr	r3, [r7, #28]
  405536:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  405538:	697b      	ldr	r3, [r7, #20]
  40553a:	f003 031f 	and.w	r3, r3, #31
  40553e:	2101      	movs	r1, #1
  405540:	fa01 f303 	lsl.w	r3, r1, r3
  405544:	613a      	str	r2, [r7, #16]
  405546:	60fb      	str	r3, [r7, #12]
  405548:	693b      	ldr	r3, [r7, #16]
  40554a:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40554c:	68bb      	ldr	r3, [r7, #8]
  40554e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  405552:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405556:	025b      	lsls	r3, r3, #9
  405558:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40555a:	68fb      	ldr	r3, [r7, #12]
  40555c:	6053      	str	r3, [r2, #4]
}
  40555e:	bf00      	nop
  405560:	3724      	adds	r7, #36	; 0x24
  405562:	46bd      	mov	sp, r7
  405564:	f85d 7b04 	ldr.w	r7, [sp], #4
  405568:	4770      	bx	lr

0040556a <ioport_set_pin_mode>:
{
  40556a:	b480      	push	{r7}
  40556c:	b08d      	sub	sp, #52	; 0x34
  40556e:	af00      	add	r7, sp, #0
  405570:	6078      	str	r0, [r7, #4]
  405572:	6039      	str	r1, [r7, #0]
  405574:	687b      	ldr	r3, [r7, #4]
  405576:	62fb      	str	r3, [r7, #44]	; 0x2c
  405578:	683b      	ldr	r3, [r7, #0]
  40557a:	62bb      	str	r3, [r7, #40]	; 0x28
  40557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40557e:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  405580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405582:	095a      	lsrs	r2, r3, #5
  405584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405586:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  405588:	6a3b      	ldr	r3, [r7, #32]
  40558a:	f003 031f 	and.w	r3, r3, #31
  40558e:	2101      	movs	r1, #1
  405590:	fa01 f303 	lsl.w	r3, r1, r3
  405594:	61fa      	str	r2, [r7, #28]
  405596:	61bb      	str	r3, [r7, #24]
  405598:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40559a:	617b      	str	r3, [r7, #20]
  40559c:	69fb      	ldr	r3, [r7, #28]
  40559e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4055a0:	693b      	ldr	r3, [r7, #16]
  4055a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4055a6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4055aa:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  4055ac:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  4055ae:	697b      	ldr	r3, [r7, #20]
  4055b0:	f003 0308 	and.w	r3, r3, #8
  4055b4:	2b00      	cmp	r3, #0
  4055b6:	d003      	beq.n	4055c0 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4055b8:	68fb      	ldr	r3, [r7, #12]
  4055ba:	69ba      	ldr	r2, [r7, #24]
  4055bc:	665a      	str	r2, [r3, #100]	; 0x64
  4055be:	e002      	b.n	4055c6 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  4055c0:	68fb      	ldr	r3, [r7, #12]
  4055c2:	69ba      	ldr	r2, [r7, #24]
  4055c4:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4055c6:	697b      	ldr	r3, [r7, #20]
  4055c8:	f003 0310 	and.w	r3, r3, #16
  4055cc:	2b00      	cmp	r3, #0
  4055ce:	d004      	beq.n	4055da <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4055d0:	68fb      	ldr	r3, [r7, #12]
  4055d2:	69ba      	ldr	r2, [r7, #24]
  4055d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4055d8:	e003      	b.n	4055e2 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  4055da:	68fb      	ldr	r3, [r7, #12]
  4055dc:	69ba      	ldr	r2, [r7, #24]
  4055de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4055e2:	697b      	ldr	r3, [r7, #20]
  4055e4:	f003 0320 	and.w	r3, r3, #32
  4055e8:	2b00      	cmp	r3, #0
  4055ea:	d003      	beq.n	4055f4 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4055ec:	68fb      	ldr	r3, [r7, #12]
  4055ee:	69ba      	ldr	r2, [r7, #24]
  4055f0:	651a      	str	r2, [r3, #80]	; 0x50
  4055f2:	e002      	b.n	4055fa <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  4055f4:	68fb      	ldr	r3, [r7, #12]
  4055f6:	69ba      	ldr	r2, [r7, #24]
  4055f8:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4055fa:	697b      	ldr	r3, [r7, #20]
  4055fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  405600:	2b00      	cmp	r3, #0
  405602:	d003      	beq.n	40560c <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  405604:	68fb      	ldr	r3, [r7, #12]
  405606:	69ba      	ldr	r2, [r7, #24]
  405608:	621a      	str	r2, [r3, #32]
  40560a:	e002      	b.n	405612 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  40560c:	68fb      	ldr	r3, [r7, #12]
  40560e:	69ba      	ldr	r2, [r7, #24]
  405610:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  405612:	697b      	ldr	r3, [r7, #20]
  405614:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405618:	2b00      	cmp	r3, #0
  40561a:	d004      	beq.n	405626 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  40561c:	68fb      	ldr	r3, [r7, #12]
  40561e:	69ba      	ldr	r2, [r7, #24]
  405620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  405624:	e003      	b.n	40562e <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  405626:	68fb      	ldr	r3, [r7, #12]
  405628:	69ba      	ldr	r2, [r7, #24]
  40562a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40562e:	697b      	ldr	r3, [r7, #20]
  405630:	f003 0301 	and.w	r3, r3, #1
  405634:	2b00      	cmp	r3, #0
  405636:	d006      	beq.n	405646 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  405638:	68fb      	ldr	r3, [r7, #12]
  40563a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40563c:	69bb      	ldr	r3, [r7, #24]
  40563e:	431a      	orrs	r2, r3
  405640:	68fb      	ldr	r3, [r7, #12]
  405642:	671a      	str	r2, [r3, #112]	; 0x70
  405644:	e006      	b.n	405654 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  405646:	68fb      	ldr	r3, [r7, #12]
  405648:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40564a:	69bb      	ldr	r3, [r7, #24]
  40564c:	43db      	mvns	r3, r3
  40564e:	401a      	ands	r2, r3
  405650:	68fb      	ldr	r3, [r7, #12]
  405652:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  405654:	697b      	ldr	r3, [r7, #20]
  405656:	f003 0302 	and.w	r3, r3, #2
  40565a:	2b00      	cmp	r3, #0
  40565c:	d006      	beq.n	40566c <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  40565e:	68fb      	ldr	r3, [r7, #12]
  405660:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405662:	69bb      	ldr	r3, [r7, #24]
  405664:	431a      	orrs	r2, r3
  405666:	68fb      	ldr	r3, [r7, #12]
  405668:	675a      	str	r2, [r3, #116]	; 0x74
}
  40566a:	e006      	b.n	40567a <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  40566c:	68fb      	ldr	r3, [r7, #12]
  40566e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405670:	69bb      	ldr	r3, [r7, #24]
  405672:	43db      	mvns	r3, r3
  405674:	401a      	ands	r2, r3
  405676:	68fb      	ldr	r3, [r7, #12]
  405678:	675a      	str	r2, [r3, #116]	; 0x74
  40567a:	bf00      	nop
  40567c:	3734      	adds	r7, #52	; 0x34
  40567e:	46bd      	mov	sp, r7
  405680:	f85d 7b04 	ldr.w	r7, [sp], #4
  405684:	4770      	bx	lr
	...

00405688 <spi_master_irq_handler>:

/**
 * \brief Interrupt handler for the SPI master.
 */
static void spi_master_irq_handler(unsigned spi_num)
{
  405688:	b590      	push	{r4, r7, lr}
  40568a:	b083      	sub	sp, #12
  40568c:	af00      	add	r7, sp, #0
  40568e:	6078      	str	r0, [r7, #4]
	/* Disable the RX and TX PDC transfer requests */
	pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS |
  405690:	4a3a      	ldr	r2, [pc, #232]	; (40577c <spi_master_irq_handler+0xf4>)
  405692:	687b      	ldr	r3, [r7, #4]
  405694:	f241 018c 	movw	r1, #4236	; 0x108c
  405698:	fb01 f303 	mul.w	r3, r1, r3
  40569c:	4413      	add	r3, r2
  40569e:	3304      	adds	r3, #4
  4056a0:	681b      	ldr	r3, [r3, #0]
  4056a2:	f240 2102 	movw	r1, #514	; 0x202
  4056a6:	4618      	mov	r0, r3
  4056a8:	4b35      	ldr	r3, [pc, #212]	; (405780 <spi_master_irq_handler+0xf8>)
  4056aa:	4798      	blx	r3
			PERIPH_PTCR_TXTDIS);
			
	NVIC_ClearPendingIRQ(sm[spi_num].irqn);
  4056ac:	4a33      	ldr	r2, [pc, #204]	; (40577c <spi_master_irq_handler+0xf4>)
  4056ae:	687b      	ldr	r3, [r7, #4]
  4056b0:	f241 018c 	movw	r1, #4236	; 0x108c
  4056b4:	fb01 f303 	mul.w	r3, r1, r3
  4056b8:	4413      	add	r3, r2
  4056ba:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
  4056be:	331c      	adds	r3, #28
  4056c0:	f993 3000 	ldrsb.w	r3, [r3]
  4056c4:	4618      	mov	r0, r3
  4056c6:	4b2f      	ldr	r3, [pc, #188]	; (405784 <spi_master_irq_handler+0xfc>)
  4056c8:	4798      	blx	r3

	if(sm[spi_num].p_spi->SPI_SR & SPI_SR_RXBUFF) {
  4056ca:	4a2c      	ldr	r2, [pc, #176]	; (40577c <spi_master_irq_handler+0xf4>)
  4056cc:	687b      	ldr	r3, [r7, #4]
  4056ce:	f241 018c 	movw	r1, #4236	; 0x108c
  4056d2:	fb01 f303 	mul.w	r3, r1, r3
  4056d6:	4413      	add	r3, r2
  4056d8:	681b      	ldr	r3, [r3, #0]
  4056da:	691b      	ldr	r3, [r3, #16]
  4056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4056e0:	2b00      	cmp	r3, #0
  4056e2:	d047      	beq.n	405774 <spi_master_irq_handler+0xec>
		memcpy(sm[spi_num].rx_dest_addr, &sm[spi_num].rx_buffer[1], sm[spi_num].rx_len);
  4056e4:	4a25      	ldr	r2, [pc, #148]	; (40577c <spi_master_irq_handler+0xf4>)
  4056e6:	687b      	ldr	r3, [r7, #4]
  4056e8:	f241 018c 	movw	r1, #4236	; 0x108c
  4056ec:	fb01 f303 	mul.w	r3, r1, r3
  4056f0:	4413      	add	r3, r2
  4056f2:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  4056f6:	3304      	adds	r3, #4
  4056f8:	6818      	ldr	r0, [r3, #0]
  4056fa:	687b      	ldr	r3, [r7, #4]
  4056fc:	f241 028c 	movw	r2, #4236	; 0x108c
  405700:	fb02 f303 	mul.w	r3, r2, r3
  405704:	f603 0359 	addw	r3, r3, #2137	; 0x859
  405708:	4a1c      	ldr	r2, [pc, #112]	; (40577c <spi_master_irq_handler+0xf4>)
  40570a:	4413      	add	r3, r2
  40570c:	1d1c      	adds	r4, r3, #4
  40570e:	4a1b      	ldr	r2, [pc, #108]	; (40577c <spi_master_irq_handler+0xf4>)
  405710:	687b      	ldr	r3, [r7, #4]
  405712:	f241 018c 	movw	r1, #4236	; 0x108c
  405716:	fb01 f303 	mul.w	r3, r1, r3
  40571a:	4413      	add	r3, r2
  40571c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405720:	3308      	adds	r3, #8
  405722:	881b      	ldrh	r3, [r3, #0]
  405724:	461a      	mov	r2, r3
  405726:	4621      	mov	r1, r4
  405728:	4b17      	ldr	r3, [pc, #92]	; (405788 <spi_master_irq_handler+0x100>)
  40572a:	4798      	blx	r3

		/* Disable SPI IRQ */
		spi_disable_interrupt(sm[spi_num].p_spi, SPI_IDR_RXBUFF);
  40572c:	4a13      	ldr	r2, [pc, #76]	; (40577c <spi_master_irq_handler+0xf4>)
  40572e:	687b      	ldr	r3, [r7, #4]
  405730:	f241 018c 	movw	r1, #4236	; 0x108c
  405734:	fb01 f303 	mul.w	r3, r1, r3
  405738:	4413      	add	r3, r2
  40573a:	681b      	ldr	r3, [r3, #0]
  40573c:	2140      	movs	r1, #64	; 0x40
  40573e:	4618      	mov	r0, r3
  405740:	4b12      	ldr	r3, [pc, #72]	; (40578c <spi_master_irq_handler+0x104>)
  405742:	4798      	blx	r3

		if(sm[spi_num].transfer_done_cb)
  405744:	4a0d      	ldr	r2, [pc, #52]	; (40577c <spi_master_irq_handler+0xf4>)
  405746:	687b      	ldr	r3, [r7, #4]
  405748:	f241 018c 	movw	r1, #4236	; 0x108c
  40574c:	fb01 f303 	mul.w	r3, r1, r3
  405750:	4413      	add	r3, r2
  405752:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405756:	681b      	ldr	r3, [r3, #0]
  405758:	2b00      	cmp	r3, #0
  40575a:	d00b      	beq.n	405774 <spi_master_irq_handler+0xec>
			sm[spi_num].transfer_done_cb(0);
  40575c:	4a07      	ldr	r2, [pc, #28]	; (40577c <spi_master_irq_handler+0xf4>)
  40575e:	687b      	ldr	r3, [r7, #4]
  405760:	f241 018c 	movw	r1, #4236	; 0x108c
  405764:	fb01 f303 	mul.w	r3, r1, r3
  405768:	4413      	add	r3, r2
  40576a:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  40576e:	681b      	ldr	r3, [r3, #0]
  405770:	2000      	movs	r0, #0
  405772:	4798      	blx	r3
	}
}
  405774:	bf00      	nop
  405776:	370c      	adds	r7, #12
  405778:	46bd      	mov	sp, r7
  40577a:	bd90      	pop	{r4, r7, pc}
  40577c:	20000218 	.word	0x20000218
  405780:	004081b9 	.word	0x004081b9
  405784:	00405335 	.word	0x00405335
  405788:	0040f861 	.word	0x0040f861
  40578c:	00405447 	.word	0x00405447

00405790 <inv_spi_master_init>:


/********************************* Public Prototypes **************************/

void inv_spi_master_init(unsigned spi_num, uint32_t speed_hz)
{
  405790:	b5b0      	push	{r4, r5, r7, lr}
  405792:	b082      	sub	sp, #8
  405794:	af00      	add	r7, sp, #0
  405796:	6078      	str	r0, [r7, #4]
  405798:	6039      	str	r1, [r7, #0]
	ioport_set_pin_mode(sm[spi_num].clk_pin,  sm[spi_num].clk_pin_mode);
  40579a:	4ab5      	ldr	r2, [pc, #724]	; (405a70 <inv_spi_master_init+0x2e0>)
  40579c:	687b      	ldr	r3, [r7, #4]
  40579e:	f241 018c 	movw	r1, #4236	; 0x108c
  4057a2:	fb01 f303 	mul.w	r3, r1, r3
  4057a6:	4413      	add	r3, r2
  4057a8:	331c      	adds	r3, #28
  4057aa:	6818      	ldr	r0, [r3, #0]
  4057ac:	4ab0      	ldr	r2, [pc, #704]	; (405a70 <inv_spi_master_init+0x2e0>)
  4057ae:	687b      	ldr	r3, [r7, #4]
  4057b0:	f241 018c 	movw	r1, #4236	; 0x108c
  4057b4:	fb01 f303 	mul.w	r3, r1, r3
  4057b8:	4413      	add	r3, r2
  4057ba:	3320      	adds	r3, #32
  4057bc:	681b      	ldr	r3, [r3, #0]
  4057be:	4619      	mov	r1, r3
  4057c0:	4bac      	ldr	r3, [pc, #688]	; (405a74 <inv_spi_master_init+0x2e4>)
  4057c2:	4798      	blx	r3
	ioport_set_pin_mode(sm[spi_num].mosi_pin, sm[spi_num].mosi_pin_mode);
  4057c4:	4aaa      	ldr	r2, [pc, #680]	; (405a70 <inv_spi_master_init+0x2e0>)
  4057c6:	687b      	ldr	r3, [r7, #4]
  4057c8:	f241 018c 	movw	r1, #4236	; 0x108c
  4057cc:	fb01 f303 	mul.w	r3, r1, r3
  4057d0:	4413      	add	r3, r2
  4057d2:	3324      	adds	r3, #36	; 0x24
  4057d4:	6818      	ldr	r0, [r3, #0]
  4057d6:	4aa6      	ldr	r2, [pc, #664]	; (405a70 <inv_spi_master_init+0x2e0>)
  4057d8:	687b      	ldr	r3, [r7, #4]
  4057da:	f241 018c 	movw	r1, #4236	; 0x108c
  4057de:	fb01 f303 	mul.w	r3, r1, r3
  4057e2:	4413      	add	r3, r2
  4057e4:	3328      	adds	r3, #40	; 0x28
  4057e6:	681b      	ldr	r3, [r3, #0]
  4057e8:	4619      	mov	r1, r3
  4057ea:	4ba2      	ldr	r3, [pc, #648]	; (405a74 <inv_spi_master_init+0x2e4>)
  4057ec:	4798      	blx	r3
	ioport_set_pin_mode(sm[spi_num].miso_pin, sm[spi_num].miso_pin_mode);
  4057ee:	4aa0      	ldr	r2, [pc, #640]	; (405a70 <inv_spi_master_init+0x2e0>)
  4057f0:	687b      	ldr	r3, [r7, #4]
  4057f2:	f241 018c 	movw	r1, #4236	; 0x108c
  4057f6:	fb01 f303 	mul.w	r3, r1, r3
  4057fa:	4413      	add	r3, r2
  4057fc:	332c      	adds	r3, #44	; 0x2c
  4057fe:	6818      	ldr	r0, [r3, #0]
  405800:	4a9b      	ldr	r2, [pc, #620]	; (405a70 <inv_spi_master_init+0x2e0>)
  405802:	687b      	ldr	r3, [r7, #4]
  405804:	f241 018c 	movw	r1, #4236	; 0x108c
  405808:	fb01 f303 	mul.w	r3, r1, r3
  40580c:	4413      	add	r3, r2
  40580e:	3330      	adds	r3, #48	; 0x30
  405810:	681b      	ldr	r3, [r3, #0]
  405812:	4619      	mov	r1, r3
  405814:	4b97      	ldr	r3, [pc, #604]	; (405a74 <inv_spi_master_init+0x2e4>)
  405816:	4798      	blx	r3
	ioport_set_pin_mode(sm[spi_num].cs_pin,   sm[spi_num].cs_pin_mode);
  405818:	4a95      	ldr	r2, [pc, #596]	; (405a70 <inv_spi_master_init+0x2e0>)
  40581a:	687b      	ldr	r3, [r7, #4]
  40581c:	f241 018c 	movw	r1, #4236	; 0x108c
  405820:	fb01 f303 	mul.w	r3, r1, r3
  405824:	4413      	add	r3, r2
  405826:	3334      	adds	r3, #52	; 0x34
  405828:	6818      	ldr	r0, [r3, #0]
  40582a:	4a91      	ldr	r2, [pc, #580]	; (405a70 <inv_spi_master_init+0x2e0>)
  40582c:	687b      	ldr	r3, [r7, #4]
  40582e:	f241 018c 	movw	r1, #4236	; 0x108c
  405832:	fb01 f303 	mul.w	r3, r1, r3
  405836:	4413      	add	r3, r2
  405838:	3338      	adds	r3, #56	; 0x38
  40583a:	681b      	ldr	r3, [r3, #0]
  40583c:	4619      	mov	r1, r3
  40583e:	4b8d      	ldr	r3, [pc, #564]	; (405a74 <inv_spi_master_init+0x2e4>)
  405840:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].clk_pin);
  405842:	4a8b      	ldr	r2, [pc, #556]	; (405a70 <inv_spi_master_init+0x2e0>)
  405844:	687b      	ldr	r3, [r7, #4]
  405846:	f241 018c 	movw	r1, #4236	; 0x108c
  40584a:	fb01 f303 	mul.w	r3, r1, r3
  40584e:	4413      	add	r3, r2
  405850:	331c      	adds	r3, #28
  405852:	681b      	ldr	r3, [r3, #0]
  405854:	4618      	mov	r0, r3
  405856:	4b88      	ldr	r3, [pc, #544]	; (405a78 <inv_spi_master_init+0x2e8>)
  405858:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].mosi_pin);
  40585a:	4a85      	ldr	r2, [pc, #532]	; (405a70 <inv_spi_master_init+0x2e0>)
  40585c:	687b      	ldr	r3, [r7, #4]
  40585e:	f241 018c 	movw	r1, #4236	; 0x108c
  405862:	fb01 f303 	mul.w	r3, r1, r3
  405866:	4413      	add	r3, r2
  405868:	3324      	adds	r3, #36	; 0x24
  40586a:	681b      	ldr	r3, [r3, #0]
  40586c:	4618      	mov	r0, r3
  40586e:	4b82      	ldr	r3, [pc, #520]	; (405a78 <inv_spi_master_init+0x2e8>)
  405870:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].miso_pin);
  405872:	4a7f      	ldr	r2, [pc, #508]	; (405a70 <inv_spi_master_init+0x2e0>)
  405874:	687b      	ldr	r3, [r7, #4]
  405876:	f241 018c 	movw	r1, #4236	; 0x108c
  40587a:	fb01 f303 	mul.w	r3, r1, r3
  40587e:	4413      	add	r3, r2
  405880:	332c      	adds	r3, #44	; 0x2c
  405882:	681b      	ldr	r3, [r3, #0]
  405884:	4618      	mov	r0, r3
  405886:	4b7c      	ldr	r3, [pc, #496]	; (405a78 <inv_spi_master_init+0x2e8>)
  405888:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].cs_pin);
  40588a:	4a79      	ldr	r2, [pc, #484]	; (405a70 <inv_spi_master_init+0x2e0>)
  40588c:	687b      	ldr	r3, [r7, #4]
  40588e:	f241 018c 	movw	r1, #4236	; 0x108c
  405892:	fb01 f303 	mul.w	r3, r1, r3
  405896:	4413      	add	r3, r2
  405898:	3334      	adds	r3, #52	; 0x34
  40589a:	681b      	ldr	r3, [r3, #0]
  40589c:	4618      	mov	r0, r3
  40589e:	4b76      	ldr	r3, [pc, #472]	; (405a78 <inv_spi_master_init+0x2e8>)
  4058a0:	4798      	blx	r3
	
	/* Get pointer to SPI master PDC register base */
	sm[spi_num].p_pdc = spi_get_pdc_base(sm[spi_num].p_spi);
  4058a2:	4a73      	ldr	r2, [pc, #460]	; (405a70 <inv_spi_master_init+0x2e0>)
  4058a4:	687b      	ldr	r3, [r7, #4]
  4058a6:	f241 018c 	movw	r1, #4236	; 0x108c
  4058aa:	fb01 f303 	mul.w	r3, r1, r3
  4058ae:	4413      	add	r3, r2
  4058b0:	681b      	ldr	r3, [r3, #0]
  4058b2:	4618      	mov	r0, r3
  4058b4:	4b71      	ldr	r3, [pc, #452]	; (405a7c <inv_spi_master_init+0x2ec>)
  4058b6:	4798      	blx	r3
  4058b8:	4a6d      	ldr	r2, [pc, #436]	; (405a70 <inv_spi_master_init+0x2e0>)
  4058ba:	687b      	ldr	r3, [r7, #4]
  4058bc:	f241 018c 	movw	r1, #4236	; 0x108c
  4058c0:	fb01 f303 	mul.w	r3, r1, r3
  4058c4:	4413      	add	r3, r2
  4058c6:	3304      	adds	r3, #4
  4058c8:	6018      	str	r0, [r3, #0]

	/* Enable the peripheral and set SPI mode. */
	flexcom_enable(sm[spi_num].p_flexcom);
  4058ca:	4a69      	ldr	r2, [pc, #420]	; (405a70 <inv_spi_master_init+0x2e0>)
  4058cc:	687b      	ldr	r3, [r7, #4]
  4058ce:	f241 018c 	movw	r1, #4236	; 0x108c
  4058d2:	fb01 f303 	mul.w	r3, r1, r3
  4058d6:	4413      	add	r3, r2
  4058d8:	3308      	adds	r3, #8
  4058da:	681b      	ldr	r3, [r3, #0]
  4058dc:	4618      	mov	r0, r3
  4058de:	4b68      	ldr	r3, [pc, #416]	; (405a80 <inv_spi_master_init+0x2f0>)
  4058e0:	4798      	blx	r3
	flexcom_set_opmode(sm[spi_num].p_flexcom, FLEXCOM_SPI);
  4058e2:	4a63      	ldr	r2, [pc, #396]	; (405a70 <inv_spi_master_init+0x2e0>)
  4058e4:	687b      	ldr	r3, [r7, #4]
  4058e6:	f241 018c 	movw	r1, #4236	; 0x108c
  4058ea:	fb01 f303 	mul.w	r3, r1, r3
  4058ee:	4413      	add	r3, r2
  4058f0:	3308      	adds	r3, #8
  4058f2:	681b      	ldr	r3, [r3, #0]
  4058f4:	2102      	movs	r1, #2
  4058f6:	4618      	mov	r0, r3
  4058f8:	4b62      	ldr	r3, [pc, #392]	; (405a84 <inv_spi_master_init+0x2f4>)
  4058fa:	4798      	blx	r3

	spi_disable(sm[spi_num].p_spi);
  4058fc:	4a5c      	ldr	r2, [pc, #368]	; (405a70 <inv_spi_master_init+0x2e0>)
  4058fe:	687b      	ldr	r3, [r7, #4]
  405900:	f241 018c 	movw	r1, #4236	; 0x108c
  405904:	fb01 f303 	mul.w	r3, r1, r3
  405908:	4413      	add	r3, r2
  40590a:	681b      	ldr	r3, [r3, #0]
  40590c:	4618      	mov	r0, r3
  40590e:	4b5e      	ldr	r3, [pc, #376]	; (405a88 <inv_spi_master_init+0x2f8>)
  405910:	4798      	blx	r3
	spi_reset(sm[spi_num].p_spi);
  405912:	4a57      	ldr	r2, [pc, #348]	; (405a70 <inv_spi_master_init+0x2e0>)
  405914:	687b      	ldr	r3, [r7, #4]
  405916:	f241 018c 	movw	r1, #4236	; 0x108c
  40591a:	fb01 f303 	mul.w	r3, r1, r3
  40591e:	4413      	add	r3, r2
  405920:	681b      	ldr	r3, [r3, #0]
  405922:	4618      	mov	r0, r3
  405924:	4b59      	ldr	r3, [pc, #356]	; (405a8c <inv_spi_master_init+0x2fc>)
  405926:	4798      	blx	r3
	spi_set_lastxfer(sm[spi_num].p_spi);
  405928:	4a51      	ldr	r2, [pc, #324]	; (405a70 <inv_spi_master_init+0x2e0>)
  40592a:	687b      	ldr	r3, [r7, #4]
  40592c:	f241 018c 	movw	r1, #4236	; 0x108c
  405930:	fb01 f303 	mul.w	r3, r1, r3
  405934:	4413      	add	r3, r2
  405936:	681b      	ldr	r3, [r3, #0]
  405938:	4618      	mov	r0, r3
  40593a:	4b55      	ldr	r3, [pc, #340]	; (405a90 <inv_spi_master_init+0x300>)
  40593c:	4798      	blx	r3
	spi_set_master_mode(sm[spi_num].p_spi);
  40593e:	4a4c      	ldr	r2, [pc, #304]	; (405a70 <inv_spi_master_init+0x2e0>)
  405940:	687b      	ldr	r3, [r7, #4]
  405942:	f241 018c 	movw	r1, #4236	; 0x108c
  405946:	fb01 f303 	mul.w	r3, r1, r3
  40594a:	4413      	add	r3, r2
  40594c:	681b      	ldr	r3, [r3, #0]
  40594e:	4618      	mov	r0, r3
  405950:	4b50      	ldr	r3, [pc, #320]	; (405a94 <inv_spi_master_init+0x304>)
  405952:	4798      	blx	r3
	spi_disable_mode_fault_detect(sm[spi_num].p_spi);
  405954:	4a46      	ldr	r2, [pc, #280]	; (405a70 <inv_spi_master_init+0x2e0>)
  405956:	687b      	ldr	r3, [r7, #4]
  405958:	f241 018c 	movw	r1, #4236	; 0x108c
  40595c:	fb01 f303 	mul.w	r3, r1, r3
  405960:	4413      	add	r3, r2
  405962:	681b      	ldr	r3, [r3, #0]
  405964:	4618      	mov	r0, r3
  405966:	4b4c      	ldr	r3, [pc, #304]	; (405a98 <inv_spi_master_init+0x308>)
  405968:	4798      	blx	r3
	
	spi_configure_cs_behavior(sm[spi_num].p_spi, sm[spi_num].chip_sel, SPI_CS_RISE_NO_TX);
  40596a:	4a41      	ldr	r2, [pc, #260]	; (405a70 <inv_spi_master_init+0x2e0>)
  40596c:	687b      	ldr	r3, [r7, #4]
  40596e:	f241 018c 	movw	r1, #4236	; 0x108c
  405972:	fb01 f303 	mul.w	r3, r1, r3
  405976:	4413      	add	r3, r2
  405978:	6818      	ldr	r0, [r3, #0]
  40597a:	4a3d      	ldr	r2, [pc, #244]	; (405a70 <inv_spi_master_init+0x2e0>)
  40597c:	687b      	ldr	r3, [r7, #4]
  40597e:	f241 018c 	movw	r1, #4236	; 0x108c
  405982:	fb01 f303 	mul.w	r3, r1, r3
  405986:	4413      	add	r3, r2
  405988:	330c      	adds	r3, #12
  40598a:	681b      	ldr	r3, [r3, #0]
  40598c:	2200      	movs	r2, #0
  40598e:	4619      	mov	r1, r3
  405990:	4b42      	ldr	r3, [pc, #264]	; (405a9c <inv_spi_master_init+0x30c>)
  405992:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(sm[spi_num].p_spi, sm[spi_num].chip_sel);
  405994:	4a36      	ldr	r2, [pc, #216]	; (405a70 <inv_spi_master_init+0x2e0>)
  405996:	687b      	ldr	r3, [r7, #4]
  405998:	f241 018c 	movw	r1, #4236	; 0x108c
  40599c:	fb01 f303 	mul.w	r3, r1, r3
  4059a0:	4413      	add	r3, r2
  4059a2:	6818      	ldr	r0, [r3, #0]
  4059a4:	4a32      	ldr	r2, [pc, #200]	; (405a70 <inv_spi_master_init+0x2e0>)
  4059a6:	687b      	ldr	r3, [r7, #4]
  4059a8:	f241 018c 	movw	r1, #4236	; 0x108c
  4059ac:	fb01 f303 	mul.w	r3, r1, r3
  4059b0:	4413      	add	r3, r2
  4059b2:	330c      	adds	r3, #12
  4059b4:	681b      	ldr	r3, [r3, #0]
  4059b6:	4619      	mov	r1, r3
  4059b8:	4b39      	ldr	r3, [pc, #228]	; (405aa0 <inv_spi_master_init+0x310>)
  4059ba:	4798      	blx	r3
	
	spi_set_clock_polarity(sm[spi_num].p_spi, sm[spi_num].chip_sel, sm[spi_num].clk_pol);
  4059bc:	4a2c      	ldr	r2, [pc, #176]	; (405a70 <inv_spi_master_init+0x2e0>)
  4059be:	687b      	ldr	r3, [r7, #4]
  4059c0:	f241 018c 	movw	r1, #4236	; 0x108c
  4059c4:	fb01 f303 	mul.w	r3, r1, r3
  4059c8:	4413      	add	r3, r2
  4059ca:	6818      	ldr	r0, [r3, #0]
  4059cc:	4a28      	ldr	r2, [pc, #160]	; (405a70 <inv_spi_master_init+0x2e0>)
  4059ce:	687b      	ldr	r3, [r7, #4]
  4059d0:	f241 018c 	movw	r1, #4236	; 0x108c
  4059d4:	fb01 f303 	mul.w	r3, r1, r3
  4059d8:	4413      	add	r3, r2
  4059da:	330c      	adds	r3, #12
  4059dc:	681c      	ldr	r4, [r3, #0]
  4059de:	4a24      	ldr	r2, [pc, #144]	; (405a70 <inv_spi_master_init+0x2e0>)
  4059e0:	687b      	ldr	r3, [r7, #4]
  4059e2:	f241 018c 	movw	r1, #4236	; 0x108c
  4059e6:	fb01 f303 	mul.w	r3, r1, r3
  4059ea:	4413      	add	r3, r2
  4059ec:	3310      	adds	r3, #16
  4059ee:	681b      	ldr	r3, [r3, #0]
  4059f0:	461a      	mov	r2, r3
  4059f2:	4621      	mov	r1, r4
  4059f4:	4b2b      	ldr	r3, [pc, #172]	; (405aa4 <inv_spi_master_init+0x314>)
  4059f6:	4798      	blx	r3
	spi_set_clock_phase(sm[spi_num].p_spi, sm[spi_num].chip_sel, sm[spi_num].clk_ph);
  4059f8:	4a1d      	ldr	r2, [pc, #116]	; (405a70 <inv_spi_master_init+0x2e0>)
  4059fa:	687b      	ldr	r3, [r7, #4]
  4059fc:	f241 018c 	movw	r1, #4236	; 0x108c
  405a00:	fb01 f303 	mul.w	r3, r1, r3
  405a04:	4413      	add	r3, r2
  405a06:	6818      	ldr	r0, [r3, #0]
  405a08:	4a19      	ldr	r2, [pc, #100]	; (405a70 <inv_spi_master_init+0x2e0>)
  405a0a:	687b      	ldr	r3, [r7, #4]
  405a0c:	f241 018c 	movw	r1, #4236	; 0x108c
  405a10:	fb01 f303 	mul.w	r3, r1, r3
  405a14:	4413      	add	r3, r2
  405a16:	330c      	adds	r3, #12
  405a18:	681c      	ldr	r4, [r3, #0]
  405a1a:	4a15      	ldr	r2, [pc, #84]	; (405a70 <inv_spi_master_init+0x2e0>)
  405a1c:	687b      	ldr	r3, [r7, #4]
  405a1e:	f241 018c 	movw	r1, #4236	; 0x108c
  405a22:	fb01 f303 	mul.w	r3, r1, r3
  405a26:	4413      	add	r3, r2
  405a28:	3314      	adds	r3, #20
  405a2a:	681b      	ldr	r3, [r3, #0]
  405a2c:	461a      	mov	r2, r3
  405a2e:	4621      	mov	r1, r4
  405a30:	4b1d      	ldr	r3, [pc, #116]	; (405aa8 <inv_spi_master_init+0x318>)
  405a32:	4798      	blx	r3
	spi_set_bits_per_transfer(sm[spi_num].p_spi, sm[spi_num].chip_sel, SPI_CSR_BITS_8_BIT);
  405a34:	4a0e      	ldr	r2, [pc, #56]	; (405a70 <inv_spi_master_init+0x2e0>)
  405a36:	687b      	ldr	r3, [r7, #4]
  405a38:	f241 018c 	movw	r1, #4236	; 0x108c
  405a3c:	fb01 f303 	mul.w	r3, r1, r3
  405a40:	4413      	add	r3, r2
  405a42:	6818      	ldr	r0, [r3, #0]
  405a44:	4a0a      	ldr	r2, [pc, #40]	; (405a70 <inv_spi_master_init+0x2e0>)
  405a46:	687b      	ldr	r3, [r7, #4]
  405a48:	f241 018c 	movw	r1, #4236	; 0x108c
  405a4c:	fb01 f303 	mul.w	r3, r1, r3
  405a50:	4413      	add	r3, r2
  405a52:	330c      	adds	r3, #12
  405a54:	681b      	ldr	r3, [r3, #0]
  405a56:	2200      	movs	r2, #0
  405a58:	4619      	mov	r1, r3
  405a5a:	4b14      	ldr	r3, [pc, #80]	; (405aac <inv_spi_master_init+0x31c>)
  405a5c:	4798      	blx	r3
	spi_set_baudrate_div(sm[spi_num].p_spi, sm[spi_num].chip_sel, 
  405a5e:	4a04      	ldr	r2, [pc, #16]	; (405a70 <inv_spi_master_init+0x2e0>)
  405a60:	687b      	ldr	r3, [r7, #4]
  405a62:	f241 018c 	movw	r1, #4236	; 0x108c
  405a66:	fb01 f303 	mul.w	r3, r1, r3
  405a6a:	4413      	add	r3, r2
  405a6c:	681c      	ldr	r4, [r3, #0]
  405a6e:	e01f      	b.n	405ab0 <inv_spi_master_init+0x320>
  405a70:	20000218 	.word	0x20000218
  405a74:	0040556b 	.word	0x0040556b
  405a78:	00405521 	.word	0x00405521
  405a7c:	00405463 	.word	0x00405463
  405a80:	00407f69 	.word	0x00407f69
  405a84:	004080d1 	.word	0x004080d1
  405a88:	0040539d 	.word	0x0040539d
  405a8c:	00405369 	.word	0x00405369
  405a90:	004053b7 	.word	0x004053b7
  405a94:	004053d3 	.word	0x004053d3
  405a98:	004053f3 	.word	0x004053f3
  405a9c:	00408d21 	.word	0x00408d21
  405aa0:	00408c4d 	.word	0x00408c4d
  405aa4:	00408c81 	.word	0x00408c81
  405aa8:	00408cd1 	.word	0x00408cd1
  405aac:	00408dc7 	.word	0x00408dc7
  405ab0:	4a31      	ldr	r2, [pc, #196]	; (405b78 <inv_spi_master_init+0x3e8>)
  405ab2:	687b      	ldr	r3, [r7, #4]
  405ab4:	f241 018c 	movw	r1, #4236	; 0x108c
  405ab8:	fb01 f303 	mul.w	r3, r1, r3
  405abc:	4413      	add	r3, r2
  405abe:	330c      	adds	r3, #12
  405ac0:	681d      	ldr	r5, [r3, #0]
			(sysclk_get_peripheral_hz() / speed_hz));
  405ac2:	4b2e      	ldr	r3, [pc, #184]	; (405b7c <inv_spi_master_init+0x3ec>)
  405ac4:	4798      	blx	r3
  405ac6:	4602      	mov	r2, r0
  405ac8:	683b      	ldr	r3, [r7, #0]
  405aca:	fbb2 f3f3 	udiv	r3, r2, r3
	spi_set_baudrate_div(sm[spi_num].p_spi, sm[spi_num].chip_sel, 
  405ace:	b2db      	uxtb	r3, r3
  405ad0:	461a      	mov	r2, r3
  405ad2:	4629      	mov	r1, r5
  405ad4:	4620      	mov	r0, r4
  405ad6:	4b2a      	ldr	r3, [pc, #168]	; (405b80 <inv_spi_master_init+0x3f0>)
  405ad8:	4798      	blx	r3
	spi_set_transfer_delay(sm[spi_num].p_spi, sm[spi_num].chip_sel, sm[spi_num].dlybs, 
  405ada:	4a27      	ldr	r2, [pc, #156]	; (405b78 <inv_spi_master_init+0x3e8>)
  405adc:	687b      	ldr	r3, [r7, #4]
  405ade:	f241 018c 	movw	r1, #4236	; 0x108c
  405ae2:	fb01 f303 	mul.w	r3, r1, r3
  405ae6:	4413      	add	r3, r2
  405ae8:	6818      	ldr	r0, [r3, #0]
  405aea:	4a23      	ldr	r2, [pc, #140]	; (405b78 <inv_spi_master_init+0x3e8>)
  405aec:	687b      	ldr	r3, [r7, #4]
  405aee:	f241 018c 	movw	r1, #4236	; 0x108c
  405af2:	fb01 f303 	mul.w	r3, r1, r3
  405af6:	4413      	add	r3, r2
  405af8:	330c      	adds	r3, #12
  405afa:	681c      	ldr	r4, [r3, #0]
  405afc:	4a1e      	ldr	r2, [pc, #120]	; (405b78 <inv_spi_master_init+0x3e8>)
  405afe:	687b      	ldr	r3, [r7, #4]
  405b00:	f241 018c 	movw	r1, #4236	; 0x108c
  405b04:	fb01 f303 	mul.w	r3, r1, r3
  405b08:	4413      	add	r3, r2
  405b0a:	3318      	adds	r3, #24
  405b0c:	781d      	ldrb	r5, [r3, #0]
  405b0e:	4a1a      	ldr	r2, [pc, #104]	; (405b78 <inv_spi_master_init+0x3e8>)
  405b10:	687b      	ldr	r3, [r7, #4]
  405b12:	f241 018c 	movw	r1, #4236	; 0x108c
  405b16:	fb01 f303 	mul.w	r3, r1, r3
  405b1a:	4413      	add	r3, r2
  405b1c:	3319      	adds	r3, #25
  405b1e:	781b      	ldrb	r3, [r3, #0]
  405b20:	462a      	mov	r2, r5
  405b22:	4621      	mov	r1, r4
  405b24:	4c17      	ldr	r4, [pc, #92]	; (405b84 <inv_spi_master_init+0x3f4>)
  405b26:	47a0      	blx	r4
			sm[spi_num].dlybct);

	spi_enable(sm[spi_num].p_spi);
  405b28:	4a13      	ldr	r2, [pc, #76]	; (405b78 <inv_spi_master_init+0x3e8>)
  405b2a:	687b      	ldr	r3, [r7, #4]
  405b2c:	f241 018c 	movw	r1, #4236	; 0x108c
  405b30:	fb01 f303 	mul.w	r3, r1, r3
  405b34:	4413      	add	r3, r2
  405b36:	681b      	ldr	r3, [r3, #0]
  405b38:	4618      	mov	r0, r3
  405b3a:	4b13      	ldr	r3, [pc, #76]	; (405b88 <inv_spi_master_init+0x3f8>)
  405b3c:	4798      	blx	r3

	pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  405b3e:	4a0e      	ldr	r2, [pc, #56]	; (405b78 <inv_spi_master_init+0x3e8>)
  405b40:	687b      	ldr	r3, [r7, #4]
  405b42:	f241 018c 	movw	r1, #4236	; 0x108c
  405b46:	fb01 f303 	mul.w	r3, r1, r3
  405b4a:	4413      	add	r3, r2
  405b4c:	3304      	adds	r3, #4
  405b4e:	681b      	ldr	r3, [r3, #0]
  405b50:	f240 2102 	movw	r1, #514	; 0x202
  405b54:	4618      	mov	r0, r3
  405b56:	4b0d      	ldr	r3, [pc, #52]	; (405b8c <inv_spi_master_init+0x3fc>)
  405b58:	4798      	blx	r3
	
	sm[spi_num].transfer_done_cb = 0;
  405b5a:	4a07      	ldr	r2, [pc, #28]	; (405b78 <inv_spi_master_init+0x3e8>)
  405b5c:	687b      	ldr	r3, [r7, #4]
  405b5e:	f241 018c 	movw	r1, #4236	; 0x108c
  405b62:	fb01 f303 	mul.w	r3, r1, r3
  405b66:	4413      	add	r3, r2
  405b68:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405b6c:	2200      	movs	r2, #0
  405b6e:	601a      	str	r2, [r3, #0]
}
  405b70:	bf00      	nop
  405b72:	3708      	adds	r7, #8
  405b74:	46bd      	mov	sp, r7
  405b76:	bdb0      	pop	{r4, r5, r7, pc}
  405b78:	20000218 	.word	0x20000218
  405b7c:	0040550d 	.word	0x0040550d
  405b80:	00408e11 	.word	0x00408e11
  405b84:	00408e6f 	.word	0x00408e6f
  405b88:	00405383 	.word	0x00405383
  405b8c:	004081b9 	.word	0x004081b9

00405b90 <inv_spi_master_write_register>:
	NVIC_ClearPendingIRQ(sm[spi_num].irqn);
}

unsigned long inv_spi_master_write_register(unsigned spi_num, unsigned char register_addr,
		unsigned short len, const unsigned char *value)
{
  405b90:	b580      	push	{r7, lr}
  405b92:	b086      	sub	sp, #24
  405b94:	af00      	add	r7, sp, #0
  405b96:	60f8      	str	r0, [r7, #12]
  405b98:	607b      	str	r3, [r7, #4]
  405b9a:	460b      	mov	r3, r1
  405b9c:	72fb      	strb	r3, [r7, #11]
  405b9e:	4613      	mov	r3, r2
  405ba0:	813b      	strh	r3, [r7, #8]
	if(len+1 > SPI_BUFFER_SIZE)
  405ba2:	893b      	ldrh	r3, [r7, #8]
  405ba4:	3301      	adds	r3, #1
  405ba6:	f5b3 6f02 	cmp.w	r3, #2080	; 0x820
  405baa:	dd01      	ble.n	405bb0 <inv_spi_master_write_register+0x20>
		return 1;
  405bac:	2301      	movs	r3, #1
  405bae:	e082      	b.n	405cb6 <inv_spi_master_write_register+0x126>
	
	pdc_packet_t pdc_spi_packet;
	
	/* Desactivate Irq during buffer write*/
	inv_disable_irq();
  405bb0:	4b43      	ldr	r3, [pc, #268]	; (405cc0 <inv_spi_master_write_register+0x130>)
  405bb2:	4798      	blx	r3
	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].rx_buffer[0];
  405bb4:	68fb      	ldr	r3, [r7, #12]
  405bb6:	f241 028c 	movw	r2, #4236	; 0x108c
  405bba:	fb02 f303 	mul.w	r3, r2, r3
  405bbe:	f603 0358 	addw	r3, r3, #2136	; 0x858
  405bc2:	4a40      	ldr	r2, [pc, #256]	; (405cc4 <inv_spi_master_write_register+0x134>)
  405bc4:	4413      	add	r3, r2
  405bc6:	3304      	adds	r3, #4
  405bc8:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  405bca:	893b      	ldrh	r3, [r7, #8]
  405bcc:	3301      	adds	r3, #1
  405bce:	617b      	str	r3, [r7, #20]
	pdc_rx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  405bd0:	4a3c      	ldr	r2, [pc, #240]	; (405cc4 <inv_spi_master_write_register+0x134>)
  405bd2:	68fb      	ldr	r3, [r7, #12]
  405bd4:	f241 018c 	movw	r1, #4236	; 0x108c
  405bd8:	fb01 f303 	mul.w	r3, r1, r3
  405bdc:	4413      	add	r3, r2
  405bde:	3304      	adds	r3, #4
  405be0:	681b      	ldr	r3, [r3, #0]
  405be2:	f107 0110 	add.w	r1, r7, #16
  405be6:	2200      	movs	r2, #0
  405be8:	4618      	mov	r0, r3
  405bea:	4b37      	ldr	r3, [pc, #220]	; (405cc8 <inv_spi_master_write_register+0x138>)
  405bec:	4798      	blx	r3

	sm[spi_num].tx_buffer[0] = (uint8_t) register_addr;
  405bee:	4a35      	ldr	r2, [pc, #212]	; (405cc4 <inv_spi_master_write_register+0x134>)
  405bf0:	68fb      	ldr	r3, [r7, #12]
  405bf2:	f241 018c 	movw	r1, #4236	; 0x108c
  405bf6:	fb01 f303 	mul.w	r3, r1, r3
  405bfa:	4413      	add	r3, r2
  405bfc:	333c      	adds	r3, #60	; 0x3c
  405bfe:	7afa      	ldrb	r2, [r7, #11]
  405c00:	701a      	strb	r2, [r3, #0]
	memcpy(&sm[spi_num].tx_buffer[1], (uint8_t *)value, len);
  405c02:	68fb      	ldr	r3, [r7, #12]
  405c04:	f241 028c 	movw	r2, #4236	; 0x108c
  405c08:	fb02 f303 	mul.w	r3, r2, r3
  405c0c:	3339      	adds	r3, #57	; 0x39
  405c0e:	4a2d      	ldr	r2, [pc, #180]	; (405cc4 <inv_spi_master_write_register+0x134>)
  405c10:	4413      	add	r3, r2
  405c12:	3304      	adds	r3, #4
  405c14:	893a      	ldrh	r2, [r7, #8]
  405c16:	6879      	ldr	r1, [r7, #4]
  405c18:	4618      	mov	r0, r3
  405c1a:	4b2c      	ldr	r3, [pc, #176]	; (405ccc <inv_spi_master_write_register+0x13c>)
  405c1c:	4798      	blx	r3

	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].tx_buffer[0];
  405c1e:	68fb      	ldr	r3, [r7, #12]
  405c20:	f241 028c 	movw	r2, #4236	; 0x108c
  405c24:	fb02 f303 	mul.w	r3, r2, r3
  405c28:	3338      	adds	r3, #56	; 0x38
  405c2a:	4a26      	ldr	r2, [pc, #152]	; (405cc4 <inv_spi_master_write_register+0x134>)
  405c2c:	4413      	add	r3, r2
  405c2e:	3304      	adds	r3, #4
  405c30:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  405c32:	893b      	ldrh	r3, [r7, #8]
  405c34:	3301      	adds	r3, #1
  405c36:	617b      	str	r3, [r7, #20]
	pdc_tx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  405c38:	4a22      	ldr	r2, [pc, #136]	; (405cc4 <inv_spi_master_write_register+0x134>)
  405c3a:	68fb      	ldr	r3, [r7, #12]
  405c3c:	f241 018c 	movw	r1, #4236	; 0x108c
  405c40:	fb01 f303 	mul.w	r3, r1, r3
  405c44:	4413      	add	r3, r2
  405c46:	3304      	adds	r3, #4
  405c48:	681b      	ldr	r3, [r3, #0]
  405c4a:	f107 0110 	add.w	r1, r7, #16
  405c4e:	2200      	movs	r2, #0
  405c50:	4618      	mov	r0, r3
  405c52:	4b1f      	ldr	r3, [pc, #124]	; (405cd0 <inv_spi_master_write_register+0x140>)
  405c54:	4798      	blx	r3
	
	/* Enable the RX and TX PDC transfer requests */
	pdc_enable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  405c56:	4a1b      	ldr	r2, [pc, #108]	; (405cc4 <inv_spi_master_write_register+0x134>)
  405c58:	68fb      	ldr	r3, [r7, #12]
  405c5a:	f241 018c 	movw	r1, #4236	; 0x108c
  405c5e:	fb01 f303 	mul.w	r3, r1, r3
  405c62:	4413      	add	r3, r2
  405c64:	3304      	adds	r3, #4
  405c66:	681b      	ldr	r3, [r3, #0]
  405c68:	f240 1101 	movw	r1, #257	; 0x101
  405c6c:	4618      	mov	r0, r3
  405c6e:	4b19      	ldr	r3, [pc, #100]	; (405cd4 <inv_spi_master_write_register+0x144>)
  405c70:	4798      	blx	r3
	/* Re activate Irq */
	inv_enable_irq();
  405c72:	4b19      	ldr	r3, [pc, #100]	; (405cd8 <inv_spi_master_write_register+0x148>)
  405c74:	4798      	blx	r3
	/* Waiting transfer done*/
	while((spi_read_status(sm[spi_num].p_spi) & SPI_SR_TXEMPTY) == 0);
  405c76:	bf00      	nop
  405c78:	4a12      	ldr	r2, [pc, #72]	; (405cc4 <inv_spi_master_write_register+0x134>)
  405c7a:	68fb      	ldr	r3, [r7, #12]
  405c7c:	f241 018c 	movw	r1, #4236	; 0x108c
  405c80:	fb01 f303 	mul.w	r3, r1, r3
  405c84:	4413      	add	r3, r2
  405c86:	681b      	ldr	r3, [r3, #0]
  405c88:	4618      	mov	r0, r3
  405c8a:	4b14      	ldr	r3, [pc, #80]	; (405cdc <inv_spi_master_write_register+0x14c>)
  405c8c:	4798      	blx	r3
  405c8e:	4603      	mov	r3, r0
  405c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
  405c94:	2b00      	cmp	r3, #0
  405c96:	d0ef      	beq.n	405c78 <inv_spi_master_write_register+0xe8>
		
	/* Disable the RX and TX PDC transfer requests */
	pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS |
  405c98:	4a0a      	ldr	r2, [pc, #40]	; (405cc4 <inv_spi_master_write_register+0x134>)
  405c9a:	68fb      	ldr	r3, [r7, #12]
  405c9c:	f241 018c 	movw	r1, #4236	; 0x108c
  405ca0:	fb01 f303 	mul.w	r3, r1, r3
  405ca4:	4413      	add	r3, r2
  405ca6:	3304      	adds	r3, #4
  405ca8:	681b      	ldr	r3, [r3, #0]
  405caa:	f240 2102 	movw	r1, #514	; 0x202
  405cae:	4618      	mov	r0, r3
  405cb0:	4b0b      	ldr	r3, [pc, #44]	; (405ce0 <inv_spi_master_write_register+0x150>)
  405cb2:	4798      	blx	r3
			PERIPH_PTCR_TXTDIS);
	
	return 0;
  405cb4:	2300      	movs	r3, #0
}
  405cb6:	4618      	mov	r0, r3
  405cb8:	3718      	adds	r7, #24
  405cba:	46bd      	mov	sp, r7
  405cbc:	bd80      	pop	{r7, pc}
  405cbe:	bf00      	nop
  405cc0:	00404969 	.word	0x00404969
  405cc4:	20000218 	.word	0x20000218
  405cc8:	00408133 	.word	0x00408133
  405ccc:	0040f861 	.word	0x0040f861
  405cd0:	004080ef 	.word	0x004080ef
  405cd4:	00408197 	.word	0x00408197
  405cd8:	00404991 	.word	0x00404991
  405cdc:	00405413 	.word	0x00405413
  405ce0:	004081b9 	.word	0x004081b9

00405ce4 <inv_spi_master_read_register>:

unsigned long inv_spi_master_read_register(unsigned spi_num, unsigned char register_addr,
		unsigned short len, unsigned char *value)
{
  405ce4:	b580      	push	{r7, lr}
  405ce6:	b086      	sub	sp, #24
  405ce8:	af00      	add	r7, sp, #0
  405cea:	60f8      	str	r0, [r7, #12]
  405cec:	607b      	str	r3, [r7, #4]
  405cee:	460b      	mov	r3, r1
  405cf0:	72fb      	strb	r3, [r7, #11]
  405cf2:	4613      	mov	r3, r2
  405cf4:	813b      	strh	r3, [r7, #8]
	if(len+1 > SPI_BUFFER_SIZE)
  405cf6:	893b      	ldrh	r3, [r7, #8]
  405cf8:	3301      	adds	r3, #1
  405cfa:	f5b3 6f02 	cmp.w	r3, #2080	; 0x820
  405cfe:	dd01      	ble.n	405d04 <inv_spi_master_read_register+0x20>
		return 1;
  405d00:	2301      	movs	r3, #1
  405d02:	e0ec      	b.n	405ede <inv_spi_master_read_register+0x1fa>
	
	pdc_packet_t pdc_spi_packet;
	
	if(sm[spi_num].transfer_done_cb)
  405d04:	4a78      	ldr	r2, [pc, #480]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405d06:	68fb      	ldr	r3, [r7, #12]
  405d08:	f241 018c 	movw	r1, #4236	; 0x108c
  405d0c:	fb01 f303 	mul.w	r3, r1, r3
  405d10:	4413      	add	r3, r2
  405d12:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405d16:	681b      	ldr	r3, [r3, #0]
  405d18:	2b00      	cmp	r3, #0
  405d1a:	d00b      	beq.n	405d34 <inv_spi_master_read_register+0x50>
		pdc_rx_clear_cnt(sm[spi_num].p_pdc);
  405d1c:	4a72      	ldr	r2, [pc, #456]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405d1e:	68fb      	ldr	r3, [r7, #12]
  405d20:	f241 018c 	movw	r1, #4236	; 0x108c
  405d24:	fb01 f303 	mul.w	r3, r1, r3
  405d28:	4413      	add	r3, r2
  405d2a:	3304      	adds	r3, #4
  405d2c:	681b      	ldr	r3, [r3, #0]
  405d2e:	4618      	mov	r0, r3
  405d30:	4b6e      	ldr	r3, [pc, #440]	; (405eec <inv_spi_master_read_register+0x208>)
  405d32:	4798      	blx	r3
	/* Desactivate Irq during buffer write*/
	inv_disable_irq();
  405d34:	4b6e      	ldr	r3, [pc, #440]	; (405ef0 <inv_spi_master_read_register+0x20c>)
  405d36:	4798      	blx	r3
	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].rx_buffer[0];
  405d38:	68fb      	ldr	r3, [r7, #12]
  405d3a:	f241 028c 	movw	r2, #4236	; 0x108c
  405d3e:	fb02 f303 	mul.w	r3, r2, r3
  405d42:	f603 0358 	addw	r3, r3, #2136	; 0x858
  405d46:	4a68      	ldr	r2, [pc, #416]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405d48:	4413      	add	r3, r2
  405d4a:	3304      	adds	r3, #4
  405d4c:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  405d4e:	893b      	ldrh	r3, [r7, #8]
  405d50:	3301      	adds	r3, #1
  405d52:	617b      	str	r3, [r7, #20]
	pdc_rx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  405d54:	4a64      	ldr	r2, [pc, #400]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405d56:	68fb      	ldr	r3, [r7, #12]
  405d58:	f241 018c 	movw	r1, #4236	; 0x108c
  405d5c:	fb01 f303 	mul.w	r3, r1, r3
  405d60:	4413      	add	r3, r2
  405d62:	3304      	adds	r3, #4
  405d64:	681b      	ldr	r3, [r3, #0]
  405d66:	f107 0110 	add.w	r1, r7, #16
  405d6a:	2200      	movs	r2, #0
  405d6c:	4618      	mov	r0, r3
  405d6e:	4b61      	ldr	r3, [pc, #388]	; (405ef4 <inv_spi_master_read_register+0x210>)
  405d70:	4798      	blx	r3
	
	sm[spi_num].tx_buffer[0] = (uint8_t) register_addr | 0x80;
  405d72:	7afb      	ldrb	r3, [r7, #11]
  405d74:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405d78:	b2d8      	uxtb	r0, r3
  405d7a:	4a5b      	ldr	r2, [pc, #364]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405d7c:	68fb      	ldr	r3, [r7, #12]
  405d7e:	f241 018c 	movw	r1, #4236	; 0x108c
  405d82:	fb01 f303 	mul.w	r3, r1, r3
  405d86:	4413      	add	r3, r2
  405d88:	333c      	adds	r3, #60	; 0x3c
  405d8a:	4602      	mov	r2, r0
  405d8c:	701a      	strb	r2, [r3, #0]
	memset(&sm[spi_num].tx_buffer[1], 0x00, len);
  405d8e:	68fb      	ldr	r3, [r7, #12]
  405d90:	f241 028c 	movw	r2, #4236	; 0x108c
  405d94:	fb02 f303 	mul.w	r3, r2, r3
  405d98:	3339      	adds	r3, #57	; 0x39
  405d9a:	4a53      	ldr	r2, [pc, #332]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405d9c:	4413      	add	r3, r2
  405d9e:	3304      	adds	r3, #4
  405da0:	893a      	ldrh	r2, [r7, #8]
  405da2:	2100      	movs	r1, #0
  405da4:	4618      	mov	r0, r3
  405da6:	4b54      	ldr	r3, [pc, #336]	; (405ef8 <inv_spi_master_read_register+0x214>)
  405da8:	4798      	blx	r3

	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].tx_buffer[0];
  405daa:	68fb      	ldr	r3, [r7, #12]
  405dac:	f241 028c 	movw	r2, #4236	; 0x108c
  405db0:	fb02 f303 	mul.w	r3, r2, r3
  405db4:	3338      	adds	r3, #56	; 0x38
  405db6:	4a4c      	ldr	r2, [pc, #304]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405db8:	4413      	add	r3, r2
  405dba:	3304      	adds	r3, #4
  405dbc:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  405dbe:	893b      	ldrh	r3, [r7, #8]
  405dc0:	3301      	adds	r3, #1
  405dc2:	617b      	str	r3, [r7, #20]
	pdc_tx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  405dc4:	4a48      	ldr	r2, [pc, #288]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405dc6:	68fb      	ldr	r3, [r7, #12]
  405dc8:	f241 018c 	movw	r1, #4236	; 0x108c
  405dcc:	fb01 f303 	mul.w	r3, r1, r3
  405dd0:	4413      	add	r3, r2
  405dd2:	3304      	adds	r3, #4
  405dd4:	681b      	ldr	r3, [r3, #0]
  405dd6:	f107 0110 	add.w	r1, r7, #16
  405dda:	2200      	movs	r2, #0
  405ddc:	4618      	mov	r0, r3
  405dde:	4b47      	ldr	r3, [pc, #284]	; (405efc <inv_spi_master_read_register+0x218>)
  405de0:	4798      	blx	r3
	/* Re activate Irq */
	inv_enable_irq();
  405de2:	4b47      	ldr	r3, [pc, #284]	; (405f00 <inv_spi_master_read_register+0x21c>)
  405de4:	4798      	blx	r3

	if (sm[spi_num].transfer_done_cb == 0) {
  405de6:	4a40      	ldr	r2, [pc, #256]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405de8:	68fb      	ldr	r3, [r7, #12]
  405dea:	f241 018c 	movw	r1, #4236	; 0x108c
  405dee:	fb01 f303 	mul.w	r3, r1, r3
  405df2:	4413      	add	r3, r2
  405df4:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405df8:	681b      	ldr	r3, [r3, #0]
  405dfa:	2b00      	cmp	r3, #0
  405dfc:	d13c      	bne.n	405e78 <inv_spi_master_read_register+0x194>
		/* Enable the RX and TX PDC transfer requests */
		pdc_enable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  405dfe:	4a3a      	ldr	r2, [pc, #232]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405e00:	68fb      	ldr	r3, [r7, #12]
  405e02:	f241 018c 	movw	r1, #4236	; 0x108c
  405e06:	fb01 f303 	mul.w	r3, r1, r3
  405e0a:	4413      	add	r3, r2
  405e0c:	3304      	adds	r3, #4
  405e0e:	681b      	ldr	r3, [r3, #0]
  405e10:	f240 1101 	movw	r1, #257	; 0x101
  405e14:	4618      	mov	r0, r3
  405e16:	4b3b      	ldr	r3, [pc, #236]	; (405f04 <inv_spi_master_read_register+0x220>)
  405e18:	4798      	blx	r3
		
		/* Waiting transfer done*/
		while((spi_read_status(sm[spi_num].p_spi) & SPI_SR_ENDRX) == 0);
  405e1a:	bf00      	nop
  405e1c:	4a32      	ldr	r2, [pc, #200]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405e1e:	68fb      	ldr	r3, [r7, #12]
  405e20:	f241 018c 	movw	r1, #4236	; 0x108c
  405e24:	fb01 f303 	mul.w	r3, r1, r3
  405e28:	4413      	add	r3, r2
  405e2a:	681b      	ldr	r3, [r3, #0]
  405e2c:	4618      	mov	r0, r3
  405e2e:	4b36      	ldr	r3, [pc, #216]	; (405f08 <inv_spi_master_read_register+0x224>)
  405e30:	4798      	blx	r3
  405e32:	4603      	mov	r3, r0
  405e34:	f003 0310 	and.w	r3, r3, #16
  405e38:	2b00      	cmp	r3, #0
  405e3a:	d0ef      	beq.n	405e1c <inv_spi_master_read_register+0x138>
		
		/* Disable the RX and TX PDC transfer requests */
		pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS |
  405e3c:	4a2a      	ldr	r2, [pc, #168]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405e3e:	68fb      	ldr	r3, [r7, #12]
  405e40:	f241 018c 	movw	r1, #4236	; 0x108c
  405e44:	fb01 f303 	mul.w	r3, r1, r3
  405e48:	4413      	add	r3, r2
  405e4a:	3304      	adds	r3, #4
  405e4c:	681b      	ldr	r3, [r3, #0]
  405e4e:	f240 2102 	movw	r1, #514	; 0x202
  405e52:	4618      	mov	r0, r3
  405e54:	4b2d      	ldr	r3, [pc, #180]	; (405f0c <inv_spi_master_read_register+0x228>)
  405e56:	4798      	blx	r3
				PERIPH_PTCR_TXTDIS);
				
		memcpy(value, &sm[spi_num].rx_buffer[1], len);
  405e58:	68fb      	ldr	r3, [r7, #12]
  405e5a:	f241 028c 	movw	r2, #4236	; 0x108c
  405e5e:	fb02 f303 	mul.w	r3, r2, r3
  405e62:	f603 0359 	addw	r3, r3, #2137	; 0x859
  405e66:	4a20      	ldr	r2, [pc, #128]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405e68:	4413      	add	r3, r2
  405e6a:	3304      	adds	r3, #4
  405e6c:	893a      	ldrh	r2, [r7, #8]
  405e6e:	4619      	mov	r1, r3
  405e70:	6878      	ldr	r0, [r7, #4]
  405e72:	4b27      	ldr	r3, [pc, #156]	; (405f10 <inv_spi_master_read_register+0x22c>)
  405e74:	4798      	blx	r3
  405e76:	e031      	b.n	405edc <inv_spi_master_read_register+0x1f8>
	} else {
		sm[spi_num].rx_dest_addr = value;
  405e78:	4a1b      	ldr	r2, [pc, #108]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405e7a:	68fb      	ldr	r3, [r7, #12]
  405e7c:	f241 018c 	movw	r1, #4236	; 0x108c
  405e80:	fb01 f303 	mul.w	r3, r1, r3
  405e84:	4413      	add	r3, r2
  405e86:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405e8a:	3304      	adds	r3, #4
  405e8c:	687a      	ldr	r2, [r7, #4]
  405e8e:	601a      	str	r2, [r3, #0]
		sm[spi_num].rx_len = len;
  405e90:	4a15      	ldr	r2, [pc, #84]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405e92:	68fb      	ldr	r3, [r7, #12]
  405e94:	f241 018c 	movw	r1, #4236	; 0x108c
  405e98:	fb01 f303 	mul.w	r3, r1, r3
  405e9c:	4413      	add	r3, r2
  405e9e:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  405ea2:	3308      	adds	r3, #8
  405ea4:	893a      	ldrh	r2, [r7, #8]
  405ea6:	801a      	strh	r2, [r3, #0]

		/* Transfer done handler is in ISR */
		spi_enable_interrupt(sm[spi_num].p_spi, SPI_IER_RXBUFF) ;
  405ea8:	4a0f      	ldr	r2, [pc, #60]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405eaa:	68fb      	ldr	r3, [r7, #12]
  405eac:	f241 018c 	movw	r1, #4236	; 0x108c
  405eb0:	fb01 f303 	mul.w	r3, r1, r3
  405eb4:	4413      	add	r3, r2
  405eb6:	681b      	ldr	r3, [r3, #0]
  405eb8:	2140      	movs	r1, #64	; 0x40
  405eba:	4618      	mov	r0, r3
  405ebc:	4b15      	ldr	r3, [pc, #84]	; (405f14 <inv_spi_master_read_register+0x230>)
  405ebe:	4798      	blx	r3

		/* Enable the RX and TX PDC transfer requests */
		pdc_enable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  405ec0:	4a09      	ldr	r2, [pc, #36]	; (405ee8 <inv_spi_master_read_register+0x204>)
  405ec2:	68fb      	ldr	r3, [r7, #12]
  405ec4:	f241 018c 	movw	r1, #4236	; 0x108c
  405ec8:	fb01 f303 	mul.w	r3, r1, r3
  405ecc:	4413      	add	r3, r2
  405ece:	3304      	adds	r3, #4
  405ed0:	681b      	ldr	r3, [r3, #0]
  405ed2:	f240 1101 	movw	r1, #257	; 0x101
  405ed6:	4618      	mov	r0, r3
  405ed8:	4b0a      	ldr	r3, [pc, #40]	; (405f04 <inv_spi_master_read_register+0x220>)
  405eda:	4798      	blx	r3
	}

	return 0;
  405edc:	2300      	movs	r3, #0
}
  405ede:	4618      	mov	r0, r3
  405ee0:	3718      	adds	r7, #24
  405ee2:	46bd      	mov	sp, r7
  405ee4:	bd80      	pop	{r7, pc}
  405ee6:	bf00      	nop
  405ee8:	20000218 	.word	0x20000218
  405eec:	00408177 	.word	0x00408177
  405ef0:	00404969 	.word	0x00404969
  405ef4:	00408133 	.word	0x00408133
  405ef8:	0040fa5d 	.word	0x0040fa5d
  405efc:	004080ef 	.word	0x004080ef
  405f00:	00404991 	.word	0x00404991
  405f04:	00408197 	.word	0x00408197
  405f08:	00405413 	.word	0x00405413
  405f0c:	004081b9 	.word	0x004081b9
  405f10:	0040f861 	.word	0x0040f861
  405f14:	0040542b 	.word	0x0040542b

00405f18 <FLEXCOM5_Handler>:
	}
}


void FLEXCOM5_Handler(void)
{
  405f18:	b580      	push	{r7, lr}
  405f1a:	af00      	add	r7, sp, #0
#ifdef INV_SENSOR_DB
	spi_master_irq_handler(INV_SPI_DB);
#else
	spi_master_irq_handler(INV_SPI_ONBOARD);
  405f1c:	2001      	movs	r0, #1
  405f1e:	4b02      	ldr	r3, [pc, #8]	; (405f28 <FLEXCOM5_Handler+0x10>)
  405f20:	4798      	blx	r3
#endif
}
  405f22:	bf00      	nop
  405f24:	bd80      	pop	{r7, pc}
  405f26:	bf00      	nop
  405f28:	00405689 	.word	0x00405689

00405f2c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  405f2c:	b580      	push	{r7, lr}
  405f2e:	af00      	add	r7, sp, #0
	if(sSystick_irq_handler_cb != 0)
  405f30:	4b04      	ldr	r3, [pc, #16]	; (405f44 <SysTick_Handler+0x18>)
  405f32:	681b      	ldr	r3, [r3, #0]
  405f34:	2b00      	cmp	r3, #0
  405f36:	d002      	beq.n	405f3e <SysTick_Handler+0x12>
		sSystick_irq_handler_cb();
  405f38:	4b02      	ldr	r3, [pc, #8]	; (405f44 <SysTick_Handler+0x18>)
  405f3a:	681b      	ldr	r3, [r3, #0]
  405f3c:	4798      	blx	r3
}
  405f3e:	bf00      	nop
  405f40:	bd80      	pop	{r7, pc}
  405f42:	bf00      	nop
  405f44:	20003a90 	.word	0x20003a90

00405f48 <NVIC_EnableIRQ>:
{
  405f48:	b480      	push	{r7}
  405f4a:	b083      	sub	sp, #12
  405f4c:	af00      	add	r7, sp, #0
  405f4e:	4603      	mov	r3, r0
  405f50:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405f52:	4909      	ldr	r1, [pc, #36]	; (405f78 <NVIC_EnableIRQ+0x30>)
  405f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405f58:	095b      	lsrs	r3, r3, #5
  405f5a:	79fa      	ldrb	r2, [r7, #7]
  405f5c:	f002 021f 	and.w	r2, r2, #31
  405f60:	2001      	movs	r0, #1
  405f62:	fa00 f202 	lsl.w	r2, r0, r2
  405f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405f6a:	bf00      	nop
  405f6c:	370c      	adds	r7, #12
  405f6e:	46bd      	mov	sp, r7
  405f70:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f74:	4770      	bx	lr
  405f76:	bf00      	nop
  405f78:	e000e100 	.word	0xe000e100

00405f7c <NVIC_DisableIRQ>:
{
  405f7c:	b480      	push	{r7}
  405f7e:	b083      	sub	sp, #12
  405f80:	af00      	add	r7, sp, #0
  405f82:	4603      	mov	r3, r0
  405f84:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405f86:	4909      	ldr	r1, [pc, #36]	; (405fac <NVIC_DisableIRQ+0x30>)
  405f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405f8c:	095b      	lsrs	r3, r3, #5
  405f8e:	79fa      	ldrb	r2, [r7, #7]
  405f90:	f002 021f 	and.w	r2, r2, #31
  405f94:	2001      	movs	r0, #1
  405f96:	fa00 f202 	lsl.w	r2, r0, r2
  405f9a:	3320      	adds	r3, #32
  405f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405fa0:	bf00      	nop
  405fa2:	370c      	adds	r7, #12
  405fa4:	46bd      	mov	sp, r7
  405fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405faa:	4770      	bx	lr
  405fac:	e000e100 	.word	0xe000e100

00405fb0 <NVIC_ClearPendingIRQ>:
{
  405fb0:	b480      	push	{r7}
  405fb2:	b083      	sub	sp, #12
  405fb4:	af00      	add	r7, sp, #0
  405fb6:	4603      	mov	r3, r0
  405fb8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405fba:	4909      	ldr	r1, [pc, #36]	; (405fe0 <NVIC_ClearPendingIRQ+0x30>)
  405fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405fc0:	095b      	lsrs	r3, r3, #5
  405fc2:	79fa      	ldrb	r2, [r7, #7]
  405fc4:	f002 021f 	and.w	r2, r2, #31
  405fc8:	2001      	movs	r0, #1
  405fca:	fa00 f202 	lsl.w	r2, r0, r2
  405fce:	3360      	adds	r3, #96	; 0x60
  405fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405fd4:	bf00      	nop
  405fd6:	370c      	adds	r7, #12
  405fd8:	46bd      	mov	sp, r7
  405fda:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fde:	4770      	bx	lr
  405fe0:	e000e100 	.word	0xe000e100

00405fe4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  405fe4:	b480      	push	{r7}
  405fe6:	b083      	sub	sp, #12
  405fe8:	af00      	add	r7, sp, #0
  405fea:	4603      	mov	r3, r0
  405fec:	6039      	str	r1, [r7, #0]
  405fee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  405ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405ff4:	2b00      	cmp	r3, #0
  405ff6:	da0b      	bge.n	406010 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  405ff8:	490d      	ldr	r1, [pc, #52]	; (406030 <NVIC_SetPriority+0x4c>)
  405ffa:	79fb      	ldrb	r3, [r7, #7]
  405ffc:	f003 030f 	and.w	r3, r3, #15
  406000:	3b04      	subs	r3, #4
  406002:	683a      	ldr	r2, [r7, #0]
  406004:	b2d2      	uxtb	r2, r2
  406006:	0112      	lsls	r2, r2, #4
  406008:	b2d2      	uxtb	r2, r2
  40600a:	440b      	add	r3, r1
  40600c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  40600e:	e009      	b.n	406024 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  406010:	4908      	ldr	r1, [pc, #32]	; (406034 <NVIC_SetPriority+0x50>)
  406012:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406016:	683a      	ldr	r2, [r7, #0]
  406018:	b2d2      	uxtb	r2, r2
  40601a:	0112      	lsls	r2, r2, #4
  40601c:	b2d2      	uxtb	r2, r2
  40601e:	440b      	add	r3, r1
  406020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  406024:	bf00      	nop
  406026:	370c      	adds	r7, #12
  406028:	46bd      	mov	sp, r7
  40602a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40602e:	4770      	bx	lr
  406030:	e000ed00 	.word	0xe000ed00
  406034:	e000e100 	.word	0xe000e100

00406038 <osc_get_rate>:
{
  406038:	b480      	push	{r7}
  40603a:	b083      	sub	sp, #12
  40603c:	af00      	add	r7, sp, #0
  40603e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  406040:	687b      	ldr	r3, [r7, #4]
  406042:	2b07      	cmp	r3, #7
  406044:	d825      	bhi.n	406092 <osc_get_rate+0x5a>
  406046:	a201      	add	r2, pc, #4	; (adr r2, 40604c <osc_get_rate+0x14>)
  406048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40604c:	0040606d 	.word	0x0040606d
  406050:	00406073 	.word	0x00406073
  406054:	00406079 	.word	0x00406079
  406058:	0040607f 	.word	0x0040607f
  40605c:	00406083 	.word	0x00406083
  406060:	00406087 	.word	0x00406087
  406064:	0040608b 	.word	0x0040608b
  406068:	0040608f 	.word	0x0040608f
		return OSC_SLCK_32K_RC_HZ;
  40606c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  406070:	e010      	b.n	406094 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  406072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406076:	e00d      	b.n	406094 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  406078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40607c:	e00a      	b.n	406094 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40607e:	4b08      	ldr	r3, [pc, #32]	; (4060a0 <osc_get_rate+0x68>)
  406080:	e008      	b.n	406094 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  406082:	4b08      	ldr	r3, [pc, #32]	; (4060a4 <osc_get_rate+0x6c>)
  406084:	e006      	b.n	406094 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  406086:	4b08      	ldr	r3, [pc, #32]	; (4060a8 <osc_get_rate+0x70>)
  406088:	e004      	b.n	406094 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40608a:	2300      	movs	r3, #0
  40608c:	e002      	b.n	406094 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40608e:	2300      	movs	r3, #0
  406090:	e000      	b.n	406094 <osc_get_rate+0x5c>
	return 0;
  406092:	2300      	movs	r3, #0
}
  406094:	4618      	mov	r0, r3
  406096:	370c      	adds	r7, #12
  406098:	46bd      	mov	sp, r7
  40609a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40609e:	4770      	bx	lr
  4060a0:	007a1200 	.word	0x007a1200
  4060a4:	00f42400 	.word	0x00f42400
  4060a8:	016e3600 	.word	0x016e3600

004060ac <sysclk_get_main_hz>:
{
  4060ac:	b580      	push	{r7, lr}
  4060ae:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4060b0:	2001      	movs	r0, #1
  4060b2:	4b04      	ldr	r3, [pc, #16]	; (4060c4 <sysclk_get_main_hz+0x18>)
  4060b4:	4798      	blx	r3
  4060b6:	4602      	mov	r2, r0
  4060b8:	f640 634e 	movw	r3, #3662	; 0xe4e
  4060bc:	fb03 f302 	mul.w	r3, r3, r2
}
  4060c0:	4618      	mov	r0, r3
  4060c2:	bd80      	pop	{r7, pc}
  4060c4:	00406039 	.word	0x00406039

004060c8 <sysclk_get_peripheral_hz>:
{
  4060c8:	b580      	push	{r7, lr}
  4060ca:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4060cc:	4b02      	ldr	r3, [pc, #8]	; (4060d8 <sysclk_get_peripheral_hz+0x10>)
  4060ce:	4798      	blx	r3
  4060d0:	4603      	mov	r3, r0
}
  4060d2:	4618      	mov	r0, r3
  4060d4:	bd80      	pop	{r7, pc}
  4060d6:	bf00      	nop
  4060d8:	004060ad 	.word	0x004060ad

004060dc <sysclk_get_peripheral_bus_hz>:
{
  4060dc:	b580      	push	{r7, lr}
  4060de:	b082      	sub	sp, #8
  4060e0:	af00      	add	r7, sp, #0
  4060e2:	6078      	str	r0, [r7, #4]
	return sysclk_get_peripheral_hz();
  4060e4:	4b03      	ldr	r3, [pc, #12]	; (4060f4 <sysclk_get_peripheral_bus_hz+0x18>)
  4060e6:	4798      	blx	r3
  4060e8:	4603      	mov	r3, r0
}
  4060ea:	4618      	mov	r0, r3
  4060ec:	3708      	adds	r7, #8
  4060ee:	46bd      	mov	sp, r7
  4060f0:	bd80      	pop	{r7, pc}
  4060f2:	bf00      	nop
  4060f4:	004060c9 	.word	0x004060c9

004060f8 <sysclk_enable_peripheral_clock>:
{
  4060f8:	b580      	push	{r7, lr}
  4060fa:	b082      	sub	sp, #8
  4060fc:	af00      	add	r7, sp, #0
  4060fe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  406100:	6878      	ldr	r0, [r7, #4]
  406102:	4b03      	ldr	r3, [pc, #12]	; (406110 <sysclk_enable_peripheral_clock+0x18>)
  406104:	4798      	blx	r3
}
  406106:	bf00      	nop
  406108:	3708      	adds	r7, #8
  40610a:	46bd      	mov	sp, r7
  40610c:	bd80      	pop	{r7, pc}
  40610e:	bf00      	nop
  406110:	00408ab5 	.word	0x00408ab5

00406114 <fusion_16bit_into_32bit>:
 * The two timers have to be read lsb then msb. Reading them in another order might prevent this function from 
 * detecting an overflow that took place between two timer reads.
 */
static uint32_t fusion_16bit_into_32bit(uint16_t lsb_1, uint16_t msb_1, uint16_t lsb_2,
		uint16_t msb_2)
{
  406114:	b490      	push	{r4, r7}
  406116:	b084      	sub	sp, #16
  406118:	af00      	add	r7, sp, #0
  40611a:	4604      	mov	r4, r0
  40611c:	4608      	mov	r0, r1
  40611e:	4611      	mov	r1, r2
  406120:	461a      	mov	r2, r3
  406122:	4623      	mov	r3, r4
  406124:	80fb      	strh	r3, [r7, #6]
  406126:	4603      	mov	r3, r0
  406128:	80bb      	strh	r3, [r7, #4]
  40612a:	460b      	mov	r3, r1
  40612c:	807b      	strh	r3, [r7, #2]
  40612e:	4613      	mov	r3, r2
  406130:	803b      	strh	r3, [r7, #0]
	uint32_t ret_val;
	
	/* Detect if the first counter rolled-over between the moments when the 
	* two counters were read
	*/
	if((lsb_2 < lsb_1) && (msb_2 == msb_1))
  406132:	887a      	ldrh	r2, [r7, #2]
  406134:	88fb      	ldrh	r3, [r7, #6]
  406136:	429a      	cmp	r2, r3
  406138:	d206      	bcs.n	406148 <fusion_16bit_into_32bit+0x34>
  40613a:	883a      	ldrh	r2, [r7, #0]
  40613c:	88bb      	ldrh	r3, [r7, #4]
  40613e:	429a      	cmp	r2, r3
  406140:	d102      	bne.n	406148 <fusion_16bit_into_32bit+0x34>
		msb_1--;
  406142:	88bb      	ldrh	r3, [r7, #4]
  406144:	3b01      	subs	r3, #1
  406146:	80bb      	strh	r3, [r7, #4]
	
	ret_val  = (uint32_t)lsb_1;
  406148:	88fb      	ldrh	r3, [r7, #6]
  40614a:	60fb      	str	r3, [r7, #12]
	ret_val |= (uint32_t)msb_1 << 16;
  40614c:	88bb      	ldrh	r3, [r7, #4]
  40614e:	041b      	lsls	r3, r3, #16
  406150:	68fa      	ldr	r2, [r7, #12]
  406152:	4313      	orrs	r3, r2
  406154:	60fb      	str	r3, [r7, #12]
	
	return ret_val;
  406156:	68fb      	ldr	r3, [r7, #12]
}
  406158:	4618      	mov	r0, r3
  40615a:	3710      	adds	r7, #16
  40615c:	46bd      	mov	sp, r7
  40615e:	bc90      	pop	{r4, r7}
  406160:	4770      	bx	lr
	...

00406164 <inv_timer_enable>:

void inv_timer_enable(unsigned timer_num)
{
  406164:	b580      	push	{r7, lr}
  406166:	b082      	sub	sp, #8
  406168:	af00      	add	r7, sp, #0
  40616a:	6078      	str	r0, [r7, #4]
	if(timer_num >= INV_TIMER_MAX)
  40616c:	687b      	ldr	r3, [r7, #4]
  40616e:	2b04      	cmp	r3, #4
  406170:	d82d      	bhi.n	4061ce <inv_timer_enable+0x6a>
		return;
	
	/* If timer is not already running, start it */
	if((tc_get_status(tm[timer_num].timer_periph, tm[timer_num].timer_channel) & TC_SR_CLKSTA) == 0)
  406172:	4919      	ldr	r1, [pc, #100]	; (4061d8 <inv_timer_enable+0x74>)
  406174:	687a      	ldr	r2, [r7, #4]
  406176:	4613      	mov	r3, r2
  406178:	009b      	lsls	r3, r3, #2
  40617a:	4413      	add	r3, r2
  40617c:	00db      	lsls	r3, r3, #3
  40617e:	440b      	add	r3, r1
  406180:	6818      	ldr	r0, [r3, #0]
  406182:	4915      	ldr	r1, [pc, #84]	; (4061d8 <inv_timer_enable+0x74>)
  406184:	687a      	ldr	r2, [r7, #4]
  406186:	4613      	mov	r3, r2
  406188:	009b      	lsls	r3, r3, #2
  40618a:	4413      	add	r3, r2
  40618c:	00db      	lsls	r3, r3, #3
  40618e:	440b      	add	r3, r1
  406190:	3304      	adds	r3, #4
  406192:	681b      	ldr	r3, [r3, #0]
  406194:	4619      	mov	r1, r3
  406196:	4b11      	ldr	r3, [pc, #68]	; (4061dc <inv_timer_enable+0x78>)
  406198:	4798      	blx	r3
  40619a:	4603      	mov	r3, r0
  40619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  4061a0:	2b00      	cmp	r3, #0
  4061a2:	d115      	bne.n	4061d0 <inv_timer_enable+0x6c>
		tc_start(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  4061a4:	490c      	ldr	r1, [pc, #48]	; (4061d8 <inv_timer_enable+0x74>)
  4061a6:	687a      	ldr	r2, [r7, #4]
  4061a8:	4613      	mov	r3, r2
  4061aa:	009b      	lsls	r3, r3, #2
  4061ac:	4413      	add	r3, r2
  4061ae:	00db      	lsls	r3, r3, #3
  4061b0:	440b      	add	r3, r1
  4061b2:	6818      	ldr	r0, [r3, #0]
  4061b4:	4908      	ldr	r1, [pc, #32]	; (4061d8 <inv_timer_enable+0x74>)
  4061b6:	687a      	ldr	r2, [r7, #4]
  4061b8:	4613      	mov	r3, r2
  4061ba:	009b      	lsls	r3, r3, #2
  4061bc:	4413      	add	r3, r2
  4061be:	00db      	lsls	r3, r3, #3
  4061c0:	440b      	add	r3, r1
  4061c2:	3304      	adds	r3, #4
  4061c4:	681b      	ldr	r3, [r3, #0]
  4061c6:	4619      	mov	r1, r3
  4061c8:	4b05      	ldr	r3, [pc, #20]	; (4061e0 <inv_timer_enable+0x7c>)
  4061ca:	4798      	blx	r3
  4061cc:	e000      	b.n	4061d0 <inv_timer_enable+0x6c>
		return;
  4061ce:	bf00      	nop
}
  4061d0:	3708      	adds	r7, #8
  4061d2:	46bd      	mov	sp, r7
  4061d4:	bd80      	pop	{r7, pc}
  4061d6:	bf00      	nop
  4061d8:	20002330 	.word	0x20002330
  4061dc:	00409037 	.word	0x00409037
  4061e0:	00408f5d 	.word	0x00408f5d

004061e4 <inv_timer_configure_timebase>:

int inv_timer_configure_timebase(uint32_t frequency)
{
  4061e4:	b590      	push	{r4, r7, lr}
  4061e6:	b085      	sub	sp, #20
  4061e8:	af00      	add	r7, sp, #0
  4061ea:	6078      	str	r0, [r7, #4]
	/* 
	 * Compute the prescaler value for the requested frequency,
	 * knowing that TC0 and TC1 are fed by the same clock.
	 */
	timer_prescaler = DIV_ROUND_UINT(sysclk_get_peripheral_bus_hz(TC0), frequency) - 1;
  4061ec:	4870      	ldr	r0, [pc, #448]	; (4063b0 <inv_timer_configure_timebase+0x1cc>)
  4061ee:	4b71      	ldr	r3, [pc, #452]	; (4063b4 <inv_timer_configure_timebase+0x1d0>)
  4061f0:	4798      	blx	r3
  4061f2:	4602      	mov	r2, r0
  4061f4:	687b      	ldr	r3, [r7, #4]
  4061f6:	085b      	lsrs	r3, r3, #1
  4061f8:	441a      	add	r2, r3
  4061fa:	687b      	ldr	r3, [r7, #4]
  4061fc:	fbb2 f3f3 	udiv	r3, r2, r3
  406200:	3b01      	subs	r3, #1
  406202:	4a6d      	ldr	r2, [pc, #436]	; (4063b8 <inv_timer_configure_timebase+0x1d4>)
  406204:	6013      	str	r3, [r2, #0]
	if(timer_prescaler > UINT8_MAX)
  406206:	4b6c      	ldr	r3, [pc, #432]	; (4063b8 <inv_timer_configure_timebase+0x1d4>)
  406208:	681b      	ldr	r3, [r3, #0]
  40620a:	2bff      	cmp	r3, #255	; 0xff
  40620c:	d902      	bls.n	406214 <inv_timer_configure_timebase+0x30>
		return -1;
  40620e:	f04f 33ff 	mov.w	r3, #4294967295
  406212:	e0c8      	b.n	4063a6 <inv_timer_configure_timebase+0x1c2>
	
	/* Configure the PMC to enable the TC modules. */
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  406214:	2300      	movs	r3, #0
  406216:	60fb      	str	r3, [r7, #12]
  406218:	e00e      	b.n	406238 <inv_timer_configure_timebase+0x54>
		sysclk_enable_peripheral_clock(tm[i].timer_id);
  40621a:	4968      	ldr	r1, [pc, #416]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  40621c:	68fa      	ldr	r2, [r7, #12]
  40621e:	4613      	mov	r3, r2
  406220:	009b      	lsls	r3, r3, #2
  406222:	4413      	add	r3, r2
  406224:	00db      	lsls	r3, r3, #3
  406226:	440b      	add	r3, r1
  406228:	3308      	adds	r3, #8
  40622a:	681b      	ldr	r3, [r3, #0]
  40622c:	4618      	mov	r0, r3
  40622e:	4b64      	ldr	r3, [pc, #400]	; (4063c0 <inv_timer_configure_timebase+0x1dc>)
  406230:	4798      	blx	r3
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  406232:	68fb      	ldr	r3, [r7, #12]
  406234:	3301      	adds	r3, #1
  406236:	60fb      	str	r3, [r7, #12]
  406238:	68fb      	ldr	r3, [r7, #12]
  40623a:	2b05      	cmp	r3, #5
  40623c:	d9ed      	bls.n	40621a <inv_timer_configure_timebase+0x36>
	}
	/* Enable PCK output and configure prescaler */
	pmc_disable_pck(PMC_PCK_3);
  40623e:	2003      	movs	r0, #3
  406240:	4b60      	ldr	r3, [pc, #384]	; (4063c4 <inv_timer_configure_timebase+0x1e0>)
  406242:	4798      	blx	r3
	if(pmc_switch_pck_to_mck(PMC_PCK_3, PMC_PCK_PRES(timer_prescaler)))
  406244:	4b5c      	ldr	r3, [pc, #368]	; (4063b8 <inv_timer_configure_timebase+0x1d4>)
  406246:	681b      	ldr	r3, [r3, #0]
  406248:	011b      	lsls	r3, r3, #4
  40624a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
  40624e:	4619      	mov	r1, r3
  406250:	2003      	movs	r0, #3
  406252:	4b5d      	ldr	r3, [pc, #372]	; (4063c8 <inv_timer_configure_timebase+0x1e4>)
  406254:	4798      	blx	r3
  406256:	4603      	mov	r3, r0
  406258:	2b00      	cmp	r3, #0
  40625a:	d002      	beq.n	406262 <inv_timer_configure_timebase+0x7e>
		return -1;
  40625c:	f04f 33ff 	mov.w	r3, #4294967295
  406260:	e0a1      	b.n	4063a6 <inv_timer_configure_timebase+0x1c2>
	pmc_enable_pck(PMC_PCK_3);
  406262:	2003      	movs	r0, #3
  406264:	4b59      	ldr	r3, [pc, #356]	; (4063cc <inv_timer_configure_timebase+0x1e8>)
  406266:	4798      	blx	r3
	
	/* Init all channels with PCK3 as clock source */
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  406268:	2300      	movs	r3, #0
  40626a:	60bb      	str	r3, [r7, #8]
  40626c:	e096      	b.n	40639c <inv_timer_configure_timebase+0x1b8>
		tc_init(tm[i].timer_periph, tm[i].timer_channel, tm[i].timer_mode);
  40626e:	4953      	ldr	r1, [pc, #332]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  406270:	68ba      	ldr	r2, [r7, #8]
  406272:	4613      	mov	r3, r2
  406274:	009b      	lsls	r3, r3, #2
  406276:	4413      	add	r3, r2
  406278:	00db      	lsls	r3, r3, #3
  40627a:	440b      	add	r3, r1
  40627c:	6818      	ldr	r0, [r3, #0]
  40627e:	494f      	ldr	r1, [pc, #316]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  406280:	68ba      	ldr	r2, [r7, #8]
  406282:	4613      	mov	r3, r2
  406284:	009b      	lsls	r3, r3, #2
  406286:	4413      	add	r3, r2
  406288:	00db      	lsls	r3, r3, #3
  40628a:	440b      	add	r3, r1
  40628c:	3304      	adds	r3, #4
  40628e:	681c      	ldr	r4, [r3, #0]
  406290:	494a      	ldr	r1, [pc, #296]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  406292:	68ba      	ldr	r2, [r7, #8]
  406294:	4613      	mov	r3, r2
  406296:	009b      	lsls	r3, r3, #2
  406298:	4413      	add	r3, r2
  40629a:	00db      	lsls	r3, r3, #3
  40629c:	440b      	add	r3, r1
  40629e:	330c      	adds	r3, #12
  4062a0:	681b      	ldr	r3, [r3, #0]
  4062a2:	461a      	mov	r2, r3
  4062a4:	4621      	mov	r1, r4
  4062a6:	4b4a      	ldr	r3, [pc, #296]	; (4063d0 <inv_timer_configure_timebase+0x1ec>)
  4062a8:	4798      	blx	r3
		
		tc_write_ra(tm[i].timer_periph, tm[i].timer_channel, tm[i].ra);
  4062aa:	4944      	ldr	r1, [pc, #272]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  4062ac:	68ba      	ldr	r2, [r7, #8]
  4062ae:	4613      	mov	r3, r2
  4062b0:	009b      	lsls	r3, r3, #2
  4062b2:	4413      	add	r3, r2
  4062b4:	00db      	lsls	r3, r3, #3
  4062b6:	440b      	add	r3, r1
  4062b8:	6818      	ldr	r0, [r3, #0]
  4062ba:	4940      	ldr	r1, [pc, #256]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  4062bc:	68ba      	ldr	r2, [r7, #8]
  4062be:	4613      	mov	r3, r2
  4062c0:	009b      	lsls	r3, r3, #2
  4062c2:	4413      	add	r3, r2
  4062c4:	00db      	lsls	r3, r3, #3
  4062c6:	440b      	add	r3, r1
  4062c8:	3304      	adds	r3, #4
  4062ca:	681c      	ldr	r4, [r3, #0]
  4062cc:	493b      	ldr	r1, [pc, #236]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  4062ce:	68ba      	ldr	r2, [r7, #8]
  4062d0:	4613      	mov	r3, r2
  4062d2:	009b      	lsls	r3, r3, #2
  4062d4:	4413      	add	r3, r2
  4062d6:	00db      	lsls	r3, r3, #3
  4062d8:	440b      	add	r3, r1
  4062da:	3310      	adds	r3, #16
  4062dc:	681b      	ldr	r3, [r3, #0]
  4062de:	461a      	mov	r2, r3
  4062e0:	4621      	mov	r1, r4
  4062e2:	4b3c      	ldr	r3, [pc, #240]	; (4063d4 <inv_timer_configure_timebase+0x1f0>)
  4062e4:	4798      	blx	r3
		
		if(i == INV_TIMER_MAX) {
  4062e6:	68bb      	ldr	r3, [r7, #8]
  4062e8:	2b05      	cmp	r3, #5
  4062ea:	d11f      	bne.n	40632c <inv_timer_configure_timebase+0x148>
			tc_set_block_mode(tm[i].timer_periph, TC_BMR_TC0XC0S_TIOA1);
  4062ec:	4933      	ldr	r1, [pc, #204]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  4062ee:	68ba      	ldr	r2, [r7, #8]
  4062f0:	4613      	mov	r3, r2
  4062f2:	009b      	lsls	r3, r3, #2
  4062f4:	4413      	add	r3, r2
  4062f6:	00db      	lsls	r3, r3, #3
  4062f8:	440b      	add	r3, r1
  4062fa:	681b      	ldr	r3, [r3, #0]
  4062fc:	2102      	movs	r1, #2
  4062fe:	4618      	mov	r0, r3
  406300:	4b35      	ldr	r3, [pc, #212]	; (4063d8 <inv_timer_configure_timebase+0x1f4>)
  406302:	4798      	blx	r3
			/* Can be started since it will not count until TC0 channel 1 will be started */
			tc_start(tm[i].timer_periph, tm[i].timer_channel);
  406304:	492d      	ldr	r1, [pc, #180]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  406306:	68ba      	ldr	r2, [r7, #8]
  406308:	4613      	mov	r3, r2
  40630a:	009b      	lsls	r3, r3, #2
  40630c:	4413      	add	r3, r2
  40630e:	00db      	lsls	r3, r3, #3
  406310:	440b      	add	r3, r1
  406312:	6818      	ldr	r0, [r3, #0]
  406314:	4929      	ldr	r1, [pc, #164]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  406316:	68ba      	ldr	r2, [r7, #8]
  406318:	4613      	mov	r3, r2
  40631a:	009b      	lsls	r3, r3, #2
  40631c:	4413      	add	r3, r2
  40631e:	00db      	lsls	r3, r3, #3
  406320:	440b      	add	r3, r1
  406322:	3304      	adds	r3, #4
  406324:	681b      	ldr	r3, [r3, #0]
  406326:	4619      	mov	r1, r3
  406328:	4b2c      	ldr	r3, [pc, #176]	; (4063dc <inv_timer_configure_timebase+0x1f8>)
  40632a:	4798      	blx	r3
		}
		
		NVIC_DisableIRQ(tm[i].irq);
  40632c:	4923      	ldr	r1, [pc, #140]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  40632e:	68ba      	ldr	r2, [r7, #8]
  406330:	4613      	mov	r3, r2
  406332:	009b      	lsls	r3, r3, #2
  406334:	4413      	add	r3, r2
  406336:	00db      	lsls	r3, r3, #3
  406338:	440b      	add	r3, r1
  40633a:	3320      	adds	r3, #32
  40633c:	f993 3000 	ldrsb.w	r3, [r3]
  406340:	4618      	mov	r0, r3
  406342:	4b27      	ldr	r3, [pc, #156]	; (4063e0 <inv_timer_configure_timebase+0x1fc>)
  406344:	4798      	blx	r3
		NVIC_ClearPendingIRQ(tm[i].irq);
  406346:	491d      	ldr	r1, [pc, #116]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  406348:	68ba      	ldr	r2, [r7, #8]
  40634a:	4613      	mov	r3, r2
  40634c:	009b      	lsls	r3, r3, #2
  40634e:	4413      	add	r3, r2
  406350:	00db      	lsls	r3, r3, #3
  406352:	440b      	add	r3, r1
  406354:	3320      	adds	r3, #32
  406356:	f993 3000 	ldrsb.w	r3, [r3]
  40635a:	4618      	mov	r0, r3
  40635c:	4b21      	ldr	r3, [pc, #132]	; (4063e4 <inv_timer_configure_timebase+0x200>)
  40635e:	4798      	blx	r3
		NVIC_SetPriority(tm[i].irq, 0); // TODO: make the priority configurable
  406360:	4916      	ldr	r1, [pc, #88]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  406362:	68ba      	ldr	r2, [r7, #8]
  406364:	4613      	mov	r3, r2
  406366:	009b      	lsls	r3, r3, #2
  406368:	4413      	add	r3, r2
  40636a:	00db      	lsls	r3, r3, #3
  40636c:	440b      	add	r3, r1
  40636e:	3320      	adds	r3, #32
  406370:	f993 3000 	ldrsb.w	r3, [r3]
  406374:	2100      	movs	r1, #0
  406376:	4618      	mov	r0, r3
  406378:	4b1b      	ldr	r3, [pc, #108]	; (4063e8 <inv_timer_configure_timebase+0x204>)
  40637a:	4798      	blx	r3
		NVIC_EnableIRQ(tm[i].irq);
  40637c:	490f      	ldr	r1, [pc, #60]	; (4063bc <inv_timer_configure_timebase+0x1d8>)
  40637e:	68ba      	ldr	r2, [r7, #8]
  406380:	4613      	mov	r3, r2
  406382:	009b      	lsls	r3, r3, #2
  406384:	4413      	add	r3, r2
  406386:	00db      	lsls	r3, r3, #3
  406388:	440b      	add	r3, r1
  40638a:	3320      	adds	r3, #32
  40638c:	f993 3000 	ldrsb.w	r3, [r3]
  406390:	4618      	mov	r0, r3
  406392:	4b16      	ldr	r3, [pc, #88]	; (4063ec <inv_timer_configure_timebase+0x208>)
  406394:	4798      	blx	r3
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  406396:	68bb      	ldr	r3, [r7, #8]
  406398:	3301      	adds	r3, #1
  40639a:	60bb      	str	r3, [r7, #8]
  40639c:	68bb      	ldr	r3, [r7, #8]
  40639e:	2b05      	cmp	r3, #5
  4063a0:	f67f af65 	bls.w	40626e <inv_timer_configure_timebase+0x8a>
	}

	return 0;
  4063a4:	2300      	movs	r3, #0
}
  4063a6:	4618      	mov	r0, r3
  4063a8:	3714      	adds	r7, #20
  4063aa:	46bd      	mov	sp, r7
  4063ac:	bd90      	pop	{r4, r7, pc}
  4063ae:	bf00      	nop
  4063b0:	40010000 	.word	0x40010000
  4063b4:	004060dd 	.word	0x004060dd
  4063b8:	20003a94 	.word	0x20003a94
  4063bc:	20002330 	.word	0x20002330
  4063c0:	004060f9 	.word	0x004060f9
  4063c4:	00408bb9 	.word	0x00408bb9
  4063c8:	00408b39 	.word	0x00408b39
  4063cc:	00408b91 	.word	0x00408b91
  4063d0:	00408f05 	.word	0x00408f05
  4063d4:	00408fc3 	.word	0x00408fc3
  4063d8:	00408f3f 	.word	0x00408f3f
  4063dc:	00408f5d 	.word	0x00408f5d
  4063e0:	00405f7d 	.word	0x00405f7d
  4063e4:	00405fb1 	.word	0x00405fb1
  4063e8:	00405fe5 	.word	0x00405fe5
  4063ec:	00405f49 	.word	0x00405f49

004063f0 <inv_timer_get_counter>:

uint64_t inv_timer_get_counter(unsigned timer_num)
{
  4063f0:	b590      	push	{r4, r7, lr}
  4063f2:	b087      	sub	sp, #28
  4063f4:	af00      	add	r7, sp, #0
  4063f6:	6078      	str	r0, [r7, #4]
	uint64_t ret_value;
	uint16_t lsb_1, msb_1, lsb_2, msb_2;
	
	/* Sanity check */
	if(timer_num >= INV_TIMER_MAX)
  4063f8:	687b      	ldr	r3, [r7, #4]
  4063fa:	2b04      	cmp	r3, #4
  4063fc:	d904      	bls.n	406408 <inv_timer_get_counter+0x18>
		return 0;
  4063fe:	f04f 0300 	mov.w	r3, #0
  406402:	f04f 0400 	mov.w	r4, #0
  406406:	e080      	b.n	40650a <inv_timer_get_counter+0x11a>
	
	if((tm[timer_num].timer_periph == TC0) && (tm[timer_num].timer_channel == 1)) {
  406408:	4942      	ldr	r1, [pc, #264]	; (406514 <inv_timer_get_counter+0x124>)
  40640a:	687a      	ldr	r2, [r7, #4]
  40640c:	4613      	mov	r3, r2
  40640e:	009b      	lsls	r3, r3, #2
  406410:	4413      	add	r3, r2
  406412:	00db      	lsls	r3, r3, #3
  406414:	440b      	add	r3, r1
  406416:	681b      	ldr	r3, [r3, #0]
  406418:	4a3f      	ldr	r2, [pc, #252]	; (406518 <inv_timer_get_counter+0x128>)
  40641a:	4293      	cmp	r3, r2
  40641c:	d15a      	bne.n	4064d4 <inv_timer_get_counter+0xe4>
  40641e:	493d      	ldr	r1, [pc, #244]	; (406514 <inv_timer_get_counter+0x124>)
  406420:	687a      	ldr	r2, [r7, #4]
  406422:	4613      	mov	r3, r2
  406424:	009b      	lsls	r3, r3, #2
  406426:	4413      	add	r3, r2
  406428:	00db      	lsls	r3, r3, #3
  40642a:	440b      	add	r3, r1
  40642c:	3304      	adds	r3, #4
  40642e:	681b      	ldr	r3, [r3, #0]
  406430:	2b01      	cmp	r3, #1
  406432:	d14f      	bne.n	4064d4 <inv_timer_get_counter+0xe4>
		lsb_1 = tc_read_cv(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  406434:	4937      	ldr	r1, [pc, #220]	; (406514 <inv_timer_get_counter+0x124>)
  406436:	687a      	ldr	r2, [r7, #4]
  406438:	4613      	mov	r3, r2
  40643a:	009b      	lsls	r3, r3, #2
  40643c:	4413      	add	r3, r2
  40643e:	00db      	lsls	r3, r3, #3
  406440:	440b      	add	r3, r1
  406442:	6818      	ldr	r0, [r3, #0]
  406444:	4933      	ldr	r1, [pc, #204]	; (406514 <inv_timer_get_counter+0x124>)
  406446:	687a      	ldr	r2, [r7, #4]
  406448:	4613      	mov	r3, r2
  40644a:	009b      	lsls	r3, r3, #2
  40644c:	4413      	add	r3, r2
  40644e:	00db      	lsls	r3, r3, #3
  406450:	440b      	add	r3, r1
  406452:	3304      	adds	r3, #4
  406454:	681b      	ldr	r3, [r3, #0]
  406456:	4619      	mov	r1, r3
  406458:	4b30      	ldr	r3, [pc, #192]	; (40651c <inv_timer_get_counter+0x12c>)
  40645a:	4798      	blx	r3
  40645c:	4603      	mov	r3, r0
  40645e:	81fb      	strh	r3, [r7, #14]
		msb_1 = tc_read_cv(tm[INV_TIMER_MAX].timer_periph, tm[INV_TIMER_MAX].timer_channel);
  406460:	4b2c      	ldr	r3, [pc, #176]	; (406514 <inv_timer_get_counter+0x124>)
  406462:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  406466:	4b2b      	ldr	r3, [pc, #172]	; (406514 <inv_timer_get_counter+0x124>)
  406468:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  40646c:	4619      	mov	r1, r3
  40646e:	4610      	mov	r0, r2
  406470:	4b2a      	ldr	r3, [pc, #168]	; (40651c <inv_timer_get_counter+0x12c>)
  406472:	4798      	blx	r3
  406474:	4603      	mov	r3, r0
  406476:	81bb      	strh	r3, [r7, #12]
		lsb_2 = tc_read_cv(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  406478:	4926      	ldr	r1, [pc, #152]	; (406514 <inv_timer_get_counter+0x124>)
  40647a:	687a      	ldr	r2, [r7, #4]
  40647c:	4613      	mov	r3, r2
  40647e:	009b      	lsls	r3, r3, #2
  406480:	4413      	add	r3, r2
  406482:	00db      	lsls	r3, r3, #3
  406484:	440b      	add	r3, r1
  406486:	6818      	ldr	r0, [r3, #0]
  406488:	4922      	ldr	r1, [pc, #136]	; (406514 <inv_timer_get_counter+0x124>)
  40648a:	687a      	ldr	r2, [r7, #4]
  40648c:	4613      	mov	r3, r2
  40648e:	009b      	lsls	r3, r3, #2
  406490:	4413      	add	r3, r2
  406492:	00db      	lsls	r3, r3, #3
  406494:	440b      	add	r3, r1
  406496:	3304      	adds	r3, #4
  406498:	681b      	ldr	r3, [r3, #0]
  40649a:	4619      	mov	r1, r3
  40649c:	4b1f      	ldr	r3, [pc, #124]	; (40651c <inv_timer_get_counter+0x12c>)
  40649e:	4798      	blx	r3
  4064a0:	4603      	mov	r3, r0
  4064a2:	817b      	strh	r3, [r7, #10]
		msb_2 = tc_read_cv(tm[INV_TIMER_MAX].timer_periph, tm[INV_TIMER_MAX].timer_channel);
  4064a4:	4b1b      	ldr	r3, [pc, #108]	; (406514 <inv_timer_get_counter+0x124>)
  4064a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  4064aa:	4b1a      	ldr	r3, [pc, #104]	; (406514 <inv_timer_get_counter+0x124>)
  4064ac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  4064b0:	4619      	mov	r1, r3
  4064b2:	4610      	mov	r0, r2
  4064b4:	4b19      	ldr	r3, [pc, #100]	; (40651c <inv_timer_get_counter+0x12c>)
  4064b6:	4798      	blx	r3
  4064b8:	4603      	mov	r3, r0
  4064ba:	813b      	strh	r3, [r7, #8]
		ret_value = (uint64_t)fusion_16bit_into_32bit(lsb_1, msb_1, lsb_2, msb_2);
  4064bc:	893b      	ldrh	r3, [r7, #8]
  4064be:	897a      	ldrh	r2, [r7, #10]
  4064c0:	89b9      	ldrh	r1, [r7, #12]
  4064c2:	89f8      	ldrh	r0, [r7, #14]
  4064c4:	4c16      	ldr	r4, [pc, #88]	; (406520 <inv_timer_get_counter+0x130>)
  4064c6:	47a0      	blx	r4
  4064c8:	4603      	mov	r3, r0
  4064ca:	f04f 0400 	mov.w	r4, #0
  4064ce:	e9c7 3404 	strd	r3, r4, [r7, #16]
  4064d2:	e018      	b.n	406506 <inv_timer_get_counter+0x116>
	} else {
		ret_value = (uint64_t)tc_read_cv(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  4064d4:	490f      	ldr	r1, [pc, #60]	; (406514 <inv_timer_get_counter+0x124>)
  4064d6:	687a      	ldr	r2, [r7, #4]
  4064d8:	4613      	mov	r3, r2
  4064da:	009b      	lsls	r3, r3, #2
  4064dc:	4413      	add	r3, r2
  4064de:	00db      	lsls	r3, r3, #3
  4064e0:	440b      	add	r3, r1
  4064e2:	6818      	ldr	r0, [r3, #0]
  4064e4:	490b      	ldr	r1, [pc, #44]	; (406514 <inv_timer_get_counter+0x124>)
  4064e6:	687a      	ldr	r2, [r7, #4]
  4064e8:	4613      	mov	r3, r2
  4064ea:	009b      	lsls	r3, r3, #2
  4064ec:	4413      	add	r3, r2
  4064ee:	00db      	lsls	r3, r3, #3
  4064f0:	440b      	add	r3, r1
  4064f2:	3304      	adds	r3, #4
  4064f4:	681b      	ldr	r3, [r3, #0]
  4064f6:	4619      	mov	r1, r3
  4064f8:	4b08      	ldr	r3, [pc, #32]	; (40651c <inv_timer_get_counter+0x12c>)
  4064fa:	4798      	blx	r3
  4064fc:	4603      	mov	r3, r0
  4064fe:	f04f 0400 	mov.w	r4, #0
  406502:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}
	
	return ret_value;
  406506:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
  40650a:	4618      	mov	r0, r3
  40650c:	4621      	mov	r1, r4
  40650e:	371c      	adds	r7, #28
  406510:	46bd      	mov	sp, r7
  406512:	bd90      	pop	{r4, r7, pc}
  406514:	20002330 	.word	0x20002330
  406518:	40010000 	.word	0x40010000
  40651c:	00408f7f 	.word	0x00408f7f
  406520:	00406115 	.word	0x00406115

00406524 <inv_timer_channel_stop>:

	return 0;
}

int inv_timer_channel_stop(unsigned timer_num, uint8_t channel)
{
  406524:	b580      	push	{r7, lr}
  406526:	b082      	sub	sp, #8
  406528:	af00      	add	r7, sp, #0
  40652a:	6078      	str	r0, [r7, #4]
  40652c:	460b      	mov	r3, r1
  40652e:	70fb      	strb	r3, [r7, #3]
	(void) channel;

	if(timer_num >= INV_TIMER_MAX)
  406530:	687b      	ldr	r3, [r7, #4]
  406532:	2b04      	cmp	r3, #4
  406534:	d902      	bls.n	40653c <inv_timer_channel_stop+0x18>
		return -1;
  406536:	f04f 33ff 	mov.w	r3, #4294967295
  40653a:	e029      	b.n	406590 <inv_timer_channel_stop+0x6c>

	tc_disable_interrupt(tm[timer_num].timer_periph, tm[timer_num].timer_channel, TC_SR_CPCS);
  40653c:	4916      	ldr	r1, [pc, #88]	; (406598 <inv_timer_channel_stop+0x74>)
  40653e:	687a      	ldr	r2, [r7, #4]
  406540:	4613      	mov	r3, r2
  406542:	009b      	lsls	r3, r3, #2
  406544:	4413      	add	r3, r2
  406546:	00db      	lsls	r3, r3, #3
  406548:	440b      	add	r3, r1
  40654a:	6818      	ldr	r0, [r3, #0]
  40654c:	4912      	ldr	r1, [pc, #72]	; (406598 <inv_timer_channel_stop+0x74>)
  40654e:	687a      	ldr	r2, [r7, #4]
  406550:	4613      	mov	r3, r2
  406552:	009b      	lsls	r3, r3, #2
  406554:	4413      	add	r3, r2
  406556:	00db      	lsls	r3, r3, #3
  406558:	440b      	add	r3, r1
  40655a:	3304      	adds	r3, #4
  40655c:	681b      	ldr	r3, [r3, #0]
  40655e:	2210      	movs	r2, #16
  406560:	4619      	mov	r1, r3
  406562:	4b0e      	ldr	r3, [pc, #56]	; (40659c <inv_timer_channel_stop+0x78>)
  406564:	4798      	blx	r3

	tm[timer_num].callback = 0;
  406566:	490c      	ldr	r1, [pc, #48]	; (406598 <inv_timer_channel_stop+0x74>)
  406568:	687a      	ldr	r2, [r7, #4]
  40656a:	4613      	mov	r3, r2
  40656c:	009b      	lsls	r3, r3, #2
  40656e:	4413      	add	r3, r2
  406570:	00db      	lsls	r3, r3, #3
  406572:	440b      	add	r3, r1
  406574:	3318      	adds	r3, #24
  406576:	2200      	movs	r2, #0
  406578:	601a      	str	r2, [r3, #0]
	tm[timer_num].context  = 0;
  40657a:	4907      	ldr	r1, [pc, #28]	; (406598 <inv_timer_channel_stop+0x74>)
  40657c:	687a      	ldr	r2, [r7, #4]
  40657e:	4613      	mov	r3, r2
  406580:	009b      	lsls	r3, r3, #2
  406582:	4413      	add	r3, r2
  406584:	00db      	lsls	r3, r3, #3
  406586:	440b      	add	r3, r1
  406588:	331c      	adds	r3, #28
  40658a:	2200      	movs	r2, #0
  40658c:	601a      	str	r2, [r3, #0]

	return 0;
  40658e:	2300      	movs	r3, #0
}
  406590:	4618      	mov	r0, r3
  406592:	3708      	adds	r7, #8
  406594:	46bd      	mov	sp, r7
  406596:	bd80      	pop	{r7, pc}
  406598:	20002330 	.word	0x20002330
  40659c:	0040900f 	.word	0x0040900f

004065a0 <timer_irq_handler>:

	return 0;
}

static void timer_irq_handler(void (*caller)(void))
{
  4065a0:	b5b0      	push	{r4, r5, r7, lr}
  4065a2:	b084      	sub	sp, #16
  4065a4:	af00      	add	r7, sp, #0
  4065a6:	6078      	str	r0, [r7, #4]
	for(int i=INV_TIMER1; i<INV_TIMER_MAX; i++) {
  4065a8:	2300      	movs	r3, #0
  4065aa:	60fb      	str	r3, [r7, #12]
  4065ac:	e07a      	b.n	4066a4 <timer_irq_handler+0x104>
		if(caller == tm[i].irq_handler) {
  4065ae:	4941      	ldr	r1, [pc, #260]	; (4066b4 <timer_irq_handler+0x114>)
  4065b0:	68fa      	ldr	r2, [r7, #12]
  4065b2:	4613      	mov	r3, r2
  4065b4:	009b      	lsls	r3, r3, #2
  4065b6:	4413      	add	r3, r2
  4065b8:	00db      	lsls	r3, r3, #3
  4065ba:	440b      	add	r3, r1
  4065bc:	3324      	adds	r3, #36	; 0x24
  4065be:	681a      	ldr	r2, [r3, #0]
  4065c0:	687b      	ldr	r3, [r7, #4]
  4065c2:	429a      	cmp	r2, r3
  4065c4:	d16b      	bne.n	40669e <timer_irq_handler+0xfe>
			if((tc_get_status(tm[i].timer_periph, tm[i].timer_channel) & TC_SR_CPCS) == TC_SR_CPCS) {
  4065c6:	493b      	ldr	r1, [pc, #236]	; (4066b4 <timer_irq_handler+0x114>)
  4065c8:	68fa      	ldr	r2, [r7, #12]
  4065ca:	4613      	mov	r3, r2
  4065cc:	009b      	lsls	r3, r3, #2
  4065ce:	4413      	add	r3, r2
  4065d0:	00db      	lsls	r3, r3, #3
  4065d2:	440b      	add	r3, r1
  4065d4:	6818      	ldr	r0, [r3, #0]
  4065d6:	4937      	ldr	r1, [pc, #220]	; (4066b4 <timer_irq_handler+0x114>)
  4065d8:	68fa      	ldr	r2, [r7, #12]
  4065da:	4613      	mov	r3, r2
  4065dc:	009b      	lsls	r3, r3, #2
  4065de:	4413      	add	r3, r2
  4065e0:	00db      	lsls	r3, r3, #3
  4065e2:	440b      	add	r3, r1
  4065e4:	3304      	adds	r3, #4
  4065e6:	681b      	ldr	r3, [r3, #0]
  4065e8:	4619      	mov	r1, r3
  4065ea:	4b33      	ldr	r3, [pc, #204]	; (4066b8 <timer_irq_handler+0x118>)
  4065ec:	4798      	blx	r3
  4065ee:	4603      	mov	r3, r0
  4065f0:	f003 0310 	and.w	r3, r3, #16
  4065f4:	2b10      	cmp	r3, #16
  4065f6:	d152      	bne.n	40669e <timer_irq_handler+0xfe>
				tc_write_rc(tm[i].timer_periph, tm[i].timer_channel, 
  4065f8:	492e      	ldr	r1, [pc, #184]	; (4066b4 <timer_irq_handler+0x114>)
  4065fa:	68fa      	ldr	r2, [r7, #12]
  4065fc:	4613      	mov	r3, r2
  4065fe:	009b      	lsls	r3, r3, #2
  406600:	4413      	add	r3, r2
  406602:	00db      	lsls	r3, r3, #3
  406604:	440b      	add	r3, r1
  406606:	681c      	ldr	r4, [r3, #0]
  406608:	492a      	ldr	r1, [pc, #168]	; (4066b4 <timer_irq_handler+0x114>)
  40660a:	68fa      	ldr	r2, [r7, #12]
  40660c:	4613      	mov	r3, r2
  40660e:	009b      	lsls	r3, r3, #2
  406610:	4413      	add	r3, r2
  406612:	00db      	lsls	r3, r3, #3
  406614:	440b      	add	r3, r1
  406616:	3304      	adds	r3, #4
  406618:	681d      	ldr	r5, [r3, #0]
						tc_read_rc(tm[i].timer_periph, tm[i].timer_channel) + tm[i].rc);
  40661a:	4926      	ldr	r1, [pc, #152]	; (4066b4 <timer_irq_handler+0x114>)
  40661c:	68fa      	ldr	r2, [r7, #12]
  40661e:	4613      	mov	r3, r2
  406620:	009b      	lsls	r3, r3, #2
  406622:	4413      	add	r3, r2
  406624:	00db      	lsls	r3, r3, #3
  406626:	440b      	add	r3, r1
  406628:	6818      	ldr	r0, [r3, #0]
  40662a:	4922      	ldr	r1, [pc, #136]	; (4066b4 <timer_irq_handler+0x114>)
  40662c:	68fa      	ldr	r2, [r7, #12]
  40662e:	4613      	mov	r3, r2
  406630:	009b      	lsls	r3, r3, #2
  406632:	4413      	add	r3, r2
  406634:	00db      	lsls	r3, r3, #3
  406636:	440b      	add	r3, r1
  406638:	3304      	adds	r3, #4
  40663a:	681b      	ldr	r3, [r3, #0]
  40663c:	4619      	mov	r1, r3
  40663e:	4b1f      	ldr	r3, [pc, #124]	; (4066bc <timer_irq_handler+0x11c>)
  406640:	4798      	blx	r3
  406642:	491c      	ldr	r1, [pc, #112]	; (4066b4 <timer_irq_handler+0x114>)
  406644:	68fa      	ldr	r2, [r7, #12]
  406646:	4613      	mov	r3, r2
  406648:	009b      	lsls	r3, r3, #2
  40664a:	4413      	add	r3, r2
  40664c:	00db      	lsls	r3, r3, #3
  40664e:	440b      	add	r3, r1
  406650:	3314      	adds	r3, #20
  406652:	681b      	ldr	r3, [r3, #0]
				tc_write_rc(tm[i].timer_periph, tm[i].timer_channel, 
  406654:	4403      	add	r3, r0
  406656:	461a      	mov	r2, r3
  406658:	4629      	mov	r1, r5
  40665a:	4620      	mov	r0, r4
  40665c:	4b18      	ldr	r3, [pc, #96]	; (4066c0 <timer_irq_handler+0x120>)
  40665e:	4798      	blx	r3
				
				if(tm[i].callback)
  406660:	4914      	ldr	r1, [pc, #80]	; (4066b4 <timer_irq_handler+0x114>)
  406662:	68fa      	ldr	r2, [r7, #12]
  406664:	4613      	mov	r3, r2
  406666:	009b      	lsls	r3, r3, #2
  406668:	4413      	add	r3, r2
  40666a:	00db      	lsls	r3, r3, #3
  40666c:	440b      	add	r3, r1
  40666e:	3318      	adds	r3, #24
  406670:	681b      	ldr	r3, [r3, #0]
  406672:	2b00      	cmp	r3, #0
  406674:	d013      	beq.n	40669e <timer_irq_handler+0xfe>
					tm[i].callback(tm[i].context);
  406676:	490f      	ldr	r1, [pc, #60]	; (4066b4 <timer_irq_handler+0x114>)
  406678:	68fa      	ldr	r2, [r7, #12]
  40667a:	4613      	mov	r3, r2
  40667c:	009b      	lsls	r3, r3, #2
  40667e:	4413      	add	r3, r2
  406680:	00db      	lsls	r3, r3, #3
  406682:	440b      	add	r3, r1
  406684:	3318      	adds	r3, #24
  406686:	6819      	ldr	r1, [r3, #0]
  406688:	480a      	ldr	r0, [pc, #40]	; (4066b4 <timer_irq_handler+0x114>)
  40668a:	68fa      	ldr	r2, [r7, #12]
  40668c:	4613      	mov	r3, r2
  40668e:	009b      	lsls	r3, r3, #2
  406690:	4413      	add	r3, r2
  406692:	00db      	lsls	r3, r3, #3
  406694:	4403      	add	r3, r0
  406696:	331c      	adds	r3, #28
  406698:	681b      	ldr	r3, [r3, #0]
  40669a:	4618      	mov	r0, r3
  40669c:	4788      	blx	r1
	for(int i=INV_TIMER1; i<INV_TIMER_MAX; i++) {
  40669e:	68fb      	ldr	r3, [r7, #12]
  4066a0:	3301      	adds	r3, #1
  4066a2:	60fb      	str	r3, [r7, #12]
  4066a4:	68fb      	ldr	r3, [r7, #12]
  4066a6:	2b04      	cmp	r3, #4
  4066a8:	dd81      	ble.n	4065ae <timer_irq_handler+0xe>
			}
		}
	}
}
  4066aa:	bf00      	nop
  4066ac:	3710      	adds	r7, #16
  4066ae:	46bd      	mov	sp, r7
  4066b0:	bdb0      	pop	{r4, r5, r7, pc}
  4066b2:	bf00      	nop
  4066b4:	20002330 	.word	0x20002330
  4066b8:	00409037 	.word	0x00409037
  4066bc:	00408fa1 	.word	0x00408fa1
  4066c0:	00408fe9 	.word	0x00408fe9

004066c4 <TC0_Handler>:

void TC0_Handler(void)
{
  4066c4:	b580      	push	{r7, lr}
  4066c6:	af00      	add	r7, sp, #0
	tc_get_status(tm[INV_TIMER_MAX].timer_periph, tm[INV_TIMER_MAX].timer_channel);
  4066c8:	4b05      	ldr	r3, [pc, #20]	; (4066e0 <TC0_Handler+0x1c>)
  4066ca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  4066ce:	4b04      	ldr	r3, [pc, #16]	; (4066e0 <TC0_Handler+0x1c>)
  4066d0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  4066d4:	4619      	mov	r1, r3
  4066d6:	4610      	mov	r0, r2
  4066d8:	4b02      	ldr	r3, [pc, #8]	; (4066e4 <TC0_Handler+0x20>)
  4066da:	4798      	blx	r3
}
  4066dc:	bf00      	nop
  4066de:	bd80      	pop	{r7, pc}
  4066e0:	20002330 	.word	0x20002330
  4066e4:	00409037 	.word	0x00409037

004066e8 <TC1_Handler>:

void TC1_Handler(void)
{
  4066e8:	b580      	push	{r7, lr}
  4066ea:	af00      	add	r7, sp, #0
	timer_irq_handler(TC1_Handler);
  4066ec:	4802      	ldr	r0, [pc, #8]	; (4066f8 <TC1_Handler+0x10>)
  4066ee:	4b03      	ldr	r3, [pc, #12]	; (4066fc <TC1_Handler+0x14>)
  4066f0:	4798      	blx	r3
}
  4066f2:	bf00      	nop
  4066f4:	bd80      	pop	{r7, pc}
  4066f6:	bf00      	nop
  4066f8:	004066e9 	.word	0x004066e9
  4066fc:	004065a1 	.word	0x004065a1

00406700 <TC2_Handler>:

void TC2_Handler(void)
{
  406700:	b580      	push	{r7, lr}
  406702:	af00      	add	r7, sp, #0
	timer_irq_handler(TC2_Handler);
  406704:	4802      	ldr	r0, [pc, #8]	; (406710 <TC2_Handler+0x10>)
  406706:	4b03      	ldr	r3, [pc, #12]	; (406714 <TC2_Handler+0x14>)
  406708:	4798      	blx	r3
}
  40670a:	bf00      	nop
  40670c:	bd80      	pop	{r7, pc}
  40670e:	bf00      	nop
  406710:	00406701 	.word	0x00406701
  406714:	004065a1 	.word	0x004065a1

00406718 <TC3_Handler>:

void TC3_Handler(void)
{
  406718:	b580      	push	{r7, lr}
  40671a:	af00      	add	r7, sp, #0
	timer_irq_handler(TC3_Handler);
  40671c:	4802      	ldr	r0, [pc, #8]	; (406728 <TC3_Handler+0x10>)
  40671e:	4b03      	ldr	r3, [pc, #12]	; (40672c <TC3_Handler+0x14>)
  406720:	4798      	blx	r3
}
  406722:	bf00      	nop
  406724:	bd80      	pop	{r7, pc}
  406726:	bf00      	nop
  406728:	00406719 	.word	0x00406719
  40672c:	004065a1 	.word	0x004065a1

00406730 <TC4_Handler>:

void TC4_Handler(void)
{
  406730:	b580      	push	{r7, lr}
  406732:	af00      	add	r7, sp, #0
	timer_irq_handler(TC4_Handler);
  406734:	4802      	ldr	r0, [pc, #8]	; (406740 <TC4_Handler+0x10>)
  406736:	4b03      	ldr	r3, [pc, #12]	; (406744 <TC4_Handler+0x14>)
  406738:	4798      	blx	r3
}
  40673a:	bf00      	nop
  40673c:	bd80      	pop	{r7, pc}
  40673e:	bf00      	nop
  406740:	00406731 	.word	0x00406731
  406744:	004065a1 	.word	0x004065a1

00406748 <TC5_Handler>:

void TC5_Handler(void)
{
  406748:	b580      	push	{r7, lr}
  40674a:	af00      	add	r7, sp, #0
	timer_irq_handler(TC5_Handler);
  40674c:	4802      	ldr	r0, [pc, #8]	; (406758 <TC5_Handler+0x10>)
  40674e:	4b03      	ldr	r3, [pc, #12]	; (40675c <TC5_Handler+0x14>)
  406750:	4798      	blx	r3
  406752:	bf00      	nop
  406754:	bd80      	pop	{r7, pc}
  406756:	bf00      	nop
  406758:	00406749 	.word	0x00406749
  40675c:	004065a1 	.word	0x004065a1

00406760 <NVIC_EnableIRQ>:
{
  406760:	b480      	push	{r7}
  406762:	b083      	sub	sp, #12
  406764:	af00      	add	r7, sp, #0
  406766:	4603      	mov	r3, r0
  406768:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40676a:	4909      	ldr	r1, [pc, #36]	; (406790 <NVIC_EnableIRQ+0x30>)
  40676c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406770:	095b      	lsrs	r3, r3, #5
  406772:	79fa      	ldrb	r2, [r7, #7]
  406774:	f002 021f 	and.w	r2, r2, #31
  406778:	2001      	movs	r0, #1
  40677a:	fa00 f202 	lsl.w	r2, r0, r2
  40677e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  406782:	bf00      	nop
  406784:	370c      	adds	r7, #12
  406786:	46bd      	mov	sp, r7
  406788:	f85d 7b04 	ldr.w	r7, [sp], #4
  40678c:	4770      	bx	lr
  40678e:	bf00      	nop
  406790:	e000e100 	.word	0xe000e100

00406794 <osc_get_rate>:
{
  406794:	b480      	push	{r7}
  406796:	b083      	sub	sp, #12
  406798:	af00      	add	r7, sp, #0
  40679a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40679c:	687b      	ldr	r3, [r7, #4]
  40679e:	2b07      	cmp	r3, #7
  4067a0:	d825      	bhi.n	4067ee <osc_get_rate+0x5a>
  4067a2:	a201      	add	r2, pc, #4	; (adr r2, 4067a8 <osc_get_rate+0x14>)
  4067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4067a8:	004067c9 	.word	0x004067c9
  4067ac:	004067cf 	.word	0x004067cf
  4067b0:	004067d5 	.word	0x004067d5
  4067b4:	004067db 	.word	0x004067db
  4067b8:	004067df 	.word	0x004067df
  4067bc:	004067e3 	.word	0x004067e3
  4067c0:	004067e7 	.word	0x004067e7
  4067c4:	004067eb 	.word	0x004067eb
		return OSC_SLCK_32K_RC_HZ;
  4067c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4067cc:	e010      	b.n	4067f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4067ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4067d2:	e00d      	b.n	4067f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4067d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4067d8:	e00a      	b.n	4067f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4067da:	4b08      	ldr	r3, [pc, #32]	; (4067fc <osc_get_rate+0x68>)
  4067dc:	e008      	b.n	4067f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  4067de:	4b08      	ldr	r3, [pc, #32]	; (406800 <osc_get_rate+0x6c>)
  4067e0:	e006      	b.n	4067f0 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  4067e2:	4b08      	ldr	r3, [pc, #32]	; (406804 <osc_get_rate+0x70>)
  4067e4:	e004      	b.n	4067f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4067e6:	2300      	movs	r3, #0
  4067e8:	e002      	b.n	4067f0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4067ea:	2300      	movs	r3, #0
  4067ec:	e000      	b.n	4067f0 <osc_get_rate+0x5c>
	return 0;
  4067ee:	2300      	movs	r3, #0
}
  4067f0:	4618      	mov	r0, r3
  4067f2:	370c      	adds	r7, #12
  4067f4:	46bd      	mov	sp, r7
  4067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067fa:	4770      	bx	lr
  4067fc:	007a1200 	.word	0x007a1200
  406800:	00f42400 	.word	0x00f42400
  406804:	016e3600 	.word	0x016e3600

00406808 <sysclk_get_main_hz>:
{
  406808:	b580      	push	{r7, lr}
  40680a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40680c:	2001      	movs	r0, #1
  40680e:	4b04      	ldr	r3, [pc, #16]	; (406820 <sysclk_get_main_hz+0x18>)
  406810:	4798      	blx	r3
  406812:	4602      	mov	r2, r0
  406814:	f640 634e 	movw	r3, #3662	; 0xe4e
  406818:	fb03 f302 	mul.w	r3, r3, r2
}
  40681c:	4618      	mov	r0, r3
  40681e:	bd80      	pop	{r7, pc}
  406820:	00406795 	.word	0x00406795

00406824 <sysclk_get_peripheral_hz>:
{
  406824:	b580      	push	{r7, lr}
  406826:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  406828:	4b02      	ldr	r3, [pc, #8]	; (406834 <sysclk_get_peripheral_hz+0x10>)
  40682a:	4798      	blx	r3
  40682c:	4603      	mov	r3, r0
}
  40682e:	4618      	mov	r0, r3
  406830:	bd80      	pop	{r7, pc}
  406832:	bf00      	nop
  406834:	00406809 	.word	0x00406809

00406838 <sysclk_enable_peripheral_clock>:
{
  406838:	b580      	push	{r7, lr}
  40683a:	b082      	sub	sp, #8
  40683c:	af00      	add	r7, sp, #0
  40683e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  406840:	6878      	ldr	r0, [r7, #4]
  406842:	4b03      	ldr	r3, [pc, #12]	; (406850 <sysclk_enable_peripheral_clock+0x18>)
  406844:	4798      	blx	r3
}
  406846:	bf00      	nop
  406848:	3708      	adds	r7, #8
  40684a:	46bd      	mov	sp, r7
  40684c:	bd80      	pop	{r7, pc}
  40684e:	bf00      	nop
  406850:	00408ab5 	.word	0x00408ab5

00406854 <ioport_disable_port>:
{
  406854:	b480      	push	{r7}
  406856:	b087      	sub	sp, #28
  406858:	af00      	add	r7, sp, #0
  40685a:	6078      	str	r0, [r7, #4]
  40685c:	6039      	str	r1, [r7, #0]
  40685e:	687b      	ldr	r3, [r7, #4]
  406860:	617b      	str	r3, [r7, #20]
  406862:	683b      	ldr	r3, [r7, #0]
  406864:	613b      	str	r3, [r7, #16]
  406866:	697b      	ldr	r3, [r7, #20]
  406868:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40686a:	68fb      	ldr	r3, [r7, #12]
  40686c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  406870:	f203 7307 	addw	r3, r3, #1799	; 0x707
  406874:	025b      	lsls	r3, r3, #9
  406876:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  406878:	693b      	ldr	r3, [r7, #16]
  40687a:	6053      	str	r3, [r2, #4]
}
  40687c:	bf00      	nop
  40687e:	371c      	adds	r7, #28
  406880:	46bd      	mov	sp, r7
  406882:	f85d 7b04 	ldr.w	r7, [sp], #4
  406886:	4770      	bx	lr

00406888 <ioport_set_port_mode>:
{
  406888:	b480      	push	{r7}
  40688a:	b08b      	sub	sp, #44	; 0x2c
  40688c:	af00      	add	r7, sp, #0
  40688e:	60f8      	str	r0, [r7, #12]
  406890:	60b9      	str	r1, [r7, #8]
  406892:	607a      	str	r2, [r7, #4]
  406894:	68fb      	ldr	r3, [r7, #12]
  406896:	627b      	str	r3, [r7, #36]	; 0x24
  406898:	68bb      	ldr	r3, [r7, #8]
  40689a:	623b      	str	r3, [r7, #32]
  40689c:	687b      	ldr	r3, [r7, #4]
  40689e:	61fb      	str	r3, [r7, #28]
  4068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4068a2:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4068a4:	69bb      	ldr	r3, [r7, #24]
  4068a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4068aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4068ae:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  4068b0:	617b      	str	r3, [r7, #20]
	if (mode & IOPORT_MODE_PULLUP) {
  4068b2:	69fb      	ldr	r3, [r7, #28]
  4068b4:	f003 0308 	and.w	r3, r3, #8
  4068b8:	2b00      	cmp	r3, #0
  4068ba:	d003      	beq.n	4068c4 <ioport_set_port_mode+0x3c>
		base->PIO_PUER = mask;
  4068bc:	697b      	ldr	r3, [r7, #20]
  4068be:	6a3a      	ldr	r2, [r7, #32]
  4068c0:	665a      	str	r2, [r3, #100]	; 0x64
  4068c2:	e002      	b.n	4068ca <ioport_set_port_mode+0x42>
		base->PIO_PUDR = mask;
  4068c4:	697b      	ldr	r3, [r7, #20]
  4068c6:	6a3a      	ldr	r2, [r7, #32]
  4068c8:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4068ca:	69fb      	ldr	r3, [r7, #28]
  4068cc:	f003 0310 	and.w	r3, r3, #16
  4068d0:	2b00      	cmp	r3, #0
  4068d2:	d004      	beq.n	4068de <ioport_set_port_mode+0x56>
		base->PIO_PPDER = mask;
  4068d4:	697b      	ldr	r3, [r7, #20]
  4068d6:	6a3a      	ldr	r2, [r7, #32]
  4068d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4068dc:	e003      	b.n	4068e6 <ioport_set_port_mode+0x5e>
		base->PIO_PPDDR = mask;
  4068de:	697b      	ldr	r3, [r7, #20]
  4068e0:	6a3a      	ldr	r2, [r7, #32]
  4068e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4068e6:	69fb      	ldr	r3, [r7, #28]
  4068e8:	f003 0320 	and.w	r3, r3, #32
  4068ec:	2b00      	cmp	r3, #0
  4068ee:	d003      	beq.n	4068f8 <ioport_set_port_mode+0x70>
		base->PIO_MDER = mask;
  4068f0:	697b      	ldr	r3, [r7, #20]
  4068f2:	6a3a      	ldr	r2, [r7, #32]
  4068f4:	651a      	str	r2, [r3, #80]	; 0x50
  4068f6:	e002      	b.n	4068fe <ioport_set_port_mode+0x76>
		base->PIO_MDDR = mask;
  4068f8:	697b      	ldr	r3, [r7, #20]
  4068fa:	6a3a      	ldr	r2, [r7, #32]
  4068fc:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4068fe:	69fb      	ldr	r3, [r7, #28]
  406900:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  406904:	2b00      	cmp	r3, #0
  406906:	d003      	beq.n	406910 <ioport_set_port_mode+0x88>
		base->PIO_IFER = mask;
  406908:	697b      	ldr	r3, [r7, #20]
  40690a:	6a3a      	ldr	r2, [r7, #32]
  40690c:	621a      	str	r2, [r3, #32]
  40690e:	e002      	b.n	406916 <ioport_set_port_mode+0x8e>
		base->PIO_IFDR = mask;
  406910:	697b      	ldr	r3, [r7, #20]
  406912:	6a3a      	ldr	r2, [r7, #32]
  406914:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  406916:	69fb      	ldr	r3, [r7, #28]
  406918:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40691c:	2b00      	cmp	r3, #0
  40691e:	d004      	beq.n	40692a <ioport_set_port_mode+0xa2>
		base->PIO_IFSCER = mask;
  406920:	697b      	ldr	r3, [r7, #20]
  406922:	6a3a      	ldr	r2, [r7, #32]
  406924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  406928:	e003      	b.n	406932 <ioport_set_port_mode+0xaa>
		base->PIO_IFSCDR = mask;
  40692a:	697b      	ldr	r3, [r7, #20]
  40692c:	6a3a      	ldr	r2, [r7, #32]
  40692e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  406932:	69fb      	ldr	r3, [r7, #28]
  406934:	f003 0301 	and.w	r3, r3, #1
  406938:	2b00      	cmp	r3, #0
  40693a:	d006      	beq.n	40694a <ioport_set_port_mode+0xc2>
		base->PIO_ABCDSR[0] |= mask;
  40693c:	697b      	ldr	r3, [r7, #20]
  40693e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  406940:	6a3b      	ldr	r3, [r7, #32]
  406942:	431a      	orrs	r2, r3
  406944:	697b      	ldr	r3, [r7, #20]
  406946:	671a      	str	r2, [r3, #112]	; 0x70
  406948:	e006      	b.n	406958 <ioport_set_port_mode+0xd0>
		base->PIO_ABCDSR[0] &= ~mask;
  40694a:	697b      	ldr	r3, [r7, #20]
  40694c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40694e:	6a3b      	ldr	r3, [r7, #32]
  406950:	43db      	mvns	r3, r3
  406952:	401a      	ands	r2, r3
  406954:	697b      	ldr	r3, [r7, #20]
  406956:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  406958:	69fb      	ldr	r3, [r7, #28]
  40695a:	f003 0302 	and.w	r3, r3, #2
  40695e:	2b00      	cmp	r3, #0
  406960:	d006      	beq.n	406970 <ioport_set_port_mode+0xe8>
		base->PIO_ABCDSR[1] |= mask;
  406962:	697b      	ldr	r3, [r7, #20]
  406964:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  406966:	6a3b      	ldr	r3, [r7, #32]
  406968:	431a      	orrs	r2, r3
  40696a:	697b      	ldr	r3, [r7, #20]
  40696c:	675a      	str	r2, [r3, #116]	; 0x74
}
  40696e:	e006      	b.n	40697e <ioport_set_port_mode+0xf6>
		base->PIO_ABCDSR[1] &= ~mask;
  406970:	697b      	ldr	r3, [r7, #20]
  406972:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  406974:	6a3b      	ldr	r3, [r7, #32]
  406976:	43db      	mvns	r3, r3
  406978:	401a      	ands	r2, r3
  40697a:	697b      	ldr	r3, [r7, #20]
  40697c:	675a      	str	r2, [r3, #116]	; 0x74
  40697e:	bf00      	nop
  406980:	372c      	adds	r7, #44	; 0x2c
  406982:	46bd      	mov	sp, r7
  406984:	f85d 7b04 	ldr.w	r7, [sp], #4
  406988:	4770      	bx	lr
	...

0040698c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40698c:	b580      	push	{r7, lr}
  40698e:	b088      	sub	sp, #32
  406990:	af00      	add	r7, sp, #0
  406992:	6078      	str	r0, [r7, #4]
  406994:	6039      	str	r1, [r7, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  406996:	683b      	ldr	r3, [r7, #0]
  406998:	681b      	ldr	r3, [r3, #0]
  40699a:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
  40699c:	683b      	ldr	r3, [r7, #0]
  40699e:	685b      	ldr	r3, [r3, #4]
  4069a0:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
  4069a2:	683b      	ldr	r3, [r7, #0]
  4069a4:	689b      	ldr	r3, [r3, #8]
  4069a6:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
  4069a8:	683b      	ldr	r3, [r7, #0]
  4069aa:	68db      	ldr	r3, [r3, #12]
  4069ac:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4069ae:	2300      	movs	r3, #0
  4069b0:	61bb      	str	r3, [r7, #24]
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4069b2:	687b      	ldr	r3, [r7, #4]
  4069b4:	4a69      	ldr	r2, [pc, #420]	; (406b5c <usart_serial_init+0x1d0>)
  4069b6:	4293      	cmp	r3, r2
  4069b8:	d115      	bne.n	4069e6 <usart_serial_init+0x5a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
  4069ba:	4869      	ldr	r0, [pc, #420]	; (406b60 <usart_serial_init+0x1d4>)
  4069bc:	4b69      	ldr	r3, [pc, #420]	; (406b64 <usart_serial_init+0x1d8>)
  4069be:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
  4069c0:	2101      	movs	r1, #1
  4069c2:	4867      	ldr	r0, [pc, #412]	; (406b60 <usart_serial_init+0x1d4>)
  4069c4:	4b68      	ldr	r3, [pc, #416]	; (406b68 <usart_serial_init+0x1dc>)
  4069c6:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART0);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4069c8:	4b68      	ldr	r3, [pc, #416]	; (406b6c <usart_serial_init+0x1e0>)
  4069ca:	4798      	blx	r3
  4069cc:	4602      	mov	r2, r0
  4069ce:	f107 0308 	add.w	r3, r7, #8
  4069d2:	4619      	mov	r1, r3
  4069d4:	6878      	ldr	r0, [r7, #4]
  4069d6:	4b66      	ldr	r3, [pc, #408]	; (406b70 <usart_serial_init+0x1e4>)
  4069d8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4069da:	6878      	ldr	r0, [r7, #4]
  4069dc:	4b65      	ldr	r3, [pc, #404]	; (406b74 <usart_serial_init+0x1e8>)
  4069de:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4069e0:	6878      	ldr	r0, [r7, #4]
  4069e2:	4b65      	ldr	r3, [pc, #404]	; (406b78 <usart_serial_init+0x1ec>)
  4069e4:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4069e6:	687b      	ldr	r3, [r7, #4]
  4069e8:	4a64      	ldr	r2, [pc, #400]	; (406b7c <usart_serial_init+0x1f0>)
  4069ea:	4293      	cmp	r3, r2
  4069ec:	d115      	bne.n	406a1a <usart_serial_init+0x8e>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
  4069ee:	4864      	ldr	r0, [pc, #400]	; (406b80 <usart_serial_init+0x1f4>)
  4069f0:	4b5c      	ldr	r3, [pc, #368]	; (406b64 <usart_serial_init+0x1d8>)
  4069f2:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
  4069f4:	2101      	movs	r1, #1
  4069f6:	4862      	ldr	r0, [pc, #392]	; (406b80 <usart_serial_init+0x1f4>)
  4069f8:	4b5b      	ldr	r3, [pc, #364]	; (406b68 <usart_serial_init+0x1dc>)
  4069fa:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4069fc:	4b5b      	ldr	r3, [pc, #364]	; (406b6c <usart_serial_init+0x1e0>)
  4069fe:	4798      	blx	r3
  406a00:	4602      	mov	r2, r0
  406a02:	f107 0308 	add.w	r3, r7, #8
  406a06:	4619      	mov	r1, r3
  406a08:	6878      	ldr	r0, [r7, #4]
  406a0a:	4b59      	ldr	r3, [pc, #356]	; (406b70 <usart_serial_init+0x1e4>)
  406a0c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406a0e:	6878      	ldr	r0, [r7, #4]
  406a10:	4b58      	ldr	r3, [pc, #352]	; (406b74 <usart_serial_init+0x1e8>)
  406a12:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406a14:	6878      	ldr	r0, [r7, #4]
  406a16:	4b58      	ldr	r3, [pc, #352]	; (406b78 <usart_serial_init+0x1ec>)
  406a18:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  406a1a:	687b      	ldr	r3, [r7, #4]
  406a1c:	4a59      	ldr	r2, [pc, #356]	; (406b84 <usart_serial_init+0x1f8>)
  406a1e:	4293      	cmp	r3, r2
  406a20:	d115      	bne.n	406a4e <usart_serial_init+0xc2>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
  406a22:	4859      	ldr	r0, [pc, #356]	; (406b88 <usart_serial_init+0x1fc>)
  406a24:	4b4f      	ldr	r3, [pc, #316]	; (406b64 <usart_serial_init+0x1d8>)
  406a26:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
  406a28:	2101      	movs	r1, #1
  406a2a:	4857      	ldr	r0, [pc, #348]	; (406b88 <usart_serial_init+0x1fc>)
  406a2c:	4b4e      	ldr	r3, [pc, #312]	; (406b68 <usart_serial_init+0x1dc>)
  406a2e:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART2);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406a30:	4b4e      	ldr	r3, [pc, #312]	; (406b6c <usart_serial_init+0x1e0>)
  406a32:	4798      	blx	r3
  406a34:	4602      	mov	r2, r0
  406a36:	f107 0308 	add.w	r3, r7, #8
  406a3a:	4619      	mov	r1, r3
  406a3c:	6878      	ldr	r0, [r7, #4]
  406a3e:	4b4c      	ldr	r3, [pc, #304]	; (406b70 <usart_serial_init+0x1e4>)
  406a40:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406a42:	6878      	ldr	r0, [r7, #4]
  406a44:	4b4b      	ldr	r3, [pc, #300]	; (406b74 <usart_serial_init+0x1e8>)
  406a46:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406a48:	6878      	ldr	r0, [r7, #4]
  406a4a:	4b4b      	ldr	r3, [pc, #300]	; (406b78 <usart_serial_init+0x1ec>)
  406a4c:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  406a4e:	687b      	ldr	r3, [r7, #4]
  406a50:	4a4e      	ldr	r2, [pc, #312]	; (406b8c <usart_serial_init+0x200>)
  406a52:	4293      	cmp	r3, r2
  406a54:	d115      	bne.n	406a82 <usart_serial_init+0xf6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM3);
  406a56:	484e      	ldr	r0, [pc, #312]	; (406b90 <usart_serial_init+0x204>)
  406a58:	4b42      	ldr	r3, [pc, #264]	; (406b64 <usart_serial_init+0x1d8>)
  406a5a:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM3, FLEXCOM_USART);
  406a5c:	2101      	movs	r1, #1
  406a5e:	484c      	ldr	r0, [pc, #304]	; (406b90 <usart_serial_init+0x204>)
  406a60:	4b41      	ldr	r3, [pc, #260]	; (406b68 <usart_serial_init+0x1dc>)
  406a62:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART3);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406a64:	4b41      	ldr	r3, [pc, #260]	; (406b6c <usart_serial_init+0x1e0>)
  406a66:	4798      	blx	r3
  406a68:	4602      	mov	r2, r0
  406a6a:	f107 0308 	add.w	r3, r7, #8
  406a6e:	4619      	mov	r1, r3
  406a70:	6878      	ldr	r0, [r7, #4]
  406a72:	4b3f      	ldr	r3, [pc, #252]	; (406b70 <usart_serial_init+0x1e4>)
  406a74:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406a76:	6878      	ldr	r0, [r7, #4]
  406a78:	4b3e      	ldr	r3, [pc, #248]	; (406b74 <usart_serial_init+0x1e8>)
  406a7a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406a7c:	6878      	ldr	r0, [r7, #4]
  406a7e:	4b3e      	ldr	r3, [pc, #248]	; (406b78 <usart_serial_init+0x1ec>)
  406a80:	4798      	blx	r3
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  406a82:	687b      	ldr	r3, [r7, #4]
  406a84:	4a43      	ldr	r2, [pc, #268]	; (406b94 <usart_serial_init+0x208>)
  406a86:	4293      	cmp	r3, r2
  406a88:	d115      	bne.n	406ab6 <usart_serial_init+0x12a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM4);
  406a8a:	4843      	ldr	r0, [pc, #268]	; (406b98 <usart_serial_init+0x20c>)
  406a8c:	4b35      	ldr	r3, [pc, #212]	; (406b64 <usart_serial_init+0x1d8>)
  406a8e:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM4, FLEXCOM_USART);
  406a90:	2101      	movs	r1, #1
  406a92:	4841      	ldr	r0, [pc, #260]	; (406b98 <usart_serial_init+0x20c>)
  406a94:	4b34      	ldr	r3, [pc, #208]	; (406b68 <usart_serial_init+0x1dc>)
  406a96:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART4);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406a98:	4b34      	ldr	r3, [pc, #208]	; (406b6c <usart_serial_init+0x1e0>)
  406a9a:	4798      	blx	r3
  406a9c:	4602      	mov	r2, r0
  406a9e:	f107 0308 	add.w	r3, r7, #8
  406aa2:	4619      	mov	r1, r3
  406aa4:	6878      	ldr	r0, [r7, #4]
  406aa6:	4b32      	ldr	r3, [pc, #200]	; (406b70 <usart_serial_init+0x1e4>)
  406aa8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406aaa:	6878      	ldr	r0, [r7, #4]
  406aac:	4b31      	ldr	r3, [pc, #196]	; (406b74 <usart_serial_init+0x1e8>)
  406aae:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406ab0:	6878      	ldr	r0, [r7, #4]
  406ab2:	4b31      	ldr	r3, [pc, #196]	; (406b78 <usart_serial_init+0x1ec>)
  406ab4:	4798      	blx	r3
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  406ab6:	687b      	ldr	r3, [r7, #4]
  406ab8:	4a38      	ldr	r2, [pc, #224]	; (406b9c <usart_serial_init+0x210>)
  406aba:	4293      	cmp	r3, r2
  406abc:	d115      	bne.n	406aea <usart_serial_init+0x15e>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM5);
  406abe:	4838      	ldr	r0, [pc, #224]	; (406ba0 <usart_serial_init+0x214>)
  406ac0:	4b28      	ldr	r3, [pc, #160]	; (406b64 <usart_serial_init+0x1d8>)
  406ac2:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM5, FLEXCOM_USART);
  406ac4:	2101      	movs	r1, #1
  406ac6:	4836      	ldr	r0, [pc, #216]	; (406ba0 <usart_serial_init+0x214>)
  406ac8:	4b27      	ldr	r3, [pc, #156]	; (406b68 <usart_serial_init+0x1dc>)
  406aca:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART5);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406acc:	4b27      	ldr	r3, [pc, #156]	; (406b6c <usart_serial_init+0x1e0>)
  406ace:	4798      	blx	r3
  406ad0:	4602      	mov	r2, r0
  406ad2:	f107 0308 	add.w	r3, r7, #8
  406ad6:	4619      	mov	r1, r3
  406ad8:	6878      	ldr	r0, [r7, #4]
  406ada:	4b25      	ldr	r3, [pc, #148]	; (406b70 <usart_serial_init+0x1e4>)
  406adc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406ade:	6878      	ldr	r0, [r7, #4]
  406ae0:	4b24      	ldr	r3, [pc, #144]	; (406b74 <usart_serial_init+0x1e8>)
  406ae2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406ae4:	6878      	ldr	r0, [r7, #4]
  406ae6:	4b24      	ldr	r3, [pc, #144]	; (406b78 <usart_serial_init+0x1ec>)
  406ae8:	4798      	blx	r3
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  406aea:	687b      	ldr	r3, [r7, #4]
  406aec:	4a2d      	ldr	r2, [pc, #180]	; (406ba4 <usart_serial_init+0x218>)
  406aee:	4293      	cmp	r3, r2
  406af0:	d115      	bne.n	406b1e <usart_serial_init+0x192>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM6);
  406af2:	482d      	ldr	r0, [pc, #180]	; (406ba8 <usart_serial_init+0x21c>)
  406af4:	4b1b      	ldr	r3, [pc, #108]	; (406b64 <usart_serial_init+0x1d8>)
  406af6:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM6, FLEXCOM_USART);
  406af8:	2101      	movs	r1, #1
  406afa:	482b      	ldr	r0, [pc, #172]	; (406ba8 <usart_serial_init+0x21c>)
  406afc:	4b1a      	ldr	r3, [pc, #104]	; (406b68 <usart_serial_init+0x1dc>)
  406afe:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART6);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406b00:	4b1a      	ldr	r3, [pc, #104]	; (406b6c <usart_serial_init+0x1e0>)
  406b02:	4798      	blx	r3
  406b04:	4602      	mov	r2, r0
  406b06:	f107 0308 	add.w	r3, r7, #8
  406b0a:	4619      	mov	r1, r3
  406b0c:	6878      	ldr	r0, [r7, #4]
  406b0e:	4b18      	ldr	r3, [pc, #96]	; (406b70 <usart_serial_init+0x1e4>)
  406b10:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406b12:	6878      	ldr	r0, [r7, #4]
  406b14:	4b17      	ldr	r3, [pc, #92]	; (406b74 <usart_serial_init+0x1e8>)
  406b16:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406b18:	6878      	ldr	r0, [r7, #4]
  406b1a:	4b17      	ldr	r3, [pc, #92]	; (406b78 <usart_serial_init+0x1ec>)
  406b1c:	4798      	blx	r3
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  406b1e:	687b      	ldr	r3, [r7, #4]
  406b20:	4a22      	ldr	r2, [pc, #136]	; (406bac <usart_serial_init+0x220>)
  406b22:	4293      	cmp	r3, r2
  406b24:	d115      	bne.n	406b52 <usart_serial_init+0x1c6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM7);
  406b26:	4822      	ldr	r0, [pc, #136]	; (406bb0 <usart_serial_init+0x224>)
  406b28:	4b0e      	ldr	r3, [pc, #56]	; (406b64 <usart_serial_init+0x1d8>)
  406b2a:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM7, FLEXCOM_USART);
  406b2c:	2101      	movs	r1, #1
  406b2e:	4820      	ldr	r0, [pc, #128]	; (406bb0 <usart_serial_init+0x224>)
  406b30:	4b0d      	ldr	r3, [pc, #52]	; (406b68 <usart_serial_init+0x1dc>)
  406b32:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART7);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  406b34:	4b0d      	ldr	r3, [pc, #52]	; (406b6c <usart_serial_init+0x1e0>)
  406b36:	4798      	blx	r3
  406b38:	4602      	mov	r2, r0
  406b3a:	f107 0308 	add.w	r3, r7, #8
  406b3e:	4619      	mov	r1, r3
  406b40:	6878      	ldr	r0, [r7, #4]
  406b42:	4b0b      	ldr	r3, [pc, #44]	; (406b70 <usart_serial_init+0x1e4>)
  406b44:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  406b46:	6878      	ldr	r0, [r7, #4]
  406b48:	4b0a      	ldr	r3, [pc, #40]	; (406b74 <usart_serial_init+0x1e8>)
  406b4a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  406b4c:	6878      	ldr	r0, [r7, #4]
  406b4e:	4b0a      	ldr	r3, [pc, #40]	; (406b78 <usart_serial_init+0x1ec>)
  406b50:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  406b52:	bf00      	nop
  406b54:	3720      	adds	r7, #32
  406b56:	46bd      	mov	sp, r7
  406b58:	bd80      	pop	{r7, pc}
  406b5a:	bf00      	nop
  406b5c:	4000c200 	.word	0x4000c200
  406b60:	4000c000 	.word	0x4000c000
  406b64:	00407f69 	.word	0x00407f69
  406b68:	004080d1 	.word	0x004080d1
  406b6c:	00406825 	.word	0x00406825
  406b70:	00409519 	.word	0x00409519
  406b74:	0040959d 	.word	0x0040959d
  406b78:	004095d1 	.word	0x004095d1
  406b7c:	40020200 	.word	0x40020200
  406b80:	40020000 	.word	0x40020000
  406b84:	40024200 	.word	0x40024200
  406b88:	40024000 	.word	0x40024000
  406b8c:	40018200 	.word	0x40018200
  406b90:	40018000 	.word	0x40018000
  406b94:	4001c200 	.word	0x4001c200
  406b98:	4001c000 	.word	0x4001c000
  406b9c:	40008200 	.word	0x40008200
  406ba0:	40008000 	.word	0x40008000
  406ba4:	40040200 	.word	0x40040200
  406ba8:	40040000 	.word	0x40040000
  406bac:	40034200 	.word	0x40034200
  406bb0:	40034000 	.word	0x40034000

00406bb4 <inv_uart_init>:
static int uart_dma_rx(inv_uart_num_t uart);


/****************************** Public Functions ******************************/
int inv_uart_init(inv_uart_init_struct_t * uart_init)
{
  406bb4:	b5b0      	push	{r4, r5, r7, lr}
  406bb6:	b088      	sub	sp, #32
  406bb8:	af00      	add	r7, sp, #0
  406bba:	6078      	str	r0, [r7, #4]
	uint32_t i;
	usart_serial_options_t USART_InitStructure;
	inv_uart_num_t uart = uart_init->uart_num;
  406bbc:	687b      	ldr	r3, [r7, #4]
  406bbe:	781b      	ldrb	r3, [r3, #0]
  406bc0:	76fb      	strb	r3, [r7, #27]
	
	/* Don't execute this function if UART is not under reset state */
	if( (um[uart].uart_tx_state != INV_UART_STATE_RESET) ||
  406bc2:	7efb      	ldrb	r3, [r7, #27]
  406bc4:	4aa1      	ldr	r2, [pc, #644]	; (406e4c <inv_uart_init+0x298>)
  406bc6:	215c      	movs	r1, #92	; 0x5c
  406bc8:	fb01 f303 	mul.w	r3, r1, r3
  406bcc:	4413      	add	r3, r2
  406bce:	3340      	adds	r3, #64	; 0x40
  406bd0:	781b      	ldrb	r3, [r3, #0]
  406bd2:	b2db      	uxtb	r3, r3
  406bd4:	2b00      	cmp	r3, #0
  406bd6:	d109      	bne.n	406bec <inv_uart_init+0x38>
		(um[uart].uart_rx_state != INV_UART_STATE_RESET))
  406bd8:	7efb      	ldrb	r3, [r7, #27]
  406bda:	4a9c      	ldr	r2, [pc, #624]	; (406e4c <inv_uart_init+0x298>)
  406bdc:	215c      	movs	r1, #92	; 0x5c
  406bde:	fb01 f303 	mul.w	r3, r1, r3
  406be2:	4413      	add	r3, r2
  406be4:	3341      	adds	r3, #65	; 0x41
  406be6:	781b      	ldrb	r3, [r3, #0]
	if( (um[uart].uart_tx_state != INV_UART_STATE_RESET) ||
  406be8:	2b00      	cmp	r3, #0
  406bea:	d001      	beq.n	406bf0 <inv_uart_init+0x3c>
		return INV_UART_ERROR_SUCCES;
  406bec:	2300      	movs	r3, #0
  406bee:	e129      	b.n	406e44 <inv_uart_init+0x290>
	
	/* Check memory is passed in parameter for tx and rx  */
	if ((uart_init->tx_size == 0) && (uart_init->rx_size == 0))
  406bf0:	687b      	ldr	r3, [r7, #4]
  406bf2:	899b      	ldrh	r3, [r3, #12]
  406bf4:	2b00      	cmp	r3, #0
  406bf6:	d106      	bne.n	406c06 <inv_uart_init+0x52>
  406bf8:	687b      	ldr	r3, [r7, #4]
  406bfa:	89db      	ldrh	r3, [r3, #14]
  406bfc:	2b00      	cmp	r3, #0
  406bfe:	d102      	bne.n	406c06 <inv_uart_init+0x52>
			return INV_UART_ERROR_BAD_ARG;
  406c00:	f06f 0303 	mvn.w	r3, #3
  406c04:	e11e      	b.n	406e44 <inv_uart_init+0x290>

	/* init structure */
	um[uart].uart_pdc = usart_get_pdc_base(um[uart].uart_ip);
  406c06:	7efc      	ldrb	r4, [r7, #27]
  406c08:	7efb      	ldrb	r3, [r7, #27]
  406c0a:	4a90      	ldr	r2, [pc, #576]	; (406e4c <inv_uart_init+0x298>)
  406c0c:	215c      	movs	r1, #92	; 0x5c
  406c0e:	fb01 f303 	mul.w	r3, r1, r3
  406c12:	4413      	add	r3, r2
  406c14:	681b      	ldr	r3, [r3, #0]
  406c16:	4618      	mov	r0, r3
  406c18:	4b8d      	ldr	r3, [pc, #564]	; (406e50 <inv_uart_init+0x29c>)
  406c1a:	4798      	blx	r3
  406c1c:	4601      	mov	r1, r0
  406c1e:	4a8b      	ldr	r2, [pc, #556]	; (406e4c <inv_uart_init+0x298>)
  406c20:	235c      	movs	r3, #92	; 0x5c
  406c22:	fb03 f304 	mul.w	r3, r3, r4
  406c26:	4413      	add	r3, r2
  406c28:	3304      	adds	r3, #4
  406c2a:	6019      	str	r1, [r3, #0]
	um[uart].uart_tx_state = INV_UART_STATE_IDLE;	
  406c2c:	7efb      	ldrb	r3, [r7, #27]
  406c2e:	4a87      	ldr	r2, [pc, #540]	; (406e4c <inv_uart_init+0x298>)
  406c30:	215c      	movs	r1, #92	; 0x5c
  406c32:	fb01 f303 	mul.w	r3, r1, r3
  406c36:	4413      	add	r3, r2
  406c38:	3340      	adds	r3, #64	; 0x40
  406c3a:	2201      	movs	r2, #1
  406c3c:	701a      	strb	r2, [r3, #0]
	um[uart].uart_rx_state = INV_UART_STATE_IDLE;
  406c3e:	7efb      	ldrb	r3, [r7, #27]
  406c40:	4a82      	ldr	r2, [pc, #520]	; (406e4c <inv_uart_init+0x298>)
  406c42:	215c      	movs	r1, #92	; 0x5c
  406c44:	fb01 f303 	mul.w	r3, r1, r3
  406c48:	4413      	add	r3, r2
  406c4a:	3341      	adds	r3, #65	; 0x41
  406c4c:	2201      	movs	r2, #1
  406c4e:	701a      	strb	r2, [r3, #0]
	um[uart].uart_rx_buffer = uart_init->rx_buffer;
  406c50:	7efb      	ldrb	r3, [r7, #27]
  406c52:	687a      	ldr	r2, [r7, #4]
  406c54:	6892      	ldr	r2, [r2, #8]
  406c56:	497d      	ldr	r1, [pc, #500]	; (406e4c <inv_uart_init+0x298>)
  406c58:	205c      	movs	r0, #92	; 0x5c
  406c5a:	fb00 f303 	mul.w	r3, r0, r3
  406c5e:	440b      	add	r3, r1
  406c60:	3344      	adds	r3, #68	; 0x44
  406c62:	601a      	str	r2, [r3, #0]
	um[uart].uart_tx_buffer = uart_init->tx_buffer;
  406c64:	7efb      	ldrb	r3, [r7, #27]
  406c66:	687a      	ldr	r2, [r7, #4]
  406c68:	6852      	ldr	r2, [r2, #4]
  406c6a:	4978      	ldr	r1, [pc, #480]	; (406e4c <inv_uart_init+0x298>)
  406c6c:	205c      	movs	r0, #92	; 0x5c
  406c6e:	fb00 f303 	mul.w	r3, r0, r3
  406c72:	440b      	add	r3, r1
  406c74:	3348      	adds	r3, #72	; 0x48
  406c76:	601a      	str	r2, [r3, #0]
	um[uart].uart_rx_buffer_size = uart_init->rx_size;
  406c78:	7efb      	ldrb	r3, [r7, #27]
  406c7a:	687a      	ldr	r2, [r7, #4]
  406c7c:	89d0      	ldrh	r0, [r2, #14]
  406c7e:	4a73      	ldr	r2, [pc, #460]	; (406e4c <inv_uart_init+0x298>)
  406c80:	215c      	movs	r1, #92	; 0x5c
  406c82:	fb01 f303 	mul.w	r3, r1, r3
  406c86:	4413      	add	r3, r2
  406c88:	334c      	adds	r3, #76	; 0x4c
  406c8a:	4602      	mov	r2, r0
  406c8c:	801a      	strh	r2, [r3, #0]
	um[uart].uart_tx_buffer_size = uart_init->tx_size;
  406c8e:	7efb      	ldrb	r3, [r7, #27]
  406c90:	687a      	ldr	r2, [r7, #4]
  406c92:	8990      	ldrh	r0, [r2, #12]
  406c94:	4a6d      	ldr	r2, [pc, #436]	; (406e4c <inv_uart_init+0x298>)
  406c96:	215c      	movs	r1, #92	; 0x5c
  406c98:	fb01 f303 	mul.w	r3, r1, r3
  406c9c:	4413      	add	r3, r2
  406c9e:	334e      	adds	r3, #78	; 0x4e
  406ca0:	4602      	mov	r2, r0
  406ca2:	801a      	strh	r2, [r3, #0]
	um[uart].tx_done_cb = uart_init->tx_done_cb;
  406ca4:	7efb      	ldrb	r3, [r7, #27]
  406ca6:	687a      	ldr	r2, [r7, #4]
  406ca8:	6992      	ldr	r2, [r2, #24]
  406caa:	4968      	ldr	r1, [pc, #416]	; (406e4c <inv_uart_init+0x298>)
  406cac:	205c      	movs	r0, #92	; 0x5c
  406cae:	fb00 f303 	mul.w	r3, r0, r3
  406cb2:	440b      	add	r3, r1
  406cb4:	3354      	adds	r3, #84	; 0x54
  406cb6:	601a      	str	r2, [r3, #0]
	um[uart].tx_context = uart_init->tx_context;
  406cb8:	7efb      	ldrb	r3, [r7, #27]
  406cba:	687a      	ldr	r2, [r7, #4]
  406cbc:	69d2      	ldr	r2, [r2, #28]
  406cbe:	4963      	ldr	r1, [pc, #396]	; (406e4c <inv_uart_init+0x298>)
  406cc0:	205c      	movs	r0, #92	; 0x5c
  406cc2:	fb00 f303 	mul.w	r3, r0, r3
  406cc6:	440b      	add	r3, r1
  406cc8:	3358      	adds	r3, #88	; 0x58
  406cca:	601a      	str	r2, [r3, #0]
	
	/* Configure GPIO pins */
	for(i=0 ; i < (uint32_t) (sizeof(um[uart].uart_gpio)/sizeof(um[uart].uart_gpio[0])) ; i++) {
  406ccc:	2300      	movs	r3, #0
  406cce:	61fb      	str	r3, [r7, #28]
  406cd0:	e062      	b.n	406d98 <inv_uart_init+0x1e4>
		/* gpio port )= 0xffffffff means ignore this pin */
		if(um[uart].uart_gpio[i].port != 0xffffffff) {
  406cd2:	7ef9      	ldrb	r1, [r7, #27]
  406cd4:	485d      	ldr	r0, [pc, #372]	; (406e4c <inv_uart_init+0x298>)
  406cd6:	69fa      	ldr	r2, [r7, #28]
  406cd8:	4613      	mov	r3, r2
  406cda:	005b      	lsls	r3, r3, #1
  406cdc:	4413      	add	r3, r2
  406cde:	009b      	lsls	r3, r3, #2
  406ce0:	225c      	movs	r2, #92	; 0x5c
  406ce2:	fb02 f201 	mul.w	r2, r2, r1
  406ce6:	4413      	add	r3, r2
  406ce8:	4403      	add	r3, r0
  406cea:	3310      	adds	r3, #16
  406cec:	681b      	ldr	r3, [r3, #0]
  406cee:	f1b3 3fff 	cmp.w	r3, #4294967295
  406cf2:	d04e      	beq.n	406d92 <inv_uart_init+0x1de>
			ioport_set_port_mode(um[uart].uart_gpio[i].port,
  406cf4:	7ef9      	ldrb	r1, [r7, #27]
  406cf6:	4855      	ldr	r0, [pc, #340]	; (406e4c <inv_uart_init+0x298>)
  406cf8:	69fa      	ldr	r2, [r7, #28]
  406cfa:	4613      	mov	r3, r2
  406cfc:	005b      	lsls	r3, r3, #1
  406cfe:	4413      	add	r3, r2
  406d00:	009b      	lsls	r3, r3, #2
  406d02:	225c      	movs	r2, #92	; 0x5c
  406d04:	fb02 f201 	mul.w	r2, r2, r1
  406d08:	4413      	add	r3, r2
  406d0a:	4403      	add	r3, r0
  406d0c:	3310      	adds	r3, #16
  406d0e:	681c      	ldr	r4, [r3, #0]
  406d10:	7ef9      	ldrb	r1, [r7, #27]
  406d12:	484e      	ldr	r0, [pc, #312]	; (406e4c <inv_uart_init+0x298>)
  406d14:	69fa      	ldr	r2, [r7, #28]
  406d16:	4613      	mov	r3, r2
  406d18:	005b      	lsls	r3, r3, #1
  406d1a:	4413      	add	r3, r2
  406d1c:	009b      	lsls	r3, r3, #2
  406d1e:	225c      	movs	r2, #92	; 0x5c
  406d20:	fb02 f201 	mul.w	r2, r2, r1
  406d24:	4413      	add	r3, r2
  406d26:	4403      	add	r3, r0
  406d28:	3314      	adds	r3, #20
  406d2a:	681d      	ldr	r5, [r3, #0]
  406d2c:	7ef9      	ldrb	r1, [r7, #27]
  406d2e:	4847      	ldr	r0, [pc, #284]	; (406e4c <inv_uart_init+0x298>)
  406d30:	69fa      	ldr	r2, [r7, #28]
  406d32:	4613      	mov	r3, r2
  406d34:	005b      	lsls	r3, r3, #1
  406d36:	4413      	add	r3, r2
  406d38:	009b      	lsls	r3, r3, #2
  406d3a:	225c      	movs	r2, #92	; 0x5c
  406d3c:	fb02 f201 	mul.w	r2, r2, r1
  406d40:	4413      	add	r3, r2
  406d42:	4403      	add	r3, r0
  406d44:	3318      	adds	r3, #24
  406d46:	681b      	ldr	r3, [r3, #0]
  406d48:	461a      	mov	r2, r3
  406d4a:	4629      	mov	r1, r5
  406d4c:	4620      	mov	r0, r4
  406d4e:	4b41      	ldr	r3, [pc, #260]	; (406e54 <inv_uart_init+0x2a0>)
  406d50:	4798      	blx	r3
								 um[uart].uart_gpio[i].pin_id,
								 um[uart].uart_gpio[i].mode_mux);
			ioport_disable_port(um[uart].uart_gpio[i].port,
  406d52:	7ef9      	ldrb	r1, [r7, #27]
  406d54:	483d      	ldr	r0, [pc, #244]	; (406e4c <inv_uart_init+0x298>)
  406d56:	69fa      	ldr	r2, [r7, #28]
  406d58:	4613      	mov	r3, r2
  406d5a:	005b      	lsls	r3, r3, #1
  406d5c:	4413      	add	r3, r2
  406d5e:	009b      	lsls	r3, r3, #2
  406d60:	225c      	movs	r2, #92	; 0x5c
  406d62:	fb02 f201 	mul.w	r2, r2, r1
  406d66:	4413      	add	r3, r2
  406d68:	4403      	add	r3, r0
  406d6a:	3310      	adds	r3, #16
  406d6c:	681c      	ldr	r4, [r3, #0]
  406d6e:	7ef9      	ldrb	r1, [r7, #27]
  406d70:	4836      	ldr	r0, [pc, #216]	; (406e4c <inv_uart_init+0x298>)
  406d72:	69fa      	ldr	r2, [r7, #28]
  406d74:	4613      	mov	r3, r2
  406d76:	005b      	lsls	r3, r3, #1
  406d78:	4413      	add	r3, r2
  406d7a:	009b      	lsls	r3, r3, #2
  406d7c:	225c      	movs	r2, #92	; 0x5c
  406d7e:	fb02 f201 	mul.w	r2, r2, r1
  406d82:	4413      	add	r3, r2
  406d84:	4403      	add	r3, r0
  406d86:	3314      	adds	r3, #20
  406d88:	681b      	ldr	r3, [r3, #0]
  406d8a:	4619      	mov	r1, r3
  406d8c:	4620      	mov	r0, r4
  406d8e:	4b32      	ldr	r3, [pc, #200]	; (406e58 <inv_uart_init+0x2a4>)
  406d90:	4798      	blx	r3
	for(i=0 ; i < (uint32_t) (sizeof(um[uart].uart_gpio)/sizeof(um[uart].uart_gpio[0])) ; i++) {
  406d92:	69fb      	ldr	r3, [r7, #28]
  406d94:	3301      	adds	r3, #1
  406d96:	61fb      	str	r3, [r7, #28]
  406d98:	69fb      	ldr	r3, [r7, #28]
  406d9a:	2b03      	cmp	r3, #3
  406d9c:	d999      	bls.n	406cd2 <inv_uart_init+0x11e>
	 *  - 8bits
	 *  - 1Stop
	 *  - No parity
	 *  - baudrate from input parameter
	 */
	USART_InitStructure.baudrate = uart_init->baudrate;
  406d9e:	687b      	ldr	r3, [r7, #4]
  406da0:	691b      	ldr	r3, [r3, #16]
  406da2:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.charlength = US_MR_CHRL_8_BIT;
  406da4:	23c0      	movs	r3, #192	; 0xc0
  406da6:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.stopbits = US_MR_NBSTOP_1_BIT;
  406da8:	2300      	movs	r3, #0
  406daa:	617b      	str	r3, [r7, #20]
	USART_InitStructure.paritytype = US_MR_PAR_NO;
  406dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406db0:	613b      	str	r3, [r7, #16]

	
	sysclk_enable_peripheral_clock(um[uart].uart_periph_id);
  406db2:	7efb      	ldrb	r3, [r7, #27]
  406db4:	4a25      	ldr	r2, [pc, #148]	; (406e4c <inv_uart_init+0x298>)
  406db6:	215c      	movs	r1, #92	; 0x5c
  406db8:	fb01 f303 	mul.w	r3, r1, r3
  406dbc:	4413      	add	r3, r2
  406dbe:	330c      	adds	r3, #12
  406dc0:	681b      	ldr	r3, [r3, #0]
  406dc2:	4618      	mov	r0, r3
  406dc4:	4b25      	ldr	r3, [pc, #148]	; (406e5c <inv_uart_init+0x2a8>)
  406dc6:	4798      	blx	r3
	
	/* initialize and enable UART */
	usart_serial_init(um[uart].uart_ip, &USART_InitStructure);
  406dc8:	7efb      	ldrb	r3, [r7, #27]
  406dca:	4a20      	ldr	r2, [pc, #128]	; (406e4c <inv_uart_init+0x298>)
  406dcc:	215c      	movs	r1, #92	; 0x5c
  406dce:	fb01 f303 	mul.w	r3, r1, r3
  406dd2:	4413      	add	r3, r2
  406dd4:	681b      	ldr	r3, [r3, #0]
  406dd6:	f107 0208 	add.w	r2, r7, #8
  406dda:	4611      	mov	r1, r2
  406ddc:	4618      	mov	r0, r3
  406dde:	4b20      	ldr	r3, [pc, #128]	; (406e60 <inv_uart_init+0x2ac>)
  406de0:	4798      	blx	r3
	
	/*
	 * Enable hw handshake if required.
	 * Note: Flow control is only supported on INV_UART_SENSOR_CTRL
	 */
	if(uart_init->flow_ctrl != INV_UART_FLOW_CONTROL_NONE) {
  406de2:	687b      	ldr	r3, [r7, #4]
  406de4:	7d1b      	ldrb	r3, [r3, #20]
  406de6:	2b00      	cmp	r3, #0
  406de8:	d010      	beq.n	406e0c <inv_uart_init+0x258>
		if(uart == INV_UART_SENSOR_CTRL)
  406dea:	7efb      	ldrb	r3, [r7, #27]
  406dec:	2b00      	cmp	r3, #0
  406dee:	d10a      	bne.n	406e06 <inv_uart_init+0x252>
			um[INV_UART_SENSOR_CTRL].uart_ip->US_MR = (um[INV_UART_SENSOR_CTRL].uart_ip->US_MR & ~US_MR_USART_MODE_Msk) |
  406df0:	4b16      	ldr	r3, [pc, #88]	; (406e4c <inv_uart_init+0x298>)
  406df2:	681b      	ldr	r3, [r3, #0]
  406df4:	4a15      	ldr	r2, [pc, #84]	; (406e4c <inv_uart_init+0x298>)
  406df6:	6812      	ldr	r2, [r2, #0]
  406df8:	6852      	ldr	r2, [r2, #4]
  406dfa:	f022 020f 	bic.w	r2, r2, #15
  406dfe:	f042 0202 	orr.w	r2, r2, #2
  406e02:	605a      	str	r2, [r3, #4]
  406e04:	e002      	b.n	406e0c <inv_uart_init+0x258>
										US_MR_USART_MODE_HW_HANDSHAKING;
		else
			return INV_UART_ERROR_BAD_ARG;
  406e06:	f06f 0303 	mvn.w	r3, #3
  406e0a:	e01b      	b.n	406e44 <inv_uart_init+0x290>
	
	/* 
	 * UART TX specific configuration:
	 *  - Enable UART interrupt at NVIC level
	 */
	NVIC_EnableIRQ((IRQn_Type)um[uart].uart_it_nb);
  406e0c:	7efb      	ldrb	r3, [r7, #27]
  406e0e:	4a0f      	ldr	r2, [pc, #60]	; (406e4c <inv_uart_init+0x298>)
  406e10:	215c      	movs	r1, #92	; 0x5c
  406e12:	fb01 f303 	mul.w	r3, r1, r3
  406e16:	4413      	add	r3, r2
  406e18:	3308      	adds	r3, #8
  406e1a:	681b      	ldr	r3, [r3, #0]
  406e1c:	b25b      	sxtb	r3, r3
  406e1e:	4618      	mov	r0, r3
  406e20:	4b10      	ldr	r3, [pc, #64]	; (406e64 <inv_uart_init+0x2b0>)
  406e22:	4798      	blx	r3
	/* 
	 * UART RX specific configuration:
	 *  - Set circular buffer mode for RX
	 *  - No interrupt
	 */
	um[uart].uart_pdc->PERIPH_PTCR = PERIPH_PTCR_RXCBEN;
  406e24:	7efb      	ldrb	r3, [r7, #27]
  406e26:	4a09      	ldr	r2, [pc, #36]	; (406e4c <inv_uart_init+0x298>)
  406e28:	215c      	movs	r1, #92	; 0x5c
  406e2a:	fb01 f303 	mul.w	r3, r1, r3
  406e2e:	4413      	add	r3, r2
  406e30:	3304      	adds	r3, #4
  406e32:	681b      	ldr	r3, [r3, #0]
  406e34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  406e38:	621a      	str	r2, [r3, #32]
	
	/* Trigger a DMA RX. 
	 * Note: DMA is in circular mode. refer to the device datasheet for further details.
	 */
	return uart_dma_rx(uart);
  406e3a:	7efb      	ldrb	r3, [r7, #27]
  406e3c:	4618      	mov	r0, r3
  406e3e:	4b0a      	ldr	r3, [pc, #40]	; (406e68 <inv_uart_init+0x2b4>)
  406e40:	4798      	blx	r3
  406e42:	4603      	mov	r3, r0
}
  406e44:	4618      	mov	r0, r3
  406e46:	3720      	adds	r7, #32
  406e48:	46bd      	mov	sp, r7
  406e4a:	bdb0      	pop	{r4, r5, r7, pc}
  406e4c:	20002420 	.word	0x20002420
  406e50:	0040968d 	.word	0x0040968d
  406e54:	00406889 	.word	0x00406889
  406e58:	00406855 	.word	0x00406855
  406e5c:	00406839 	.word	0x00406839
  406e60:	0040698d 	.word	0x0040698d
  406e64:	00406761 	.word	0x00406761
  406e68:	004071ad 	.word	0x004071ad

00406e6c <inv_uart_puts>:
	
	return inv_uart_tx_txfer(uart, &txfer);
}

int inv_uart_puts(inv_uart_num_t uart, const char * s, unsigned short l)
{
  406e6c:	b580      	push	{r7, lr}
  406e6e:	b084      	sub	sp, #16
  406e70:	af00      	add	r7, sp, #0
  406e72:	4603      	mov	r3, r0
  406e74:	6039      	str	r1, [r7, #0]
  406e76:	71fb      	strb	r3, [r7, #7]
  406e78:	4613      	mov	r3, r2
  406e7a:	80bb      	strh	r3, [r7, #4]
	inv_uart_tx_transfer_t txfer;
	
	txfer.data = (uint8_t *)s;
  406e7c:	683b      	ldr	r3, [r7, #0]
  406e7e:	60bb      	str	r3, [r7, #8]
	txfer.len = (uint16_t)l;
  406e80:	88bb      	ldrh	r3, [r7, #4]
  406e82:	81bb      	strh	r3, [r7, #12]
	
	return inv_uart_tx_txfer(uart, &txfer);
  406e84:	f107 0208 	add.w	r2, r7, #8
  406e88:	79fb      	ldrb	r3, [r7, #7]
  406e8a:	4611      	mov	r1, r2
  406e8c:	4618      	mov	r0, r3
  406e8e:	4b03      	ldr	r3, [pc, #12]	; (406e9c <inv_uart_puts+0x30>)
  406e90:	4798      	blx	r3
  406e92:	4603      	mov	r3, r0
}
  406e94:	4618      	mov	r0, r3
  406e96:	3710      	adds	r7, #16
  406e98:	46bd      	mov	sp, r7
  406e9a:	bd80      	pop	{r7, pc}
  406e9c:	00406ea1 	.word	0x00406ea1

00406ea0 <inv_uart_tx_txfer>:

int inv_uart_tx_txfer(inv_uart_num_t uart, inv_uart_tx_transfer_t * txfer)
{
  406ea0:	b580      	push	{r7, lr}
  406ea2:	b088      	sub	sp, #32
  406ea4:	af00      	add	r7, sp, #0
  406ea6:	4603      	mov	r3, r0
  406ea8:	6039      	str	r1, [r7, #0]
  406eaa:	71fb      	strb	r3, [r7, #7]
	int rc = INV_UART_ERROR_SUCCES;
  406eac:	2300      	movs	r3, #0
  406eae:	61fb      	str	r3, [r7, #28]
	inv_uart_state_t uart_tx_state;
	int timeout = 1000;
  406eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  406eb4:	61bb      	str	r3, [r7, #24]
	
	uart_tx_state = inv_uart_tx_get_state(uart);
  406eb6:	79fb      	ldrb	r3, [r7, #7]
  406eb8:	4618      	mov	r0, r3
  406eba:	4b57      	ldr	r3, [pc, #348]	; (407018 <inv_uart_tx_txfer+0x178>)
  406ebc:	4798      	blx	r3
  406ebe:	4603      	mov	r3, r0
  406ec0:	75fb      	strb	r3, [r7, #23]
	
	if(uart_tx_state == INV_UART_STATE_IDLE) {
  406ec2:	7dfb      	ldrb	r3, [r7, #23]
  406ec4:	2b01      	cmp	r3, #1
  406ec6:	f040 809b 	bne.w	407000 <inv_uart_tx_txfer+0x160>
		if (txfer->len > um[uart].uart_tx_buffer_size) {
  406eca:	683b      	ldr	r3, [r7, #0]
  406ecc:	889a      	ldrh	r2, [r3, #4]
  406ece:	79fb      	ldrb	r3, [r7, #7]
  406ed0:	4952      	ldr	r1, [pc, #328]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406ed2:	205c      	movs	r0, #92	; 0x5c
  406ed4:	fb00 f303 	mul.w	r3, r0, r3
  406ed8:	440b      	add	r3, r1
  406eda:	334e      	adds	r3, #78	; 0x4e
  406edc:	881b      	ldrh	r3, [r3, #0]
  406ede:	429a      	cmp	r2, r3
  406ee0:	d903      	bls.n	406eea <inv_uart_tx_txfer+0x4a>
			/* Requested transfer size does fit in the internal buffers */
			rc = INV_UART_ERROR_MEMORY;
  406ee2:	f06f 0302 	mvn.w	r3, #2
  406ee6:	61fb      	str	r3, [r7, #28]
  406ee8:	e090      	b.n	40700c <inv_uart_tx_txfer+0x16c>
		} else {
			pdc_packet_t pdc_usart_packet;
			uint32_t pdc_status;

			inv_disable_irq();
  406eea:	4b4d      	ldr	r3, [pc, #308]	; (407020 <inv_uart_tx_txfer+0x180>)
  406eec:	4798      	blx	r3
			
			/* Double-check if there is already an on-going transfer in TX */
			pdc_status = pdc_read_status(um[uart].uart_pdc);
  406eee:	79fb      	ldrb	r3, [r7, #7]
  406ef0:	4a4a      	ldr	r2, [pc, #296]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406ef2:	215c      	movs	r1, #92	; 0x5c
  406ef4:	fb01 f303 	mul.w	r3, r1, r3
  406ef8:	4413      	add	r3, r2
  406efa:	3304      	adds	r3, #4
  406efc:	681b      	ldr	r3, [r3, #0]
  406efe:	4618      	mov	r0, r3
  406f00:	4b48      	ldr	r3, [pc, #288]	; (407024 <inv_uart_tx_txfer+0x184>)
  406f02:	4798      	blx	r3
  406f04:	6138      	str	r0, [r7, #16]
			if( (pdc_status & PERIPH_PTCR_TXTEN) != 0) {
  406f06:	693b      	ldr	r3, [r7, #16]
  406f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406f0c:	2b00      	cmp	r3, #0
  406f0e:	d004      	beq.n	406f1a <inv_uart_tx_txfer+0x7a>
				inv_enable_irq();
  406f10:	4b45      	ldr	r3, [pc, #276]	; (407028 <inv_uart_tx_txfer+0x188>)
  406f12:	4798      	blx	r3
				return INV_UART_ERROR_BUSY;
  406f14:	f06f 0301 	mvn.w	r3, #1
  406f18:	e079      	b.n	40700e <inv_uart_tx_txfer+0x16e>
			}

			/* Copy the data to be transfered into the internal buffers */
			memcpy((void*)um[uart].uart_tx_buffer, txfer->data, txfer->len);
  406f1a:	79fb      	ldrb	r3, [r7, #7]
  406f1c:	4a3f      	ldr	r2, [pc, #252]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406f1e:	215c      	movs	r1, #92	; 0x5c
  406f20:	fb01 f303 	mul.w	r3, r1, r3
  406f24:	4413      	add	r3, r2
  406f26:	3348      	adds	r3, #72	; 0x48
  406f28:	6818      	ldr	r0, [r3, #0]
  406f2a:	683b      	ldr	r3, [r7, #0]
  406f2c:	6819      	ldr	r1, [r3, #0]
  406f2e:	683b      	ldr	r3, [r7, #0]
  406f30:	889b      	ldrh	r3, [r3, #4]
  406f32:	461a      	mov	r2, r3
  406f34:	4b3d      	ldr	r3, [pc, #244]	; (40702c <inv_uart_tx_txfer+0x18c>)
  406f36:	4798      	blx	r3
			
			/* Set address and size of data to be transfered  and configure PDC */
			pdc_usart_packet.ul_addr = (uint32_t)um[uart].uart_tx_buffer;
  406f38:	79fb      	ldrb	r3, [r7, #7]
  406f3a:	4a38      	ldr	r2, [pc, #224]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406f3c:	215c      	movs	r1, #92	; 0x5c
  406f3e:	fb01 f303 	mul.w	r3, r1, r3
  406f42:	4413      	add	r3, r2
  406f44:	3348      	adds	r3, #72	; 0x48
  406f46:	681b      	ldr	r3, [r3, #0]
  406f48:	60bb      	str	r3, [r7, #8]
			pdc_usart_packet.ul_size = txfer->len;
  406f4a:	683b      	ldr	r3, [r7, #0]
  406f4c:	889b      	ldrh	r3, [r3, #4]
  406f4e:	60fb      	str	r3, [r7, #12]
			
			pdc_tx_init(um[uart].uart_pdc, &pdc_usart_packet, NULL);
  406f50:	79fb      	ldrb	r3, [r7, #7]
  406f52:	4a32      	ldr	r2, [pc, #200]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406f54:	215c      	movs	r1, #92	; 0x5c
  406f56:	fb01 f303 	mul.w	r3, r1, r3
  406f5a:	4413      	add	r3, r2
  406f5c:	3304      	adds	r3, #4
  406f5e:	681b      	ldr	r3, [r3, #0]
  406f60:	f107 0108 	add.w	r1, r7, #8
  406f64:	2200      	movs	r2, #0
  406f66:	4618      	mov	r0, r3
  406f68:	4b31      	ldr	r3, [pc, #196]	; (407030 <inv_uart_tx_txfer+0x190>)
  406f6a:	4798      	blx	r3

			/* Enable DMA transfer in TX */
			pdc_enable_transfer(um[uart].uart_pdc, PERIPH_PTCR_TXTEN);
  406f6c:	79fb      	ldrb	r3, [r7, #7]
  406f6e:	4a2b      	ldr	r2, [pc, #172]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406f70:	215c      	movs	r1, #92	; 0x5c
  406f72:	fb01 f303 	mul.w	r3, r1, r3
  406f76:	4413      	add	r3, r2
  406f78:	3304      	adds	r3, #4
  406f7a:	681b      	ldr	r3, [r3, #0]
  406f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
  406f80:	4618      	mov	r0, r3
  406f82:	4b2c      	ldr	r3, [pc, #176]	; (407034 <inv_uart_tx_txfer+0x194>)
  406f84:	4798      	blx	r3

			/* Enable UART TX buffer empty interrupt. Corresponding NVIC interrupt 
			 * was already enabled by uart_init(). */
			usart_enable_interrupt(um[uart].uart_ip, US_IER_TXBUFE);
  406f86:	79fb      	ldrb	r3, [r7, #7]
  406f88:	4a24      	ldr	r2, [pc, #144]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406f8a:	215c      	movs	r1, #92	; 0x5c
  406f8c:	fb01 f303 	mul.w	r3, r1, r3
  406f90:	4413      	add	r3, r2
  406f92:	681b      	ldr	r3, [r3, #0]
  406f94:	f44f 6100 	mov.w	r1, #2048	; 0x800
  406f98:	4618      	mov	r0, r3
  406f9a:	4b27      	ldr	r3, [pc, #156]	; (407038 <inv_uart_tx_txfer+0x198>)
  406f9c:	4798      	blx	r3

			um[uart].uart_tx_state = INV_UART_STATE_BUSY_TX;
  406f9e:	79fb      	ldrb	r3, [r7, #7]
  406fa0:	4a1e      	ldr	r2, [pc, #120]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406fa2:	215c      	movs	r1, #92	; 0x5c
  406fa4:	fb01 f303 	mul.w	r3, r1, r3
  406fa8:	4413      	add	r3, r2
  406faa:	3340      	adds	r3, #64	; 0x40
  406fac:	2202      	movs	r2, #2
  406fae:	701a      	strb	r2, [r3, #0]
			
			/* Wait for the stream to be enabled */
			while (((pdc_read_status(um[uart].uart_pdc) & PERIPH_PTCR_TXTEN) == 0) && (timeout-- > 0));
  406fb0:	bf00      	nop
  406fb2:	79fb      	ldrb	r3, [r7, #7]
  406fb4:	4a19      	ldr	r2, [pc, #100]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406fb6:	215c      	movs	r1, #92	; 0x5c
  406fb8:	fb01 f303 	mul.w	r3, r1, r3
  406fbc:	4413      	add	r3, r2
  406fbe:	3304      	adds	r3, #4
  406fc0:	681b      	ldr	r3, [r3, #0]
  406fc2:	4618      	mov	r0, r3
  406fc4:	4b17      	ldr	r3, [pc, #92]	; (407024 <inv_uart_tx_txfer+0x184>)
  406fc6:	4798      	blx	r3
  406fc8:	4603      	mov	r3, r0
  406fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406fce:	2b00      	cmp	r3, #0
  406fd0:	d104      	bne.n	406fdc <inv_uart_tx_txfer+0x13c>
  406fd2:	69bb      	ldr	r3, [r7, #24]
  406fd4:	1e5a      	subs	r2, r3, #1
  406fd6:	61ba      	str	r2, [r7, #24]
  406fd8:	2b00      	cmp	r3, #0
  406fda:	dcea      	bgt.n	406fb2 <inv_uart_tx_txfer+0x112>
			if (timeout == 0) {
  406fdc:	69bb      	ldr	r3, [r7, #24]
  406fde:	2b00      	cmp	r3, #0
  406fe0:	d10b      	bne.n	406ffa <inv_uart_tx_txfer+0x15a>
				/* For some reason, the transfer did not start */
				um[uart].uart_tx_state = INV_UART_STATE_IDLE;
  406fe2:	79fb      	ldrb	r3, [r7, #7]
  406fe4:	4a0d      	ldr	r2, [pc, #52]	; (40701c <inv_uart_tx_txfer+0x17c>)
  406fe6:	215c      	movs	r1, #92	; 0x5c
  406fe8:	fb01 f303 	mul.w	r3, r1, r3
  406fec:	4413      	add	r3, r2
  406fee:	3340      	adds	r3, #64	; 0x40
  406ff0:	2201      	movs	r2, #1
  406ff2:	701a      	strb	r2, [r3, #0]
				rc = INV_UART_ERROR;
  406ff4:	f04f 33ff 	mov.w	r3, #4294967295
  406ff8:	61fb      	str	r3, [r7, #28]
			}
			
			inv_enable_irq();
  406ffa:	4b0b      	ldr	r3, [pc, #44]	; (407028 <inv_uart_tx_txfer+0x188>)
  406ffc:	4798      	blx	r3
  406ffe:	e005      	b.n	40700c <inv_uart_tx_txfer+0x16c>
		}
	} else if(uart_tx_state == INV_UART_STATE_BUSY_TX) {
  407000:	7dfb      	ldrb	r3, [r7, #23]
  407002:	2b02      	cmp	r3, #2
  407004:	d102      	bne.n	40700c <inv_uart_tx_txfer+0x16c>
		/* A transfer is already on-going */
		rc = INV_UART_ERROR_BUSY;
  407006:	f06f 0301 	mvn.w	r3, #1
  40700a:	61fb      	str	r3, [r7, #28]
	}

	return rc;
  40700c:	69fb      	ldr	r3, [r7, #28]
}
  40700e:	4618      	mov	r0, r3
  407010:	3720      	adds	r7, #32
  407012:	46bd      	mov	sp, r7
  407014:	bd80      	pop	{r7, pc}
  407016:	bf00      	nop
  407018:	00407181 	.word	0x00407181
  40701c:	20002420 	.word	0x20002420
  407020:	00404969 	.word	0x00404969
  407024:	004081db 	.word	0x004081db
  407028:	00404991 	.word	0x00404991
  40702c:	0040f861 	.word	0x0040f861
  407030:	004080ef 	.word	0x004080ef
  407034:	00408197 	.word	0x00408197
  407038:	00409605 	.word	0x00409605

0040703c <inv_uart_getc>:

int inv_uart_getc(inv_uart_num_t uart)
{
  40703c:	b5b0      	push	{r4, r5, r7, lr}
  40703e:	b084      	sub	sp, #16
  407040:	af00      	add	r7, sp, #0
  407042:	4603      	mov	r3, r0
  407044:	71fb      	strb	r3, [r7, #7]
	int data = EOF;
  407046:	f04f 33ff 	mov.w	r3, #4294967295
  40704a:	60fb      	str	r3, [r7, #12]

	/* Check if there is something in the RX FIFO */
	if(inv_uart_available(uart) > 0) {
  40704c:	79fb      	ldrb	r3, [r7, #7]
  40704e:	4618      	mov	r0, r3
  407050:	4b26      	ldr	r3, [pc, #152]	; (4070ec <inv_uart_getc+0xb0>)
  407052:	4798      	blx	r3
  407054:	4603      	mov	r3, r0
  407056:	2b00      	cmp	r3, #0
  407058:	dd43      	ble.n	4070e2 <inv_uart_getc+0xa6>
		inv_disable_irq();
  40705a:	4b25      	ldr	r3, [pc, #148]	; (4070f0 <inv_uart_getc+0xb4>)
  40705c:	4798      	blx	r3
		/* Pop the data from the RX FIFO and increment the tail */
		data = um[uart].uart_rx_buffer[um[uart].uart_rx_buffer_tail++];
  40705e:	79fb      	ldrb	r3, [r7, #7]
  407060:	4a24      	ldr	r2, [pc, #144]	; (4070f4 <inv_uart_getc+0xb8>)
  407062:	215c      	movs	r1, #92	; 0x5c
  407064:	fb01 f303 	mul.w	r3, r1, r3
  407068:	4413      	add	r3, r2
  40706a:	3344      	adds	r3, #68	; 0x44
  40706c:	6819      	ldr	r1, [r3, #0]
  40706e:	79fb      	ldrb	r3, [r7, #7]
  407070:	4820      	ldr	r0, [pc, #128]	; (4070f4 <inv_uart_getc+0xb8>)
  407072:	225c      	movs	r2, #92	; 0x5c
  407074:	fb02 f203 	mul.w	r2, r2, r3
  407078:	4402      	add	r2, r0
  40707a:	3250      	adds	r2, #80	; 0x50
  40707c:	8812      	ldrh	r2, [r2, #0]
  40707e:	b292      	uxth	r2, r2
  407080:	1c50      	adds	r0, r2, #1
  407082:	b285      	uxth	r5, r0
  407084:	481b      	ldr	r0, [pc, #108]	; (4070f4 <inv_uart_getc+0xb8>)
  407086:	245c      	movs	r4, #92	; 0x5c
  407088:	fb04 f303 	mul.w	r3, r4, r3
  40708c:	4403      	add	r3, r0
  40708e:	3350      	adds	r3, #80	; 0x50
  407090:	4628      	mov	r0, r5
  407092:	8018      	strh	r0, [r3, #0]
  407094:	4613      	mov	r3, r2
  407096:	440b      	add	r3, r1
  407098:	781b      	ldrb	r3, [r3, #0]
  40709a:	b2db      	uxtb	r3, r3
  40709c:	60fb      	str	r3, [r7, #12]
		/* Tail rollover */
		um[uart].uart_rx_buffer_tail %= um[uart].uart_rx_buffer_size;
  40709e:	79f9      	ldrb	r1, [r7, #7]
  4070a0:	79fb      	ldrb	r3, [r7, #7]
  4070a2:	4a14      	ldr	r2, [pc, #80]	; (4070f4 <inv_uart_getc+0xb8>)
  4070a4:	205c      	movs	r0, #92	; 0x5c
  4070a6:	fb00 f303 	mul.w	r3, r0, r3
  4070aa:	4413      	add	r3, r2
  4070ac:	3350      	adds	r3, #80	; 0x50
  4070ae:	881b      	ldrh	r3, [r3, #0]
  4070b0:	b29b      	uxth	r3, r3
  4070b2:	79fa      	ldrb	r2, [r7, #7]
  4070b4:	480f      	ldr	r0, [pc, #60]	; (4070f4 <inv_uart_getc+0xb8>)
  4070b6:	245c      	movs	r4, #92	; 0x5c
  4070b8:	fb04 f202 	mul.w	r2, r4, r2
  4070bc:	4402      	add	r2, r0
  4070be:	324c      	adds	r2, #76	; 0x4c
  4070c0:	8812      	ldrh	r2, [r2, #0]
  4070c2:	fbb3 f0f2 	udiv	r0, r3, r2
  4070c6:	fb02 f200 	mul.w	r2, r2, r0
  4070ca:	1a9b      	subs	r3, r3, r2
  4070cc:	b298      	uxth	r0, r3
  4070ce:	4a09      	ldr	r2, [pc, #36]	; (4070f4 <inv_uart_getc+0xb8>)
  4070d0:	235c      	movs	r3, #92	; 0x5c
  4070d2:	fb03 f301 	mul.w	r3, r3, r1
  4070d6:	4413      	add	r3, r2
  4070d8:	3350      	adds	r3, #80	; 0x50
  4070da:	4602      	mov	r2, r0
  4070dc:	801a      	strh	r2, [r3, #0]
		inv_enable_irq();
  4070de:	4b06      	ldr	r3, [pc, #24]	; (4070f8 <inv_uart_getc+0xbc>)
  4070e0:	4798      	blx	r3
	}

	return data;
  4070e2:	68fb      	ldr	r3, [r7, #12]
}
  4070e4:	4618      	mov	r0, r3
  4070e6:	3710      	adds	r7, #16
  4070e8:	46bd      	mov	sp, r7
  4070ea:	bdb0      	pop	{r4, r5, r7, pc}
  4070ec:	004070fd 	.word	0x004070fd
  4070f0:	00404969 	.word	0x00404969
  4070f4:	20002420 	.word	0x20002420
  4070f8:	00404991 	.word	0x00404991

004070fc <inv_uart_available>:

int inv_uart_available(inv_uart_num_t uart)
{
  4070fc:	b590      	push	{r4, r7, lr}
  4070fe:	b085      	sub	sp, #20
  407100:	af00      	add	r7, sp, #0
  407102:	4603      	mov	r3, r0
  407104:	71fb      	strb	r3, [r7, #7]
	uint16_t head = um[uart].uart_rx_buffer_size - pdc_read_rx_counter(um[uart].uart_pdc);
  407106:	79fb      	ldrb	r3, [r7, #7]
  407108:	4a1b      	ldr	r2, [pc, #108]	; (407178 <inv_uart_available+0x7c>)
  40710a:	215c      	movs	r1, #92	; 0x5c
  40710c:	fb01 f303 	mul.w	r3, r1, r3
  407110:	4413      	add	r3, r2
  407112:	334c      	adds	r3, #76	; 0x4c
  407114:	881c      	ldrh	r4, [r3, #0]
  407116:	79fb      	ldrb	r3, [r7, #7]
  407118:	4a17      	ldr	r2, [pc, #92]	; (407178 <inv_uart_available+0x7c>)
  40711a:	215c      	movs	r1, #92	; 0x5c
  40711c:	fb01 f303 	mul.w	r3, r1, r3
  407120:	4413      	add	r3, r2
  407122:	3304      	adds	r3, #4
  407124:	681b      	ldr	r3, [r3, #0]
  407126:	4618      	mov	r0, r3
  407128:	4b14      	ldr	r3, [pc, #80]	; (40717c <inv_uart_available+0x80>)
  40712a:	4798      	blx	r3
  40712c:	4603      	mov	r3, r0
  40712e:	b29b      	uxth	r3, r3
  407130:	1ae3      	subs	r3, r4, r3
  407132:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = um[uart].uart_rx_buffer_tail;
  407134:	79fb      	ldrb	r3, [r7, #7]
  407136:	4a10      	ldr	r2, [pc, #64]	; (407178 <inv_uart_available+0x7c>)
  407138:	215c      	movs	r1, #92	; 0x5c
  40713a:	fb01 f303 	mul.w	r3, r1, r3
  40713e:	4413      	add	r3, r2
  407140:	3350      	adds	r3, #80	; 0x50
  407142:	881b      	ldrh	r3, [r3, #0]
  407144:	81bb      	strh	r3, [r7, #12]

	if(head >= tail)
  407146:	89fa      	ldrh	r2, [r7, #14]
  407148:	89bb      	ldrh	r3, [r7, #12]
  40714a:	429a      	cmp	r2, r3
  40714c:	d303      	bcc.n	407156 <inv_uart_available+0x5a>
		return (int)(head - tail);
  40714e:	89fa      	ldrh	r2, [r7, #14]
  407150:	89bb      	ldrh	r3, [r7, #12]
  407152:	1ad3      	subs	r3, r2, r3
  407154:	e00c      	b.n	407170 <inv_uart_available+0x74>
	else
		return (int)(um[uart].uart_rx_buffer_size - (tail - head));
  407156:	79fb      	ldrb	r3, [r7, #7]
  407158:	4a07      	ldr	r2, [pc, #28]	; (407178 <inv_uart_available+0x7c>)
  40715a:	215c      	movs	r1, #92	; 0x5c
  40715c:	fb01 f303 	mul.w	r3, r1, r3
  407160:	4413      	add	r3, r2
  407162:	334c      	adds	r3, #76	; 0x4c
  407164:	881b      	ldrh	r3, [r3, #0]
  407166:	4619      	mov	r1, r3
  407168:	89ba      	ldrh	r2, [r7, #12]
  40716a:	89fb      	ldrh	r3, [r7, #14]
  40716c:	1ad3      	subs	r3, r2, r3
  40716e:	1acb      	subs	r3, r1, r3
}
  407170:	4618      	mov	r0, r3
  407172:	3714      	adds	r7, #20
  407174:	46bd      	mov	sp, r7
  407176:	bd90      	pop	{r4, r7, pc}
  407178:	20002420 	.word	0x20002420
  40717c:	004081f3 	.word	0x004081f3

00407180 <inv_uart_tx_get_state>:
	else
		return INV_UART_FLOW_CONTROL_NONE;
}

inv_uart_state_t inv_uart_tx_get_state(inv_uart_num_t uart)
{	
  407180:	b480      	push	{r7}
  407182:	b083      	sub	sp, #12
  407184:	af00      	add	r7, sp, #0
  407186:	4603      	mov	r3, r0
  407188:	71fb      	strb	r3, [r7, #7]
	return um[uart].uart_tx_state;
  40718a:	79fb      	ldrb	r3, [r7, #7]
  40718c:	4a06      	ldr	r2, [pc, #24]	; (4071a8 <inv_uart_tx_get_state+0x28>)
  40718e:	215c      	movs	r1, #92	; 0x5c
  407190:	fb01 f303 	mul.w	r3, r1, r3
  407194:	4413      	add	r3, r2
  407196:	3340      	adds	r3, #64	; 0x40
  407198:	781b      	ldrb	r3, [r3, #0]
  40719a:	b2db      	uxtb	r3, r3
}
  40719c:	4618      	mov	r0, r3
  40719e:	370c      	adds	r7, #12
  4071a0:	46bd      	mov	sp, r7
  4071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4071a6:	4770      	bx	lr
  4071a8:	20002420 	.word	0x20002420

004071ac <uart_dma_rx>:


/***************************** Private Functions ******************************/

static int uart_dma_rx(inv_uart_num_t uart)
{
  4071ac:	b580      	push	{r7, lr}
  4071ae:	b088      	sub	sp, #32
  4071b0:	af00      	add	r7, sp, #0
  4071b2:	4603      	mov	r3, r0
  4071b4:	71fb      	strb	r3, [r7, #7]
	int rc = 0;
  4071b6:	2300      	movs	r3, #0
  4071b8:	61fb      	str	r3, [r7, #28]
	int timeout = 1000;
  4071ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4071be:	61bb      	str	r3, [r7, #24]
	
	inv_disable_irq();
  4071c0:	4b45      	ldr	r3, [pc, #276]	; (4072d8 <uart_dma_rx+0x12c>)
  4071c2:	4798      	blx	r3
	if(um[uart].uart_rx_state == INV_UART_STATE_IDLE) {
  4071c4:	79fb      	ldrb	r3, [r7, #7]
  4071c6:	4a45      	ldr	r2, [pc, #276]	; (4072dc <uart_dma_rx+0x130>)
  4071c8:	215c      	movs	r1, #92	; 0x5c
  4071ca:	fb01 f303 	mul.w	r3, r1, r3
  4071ce:	4413      	add	r3, r2
  4071d0:	3341      	adds	r3, #65	; 0x41
  4071d2:	781b      	ldrb	r3, [r3, #0]
  4071d4:	2b01      	cmp	r3, #1
  4071d6:	d174      	bne.n	4072c2 <uart_dma_rx+0x116>

		pdc_packet_t pdc_usart_packet;

		/* Read PDC current status */
		uint32_t pdc_status = pdc_read_status(um[uart].uart_pdc);
  4071d8:	79fb      	ldrb	r3, [r7, #7]
  4071da:	4a40      	ldr	r2, [pc, #256]	; (4072dc <uart_dma_rx+0x130>)
  4071dc:	215c      	movs	r1, #92	; 0x5c
  4071de:	fb01 f303 	mul.w	r3, r1, r3
  4071e2:	4413      	add	r3, r2
  4071e4:	3304      	adds	r3, #4
  4071e6:	681b      	ldr	r3, [r3, #0]
  4071e8:	4618      	mov	r0, r3
  4071ea:	4b3d      	ldr	r3, [pc, #244]	; (4072e0 <uart_dma_rx+0x134>)
  4071ec:	4798      	blx	r3
  4071ee:	6178      	str	r0, [r7, #20]
		
		/* Double-check if there is already an on-going transfer in RX */
		if( (pdc_status & PERIPH_PTCR_RXTEN) != 0) {
  4071f0:	697b      	ldr	r3, [r7, #20]
  4071f2:	f003 0301 	and.w	r3, r3, #1
  4071f6:	2b00      	cmp	r3, #0
  4071f8:	d004      	beq.n	407204 <uart_dma_rx+0x58>
			inv_enable_irq();
  4071fa:	4b3a      	ldr	r3, [pc, #232]	; (4072e4 <uart_dma_rx+0x138>)
  4071fc:	4798      	blx	r3
			return INV_UART_ERROR_BUSY;
  4071fe:	f06f 0301 	mvn.w	r3, #1
  407202:	e064      	b.n	4072ce <uart_dma_rx+0x122>
		}

		/* Initialize PDC (DMA) transfer address and size. Set same values for next transfer 
		 * as RX is used in circular mode (cf atmel SAM55G datasheet §21.5.3).
		 */
		pdc_usart_packet.ul_addr = (uint32_t)um[uart].uart_rx_buffer;
  407204:	79fb      	ldrb	r3, [r7, #7]
  407206:	4a35      	ldr	r2, [pc, #212]	; (4072dc <uart_dma_rx+0x130>)
  407208:	215c      	movs	r1, #92	; 0x5c
  40720a:	fb01 f303 	mul.w	r3, r1, r3
  40720e:	4413      	add	r3, r2
  407210:	3344      	adds	r3, #68	; 0x44
  407212:	681b      	ldr	r3, [r3, #0]
  407214:	60fb      	str	r3, [r7, #12]
		pdc_usart_packet.ul_size = um[uart].uart_rx_buffer_size;
  407216:	79fb      	ldrb	r3, [r7, #7]
  407218:	4a30      	ldr	r2, [pc, #192]	; (4072dc <uart_dma_rx+0x130>)
  40721a:	215c      	movs	r1, #92	; 0x5c
  40721c:	fb01 f303 	mul.w	r3, r1, r3
  407220:	4413      	add	r3, r2
  407222:	334c      	adds	r3, #76	; 0x4c
  407224:	881b      	ldrh	r3, [r3, #0]
  407226:	613b      	str	r3, [r7, #16]

		/* Configure PDC for data receive */
		pdc_rx_init(um[uart].uart_pdc, &pdc_usart_packet, &pdc_usart_packet);
  407228:	79fb      	ldrb	r3, [r7, #7]
  40722a:	4a2c      	ldr	r2, [pc, #176]	; (4072dc <uart_dma_rx+0x130>)
  40722c:	215c      	movs	r1, #92	; 0x5c
  40722e:	fb01 f303 	mul.w	r3, r1, r3
  407232:	4413      	add	r3, r2
  407234:	3304      	adds	r3, #4
  407236:	681b      	ldr	r3, [r3, #0]
  407238:	f107 020c 	add.w	r2, r7, #12
  40723c:	f107 010c 	add.w	r1, r7, #12
  407240:	4618      	mov	r0, r3
  407242:	4b29      	ldr	r3, [pc, #164]	; (4072e8 <uart_dma_rx+0x13c>)
  407244:	4798      	blx	r3

		um[uart].uart_rx_state = INV_UART_STATE_BUSY_RX;
  407246:	79fb      	ldrb	r3, [r7, #7]
  407248:	4a24      	ldr	r2, [pc, #144]	; (4072dc <uart_dma_rx+0x130>)
  40724a:	215c      	movs	r1, #92	; 0x5c
  40724c:	fb01 f303 	mul.w	r3, r1, r3
  407250:	4413      	add	r3, r2
  407252:	3341      	adds	r3, #65	; 0x41
  407254:	2203      	movs	r2, #3
  407256:	701a      	strb	r2, [r3, #0]
		
		/* Enable DMA transfer in RX */
		pdc_enable_transfer(um[uart].uart_pdc, PERIPH_PTCR_RXTEN);
  407258:	79fb      	ldrb	r3, [r7, #7]
  40725a:	4a20      	ldr	r2, [pc, #128]	; (4072dc <uart_dma_rx+0x130>)
  40725c:	215c      	movs	r1, #92	; 0x5c
  40725e:	fb01 f303 	mul.w	r3, r1, r3
  407262:	4413      	add	r3, r2
  407264:	3304      	adds	r3, #4
  407266:	681b      	ldr	r3, [r3, #0]
  407268:	2101      	movs	r1, #1
  40726a:	4618      	mov	r0, r3
  40726c:	4b1f      	ldr	r3, [pc, #124]	; (4072ec <uart_dma_rx+0x140>)
  40726e:	4798      	blx	r3

		/* Wait for the stream to be actually enabled  */
		timeout = 1000;
  407270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  407274:	61bb      	str	r3, [r7, #24]
		while (((pdc_read_status(um[uart].uart_pdc) & PERIPH_PTCR_RXTEN) == 0) && (timeout-- > 0));
  407276:	bf00      	nop
  407278:	79fb      	ldrb	r3, [r7, #7]
  40727a:	4a18      	ldr	r2, [pc, #96]	; (4072dc <uart_dma_rx+0x130>)
  40727c:	215c      	movs	r1, #92	; 0x5c
  40727e:	fb01 f303 	mul.w	r3, r1, r3
  407282:	4413      	add	r3, r2
  407284:	3304      	adds	r3, #4
  407286:	681b      	ldr	r3, [r3, #0]
  407288:	4618      	mov	r0, r3
  40728a:	4b15      	ldr	r3, [pc, #84]	; (4072e0 <uart_dma_rx+0x134>)
  40728c:	4798      	blx	r3
  40728e:	4603      	mov	r3, r0
  407290:	f003 0301 	and.w	r3, r3, #1
  407294:	2b00      	cmp	r3, #0
  407296:	d104      	bne.n	4072a2 <uart_dma_rx+0xf6>
  407298:	69bb      	ldr	r3, [r7, #24]
  40729a:	1e5a      	subs	r2, r3, #1
  40729c:	61ba      	str	r2, [r7, #24]
  40729e:	2b00      	cmp	r3, #0
  4072a0:	dcea      	bgt.n	407278 <uart_dma_rx+0xcc>
		if (timeout == 0) {
  4072a2:	69bb      	ldr	r3, [r7, #24]
  4072a4:	2b00      	cmp	r3, #0
  4072a6:	d10f      	bne.n	4072c8 <uart_dma_rx+0x11c>
			um[uart].uart_rx_state = INV_UART_STATE_IDLE;
  4072a8:	79fb      	ldrb	r3, [r7, #7]
  4072aa:	4a0c      	ldr	r2, [pc, #48]	; (4072dc <uart_dma_rx+0x130>)
  4072ac:	215c      	movs	r1, #92	; 0x5c
  4072ae:	fb01 f303 	mul.w	r3, r1, r3
  4072b2:	4413      	add	r3, r2
  4072b4:	3341      	adds	r3, #65	; 0x41
  4072b6:	2201      	movs	r2, #1
  4072b8:	701a      	strb	r2, [r3, #0]
			rc = INV_UART_ERROR;
  4072ba:	f04f 33ff 	mov.w	r3, #4294967295
  4072be:	61fb      	str	r3, [r7, #28]
  4072c0:	e002      	b.n	4072c8 <uart_dma_rx+0x11c>
		}
	} else {
		rc = INV_UART_ERROR_BUSY;
  4072c2:	f06f 0301 	mvn.w	r3, #1
  4072c6:	61fb      	str	r3, [r7, #28]
	}
	
	inv_enable_irq();
  4072c8:	4b06      	ldr	r3, [pc, #24]	; (4072e4 <uart_dma_rx+0x138>)
  4072ca:	4798      	blx	r3

	return rc;
  4072cc:	69fb      	ldr	r3, [r7, #28]
}
  4072ce:	4618      	mov	r0, r3
  4072d0:	3720      	adds	r7, #32
  4072d2:	46bd      	mov	sp, r7
  4072d4:	bd80      	pop	{r7, pc}
  4072d6:	bf00      	nop
  4072d8:	00404969 	.word	0x00404969
  4072dc:	20002420 	.word	0x20002420
  4072e0:	004081db 	.word	0x004081db
  4072e4:	00404991 	.word	0x00404991
  4072e8:	00408133 	.word	0x00408133
  4072ec:	00408197 	.word	0x00408197

004072f0 <commonUSART_IRQ_HANDLER>:


/* Interrupt management ------------------------------------------------------*/

static void commonUSART_IRQ_HANDLER(inv_uart_num_t uart)
{
  4072f0:	b580      	push	{r7, lr}
  4072f2:	b084      	sub	sp, #16
  4072f4:	af00      	add	r7, sp, #0
  4072f6:	4603      	mov	r3, r0
  4072f8:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_status;
	
	uart_status = usart_get_status(um[uart].uart_ip);
  4072fa:	79fb      	ldrb	r3, [r7, #7]
  4072fc:	4a28      	ldr	r2, [pc, #160]	; (4073a0 <commonUSART_IRQ_HANDLER+0xb0>)
  4072fe:	215c      	movs	r1, #92	; 0x5c
  407300:	fb01 f303 	mul.w	r3, r1, r3
  407304:	4413      	add	r3, r2
  407306:	681b      	ldr	r3, [r3, #0]
  407308:	4618      	mov	r0, r3
  40730a:	4b26      	ldr	r3, [pc, #152]	; (4073a4 <commonUSART_IRQ_HANDLER+0xb4>)
  40730c:	4798      	blx	r3
  40730e:	60f8      	str	r0, [r7, #12]


	if((uart_status & US_CSR_TXBUFE) == US_CSR_TXBUFE) {
  407310:	68fb      	ldr	r3, [r7, #12]
  407312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  407316:	2b00      	cmp	r3, #0
  407318:	d03d      	beq.n	407396 <commonUSART_IRQ_HANDLER+0xa6>
		pdc_disable_transfer(um[uart].uart_pdc, PERIPH_PTCR_TXTDIS);
  40731a:	79fb      	ldrb	r3, [r7, #7]
  40731c:	4a20      	ldr	r2, [pc, #128]	; (4073a0 <commonUSART_IRQ_HANDLER+0xb0>)
  40731e:	215c      	movs	r1, #92	; 0x5c
  407320:	fb01 f303 	mul.w	r3, r1, r3
  407324:	4413      	add	r3, r2
  407326:	3304      	adds	r3, #4
  407328:	681b      	ldr	r3, [r3, #0]
  40732a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40732e:	4618      	mov	r0, r3
  407330:	4b1d      	ldr	r3, [pc, #116]	; (4073a8 <commonUSART_IRQ_HANDLER+0xb8>)
  407332:	4798      	blx	r3

		/* Mask TXBUFE interrupt. This will move IRQ state from active to inactive
		 * at NVIC level when exiting this handler.  */
		usart_disable_interrupt(um[uart].uart_ip, US_IER_TXBUFE);
  407334:	79fb      	ldrb	r3, [r7, #7]
  407336:	4a1a      	ldr	r2, [pc, #104]	; (4073a0 <commonUSART_IRQ_HANDLER+0xb0>)
  407338:	215c      	movs	r1, #92	; 0x5c
  40733a:	fb01 f303 	mul.w	r3, r1, r3
  40733e:	4413      	add	r3, r2
  407340:	681b      	ldr	r3, [r3, #0]
  407342:	f44f 6100 	mov.w	r1, #2048	; 0x800
  407346:	4618      	mov	r0, r3
  407348:	4b18      	ldr	r3, [pc, #96]	; (4073ac <commonUSART_IRQ_HANDLER+0xbc>)
  40734a:	4798      	blx	r3

		um[uart].uart_tx_state = INV_UART_STATE_IDLE;
  40734c:	79fb      	ldrb	r3, [r7, #7]
  40734e:	4a14      	ldr	r2, [pc, #80]	; (4073a0 <commonUSART_IRQ_HANDLER+0xb0>)
  407350:	215c      	movs	r1, #92	; 0x5c
  407352:	fb01 f303 	mul.w	r3, r1, r3
  407356:	4413      	add	r3, r2
  407358:	3340      	adds	r3, #64	; 0x40
  40735a:	2201      	movs	r2, #1
  40735c:	701a      	strb	r2, [r3, #0]

		if(um[uart].tx_done_cb)
  40735e:	79fb      	ldrb	r3, [r7, #7]
  407360:	4a0f      	ldr	r2, [pc, #60]	; (4073a0 <commonUSART_IRQ_HANDLER+0xb0>)
  407362:	215c      	movs	r1, #92	; 0x5c
  407364:	fb01 f303 	mul.w	r3, r1, r3
  407368:	4413      	add	r3, r2
  40736a:	3354      	adds	r3, #84	; 0x54
  40736c:	681b      	ldr	r3, [r3, #0]
  40736e:	2b00      	cmp	r3, #0
  407370:	d011      	beq.n	407396 <commonUSART_IRQ_HANDLER+0xa6>
			um[uart].tx_done_cb(um[uart].tx_context);
  407372:	79fb      	ldrb	r3, [r7, #7]
  407374:	4a0a      	ldr	r2, [pc, #40]	; (4073a0 <commonUSART_IRQ_HANDLER+0xb0>)
  407376:	215c      	movs	r1, #92	; 0x5c
  407378:	fb01 f303 	mul.w	r3, r1, r3
  40737c:	4413      	add	r3, r2
  40737e:	3354      	adds	r3, #84	; 0x54
  407380:	681b      	ldr	r3, [r3, #0]
  407382:	79fa      	ldrb	r2, [r7, #7]
  407384:	4906      	ldr	r1, [pc, #24]	; (4073a0 <commonUSART_IRQ_HANDLER+0xb0>)
  407386:	205c      	movs	r0, #92	; 0x5c
  407388:	fb00 f202 	mul.w	r2, r0, r2
  40738c:	440a      	add	r2, r1
  40738e:	3258      	adds	r2, #88	; 0x58
  407390:	6812      	ldr	r2, [r2, #0]
  407392:	4610      	mov	r0, r2
  407394:	4798      	blx	r3
	}

	/* TODO : Handle transmission error here */	
}
  407396:	bf00      	nop
  407398:	3710      	adds	r7, #16
  40739a:	46bd      	mov	sp, r7
  40739c:	bd80      	pop	{r7, pc}
  40739e:	bf00      	nop
  4073a0:	20002420 	.word	0x20002420
  4073a4:	0040963d 	.word	0x0040963d
  4073a8:	004081b9 	.word	0x004081b9
  4073ac:	00409621 	.word	0x00409621

004073b0 <FLEXCOM0_Handler>:


void USART0_IRQ_HANDLER(void)
{
  4073b0:	b580      	push	{r7, lr}
  4073b2:	af00      	add	r7, sp, #0
	commonUSART_IRQ_HANDLER(INV_UART_SENSOR_CTRL);
  4073b4:	2000      	movs	r0, #0
  4073b6:	4b02      	ldr	r3, [pc, #8]	; (4073c0 <FLEXCOM0_Handler+0x10>)
  4073b8:	4798      	blx	r3
}
  4073ba:	bf00      	nop
  4073bc:	bd80      	pop	{r7, pc}
  4073be:	bf00      	nop
  4073c0:	004072f1 	.word	0x004072f1

004073c4 <FLEXCOM7_Handler>:

void USART7_IRQ_HANDLER(void)
{
  4073c4:	b580      	push	{r7, lr}
  4073c6:	af00      	add	r7, sp, #0
	commonUSART_IRQ_HANDLER(INV_UART_LOG);	
  4073c8:	2001      	movs	r0, #1
  4073ca:	4b02      	ldr	r3, [pc, #8]	; (4073d4 <FLEXCOM7_Handler+0x10>)
  4073cc:	4798      	blx	r3
}
  4073ce:	bf00      	nop
  4073d0:	bd80      	pop	{r7, pc}
  4073d2:	bf00      	nop
  4073d4:	004072f1 	.word	0x004072f1

004073d8 <buffer_pop>:
 *  @param[in]  len Number of bytes to be poped
 *  @note:      This function does not check if there are any bytes available (waiting to be poped)
 *              in the ring byte buffer prior to poping them
 */
static void buffer_pop(uart_mngr_buffer_struct_t * uart_mngr, uint8_t * data, uint16_t len)
{
  4073d8:	b580      	push	{r7, lr}
  4073da:	b086      	sub	sp, #24
  4073dc:	af00      	add	r7, sp, #0
  4073de:	60f8      	str	r0, [r7, #12]
  4073e0:	60b9      	str	r1, [r7, #8]
  4073e2:	4613      	mov	r3, r2
  4073e4:	80fb      	strh	r3, [r7, #6]
  /* start index of the circular buffer (first bytes are reserved for driver) */
		uint16_t start = uart_mngr->driver_max_single_txfer_size;
  4073e6:	68fb      	ldr	r3, [r7, #12]
  4073e8:	889b      	ldrh	r3, [r3, #4]
  4073ea:	82fb      	strh	r3, [r7, #22]
	uint16_t tail = uart_mngr->circ_buffer_tail;
  4073ec:	68fb      	ldr	r3, [r7, #12]
  4073ee:	895b      	ldrh	r3, [r3, #10]
  4073f0:	82bb      	strh	r3, [r7, #20]

	uart_mngr->circ_buffer_tail += len;
  4073f2:	68fb      	ldr	r3, [r7, #12]
  4073f4:	895b      	ldrh	r3, [r3, #10]
  4073f6:	b29a      	uxth	r2, r3
  4073f8:	88fb      	ldrh	r3, [r7, #6]
  4073fa:	4413      	add	r3, r2
  4073fc:	b29a      	uxth	r2, r3
  4073fe:	68fb      	ldr	r3, [r7, #12]
  407400:	815a      	strh	r2, [r3, #10]
	uart_mngr->circ_buffer_tail %= uart_mngr->circ_buffer_size;
  407402:	68fb      	ldr	r3, [r7, #12]
  407404:	895b      	ldrh	r3, [r3, #10]
  407406:	b29b      	uxth	r3, r3
  407408:	68fa      	ldr	r2, [r7, #12]
  40740a:	88d2      	ldrh	r2, [r2, #6]
  40740c:	fbb3 f1f2 	udiv	r1, r3, r2
  407410:	fb02 f201 	mul.w	r2, r2, r1
  407414:	1a9b      	subs	r3, r3, r2
  407416:	b29a      	uxth	r2, r3
  407418:	68fb      	ldr	r3, [r7, #12]
  40741a:	815a      	strh	r2, [r3, #10]

	if((uart_mngr->circ_buffer_size - tail) >= len) {
  40741c:	68fb      	ldr	r3, [r7, #12]
  40741e:	88db      	ldrh	r3, [r3, #6]
  407420:	461a      	mov	r2, r3
  407422:	8abb      	ldrh	r3, [r7, #20]
  407424:	1ad2      	subs	r2, r2, r3
  407426:	88fb      	ldrh	r3, [r7, #6]
  407428:	429a      	cmp	r2, r3
  40742a:	db0b      	blt.n	407444 <buffer_pop+0x6c>
		memcpy(data, &uart_mngr->buffer[start+tail], len);
  40742c:	68fb      	ldr	r3, [r7, #12]
  40742e:	681b      	ldr	r3, [r3, #0]
  407430:	8af9      	ldrh	r1, [r7, #22]
  407432:	8aba      	ldrh	r2, [r7, #20]
  407434:	440a      	add	r2, r1
  407436:	4413      	add	r3, r2
  407438:	88fa      	ldrh	r2, [r7, #6]
  40743a:	4619      	mov	r1, r3
  40743c:	68b8      	ldr	r0, [r7, #8]
  40743e:	4b15      	ldr	r3, [pc, #84]	; (407494 <buffer_pop+0xbc>)
  407440:	4798      	blx	r3
				uart_mngr->circ_buffer_size - tail);
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
				&uart_mngr->buffer[start],
				len - uart_mngr->circ_buffer_size + tail);
	}
}
  407442:	e023      	b.n	40748c <buffer_pop+0xb4>
		memcpy(data, &uart_mngr->buffer[start+tail],
  407444:	68fb      	ldr	r3, [r7, #12]
  407446:	681b      	ldr	r3, [r3, #0]
  407448:	8af9      	ldrh	r1, [r7, #22]
  40744a:	8aba      	ldrh	r2, [r7, #20]
  40744c:	440a      	add	r2, r1
  40744e:	1899      	adds	r1, r3, r2
				uart_mngr->circ_buffer_size - tail);
  407450:	68fb      	ldr	r3, [r7, #12]
  407452:	88db      	ldrh	r3, [r3, #6]
  407454:	461a      	mov	r2, r3
  407456:	8abb      	ldrh	r3, [r7, #20]
  407458:	1ad3      	subs	r3, r2, r3
		memcpy(data, &uart_mngr->buffer[start+tail],
  40745a:	461a      	mov	r2, r3
  40745c:	68b8      	ldr	r0, [r7, #8]
  40745e:	4b0d      	ldr	r3, [pc, #52]	; (407494 <buffer_pop+0xbc>)
  407460:	4798      	blx	r3
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
  407462:	68fb      	ldr	r3, [r7, #12]
  407464:	88db      	ldrh	r3, [r3, #6]
  407466:	461a      	mov	r2, r3
  407468:	8abb      	ldrh	r3, [r7, #20]
  40746a:	1ad3      	subs	r3, r2, r3
  40746c:	461a      	mov	r2, r3
  40746e:	68bb      	ldr	r3, [r7, #8]
  407470:	1898      	adds	r0, r3, r2
				&uart_mngr->buffer[start],
  407472:	68fb      	ldr	r3, [r7, #12]
  407474:	681a      	ldr	r2, [r3, #0]
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
  407476:	8afb      	ldrh	r3, [r7, #22]
				&uart_mngr->buffer[start],
  407478:	18d1      	adds	r1, r2, r3
				len - uart_mngr->circ_buffer_size + tail);
  40747a:	88fb      	ldrh	r3, [r7, #6]
  40747c:	68fa      	ldr	r2, [r7, #12]
  40747e:	88d2      	ldrh	r2, [r2, #6]
  407480:	1a9a      	subs	r2, r3, r2
  407482:	8abb      	ldrh	r3, [r7, #20]
  407484:	4413      	add	r3, r2
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
  407486:	461a      	mov	r2, r3
  407488:	4b02      	ldr	r3, [pc, #8]	; (407494 <buffer_pop+0xbc>)
  40748a:	4798      	blx	r3
}
  40748c:	bf00      	nop
  40748e:	3718      	adds	r7, #24
  407490:	46bd      	mov	sp, r7
  407492:	bd80      	pop	{r7, pc}
  407494:	0040f861 	.word	0x0040f861

00407498 <buffer_push>:
 *  @param[in]  len Number of bytes to be pushed
 *  @note:      This function does not check if there is any space available 
 *              in the ring byte buffer prior to pushing the data
 */
static void buffer_push(uart_mngr_buffer_struct_t * uart_mngr, uint8_t * data, uint16_t len)
{
  407498:	b580      	push	{r7, lr}
  40749a:	b086      	sub	sp, #24
  40749c:	af00      	add	r7, sp, #0
  40749e:	60f8      	str	r0, [r7, #12]
  4074a0:	60b9      	str	r1, [r7, #8]
  4074a2:	4613      	mov	r3, r2
  4074a4:	80fb      	strh	r3, [r7, #6]
  /* start index of the circular buffer (first bytes are reserved for driver) */
		uint16_t start = uart_mngr->driver_max_single_txfer_size;
  4074a6:	68fb      	ldr	r3, [r7, #12]
  4074a8:	889b      	ldrh	r3, [r3, #4]
  4074aa:	82fb      	strh	r3, [r7, #22]

	uint16_t head = uart_mngr->circ_buffer_head;
  4074ac:	68fb      	ldr	r3, [r7, #12]
  4074ae:	891b      	ldrh	r3, [r3, #8]
  4074b0:	82bb      	strh	r3, [r7, #20]

	if((uart_mngr->circ_buffer_size - head) >= len) {
  4074b2:	68fb      	ldr	r3, [r7, #12]
  4074b4:	88db      	ldrh	r3, [r3, #6]
  4074b6:	461a      	mov	r2, r3
  4074b8:	8abb      	ldrh	r3, [r7, #20]
  4074ba:	1ad2      	subs	r2, r2, r3
  4074bc:	88fb      	ldrh	r3, [r7, #6]
  4074be:	429a      	cmp	r2, r3
  4074c0:	db0b      	blt.n	4074da <buffer_push+0x42>
		memcpy(&uart_mngr->buffer[start+head], data, len);
  4074c2:	68fb      	ldr	r3, [r7, #12]
  4074c4:	681b      	ldr	r3, [r3, #0]
  4074c6:	8af9      	ldrh	r1, [r7, #22]
  4074c8:	8aba      	ldrh	r2, [r7, #20]
  4074ca:	440a      	add	r2, r1
  4074cc:	4413      	add	r3, r2
  4074ce:	88fa      	ldrh	r2, [r7, #6]
  4074d0:	68b9      	ldr	r1, [r7, #8]
  4074d2:	4618      	mov	r0, r3
  4074d4:	4b1f      	ldr	r3, [pc, #124]	; (407554 <buffer_push+0xbc>)
  4074d6:	4798      	blx	r3
  4074d8:	e023      	b.n	407522 <buffer_push+0x8a>
	} else {
		
		memcpy(&uart_mngr->buffer[start+head], data, 
  4074da:	68fb      	ldr	r3, [r7, #12]
  4074dc:	681b      	ldr	r3, [r3, #0]
  4074de:	8af9      	ldrh	r1, [r7, #22]
  4074e0:	8aba      	ldrh	r2, [r7, #20]
  4074e2:	440a      	add	r2, r1
  4074e4:	1898      	adds	r0, r3, r2
				uart_mngr->circ_buffer_size - head);
  4074e6:	68fb      	ldr	r3, [r7, #12]
  4074e8:	88db      	ldrh	r3, [r3, #6]
  4074ea:	461a      	mov	r2, r3
  4074ec:	8abb      	ldrh	r3, [r7, #20]
  4074ee:	1ad3      	subs	r3, r2, r3
		memcpy(&uart_mngr->buffer[start+head], data, 
  4074f0:	461a      	mov	r2, r3
  4074f2:	68b9      	ldr	r1, [r7, #8]
  4074f4:	4b17      	ldr	r3, [pc, #92]	; (407554 <buffer_push+0xbc>)
  4074f6:	4798      	blx	r3
		memcpy(&uart_mngr->buffer[start],
  4074f8:	68fb      	ldr	r3, [r7, #12]
  4074fa:	681a      	ldr	r2, [r3, #0]
  4074fc:	8afb      	ldrh	r3, [r7, #22]
  4074fe:	18d0      	adds	r0, r2, r3
				&data[uart_mngr->circ_buffer_size - head],
  407500:	68fb      	ldr	r3, [r7, #12]
  407502:	88db      	ldrh	r3, [r3, #6]
  407504:	461a      	mov	r2, r3
  407506:	8abb      	ldrh	r3, [r7, #20]
  407508:	1ad3      	subs	r3, r2, r3
  40750a:	461a      	mov	r2, r3
  40750c:	68bb      	ldr	r3, [r7, #8]
  40750e:	1899      	adds	r1, r3, r2
				len - uart_mngr->circ_buffer_size + head);
  407510:	88fb      	ldrh	r3, [r7, #6]
  407512:	68fa      	ldr	r2, [r7, #12]
  407514:	88d2      	ldrh	r2, [r2, #6]
  407516:	1a9a      	subs	r2, r3, r2
  407518:	8abb      	ldrh	r3, [r7, #20]
  40751a:	4413      	add	r3, r2
		memcpy(&uart_mngr->buffer[start],
  40751c:	461a      	mov	r2, r3
  40751e:	4b0d      	ldr	r3, [pc, #52]	; (407554 <buffer_push+0xbc>)
  407520:	4798      	blx	r3
	}

	uart_mngr->circ_buffer_head += len;
  407522:	68fb      	ldr	r3, [r7, #12]
  407524:	891b      	ldrh	r3, [r3, #8]
  407526:	b29a      	uxth	r2, r3
  407528:	88fb      	ldrh	r3, [r7, #6]
  40752a:	4413      	add	r3, r2
  40752c:	b29a      	uxth	r2, r3
  40752e:	68fb      	ldr	r3, [r7, #12]
  407530:	811a      	strh	r2, [r3, #8]
	uart_mngr->circ_buffer_head %= uart_mngr->circ_buffer_size;
  407532:	68fb      	ldr	r3, [r7, #12]
  407534:	891b      	ldrh	r3, [r3, #8]
  407536:	b29b      	uxth	r3, r3
  407538:	68fa      	ldr	r2, [r7, #12]
  40753a:	88d2      	ldrh	r2, [r2, #6]
  40753c:	fbb3 f1f2 	udiv	r1, r3, r2
  407540:	fb02 f201 	mul.w	r2, r2, r1
  407544:	1a9b      	subs	r3, r3, r2
  407546:	b29a      	uxth	r2, r3
  407548:	68fb      	ldr	r3, [r7, #12]
  40754a:	811a      	strh	r2, [r3, #8]
}
  40754c:	bf00      	nop
  40754e:	3718      	adds	r7, #24
  407550:	46bd      	mov	sp, r7
  407552:	bd80      	pop	{r7, pc}
  407554:	0040f861 	.word	0x0040f861

00407558 <buffer_get_size>:
/** @brief      Returns the bytes available in the ring byte buffer
 *  @param[in]  uart_mngr Pointer to the UART manager buffer object
 *  @return     The number of bytes available (waiting to be poped) in the ring byte buffer
 */
static uint16_t buffer_get_size(uart_mngr_buffer_struct_t * uart_mngr)
{
  407558:	b480      	push	{r7}
  40755a:	b085      	sub	sp, #20
  40755c:	af00      	add	r7, sp, #0
  40755e:	6078      	str	r0, [r7, #4]
	uint16_t head = uart_mngr->circ_buffer_head;
  407560:	687b      	ldr	r3, [r7, #4]
  407562:	891b      	ldrh	r3, [r3, #8]
  407564:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = uart_mngr->circ_buffer_tail;
  407566:	687b      	ldr	r3, [r7, #4]
  407568:	895b      	ldrh	r3, [r3, #10]
  40756a:	81bb      	strh	r3, [r7, #12]

	if(head >= tail)
  40756c:	89fa      	ldrh	r2, [r7, #14]
  40756e:	89bb      	ldrh	r3, [r7, #12]
  407570:	429a      	cmp	r2, r3
  407572:	d304      	bcc.n	40757e <buffer_get_size+0x26>
		return (head - tail);
  407574:	89fa      	ldrh	r2, [r7, #14]
  407576:	89bb      	ldrh	r3, [r7, #12]
  407578:	1ad3      	subs	r3, r2, r3
  40757a:	b29b      	uxth	r3, r3
  40757c:	e007      	b.n	40758e <buffer_get_size+0x36>
	else
		return (uart_mngr->circ_buffer_size - tail + head);
  40757e:	687b      	ldr	r3, [r7, #4]
  407580:	88da      	ldrh	r2, [r3, #6]
  407582:	89bb      	ldrh	r3, [r7, #12]
  407584:	1ad3      	subs	r3, r2, r3
  407586:	b29a      	uxth	r2, r3
  407588:	89fb      	ldrh	r3, [r7, #14]
  40758a:	4413      	add	r3, r2
  40758c:	b29b      	uxth	r3, r3
}
  40758e:	4618      	mov	r0, r3
  407590:	3714      	adds	r7, #20
  407592:	46bd      	mov	sp, r7
  407594:	f85d 7b04 	ldr.w	r7, [sp], #4
  407598:	4770      	bx	lr
	...

0040759c <buffer_get_available>:
/** @brief      Returns the free space that is available in the ring byte buffer
 *  @param[in]  uart_mngr Pointer to the UART manager buffer object
 *  @return     The space, in bytes, available in the ring byte buffer
 */
static uint16_t buffer_get_available(uart_mngr_buffer_struct_t * uart_mngr)
{
  40759c:	b590      	push	{r4, r7, lr}
  40759e:	b083      	sub	sp, #12
  4075a0:	af00      	add	r7, sp, #0
  4075a2:	6078      	str	r0, [r7, #4]
	return (uart_mngr->circ_buffer_size - buffer_get_size(uart_mngr));
  4075a4:	687b      	ldr	r3, [r7, #4]
  4075a6:	88dc      	ldrh	r4, [r3, #6]
  4075a8:	6878      	ldr	r0, [r7, #4]
  4075aa:	4b04      	ldr	r3, [pc, #16]	; (4075bc <buffer_get_available+0x20>)
  4075ac:	4798      	blx	r3
  4075ae:	4603      	mov	r3, r0
  4075b0:	1ae3      	subs	r3, r4, r3
  4075b2:	b29b      	uxth	r3, r3
}
  4075b4:	4618      	mov	r0, r3
  4075b6:	370c      	adds	r7, #12
  4075b8:	46bd      	mov	sp, r7
  4075ba:	bd90      	pop	{r4, r7, pc}
  4075bc:	00407559 	.word	0x00407559

004075c0 <uart_tx_done_cb>:

/** @brief      Callback called when a TX transfer finishes
 *  @param[in]  context Context passed at init
 */
static void uart_tx_done_cb(void * context)
{
  4075c0:	b580      	push	{r7, lr}
  4075c2:	b086      	sub	sp, #24
  4075c4:	af00      	add	r7, sp, #0
  4075c6:	6078      	str	r0, [r7, #4]
	inv_uart_tx_transfer_t uart_txfer_struct;
	static uint8_t temp_buf[UART_MNGR_TX_ABSOLUTE_MAX_TRANSFER_SIZE];
	uart_mngr_struct_t * uart_mngr = (uart_mngr_struct_t *)context;
  4075c8:	687b      	ldr	r3, [r7, #4]
  4075ca:	613b      	str	r3, [r7, #16]
	
	/* Check if there is data waiting to be transfered in the ring byte buffer*/
	uint16_t bytes_num = buffer_get_size(&uart_mngr->uart_tx_buf);
  4075cc:	693b      	ldr	r3, [r7, #16]
  4075ce:	3310      	adds	r3, #16
  4075d0:	4618      	mov	r0, r3
  4075d2:	4b13      	ldr	r3, [pc, #76]	; (407620 <uart_tx_done_cb+0x60>)
  4075d4:	4798      	blx	r3
  4075d6:	4603      	mov	r3, r0
  4075d8:	82fb      	strh	r3, [r7, #22]
	
	if(bytes_num) {
  4075da:	8afb      	ldrh	r3, [r7, #22]
  4075dc:	2b00      	cmp	r3, #0
  4075de:	d01a      	beq.n	407616 <uart_tx_done_cb+0x56>
		if(bytes_num >= uart_mngr->uart_tx_buf.driver_max_single_txfer_size) {
  4075e0:	693b      	ldr	r3, [r7, #16]
  4075e2:	8a9b      	ldrh	r3, [r3, #20]
  4075e4:	8afa      	ldrh	r2, [r7, #22]
  4075e6:	429a      	cmp	r2, r3
  4075e8:	d302      	bcc.n	4075f0 <uart_tx_done_cb+0x30>
			/* Clamp the number of bytes to be transfered to the maximum size supported by the UART driver */
			bytes_num = uart_mngr->uart_tx_buf.driver_max_single_txfer_size;
  4075ea:	693b      	ldr	r3, [r7, #16]
  4075ec:	8a9b      	ldrh	r3, [r3, #20]
  4075ee:	82fb      	strh	r3, [r7, #22]
		}
		buffer_pop(&uart_mngr->uart_tx_buf, temp_buf, bytes_num);
  4075f0:	693b      	ldr	r3, [r7, #16]
  4075f2:	3310      	adds	r3, #16
  4075f4:	8afa      	ldrh	r2, [r7, #22]
  4075f6:	490b      	ldr	r1, [pc, #44]	; (407624 <uart_tx_done_cb+0x64>)
  4075f8:	4618      	mov	r0, r3
  4075fa:	4b0b      	ldr	r3, [pc, #44]	; (407628 <uart_tx_done_cb+0x68>)
  4075fc:	4798      	blx	r3
		uart_txfer_struct.data = temp_buf;
  4075fe:	4b09      	ldr	r3, [pc, #36]	; (407624 <uart_tx_done_cb+0x64>)
  407600:	60bb      	str	r3, [r7, #8]
		uart_txfer_struct.len  = bytes_num;
  407602:	8afb      	ldrh	r3, [r7, #22]
  407604:	81bb      	strh	r3, [r7, #12]
		inv_uart_tx_txfer(uart_mngr->uart_mngr_uart_num, &uart_txfer_struct);
  407606:	693b      	ldr	r3, [r7, #16]
  407608:	781b      	ldrb	r3, [r3, #0]
  40760a:	f107 0208 	add.w	r2, r7, #8
  40760e:	4611      	mov	r1, r2
  407610:	4618      	mov	r0, r3
  407612:	4b06      	ldr	r3, [pc, #24]	; (40762c <uart_tx_done_cb+0x6c>)
  407614:	4798      	blx	r3
	}
}
  407616:	bf00      	nop
  407618:	3718      	adds	r7, #24
  40761a:	46bd      	mov	sp, r7
  40761c:	bd80      	pop	{r7, pc}
  40761e:	bf00      	nop
  407620:	00407559 	.word	0x00407559
  407624:	200045d8 	.word	0x200045d8
  407628:	004073d9 	.word	0x004073d9
  40762c:	00406ea1 	.word	0x00406ea1

00407630 <inv_uart_mngr_init>:


int inv_uart_mngr_init(inv_uart_mngr_init_struct_t * uart_mngr_init_struct)
{
  407630:	b580      	push	{r7, lr}
  407632:	b08c      	sub	sp, #48	; 0x30
  407634:	af00      	add	r7, sp, #0
  407636:	6078      	str	r0, [r7, #4]
	inv_uart_init_struct_t uart_init_struct;
	inv_uart_num_t uart_nb = uart_mngr_init_struct->uart_num;
  407638:	687b      	ldr	r3, [r7, #4]
  40763a:	781b      	ldrb	r3, [r3, #0]
  40763c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* Populate the driver init structure with data common for all the UART peripherals */
	uart_init_struct.uart_num = uart_mngr_init_struct->uart_num;
  407640:	687b      	ldr	r3, [r7, #4]
  407642:	781b      	ldrb	r3, [r3, #0]
  407644:	733b      	strb	r3, [r7, #12]
	uart_init_struct.baudrate = uart_mngr_init_struct->baudrate;
  407646:	687b      	ldr	r3, [r7, #4]
  407648:	685b      	ldr	r3, [r3, #4]
  40764a:	61fb      	str	r3, [r7, #28]
	uart_init_struct.flow_ctrl = uart_mngr_init_struct->flow_ctrl;
  40764c:	687b      	ldr	r3, [r7, #4]
  40764e:	7a1b      	ldrb	r3, [r3, #8]
  407650:	f887 3020 	strb.w	r3, [r7, #32]
	uart_init_struct.tx_done_cb = uart_tx_done_cb;
  407654:	4b20      	ldr	r3, [pc, #128]	; (4076d8 <inv_uart_mngr_init+0xa8>)
  407656:	627b      	str	r3, [r7, #36]	; 0x24

	/* Populate the driver init structure with data specific to each UART peripheral */
	uart_init_struct.tx_buffer  = um[uart_nb].uart_tx_buf.buffer;
  407658:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  40765c:	491f      	ldr	r1, [pc, #124]	; (4076dc <inv_uart_mngr_init+0xac>)
  40765e:	4613      	mov	r3, r2
  407660:	00db      	lsls	r3, r3, #3
  407662:	1a9b      	subs	r3, r3, r2
  407664:	009b      	lsls	r3, r3, #2
  407666:	440b      	add	r3, r1
  407668:	3310      	adds	r3, #16
  40766a:	681b      	ldr	r3, [r3, #0]
  40766c:	613b      	str	r3, [r7, #16]
	uart_init_struct.rx_buffer  = um[uart_nb].uart_rx_buf.buffer;
  40766e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  407672:	491a      	ldr	r1, [pc, #104]	; (4076dc <inv_uart_mngr_init+0xac>)
  407674:	4613      	mov	r3, r2
  407676:	00db      	lsls	r3, r3, #3
  407678:	1a9b      	subs	r3, r3, r2
  40767a:	009b      	lsls	r3, r3, #2
  40767c:	440b      	add	r3, r1
  40767e:	3304      	adds	r3, #4
  407680:	681b      	ldr	r3, [r3, #0]
  407682:	617b      	str	r3, [r7, #20]
	uart_init_struct.tx_size    = um[uart_nb].uart_tx_buf.driver_max_single_txfer_size;
  407684:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  407688:	4914      	ldr	r1, [pc, #80]	; (4076dc <inv_uart_mngr_init+0xac>)
  40768a:	4613      	mov	r3, r2
  40768c:	00db      	lsls	r3, r3, #3
  40768e:	1a9b      	subs	r3, r3, r2
  407690:	009b      	lsls	r3, r3, #2
  407692:	440b      	add	r3, r1
  407694:	3314      	adds	r3, #20
  407696:	881b      	ldrh	r3, [r3, #0]
  407698:	833b      	strh	r3, [r7, #24]
	uart_init_struct.rx_size    = um[uart_nb].uart_rx_buf.driver_max_single_txfer_size;
  40769a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  40769e:	490f      	ldr	r1, [pc, #60]	; (4076dc <inv_uart_mngr_init+0xac>)
  4076a0:	4613      	mov	r3, r2
  4076a2:	00db      	lsls	r3, r3, #3
  4076a4:	1a9b      	subs	r3, r3, r2
  4076a6:	009b      	lsls	r3, r3, #2
  4076a8:	440b      	add	r3, r1
  4076aa:	3308      	adds	r3, #8
  4076ac:	881b      	ldrh	r3, [r3, #0]
  4076ae:	837b      	strh	r3, [r7, #26]
	uart_init_struct.tx_context = &um[uart_nb];
  4076b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  4076b4:	4613      	mov	r3, r2
  4076b6:	00db      	lsls	r3, r3, #3
  4076b8:	1a9b      	subs	r3, r3, r2
  4076ba:	009b      	lsls	r3, r3, #2
  4076bc:	4a07      	ldr	r2, [pc, #28]	; (4076dc <inv_uart_mngr_init+0xac>)
  4076be:	4413      	add	r3, r2
  4076c0:	62bb      	str	r3, [r7, #40]	; 0x28
	
	/* Initialize the UART driver */
	return inv_uart_init(&uart_init_struct);
  4076c2:	f107 030c 	add.w	r3, r7, #12
  4076c6:	4618      	mov	r0, r3
  4076c8:	4b05      	ldr	r3, [pc, #20]	; (4076e0 <inv_uart_mngr_init+0xb0>)
  4076ca:	4798      	blx	r3
  4076cc:	4603      	mov	r3, r0
}
  4076ce:	4618      	mov	r0, r3
  4076d0:	3730      	adds	r7, #48	; 0x30
  4076d2:	46bd      	mov	sp, r7
  4076d4:	bd80      	pop	{r7, pc}
  4076d6:	bf00      	nop
  4076d8:	004075c1 	.word	0x004075c1
  4076dc:	200024d8 	.word	0x200024d8
  4076e0:	00406bb5 	.word	0x00406bb5

004076e4 <inv_uart_mngr_puts>:

int inv_uart_mngr_puts(inv_uart_num_t uart, const char * s, unsigned short l)
{
  4076e4:	b580      	push	{r7, lr}
  4076e6:	b086      	sub	sp, #24
  4076e8:	af00      	add	r7, sp, #0
  4076ea:	4603      	mov	r3, r0
  4076ec:	6039      	str	r1, [r7, #0]
  4076ee:	71fb      	strb	r3, [r7, #7]
  4076f0:	4613      	mov	r3, r2
  4076f2:	80bb      	strh	r3, [r7, #4]
	int rc = INV_UART_ERROR_SUCCES;
  4076f4:	2300      	movs	r3, #0
  4076f6:	617b      	str	r3, [r7, #20]
	inv_uart_state_t uart_tx_state;
	uart_mngr_struct_t * uart_mngr = &um[uart];
  4076f8:	79fa      	ldrb	r2, [r7, #7]
  4076fa:	4613      	mov	r3, r2
  4076fc:	00db      	lsls	r3, r3, #3
  4076fe:	1a9b      	subs	r3, r3, r2
  407700:	009b      	lsls	r3, r3, #2
  407702:	4a34      	ldr	r2, [pc, #208]	; (4077d4 <inv_uart_mngr_puts+0xf0>)
  407704:	4413      	add	r3, r2
  407706:	613b      	str	r3, [r7, #16]
	
	/* Check if the data to be transfered fits in the internal buffer
	 * Total size of the buffer being driver reserved size + circular buffer size
	 */
	if(l > (uart_mngr->uart_tx_buf.driver_max_single_txfer_size + 
  407708:	88ba      	ldrh	r2, [r7, #4]
  40770a:	693b      	ldr	r3, [r7, #16]
  40770c:	8a9b      	ldrh	r3, [r3, #20]
  40770e:	4619      	mov	r1, r3
		     uart_mngr->uart_tx_buf.circ_buffer_size) )
  407710:	693b      	ldr	r3, [r7, #16]
  407712:	8adb      	ldrh	r3, [r3, #22]
	if(l > (uart_mngr->uart_tx_buf.driver_max_single_txfer_size + 
  407714:	440b      	add	r3, r1
  407716:	429a      	cmp	r2, r3
  407718:	dd02      	ble.n	407720 <inv_uart_mngr_puts+0x3c>
		return INV_UART_ERROR_MEMORY;
  40771a:	f06f 0302 	mvn.w	r3, #2
  40771e:	e055      	b.n	4077cc <inv_uart_mngr_puts+0xe8>
	
	inv_disable_irq();
  407720:	4b2d      	ldr	r3, [pc, #180]	; (4077d8 <inv_uart_mngr_puts+0xf4>)
  407722:	4798      	blx	r3
	uart_tx_state = inv_uart_tx_get_state(uart_mngr->uart_mngr_uart_num);
  407724:	693b      	ldr	r3, [r7, #16]
  407726:	781b      	ldrb	r3, [r3, #0]
  407728:	4618      	mov	r0, r3
  40772a:	4b2c      	ldr	r3, [pc, #176]	; (4077dc <inv_uart_mngr_puts+0xf8>)
  40772c:	4798      	blx	r3
  40772e:	4603      	mov	r3, r0
  407730:	73fb      	strb	r3, [r7, #15]
	
	if(uart_tx_state == INV_UART_STATE_IDLE) {
  407732:	7bfb      	ldrb	r3, [r7, #15]
  407734:	2b01      	cmp	r3, #1
  407736:	d127      	bne.n	407788 <inv_uart_mngr_puts+0xa4>
		if(l <= uart_mngr->uart_tx_buf.driver_max_single_txfer_size) {
  407738:	693b      	ldr	r3, [r7, #16]
  40773a:	8a9b      	ldrh	r3, [r3, #20]
  40773c:	88ba      	ldrh	r2, [r7, #4]
  40773e:	429a      	cmp	r2, r3
  407740:	d808      	bhi.n	407754 <inv_uart_mngr_puts+0x70>
			/* If the data fits into the UART driver's buffers, make a single transfer */
			rc = inv_uart_puts(uart_mngr->uart_mngr_uart_num, s, l);
  407742:	693b      	ldr	r3, [r7, #16]
  407744:	781b      	ldrb	r3, [r3, #0]
  407746:	88ba      	ldrh	r2, [r7, #4]
  407748:	6839      	ldr	r1, [r7, #0]
  40774a:	4618      	mov	r0, r3
  40774c:	4b24      	ldr	r3, [pc, #144]	; (4077e0 <inv_uart_mngr_puts+0xfc>)
  40774e:	4798      	blx	r3
  407750:	6178      	str	r0, [r7, #20]
  407752:	e038      	b.n	4077c6 <inv_uart_mngr_puts+0xe2>
		} else {
			/* If the data does not fit in the UART driver's internal buffers, 
			 * make an UART transfer and push the rest of the data in the UART manager's ring byte buffer 
			 */
			buffer_push(&uart_mngr->uart_tx_buf, (uint8_t *)&s[uart_mngr->uart_tx_buf.driver_max_single_txfer_size], 
  407754:	693b      	ldr	r3, [r7, #16]
  407756:	f103 0010 	add.w	r0, r3, #16
  40775a:	693b      	ldr	r3, [r7, #16]
  40775c:	8a9b      	ldrh	r3, [r3, #20]
  40775e:	461a      	mov	r2, r3
  407760:	683b      	ldr	r3, [r7, #0]
  407762:	1899      	adds	r1, r3, r2
					l - uart_mngr->uart_tx_buf.driver_max_single_txfer_size);
  407764:	693b      	ldr	r3, [r7, #16]
  407766:	8a9b      	ldrh	r3, [r3, #20]
			buffer_push(&uart_mngr->uart_tx_buf, (uint8_t *)&s[uart_mngr->uart_tx_buf.driver_max_single_txfer_size], 
  407768:	88ba      	ldrh	r2, [r7, #4]
  40776a:	1ad3      	subs	r3, r2, r3
  40776c:	b29b      	uxth	r3, r3
  40776e:	461a      	mov	r2, r3
  407770:	4b1c      	ldr	r3, [pc, #112]	; (4077e4 <inv_uart_mngr_puts+0x100>)
  407772:	4798      	blx	r3
			rc = inv_uart_puts(uart_mngr->uart_mngr_uart_num, s, uart_mngr->uart_tx_buf.driver_max_single_txfer_size);
  407774:	693b      	ldr	r3, [r7, #16]
  407776:	7818      	ldrb	r0, [r3, #0]
  407778:	693b      	ldr	r3, [r7, #16]
  40777a:	8a9b      	ldrh	r3, [r3, #20]
  40777c:	461a      	mov	r2, r3
  40777e:	6839      	ldr	r1, [r7, #0]
  407780:	4b17      	ldr	r3, [pc, #92]	; (4077e0 <inv_uart_mngr_puts+0xfc>)
  407782:	4798      	blx	r3
  407784:	6178      	str	r0, [r7, #20]
  407786:	e01e      	b.n	4077c6 <inv_uart_mngr_puts+0xe2>
		}
	} else if(uart_tx_state == INV_UART_STATE_BUSY_TX) {
  407788:	7bfb      	ldrb	r3, [r7, #15]
  40778a:	2b02      	cmp	r3, #2
  40778c:	d115      	bne.n	4077ba <inv_uart_mngr_puts+0xd6>
		if(buffer_get_available(&uart_mngr->uart_tx_buf) < l) {
  40778e:	693b      	ldr	r3, [r7, #16]
  407790:	3310      	adds	r3, #16
  407792:	4618      	mov	r0, r3
  407794:	4b14      	ldr	r3, [pc, #80]	; (4077e8 <inv_uart_mngr_puts+0x104>)
  407796:	4798      	blx	r3
  407798:	4603      	mov	r3, r0
  40779a:	461a      	mov	r2, r3
  40779c:	88bb      	ldrh	r3, [r7, #4]
  40779e:	4293      	cmp	r3, r2
  4077a0:	d903      	bls.n	4077aa <inv_uart_mngr_puts+0xc6>
			/* Not enough room in the ring byte buffer */
			rc = INV_UART_ERROR_MEMORY;
  4077a2:	f06f 0302 	mvn.w	r3, #2
  4077a6:	617b      	str	r3, [r7, #20]
  4077a8:	e00d      	b.n	4077c6 <inv_uart_mngr_puts+0xe2>
		} else {
			/* Push the data in the ring byte buffer so that it can be transfered once the current transfer finishes */
			buffer_push(&uart_mngr->uart_tx_buf, (uint8_t *)s, l);
  4077aa:	693b      	ldr	r3, [r7, #16]
  4077ac:	3310      	adds	r3, #16
  4077ae:	88ba      	ldrh	r2, [r7, #4]
  4077b0:	6839      	ldr	r1, [r7, #0]
  4077b2:	4618      	mov	r0, r3
  4077b4:	4b0b      	ldr	r3, [pc, #44]	; (4077e4 <inv_uart_mngr_puts+0x100>)
  4077b6:	4798      	blx	r3
  4077b8:	e005      	b.n	4077c6 <inv_uart_mngr_puts+0xe2>
		}
	} else if(uart_tx_state == INV_UART_STATE_RESET) {
  4077ba:	7bfb      	ldrb	r3, [r7, #15]
  4077bc:	2b00      	cmp	r3, #0
  4077be:	d102      	bne.n	4077c6 <inv_uart_mngr_puts+0xe2>
		/* UART driver non-initialized */
		rc = INV_UART_ERROR;
  4077c0:	f04f 33ff 	mov.w	r3, #4294967295
  4077c4:	617b      	str	r3, [r7, #20]
	}
	inv_enable_irq();
  4077c6:	4b09      	ldr	r3, [pc, #36]	; (4077ec <inv_uart_mngr_puts+0x108>)
  4077c8:	4798      	blx	r3
	
	return rc;
  4077ca:	697b      	ldr	r3, [r7, #20]
}
  4077cc:	4618      	mov	r0, r3
  4077ce:	3718      	adds	r7, #24
  4077d0:	46bd      	mov	sp, r7
  4077d2:	bd80      	pop	{r7, pc}
  4077d4:	200024d8 	.word	0x200024d8
  4077d8:	00404969 	.word	0x00404969
  4077dc:	00407181 	.word	0x00407181
  4077e0:	00406e6d 	.word	0x00406e6d
  4077e4:	00407499 	.word	0x00407499
  4077e8:	0040759d 	.word	0x0040759d
  4077ec:	00404991 	.word	0x00404991

004077f0 <inv_uart_mngr_getc>:

int inv_uart_mngr_getc(inv_uart_num_t uart)
{
  4077f0:	b580      	push	{r7, lr}
  4077f2:	b082      	sub	sp, #8
  4077f4:	af00      	add	r7, sp, #0
  4077f6:	4603      	mov	r3, r0
  4077f8:	71fb      	strb	r3, [r7, #7]
	return inv_uart_getc(uart);
  4077fa:	79fb      	ldrb	r3, [r7, #7]
  4077fc:	4618      	mov	r0, r3
  4077fe:	4b03      	ldr	r3, [pc, #12]	; (40780c <inv_uart_mngr_getc+0x1c>)
  407800:	4798      	blx	r3
  407802:	4603      	mov	r3, r0
}
  407804:	4618      	mov	r0, r3
  407806:	3708      	adds	r7, #8
  407808:	46bd      	mov	sp, r7
  40780a:	bd80      	pop	{r7, pc}
  40780c:	0040703d 	.word	0x0040703d

00407810 <inv_error_str>:
 */

#include "ErrorHelper.h"

const char * inv_error_str(int error)
{
  407810:	b480      	push	{r7}
  407812:	b083      	sub	sp, #12
  407814:	af00      	add	r7, sp, #0
  407816:	6078      	str	r0, [r7, #4]
	switch(error) {
  407818:	687b      	ldr	r3, [r7, #4]
  40781a:	3310      	adds	r3, #16
  40781c:	2b10      	cmp	r3, #16
  40781e:	d845      	bhi.n	4078ac <inv_error_str+0x9c>
  407820:	a201      	add	r2, pc, #4	; (adr r2, 407828 <inv_error_str+0x18>)
  407822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407826:	bf00      	nop
  407828:	004078a9 	.word	0x004078a9
  40782c:	004078a5 	.word	0x004078a5
  407830:	004078a1 	.word	0x004078a1
  407834:	0040789d 	.word	0x0040789d
  407838:	00407899 	.word	0x00407899
  40783c:	00407895 	.word	0x00407895
  407840:	00407891 	.word	0x00407891
  407844:	0040788d 	.word	0x0040788d
  407848:	004078ad 	.word	0x004078ad
  40784c:	00407889 	.word	0x00407889
  407850:	00407885 	.word	0x00407885
  407854:	00407881 	.word	0x00407881
  407858:	0040787d 	.word	0x0040787d
  40785c:	00407879 	.word	0x00407879
  407860:	00407875 	.word	0x00407875
  407864:	00407871 	.word	0x00407871
  407868:	0040786d 	.word	0x0040786d
	case INV_ERROR_SUCCESS:      return "Success";
  40786c:	4b13      	ldr	r3, [pc, #76]	; (4078bc <inv_error_str+0xac>)
  40786e:	e01e      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR:              return "Unspecified error";
  407870:	4b13      	ldr	r3, [pc, #76]	; (4078c0 <inv_error_str+0xb0>)
  407872:	e01c      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_NIMPL:        return "Not implemented";
  407874:	4b13      	ldr	r3, [pc, #76]	; (4078c4 <inv_error_str+0xb4>)
  407876:	e01a      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_TRANSPORT:    return "Transport error";
  407878:	4b13      	ldr	r3, [pc, #76]	; (4078c8 <inv_error_str+0xb8>)
  40787a:	e018      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_TIMEOUT:      return "Timeout, action did not complete in time";
  40787c:	4b13      	ldr	r3, [pc, #76]	; (4078cc <inv_error_str+0xbc>)
  40787e:	e016      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_SIZE:         return "Wrong size error";
  407880:	4b13      	ldr	r3, [pc, #76]	; (4078d0 <inv_error_str+0xc0>)
  407882:	e014      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_OS:           return "Operating system failure";
  407884:	4b13      	ldr	r3, [pc, #76]	; (4078d4 <inv_error_str+0xc4>)
  407886:	e012      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_IO:           return "Input/Output error";
  407888:	4b13      	ldr	r3, [pc, #76]	; (4078d8 <inv_error_str+0xc8>)
  40788a:	e010      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_MEM: 		 return "Bad allocation";
  40788c:	4b13      	ldr	r3, [pc, #76]	; (4078dc <inv_error_str+0xcc>)
  40788e:	e00e      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_HW:           return "Hardware error";
  407890:	4b13      	ldr	r3, [pc, #76]	; (4078e0 <inv_error_str+0xd0>)
  407892:	e00c      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_BAD_ARG:      return "Invalid arguments";
  407894:	4b13      	ldr	r3, [pc, #76]	; (4078e4 <inv_error_str+0xd4>)
  407896:	e00a      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_UNEXPECTED:   return "Unexpected error";
  407898:	4b13      	ldr	r3, [pc, #76]	; (4078e8 <inv_error_str+0xd8>)
  40789a:	e008      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_FILE:         return "Invalid file format";
  40789c:	4b13      	ldr	r3, [pc, #76]	; (4078ec <inv_error_str+0xdc>)
  40789e:	e006      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_PATH:         return "Invalid file path";
  4078a0:	4b13      	ldr	r3, [pc, #76]	; (4078f0 <inv_error_str+0xe0>)
  4078a2:	e004      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_IMAGE_TYPE:   return "Unknown image type";
  4078a4:	4b13      	ldr	r3, [pc, #76]	; (4078f4 <inv_error_str+0xe4>)
  4078a6:	e002      	b.n	4078ae <inv_error_str+0x9e>
	case INV_ERROR_WATCHDOG:     return "Watchdog error";
  4078a8:	4b13      	ldr	r3, [pc, #76]	; (4078f8 <inv_error_str+0xe8>)
  4078aa:	e000      	b.n	4078ae <inv_error_str+0x9e>
	default:                     return "Unknown error";
  4078ac:	4b13      	ldr	r3, [pc, #76]	; (4078fc <inv_error_str+0xec>)
	}
  4078ae:	4618      	mov	r0, r3
  4078b0:	370c      	adds	r7, #12
  4078b2:	46bd      	mov	sp, r7
  4078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4078b8:	4770      	bx	lr
  4078ba:	bf00      	nop
  4078bc:	004137c0 	.word	0x004137c0
  4078c0:	004137c8 	.word	0x004137c8
  4078c4:	004137dc 	.word	0x004137dc
  4078c8:	004137ec 	.word	0x004137ec
  4078cc:	004137fc 	.word	0x004137fc
  4078d0:	00413828 	.word	0x00413828
  4078d4:	0041383c 	.word	0x0041383c
  4078d8:	00413858 	.word	0x00413858
  4078dc:	0041386c 	.word	0x0041386c
  4078e0:	0041387c 	.word	0x0041387c
  4078e4:	0041388c 	.word	0x0041388c
  4078e8:	004138a0 	.word	0x004138a0
  4078ec:	004138b4 	.word	0x004138b4
  4078f0:	004138c8 	.word	0x004138c8
  4078f4:	004138dc 	.word	0x004138dc
  4078f8:	004138f0 	.word	0x004138f0
  4078fc:	00413900 	.word	0x00413900

00407900 <inv_msg_setup>:
	(void)level, (void)str, (void)ap;
#endif
}

void inv_msg_setup(int level, inv_msg_printer_t printer)
{
  407900:	b480      	push	{r7}
  407902:	b083      	sub	sp, #12
  407904:	af00      	add	r7, sp, #0
  407906:	6078      	str	r0, [r7, #4]
  407908:	6039      	str	r1, [r7, #0]
	msg_level   = level;
  40790a:	4a0c      	ldr	r2, [pc, #48]	; (40793c <inv_msg_setup+0x3c>)
  40790c:	687b      	ldr	r3, [r7, #4]
  40790e:	6013      	str	r3, [r2, #0]
	if (level < INV_MSG_LEVEL_OFF)
  407910:	687b      	ldr	r3, [r7, #4]
  407912:	2b00      	cmp	r3, #0
  407914:	da03      	bge.n	40791e <inv_msg_setup+0x1e>
		msg_level = INV_MSG_LEVEL_OFF;
  407916:	4b09      	ldr	r3, [pc, #36]	; (40793c <inv_msg_setup+0x3c>)
  407918:	2200      	movs	r2, #0
  40791a:	601a      	str	r2, [r3, #0]
  40791c:	e005      	b.n	40792a <inv_msg_setup+0x2a>
	else if (level > INV_MSG_LEVEL_MAX)
  40791e:	687b      	ldr	r3, [r7, #4]
  407920:	2b06      	cmp	r3, #6
  407922:	dd02      	ble.n	40792a <inv_msg_setup+0x2a>
		msg_level = INV_MSG_LEVEL_MAX;
  407924:	4b05      	ldr	r3, [pc, #20]	; (40793c <inv_msg_setup+0x3c>)
  407926:	2206      	movs	r2, #6
  407928:	601a      	str	r2, [r3, #0]
	msg_printer = printer;
  40792a:	4a05      	ldr	r2, [pc, #20]	; (407940 <inv_msg_setup+0x40>)
  40792c:	683b      	ldr	r3, [r7, #0]
  40792e:	6013      	str	r3, [r2, #0]
}
  407930:	bf00      	nop
  407932:	370c      	adds	r7, #12
  407934:	46bd      	mov	sp, r7
  407936:	f85d 7b04 	ldr.w	r7, [sp], #4
  40793a:	4770      	bx	lr
  40793c:	20004618 	.word	0x20004618
  407940:	2000461c 	.word	0x2000461c

00407944 <inv_msg>:

void inv_msg(int level, const char * str, ...)
{
  407944:	b40e      	push	{r1, r2, r3}
  407946:	b580      	push	{r7, lr}
  407948:	b085      	sub	sp, #20
  40794a:	af00      	add	r7, sp, #0
  40794c:	6078      	str	r0, [r7, #4]
	if(level && level <= msg_level && msg_printer) {
  40794e:	687b      	ldr	r3, [r7, #4]
  407950:	2b00      	cmp	r3, #0
  407952:	d011      	beq.n	407978 <inv_msg+0x34>
  407954:	4b0c      	ldr	r3, [pc, #48]	; (407988 <inv_msg+0x44>)
  407956:	681b      	ldr	r3, [r3, #0]
  407958:	687a      	ldr	r2, [r7, #4]
  40795a:	429a      	cmp	r2, r3
  40795c:	dc0c      	bgt.n	407978 <inv_msg+0x34>
  40795e:	4b0b      	ldr	r3, [pc, #44]	; (40798c <inv_msg+0x48>)
  407960:	681b      	ldr	r3, [r3, #0]
  407962:	2b00      	cmp	r3, #0
  407964:	d008      	beq.n	407978 <inv_msg+0x34>
		va_list ap;
		va_start(ap, str);
  407966:	f107 0320 	add.w	r3, r7, #32
  40796a:	60fb      	str	r3, [r7, #12]
		msg_printer(level, str, ap);
  40796c:	4b07      	ldr	r3, [pc, #28]	; (40798c <inv_msg+0x48>)
  40796e:	681b      	ldr	r3, [r3, #0]
  407970:	68fa      	ldr	r2, [r7, #12]
  407972:	69f9      	ldr	r1, [r7, #28]
  407974:	6878      	ldr	r0, [r7, #4]
  407976:	4798      	blx	r3
		va_end(ap);
	}
}
  407978:	bf00      	nop
  40797a:	3714      	adds	r7, #20
  40797c:	46bd      	mov	sp, r7
  40797e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
  407982:	b003      	add	sp, #12
  407984:	4770      	bx	lr
  407986:	bf00      	nop
  407988:	20004618 	.word	0x20004618
  40798c:	2000461c 	.word	0x2000461c

00407990 <osc_enable>:
{
  407990:	b580      	push	{r7, lr}
  407992:	b082      	sub	sp, #8
  407994:	af00      	add	r7, sp, #0
  407996:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407998:	687b      	ldr	r3, [r7, #4]
  40799a:	2b07      	cmp	r3, #7
  40799c:	d831      	bhi.n	407a02 <osc_enable+0x72>
  40799e:	a201      	add	r2, pc, #4	; (adr r2, 4079a4 <osc_enable+0x14>)
  4079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4079a4:	00407a01 	.word	0x00407a01
  4079a8:	004079c5 	.word	0x004079c5
  4079ac:	004079cd 	.word	0x004079cd
  4079b0:	004079d5 	.word	0x004079d5
  4079b4:	004079dd 	.word	0x004079dd
  4079b8:	004079e5 	.word	0x004079e5
  4079bc:	004079ed 	.word	0x004079ed
  4079c0:	004079f7 	.word	0x004079f7
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4079c4:	2000      	movs	r0, #0
  4079c6:	4b11      	ldr	r3, [pc, #68]	; (407a0c <osc_enable+0x7c>)
  4079c8:	4798      	blx	r3
		break;
  4079ca:	e01a      	b.n	407a02 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4079cc:	2001      	movs	r0, #1
  4079ce:	4b0f      	ldr	r3, [pc, #60]	; (407a0c <osc_enable+0x7c>)
  4079d0:	4798      	blx	r3
		break;
  4079d2:	e016      	b.n	407a02 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4079d4:	2000      	movs	r0, #0
  4079d6:	4b0e      	ldr	r3, [pc, #56]	; (407a10 <osc_enable+0x80>)
  4079d8:	4798      	blx	r3
		break;
  4079da:	e012      	b.n	407a02 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_16_MHz);
  4079dc:	2010      	movs	r0, #16
  4079de:	4b0c      	ldr	r3, [pc, #48]	; (407a10 <osc_enable+0x80>)
  4079e0:	4798      	blx	r3
		break;
  4079e2:	e00e      	b.n	407a02 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_24_MHz);
  4079e4:	2020      	movs	r0, #32
  4079e6:	4b0a      	ldr	r3, [pc, #40]	; (407a10 <osc_enable+0x80>)
  4079e8:	4798      	blx	r3
		break;
  4079ea:	e00a      	b.n	407a02 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4079ec:	213e      	movs	r1, #62	; 0x3e
  4079ee:	2000      	movs	r0, #0
  4079f0:	4b08      	ldr	r3, [pc, #32]	; (407a14 <osc_enable+0x84>)
  4079f2:	4798      	blx	r3
		break;
  4079f4:	e005      	b.n	407a02 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4079f6:	213e      	movs	r1, #62	; 0x3e
  4079f8:	2001      	movs	r0, #1
  4079fa:	4b06      	ldr	r3, [pc, #24]	; (407a14 <osc_enable+0x84>)
  4079fc:	4798      	blx	r3
		break;
  4079fe:	e000      	b.n	407a02 <osc_enable+0x72>
		break;
  407a00:	bf00      	nop
}
  407a02:	bf00      	nop
  407a04:	3708      	adds	r7, #8
  407a06:	46bd      	mov	sp, r7
  407a08:	bd80      	pop	{r7, pc}
  407a0a:	bf00      	nop
  407a0c:	004088dd 	.word	0x004088dd
  407a10:	00408949 	.word	0x00408949
  407a14:	004089b9 	.word	0x004089b9

00407a18 <osc_is_ready>:
{
  407a18:	b580      	push	{r7, lr}
  407a1a:	b082      	sub	sp, #8
  407a1c:	af00      	add	r7, sp, #0
  407a1e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407a20:	687b      	ldr	r3, [r7, #4]
  407a22:	2b07      	cmp	r3, #7
  407a24:	d826      	bhi.n	407a74 <osc_is_ready+0x5c>
  407a26:	a201      	add	r2, pc, #4	; (adr r2, 407a2c <osc_is_ready+0x14>)
  407a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407a2c:	00407a4d 	.word	0x00407a4d
  407a30:	00407a51 	.word	0x00407a51
  407a34:	00407a51 	.word	0x00407a51
  407a38:	00407a63 	.word	0x00407a63
  407a3c:	00407a63 	.word	0x00407a63
  407a40:	00407a63 	.word	0x00407a63
  407a44:	00407a63 	.word	0x00407a63
  407a48:	00407a63 	.word	0x00407a63
		return 1;
  407a4c:	2301      	movs	r3, #1
  407a4e:	e012      	b.n	407a76 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  407a50:	4b0b      	ldr	r3, [pc, #44]	; (407a80 <osc_is_ready+0x68>)
  407a52:	4798      	blx	r3
  407a54:	4603      	mov	r3, r0
  407a56:	2b00      	cmp	r3, #0
  407a58:	bf14      	ite	ne
  407a5a:	2301      	movne	r3, #1
  407a5c:	2300      	moveq	r3, #0
  407a5e:	b2db      	uxtb	r3, r3
  407a60:	e009      	b.n	407a76 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  407a62:	4b08      	ldr	r3, [pc, #32]	; (407a84 <osc_is_ready+0x6c>)
  407a64:	4798      	blx	r3
  407a66:	4603      	mov	r3, r0
  407a68:	2b00      	cmp	r3, #0
  407a6a:	bf14      	ite	ne
  407a6c:	2301      	movne	r3, #1
  407a6e:	2300      	moveq	r3, #0
  407a70:	b2db      	uxtb	r3, r3
  407a72:	e000      	b.n	407a76 <osc_is_ready+0x5e>
	return 0;
  407a74:	2300      	movs	r3, #0
}
  407a76:	4618      	mov	r0, r3
  407a78:	3708      	adds	r7, #8
  407a7a:	46bd      	mov	sp, r7
  407a7c:	bd80      	pop	{r7, pc}
  407a7e:	bf00      	nop
  407a80:	00408915 	.word	0x00408915
  407a84:	00408a31 	.word	0x00408a31

00407a88 <osc_get_rate>:
{
  407a88:	b480      	push	{r7}
  407a8a:	b083      	sub	sp, #12
  407a8c:	af00      	add	r7, sp, #0
  407a8e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  407a90:	687b      	ldr	r3, [r7, #4]
  407a92:	2b07      	cmp	r3, #7
  407a94:	d825      	bhi.n	407ae2 <osc_get_rate+0x5a>
  407a96:	a201      	add	r2, pc, #4	; (adr r2, 407a9c <osc_get_rate+0x14>)
  407a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407a9c:	00407abd 	.word	0x00407abd
  407aa0:	00407ac3 	.word	0x00407ac3
  407aa4:	00407ac9 	.word	0x00407ac9
  407aa8:	00407acf 	.word	0x00407acf
  407aac:	00407ad3 	.word	0x00407ad3
  407ab0:	00407ad7 	.word	0x00407ad7
  407ab4:	00407adb 	.word	0x00407adb
  407ab8:	00407adf 	.word	0x00407adf
		return OSC_SLCK_32K_RC_HZ;
  407abc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  407ac0:	e010      	b.n	407ae4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  407ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407ac6:	e00d      	b.n	407ae4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  407ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  407acc:	e00a      	b.n	407ae4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  407ace:	4b08      	ldr	r3, [pc, #32]	; (407af0 <osc_get_rate+0x68>)
  407ad0:	e008      	b.n	407ae4 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  407ad2:	4b08      	ldr	r3, [pc, #32]	; (407af4 <osc_get_rate+0x6c>)
  407ad4:	e006      	b.n	407ae4 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  407ad6:	4b08      	ldr	r3, [pc, #32]	; (407af8 <osc_get_rate+0x70>)
  407ad8:	e004      	b.n	407ae4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  407ada:	2300      	movs	r3, #0
  407adc:	e002      	b.n	407ae4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  407ade:	2300      	movs	r3, #0
  407ae0:	e000      	b.n	407ae4 <osc_get_rate+0x5c>
	return 0;
  407ae2:	2300      	movs	r3, #0
}
  407ae4:	4618      	mov	r0, r3
  407ae6:	370c      	adds	r7, #12
  407ae8:	46bd      	mov	sp, r7
  407aea:	f85d 7b04 	ldr.w	r7, [sp], #4
  407aee:	4770      	bx	lr
  407af0:	007a1200 	.word	0x007a1200
  407af4:	00f42400 	.word	0x00f42400
  407af8:	016e3600 	.word	0x016e3600

00407afc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  407afc:	b580      	push	{r7, lr}
  407afe:	b082      	sub	sp, #8
  407b00:	af00      	add	r7, sp, #0
  407b02:	4603      	mov	r3, r0
  407b04:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  407b06:	bf00      	nop
  407b08:	79fb      	ldrb	r3, [r7, #7]
  407b0a:	4618      	mov	r0, r3
  407b0c:	4b05      	ldr	r3, [pc, #20]	; (407b24 <osc_wait_ready+0x28>)
  407b0e:	4798      	blx	r3
  407b10:	4603      	mov	r3, r0
  407b12:	f083 0301 	eor.w	r3, r3, #1
  407b16:	b2db      	uxtb	r3, r3
  407b18:	2b00      	cmp	r3, #0
  407b1a:	d1f5      	bne.n	407b08 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  407b1c:	bf00      	nop
  407b1e:	3708      	adds	r7, #8
  407b20:	46bd      	mov	sp, r7
  407b22:	bd80      	pop	{r7, pc}
  407b24:	00407a19 	.word	0x00407a19

00407b28 <pll_config_init>:
 * \note The SAMG PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  407b28:	b580      	push	{r7, lr}
  407b2a:	b086      	sub	sp, #24
  407b2c:	af00      	add	r7, sp, #0
  407b2e:	60f8      	str	r0, [r7, #12]
  407b30:	607a      	str	r2, [r7, #4]
  407b32:	603b      	str	r3, [r7, #0]
  407b34:	460b      	mov	r3, r1
  407b36:	72fb      	strb	r3, [r7, #11]

	Assert(e_src < PLL_NR_SOURCES);
	Assert(ul_div < 2);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  407b38:	7afb      	ldrb	r3, [r7, #11]
  407b3a:	4618      	mov	r0, r3
  407b3c:	4b0d      	ldr	r3, [pc, #52]	; (407b74 <pll_config_init+0x4c>)
  407b3e:	4798      	blx	r3
  407b40:	4602      	mov	r2, r0
  407b42:	687b      	ldr	r3, [r7, #4]
  407b44:	fbb2 f3f3 	udiv	r3, r2, r3
  407b48:	617b      	str	r3, [r7, #20]

	vco_hz *= ul_mul;
  407b4a:	697b      	ldr	r3, [r7, #20]
  407b4c:	683a      	ldr	r2, [r7, #0]
  407b4e:	fb02 f303 	mul.w	r3, r2, r3
  407b52:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= (PLL_OUTPUT_MIN_HZ - (PLL_OUTPUT_MIN_HZ >> 6)));
	Assert(vco_hz <= (PLL_OUTPUT_MAX_HZ + (PLL_OUTPUT_MAX_HZ >> 6)));

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_PLLAEN(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  407b54:	683b      	ldr	r3, [r7, #0]
  407b56:	3b01      	subs	r3, #1
  407b58:	041a      	lsls	r2, r3, #16
  407b5a:	4b07      	ldr	r3, [pc, #28]	; (407b78 <pll_config_init+0x50>)
  407b5c:	4013      	ands	r3, r2
  407b5e:	687a      	ldr	r2, [r7, #4]
  407b60:	b2d2      	uxtb	r2, r2
  407b62:	4313      	orrs	r3, r2
  407b64:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  407b68:	68fb      	ldr	r3, [r7, #12]
  407b6a:	601a      	str	r2, [r3, #0]
}
  407b6c:	bf00      	nop
  407b6e:	3718      	adds	r7, #24
  407b70:	46bd      	mov	sp, r7
  407b72:	bd80      	pop	{r7, pc}
  407b74:	00407a89 	.word	0x00407a89
  407b78:	1fff0000 	.word	0x1fff0000

00407b7c <pll_enable>:
#endif
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  407b7c:	b580      	push	{r7, lr}
  407b7e:	b082      	sub	sp, #8
  407b80:	af00      	add	r7, sp, #0
  407b82:	6078      	str	r0, [r7, #4]
  407b84:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  407b86:	683b      	ldr	r3, [r7, #0]
  407b88:	2b00      	cmp	r3, #0
  407b8a:	d106      	bne.n	407b9a <pll_enable+0x1e>
		pmc_disable_pllack(); // Always stop PLL first!
  407b8c:	4b08      	ldr	r3, [pc, #32]	; (407bb0 <pll_enable+0x34>)
  407b8e:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  407b90:	4a08      	ldr	r2, [pc, #32]	; (407bb4 <pll_enable+0x38>)
  407b92:	687b      	ldr	r3, [r7, #4]
  407b94:	681b      	ldr	r3, [r3, #0]
  407b96:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck(); // Always stop PLL first!
		PMC->CKGR_PLLBR = p_cfg->ctrl;
#endif
	}
}
  407b98:	e005      	b.n	407ba6 <pll_enable+0x2a>
		pmc_disable_pllbck(); // Always stop PLL first!
  407b9a:	4b07      	ldr	r3, [pc, #28]	; (407bb8 <pll_enable+0x3c>)
  407b9c:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  407b9e:	4a05      	ldr	r2, [pc, #20]	; (407bb4 <pll_enable+0x38>)
  407ba0:	687b      	ldr	r3, [r7, #4]
  407ba2:	681b      	ldr	r3, [r3, #0]
  407ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  407ba6:	bf00      	nop
  407ba8:	3708      	adds	r7, #8
  407baa:	46bd      	mov	sp, r7
  407bac:	bd80      	pop	{r7, pc}
  407bae:	bf00      	nop
  407bb0:	00408a4d 	.word	0x00408a4d
  407bb4:	400e0400 	.word	0x400e0400
  407bb8:	00408a81 	.word	0x00408a81

00407bbc <pll_is_locked>:
#endif
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  407bbc:	b580      	push	{r7, lr}
  407bbe:	b082      	sub	sp, #8
  407bc0:	af00      	add	r7, sp, #0
  407bc2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  407bc4:	687b      	ldr	r3, [r7, #4]
  407bc6:	2b00      	cmp	r3, #0
  407bc8:	d103      	bne.n	407bd2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  407bca:	4b08      	ldr	r3, [pc, #32]	; (407bec <pll_is_locked+0x30>)
  407bcc:	4798      	blx	r3
  407bce:	4603      	mov	r3, r0
  407bd0:	e007      	b.n	407be2 <pll_is_locked+0x26>
#if SAMG55
	} else if (ul_pll_id == PLLB_ID) {
  407bd2:	687b      	ldr	r3, [r7, #4]
  407bd4:	2b01      	cmp	r3, #1
  407bd6:	d103      	bne.n	407be0 <pll_is_locked+0x24>
		return pmc_is_locked_pllbck();
  407bd8:	4b05      	ldr	r3, [pc, #20]	; (407bf0 <pll_is_locked+0x34>)
  407bda:	4798      	blx	r3
  407bdc:	4603      	mov	r3, r0
  407bde:	e000      	b.n	407be2 <pll_is_locked+0x26>
#endif
	} else {
		return 0;
  407be0:	2300      	movs	r3, #0
	}
}
  407be2:	4618      	mov	r0, r3
  407be4:	3708      	adds	r7, #8
  407be6:	46bd      	mov	sp, r7
  407be8:	bd80      	pop	{r7, pc}
  407bea:	bf00      	nop
  407bec:	00408a65 	.word	0x00408a65
  407bf0:	00408a99 	.word	0x00408a99

00407bf4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  407bf4:	b580      	push	{r7, lr}
  407bf6:	b082      	sub	sp, #8
  407bf8:	af00      	add	r7, sp, #0
  407bfa:	4603      	mov	r3, r0
  407bfc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  407bfe:	79fb      	ldrb	r3, [r7, #7]
  407c00:	3300      	adds	r3, #0
  407c02:	2b01      	cmp	r3, #1
  407c04:	d808      	bhi.n	407c18 <pll_enable_source+0x24>
	case PLL_SRC_SLCK_RC:
	case PLL_SRC_SLCK_XTAL:
		osc_enable(e_src);
  407c06:	79fb      	ldrb	r3, [r7, #7]
  407c08:	4618      	mov	r0, r3
  407c0a:	4b06      	ldr	r3, [pc, #24]	; (407c24 <pll_enable_source+0x30>)
  407c0c:	4798      	blx	r3
		osc_wait_ready(e_src);
  407c0e:	79fb      	ldrb	r3, [r7, #7]
  407c10:	4618      	mov	r0, r3
  407c12:	4b05      	ldr	r3, [pc, #20]	; (407c28 <pll_enable_source+0x34>)
  407c14:	4798      	blx	r3
		break;
  407c16:	e000      	b.n	407c1a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  407c18:	bf00      	nop
	}
}
  407c1a:	bf00      	nop
  407c1c:	3708      	adds	r7, #8
  407c1e:	46bd      	mov	sp, r7
  407c20:	bd80      	pop	{r7, pc}
  407c22:	bf00      	nop
  407c24:	00407991 	.word	0x00407991
  407c28:	00407afd 	.word	0x00407afd

00407c2c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  407c2c:	b580      	push	{r7, lr}
  407c2e:	b082      	sub	sp, #8
  407c30:	af00      	add	r7, sp, #0
  407c32:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  407c34:	bf00      	nop
  407c36:	6878      	ldr	r0, [r7, #4]
  407c38:	4b04      	ldr	r3, [pc, #16]	; (407c4c <pll_wait_for_lock+0x20>)
  407c3a:	4798      	blx	r3
  407c3c:	4603      	mov	r3, r0
  407c3e:	2b00      	cmp	r3, #0
  407c40:	d0f9      	beq.n	407c36 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  407c42:	2300      	movs	r3, #0
}
  407c44:	4618      	mov	r0, r3
  407c46:	3708      	adds	r7, #8
  407c48:	46bd      	mov	sp, r7
  407c4a:	bd80      	pop	{r7, pc}
  407c4c:	00407bbd 	.word	0x00407bbd

00407c50 <sysclk_get_main_hz>:
{
  407c50:	b580      	push	{r7, lr}
  407c52:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  407c54:	2001      	movs	r0, #1
  407c56:	4b04      	ldr	r3, [pc, #16]	; (407c68 <sysclk_get_main_hz+0x18>)
  407c58:	4798      	blx	r3
  407c5a:	4602      	mov	r2, r0
  407c5c:	f640 634e 	movw	r3, #3662	; 0xe4e
  407c60:	fb03 f302 	mul.w	r3, r3, r2
}
  407c64:	4618      	mov	r0, r3
  407c66:	bd80      	pop	{r7, pc}
  407c68:	00407a89 	.word	0x00407a89

00407c6c <sysclk_get_cpu_hz>:
{
  407c6c:	b580      	push	{r7, lr}
  407c6e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  407c70:	4b02      	ldr	r3, [pc, #8]	; (407c7c <sysclk_get_cpu_hz+0x10>)
  407c72:	4798      	blx	r3
  407c74:	4603      	mov	r3, r0
}
  407c76:	4618      	mov	r0, r3
  407c78:	bd80      	pop	{r7, pc}
  407c7a:	bf00      	nop
  407c7c:	00407c51 	.word	0x00407c51

00407c80 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  407c80:	b590      	push	{r4, r7, lr}
  407c82:	b0a7      	sub	sp, #156	; 0x9c
  407c84:	af02      	add	r7, sp, #8
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  407c86:	4821      	ldr	r0, [pc, #132]	; (407d0c <sysclk_init+0x8c>)
  407c88:	4b21      	ldr	r3, [pc, #132]	; (407d10 <sysclk_init+0x90>)
  407c8a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  407c8c:	2001      	movs	r0, #1
  407c8e:	4b21      	ldr	r3, [pc, #132]	; (407d14 <sysclk_init+0x94>)
  407c90:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  407c92:	f107 0008 	add.w	r0, r7, #8
  407c96:	f640 634e 	movw	r3, #3662	; 0xe4e
  407c9a:	2201      	movs	r2, #1
  407c9c:	2101      	movs	r1, #1
  407c9e:	4c1e      	ldr	r4, [pc, #120]	; (407d18 <sysclk_init+0x98>)
  407ca0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  407ca2:	f107 0308 	add.w	r3, r7, #8
  407ca6:	2100      	movs	r1, #0
  407ca8:	4618      	mov	r0, r3
  407caa:	4b1c      	ldr	r3, [pc, #112]	; (407d1c <sysclk_init+0x9c>)
  407cac:	4798      	blx	r3
		pll_wait_for_lock(0);
  407cae:	2000      	movs	r0, #0
  407cb0:	4b1b      	ldr	r3, [pc, #108]	; (407d20 <sysclk_init+0xa0>)
  407cb2:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  407cb4:	2000      	movs	r0, #0
  407cb6:	4b1b      	ldr	r3, [pc, #108]	; (407d24 <sysclk_init+0xa4>)
  407cb8:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  407cba:	4b1b      	ldr	r3, [pc, #108]	; (407d28 <sysclk_init+0xa8>)
  407cbc:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  407cbe:	4b1b      	ldr	r3, [pc, #108]	; (407d2c <sysclk_init+0xac>)
  407cc0:	4798      	blx	r3
  407cc2:	4603      	mov	r3, r0
  407cc4:	4618      	mov	r0, r3
  407cc6:	4b12      	ldr	r3, [pc, #72]	; (407d10 <sysclk_init+0x90>)
  407cc8:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  407cca:	4b19      	ldr	r3, [pc, #100]	; (407d30 <sysclk_init+0xb0>)
  407ccc:	681b      	ldr	r3, [r3, #0]
  407cce:	4a19      	ldr	r2, [pc, #100]	; (407d34 <sysclk_init+0xb4>)
  407cd0:	4293      	cmp	r3, r2
  407cd2:	d817      	bhi.n	407d04 <sysclk_init+0x84>
	(SystemCoreClock >= (CHIP_FREQ_CPU_MAX - (CHIP_FREQ_CPU_MAX >> 3)))) {
  407cd4:	4b16      	ldr	r3, [pc, #88]	; (407d30 <sysclk_init+0xb0>)
  407cd6:	681b      	ldr	r3, [r3, #0]
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  407cd8:	4a17      	ldr	r2, [pc, #92]	; (407d38 <sysclk_init+0xb8>)
  407cda:	4293      	cmp	r3, r2
  407cdc:	d912      	bls.n	407d04 <sysclk_init+0x84>
		/* Get the trim value from unique ID area */
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  407cde:	f107 020c 	add.w	r2, r7, #12
  407ce2:	2320      	movs	r3, #32
  407ce4:	9300      	str	r3, [sp, #0]
  407ce6:	4613      	mov	r3, r2
  407ce8:	220f      	movs	r2, #15
  407cea:	210e      	movs	r1, #14
  407cec:	4813      	ldr	r0, [pc, #76]	; (407d3c <sysclk_init+0xbc>)
  407cee:	4c14      	ldr	r4, [pc, #80]	; (407d40 <sysclk_init+0xc0>)
  407cf0:	47a0      	blx	r4
		unique_id, 32);
		
		/* According to Atmel's support, the trim value to reach 120MHz
		is provided in MSB of unique_id[16] instead of LSB */
		trim_value = (unique_id[16] & 0xFFFF0000) >> 16;
  407cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407cf4:	0c1b      	lsrs	r3, r3, #16
  407cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		supc_set_regulator_trim_user(SUPC, trim_value);
  407cfa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
  407cfe:	4811      	ldr	r0, [pc, #68]	; (407d44 <sysclk_init+0xc4>)
  407d00:	4b11      	ldr	r3, [pc, #68]	; (407d48 <sysclk_init+0xc8>)
  407d02:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  407d04:	bf00      	nop
  407d06:	3794      	adds	r7, #148	; 0x94
  407d08:	46bd      	mov	sp, r7
  407d0a:	bd90      	pop	{r4, r7, pc}
  407d0c:	07270e00 	.word	0x07270e00
  407d10:	00409a0d 	.word	0x00409a0d
  407d14:	00407bf5 	.word	0x00407bf5
  407d18:	00407b29 	.word	0x00407b29
  407d1c:	00407b7d 	.word	0x00407b7d
  407d20:	00407c2d 	.word	0x00407c2d
  407d24:	00408859 	.word	0x00408859
  407d28:	004098e9 	.word	0x004098e9
  407d2c:	00407c6d 	.word	0x00407c6d
  407d30:	20002514 	.word	0x20002514
  407d34:	080befc0 	.word	0x080befc0
  407d38:	06422c3f 	.word	0x06422c3f
  407d3c:	400e0a00 	.word	0x400e0a00
  407d40:	20000001 	.word	0x20000001
  407d44:	400e1410 	.word	0x400e1410
  407d48:	00408ecd 	.word	0x00408ecd

00407d4c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  407d4c:	b480      	push	{r7}
  407d4e:	b083      	sub	sp, #12
  407d50:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  407d52:	f3ef 8310 	mrs	r3, PRIMASK
  407d56:	607b      	str	r3, [r7, #4]
  return(result);
  407d58:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  407d5a:	2b00      	cmp	r3, #0
  407d5c:	bf0c      	ite	eq
  407d5e:	2301      	moveq	r3, #1
  407d60:	2300      	movne	r3, #0
  407d62:	b2db      	uxtb	r3, r3
  407d64:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  407d66:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  407d68:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  407d6c:	4b04      	ldr	r3, [pc, #16]	; (407d80 <cpu_irq_save+0x34>)
  407d6e:	2200      	movs	r2, #0
  407d70:	701a      	strb	r2, [r3, #0]
	return flags;
  407d72:	683b      	ldr	r3, [r7, #0]
}
  407d74:	4618      	mov	r0, r3
  407d76:	370c      	adds	r7, #12
  407d78:	46bd      	mov	sp, r7
  407d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d7e:	4770      	bx	lr
  407d80:	20002510 	.word	0x20002510

00407d84 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  407d84:	b480      	push	{r7}
  407d86:	b083      	sub	sp, #12
  407d88:	af00      	add	r7, sp, #0
  407d8a:	6078      	str	r0, [r7, #4]
	return (flags);
  407d8c:	687b      	ldr	r3, [r7, #4]
  407d8e:	2b00      	cmp	r3, #0
  407d90:	bf14      	ite	ne
  407d92:	2301      	movne	r3, #1
  407d94:	2300      	moveq	r3, #0
  407d96:	b2db      	uxtb	r3, r3
}
  407d98:	4618      	mov	r0, r3
  407d9a:	370c      	adds	r7, #12
  407d9c:	46bd      	mov	sp, r7
  407d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407da2:	4770      	bx	lr

00407da4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  407da4:	b580      	push	{r7, lr}
  407da6:	b082      	sub	sp, #8
  407da8:	af00      	add	r7, sp, #0
  407daa:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  407dac:	6878      	ldr	r0, [r7, #4]
  407dae:	4b07      	ldr	r3, [pc, #28]	; (407dcc <cpu_irq_restore+0x28>)
  407db0:	4798      	blx	r3
  407db2:	4603      	mov	r3, r0
  407db4:	2b00      	cmp	r3, #0
  407db6:	d005      	beq.n	407dc4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  407db8:	4b05      	ldr	r3, [pc, #20]	; (407dd0 <cpu_irq_restore+0x2c>)
  407dba:	2201      	movs	r2, #1
  407dbc:	701a      	strb	r2, [r3, #0]
  407dbe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  407dc2:	b662      	cpsie	i
}
  407dc4:	bf00      	nop
  407dc6:	3708      	adds	r7, #8
  407dc8:	46bd      	mov	sp, r7
  407dca:	bd80      	pop	{r7, pc}
  407dcc:	00407d85 	.word	0x00407d85
  407dd0:	20002510 	.word	0x20002510

00407dd4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
  407dd4:	b580      	push	{r7, lr}
  407dd6:	b084      	sub	sp, #16
  407dd8:	af00      	add	r7, sp, #0
  407dda:	60f8      	str	r0, [r7, #12]
  407ddc:	60b9      	str	r1, [r7, #8]
  407dde:	607a      	str	r2, [r7, #4]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
  407de0:	687b      	ldr	r3, [r7, #4]
  407de2:	021b      	lsls	r3, r3, #8
  407de4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
  407de8:	68bb      	ldr	r3, [r7, #8]
  407dea:	4313      	orrs	r3, r2
  407dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  407df0:	4619      	mov	r1, r3
  407df2:	68f8      	ldr	r0, [r7, #12]
  407df4:	4b03      	ldr	r3, [pc, #12]	; (407e04 <efc_init+0x30>)
  407df6:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif
	return EFC_RC_OK;
  407df8:	2300      	movs	r3, #0
}
  407dfa:	4618      	mov	r0, r3
  407dfc:	3710      	adds	r7, #16
  407dfe:	46bd      	mov	sp, r7
  407e00:	bd80      	pop	{r7, pc}
  407e02:	bf00      	nop
  407e04:	200000a5 	.word	0x200000a5

00407e08 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  407e08:	b580      	push	{r7, lr}
  407e0a:	b086      	sub	sp, #24
  407e0c:	af00      	add	r7, sp, #0
  407e0e:	60f8      	str	r0, [r7, #12]
  407e10:	60b9      	str	r1, [r7, #8]
  407e12:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  407e14:	68bb      	ldr	r3, [r7, #8]
  407e16:	2b0e      	cmp	r3, #14
  407e18:	d002      	beq.n	407e20 <efc_perform_command+0x18>
  407e1a:	68bb      	ldr	r3, [r7, #8]
  407e1c:	2b0f      	cmp	r3, #15
  407e1e:	d102      	bne.n	407e26 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
  407e20:	f04f 33ff 	mov.w	r3, #4294967295
  407e24:	e016      	b.n	407e54 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
  407e26:	4b0d      	ldr	r3, [pc, #52]	; (407e5c <efc_perform_command+0x54>)
  407e28:	4798      	blx	r3
  407e2a:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  407e2c:	687b      	ldr	r3, [r7, #4]
  407e2e:	021b      	lsls	r3, r3, #8
  407e30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  407e34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
  407e38:	68ba      	ldr	r2, [r7, #8]
  407e3a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  407e3c:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
  407e3e:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  407e42:	4619      	mov	r1, r3
  407e44:	68f8      	ldr	r0, [r7, #12]
  407e46:	4b06      	ldr	r3, [pc, #24]	; (407e60 <efc_perform_command+0x58>)
  407e48:	4798      	blx	r3
  407e4a:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
  407e4c:	6978      	ldr	r0, [r7, #20]
  407e4e:	4b05      	ldr	r3, [pc, #20]	; (407e64 <efc_perform_command+0x5c>)
  407e50:	4798      	blx	r3
	return result;
  407e52:	693b      	ldr	r3, [r7, #16]
}
  407e54:	4618      	mov	r0, r3
  407e56:	3718      	adds	r7, #24
  407e58:	46bd      	mov	sp, r7
  407e5a:	bd80      	pop	{r7, pc}
  407e5c:	00407d4d 	.word	0x00407d4d
  407e60:	200000c1 	.word	0x200000c1
  407e64:	00407da5 	.word	0x00407da5

00407e68 <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
  407e68:	b480      	push	{r7}
  407e6a:	b083      	sub	sp, #12
  407e6c:	af00      	add	r7, sp, #0
  407e6e:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
  407e70:	687b      	ldr	r3, [r7, #4]
  407e72:	68db      	ldr	r3, [r3, #12]
}
  407e74:	4618      	mov	r0, r3
  407e76:	370c      	adds	r7, #12
  407e78:	46bd      	mov	sp, r7
  407e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  407e7e:	4770      	bx	lr

00407e80 <cpu_irq_save>:
{
  407e80:	b480      	push	{r7}
  407e82:	b083      	sub	sp, #12
  407e84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  407e86:	f3ef 8310 	mrs	r3, PRIMASK
  407e8a:	607b      	str	r3, [r7, #4]
  return(result);
  407e8c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  407e8e:	2b00      	cmp	r3, #0
  407e90:	bf0c      	ite	eq
  407e92:	2301      	moveq	r3, #1
  407e94:	2300      	movne	r3, #0
  407e96:	b2db      	uxtb	r3, r3
  407e98:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  407e9a:	b672      	cpsid	i
  407e9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  407ea0:	4b04      	ldr	r3, [pc, #16]	; (407eb4 <cpu_irq_save+0x34>)
  407ea2:	2200      	movs	r2, #0
  407ea4:	701a      	strb	r2, [r3, #0]
	return flags;
  407ea6:	683b      	ldr	r3, [r7, #0]
}
  407ea8:	4618      	mov	r0, r3
  407eaa:	370c      	adds	r7, #12
  407eac:	46bd      	mov	sp, r7
  407eae:	f85d 7b04 	ldr.w	r7, [sp], #4
  407eb2:	4770      	bx	lr
  407eb4:	20002510 	.word	0x20002510

00407eb8 <cpu_irq_is_enabled_flags>:
{
  407eb8:	b480      	push	{r7}
  407eba:	b083      	sub	sp, #12
  407ebc:	af00      	add	r7, sp, #0
  407ebe:	6078      	str	r0, [r7, #4]
	return (flags);
  407ec0:	687b      	ldr	r3, [r7, #4]
  407ec2:	2b00      	cmp	r3, #0
  407ec4:	bf14      	ite	ne
  407ec6:	2301      	movne	r3, #1
  407ec8:	2300      	moveq	r3, #0
  407eca:	b2db      	uxtb	r3, r3
}
  407ecc:	4618      	mov	r0, r3
  407ece:	370c      	adds	r7, #12
  407ed0:	46bd      	mov	sp, r7
  407ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
  407ed6:	4770      	bx	lr

00407ed8 <cpu_irq_restore>:
{
  407ed8:	b580      	push	{r7, lr}
  407eda:	b082      	sub	sp, #8
  407edc:	af00      	add	r7, sp, #0
  407ede:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  407ee0:	6878      	ldr	r0, [r7, #4]
  407ee2:	4b07      	ldr	r3, [pc, #28]	; (407f00 <cpu_irq_restore+0x28>)
  407ee4:	4798      	blx	r3
  407ee6:	4603      	mov	r3, r0
  407ee8:	2b00      	cmp	r3, #0
  407eea:	d005      	beq.n	407ef8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  407eec:	4b05      	ldr	r3, [pc, #20]	; (407f04 <cpu_irq_restore+0x2c>)
  407eee:	2201      	movs	r2, #1
  407ef0:	701a      	strb	r2, [r3, #0]
  407ef2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  407ef6:	b662      	cpsie	i
}
  407ef8:	bf00      	nop
  407efa:	3708      	adds	r7, #8
  407efc:	46bd      	mov	sp, r7
  407efe:	bd80      	pop	{r7, pc}
  407f00:	00407eb9 	.word	0x00407eb9
  407f04:	20002510 	.word	0x20002510

00407f08 <sysclk_enable_peripheral_clock>:
{
  407f08:	b580      	push	{r7, lr}
  407f0a:	b082      	sub	sp, #8
  407f0c:	af00      	add	r7, sp, #0
  407f0e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  407f10:	6878      	ldr	r0, [r7, #4]
  407f12:	4b03      	ldr	r3, [pc, #12]	; (407f20 <sysclk_enable_peripheral_clock+0x18>)
  407f14:	4798      	blx	r3
}
  407f16:	bf00      	nop
  407f18:	3708      	adds	r7, #8
  407f1a:	46bd      	mov	sp, r7
  407f1c:	bd80      	pop	{r7, pc}
  407f1e:	bf00      	nop
  407f20:	00408ab5 	.word	0x00408ab5

00407f24 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  407f24:	b580      	push	{r7, lr}
  407f26:	b084      	sub	sp, #16
  407f28:	af00      	add	r7, sp, #0
  407f2a:	4603      	mov	r3, r0
  407f2c:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  407f2e:	79fb      	ldrb	r3, [r7, #7]
  407f30:	4a0a      	ldr	r2, [pc, #40]	; (407f5c <sleepmgr_lock_mode+0x38>)
  407f32:	5cd3      	ldrb	r3, [r2, r3]
  407f34:	2bff      	cmp	r3, #255	; 0xff
  407f36:	d100      	bne.n	407f3a <sleepmgr_lock_mode+0x16>
		while (true) {
  407f38:	e7fe      	b.n	407f38 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  407f3a:	4b09      	ldr	r3, [pc, #36]	; (407f60 <sleepmgr_lock_mode+0x3c>)
  407f3c:	4798      	blx	r3
  407f3e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  407f40:	79fb      	ldrb	r3, [r7, #7]
  407f42:	4a06      	ldr	r2, [pc, #24]	; (407f5c <sleepmgr_lock_mode+0x38>)
  407f44:	5cd2      	ldrb	r2, [r2, r3]
  407f46:	3201      	adds	r2, #1
  407f48:	b2d1      	uxtb	r1, r2
  407f4a:	4a04      	ldr	r2, [pc, #16]	; (407f5c <sleepmgr_lock_mode+0x38>)
  407f4c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  407f4e:	68f8      	ldr	r0, [r7, #12]
  407f50:	4b04      	ldr	r3, [pc, #16]	; (407f64 <sleepmgr_lock_mode+0x40>)
  407f52:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  407f54:	bf00      	nop
  407f56:	3710      	adds	r7, #16
  407f58:	46bd      	mov	sp, r7
  407f5a:	bd80      	pop	{r7, pc}
  407f5c:	20004ad8 	.word	0x20004ad8
  407f60:	00407e81 	.word	0x00407e81
  407f64:	00407ed9 	.word	0x00407ed9

00407f68 <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  407f68:	b580      	push	{r7, lr}
  407f6a:	b082      	sub	sp, #8
  407f6c:	af00      	add	r7, sp, #0
  407f6e:	6078      	str	r0, [r7, #4]
#if SAMG55
    #define PMC_PCK_PRES_CLK_1  PMC_PCK_PRES(0)
#endif

	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
  407f70:	2000      	movs	r0, #0
  407f72:	4b4a      	ldr	r3, [pc, #296]	; (40809c <flexcom_enable+0x134>)
  407f74:	4798      	blx	r3
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  407f76:	687b      	ldr	r3, [r7, #4]
  407f78:	4a49      	ldr	r2, [pc, #292]	; (4080a0 <flexcom_enable+0x138>)
  407f7a:	4293      	cmp	r3, r2
  407f7c:	d10d      	bne.n	407f9a <flexcom_enable+0x32>
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
  407f7e:	2007      	movs	r0, #7
  407f80:	4b48      	ldr	r3, [pc, #288]	; (4080a4 <flexcom_enable+0x13c>)
  407f82:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  407f84:	2007      	movs	r0, #7
  407f86:	4b48      	ldr	r3, [pc, #288]	; (4080a8 <flexcom_enable+0x140>)
  407f88:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  407f8a:	2100      	movs	r1, #0
  407f8c:	2007      	movs	r0, #7
  407f8e:	4b47      	ldr	r3, [pc, #284]	; (4080ac <flexcom_enable+0x144>)
  407f90:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  407f92:	2007      	movs	r0, #7
  407f94:	4b46      	ldr	r3, [pc, #280]	; (4080b0 <flexcom_enable+0x148>)
  407f96:	4798      	blx	r3
	} else
#endif
	{
		Assert(false);
	}
}
  407f98:	e07c      	b.n	408094 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM6) {
  407f9a:	687b      	ldr	r3, [r7, #4]
  407f9c:	4a45      	ldr	r2, [pc, #276]	; (4080b4 <flexcom_enable+0x14c>)
  407f9e:	4293      	cmp	r3, r2
  407fa0:	d10d      	bne.n	407fbe <flexcom_enable+0x56>
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
  407fa2:	2016      	movs	r0, #22
  407fa4:	4b3f      	ldr	r3, [pc, #252]	; (4080a4 <flexcom_enable+0x13c>)
  407fa6:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  407fa8:	2007      	movs	r0, #7
  407faa:	4b3f      	ldr	r3, [pc, #252]	; (4080a8 <flexcom_enable+0x140>)
  407fac:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  407fae:	2100      	movs	r1, #0
  407fb0:	2007      	movs	r0, #7
  407fb2:	4b3e      	ldr	r3, [pc, #248]	; (4080ac <flexcom_enable+0x144>)
  407fb4:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  407fb6:	2007      	movs	r0, #7
  407fb8:	4b3d      	ldr	r3, [pc, #244]	; (4080b0 <flexcom_enable+0x148>)
  407fba:	4798      	blx	r3
}
  407fbc:	e06a      	b.n	408094 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM5) {
  407fbe:	687b      	ldr	r3, [r7, #4]
  407fc0:	4a3d      	ldr	r2, [pc, #244]	; (4080b8 <flexcom_enable+0x150>)
  407fc2:	4293      	cmp	r3, r2
  407fc4:	d10d      	bne.n	407fe2 <flexcom_enable+0x7a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
  407fc6:	2015      	movs	r0, #21
  407fc8:	4b36      	ldr	r3, [pc, #216]	; (4080a4 <flexcom_enable+0x13c>)
  407fca:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  407fcc:	2007      	movs	r0, #7
  407fce:	4b36      	ldr	r3, [pc, #216]	; (4080a8 <flexcom_enable+0x140>)
  407fd0:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  407fd2:	2100      	movs	r1, #0
  407fd4:	2007      	movs	r0, #7
  407fd6:	4b35      	ldr	r3, [pc, #212]	; (4080ac <flexcom_enable+0x144>)
  407fd8:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  407fda:	2007      	movs	r0, #7
  407fdc:	4b34      	ldr	r3, [pc, #208]	; (4080b0 <flexcom_enable+0x148>)
  407fde:	4798      	blx	r3
}
  407fe0:	e058      	b.n	408094 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM4) {
  407fe2:	687b      	ldr	r3, [r7, #4]
  407fe4:	4a35      	ldr	r2, [pc, #212]	; (4080bc <flexcom_enable+0x154>)
  407fe6:	4293      	cmp	r3, r2
  407fe8:	d10d      	bne.n	408006 <flexcom_enable+0x9e>
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
  407fea:	2014      	movs	r0, #20
  407fec:	4b2d      	ldr	r3, [pc, #180]	; (4080a4 <flexcom_enable+0x13c>)
  407fee:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  407ff0:	2007      	movs	r0, #7
  407ff2:	4b2d      	ldr	r3, [pc, #180]	; (4080a8 <flexcom_enable+0x140>)
  407ff4:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  407ff6:	2100      	movs	r1, #0
  407ff8:	2007      	movs	r0, #7
  407ffa:	4b2c      	ldr	r3, [pc, #176]	; (4080ac <flexcom_enable+0x144>)
  407ffc:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  407ffe:	2007      	movs	r0, #7
  408000:	4b2b      	ldr	r3, [pc, #172]	; (4080b0 <flexcom_enable+0x148>)
  408002:	4798      	blx	r3
}
  408004:	e046      	b.n	408094 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM3) {
  408006:	687b      	ldr	r3, [r7, #4]
  408008:	4a2d      	ldr	r2, [pc, #180]	; (4080c0 <flexcom_enable+0x158>)
  40800a:	4293      	cmp	r3, r2
  40800c:	d10d      	bne.n	40802a <flexcom_enable+0xc2>
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
  40800e:	2013      	movs	r0, #19
  408010:	4b24      	ldr	r3, [pc, #144]	; (4080a4 <flexcom_enable+0x13c>)
  408012:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  408014:	2006      	movs	r0, #6
  408016:	4b24      	ldr	r3, [pc, #144]	; (4080a8 <flexcom_enable+0x140>)
  408018:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40801a:	2100      	movs	r1, #0
  40801c:	2006      	movs	r0, #6
  40801e:	4b23      	ldr	r3, [pc, #140]	; (4080ac <flexcom_enable+0x144>)
  408020:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  408022:	2006      	movs	r0, #6
  408024:	4b22      	ldr	r3, [pc, #136]	; (4080b0 <flexcom_enable+0x148>)
  408026:	4798      	blx	r3
}
  408028:	e034      	b.n	408094 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM2) {
  40802a:	687b      	ldr	r3, [r7, #4]
  40802c:	4a25      	ldr	r2, [pc, #148]	; (4080c4 <flexcom_enable+0x15c>)
  40802e:	4293      	cmp	r3, r2
  408030:	d10d      	bne.n	40804e <flexcom_enable+0xe6>
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
  408032:	200e      	movs	r0, #14
  408034:	4b1b      	ldr	r3, [pc, #108]	; (4080a4 <flexcom_enable+0x13c>)
  408036:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  408038:	2006      	movs	r0, #6
  40803a:	4b1b      	ldr	r3, [pc, #108]	; (4080a8 <flexcom_enable+0x140>)
  40803c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  40803e:	2100      	movs	r1, #0
  408040:	2006      	movs	r0, #6
  408042:	4b1a      	ldr	r3, [pc, #104]	; (4080ac <flexcom_enable+0x144>)
  408044:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  408046:	2006      	movs	r0, #6
  408048:	4b19      	ldr	r3, [pc, #100]	; (4080b0 <flexcom_enable+0x148>)
  40804a:	4798      	blx	r3
}
  40804c:	e022      	b.n	408094 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM1) {
  40804e:	687b      	ldr	r3, [r7, #4]
  408050:	4a1d      	ldr	r2, [pc, #116]	; (4080c8 <flexcom_enable+0x160>)
  408052:	4293      	cmp	r3, r2
  408054:	d10d      	bne.n	408072 <flexcom_enable+0x10a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
  408056:	2009      	movs	r0, #9
  408058:	4b12      	ldr	r3, [pc, #72]	; (4080a4 <flexcom_enable+0x13c>)
  40805a:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  40805c:	2006      	movs	r0, #6
  40805e:	4b12      	ldr	r3, [pc, #72]	; (4080a8 <flexcom_enable+0x140>)
  408060:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  408062:	2100      	movs	r1, #0
  408064:	2006      	movs	r0, #6
  408066:	4b11      	ldr	r3, [pc, #68]	; (4080ac <flexcom_enable+0x144>)
  408068:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  40806a:	2006      	movs	r0, #6
  40806c:	4b10      	ldr	r3, [pc, #64]	; (4080b0 <flexcom_enable+0x148>)
  40806e:	4798      	blx	r3
}
  408070:	e010      	b.n	408094 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM0) {
  408072:	687b      	ldr	r3, [r7, #4]
  408074:	4a15      	ldr	r2, [pc, #84]	; (4080cc <flexcom_enable+0x164>)
  408076:	4293      	cmp	r3, r2
  408078:	d10c      	bne.n	408094 <flexcom_enable+0x12c>
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
  40807a:	2008      	movs	r0, #8
  40807c:	4b09      	ldr	r3, [pc, #36]	; (4080a4 <flexcom_enable+0x13c>)
  40807e:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  408080:	2006      	movs	r0, #6
  408082:	4b09      	ldr	r3, [pc, #36]	; (4080a8 <flexcom_enable+0x140>)
  408084:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  408086:	2100      	movs	r1, #0
  408088:	2006      	movs	r0, #6
  40808a:	4b08      	ldr	r3, [pc, #32]	; (4080ac <flexcom_enable+0x144>)
  40808c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  40808e:	2006      	movs	r0, #6
  408090:	4b07      	ldr	r3, [pc, #28]	; (4080b0 <flexcom_enable+0x148>)
  408092:	4798      	blx	r3
}
  408094:	bf00      	nop
  408096:	3708      	adds	r7, #8
  408098:	46bd      	mov	sp, r7
  40809a:	bd80      	pop	{r7, pc}
  40809c:	00407f25 	.word	0x00407f25
  4080a0:	40034000 	.word	0x40034000
  4080a4:	00407f09 	.word	0x00407f09
  4080a8:	00408bb9 	.word	0x00408bb9
  4080ac:	00408b39 	.word	0x00408b39
  4080b0:	00408b91 	.word	0x00408b91
  4080b4:	40040000 	.word	0x40040000
  4080b8:	40008000 	.word	0x40008000
  4080bc:	4001c000 	.word	0x4001c000
  4080c0:	40018000 	.word	0x40018000
  4080c4:	40024000 	.word	0x40024000
  4080c8:	40020000 	.word	0x40020000
  4080cc:	4000c000 	.word	0x4000c000

004080d0 <flexcom_set_opmode>:
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
  4080d0:	b480      	push	{r7}
  4080d2:	b083      	sub	sp, #12
  4080d4:	af00      	add	r7, sp, #0
  4080d6:	6078      	str	r0, [r7, #4]
  4080d8:	460b      	mov	r3, r1
  4080da:	70fb      	strb	r3, [r7, #3]
	p_flexcom->FLEXCOM_MR = opmode;
  4080dc:	78fa      	ldrb	r2, [r7, #3]
  4080de:	687b      	ldr	r3, [r7, #4]
  4080e0:	601a      	str	r2, [r3, #0]
}
  4080e2:	bf00      	nop
  4080e4:	370c      	adds	r7, #12
  4080e6:	46bd      	mov	sp, r7
  4080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4080ec:	4770      	bx	lr

004080ee <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  4080ee:	b480      	push	{r7}
  4080f0:	b085      	sub	sp, #20
  4080f2:	af00      	add	r7, sp, #0
  4080f4:	60f8      	str	r0, [r7, #12]
  4080f6:	60b9      	str	r1, [r7, #8]
  4080f8:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  4080fa:	68bb      	ldr	r3, [r7, #8]
  4080fc:	2b00      	cmp	r3, #0
  4080fe:	d007      	beq.n	408110 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  408100:	68bb      	ldr	r3, [r7, #8]
  408102:	681a      	ldr	r2, [r3, #0]
  408104:	68fb      	ldr	r3, [r7, #12]
  408106:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  408108:	68bb      	ldr	r3, [r7, #8]
  40810a:	685a      	ldr	r2, [r3, #4]
  40810c:	68fb      	ldr	r3, [r7, #12]
  40810e:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  408110:	687b      	ldr	r3, [r7, #4]
  408112:	2b00      	cmp	r3, #0
  408114:	d007      	beq.n	408126 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  408116:	687b      	ldr	r3, [r7, #4]
  408118:	681a      	ldr	r2, [r3, #0]
  40811a:	68fb      	ldr	r3, [r7, #12]
  40811c:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  40811e:	687b      	ldr	r3, [r7, #4]
  408120:	685a      	ldr	r2, [r3, #4]
  408122:	68fb      	ldr	r3, [r7, #12]
  408124:	61da      	str	r2, [r3, #28]
	}
}
  408126:	bf00      	nop
  408128:	3714      	adds	r7, #20
  40812a:	46bd      	mov	sp, r7
  40812c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408130:	4770      	bx	lr

00408132 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  408132:	b480      	push	{r7}
  408134:	b085      	sub	sp, #20
  408136:	af00      	add	r7, sp, #0
  408138:	60f8      	str	r0, [r7, #12]
  40813a:	60b9      	str	r1, [r7, #8]
  40813c:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  40813e:	68bb      	ldr	r3, [r7, #8]
  408140:	2b00      	cmp	r3, #0
  408142:	d007      	beq.n	408154 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  408144:	68bb      	ldr	r3, [r7, #8]
  408146:	681a      	ldr	r2, [r3, #0]
  408148:	68fb      	ldr	r3, [r7, #12]
  40814a:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  40814c:	68bb      	ldr	r3, [r7, #8]
  40814e:	685a      	ldr	r2, [r3, #4]
  408150:	68fb      	ldr	r3, [r7, #12]
  408152:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  408154:	687b      	ldr	r3, [r7, #4]
  408156:	2b00      	cmp	r3, #0
  408158:	d007      	beq.n	40816a <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  40815a:	687b      	ldr	r3, [r7, #4]
  40815c:	681a      	ldr	r2, [r3, #0]
  40815e:	68fb      	ldr	r3, [r7, #12]
  408160:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  408162:	687b      	ldr	r3, [r7, #4]
  408164:	685a      	ldr	r2, [r3, #4]
  408166:	68fb      	ldr	r3, [r7, #12]
  408168:	615a      	str	r2, [r3, #20]
	}
}
  40816a:	bf00      	nop
  40816c:	3714      	adds	r7, #20
  40816e:	46bd      	mov	sp, r7
  408170:	f85d 7b04 	ldr.w	r7, [sp], #4
  408174:	4770      	bx	lr

00408176 <pdc_rx_clear_cnt>:
 *
 * \param[out] p_pdc Device structure pointer
 */
void pdc_rx_clear_cnt(
		Pdc *p_pdc)
{
  408176:	b480      	push	{r7}
  408178:	b083      	sub	sp, #12
  40817a:	af00      	add	r7, sp, #0
  40817c:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_RNCR = 0;
  40817e:	687b      	ldr	r3, [r7, #4]
  408180:	2200      	movs	r2, #0
  408182:	615a      	str	r2, [r3, #20]
	p_pdc->PERIPH_RCR = 0;
  408184:	687b      	ldr	r3, [r7, #4]
  408186:	2200      	movs	r2, #0
  408188:	605a      	str	r2, [r3, #4]
}
  40818a:	bf00      	nop
  40818c:	370c      	adds	r7, #12
  40818e:	46bd      	mov	sp, r7
  408190:	f85d 7b04 	ldr.w	r7, [sp], #4
  408194:	4770      	bx	lr

00408196 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  408196:	b480      	push	{r7}
  408198:	b083      	sub	sp, #12
  40819a:	af00      	add	r7, sp, #0
  40819c:	6078      	str	r0, [r7, #4]
  40819e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4081a0:	683a      	ldr	r2, [r7, #0]
  4081a2:	f240 1301 	movw	r3, #257	; 0x101
  4081a6:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
  4081a8:	687a      	ldr	r2, [r7, #4]
  4081aa:	6213      	str	r3, [r2, #32]
}
  4081ac:	bf00      	nop
  4081ae:	370c      	adds	r7, #12
  4081b0:	46bd      	mov	sp, r7
  4081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4081b6:	4770      	bx	lr

004081b8 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  4081b8:	b480      	push	{r7}
  4081ba:	b083      	sub	sp, #12
  4081bc:	af00      	add	r7, sp, #0
  4081be:	6078      	str	r0, [r7, #4]
  4081c0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  4081c2:	683a      	ldr	r2, [r7, #0]
  4081c4:	f240 2302 	movw	r3, #514	; 0x202
  4081c8:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
  4081ca:	687a      	ldr	r2, [r7, #4]
  4081cc:	6213      	str	r3, [r2, #32]
}
  4081ce:	bf00      	nop
  4081d0:	370c      	adds	r7, #12
  4081d2:	46bd      	mov	sp, r7
  4081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4081d8:	4770      	bx	lr

004081da <pdc_read_status>:
 * </table>
 *
 */
uint32_t pdc_read_status(
		Pdc *p_pdc)
{
  4081da:	b480      	push	{r7}
  4081dc:	b083      	sub	sp, #12
  4081de:	af00      	add	r7, sp, #0
  4081e0:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_PTSR;
  4081e2:	687b      	ldr	r3, [r7, #4]
  4081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  4081e6:	4618      	mov	r0, r3
  4081e8:	370c      	adds	r7, #12
  4081ea:	46bd      	mov	sp, r7
  4081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4081f0:	4770      	bx	lr

004081f2 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  4081f2:	b480      	push	{r7}
  4081f4:	b083      	sub	sp, #12
  4081f6:	af00      	add	r7, sp, #0
  4081f8:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  4081fa:	687b      	ldr	r3, [r7, #4]
  4081fc:	685b      	ldr	r3, [r3, #4]
}
  4081fe:	4618      	mov	r0, r3
  408200:	370c      	adds	r7, #12
  408202:	46bd      	mov	sp, r7
  408204:	f85d 7b04 	ldr.w	r7, [sp], #4
  408208:	4770      	bx	lr

0040820a <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40820a:	b480      	push	{r7}
  40820c:	b085      	sub	sp, #20
  40820e:	af00      	add	r7, sp, #0
  408210:	60f8      	str	r0, [r7, #12]
  408212:	60b9      	str	r1, [r7, #8]
  408214:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  408216:	687b      	ldr	r3, [r7, #4]
  408218:	2b00      	cmp	r3, #0
  40821a:	d003      	beq.n	408224 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40821c:	68fb      	ldr	r3, [r7, #12]
  40821e:	68ba      	ldr	r2, [r7, #8]
  408220:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  408222:	e002      	b.n	40822a <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  408224:	68fb      	ldr	r3, [r7, #12]
  408226:	68ba      	ldr	r2, [r7, #8]
  408228:	661a      	str	r2, [r3, #96]	; 0x60
}
  40822a:	bf00      	nop
  40822c:	3714      	adds	r7, #20
  40822e:	46bd      	mov	sp, r7
  408230:	f85d 7b04 	ldr.w	r7, [sp], #4
  408234:	4770      	bx	lr

00408236 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  408236:	b480      	push	{r7}
  408238:	b087      	sub	sp, #28
  40823a:	af00      	add	r7, sp, #0
  40823c:	60f8      	str	r0, [r7, #12]
  40823e:	60b9      	str	r1, [r7, #8]
  408240:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  408242:	68fb      	ldr	r3, [r7, #12]
  408244:	687a      	ldr	r2, [r7, #4]
  408246:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  408248:	68bb      	ldr	r3, [r7, #8]
  40824a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40824e:	d02b      	beq.n	4082a8 <pio_set_peripheral+0x72>
  408250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  408254:	d805      	bhi.n	408262 <pio_set_peripheral+0x2c>
  408256:	2b00      	cmp	r3, #0
  408258:	d03f      	beq.n	4082da <pio_set_peripheral+0xa4>
  40825a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40825e:	d00a      	beq.n	408276 <pio_set_peripheral+0x40>
  408260:	e037      	b.n	4082d2 <pio_set_peripheral+0x9c>
  408262:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  408266:	d038      	beq.n	4082da <pio_set_peripheral+0xa4>
  408268:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40826c:	d035      	beq.n	4082da <pio_set_peripheral+0xa4>
  40826e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  408272:	d032      	beq.n	4082da <pio_set_peripheral+0xa4>
  408274:	e02d      	b.n	4082d2 <pio_set_peripheral+0x9c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  408276:	68fb      	ldr	r3, [r7, #12]
  408278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40827a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40827c:	68fb      	ldr	r3, [r7, #12]
  40827e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  408280:	687b      	ldr	r3, [r7, #4]
  408282:	43d9      	mvns	r1, r3
  408284:	697b      	ldr	r3, [r7, #20]
  408286:	400b      	ands	r3, r1
  408288:	401a      	ands	r2, r3
  40828a:	68fb      	ldr	r3, [r7, #12]
  40828c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40828e:	68fb      	ldr	r3, [r7, #12]
  408290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408292:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  408294:	68fb      	ldr	r3, [r7, #12]
  408296:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  408298:	687b      	ldr	r3, [r7, #4]
  40829a:	43d9      	mvns	r1, r3
  40829c:	697b      	ldr	r3, [r7, #20]
  40829e:	400b      	ands	r3, r1
  4082a0:	401a      	ands	r2, r3
  4082a2:	68fb      	ldr	r3, [r7, #12]
  4082a4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4082a6:	e014      	b.n	4082d2 <pio_set_peripheral+0x9c>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4082a8:	68fb      	ldr	r3, [r7, #12]
  4082aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4082ac:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4082ae:	687a      	ldr	r2, [r7, #4]
  4082b0:	697b      	ldr	r3, [r7, #20]
  4082b2:	431a      	orrs	r2, r3
  4082b4:	68fb      	ldr	r3, [r7, #12]
  4082b6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4082b8:	68fb      	ldr	r3, [r7, #12]
  4082ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4082bc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4082be:	68fb      	ldr	r3, [r7, #12]
  4082c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4082c2:	687b      	ldr	r3, [r7, #4]
  4082c4:	43d9      	mvns	r1, r3
  4082c6:	697b      	ldr	r3, [r7, #20]
  4082c8:	400b      	ands	r3, r1
  4082ca:	401a      	ands	r2, r3
  4082cc:	68fb      	ldr	r3, [r7, #12]
  4082ce:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4082d0:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4082d2:	68fb      	ldr	r3, [r7, #12]
  4082d4:	687a      	ldr	r2, [r7, #4]
  4082d6:	605a      	str	r2, [r3, #4]
  4082d8:	e000      	b.n	4082dc <pio_set_peripheral+0xa6>
		return;
  4082da:	bf00      	nop
}
  4082dc:	371c      	adds	r7, #28
  4082de:	46bd      	mov	sp, r7
  4082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4082e4:	4770      	bx	lr
	...

004082e8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4082e8:	b580      	push	{r7, lr}
  4082ea:	b084      	sub	sp, #16
  4082ec:	af00      	add	r7, sp, #0
  4082ee:	60f8      	str	r0, [r7, #12]
  4082f0:	60b9      	str	r1, [r7, #8]
  4082f2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4082f4:	68b9      	ldr	r1, [r7, #8]
  4082f6:	68f8      	ldr	r0, [r7, #12]
  4082f8:	4b19      	ldr	r3, [pc, #100]	; (408360 <pio_set_input+0x78>)
  4082fa:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4082fc:	687b      	ldr	r3, [r7, #4]
  4082fe:	f003 0301 	and.w	r3, r3, #1
  408302:	461a      	mov	r2, r3
  408304:	68b9      	ldr	r1, [r7, #8]
  408306:	68f8      	ldr	r0, [r7, #12]
  408308:	4b16      	ldr	r3, [pc, #88]	; (408364 <pio_set_input+0x7c>)
  40830a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40830c:	687b      	ldr	r3, [r7, #4]
  40830e:	f003 030a 	and.w	r3, r3, #10
  408312:	2b00      	cmp	r3, #0
  408314:	d003      	beq.n	40831e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  408316:	68fb      	ldr	r3, [r7, #12]
  408318:	68ba      	ldr	r2, [r7, #8]
  40831a:	621a      	str	r2, [r3, #32]
  40831c:	e002      	b.n	408324 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40831e:	68fb      	ldr	r3, [r7, #12]
  408320:	68ba      	ldr	r2, [r7, #8]
  408322:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  408324:	687b      	ldr	r3, [r7, #4]
  408326:	f003 0302 	and.w	r3, r3, #2
  40832a:	2b00      	cmp	r3, #0
  40832c:	d004      	beq.n	408338 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40832e:	68fb      	ldr	r3, [r7, #12]
  408330:	68ba      	ldr	r2, [r7, #8]
  408332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  408336:	e008      	b.n	40834a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  408338:	687b      	ldr	r3, [r7, #4]
  40833a:	f003 0308 	and.w	r3, r3, #8
  40833e:	2b00      	cmp	r3, #0
  408340:	d003      	beq.n	40834a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  408342:	68fb      	ldr	r3, [r7, #12]
  408344:	68ba      	ldr	r2, [r7, #8]
  408346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40834a:	68fb      	ldr	r3, [r7, #12]
  40834c:	68ba      	ldr	r2, [r7, #8]
  40834e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  408350:	68fb      	ldr	r3, [r7, #12]
  408352:	68ba      	ldr	r2, [r7, #8]
  408354:	601a      	str	r2, [r3, #0]
}
  408356:	bf00      	nop
  408358:	3710      	adds	r7, #16
  40835a:	46bd      	mov	sp, r7
  40835c:	bd80      	pop	{r7, pc}
  40835e:	bf00      	nop
  408360:	00408515 	.word	0x00408515
  408364:	0040820b 	.word	0x0040820b

00408368 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  408368:	b580      	push	{r7, lr}
  40836a:	b084      	sub	sp, #16
  40836c:	af00      	add	r7, sp, #0
  40836e:	60f8      	str	r0, [r7, #12]
  408370:	60b9      	str	r1, [r7, #8]
  408372:	607a      	str	r2, [r7, #4]
  408374:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  408376:	68b9      	ldr	r1, [r7, #8]
  408378:	68f8      	ldr	r0, [r7, #12]
  40837a:	4b12      	ldr	r3, [pc, #72]	; (4083c4 <pio_set_output+0x5c>)
  40837c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40837e:	69ba      	ldr	r2, [r7, #24]
  408380:	68b9      	ldr	r1, [r7, #8]
  408382:	68f8      	ldr	r0, [r7, #12]
  408384:	4b10      	ldr	r3, [pc, #64]	; (4083c8 <pio_set_output+0x60>)
  408386:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  408388:	683b      	ldr	r3, [r7, #0]
  40838a:	2b00      	cmp	r3, #0
  40838c:	d003      	beq.n	408396 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40838e:	68fb      	ldr	r3, [r7, #12]
  408390:	68ba      	ldr	r2, [r7, #8]
  408392:	651a      	str	r2, [r3, #80]	; 0x50
  408394:	e002      	b.n	40839c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  408396:	68fb      	ldr	r3, [r7, #12]
  408398:	68ba      	ldr	r2, [r7, #8]
  40839a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40839c:	687b      	ldr	r3, [r7, #4]
  40839e:	2b00      	cmp	r3, #0
  4083a0:	d003      	beq.n	4083aa <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4083a2:	68fb      	ldr	r3, [r7, #12]
  4083a4:	68ba      	ldr	r2, [r7, #8]
  4083a6:	631a      	str	r2, [r3, #48]	; 0x30
  4083a8:	e002      	b.n	4083b0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4083aa:	68fb      	ldr	r3, [r7, #12]
  4083ac:	68ba      	ldr	r2, [r7, #8]
  4083ae:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4083b0:	68fb      	ldr	r3, [r7, #12]
  4083b2:	68ba      	ldr	r2, [r7, #8]
  4083b4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4083b6:	68fb      	ldr	r3, [r7, #12]
  4083b8:	68ba      	ldr	r2, [r7, #8]
  4083ba:	601a      	str	r2, [r3, #0]
}
  4083bc:	bf00      	nop
  4083be:	3710      	adds	r7, #16
  4083c0:	46bd      	mov	sp, r7
  4083c2:	bd80      	pop	{r7, pc}
  4083c4:	00408515 	.word	0x00408515
  4083c8:	0040820b 	.word	0x0040820b

004083cc <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  4083cc:	b590      	push	{r4, r7, lr}
  4083ce:	b087      	sub	sp, #28
  4083d0:	af02      	add	r7, sp, #8
  4083d2:	60f8      	str	r0, [r7, #12]
  4083d4:	60b9      	str	r1, [r7, #8]
  4083d6:	607a      	str	r2, [r7, #4]
  4083d8:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  4083da:	68bb      	ldr	r3, [r7, #8]
  4083dc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4083e0:	d01e      	beq.n	408420 <pio_configure+0x54>
  4083e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4083e6:	d806      	bhi.n	4083f6 <pio_configure+0x2a>
  4083e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4083ec:	d00a      	beq.n	408404 <pio_configure+0x38>
  4083ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4083f2:	d007      	beq.n	408404 <pio_configure+0x38>
  4083f4:	e03a      	b.n	40846c <pio_configure+0xa0>
  4083f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4083fa:	d017      	beq.n	40842c <pio_configure+0x60>
  4083fc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  408400:	d014      	beq.n	40842c <pio_configure+0x60>
  408402:	e033      	b.n	40846c <pio_configure+0xa0>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  408404:	687a      	ldr	r2, [r7, #4]
  408406:	68b9      	ldr	r1, [r7, #8]
  408408:	68f8      	ldr	r0, [r7, #12]
  40840a:	4b1c      	ldr	r3, [pc, #112]	; (40847c <pio_configure+0xb0>)
  40840c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  40840e:	683b      	ldr	r3, [r7, #0]
  408410:	f003 0301 	and.w	r3, r3, #1
  408414:	461a      	mov	r2, r3
  408416:	6879      	ldr	r1, [r7, #4]
  408418:	68f8      	ldr	r0, [r7, #12]
  40841a:	4b19      	ldr	r3, [pc, #100]	; (408480 <pio_configure+0xb4>)
  40841c:	4798      	blx	r3
		break;
  40841e:	e027      	b.n	408470 <pio_configure+0xa4>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  408420:	683a      	ldr	r2, [r7, #0]
  408422:	6879      	ldr	r1, [r7, #4]
  408424:	68f8      	ldr	r0, [r7, #12]
  408426:	4b17      	ldr	r3, [pc, #92]	; (408484 <pio_configure+0xb8>)
  408428:	4798      	blx	r3
		break;
  40842a:	e021      	b.n	408470 <pio_configure+0xa4>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40842c:	68bb      	ldr	r3, [r7, #8]
  40842e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  408432:	bf0c      	ite	eq
  408434:	2301      	moveq	r3, #1
  408436:	2300      	movne	r3, #0
  408438:	b2db      	uxtb	r3, r3
  40843a:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  40843c:	683b      	ldr	r3, [r7, #0]
  40843e:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  408442:	2b00      	cmp	r3, #0
  408444:	bf14      	ite	ne
  408446:	2301      	movne	r3, #1
  408448:	2300      	moveq	r3, #0
  40844a:	b2db      	uxtb	r3, r3
  40844c:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  40844e:	683b      	ldr	r3, [r7, #0]
  408450:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  408454:	2b00      	cmp	r3, #0
  408456:	bf14      	ite	ne
  408458:	2301      	movne	r3, #1
  40845a:	2300      	moveq	r3, #0
  40845c:	b2db      	uxtb	r3, r3
  40845e:	9300      	str	r3, [sp, #0]
  408460:	460b      	mov	r3, r1
  408462:	6879      	ldr	r1, [r7, #4]
  408464:	68f8      	ldr	r0, [r7, #12]
  408466:	4c08      	ldr	r4, [pc, #32]	; (408488 <pio_configure+0xbc>)
  408468:	47a0      	blx	r4
		break;
  40846a:	e001      	b.n	408470 <pio_configure+0xa4>

	default:
		return 0;
  40846c:	2300      	movs	r3, #0
  40846e:	e000      	b.n	408472 <pio_configure+0xa6>
	}

	return 1;
  408470:	2301      	movs	r3, #1
}
  408472:	4618      	mov	r0, r3
  408474:	3714      	adds	r7, #20
  408476:	46bd      	mov	sp, r7
  408478:	bd90      	pop	{r4, r7, pc}
  40847a:	bf00      	nop
  40847c:	00408237 	.word	0x00408237
  408480:	0040820b 	.word	0x0040820b
  408484:	004082e9 	.word	0x004082e9
  408488:	00408369 	.word	0x00408369

0040848c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  40848c:	b480      	push	{r7}
  40848e:	b085      	sub	sp, #20
  408490:	af00      	add	r7, sp, #0
  408492:	60f8      	str	r0, [r7, #12]
  408494:	60b9      	str	r1, [r7, #8]
  408496:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  408498:	687b      	ldr	r3, [r7, #4]
  40849a:	f003 0310 	and.w	r3, r3, #16
  40849e:	2b00      	cmp	r3, #0
  4084a0:	d020      	beq.n	4084e4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4084a2:	68fb      	ldr	r3, [r7, #12]
  4084a4:	68ba      	ldr	r2, [r7, #8]
  4084a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4084aa:	687b      	ldr	r3, [r7, #4]
  4084ac:	f003 0320 	and.w	r3, r3, #32
  4084b0:	2b00      	cmp	r3, #0
  4084b2:	d004      	beq.n	4084be <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4084b4:	68fb      	ldr	r3, [r7, #12]
  4084b6:	68ba      	ldr	r2, [r7, #8]
  4084b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4084bc:	e003      	b.n	4084c6 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4084be:	68fb      	ldr	r3, [r7, #12]
  4084c0:	68ba      	ldr	r2, [r7, #8]
  4084c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4084c6:	687b      	ldr	r3, [r7, #4]
  4084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4084cc:	2b00      	cmp	r3, #0
  4084ce:	d004      	beq.n	4084da <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4084d0:	68fb      	ldr	r3, [r7, #12]
  4084d2:	68ba      	ldr	r2, [r7, #8]
  4084d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  4084d8:	e008      	b.n	4084ec <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  4084da:	68fb      	ldr	r3, [r7, #12]
  4084dc:	68ba      	ldr	r2, [r7, #8]
  4084de:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4084e2:	e003      	b.n	4084ec <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  4084e4:	68fb      	ldr	r3, [r7, #12]
  4084e6:	68ba      	ldr	r2, [r7, #8]
  4084e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4084ec:	bf00      	nop
  4084ee:	3714      	adds	r7, #20
  4084f0:	46bd      	mov	sp, r7
  4084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4084f6:	4770      	bx	lr

004084f8 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4084f8:	b480      	push	{r7}
  4084fa:	b083      	sub	sp, #12
  4084fc:	af00      	add	r7, sp, #0
  4084fe:	6078      	str	r0, [r7, #4]
  408500:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  408502:	687b      	ldr	r3, [r7, #4]
  408504:	683a      	ldr	r2, [r7, #0]
  408506:	641a      	str	r2, [r3, #64]	; 0x40
}
  408508:	bf00      	nop
  40850a:	370c      	adds	r7, #12
  40850c:	46bd      	mov	sp, r7
  40850e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408512:	4770      	bx	lr

00408514 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  408514:	b480      	push	{r7}
  408516:	b083      	sub	sp, #12
  408518:	af00      	add	r7, sp, #0
  40851a:	6078      	str	r0, [r7, #4]
  40851c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40851e:	687b      	ldr	r3, [r7, #4]
  408520:	683a      	ldr	r2, [r7, #0]
  408522:	645a      	str	r2, [r3, #68]	; 0x44
}
  408524:	bf00      	nop
  408526:	370c      	adds	r7, #12
  408528:	46bd      	mov	sp, r7
  40852a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40852e:	4770      	bx	lr

00408530 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  408530:	b480      	push	{r7}
  408532:	b083      	sub	sp, #12
  408534:	af00      	add	r7, sp, #0
  408536:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  408538:	687b      	ldr	r3, [r7, #4]
  40853a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40853c:	4618      	mov	r0, r3
  40853e:	370c      	adds	r7, #12
  408540:	46bd      	mov	sp, r7
  408542:	f85d 7b04 	ldr.w	r7, [sp], #4
  408546:	4770      	bx	lr

00408548 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  408548:	b480      	push	{r7}
  40854a:	b083      	sub	sp, #12
  40854c:	af00      	add	r7, sp, #0
  40854e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  408550:	687b      	ldr	r3, [r7, #4]
  408552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  408554:	4618      	mov	r0, r3
  408556:	370c      	adds	r7, #12
  408558:	46bd      	mov	sp, r7
  40855a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40855e:	4770      	bx	lr

00408560 <NVIC_EnableIRQ>:
{
  408560:	b480      	push	{r7}
  408562:	b083      	sub	sp, #12
  408564:	af00      	add	r7, sp, #0
  408566:	4603      	mov	r3, r0
  408568:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40856a:	4909      	ldr	r1, [pc, #36]	; (408590 <NVIC_EnableIRQ+0x30>)
  40856c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  408570:	095b      	lsrs	r3, r3, #5
  408572:	79fa      	ldrb	r2, [r7, #7]
  408574:	f002 021f 	and.w	r2, r2, #31
  408578:	2001      	movs	r0, #1
  40857a:	fa00 f202 	lsl.w	r2, r0, r2
  40857e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  408582:	bf00      	nop
  408584:	370c      	adds	r7, #12
  408586:	46bd      	mov	sp, r7
  408588:	f85d 7b04 	ldr.w	r7, [sp], #4
  40858c:	4770      	bx	lr
  40858e:	bf00      	nop
  408590:	e000e100 	.word	0xe000e100

00408594 <NVIC_DisableIRQ>:
{
  408594:	b480      	push	{r7}
  408596:	b083      	sub	sp, #12
  408598:	af00      	add	r7, sp, #0
  40859a:	4603      	mov	r3, r0
  40859c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40859e:	4909      	ldr	r1, [pc, #36]	; (4085c4 <NVIC_DisableIRQ+0x30>)
  4085a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4085a4:	095b      	lsrs	r3, r3, #5
  4085a6:	79fa      	ldrb	r2, [r7, #7]
  4085a8:	f002 021f 	and.w	r2, r2, #31
  4085ac:	2001      	movs	r0, #1
  4085ae:	fa00 f202 	lsl.w	r2, r0, r2
  4085b2:	3320      	adds	r3, #32
  4085b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4085b8:	bf00      	nop
  4085ba:	370c      	adds	r7, #12
  4085bc:	46bd      	mov	sp, r7
  4085be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4085c2:	4770      	bx	lr
  4085c4:	e000e100 	.word	0xe000e100

004085c8 <NVIC_ClearPendingIRQ>:
{
  4085c8:	b480      	push	{r7}
  4085ca:	b083      	sub	sp, #12
  4085cc:	af00      	add	r7, sp, #0
  4085ce:	4603      	mov	r3, r0
  4085d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4085d2:	4909      	ldr	r1, [pc, #36]	; (4085f8 <NVIC_ClearPendingIRQ+0x30>)
  4085d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4085d8:	095b      	lsrs	r3, r3, #5
  4085da:	79fa      	ldrb	r2, [r7, #7]
  4085dc:	f002 021f 	and.w	r2, r2, #31
  4085e0:	2001      	movs	r0, #1
  4085e2:	fa00 f202 	lsl.w	r2, r0, r2
  4085e6:	3360      	adds	r3, #96	; 0x60
  4085e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4085ec:	bf00      	nop
  4085ee:	370c      	adds	r7, #12
  4085f0:	46bd      	mov	sp, r7
  4085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4085f6:	4770      	bx	lr
  4085f8:	e000e100 	.word	0xe000e100

004085fc <NVIC_SetPriority>:
{
  4085fc:	b480      	push	{r7}
  4085fe:	b083      	sub	sp, #12
  408600:	af00      	add	r7, sp, #0
  408602:	4603      	mov	r3, r0
  408604:	6039      	str	r1, [r7, #0]
  408606:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  408608:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40860c:	2b00      	cmp	r3, #0
  40860e:	da0b      	bge.n	408628 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  408610:	490d      	ldr	r1, [pc, #52]	; (408648 <NVIC_SetPriority+0x4c>)
  408612:	79fb      	ldrb	r3, [r7, #7]
  408614:	f003 030f 	and.w	r3, r3, #15
  408618:	3b04      	subs	r3, #4
  40861a:	683a      	ldr	r2, [r7, #0]
  40861c:	b2d2      	uxtb	r2, r2
  40861e:	0112      	lsls	r2, r2, #4
  408620:	b2d2      	uxtb	r2, r2
  408622:	440b      	add	r3, r1
  408624:	761a      	strb	r2, [r3, #24]
}
  408626:	e009      	b.n	40863c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  408628:	4908      	ldr	r1, [pc, #32]	; (40864c <NVIC_SetPriority+0x50>)
  40862a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40862e:	683a      	ldr	r2, [r7, #0]
  408630:	b2d2      	uxtb	r2, r2
  408632:	0112      	lsls	r2, r2, #4
  408634:	b2d2      	uxtb	r2, r2
  408636:	440b      	add	r3, r1
  408638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40863c:	bf00      	nop
  40863e:	370c      	adds	r7, #12
  408640:	46bd      	mov	sp, r7
  408642:	f85d 7b04 	ldr.w	r7, [sp], #4
  408646:	4770      	bx	lr
  408648:	e000ed00 	.word	0xe000ed00
  40864c:	e000e100 	.word	0xe000e100

00408650 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  408650:	b580      	push	{r7, lr}
  408652:	b084      	sub	sp, #16
  408654:	af00      	add	r7, sp, #0
  408656:	6078      	str	r0, [r7, #4]
  408658:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40865a:	6878      	ldr	r0, [r7, #4]
  40865c:	4b26      	ldr	r3, [pc, #152]	; (4086f8 <pio_handler_process+0xa8>)
  40865e:	4798      	blx	r3
  408660:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  408662:	6878      	ldr	r0, [r7, #4]
  408664:	4b25      	ldr	r3, [pc, #148]	; (4086fc <pio_handler_process+0xac>)
  408666:	4798      	blx	r3
  408668:	4602      	mov	r2, r0
  40866a:	68fb      	ldr	r3, [r7, #12]
  40866c:	4013      	ands	r3, r2
  40866e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  408670:	68fb      	ldr	r3, [r7, #12]
  408672:	2b00      	cmp	r3, #0
  408674:	d03c      	beq.n	4086f0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  408676:	2300      	movs	r3, #0
  408678:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40867a:	e034      	b.n	4086e6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40867c:	4a20      	ldr	r2, [pc, #128]	; (408700 <pio_handler_process+0xb0>)
  40867e:	68bb      	ldr	r3, [r7, #8]
  408680:	011b      	lsls	r3, r3, #4
  408682:	4413      	add	r3, r2
  408684:	681a      	ldr	r2, [r3, #0]
  408686:	683b      	ldr	r3, [r7, #0]
  408688:	429a      	cmp	r2, r3
  40868a:	d126      	bne.n	4086da <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40868c:	4a1c      	ldr	r2, [pc, #112]	; (408700 <pio_handler_process+0xb0>)
  40868e:	68bb      	ldr	r3, [r7, #8]
  408690:	011b      	lsls	r3, r3, #4
  408692:	4413      	add	r3, r2
  408694:	3304      	adds	r3, #4
  408696:	681a      	ldr	r2, [r3, #0]
  408698:	68fb      	ldr	r3, [r7, #12]
  40869a:	4013      	ands	r3, r2
  40869c:	2b00      	cmp	r3, #0
  40869e:	d01c      	beq.n	4086da <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4086a0:	4a17      	ldr	r2, [pc, #92]	; (408700 <pio_handler_process+0xb0>)
  4086a2:	68bb      	ldr	r3, [r7, #8]
  4086a4:	011b      	lsls	r3, r3, #4
  4086a6:	4413      	add	r3, r2
  4086a8:	330c      	adds	r3, #12
  4086aa:	681b      	ldr	r3, [r3, #0]
  4086ac:	4914      	ldr	r1, [pc, #80]	; (408700 <pio_handler_process+0xb0>)
  4086ae:	68ba      	ldr	r2, [r7, #8]
  4086b0:	0112      	lsls	r2, r2, #4
  4086b2:	440a      	add	r2, r1
  4086b4:	6810      	ldr	r0, [r2, #0]
  4086b6:	4912      	ldr	r1, [pc, #72]	; (408700 <pio_handler_process+0xb0>)
  4086b8:	68ba      	ldr	r2, [r7, #8]
  4086ba:	0112      	lsls	r2, r2, #4
  4086bc:	440a      	add	r2, r1
  4086be:	3204      	adds	r2, #4
  4086c0:	6812      	ldr	r2, [r2, #0]
  4086c2:	4611      	mov	r1, r2
  4086c4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4086c6:	4a0e      	ldr	r2, [pc, #56]	; (408700 <pio_handler_process+0xb0>)
  4086c8:	68bb      	ldr	r3, [r7, #8]
  4086ca:	011b      	lsls	r3, r3, #4
  4086cc:	4413      	add	r3, r2
  4086ce:	3304      	adds	r3, #4
  4086d0:	681b      	ldr	r3, [r3, #0]
  4086d2:	43db      	mvns	r3, r3
  4086d4:	68fa      	ldr	r2, [r7, #12]
  4086d6:	4013      	ands	r3, r2
  4086d8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4086da:	68bb      	ldr	r3, [r7, #8]
  4086dc:	3301      	adds	r3, #1
  4086de:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4086e0:	68bb      	ldr	r3, [r7, #8]
  4086e2:	2b06      	cmp	r3, #6
  4086e4:	d803      	bhi.n	4086ee <pio_handler_process+0x9e>
		while (status != 0) {
  4086e6:	68fb      	ldr	r3, [r7, #12]
  4086e8:	2b00      	cmp	r3, #0
  4086ea:	d1c7      	bne.n	40867c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4086ec:	e000      	b.n	4086f0 <pio_handler_process+0xa0>
				break;
  4086ee:	bf00      	nop
}
  4086f0:	bf00      	nop
  4086f2:	3710      	adds	r7, #16
  4086f4:	46bd      	mov	sp, r7
  4086f6:	bd80      	pop	{r7, pc}
  4086f8:	00408531 	.word	0x00408531
  4086fc:	00408549 	.word	0x00408549
  408700:	20004620 	.word	0x20004620

00408704 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  408704:	b580      	push	{r7, lr}
  408706:	b086      	sub	sp, #24
  408708:	af00      	add	r7, sp, #0
  40870a:	60f8      	str	r0, [r7, #12]
  40870c:	60b9      	str	r1, [r7, #8]
  40870e:	607a      	str	r2, [r7, #4]
  408710:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  408712:	4b21      	ldr	r3, [pc, #132]	; (408798 <pio_handler_set+0x94>)
  408714:	681b      	ldr	r3, [r3, #0]
  408716:	2b06      	cmp	r3, #6
  408718:	d901      	bls.n	40871e <pio_handler_set+0x1a>
		return 1;
  40871a:	2301      	movs	r3, #1
  40871c:	e038      	b.n	408790 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40871e:	2300      	movs	r3, #0
  408720:	75fb      	strb	r3, [r7, #23]
  408722:	e011      	b.n	408748 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  408724:	7dfb      	ldrb	r3, [r7, #23]
  408726:	011b      	lsls	r3, r3, #4
  408728:	4a1c      	ldr	r2, [pc, #112]	; (40879c <pio_handler_set+0x98>)
  40872a:	4413      	add	r3, r2
  40872c:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40872e:	693b      	ldr	r3, [r7, #16]
  408730:	681a      	ldr	r2, [r3, #0]
  408732:	68bb      	ldr	r3, [r7, #8]
  408734:	429a      	cmp	r2, r3
  408736:	d104      	bne.n	408742 <pio_handler_set+0x3e>
  408738:	693b      	ldr	r3, [r7, #16]
  40873a:	685a      	ldr	r2, [r3, #4]
  40873c:	687b      	ldr	r3, [r7, #4]
  40873e:	429a      	cmp	r2, r3
  408740:	d008      	beq.n	408754 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  408742:	7dfb      	ldrb	r3, [r7, #23]
  408744:	3301      	adds	r3, #1
  408746:	75fb      	strb	r3, [r7, #23]
  408748:	7dfa      	ldrb	r2, [r7, #23]
  40874a:	4b13      	ldr	r3, [pc, #76]	; (408798 <pio_handler_set+0x94>)
  40874c:	681b      	ldr	r3, [r3, #0]
  40874e:	429a      	cmp	r2, r3
  408750:	d9e8      	bls.n	408724 <pio_handler_set+0x20>
  408752:	e000      	b.n	408756 <pio_handler_set+0x52>
			break;
  408754:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  408756:	693b      	ldr	r3, [r7, #16]
  408758:	68ba      	ldr	r2, [r7, #8]
  40875a:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  40875c:	693b      	ldr	r3, [r7, #16]
  40875e:	687a      	ldr	r2, [r7, #4]
  408760:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  408762:	693b      	ldr	r3, [r7, #16]
  408764:	683a      	ldr	r2, [r7, #0]
  408766:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  408768:	693b      	ldr	r3, [r7, #16]
  40876a:	6a3a      	ldr	r2, [r7, #32]
  40876c:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40876e:	7dfa      	ldrb	r2, [r7, #23]
  408770:	4b09      	ldr	r3, [pc, #36]	; (408798 <pio_handler_set+0x94>)
  408772:	681b      	ldr	r3, [r3, #0]
  408774:	3301      	adds	r3, #1
  408776:	429a      	cmp	r2, r3
  408778:	d104      	bne.n	408784 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40877a:	4b07      	ldr	r3, [pc, #28]	; (408798 <pio_handler_set+0x94>)
  40877c:	681b      	ldr	r3, [r3, #0]
  40877e:	3301      	adds	r3, #1
  408780:	4a05      	ldr	r2, [pc, #20]	; (408798 <pio_handler_set+0x94>)
  408782:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  408784:	683a      	ldr	r2, [r7, #0]
  408786:	6879      	ldr	r1, [r7, #4]
  408788:	68f8      	ldr	r0, [r7, #12]
  40878a:	4b05      	ldr	r3, [pc, #20]	; (4087a0 <pio_handler_set+0x9c>)
  40878c:	4798      	blx	r3

	return 0;
  40878e:	2300      	movs	r3, #0
}
  408790:	4618      	mov	r0, r3
  408792:	3718      	adds	r7, #24
  408794:	46bd      	mov	sp, r7
  408796:	bd80      	pop	{r7, pc}
  408798:	20004690 	.word	0x20004690
  40879c:	20004620 	.word	0x20004620
  4087a0:	0040848d 	.word	0x0040848d

004087a4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4087a4:	b580      	push	{r7, lr}
  4087a6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4087a8:	210b      	movs	r1, #11
  4087aa:	4802      	ldr	r0, [pc, #8]	; (4087b4 <PIOA_Handler+0x10>)
  4087ac:	4b02      	ldr	r3, [pc, #8]	; (4087b8 <PIOA_Handler+0x14>)
  4087ae:	4798      	blx	r3
}
  4087b0:	bf00      	nop
  4087b2:	bd80      	pop	{r7, pc}
  4087b4:	400e0e00 	.word	0x400e0e00
  4087b8:	00408651 	.word	0x00408651

004087bc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4087bc:	b580      	push	{r7, lr}
  4087be:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4087c0:	210c      	movs	r1, #12
  4087c2:	4802      	ldr	r0, [pc, #8]	; (4087cc <PIOB_Handler+0x10>)
  4087c4:	4b02      	ldr	r3, [pc, #8]	; (4087d0 <PIOB_Handler+0x14>)
  4087c6:	4798      	blx	r3
}
  4087c8:	bf00      	nop
  4087ca:	bd80      	pop	{r7, pc}
  4087cc:	400e1000 	.word	0x400e1000
  4087d0:	00408651 	.word	0x00408651

004087d4 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4087d4:	b580      	push	{r7, lr}
  4087d6:	b086      	sub	sp, #24
  4087d8:	af00      	add	r7, sp, #0
  4087da:	60f8      	str	r0, [r7, #12]
  4087dc:	460b      	mov	r3, r1
  4087de:	607a      	str	r2, [r7, #4]
  4087e0:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  4087e2:	2300      	movs	r3, #0
  4087e4:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  4087e6:	68f8      	ldr	r0, [r7, #12]
  4087e8:	4b13      	ldr	r3, [pc, #76]	; (408838 <pio_handler_set_priority+0x64>)
  4087ea:	4798      	blx	r3
  4087ec:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4087ee:	f04f 31ff 	mov.w	r1, #4294967295
  4087f2:	68f8      	ldr	r0, [r7, #12]
  4087f4:	4b11      	ldr	r3, [pc, #68]	; (40883c <pio_handler_set_priority+0x68>)
  4087f6:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4087f8:	68f8      	ldr	r0, [r7, #12]
  4087fa:	4b11      	ldr	r3, [pc, #68]	; (408840 <pio_handler_set_priority+0x6c>)
  4087fc:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  4087fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
  408802:	4618      	mov	r0, r3
  408804:	4b0f      	ldr	r3, [pc, #60]	; (408844 <pio_handler_set_priority+0x70>)
  408806:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  408808:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40880c:	4618      	mov	r0, r3
  40880e:	4b0e      	ldr	r3, [pc, #56]	; (408848 <pio_handler_set_priority+0x74>)
  408810:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  408812:	f997 300b 	ldrsb.w	r3, [r7, #11]
  408816:	6879      	ldr	r1, [r7, #4]
  408818:	4618      	mov	r0, r3
  40881a:	4b0c      	ldr	r3, [pc, #48]	; (40884c <pio_handler_set_priority+0x78>)
  40881c:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  40881e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  408822:	4618      	mov	r0, r3
  408824:	4b0a      	ldr	r3, [pc, #40]	; (408850 <pio_handler_set_priority+0x7c>)
  408826:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  408828:	6979      	ldr	r1, [r7, #20]
  40882a:	68f8      	ldr	r0, [r7, #12]
  40882c:	4b09      	ldr	r3, [pc, #36]	; (408854 <pio_handler_set_priority+0x80>)
  40882e:	4798      	blx	r3
}
  408830:	bf00      	nop
  408832:	3718      	adds	r7, #24
  408834:	46bd      	mov	sp, r7
  408836:	bd80      	pop	{r7, pc}
  408838:	00408549 	.word	0x00408549
  40883c:	00408515 	.word	0x00408515
  408840:	00408531 	.word	0x00408531
  408844:	00408595 	.word	0x00408595
  408848:	004085c9 	.word	0x004085c9
  40884c:	004085fd 	.word	0x004085fd
  408850:	00408561 	.word	0x00408561
  408854:	004084f9 	.word	0x004084f9

00408858 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  408858:	b480      	push	{r7}
  40885a:	b085      	sub	sp, #20
  40885c:	af00      	add	r7, sp, #0
  40885e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  408860:	491d      	ldr	r1, [pc, #116]	; (4088d8 <pmc_switch_mck_to_pllack+0x80>)
  408862:	4b1d      	ldr	r3, [pc, #116]	; (4088d8 <pmc_switch_mck_to_pllack+0x80>)
  408864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40886a:	687b      	ldr	r3, [r7, #4]
  40886c:	4313      	orrs	r3, r2
  40886e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  408870:	f44f 6300 	mov.w	r3, #2048	; 0x800
  408874:	60fb      	str	r3, [r7, #12]
  408876:	e007      	b.n	408888 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  408878:	68fb      	ldr	r3, [r7, #12]
  40887a:	2b00      	cmp	r3, #0
  40887c:	d101      	bne.n	408882 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40887e:	2301      	movs	r3, #1
  408880:	e023      	b.n	4088ca <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  408882:	68fb      	ldr	r3, [r7, #12]
  408884:	3b01      	subs	r3, #1
  408886:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  408888:	4b13      	ldr	r3, [pc, #76]	; (4088d8 <pmc_switch_mck_to_pllack+0x80>)
  40888a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40888c:	f003 0308 	and.w	r3, r3, #8
  408890:	2b00      	cmp	r3, #0
  408892:	d0f1      	beq.n	408878 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  408894:	4a10      	ldr	r2, [pc, #64]	; (4088d8 <pmc_switch_mck_to_pllack+0x80>)
  408896:	4b10      	ldr	r3, [pc, #64]	; (4088d8 <pmc_switch_mck_to_pllack+0x80>)
  408898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40889a:	f023 0303 	bic.w	r3, r3, #3
  40889e:	f043 0302 	orr.w	r3, r3, #2
  4088a2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4088a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4088a8:	60fb      	str	r3, [r7, #12]
  4088aa:	e007      	b.n	4088bc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4088ac:	68fb      	ldr	r3, [r7, #12]
  4088ae:	2b00      	cmp	r3, #0
  4088b0:	d101      	bne.n	4088b6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4088b2:	2301      	movs	r3, #1
  4088b4:	e009      	b.n	4088ca <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4088b6:	68fb      	ldr	r3, [r7, #12]
  4088b8:	3b01      	subs	r3, #1
  4088ba:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4088bc:	4b06      	ldr	r3, [pc, #24]	; (4088d8 <pmc_switch_mck_to_pllack+0x80>)
  4088be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4088c0:	f003 0308 	and.w	r3, r3, #8
  4088c4:	2b00      	cmp	r3, #0
  4088c6:	d0f1      	beq.n	4088ac <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4088c8:	2300      	movs	r3, #0
}
  4088ca:	4618      	mov	r0, r3
  4088cc:	3714      	adds	r7, #20
  4088ce:	46bd      	mov	sp, r7
  4088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4088d4:	4770      	bx	lr
  4088d6:	bf00      	nop
  4088d8:	400e0400 	.word	0x400e0400

004088dc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4088dc:	b480      	push	{r7}
  4088de:	b083      	sub	sp, #12
  4088e0:	af00      	add	r7, sp, #0
  4088e2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4088e4:	687b      	ldr	r3, [r7, #4]
  4088e6:	2b01      	cmp	r3, #1
  4088e8:	d107      	bne.n	4088fa <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4088ea:	4a08      	ldr	r2, [pc, #32]	; (40890c <pmc_switch_sclk_to_32kxtal+0x30>)
  4088ec:	4b07      	ldr	r3, [pc, #28]	; (40890c <pmc_switch_sclk_to_32kxtal+0x30>)
  4088ee:	689b      	ldr	r3, [r3, #8]
  4088f0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4088f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4088f8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4088fa:	4b04      	ldr	r3, [pc, #16]	; (40890c <pmc_switch_sclk_to_32kxtal+0x30>)
  4088fc:	4a04      	ldr	r2, [pc, #16]	; (408910 <pmc_switch_sclk_to_32kxtal+0x34>)
  4088fe:	601a      	str	r2, [r3, #0]
}
  408900:	bf00      	nop
  408902:	370c      	adds	r7, #12
  408904:	46bd      	mov	sp, r7
  408906:	f85d 7b04 	ldr.w	r7, [sp], #4
  40890a:	4770      	bx	lr
  40890c:	400e1410 	.word	0x400e1410
  408910:	a5000008 	.word	0xa5000008

00408914 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  408914:	b480      	push	{r7}
  408916:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  408918:	4b09      	ldr	r3, [pc, #36]	; (408940 <pmc_osc_is_ready_32kxtal+0x2c>)
  40891a:	695b      	ldr	r3, [r3, #20]
  40891c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  408920:	2b00      	cmp	r3, #0
  408922:	d007      	beq.n	408934 <pmc_osc_is_ready_32kxtal+0x20>
  408924:	4b07      	ldr	r3, [pc, #28]	; (408944 <pmc_osc_is_ready_32kxtal+0x30>)
  408926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408928:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40892c:	2b00      	cmp	r3, #0
  40892e:	d001      	beq.n	408934 <pmc_osc_is_ready_32kxtal+0x20>
  408930:	2301      	movs	r3, #1
  408932:	e000      	b.n	408936 <pmc_osc_is_ready_32kxtal+0x22>
  408934:	2300      	movs	r3, #0
}
  408936:	4618      	mov	r0, r3
  408938:	46bd      	mov	sp, r7
  40893a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40893e:	4770      	bx	lr
  408940:	400e1410 	.word	0x400e1410
  408944:	400e0400 	.word	0x400e0400

00408948 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  408948:	b480      	push	{r7}
  40894a:	b083      	sub	sp, #12
  40894c:	af00      	add	r7, sp, #0
  40894e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  408950:	4a18      	ldr	r2, [pc, #96]	; (4089b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  408952:	4b18      	ldr	r3, [pc, #96]	; (4089b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  408954:	6a1b      	ldr	r3, [r3, #32]
  408956:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40895a:	f043 0308 	orr.w	r3, r3, #8
  40895e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  408960:	bf00      	nop
  408962:	4b14      	ldr	r3, [pc, #80]	; (4089b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  408964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40896a:	2b00      	cmp	r3, #0
  40896c:	d0f9      	beq.n	408962 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40896e:	4911      	ldr	r1, [pc, #68]	; (4089b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  408970:	4b10      	ldr	r3, [pc, #64]	; (4089b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  408972:	6a1b      	ldr	r3, [r3, #32]
  408974:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  408978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40897c:	687a      	ldr	r2, [r7, #4]
  40897e:	4313      	orrs	r3, r2
  408980:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  408984:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  408986:	bf00      	nop
  408988:	4b0a      	ldr	r3, [pc, #40]	; (4089b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  40898a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40898c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  408990:	2b00      	cmp	r3, #0
  408992:	d0f9      	beq.n	408988 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  408994:	4a07      	ldr	r2, [pc, #28]	; (4089b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  408996:	4b07      	ldr	r3, [pc, #28]	; (4089b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  408998:	6a1b      	ldr	r3, [r3, #32]
  40899a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40899e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4089a2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4089a6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4089a8:	bf00      	nop
  4089aa:	370c      	adds	r7, #12
  4089ac:	46bd      	mov	sp, r7
  4089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4089b2:	4770      	bx	lr
  4089b4:	400e0400 	.word	0x400e0400

004089b8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4089b8:	b480      	push	{r7}
  4089ba:	b083      	sub	sp, #12
  4089bc:	af00      	add	r7, sp, #0
  4089be:	6078      	str	r0, [r7, #4]
  4089c0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4089c2:	687b      	ldr	r3, [r7, #4]
  4089c4:	2b00      	cmp	r3, #0
  4089c6:	d008      	beq.n	4089da <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4089c8:	4916      	ldr	r1, [pc, #88]	; (408a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4089ca:	4b16      	ldr	r3, [pc, #88]	; (408a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4089cc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4089ce:	4a16      	ldr	r2, [pc, #88]	; (408a28 <pmc_switch_mainck_to_xtal+0x70>)
  4089d0:	401a      	ands	r2, r3
  4089d2:	4b16      	ldr	r3, [pc, #88]	; (408a2c <pmc_switch_mainck_to_xtal+0x74>)
  4089d4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4089d6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4089d8:	e01e      	b.n	408a18 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4089da:	4912      	ldr	r1, [pc, #72]	; (408a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4089dc:	4b11      	ldr	r3, [pc, #68]	; (408a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4089de:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4089e0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4089e4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4089e8:	683a      	ldr	r2, [r7, #0]
  4089ea:	0212      	lsls	r2, r2, #8
  4089ec:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4089ee:	4313      	orrs	r3, r2
  4089f0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4089f4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4089f8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4089fa:	bf00      	nop
  4089fc:	4b09      	ldr	r3, [pc, #36]	; (408a24 <pmc_switch_mainck_to_xtal+0x6c>)
  4089fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408a00:	f003 0301 	and.w	r3, r3, #1
  408a04:	2b00      	cmp	r3, #0
  408a06:	d0f9      	beq.n	4089fc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  408a08:	4a06      	ldr	r2, [pc, #24]	; (408a24 <pmc_switch_mainck_to_xtal+0x6c>)
  408a0a:	4b06      	ldr	r3, [pc, #24]	; (408a24 <pmc_switch_mainck_to_xtal+0x6c>)
  408a0c:	6a1b      	ldr	r3, [r3, #32]
  408a0e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  408a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  408a16:	6213      	str	r3, [r2, #32]
}
  408a18:	bf00      	nop
  408a1a:	370c      	adds	r7, #12
  408a1c:	46bd      	mov	sp, r7
  408a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a22:	4770      	bx	lr
  408a24:	400e0400 	.word	0x400e0400
  408a28:	fec8fffc 	.word	0xfec8fffc
  408a2c:	01370002 	.word	0x01370002

00408a30 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  408a30:	b480      	push	{r7}
  408a32:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  408a34:	4b04      	ldr	r3, [pc, #16]	; (408a48 <pmc_osc_is_ready_mainck+0x18>)
  408a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  408a3c:	4618      	mov	r0, r3
  408a3e:	46bd      	mov	sp, r7
  408a40:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a44:	4770      	bx	lr
  408a46:	bf00      	nop
  408a48:	400e0400 	.word	0x400e0400

00408a4c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  408a4c:	b480      	push	{r7}
  408a4e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  408a50:	4b03      	ldr	r3, [pc, #12]	; (408a60 <pmc_disable_pllack+0x14>)
  408a52:	2200      	movs	r2, #0
  408a54:	629a      	str	r2, [r3, #40]	; 0x28
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
#endif
}
  408a56:	bf00      	nop
  408a58:	46bd      	mov	sp, r7
  408a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a5e:	4770      	bx	lr
  408a60:	400e0400 	.word	0x400e0400

00408a64 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  408a64:	b480      	push	{r7}
  408a66:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  408a68:	4b04      	ldr	r3, [pc, #16]	; (408a7c <pmc_is_locked_pllack+0x18>)
  408a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408a6c:	f003 0302 	and.w	r3, r3, #2
}
  408a70:	4618      	mov	r0, r3
  408a72:	46bd      	mov	sp, r7
  408a74:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a78:	4770      	bx	lr
  408a7a:	bf00      	nop
  408a7c:	400e0400 	.word	0x400e0400

00408a80 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  408a80:	b480      	push	{r7}
  408a82:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  408a84:	4b03      	ldr	r3, [pc, #12]	; (408a94 <pmc_disable_pllbck+0x14>)
  408a86:	2200      	movs	r2, #0
  408a88:	62da      	str	r2, [r3, #44]	; 0x2c
}
  408a8a:	bf00      	nop
  408a8c:	46bd      	mov	sp, r7
  408a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  408a92:	4770      	bx	lr
  408a94:	400e0400 	.word	0x400e0400

00408a98 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  408a98:	b480      	push	{r7}
  408a9a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  408a9c:	4b04      	ldr	r3, [pc, #16]	; (408ab0 <pmc_is_locked_pllbck+0x18>)
  408a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  408aa0:	f003 0304 	and.w	r3, r3, #4
}
  408aa4:	4618      	mov	r0, r3
  408aa6:	46bd      	mov	sp, r7
  408aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
  408aac:	4770      	bx	lr
  408aae:	bf00      	nop
  408ab0:	400e0400 	.word	0x400e0400

00408ab4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  408ab4:	b480      	push	{r7}
  408ab6:	b083      	sub	sp, #12
  408ab8:	af00      	add	r7, sp, #0
  408aba:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  408abc:	687b      	ldr	r3, [r7, #4]
  408abe:	2b32      	cmp	r3, #50	; 0x32
  408ac0:	d901      	bls.n	408ac6 <pmc_enable_periph_clk+0x12>
		return 1;
  408ac2:	2301      	movs	r3, #1
  408ac4:	e02f      	b.n	408b26 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  408ac6:	687b      	ldr	r3, [r7, #4]
  408ac8:	2b1f      	cmp	r3, #31
  408aca:	d813      	bhi.n	408af4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  408acc:	4b19      	ldr	r3, [pc, #100]	; (408b34 <pmc_enable_periph_clk+0x80>)
  408ace:	699a      	ldr	r2, [r3, #24]
  408ad0:	2101      	movs	r1, #1
  408ad2:	687b      	ldr	r3, [r7, #4]
  408ad4:	fa01 f303 	lsl.w	r3, r1, r3
  408ad8:	401a      	ands	r2, r3
  408ada:	2101      	movs	r1, #1
  408adc:	687b      	ldr	r3, [r7, #4]
  408ade:	fa01 f303 	lsl.w	r3, r1, r3
  408ae2:	429a      	cmp	r2, r3
  408ae4:	d01e      	beq.n	408b24 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  408ae6:	4a13      	ldr	r2, [pc, #76]	; (408b34 <pmc_enable_periph_clk+0x80>)
  408ae8:	2101      	movs	r1, #1
  408aea:	687b      	ldr	r3, [r7, #4]
  408aec:	fa01 f303 	lsl.w	r3, r1, r3
  408af0:	6113      	str	r3, [r2, #16]
  408af2:	e017      	b.n	408b24 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  408af4:	687b      	ldr	r3, [r7, #4]
  408af6:	3b20      	subs	r3, #32
  408af8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  408afa:	4b0e      	ldr	r3, [pc, #56]	; (408b34 <pmc_enable_periph_clk+0x80>)
  408afc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  408b00:	2101      	movs	r1, #1
  408b02:	687b      	ldr	r3, [r7, #4]
  408b04:	fa01 f303 	lsl.w	r3, r1, r3
  408b08:	401a      	ands	r2, r3
  408b0a:	2101      	movs	r1, #1
  408b0c:	687b      	ldr	r3, [r7, #4]
  408b0e:	fa01 f303 	lsl.w	r3, r1, r3
  408b12:	429a      	cmp	r2, r3
  408b14:	d006      	beq.n	408b24 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  408b16:	4a07      	ldr	r2, [pc, #28]	; (408b34 <pmc_enable_periph_clk+0x80>)
  408b18:	2101      	movs	r1, #1
  408b1a:	687b      	ldr	r3, [r7, #4]
  408b1c:	fa01 f303 	lsl.w	r3, r1, r3
  408b20:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  408b24:	2300      	movs	r3, #0
}
  408b26:	4618      	mov	r0, r3
  408b28:	370c      	adds	r7, #12
  408b2a:	46bd      	mov	sp, r7
  408b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b30:	4770      	bx	lr
  408b32:	bf00      	nop
  408b34:	400e0400 	.word	0x400e0400

00408b38 <pmc_switch_pck_to_mck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  408b38:	b480      	push	{r7}
  408b3a:	b085      	sub	sp, #20
  408b3c:	af00      	add	r7, sp, #0
  408b3e:	6078      	str	r0, [r7, #4]
  408b40:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  408b42:	4912      	ldr	r1, [pc, #72]	; (408b8c <pmc_switch_pck_to_mck+0x54>)
  408b44:	683b      	ldr	r3, [r7, #0]
  408b46:	f043 0204 	orr.w	r2, r3, #4
  408b4a:	687b      	ldr	r3, [r7, #4]
  408b4c:	3310      	adds	r3, #16
  408b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  408b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
  408b56:	60fb      	str	r3, [r7, #12]
  408b58:	e007      	b.n	408b6a <pmc_switch_pck_to_mck+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  408b5a:	68fb      	ldr	r3, [r7, #12]
  408b5c:	2b00      	cmp	r3, #0
  408b5e:	d101      	bne.n	408b64 <pmc_switch_pck_to_mck+0x2c>
			return 1;
  408b60:	2301      	movs	r3, #1
  408b62:	e00d      	b.n	408b80 <pmc_switch_pck_to_mck+0x48>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  408b64:	68fb      	ldr	r3, [r7, #12]
  408b66:	3b01      	subs	r3, #1
  408b68:	60fb      	str	r3, [r7, #12]
  408b6a:	4b08      	ldr	r3, [pc, #32]	; (408b8c <pmc_switch_pck_to_mck+0x54>)
  408b6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  408b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
  408b72:	687b      	ldr	r3, [r7, #4]
  408b74:	fa01 f303 	lsl.w	r3, r1, r3
  408b78:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  408b7a:	2b00      	cmp	r3, #0
  408b7c:	d0ed      	beq.n	408b5a <pmc_switch_pck_to_mck+0x22>
		}
	}

	return 0;
  408b7e:	2300      	movs	r3, #0
}
  408b80:	4618      	mov	r0, r3
  408b82:	3714      	adds	r7, #20
  408b84:	46bd      	mov	sp, r7
  408b86:	f85d 7b04 	ldr.w	r7, [sp], #4
  408b8a:	4770      	bx	lr
  408b8c:	400e0400 	.word	0x400e0400

00408b90 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
  408b90:	b480      	push	{r7}
  408b92:	b083      	sub	sp, #12
  408b94:	af00      	add	r7, sp, #0
  408b96:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  408b98:	4a06      	ldr	r2, [pc, #24]	; (408bb4 <pmc_enable_pck+0x24>)
  408b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
  408b9e:	687b      	ldr	r3, [r7, #4]
  408ba0:	fa01 f303 	lsl.w	r3, r1, r3
  408ba4:	6013      	str	r3, [r2, #0]
}
  408ba6:	bf00      	nop
  408ba8:	370c      	adds	r7, #12
  408baa:	46bd      	mov	sp, r7
  408bac:	f85d 7b04 	ldr.w	r7, [sp], #4
  408bb0:	4770      	bx	lr
  408bb2:	bf00      	nop
  408bb4:	400e0400 	.word	0x400e0400

00408bb8 <pmc_disable_pck>:
 * \brief Disable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
  408bb8:	b480      	push	{r7}
  408bba:	b083      	sub	sp, #12
  408bbc:	af00      	add	r7, sp, #0
  408bbe:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  408bc0:	4a06      	ldr	r2, [pc, #24]	; (408bdc <pmc_disable_pck+0x24>)
  408bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
  408bc6:	687b      	ldr	r3, [r7, #4]
  408bc8:	fa01 f303 	lsl.w	r3, r1, r3
  408bcc:	6053      	str	r3, [r2, #4]
}
  408bce:	bf00      	nop
  408bd0:	370c      	adds	r7, #12
  408bd2:	46bd      	mov	sp, r7
  408bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  408bd8:	4770      	bx	lr
  408bda:	bf00      	nop
  408bdc:	400e0400 	.word	0x400e0400

00408be0 <rtc_enable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  408be0:	b480      	push	{r7}
  408be2:	b083      	sub	sp, #12
  408be4:	af00      	add	r7, sp, #0
  408be6:	6078      	str	r0, [r7, #4]
  408be8:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IER = ul_sources;
  408bea:	687b      	ldr	r3, [r7, #4]
  408bec:	683a      	ldr	r2, [r7, #0]
  408bee:	621a      	str	r2, [r3, #32]
}
  408bf0:	bf00      	nop
  408bf2:	370c      	adds	r7, #12
  408bf4:	46bd      	mov	sp, r7
  408bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
  408bfa:	4770      	bx	lr

00408bfc <rtc_disable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtc_disable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  408bfc:	b480      	push	{r7}
  408bfe:	b083      	sub	sp, #12
  408c00:	af00      	add	r7, sp, #0
  408c02:	6078      	str	r0, [r7, #4]
  408c04:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IDR = ul_sources;
  408c06:	687b      	ldr	r3, [r7, #4]
  408c08:	683a      	ldr	r2, [r7, #0]
  408c0a:	625a      	str	r2, [r3, #36]	; 0x24
}
  408c0c:	bf00      	nop
  408c0e:	370c      	adds	r7, #12
  408c10:	46bd      	mov	sp, r7
  408c12:	f85d 7b04 	ldr.w	r7, [sp], #4
  408c16:	4770      	bx	lr

00408c18 <rtc_get_status>:
 * \param p_rtc Pointer to an RTC instance.
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
  408c18:	b480      	push	{r7}
  408c1a:	b083      	sub	sp, #12
  408c1c:	af00      	add	r7, sp, #0
  408c1e:	6078      	str	r0, [r7, #4]
	return (p_rtc->RTC_SR);
  408c20:	687b      	ldr	r3, [r7, #4]
  408c22:	699b      	ldr	r3, [r3, #24]
}
  408c24:	4618      	mov	r0, r3
  408c26:	370c      	adds	r7, #12
  408c28:	46bd      	mov	sp, r7
  408c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408c2e:	4770      	bx	lr

00408c30 <rtc_clear_status>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
  408c30:	b480      	push	{r7}
  408c32:	b083      	sub	sp, #12
  408c34:	af00      	add	r7, sp, #0
  408c36:	6078      	str	r0, [r7, #4]
  408c38:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_SCCR = ul_clear;
  408c3a:	687b      	ldr	r3, [r7, #4]
  408c3c:	683a      	ldr	r2, [r7, #0]
  408c3e:	61da      	str	r2, [r3, #28]
}
  408c40:	bf00      	nop
  408c42:	370c      	adds	r7, #12
  408c44:	46bd      	mov	sp, r7
  408c46:	f85d 7b04 	ldr.w	r7, [sp], #4
  408c4a:	4770      	bx	lr

00408c4c <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  408c4c:	b480      	push	{r7}
  408c4e:	b083      	sub	sp, #12
  408c50:	af00      	add	r7, sp, #0
  408c52:	6078      	str	r0, [r7, #4]
  408c54:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  408c56:	687b      	ldr	r3, [r7, #4]
  408c58:	685b      	ldr	r3, [r3, #4]
  408c5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
  408c5e:	687b      	ldr	r3, [r7, #4]
  408c60:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  408c62:	687b      	ldr	r3, [r7, #4]
  408c64:	685a      	ldr	r2, [r3, #4]
  408c66:	683b      	ldr	r3, [r7, #0]
  408c68:	041b      	lsls	r3, r3, #16
  408c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  408c6e:	431a      	orrs	r2, r3
  408c70:	687b      	ldr	r3, [r7, #4]
  408c72:	605a      	str	r2, [r3, #4]
}
  408c74:	bf00      	nop
  408c76:	370c      	adds	r7, #12
  408c78:	46bd      	mov	sp, r7
  408c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408c7e:	4770      	bx	lr

00408c80 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  408c80:	b480      	push	{r7}
  408c82:	b085      	sub	sp, #20
  408c84:	af00      	add	r7, sp, #0
  408c86:	60f8      	str	r0, [r7, #12]
  408c88:	60b9      	str	r1, [r7, #8]
  408c8a:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  408c8c:	687b      	ldr	r3, [r7, #4]
  408c8e:	2b00      	cmp	r3, #0
  408c90:	d00c      	beq.n	408cac <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  408c92:	68fb      	ldr	r3, [r7, #12]
  408c94:	68ba      	ldr	r2, [r7, #8]
  408c96:	320c      	adds	r2, #12
  408c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408c9c:	f043 0101 	orr.w	r1, r3, #1
  408ca0:	68fb      	ldr	r3, [r7, #12]
  408ca2:	68ba      	ldr	r2, [r7, #8]
  408ca4:	320c      	adds	r2, #12
  408ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  408caa:	e00b      	b.n	408cc4 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  408cac:	68fb      	ldr	r3, [r7, #12]
  408cae:	68ba      	ldr	r2, [r7, #8]
  408cb0:	320c      	adds	r2, #12
  408cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408cb6:	f023 0101 	bic.w	r1, r3, #1
  408cba:	68fb      	ldr	r3, [r7, #12]
  408cbc:	68ba      	ldr	r2, [r7, #8]
  408cbe:	320c      	adds	r2, #12
  408cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408cc4:	bf00      	nop
  408cc6:	3714      	adds	r7, #20
  408cc8:	46bd      	mov	sp, r7
  408cca:	f85d 7b04 	ldr.w	r7, [sp], #4
  408cce:	4770      	bx	lr

00408cd0 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  408cd0:	b480      	push	{r7}
  408cd2:	b085      	sub	sp, #20
  408cd4:	af00      	add	r7, sp, #0
  408cd6:	60f8      	str	r0, [r7, #12]
  408cd8:	60b9      	str	r1, [r7, #8]
  408cda:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  408cdc:	687b      	ldr	r3, [r7, #4]
  408cde:	2b00      	cmp	r3, #0
  408ce0:	d00c      	beq.n	408cfc <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  408ce2:	68fb      	ldr	r3, [r7, #12]
  408ce4:	68ba      	ldr	r2, [r7, #8]
  408ce6:	320c      	adds	r2, #12
  408ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408cec:	f043 0102 	orr.w	r1, r3, #2
  408cf0:	68fb      	ldr	r3, [r7, #12]
  408cf2:	68ba      	ldr	r2, [r7, #8]
  408cf4:	320c      	adds	r2, #12
  408cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  408cfa:	e00b      	b.n	408d14 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  408cfc:	68fb      	ldr	r3, [r7, #12]
  408cfe:	68ba      	ldr	r2, [r7, #8]
  408d00:	320c      	adds	r2, #12
  408d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d06:	f023 0102 	bic.w	r1, r3, #2
  408d0a:	68fb      	ldr	r3, [r7, #12]
  408d0c:	68ba      	ldr	r2, [r7, #8]
  408d0e:	320c      	adds	r2, #12
  408d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408d14:	bf00      	nop
  408d16:	3714      	adds	r7, #20
  408d18:	46bd      	mov	sp, r7
  408d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408d1e:	4770      	bx	lr

00408d20 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  408d20:	b480      	push	{r7}
  408d22:	b085      	sub	sp, #20
  408d24:	af00      	add	r7, sp, #0
  408d26:	60f8      	str	r0, [r7, #12]
  408d28:	60b9      	str	r1, [r7, #8]
  408d2a:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  408d2c:	687b      	ldr	r3, [r7, #4]
  408d2e:	2b04      	cmp	r3, #4
  408d30:	d118      	bne.n	408d64 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  408d32:	68fb      	ldr	r3, [r7, #12]
  408d34:	68ba      	ldr	r2, [r7, #8]
  408d36:	320c      	adds	r2, #12
  408d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d3c:	f023 0108 	bic.w	r1, r3, #8
  408d40:	68fb      	ldr	r3, [r7, #12]
  408d42:	68ba      	ldr	r2, [r7, #8]
  408d44:	320c      	adds	r2, #12
  408d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  408d4a:	68fb      	ldr	r3, [r7, #12]
  408d4c:	68ba      	ldr	r2, [r7, #8]
  408d4e:	320c      	adds	r2, #12
  408d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d54:	f043 0104 	orr.w	r1, r3, #4
  408d58:	68fb      	ldr	r3, [r7, #12]
  408d5a:	68ba      	ldr	r2, [r7, #8]
  408d5c:	320c      	adds	r2, #12
  408d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  408d62:	e02a      	b.n	408dba <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  408d64:	687b      	ldr	r3, [r7, #4]
  408d66:	2b00      	cmp	r3, #0
  408d68:	d118      	bne.n	408d9c <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  408d6a:	68fb      	ldr	r3, [r7, #12]
  408d6c:	68ba      	ldr	r2, [r7, #8]
  408d6e:	320c      	adds	r2, #12
  408d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d74:	f023 0108 	bic.w	r1, r3, #8
  408d78:	68fb      	ldr	r3, [r7, #12]
  408d7a:	68ba      	ldr	r2, [r7, #8]
  408d7c:	320c      	adds	r2, #12
  408d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  408d82:	68fb      	ldr	r3, [r7, #12]
  408d84:	68ba      	ldr	r2, [r7, #8]
  408d86:	320c      	adds	r2, #12
  408d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408d8c:	f023 0104 	bic.w	r1, r3, #4
  408d90:	68fb      	ldr	r3, [r7, #12]
  408d92:	68ba      	ldr	r2, [r7, #8]
  408d94:	320c      	adds	r2, #12
  408d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408d9a:	e00e      	b.n	408dba <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  408d9c:	687b      	ldr	r3, [r7, #4]
  408d9e:	2b08      	cmp	r3, #8
  408da0:	d10b      	bne.n	408dba <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  408da2:	68fb      	ldr	r3, [r7, #12]
  408da4:	68ba      	ldr	r2, [r7, #8]
  408da6:	320c      	adds	r2, #12
  408da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408dac:	f043 0108 	orr.w	r1, r3, #8
  408db0:	68fb      	ldr	r3, [r7, #12]
  408db2:	68ba      	ldr	r2, [r7, #8]
  408db4:	320c      	adds	r2, #12
  408db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408dba:	bf00      	nop
  408dbc:	3714      	adds	r7, #20
  408dbe:	46bd      	mov	sp, r7
  408dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  408dc4:	4770      	bx	lr

00408dc6 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  408dc6:	b480      	push	{r7}
  408dc8:	b085      	sub	sp, #20
  408dca:	af00      	add	r7, sp, #0
  408dcc:	60f8      	str	r0, [r7, #12]
  408dce:	60b9      	str	r1, [r7, #8]
  408dd0:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  408dd2:	68fb      	ldr	r3, [r7, #12]
  408dd4:	68ba      	ldr	r2, [r7, #8]
  408dd6:	320c      	adds	r2, #12
  408dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408ddc:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  408de0:	68fb      	ldr	r3, [r7, #12]
  408de2:	68ba      	ldr	r2, [r7, #8]
  408de4:	320c      	adds	r2, #12
  408de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  408dea:	68fb      	ldr	r3, [r7, #12]
  408dec:	68ba      	ldr	r2, [r7, #8]
  408dee:	320c      	adds	r2, #12
  408df0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  408df4:	687b      	ldr	r3, [r7, #4]
  408df6:	ea42 0103 	orr.w	r1, r2, r3
  408dfa:	68fb      	ldr	r3, [r7, #12]
  408dfc:	68ba      	ldr	r2, [r7, #8]
  408dfe:	320c      	adds	r2, #12
  408e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408e04:	bf00      	nop
  408e06:	3714      	adds	r7, #20
  408e08:	46bd      	mov	sp, r7
  408e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408e0e:	4770      	bx	lr

00408e10 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  408e10:	b480      	push	{r7}
  408e12:	b085      	sub	sp, #20
  408e14:	af00      	add	r7, sp, #0
  408e16:	60f8      	str	r0, [r7, #12]
  408e18:	60b9      	str	r1, [r7, #8]
  408e1a:	4613      	mov	r3, r2
  408e1c:	71fb      	strb	r3, [r7, #7]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
  408e1e:	79fb      	ldrb	r3, [r7, #7]
  408e20:	2b00      	cmp	r3, #0
  408e22:	d102      	bne.n	408e2a <spi_set_baudrate_div+0x1a>
		return -1;
  408e24:	f04f 33ff 	mov.w	r3, #4294967295
  408e28:	e01b      	b.n	408e62 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  408e2a:	68fb      	ldr	r3, [r7, #12]
  408e2c:	68ba      	ldr	r2, [r7, #8]
  408e2e:	320c      	adds	r2, #12
  408e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408e34:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  408e38:	68fb      	ldr	r3, [r7, #12]
  408e3a:	68ba      	ldr	r2, [r7, #8]
  408e3c:	320c      	adds	r2, #12
  408e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  408e42:	68fb      	ldr	r3, [r7, #12]
  408e44:	68ba      	ldr	r2, [r7, #8]
  408e46:	320c      	adds	r2, #12
  408e48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  408e4c:	79fb      	ldrb	r3, [r7, #7]
  408e4e:	021b      	lsls	r3, r3, #8
  408e50:	b29b      	uxth	r3, r3
  408e52:	ea42 0103 	orr.w	r1, r2, r3
  408e56:	68fb      	ldr	r3, [r7, #12]
  408e58:	68ba      	ldr	r2, [r7, #8]
  408e5a:	320c      	adds	r2, #12
  408e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  408e60:	2300      	movs	r3, #0
}
  408e62:	4618      	mov	r0, r3
  408e64:	3714      	adds	r7, #20
  408e66:	46bd      	mov	sp, r7
  408e68:	f85d 7b04 	ldr.w	r7, [sp], #4
  408e6c:	4770      	bx	lr

00408e6e <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  408e6e:	b480      	push	{r7}
  408e70:	b085      	sub	sp, #20
  408e72:	af00      	add	r7, sp, #0
  408e74:	60f8      	str	r0, [r7, #12]
  408e76:	60b9      	str	r1, [r7, #8]
  408e78:	4611      	mov	r1, r2
  408e7a:	461a      	mov	r2, r3
  408e7c:	460b      	mov	r3, r1
  408e7e:	71fb      	strb	r3, [r7, #7]
  408e80:	4613      	mov	r3, r2
  408e82:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  408e84:	68fb      	ldr	r3, [r7, #12]
  408e86:	68ba      	ldr	r2, [r7, #8]
  408e88:	320c      	adds	r2, #12
  408e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  408e8e:	b299      	uxth	r1, r3
  408e90:	68fb      	ldr	r3, [r7, #12]
  408e92:	68ba      	ldr	r2, [r7, #8]
  408e94:	320c      	adds	r2, #12
  408e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  408e9a:	68fb      	ldr	r3, [r7, #12]
  408e9c:	68ba      	ldr	r2, [r7, #8]
  408e9e:	320c      	adds	r2, #12
  408ea0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  408ea4:	79fb      	ldrb	r3, [r7, #7]
  408ea6:	041b      	lsls	r3, r3, #16
  408ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  408eac:	79b9      	ldrb	r1, [r7, #6]
  408eae:	0609      	lsls	r1, r1, #24
  408eb0:	430b      	orrs	r3, r1
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  408eb2:	ea42 0103 	orr.w	r1, r2, r3
  408eb6:	68fb      	ldr	r3, [r7, #12]
  408eb8:	68ba      	ldr	r2, [r7, #8]
  408eba:	320c      	adds	r2, #12
  408ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  408ec0:	bf00      	nop
  408ec2:	3714      	adds	r7, #20
  408ec4:	46bd      	mov	sp, r7
  408ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
  408eca:	4770      	bx	lr

00408ecc <supc_set_regulator_trim_user>:
 * \param value the trim value.
 *
 * \note For the trim value in 96M PLL, please read the value in flash unique identifier area.
 */
void supc_set_regulator_trim_user(Supc *p_supc, uint32_t value)
{
  408ecc:	b480      	push	{r7}
  408ece:	b085      	sub	sp, #20
  408ed0:	af00      	add	r7, sp, #0
  408ed2:	6078      	str	r0, [r7, #4]
  408ed4:	6039      	str	r1, [r7, #0]
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  408ed6:	687b      	ldr	r3, [r7, #4]
  408ed8:	69db      	ldr	r3, [r3, #28]
  408eda:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
  408ede:	60fb      	str	r3, [r7, #12]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  408ee0:	683b      	ldr	r3, [r7, #0]
  408ee2:	025b      	lsls	r3, r3, #9
  408ee4:	f403 52f0 	and.w	r2, r3, #7680	; 0x1e00
  408ee8:	68fb      	ldr	r3, [r7, #12]
  408eea:	4313      	orrs	r3, r2
  408eec:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  408ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  408ef4:	687a      	ldr	r2, [r7, #4]
  408ef6:	61d3      	str	r3, [r2, #28]
#endif
}
  408ef8:	bf00      	nop
  408efa:	3714      	adds	r7, #20
  408efc:	46bd      	mov	sp, r7
  408efe:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f02:	4770      	bx	lr

00408f04 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  408f04:	b480      	push	{r7}
  408f06:	b087      	sub	sp, #28
  408f08:	af00      	add	r7, sp, #0
  408f0a:	60f8      	str	r0, [r7, #12]
  408f0c:	60b9      	str	r1, [r7, #8]
  408f0e:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  408f10:	68fa      	ldr	r2, [r7, #12]
  408f12:	68bb      	ldr	r3, [r7, #8]
  408f14:	019b      	lsls	r3, r3, #6
  408f16:	4413      	add	r3, r2
  408f18:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  408f1a:	697b      	ldr	r3, [r7, #20]
  408f1c:	2202      	movs	r2, #2
  408f1e:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  408f20:	697b      	ldr	r3, [r7, #20]
  408f22:	f04f 32ff 	mov.w	r2, #4294967295
  408f26:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  408f28:	697b      	ldr	r3, [r7, #20]
  408f2a:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  408f2c:	697b      	ldr	r3, [r7, #20]
  408f2e:	687a      	ldr	r2, [r7, #4]
  408f30:	605a      	str	r2, [r3, #4]
}
  408f32:	bf00      	nop
  408f34:	371c      	adds	r7, #28
  408f36:	46bd      	mov	sp, r7
  408f38:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f3c:	4770      	bx	lr

00408f3e <tc_set_block_mode>:
 * the section  entitled "TC Block Mode Register" in the device-specific datasheet.
 */
void tc_set_block_mode(
		Tc *p_tc,
		uint32_t ul_blockmode)
{
  408f3e:	b480      	push	{r7}
  408f40:	b083      	sub	sp, #12
  408f42:	af00      	add	r7, sp, #0
  408f44:	6078      	str	r0, [r7, #4]
  408f46:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
  408f48:	687b      	ldr	r3, [r7, #4]
  408f4a:	683a      	ldr	r2, [r7, #0]
  408f4c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  408f50:	bf00      	nop
  408f52:	370c      	adds	r7, #12
  408f54:	46bd      	mov	sp, r7
  408f56:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f5a:	4770      	bx	lr

00408f5c <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  408f5c:	b480      	push	{r7}
  408f5e:	b083      	sub	sp, #12
  408f60:	af00      	add	r7, sp, #0
  408f62:	6078      	str	r0, [r7, #4]
  408f64:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  408f66:	687a      	ldr	r2, [r7, #4]
  408f68:	683b      	ldr	r3, [r7, #0]
  408f6a:	019b      	lsls	r3, r3, #6
  408f6c:	4413      	add	r3, r2
  408f6e:	2205      	movs	r2, #5
  408f70:	601a      	str	r2, [r3, #0]
}
  408f72:	bf00      	nop
  408f74:	370c      	adds	r7, #12
  408f76:	46bd      	mov	sp, r7
  408f78:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f7c:	4770      	bx	lr

00408f7e <tc_read_cv>:
 * \return The counter value.
 */
uint32_t tc_read_cv(
		Tc *p_tc,
		uint32_t ul_channel)
{
  408f7e:	b480      	push	{r7}
  408f80:	b083      	sub	sp, #12
  408f82:	af00      	add	r7, sp, #0
  408f84:	6078      	str	r0, [r7, #4]
  408f86:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
  408f88:	687a      	ldr	r2, [r7, #4]
  408f8a:	683b      	ldr	r3, [r7, #0]
  408f8c:	019b      	lsls	r3, r3, #6
  408f8e:	4413      	add	r3, r2
  408f90:	3310      	adds	r3, #16
  408f92:	681b      	ldr	r3, [r3, #0]
}
  408f94:	4618      	mov	r0, r3
  408f96:	370c      	adds	r7, #12
  408f98:	46bd      	mov	sp, r7
  408f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f9e:	4770      	bx	lr

00408fa0 <tc_read_rc>:
 * \return The Register C (RC) value.
 */
uint32_t tc_read_rc(
		Tc *p_tc,
		uint32_t ul_channel)
{
  408fa0:	b480      	push	{r7}
  408fa2:	b083      	sub	sp, #12
  408fa4:	af00      	add	r7, sp, #0
  408fa6:	6078      	str	r0, [r7, #4]
  408fa8:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RC;
  408faa:	687a      	ldr	r2, [r7, #4]
  408fac:	683b      	ldr	r3, [r7, #0]
  408fae:	019b      	lsls	r3, r3, #6
  408fb0:	4413      	add	r3, r2
  408fb2:	331c      	adds	r3, #28
  408fb4:	681b      	ldr	r3, [r3, #0]
}
  408fb6:	4618      	mov	r0, r3
  408fb8:	370c      	adds	r7, #12
  408fba:	46bd      	mov	sp, r7
  408fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  408fc0:	4770      	bx	lr

00408fc2 <tc_write_ra>:
 */
void tc_write_ra(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  408fc2:	b480      	push	{r7}
  408fc4:	b085      	sub	sp, #20
  408fc6:	af00      	add	r7, sp, #0
  408fc8:	60f8      	str	r0, [r7, #12]
  408fca:	60b9      	str	r1, [r7, #8]
  408fcc:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  408fce:	68fa      	ldr	r2, [r7, #12]
  408fd0:	68bb      	ldr	r3, [r7, #8]
  408fd2:	019b      	lsls	r3, r3, #6
  408fd4:	4413      	add	r3, r2
  408fd6:	3314      	adds	r3, #20
  408fd8:	687a      	ldr	r2, [r7, #4]
  408fda:	601a      	str	r2, [r3, #0]
}
  408fdc:	bf00      	nop
  408fde:	3714      	adds	r7, #20
  408fe0:	46bd      	mov	sp, r7
  408fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
  408fe6:	4770      	bx	lr

00408fe8 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  408fe8:	b480      	push	{r7}
  408fea:	b085      	sub	sp, #20
  408fec:	af00      	add	r7, sp, #0
  408fee:	60f8      	str	r0, [r7, #12]
  408ff0:	60b9      	str	r1, [r7, #8]
  408ff2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  408ff4:	68fa      	ldr	r2, [r7, #12]
  408ff6:	68bb      	ldr	r3, [r7, #8]
  408ff8:	019b      	lsls	r3, r3, #6
  408ffa:	4413      	add	r3, r2
  408ffc:	331c      	adds	r3, #28
  408ffe:	687a      	ldr	r2, [r7, #4]
  409000:	601a      	str	r2, [r3, #0]
}
  409002:	bf00      	nop
  409004:	3714      	adds	r7, #20
  409006:	46bd      	mov	sp, r7
  409008:	f85d 7b04 	ldr.w	r7, [sp], #4
  40900c:	4770      	bx	lr

0040900e <tc_disable_interrupt>:
 */
void tc_disable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  40900e:	b480      	push	{r7}
  409010:	b087      	sub	sp, #28
  409012:	af00      	add	r7, sp, #0
  409014:	60f8      	str	r0, [r7, #12]
  409016:	60b9      	str	r1, [r7, #8]
  409018:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40901a:	68fa      	ldr	r2, [r7, #12]
  40901c:	68bb      	ldr	r3, [r7, #8]
  40901e:	019b      	lsls	r3, r3, #6
  409020:	4413      	add	r3, r2
  409022:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IDR = ul_sources;
  409024:	697b      	ldr	r3, [r7, #20]
  409026:	687a      	ldr	r2, [r7, #4]
  409028:	629a      	str	r2, [r3, #40]	; 0x28
}
  40902a:	bf00      	nop
  40902c:	371c      	adds	r7, #28
  40902e:	46bd      	mov	sp, r7
  409030:	f85d 7b04 	ldr.w	r7, [sp], #4
  409034:	4770      	bx	lr

00409036 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  409036:	b480      	push	{r7}
  409038:	b085      	sub	sp, #20
  40903a:	af00      	add	r7, sp, #0
  40903c:	6078      	str	r0, [r7, #4]
  40903e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  409040:	687a      	ldr	r2, [r7, #4]
  409042:	683b      	ldr	r3, [r7, #0]
  409044:	019b      	lsls	r3, r3, #6
  409046:	4413      	add	r3, r2
  409048:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40904a:	68fb      	ldr	r3, [r7, #12]
  40904c:	6a1b      	ldr	r3, [r3, #32]
}
  40904e:	4618      	mov	r0, r3
  409050:	3714      	adds	r7, #20
  409052:	46bd      	mov	sp, r7
  409054:	f85d 7b04 	ldr.w	r7, [sp], #4
  409058:	4770      	bx	lr

0040905a <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  40905a:	b480      	push	{r7}
  40905c:	b083      	sub	sp, #12
  40905e:	af00      	add	r7, sp, #0
  409060:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  409062:	687b      	ldr	r3, [r7, #4]
  409064:	2208      	movs	r2, #8
  409066:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  409068:	687b      	ldr	r3, [r7, #4]
  40906a:	2220      	movs	r2, #32
  40906c:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  40906e:	687b      	ldr	r3, [r7, #4]
  409070:	2204      	movs	r2, #4
  409072:	601a      	str	r2, [r3, #0]
}
  409074:	bf00      	nop
  409076:	370c      	adds	r7, #12
  409078:	46bd      	mov	sp, r7
  40907a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40907e:	4770      	bx	lr

00409080 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  409080:	b580      	push	{r7, lr}
  409082:	b084      	sub	sp, #16
  409084:	af00      	add	r7, sp, #0
  409086:	6078      	str	r0, [r7, #4]
  409088:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  40908a:	2300      	movs	r3, #0
  40908c:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40908e:	687b      	ldr	r3, [r7, #4]
  409090:	f04f 32ff 	mov.w	r2, #4294967295
  409094:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  409096:	687b      	ldr	r3, [r7, #4]
  409098:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  40909a:	6878      	ldr	r0, [r7, #4]
  40909c:	4b0e      	ldr	r3, [pc, #56]	; (4090d8 <twi_master_init+0x58>)
  40909e:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  4090a0:	6878      	ldr	r0, [r7, #4]
  4090a2:	4b0e      	ldr	r3, [pc, #56]	; (4090dc <twi_master_init+0x5c>)
  4090a4:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  4090a6:	683b      	ldr	r3, [r7, #0]
  4090a8:	6859      	ldr	r1, [r3, #4]
  4090aa:	683b      	ldr	r3, [r7, #0]
  4090ac:	681b      	ldr	r3, [r3, #0]
  4090ae:	461a      	mov	r2, r3
  4090b0:	6878      	ldr	r0, [r7, #4]
  4090b2:	4b0b      	ldr	r3, [pc, #44]	; (4090e0 <twi_master_init+0x60>)
  4090b4:	4798      	blx	r3
  4090b6:	4603      	mov	r3, r0
  4090b8:	2b01      	cmp	r3, #1
  4090ba:	d101      	bne.n	4090c0 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  4090bc:	2301      	movs	r3, #1
  4090be:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  4090c0:	683b      	ldr	r3, [r7, #0]
  4090c2:	7a5b      	ldrb	r3, [r3, #9]
  4090c4:	2b01      	cmp	r3, #1
  4090c6:	d102      	bne.n	4090ce <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  4090c8:	687b      	ldr	r3, [r7, #4]
  4090ca:	2240      	movs	r2, #64	; 0x40
  4090cc:	601a      	str	r2, [r3, #0]
	}

	return status;
  4090ce:	68fb      	ldr	r3, [r7, #12]
}
  4090d0:	4618      	mov	r0, r3
  4090d2:	3710      	adds	r7, #16
  4090d4:	46bd      	mov	sp, r7
  4090d6:	bd80      	pop	{r7, pc}
  4090d8:	0040941d 	.word	0x0040941d
  4090dc:	0040905b 	.word	0x0040905b
  4090e0:	004090e5 	.word	0x004090e5

004090e4 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4090e4:	b480      	push	{r7}
  4090e6:	b089      	sub	sp, #36	; 0x24
  4090e8:	af00      	add	r7, sp, #0
  4090ea:	60f8      	str	r0, [r7, #12]
  4090ec:	60b9      	str	r1, [r7, #8]
  4090ee:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  4090f0:	2300      	movs	r3, #0
  4090f2:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4090f4:	68bb      	ldr	r3, [r7, #8]
  4090f6:	4a34      	ldr	r2, [pc, #208]	; (4091c8 <twi_set_speed+0xe4>)
  4090f8:	4293      	cmp	r3, r2
  4090fa:	d901      	bls.n	409100 <twi_set_speed+0x1c>
		return FAIL;
  4090fc:	2301      	movs	r3, #1
  4090fe:	e05d      	b.n	4091bc <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  409100:	68bb      	ldr	r3, [r7, #8]
  409102:	4a32      	ldr	r2, [pc, #200]	; (4091cc <twi_set_speed+0xe8>)
  409104:	4293      	cmp	r3, r2
  409106:	d937      	bls.n	409178 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  409108:	687b      	ldr	r3, [r7, #4]
  40910a:	4a31      	ldr	r2, [pc, #196]	; (4091d0 <twi_set_speed+0xec>)
  40910c:	fba2 2303 	umull	r2, r3, r2, r3
  409110:	0b9b      	lsrs	r3, r3, #14
  409112:	3b03      	subs	r3, #3
  409114:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  409116:	68ba      	ldr	r2, [r7, #8]
  409118:	4b2e      	ldr	r3, [pc, #184]	; (4091d4 <twi_set_speed+0xf0>)
  40911a:	4413      	add	r3, r2
  40911c:	009b      	lsls	r3, r3, #2
  40911e:	687a      	ldr	r2, [r7, #4]
  409120:	fbb2 f3f3 	udiv	r3, r2, r3
  409124:	3b03      	subs	r3, #3
  409126:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409128:	e005      	b.n	409136 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  40912a:	69fb      	ldr	r3, [r7, #28]
  40912c:	3301      	adds	r3, #1
  40912e:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  409130:	697b      	ldr	r3, [r7, #20]
  409132:	085b      	lsrs	r3, r3, #1
  409134:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409136:	697b      	ldr	r3, [r7, #20]
  409138:	2bff      	cmp	r3, #255	; 0xff
  40913a:	d909      	bls.n	409150 <twi_set_speed+0x6c>
  40913c:	69fb      	ldr	r3, [r7, #28]
  40913e:	2b06      	cmp	r3, #6
  409140:	d9f3      	bls.n	40912a <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409142:	e005      	b.n	409150 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  409144:	69fb      	ldr	r3, [r7, #28]
  409146:	3301      	adds	r3, #1
  409148:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  40914a:	693b      	ldr	r3, [r7, #16]
  40914c:	085b      	lsrs	r3, r3, #1
  40914e:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409150:	693b      	ldr	r3, [r7, #16]
  409152:	2bff      	cmp	r3, #255	; 0xff
  409154:	d902      	bls.n	40915c <twi_set_speed+0x78>
  409156:	69fb      	ldr	r3, [r7, #28]
  409158:	2b06      	cmp	r3, #6
  40915a:	d9f3      	bls.n	409144 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  40915c:	697b      	ldr	r3, [r7, #20]
  40915e:	b2da      	uxtb	r2, r3
  409160:	693b      	ldr	r3, [r7, #16]
  409162:	021b      	lsls	r3, r3, #8
  409164:	b29b      	uxth	r3, r3
  409166:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  409168:	69fb      	ldr	r3, [r7, #28]
  40916a:	041b      	lsls	r3, r3, #16
  40916c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  409170:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  409172:	68fb      	ldr	r3, [r7, #12]
  409174:	611a      	str	r2, [r3, #16]
  409176:	e020      	b.n	4091ba <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  409178:	68bb      	ldr	r3, [r7, #8]
  40917a:	005b      	lsls	r3, r3, #1
  40917c:	687a      	ldr	r2, [r7, #4]
  40917e:	fbb2 f3f3 	udiv	r3, r2, r3
  409182:	3b03      	subs	r3, #3
  409184:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409186:	e005      	b.n	409194 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  409188:	69fb      	ldr	r3, [r7, #28]
  40918a:	3301      	adds	r3, #1
  40918c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40918e:	69bb      	ldr	r3, [r7, #24]
  409190:	085b      	lsrs	r3, r3, #1
  409192:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409194:	69bb      	ldr	r3, [r7, #24]
  409196:	2bff      	cmp	r3, #255	; 0xff
  409198:	d902      	bls.n	4091a0 <twi_set_speed+0xbc>
  40919a:	69fb      	ldr	r3, [r7, #28]
  40919c:	2b06      	cmp	r3, #6
  40919e:	d9f3      	bls.n	409188 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4091a0:	69bb      	ldr	r3, [r7, #24]
  4091a2:	b2da      	uxtb	r2, r3
  4091a4:	69bb      	ldr	r3, [r7, #24]
  4091a6:	021b      	lsls	r3, r3, #8
  4091a8:	b29b      	uxth	r3, r3
  4091aa:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  4091ac:	69fb      	ldr	r3, [r7, #28]
  4091ae:	041b      	lsls	r3, r3, #16
  4091b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  4091b4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4091b6:	68fb      	ldr	r3, [r7, #12]
  4091b8:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  4091ba:	2300      	movs	r3, #0
}
  4091bc:	4618      	mov	r0, r3
  4091be:	3724      	adds	r7, #36	; 0x24
  4091c0:	46bd      	mov	sp, r7
  4091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4091c6:	4770      	bx	lr
  4091c8:	00061a80 	.word	0x00061a80
  4091cc:	0005dc00 	.word	0x0005dc00
  4091d0:	057619f1 	.word	0x057619f1
  4091d4:	3ffd1200 	.word	0x3ffd1200

004091d8 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  4091d8:	b480      	push	{r7}
  4091da:	b085      	sub	sp, #20
  4091dc:	af00      	add	r7, sp, #0
  4091de:	6078      	str	r0, [r7, #4]
  4091e0:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  4091e2:	683b      	ldr	r3, [r7, #0]
  4091e4:	2b00      	cmp	r3, #0
  4091e6:	d101      	bne.n	4091ec <twi_mk_addr+0x14>
		return 0;
  4091e8:	2300      	movs	r3, #0
  4091ea:	e01d      	b.n	409228 <twi_mk_addr+0x50>

	val = addr[0];
  4091ec:	687b      	ldr	r3, [r7, #4]
  4091ee:	781b      	ldrb	r3, [r3, #0]
  4091f0:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4091f2:	683b      	ldr	r3, [r7, #0]
  4091f4:	2b01      	cmp	r3, #1
  4091f6:	dd09      	ble.n	40920c <twi_mk_addr+0x34>
		val <<= 8;
  4091f8:	68fb      	ldr	r3, [r7, #12]
  4091fa:	021b      	lsls	r3, r3, #8
  4091fc:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4091fe:	687b      	ldr	r3, [r7, #4]
  409200:	3301      	adds	r3, #1
  409202:	781b      	ldrb	r3, [r3, #0]
  409204:	461a      	mov	r2, r3
  409206:	68fb      	ldr	r3, [r7, #12]
  409208:	4313      	orrs	r3, r2
  40920a:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  40920c:	683b      	ldr	r3, [r7, #0]
  40920e:	2b02      	cmp	r3, #2
  409210:	dd09      	ble.n	409226 <twi_mk_addr+0x4e>
		val <<= 8;
  409212:	68fb      	ldr	r3, [r7, #12]
  409214:	021b      	lsls	r3, r3, #8
  409216:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  409218:	687b      	ldr	r3, [r7, #4]
  40921a:	3302      	adds	r3, #2
  40921c:	781b      	ldrb	r3, [r3, #0]
  40921e:	461a      	mov	r2, r3
  409220:	68fb      	ldr	r3, [r7, #12]
  409222:	4313      	orrs	r3, r2
  409224:	60fb      	str	r3, [r7, #12]
	}
	return val;
  409226:	68fb      	ldr	r3, [r7, #12]
}
  409228:	4618      	mov	r0, r3
  40922a:	3714      	adds	r7, #20
  40922c:	46bd      	mov	sp, r7
  40922e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409232:	4770      	bx	lr

00409234 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  409234:	b580      	push	{r7, lr}
  409236:	b088      	sub	sp, #32
  409238:	af00      	add	r7, sp, #0
  40923a:	6078      	str	r0, [r7, #4]
  40923c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40923e:	683b      	ldr	r3, [r7, #0]
  409240:	68db      	ldr	r3, [r3, #12]
  409242:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  409244:	683b      	ldr	r3, [r7, #0]
  409246:	689b      	ldr	r3, [r3, #8]
  409248:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  40924a:	2300      	movs	r3, #0
  40924c:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  40924e:	f247 5330 	movw	r3, #30000	; 0x7530
  409252:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  409254:	69fb      	ldr	r3, [r7, #28]
  409256:	2b00      	cmp	r3, #0
  409258:	d101      	bne.n	40925e <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  40925a:	2301      	movs	r3, #1
  40925c:	e069      	b.n	409332 <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  40925e:	687b      	ldr	r3, [r7, #4]
  409260:	2200      	movs	r2, #0
  409262:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  409264:	683b      	ldr	r3, [r7, #0]
  409266:	7c1b      	ldrb	r3, [r3, #16]
  409268:	041b      	lsls	r3, r3, #16
  40926a:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  40926e:	683b      	ldr	r3, [r7, #0]
  409270:	685b      	ldr	r3, [r3, #4]
  409272:	021b      	lsls	r3, r3, #8
  409274:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  409278:	4313      	orrs	r3, r2
  40927a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  40927e:	687b      	ldr	r3, [r7, #4]
  409280:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  409282:	687b      	ldr	r3, [r7, #4]
  409284:	2200      	movs	r2, #0
  409286:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  409288:	683a      	ldr	r2, [r7, #0]
  40928a:	683b      	ldr	r3, [r7, #0]
  40928c:	685b      	ldr	r3, [r3, #4]
  40928e:	4619      	mov	r1, r3
  409290:	4610      	mov	r0, r2
  409292:	4b2a      	ldr	r3, [pc, #168]	; (40933c <twi_master_read+0x108>)
  409294:	4798      	blx	r3
  409296:	4602      	mov	r2, r0
  409298:	687b      	ldr	r3, [r7, #4]
  40929a:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40929c:	69fb      	ldr	r3, [r7, #28]
  40929e:	2b01      	cmp	r3, #1
  4092a0:	d105      	bne.n	4092ae <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  4092a2:	687b      	ldr	r3, [r7, #4]
  4092a4:	2203      	movs	r2, #3
  4092a6:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  4092a8:	2301      	movs	r3, #1
  4092aa:	75fb      	strb	r3, [r7, #23]
  4092ac:	e034      	b.n	409318 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  4092ae:	687b      	ldr	r3, [r7, #4]
  4092b0:	2201      	movs	r2, #1
  4092b2:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  4092b4:	2300      	movs	r3, #0
  4092b6:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  4092b8:	e02e      	b.n	409318 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  4092ba:	687b      	ldr	r3, [r7, #4]
  4092bc:	6a1b      	ldr	r3, [r3, #32]
  4092be:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4092c0:	68fb      	ldr	r3, [r7, #12]
  4092c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4092c6:	2b00      	cmp	r3, #0
  4092c8:	d001      	beq.n	4092ce <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  4092ca:	2305      	movs	r3, #5
  4092cc:	e031      	b.n	409332 <twi_master_read+0xfe>
		}

		if (!timeout--) {
  4092ce:	693b      	ldr	r3, [r7, #16]
  4092d0:	1e5a      	subs	r2, r3, #1
  4092d2:	613a      	str	r2, [r7, #16]
  4092d4:	2b00      	cmp	r3, #0
  4092d6:	d101      	bne.n	4092dc <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  4092d8:	2309      	movs	r3, #9
  4092da:	e02a      	b.n	409332 <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4092dc:	69fb      	ldr	r3, [r7, #28]
  4092de:	2b01      	cmp	r3, #1
  4092e0:	d107      	bne.n	4092f2 <twi_master_read+0xbe>
  4092e2:	7dfb      	ldrb	r3, [r7, #23]
  4092e4:	2b00      	cmp	r3, #0
  4092e6:	d104      	bne.n	4092f2 <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  4092e8:	687b      	ldr	r3, [r7, #4]
  4092ea:	2202      	movs	r2, #2
  4092ec:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  4092ee:	2301      	movs	r3, #1
  4092f0:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  4092f2:	68fb      	ldr	r3, [r7, #12]
  4092f4:	f003 0302 	and.w	r3, r3, #2
  4092f8:	2b00      	cmp	r3, #0
  4092fa:	d100      	bne.n	4092fe <twi_master_read+0xca>
			continue;
  4092fc:	e00c      	b.n	409318 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  4092fe:	69bb      	ldr	r3, [r7, #24]
  409300:	1c5a      	adds	r2, r3, #1
  409302:	61ba      	str	r2, [r7, #24]
  409304:	687a      	ldr	r2, [r7, #4]
  409306:	6b12      	ldr	r2, [r2, #48]	; 0x30
  409308:	b2d2      	uxtb	r2, r2
  40930a:	701a      	strb	r2, [r3, #0]

		cnt--;
  40930c:	69fb      	ldr	r3, [r7, #28]
  40930e:	3b01      	subs	r3, #1
  409310:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  409312:	f247 5330 	movw	r3, #30000	; 0x7530
  409316:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  409318:	69fb      	ldr	r3, [r7, #28]
  40931a:	2b00      	cmp	r3, #0
  40931c:	d1cd      	bne.n	4092ba <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40931e:	bf00      	nop
  409320:	687b      	ldr	r3, [r7, #4]
  409322:	6a1b      	ldr	r3, [r3, #32]
  409324:	f003 0301 	and.w	r3, r3, #1
  409328:	2b00      	cmp	r3, #0
  40932a:	d0f9      	beq.n	409320 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  40932c:	687b      	ldr	r3, [r7, #4]
  40932e:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  409330:	2300      	movs	r3, #0
}
  409332:	4618      	mov	r0, r3
  409334:	3720      	adds	r7, #32
  409336:	46bd      	mov	sp, r7
  409338:	bd80      	pop	{r7, pc}
  40933a:	bf00      	nop
  40933c:	004091d9 	.word	0x004091d9

00409340 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  409340:	b580      	push	{r7, lr}
  409342:	b086      	sub	sp, #24
  409344:	af00      	add	r7, sp, #0
  409346:	6078      	str	r0, [r7, #4]
  409348:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40934a:	683b      	ldr	r3, [r7, #0]
  40934c:	68db      	ldr	r3, [r3, #12]
  40934e:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  409350:	683b      	ldr	r3, [r7, #0]
  409352:	689b      	ldr	r3, [r3, #8]
  409354:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  409356:	697b      	ldr	r3, [r7, #20]
  409358:	2b00      	cmp	r3, #0
  40935a:	d101      	bne.n	409360 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  40935c:	2301      	movs	r3, #1
  40935e:	e056      	b.n	40940e <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  409360:	687b      	ldr	r3, [r7, #4]
  409362:	2200      	movs	r2, #0
  409364:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  409366:	683b      	ldr	r3, [r7, #0]
  409368:	7c1b      	ldrb	r3, [r3, #16]
  40936a:	041b      	lsls	r3, r3, #16
  40936c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  409370:	683b      	ldr	r3, [r7, #0]
  409372:	685b      	ldr	r3, [r3, #4]
  409374:	021b      	lsls	r3, r3, #8
  409376:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40937a:	431a      	orrs	r2, r3
  40937c:	687b      	ldr	r3, [r7, #4]
  40937e:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  409380:	687b      	ldr	r3, [r7, #4]
  409382:	2200      	movs	r2, #0
  409384:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  409386:	683a      	ldr	r2, [r7, #0]
  409388:	683b      	ldr	r3, [r7, #0]
  40938a:	685b      	ldr	r3, [r3, #4]
  40938c:	4619      	mov	r1, r3
  40938e:	4610      	mov	r0, r2
  409390:	4b21      	ldr	r3, [pc, #132]	; (409418 <twi_master_write+0xd8>)
  409392:	4798      	blx	r3
  409394:	4602      	mov	r2, r0
  409396:	687b      	ldr	r3, [r7, #4]
  409398:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  40939a:	e019      	b.n	4093d0 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  40939c:	687b      	ldr	r3, [r7, #4]
  40939e:	6a1b      	ldr	r3, [r3, #32]
  4093a0:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4093a2:	68fb      	ldr	r3, [r7, #12]
  4093a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4093a8:	2b00      	cmp	r3, #0
  4093aa:	d001      	beq.n	4093b0 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  4093ac:	2305      	movs	r3, #5
  4093ae:	e02e      	b.n	40940e <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  4093b0:	68fb      	ldr	r3, [r7, #12]
  4093b2:	f003 0304 	and.w	r3, r3, #4
  4093b6:	2b00      	cmp	r3, #0
  4093b8:	d100      	bne.n	4093bc <twi_master_write+0x7c>
			continue;
  4093ba:	e009      	b.n	4093d0 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  4093bc:	693b      	ldr	r3, [r7, #16]
  4093be:	1c5a      	adds	r2, r3, #1
  4093c0:	613a      	str	r2, [r7, #16]
  4093c2:	781b      	ldrb	r3, [r3, #0]
  4093c4:	461a      	mov	r2, r3
  4093c6:	687b      	ldr	r3, [r7, #4]
  4093c8:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  4093ca:	697b      	ldr	r3, [r7, #20]
  4093cc:	3b01      	subs	r3, #1
  4093ce:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  4093d0:	697b      	ldr	r3, [r7, #20]
  4093d2:	2b00      	cmp	r3, #0
  4093d4:	d1e2      	bne.n	40939c <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  4093d6:	687b      	ldr	r3, [r7, #4]
  4093d8:	6a1b      	ldr	r3, [r3, #32]
  4093da:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  4093dc:	68fb      	ldr	r3, [r7, #12]
  4093de:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4093e2:	2b00      	cmp	r3, #0
  4093e4:	d001      	beq.n	4093ea <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  4093e6:	2305      	movs	r3, #5
  4093e8:	e011      	b.n	40940e <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  4093ea:	68fb      	ldr	r3, [r7, #12]
  4093ec:	f003 0304 	and.w	r3, r3, #4
  4093f0:	2b00      	cmp	r3, #0
  4093f2:	d100      	bne.n	4093f6 <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  4093f4:	e7ef      	b.n	4093d6 <twi_master_write+0x96>
			break;
  4093f6:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4093f8:	687b      	ldr	r3, [r7, #4]
  4093fa:	2202      	movs	r2, #2
  4093fc:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4093fe:	bf00      	nop
  409400:	687b      	ldr	r3, [r7, #4]
  409402:	6a1b      	ldr	r3, [r3, #32]
  409404:	f003 0301 	and.w	r3, r3, #1
  409408:	2b00      	cmp	r3, #0
  40940a:	d0f9      	beq.n	409400 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  40940c:	2300      	movs	r3, #0
}
  40940e:	4618      	mov	r0, r3
  409410:	3718      	adds	r7, #24
  409412:	46bd      	mov	sp, r7
  409414:	bd80      	pop	{r7, pc}
  409416:	bf00      	nop
  409418:	004091d9 	.word	0x004091d9

0040941c <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  40941c:	b480      	push	{r7}
  40941e:	b083      	sub	sp, #12
  409420:	af00      	add	r7, sp, #0
  409422:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  409424:	687b      	ldr	r3, [r7, #4]
  409426:	2280      	movs	r2, #128	; 0x80
  409428:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  40942a:	687b      	ldr	r3, [r7, #4]
  40942c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  40942e:	bf00      	nop
  409430:	370c      	adds	r7, #12
  409432:	46bd      	mov	sp, r7
  409434:	f85d 7b04 	ldr.w	r7, [sp], #4
  409438:	4770      	bx	lr

0040943a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40943a:	b480      	push	{r7}
  40943c:	b089      	sub	sp, #36	; 0x24
  40943e:	af00      	add	r7, sp, #0
  409440:	60f8      	str	r0, [r7, #12]
  409442:	60b9      	str	r1, [r7, #8]
  409444:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  409446:	68bb      	ldr	r3, [r7, #8]
  409448:	011a      	lsls	r2, r3, #4
  40944a:	687b      	ldr	r3, [r7, #4]
  40944c:	429a      	cmp	r2, r3
  40944e:	d802      	bhi.n	409456 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  409450:	2310      	movs	r3, #16
  409452:	61fb      	str	r3, [r7, #28]
  409454:	e001      	b.n	40945a <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  409456:	2308      	movs	r3, #8
  409458:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40945a:	687b      	ldr	r3, [r7, #4]
  40945c:	00da      	lsls	r2, r3, #3
  40945e:	69fb      	ldr	r3, [r7, #28]
  409460:	68b9      	ldr	r1, [r7, #8]
  409462:	fb01 f303 	mul.w	r3, r1, r3
  409466:	085b      	lsrs	r3, r3, #1
  409468:	441a      	add	r2, r3
  40946a:	69fb      	ldr	r3, [r7, #28]
  40946c:	68b9      	ldr	r1, [r7, #8]
  40946e:	fb01 f303 	mul.w	r3, r1, r3
  409472:	fbb2 f3f3 	udiv	r3, r2, r3
  409476:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  409478:	69bb      	ldr	r3, [r7, #24]
  40947a:	08db      	lsrs	r3, r3, #3
  40947c:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40947e:	69bb      	ldr	r3, [r7, #24]
  409480:	f003 0307 	and.w	r3, r3, #7
  409484:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  409486:	697b      	ldr	r3, [r7, #20]
  409488:	2b00      	cmp	r3, #0
  40948a:	d003      	beq.n	409494 <usart_set_async_baudrate+0x5a>
  40948c:	697b      	ldr	r3, [r7, #20]
  40948e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  409492:	d301      	bcc.n	409498 <usart_set_async_baudrate+0x5e>
		return 1;
  409494:	2301      	movs	r3, #1
  409496:	e00f      	b.n	4094b8 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  409498:	69fb      	ldr	r3, [r7, #28]
  40949a:	2b08      	cmp	r3, #8
  40949c:	d105      	bne.n	4094aa <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40949e:	68fb      	ldr	r3, [r7, #12]
  4094a0:	685b      	ldr	r3, [r3, #4]
  4094a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4094a6:	68fb      	ldr	r3, [r7, #12]
  4094a8:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4094aa:	693b      	ldr	r3, [r7, #16]
  4094ac:	041a      	lsls	r2, r3, #16
  4094ae:	697b      	ldr	r3, [r7, #20]
  4094b0:	431a      	orrs	r2, r3
  4094b2:	68fb      	ldr	r3, [r7, #12]
  4094b4:	621a      	str	r2, [r3, #32]

	return 0;
  4094b6:	2300      	movs	r3, #0
}
  4094b8:	4618      	mov	r0, r3
  4094ba:	3724      	adds	r7, #36	; 0x24
  4094bc:	46bd      	mov	sp, r7
  4094be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4094c2:	4770      	bx	lr

004094c4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4094c4:	b580      	push	{r7, lr}
  4094c6:	b082      	sub	sp, #8
  4094c8:	af00      	add	r7, sp, #0
  4094ca:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  4094cc:	6878      	ldr	r0, [r7, #4]
  4094ce:	4b0d      	ldr	r3, [pc, #52]	; (409504 <usart_reset+0x40>)
  4094d0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  4094d2:	687b      	ldr	r3, [r7, #4]
  4094d4:	2200      	movs	r2, #0
  4094d6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4094d8:	687b      	ldr	r3, [r7, #4]
  4094da:	2200      	movs	r2, #0
  4094dc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4094de:	687b      	ldr	r3, [r7, #4]
  4094e0:	2200      	movs	r2, #0
  4094e2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4094e4:	6878      	ldr	r0, [r7, #4]
  4094e6:	4b08      	ldr	r3, [pc, #32]	; (409508 <usart_reset+0x44>)
  4094e8:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4094ea:	6878      	ldr	r0, [r7, #4]
  4094ec:	4b07      	ldr	r3, [pc, #28]	; (40950c <usart_reset+0x48>)
  4094ee:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4094f0:	6878      	ldr	r0, [r7, #4]
  4094f2:	4b07      	ldr	r3, [pc, #28]	; (409510 <usart_reset+0x4c>)
  4094f4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4094f6:	6878      	ldr	r0, [r7, #4]
  4094f8:	4b06      	ldr	r3, [pc, #24]	; (409514 <usart_reset+0x50>)
  4094fa:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4094fc:	bf00      	nop
  4094fe:	3708      	adds	r7, #8
  409500:	46bd      	mov	sp, r7
  409502:	bd80      	pop	{r7, pc}
  409504:	00409769 	.word	0x00409769
  409508:	004095b7 	.word	0x004095b7
  40950c:	004095eb 	.word	0x004095eb
  409510:	00409655 	.word	0x00409655
  409514:	00409671 	.word	0x00409671

00409518 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  409518:	b580      	push	{r7, lr}
  40951a:	b084      	sub	sp, #16
  40951c:	af00      	add	r7, sp, #0
  40951e:	60f8      	str	r0, [r7, #12]
  409520:	60b9      	str	r1, [r7, #8]
  409522:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  409524:	68f8      	ldr	r0, [r7, #12]
  409526:	4b1a      	ldr	r3, [pc, #104]	; (409590 <usart_init_rs232+0x78>)
  409528:	4798      	blx	r3

	ul_reg_val = 0;
  40952a:	4b1a      	ldr	r3, [pc, #104]	; (409594 <usart_init_rs232+0x7c>)
  40952c:	2200      	movs	r2, #0
  40952e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  409530:	68bb      	ldr	r3, [r7, #8]
  409532:	2b00      	cmp	r3, #0
  409534:	d009      	beq.n	40954a <usart_init_rs232+0x32>
  409536:	68bb      	ldr	r3, [r7, #8]
  409538:	681b      	ldr	r3, [r3, #0]
  40953a:	687a      	ldr	r2, [r7, #4]
  40953c:	4619      	mov	r1, r3
  40953e:	68f8      	ldr	r0, [r7, #12]
  409540:	4b15      	ldr	r3, [pc, #84]	; (409598 <usart_init_rs232+0x80>)
  409542:	4798      	blx	r3
  409544:	4603      	mov	r3, r0
  409546:	2b00      	cmp	r3, #0
  409548:	d001      	beq.n	40954e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40954a:	2301      	movs	r3, #1
  40954c:	e01b      	b.n	409586 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40954e:	68bb      	ldr	r3, [r7, #8]
  409550:	685a      	ldr	r2, [r3, #4]
  409552:	68bb      	ldr	r3, [r7, #8]
  409554:	689b      	ldr	r3, [r3, #8]
  409556:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  409558:	68bb      	ldr	r3, [r7, #8]
  40955a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40955c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40955e:	68bb      	ldr	r3, [r7, #8]
  409560:	68db      	ldr	r3, [r3, #12]
  409562:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  409564:	4b0b      	ldr	r3, [pc, #44]	; (409594 <usart_init_rs232+0x7c>)
  409566:	681b      	ldr	r3, [r3, #0]
  409568:	4313      	orrs	r3, r2
  40956a:	4a0a      	ldr	r2, [pc, #40]	; (409594 <usart_init_rs232+0x7c>)
  40956c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40956e:	4b09      	ldr	r3, [pc, #36]	; (409594 <usart_init_rs232+0x7c>)
  409570:	681b      	ldr	r3, [r3, #0]
  409572:	4a08      	ldr	r2, [pc, #32]	; (409594 <usart_init_rs232+0x7c>)
  409574:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  409576:	68fb      	ldr	r3, [r7, #12]
  409578:	685a      	ldr	r2, [r3, #4]
  40957a:	4b06      	ldr	r3, [pc, #24]	; (409594 <usart_init_rs232+0x7c>)
  40957c:	681b      	ldr	r3, [r3, #0]
  40957e:	431a      	orrs	r2, r3
  409580:	68fb      	ldr	r3, [r7, #12]
  409582:	605a      	str	r2, [r3, #4]

	return 0;
  409584:	2300      	movs	r3, #0
}
  409586:	4618      	mov	r0, r3
  409588:	3710      	adds	r7, #16
  40958a:	46bd      	mov	sp, r7
  40958c:	bd80      	pop	{r7, pc}
  40958e:	bf00      	nop
  409590:	004094c5 	.word	0x004094c5
  409594:	20004694 	.word	0x20004694
  409598:	0040943b 	.word	0x0040943b

0040959c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40959c:	b480      	push	{r7}
  40959e:	b083      	sub	sp, #12
  4095a0:	af00      	add	r7, sp, #0
  4095a2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4095a4:	687b      	ldr	r3, [r7, #4]
  4095a6:	2240      	movs	r2, #64	; 0x40
  4095a8:	601a      	str	r2, [r3, #0]
}
  4095aa:	bf00      	nop
  4095ac:	370c      	adds	r7, #12
  4095ae:	46bd      	mov	sp, r7
  4095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4095b4:	4770      	bx	lr

004095b6 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4095b6:	b480      	push	{r7}
  4095b8:	b083      	sub	sp, #12
  4095ba:	af00      	add	r7, sp, #0
  4095bc:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4095be:	687b      	ldr	r3, [r7, #4]
  4095c0:	2288      	movs	r2, #136	; 0x88
  4095c2:	601a      	str	r2, [r3, #0]
}
  4095c4:	bf00      	nop
  4095c6:	370c      	adds	r7, #12
  4095c8:	46bd      	mov	sp, r7
  4095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4095ce:	4770      	bx	lr

004095d0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  4095d0:	b480      	push	{r7}
  4095d2:	b083      	sub	sp, #12
  4095d4:	af00      	add	r7, sp, #0
  4095d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4095d8:	687b      	ldr	r3, [r7, #4]
  4095da:	2210      	movs	r2, #16
  4095dc:	601a      	str	r2, [r3, #0]
}
  4095de:	bf00      	nop
  4095e0:	370c      	adds	r7, #12
  4095e2:	46bd      	mov	sp, r7
  4095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4095e8:	4770      	bx	lr

004095ea <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4095ea:	b480      	push	{r7}
  4095ec:	b083      	sub	sp, #12
  4095ee:	af00      	add	r7, sp, #0
  4095f0:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4095f2:	687b      	ldr	r3, [r7, #4]
  4095f4:	2224      	movs	r2, #36	; 0x24
  4095f6:	601a      	str	r2, [r3, #0]
}
  4095f8:	bf00      	nop
  4095fa:	370c      	adds	r7, #12
  4095fc:	46bd      	mov	sp, r7
  4095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  409602:	4770      	bx	lr

00409604 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  409604:	b480      	push	{r7}
  409606:	b083      	sub	sp, #12
  409608:	af00      	add	r7, sp, #0
  40960a:	6078      	str	r0, [r7, #4]
  40960c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  40960e:	687b      	ldr	r3, [r7, #4]
  409610:	683a      	ldr	r2, [r7, #0]
  409612:	609a      	str	r2, [r3, #8]
}
  409614:	bf00      	nop
  409616:	370c      	adds	r7, #12
  409618:	46bd      	mov	sp, r7
  40961a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40961e:	4770      	bx	lr

00409620 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  409620:	b480      	push	{r7}
  409622:	b083      	sub	sp, #12
  409624:	af00      	add	r7, sp, #0
  409626:	6078      	str	r0, [r7, #4]
  409628:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40962a:	687b      	ldr	r3, [r7, #4]
  40962c:	683a      	ldr	r2, [r7, #0]
  40962e:	60da      	str	r2, [r3, #12]
}
  409630:	bf00      	nop
  409632:	370c      	adds	r7, #12
  409634:	46bd      	mov	sp, r7
  409636:	f85d 7b04 	ldr.w	r7, [sp], #4
  40963a:	4770      	bx	lr

0040963c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  40963c:	b480      	push	{r7}
  40963e:	b083      	sub	sp, #12
  409640:	af00      	add	r7, sp, #0
  409642:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  409644:	687b      	ldr	r3, [r7, #4]
  409646:	695b      	ldr	r3, [r3, #20]
}
  409648:	4618      	mov	r0, r3
  40964a:	370c      	adds	r7, #12
  40964c:	46bd      	mov	sp, r7
  40964e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409652:	4770      	bx	lr

00409654 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  409654:	b480      	push	{r7}
  409656:	b083      	sub	sp, #12
  409658:	af00      	add	r7, sp, #0
  40965a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40965c:	687b      	ldr	r3, [r7, #4]
  40965e:	f44f 7280 	mov.w	r2, #256	; 0x100
  409662:	601a      	str	r2, [r3, #0]
}
  409664:	bf00      	nop
  409666:	370c      	adds	r7, #12
  409668:	46bd      	mov	sp, r7
  40966a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40966e:	4770      	bx	lr

00409670 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  409670:	b480      	push	{r7}
  409672:	b083      	sub	sp, #12
  409674:	af00      	add	r7, sp, #0
  409676:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  409678:	687b      	ldr	r3, [r7, #4]
  40967a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40967e:	601a      	str	r2, [r3, #0]
}
  409680:	bf00      	nop
  409682:	370c      	adds	r7, #12
  409684:	46bd      	mov	sp, r7
  409686:	f85d 7b04 	ldr.w	r7, [sp], #4
  40968a:	4770      	bx	lr

0040968c <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  40968c:	b480      	push	{r7}
  40968e:	b085      	sub	sp, #20
  409690:	af00      	add	r7, sp, #0
  409692:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  409694:	2300      	movs	r3, #0
  409696:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  409698:	687b      	ldr	r3, [r7, #4]
  40969a:	4a23      	ldr	r2, [pc, #140]	; (409728 <usart_get_pdc_base+0x9c>)
  40969c:	4293      	cmp	r3, r2
  40969e:	d103      	bne.n	4096a8 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  4096a0:	4b22      	ldr	r3, [pc, #136]	; (40972c <usart_get_pdc_base+0xa0>)
  4096a2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096a4:	68fb      	ldr	r3, [r7, #12]
  4096a6:	e038      	b.n	40971a <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  4096a8:	687b      	ldr	r3, [r7, #4]
  4096aa:	4a21      	ldr	r2, [pc, #132]	; (409730 <usart_get_pdc_base+0xa4>)
  4096ac:	4293      	cmp	r3, r2
  4096ae:	d103      	bne.n	4096b8 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  4096b0:	4b20      	ldr	r3, [pc, #128]	; (409734 <usart_get_pdc_base+0xa8>)
  4096b2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096b4:	68fb      	ldr	r3, [r7, #12]
  4096b6:	e030      	b.n	40971a <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
  4096b8:	687b      	ldr	r3, [r7, #4]
  4096ba:	4a1f      	ldr	r2, [pc, #124]	; (409738 <usart_get_pdc_base+0xac>)
  4096bc:	4293      	cmp	r3, r2
  4096be:	d103      	bne.n	4096c8 <usart_get_pdc_base+0x3c>
		p_pdc_base = PDC_USART2;
  4096c0:	4b1e      	ldr	r3, [pc, #120]	; (40973c <usart_get_pdc_base+0xb0>)
  4096c2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096c4:	68fb      	ldr	r3, [r7, #12]
  4096c6:	e028      	b.n	40971a <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
  4096c8:	687b      	ldr	r3, [r7, #4]
  4096ca:	4a1d      	ldr	r2, [pc, #116]	; (409740 <usart_get_pdc_base+0xb4>)
  4096cc:	4293      	cmp	r3, r2
  4096ce:	d103      	bne.n	4096d8 <usart_get_pdc_base+0x4c>
		p_pdc_base = PDC_USART3;
  4096d0:	4b1c      	ldr	r3, [pc, #112]	; (409744 <usart_get_pdc_base+0xb8>)
  4096d2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096d4:	68fb      	ldr	r3, [r7, #12]
  4096d6:	e020      	b.n	40971a <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
  4096d8:	687b      	ldr	r3, [r7, #4]
  4096da:	4a1b      	ldr	r2, [pc, #108]	; (409748 <usart_get_pdc_base+0xbc>)
  4096dc:	4293      	cmp	r3, r2
  4096de:	d103      	bne.n	4096e8 <usart_get_pdc_base+0x5c>
		p_pdc_base = PDC_USART4;
  4096e0:	4b1a      	ldr	r3, [pc, #104]	; (40974c <usart_get_pdc_base+0xc0>)
  4096e2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096e4:	68fb      	ldr	r3, [r7, #12]
  4096e6:	e018      	b.n	40971a <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
  4096e8:	687b      	ldr	r3, [r7, #4]
  4096ea:	4a19      	ldr	r2, [pc, #100]	; (409750 <usart_get_pdc_base+0xc4>)
  4096ec:	4293      	cmp	r3, r2
  4096ee:	d103      	bne.n	4096f8 <usart_get_pdc_base+0x6c>
		p_pdc_base = PDC_USART5;
  4096f0:	4b18      	ldr	r3, [pc, #96]	; (409754 <usart_get_pdc_base+0xc8>)
  4096f2:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4096f4:	68fb      	ldr	r3, [r7, #12]
  4096f6:	e010      	b.n	40971a <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
  4096f8:	687b      	ldr	r3, [r7, #4]
  4096fa:	4a17      	ldr	r2, [pc, #92]	; (409758 <usart_get_pdc_base+0xcc>)
  4096fc:	4293      	cmp	r3, r2
  4096fe:	d103      	bne.n	409708 <usart_get_pdc_base+0x7c>
		p_pdc_base = PDC_USART6;
  409700:	4b16      	ldr	r3, [pc, #88]	; (40975c <usart_get_pdc_base+0xd0>)
  409702:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  409704:	68fb      	ldr	r3, [r7, #12]
  409706:	e008      	b.n	40971a <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART7
	else if (p_usart == USART7) {
  409708:	687b      	ldr	r3, [r7, #4]
  40970a:	4a15      	ldr	r2, [pc, #84]	; (409760 <usart_get_pdc_base+0xd4>)
  40970c:	4293      	cmp	r3, r2
  40970e:	d103      	bne.n	409718 <usart_get_pdc_base+0x8c>
		p_pdc_base = PDC_USART7;
  409710:	4b14      	ldr	r3, [pc, #80]	; (409764 <usart_get_pdc_base+0xd8>)
  409712:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  409714:	68fb      	ldr	r3, [r7, #12]
  409716:	e000      	b.n	40971a <usart_get_pdc_base+0x8e>
	}
#endif

	return p_pdc_base;
  409718:	68fb      	ldr	r3, [r7, #12]
}
  40971a:	4618      	mov	r0, r3
  40971c:	3714      	adds	r7, #20
  40971e:	46bd      	mov	sp, r7
  409720:	f85d 7b04 	ldr.w	r7, [sp], #4
  409724:	4770      	bx	lr
  409726:	bf00      	nop
  409728:	4000c200 	.word	0x4000c200
  40972c:	4000c300 	.word	0x4000c300
  409730:	40020200 	.word	0x40020200
  409734:	40020300 	.word	0x40020300
  409738:	40024200 	.word	0x40024200
  40973c:	40024300 	.word	0x40024300
  409740:	40018200 	.word	0x40018200
  409744:	40018300 	.word	0x40018300
  409748:	4001c200 	.word	0x4001c200
  40974c:	4001c300 	.word	0x4001c300
  409750:	40008200 	.word	0x40008200
  409754:	40008300 	.word	0x40008300
  409758:	40040200 	.word	0x40040200
  40975c:	40040300 	.word	0x40040300
  409760:	40034200 	.word	0x40034200
  409764:	40034300 	.word	0x40034300

00409768 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  409768:	b480      	push	{r7}
  40976a:	b083      	sub	sp, #12
  40976c:	af00      	add	r7, sp, #0
  40976e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  409770:	687b      	ldr	r3, [r7, #4]
  409772:	4a04      	ldr	r2, [pc, #16]	; (409784 <usart_disable_writeprotect+0x1c>)
  409774:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  409778:	bf00      	nop
  40977a:	370c      	adds	r7, #12
  40977c:	46bd      	mov	sp, r7
  40977e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409782:	4770      	bx	lr
  409784:	55534100 	.word	0x55534100

00409788 <cpu_irq_save>:
{
  409788:	b480      	push	{r7}
  40978a:	b083      	sub	sp, #12
  40978c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40978e:	f3ef 8310 	mrs	r3, PRIMASK
  409792:	607b      	str	r3, [r7, #4]
  return(result);
  409794:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  409796:	2b00      	cmp	r3, #0
  409798:	bf0c      	ite	eq
  40979a:	2301      	moveq	r3, #1
  40979c:	2300      	movne	r3, #0
  40979e:	b2db      	uxtb	r3, r3
  4097a0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4097a2:	b672      	cpsid	i
  4097a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4097a8:	4b04      	ldr	r3, [pc, #16]	; (4097bc <cpu_irq_save+0x34>)
  4097aa:	2200      	movs	r2, #0
  4097ac:	701a      	strb	r2, [r3, #0]
	return flags;
  4097ae:	683b      	ldr	r3, [r7, #0]
}
  4097b0:	4618      	mov	r0, r3
  4097b2:	370c      	adds	r7, #12
  4097b4:	46bd      	mov	sp, r7
  4097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4097ba:	4770      	bx	lr
  4097bc:	20002510 	.word	0x20002510

004097c0 <cpu_irq_is_enabled_flags>:
{
  4097c0:	b480      	push	{r7}
  4097c2:	b083      	sub	sp, #12
  4097c4:	af00      	add	r7, sp, #0
  4097c6:	6078      	str	r0, [r7, #4]
	return (flags);
  4097c8:	687b      	ldr	r3, [r7, #4]
  4097ca:	2b00      	cmp	r3, #0
  4097cc:	bf14      	ite	ne
  4097ce:	2301      	movne	r3, #1
  4097d0:	2300      	moveq	r3, #0
  4097d2:	b2db      	uxtb	r3, r3
}
  4097d4:	4618      	mov	r0, r3
  4097d6:	370c      	adds	r7, #12
  4097d8:	46bd      	mov	sp, r7
  4097da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4097de:	4770      	bx	lr

004097e0 <cpu_irq_restore>:
{
  4097e0:	b580      	push	{r7, lr}
  4097e2:	b082      	sub	sp, #8
  4097e4:	af00      	add	r7, sp, #0
  4097e6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4097e8:	6878      	ldr	r0, [r7, #4]
  4097ea:	4b07      	ldr	r3, [pc, #28]	; (409808 <cpu_irq_restore+0x28>)
  4097ec:	4798      	blx	r3
  4097ee:	4603      	mov	r3, r0
  4097f0:	2b00      	cmp	r3, #0
  4097f2:	d005      	beq.n	409800 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4097f4:	4b05      	ldr	r3, [pc, #20]	; (40980c <cpu_irq_restore+0x2c>)
  4097f6:	2201      	movs	r2, #1
  4097f8:	701a      	strb	r2, [r3, #0]
  4097fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4097fe:	b662      	cpsie	i
}
  409800:	bf00      	nop
  409802:	3708      	adds	r7, #8
  409804:	46bd      	mov	sp, r7
  409806:	bd80      	pop	{r7, pc}
  409808:	004097c1 	.word	0x004097c1
  40980c:	20002510 	.word	0x20002510

00409810 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  409810:	b580      	push	{r7, lr}
  409812:	b084      	sub	sp, #16
  409814:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  409816:	4b25      	ldr	r3, [pc, #148]	; (4098ac <Reset_Handler+0x9c>)
  409818:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40981a:	4b25      	ldr	r3, [pc, #148]	; (4098b0 <Reset_Handler+0xa0>)
  40981c:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  40981e:	68fa      	ldr	r2, [r7, #12]
  409820:	68bb      	ldr	r3, [r7, #8]
  409822:	429a      	cmp	r2, r3
  409824:	d00c      	beq.n	409840 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  409826:	e007      	b.n	409838 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  409828:	68bb      	ldr	r3, [r7, #8]
  40982a:	1d1a      	adds	r2, r3, #4
  40982c:	60ba      	str	r2, [r7, #8]
  40982e:	68fa      	ldr	r2, [r7, #12]
  409830:	1d11      	adds	r1, r2, #4
  409832:	60f9      	str	r1, [r7, #12]
  409834:	6812      	ldr	r2, [r2, #0]
  409836:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  409838:	68bb      	ldr	r3, [r7, #8]
  40983a:	4a1e      	ldr	r2, [pc, #120]	; (4098b4 <Reset_Handler+0xa4>)
  40983c:	4293      	cmp	r3, r2
  40983e:	d3f3      	bcc.n	409828 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  409840:	4b1d      	ldr	r3, [pc, #116]	; (4098b8 <Reset_Handler+0xa8>)
  409842:	60bb      	str	r3, [r7, #8]
  409844:	e004      	b.n	409850 <Reset_Handler+0x40>
                *pDest++ = 0;
  409846:	68bb      	ldr	r3, [r7, #8]
  409848:	1d1a      	adds	r2, r3, #4
  40984a:	60ba      	str	r2, [r7, #8]
  40984c:	2200      	movs	r2, #0
  40984e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  409850:	68bb      	ldr	r3, [r7, #8]
  409852:	4a1a      	ldr	r2, [pc, #104]	; (4098bc <Reset_Handler+0xac>)
  409854:	4293      	cmp	r3, r2
  409856:	d3f6      	bcc.n	409846 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  409858:	4b19      	ldr	r3, [pc, #100]	; (4098c0 <Reset_Handler+0xb0>)
  40985a:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40985c:	4a19      	ldr	r2, [pc, #100]	; (4098c4 <Reset_Handler+0xb4>)
  40985e:	68fb      	ldr	r3, [r7, #12]
  409860:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  409864:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  409866:	4b18      	ldr	r3, [pc, #96]	; (4098c8 <Reset_Handler+0xb8>)
  409868:	4798      	blx	r3
  40986a:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  40986c:	4a17      	ldr	r2, [pc, #92]	; (4098cc <Reset_Handler+0xbc>)
  40986e:	4b17      	ldr	r3, [pc, #92]	; (4098cc <Reset_Handler+0xbc>)
  409870:	681b      	ldr	r3, [r3, #0]
  409872:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  409876:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  409878:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40987c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  409880:	6878      	ldr	r0, [r7, #4]
  409882:	4b13      	ldr	r3, [pc, #76]	; (4098d0 <Reset_Handler+0xc0>)
  409884:	4798      	blx	r3

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  409886:	68fb      	ldr	r3, [r7, #12]
  409888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40988c:	d309      	bcc.n	4098a2 <Reset_Handler+0x92>
  40988e:	68fb      	ldr	r3, [r7, #12]
  409890:	4a10      	ldr	r2, [pc, #64]	; (4098d4 <Reset_Handler+0xc4>)
  409892:	4293      	cmp	r3, r2
  409894:	d805      	bhi.n	4098a2 <Reset_Handler+0x92>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  409896:	4a0b      	ldr	r2, [pc, #44]	; (4098c4 <Reset_Handler+0xb4>)
  409898:	4b0a      	ldr	r3, [pc, #40]	; (4098c4 <Reset_Handler+0xb4>)
  40989a:	689b      	ldr	r3, [r3, #8]
  40989c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4098a0:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  4098a2:	4b0d      	ldr	r3, [pc, #52]	; (4098d8 <Reset_Handler+0xc8>)
  4098a4:	4798      	blx	r3

        /* Branch to main function */
        main();
  4098a6:	4b0d      	ldr	r3, [pc, #52]	; (4098dc <Reset_Handler+0xcc>)
  4098a8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4098aa:	e7fe      	b.n	4098aa <Reset_Handler+0x9a>
  4098ac:	00413bec 	.word	0x00413bec
  4098b0:	20000000 	.word	0x20000000
  4098b4:	20002ec8 	.word	0x20002ec8
  4098b8:	20002ec8 	.word	0x20002ec8
  4098bc:	200052e8 	.word	0x200052e8
  4098c0:	00400000 	.word	0x00400000
  4098c4:	e000ed00 	.word	0xe000ed00
  4098c8:	00409789 	.word	0x00409789
  4098cc:	e000ed88 	.word	0xe000ed88
  4098d0:	004097e1 	.word	0x004097e1
  4098d4:	20027fff 	.word	0x20027fff
  4098d8:	0040f201 	.word	0x0040f201
  4098dc:	0040128d 	.word	0x0040128d

004098e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4098e0:	b480      	push	{r7}
  4098e2:	af00      	add	r7, sp, #0
        while (1) {
  4098e4:	e7fe      	b.n	4098e4 <Dummy_Handler+0x4>
	...

004098e8 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
  4098e8:	b480      	push	{r7}
  4098ea:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4098ec:	4b41      	ldr	r3, [pc, #260]	; (4099f4 <SystemCoreClockUpdate+0x10c>)
  4098ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4098f0:	f003 0303 	and.w	r3, r3, #3
  4098f4:	2b01      	cmp	r3, #1
  4098f6:	d014      	beq.n	409922 <SystemCoreClockUpdate+0x3a>
  4098f8:	2b01      	cmp	r3, #1
  4098fa:	d302      	bcc.n	409902 <SystemCoreClockUpdate+0x1a>
  4098fc:	2b02      	cmp	r3, #2
  4098fe:	d038      	beq.n	409972 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
					CKGR_PLLAR_MULA_Pos) + 1U);
		}
		break;
	default:
		break;
  409900:	e059      	b.n	4099b6 <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  409902:	4b3d      	ldr	r3, [pc, #244]	; (4099f8 <SystemCoreClockUpdate+0x110>)
  409904:	695b      	ldr	r3, [r3, #20]
  409906:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40990a:	2b00      	cmp	r3, #0
  40990c:	d004      	beq.n	409918 <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40990e:	4b3b      	ldr	r3, [pc, #236]	; (4099fc <SystemCoreClockUpdate+0x114>)
  409910:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  409914:	601a      	str	r2, [r3, #0]
		break;
  409916:	e04e      	b.n	4099b6 <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  409918:	4b38      	ldr	r3, [pc, #224]	; (4099fc <SystemCoreClockUpdate+0x114>)
  40991a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40991e:	601a      	str	r2, [r3, #0]
		break;
  409920:	e049      	b.n	4099b6 <SystemCoreClockUpdate+0xce>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  409922:	4b34      	ldr	r3, [pc, #208]	; (4099f4 <SystemCoreClockUpdate+0x10c>)
  409924:	6a1b      	ldr	r3, [r3, #32]
  409926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40992a:	2b00      	cmp	r3, #0
  40992c:	d003      	beq.n	409936 <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40992e:	4b33      	ldr	r3, [pc, #204]	; (4099fc <SystemCoreClockUpdate+0x114>)
  409930:	4a33      	ldr	r2, [pc, #204]	; (409a00 <SystemCoreClockUpdate+0x118>)
  409932:	601a      	str	r2, [r3, #0]
		break;
  409934:	e03f      	b.n	4099b6 <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  409936:	4b31      	ldr	r3, [pc, #196]	; (4099fc <SystemCoreClockUpdate+0x114>)
  409938:	4a32      	ldr	r2, [pc, #200]	; (409a04 <SystemCoreClockUpdate+0x11c>)
  40993a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40993c:	4b2d      	ldr	r3, [pc, #180]	; (4099f4 <SystemCoreClockUpdate+0x10c>)
  40993e:	6a1b      	ldr	r3, [r3, #32]
  409940:	f003 0370 	and.w	r3, r3, #112	; 0x70
  409944:	2b10      	cmp	r3, #16
  409946:	d004      	beq.n	409952 <SystemCoreClockUpdate+0x6a>
  409948:	2b20      	cmp	r3, #32
  40994a:	d008      	beq.n	40995e <SystemCoreClockUpdate+0x76>
  40994c:	2b00      	cmp	r3, #0
  40994e:	d00e      	beq.n	40996e <SystemCoreClockUpdate+0x86>
				break;
  409950:	e00e      	b.n	409970 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 2U;
  409952:	4b2a      	ldr	r3, [pc, #168]	; (4099fc <SystemCoreClockUpdate+0x114>)
  409954:	681b      	ldr	r3, [r3, #0]
  409956:	005b      	lsls	r3, r3, #1
  409958:	4a28      	ldr	r2, [pc, #160]	; (4099fc <SystemCoreClockUpdate+0x114>)
  40995a:	6013      	str	r3, [r2, #0]
				break;
  40995c:	e008      	b.n	409970 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 3U;
  40995e:	4b27      	ldr	r3, [pc, #156]	; (4099fc <SystemCoreClockUpdate+0x114>)
  409960:	681a      	ldr	r2, [r3, #0]
  409962:	4613      	mov	r3, r2
  409964:	005b      	lsls	r3, r3, #1
  409966:	4413      	add	r3, r2
  409968:	4a24      	ldr	r2, [pc, #144]	; (4099fc <SystemCoreClockUpdate+0x114>)
  40996a:	6013      	str	r3, [r2, #0]
				break;
  40996c:	e000      	b.n	409970 <SystemCoreClockUpdate+0x88>
				break;
  40996e:	bf00      	nop
		break;
  409970:	e021      	b.n	4099b6 <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  409972:	4b21      	ldr	r3, [pc, #132]	; (4099f8 <SystemCoreClockUpdate+0x110>)
  409974:	695b      	ldr	r3, [r3, #20]
  409976:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40997a:	2b00      	cmp	r3, #0
  40997c:	d004      	beq.n	409988 <SystemCoreClockUpdate+0xa0>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40997e:	4b1f      	ldr	r3, [pc, #124]	; (4099fc <SystemCoreClockUpdate+0x114>)
  409980:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  409984:	601a      	str	r2, [r3, #0]
  409986:	e003      	b.n	409990 <SystemCoreClockUpdate+0xa8>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  409988:	4b1c      	ldr	r3, [pc, #112]	; (4099fc <SystemCoreClockUpdate+0x114>)
  40998a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40998e:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  409990:	4b18      	ldr	r3, [pc, #96]	; (4099f4 <SystemCoreClockUpdate+0x10c>)
  409992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  409994:	f003 0303 	and.w	r3, r3, #3
  409998:	2b02      	cmp	r3, #2
  40999a:	d10b      	bne.n	4099b4 <SystemCoreClockUpdate+0xcc>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  40999c:	4b15      	ldr	r3, [pc, #84]	; (4099f4 <SystemCoreClockUpdate+0x10c>)
  40999e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4099a0:	0c1b      	lsrs	r3, r3, #16
  4099a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
					CKGR_PLLAR_MULA_Pos) + 1U);
  4099a6:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  4099a8:	4a14      	ldr	r2, [pc, #80]	; (4099fc <SystemCoreClockUpdate+0x114>)
  4099aa:	6812      	ldr	r2, [r2, #0]
  4099ac:	fb02 f303 	mul.w	r3, r2, r3
  4099b0:	4a12      	ldr	r2, [pc, #72]	; (4099fc <SystemCoreClockUpdate+0x114>)
  4099b2:	6013      	str	r3, [r2, #0]
		break;
  4099b4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4099b6:	4b0f      	ldr	r3, [pc, #60]	; (4099f4 <SystemCoreClockUpdate+0x10c>)
  4099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4099ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4099be:	2b70      	cmp	r3, #112	; 0x70
  4099c0:	d108      	bne.n	4099d4 <SystemCoreClockUpdate+0xec>
		SystemCoreClock /= 3U;
  4099c2:	4b0e      	ldr	r3, [pc, #56]	; (4099fc <SystemCoreClockUpdate+0x114>)
  4099c4:	681b      	ldr	r3, [r3, #0]
  4099c6:	4a10      	ldr	r2, [pc, #64]	; (409a08 <SystemCoreClockUpdate+0x120>)
  4099c8:	fba2 2303 	umull	r2, r3, r2, r3
  4099cc:	085b      	lsrs	r3, r3, #1
  4099ce:	4a0b      	ldr	r2, [pc, #44]	; (4099fc <SystemCoreClockUpdate+0x114>)
  4099d0:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4099d2:	e00a      	b.n	4099ea <SystemCoreClockUpdate+0x102>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4099d4:	4b07      	ldr	r3, [pc, #28]	; (4099f4 <SystemCoreClockUpdate+0x10c>)
  4099d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4099d8:	091b      	lsrs	r3, r3, #4
  4099da:	f003 0307 	and.w	r3, r3, #7
  4099de:	4a07      	ldr	r2, [pc, #28]	; (4099fc <SystemCoreClockUpdate+0x114>)
  4099e0:	6812      	ldr	r2, [r2, #0]
  4099e2:	fa22 f303 	lsr.w	r3, r2, r3
  4099e6:	4a05      	ldr	r2, [pc, #20]	; (4099fc <SystemCoreClockUpdate+0x114>)
  4099e8:	6013      	str	r3, [r2, #0]
}
  4099ea:	bf00      	nop
  4099ec:	46bd      	mov	sp, r7
  4099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4099f2:	4770      	bx	lr
  4099f4:	400e0400 	.word	0x400e0400
  4099f8:	400e1410 	.word	0x400e1410
  4099fc:	20002514 	.word	0x20002514
  409a00:	00b71b00 	.word	0x00b71b00
  409a04:	007a1200 	.word	0x007a1200
  409a08:	aaaaaaab 	.word	0xaaaaaaab

00409a0c <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
  409a0c:	b480      	push	{r7}
  409a0e:	b083      	sub	sp, #12
  409a10:	af00      	add	r7, sp, #0
  409a12:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  409a14:	687b      	ldr	r3, [r7, #4]
  409a16:	4a19      	ldr	r2, [pc, #100]	; (409a7c <system_init_flash+0x70>)
  409a18:	4293      	cmp	r3, r2
  409a1a:	d804      	bhi.n	409a26 <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  409a1c:	4b18      	ldr	r3, [pc, #96]	; (409a80 <system_init_flash+0x74>)
  409a1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  409a22:	601a      	str	r2, [r3, #0]
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
	}
}
  409a24:	e023      	b.n	409a6e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  409a26:	687b      	ldr	r3, [r7, #4]
  409a28:	4a16      	ldr	r2, [pc, #88]	; (409a84 <system_init_flash+0x78>)
  409a2a:	4293      	cmp	r3, r2
  409a2c:	d803      	bhi.n	409a36 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  409a2e:	4b14      	ldr	r3, [pc, #80]	; (409a80 <system_init_flash+0x74>)
  409a30:	4a15      	ldr	r2, [pc, #84]	; (409a88 <system_init_flash+0x7c>)
  409a32:	601a      	str	r2, [r3, #0]
}
  409a34:	e01b      	b.n	409a6e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  409a36:	687b      	ldr	r3, [r7, #4]
  409a38:	4a14      	ldr	r2, [pc, #80]	; (409a8c <system_init_flash+0x80>)
  409a3a:	4293      	cmp	r3, r2
  409a3c:	d803      	bhi.n	409a46 <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  409a3e:	4b10      	ldr	r3, [pc, #64]	; (409a80 <system_init_flash+0x74>)
  409a40:	4a13      	ldr	r2, [pc, #76]	; (409a90 <system_init_flash+0x84>)
  409a42:	601a      	str	r2, [r3, #0]
}
  409a44:	e013      	b.n	409a6e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  409a46:	687b      	ldr	r3, [r7, #4]
  409a48:	4a12      	ldr	r2, [pc, #72]	; (409a94 <system_init_flash+0x88>)
  409a4a:	4293      	cmp	r3, r2
  409a4c:	d803      	bhi.n	409a56 <system_init_flash+0x4a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  409a4e:	4b0c      	ldr	r3, [pc, #48]	; (409a80 <system_init_flash+0x74>)
  409a50:	4a11      	ldr	r2, [pc, #68]	; (409a98 <system_init_flash+0x8c>)
  409a52:	601a      	str	r2, [r3, #0]
}
  409a54:	e00b      	b.n	409a6e <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  409a56:	687b      	ldr	r3, [r7, #4]
  409a58:	4a10      	ldr	r2, [pc, #64]	; (409a9c <system_init_flash+0x90>)
  409a5a:	4293      	cmp	r3, r2
  409a5c:	d804      	bhi.n	409a68 <system_init_flash+0x5c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  409a5e:	4b08      	ldr	r3, [pc, #32]	; (409a80 <system_init_flash+0x74>)
  409a60:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  409a64:	601a      	str	r2, [r3, #0]
}
  409a66:	e002      	b.n	409a6e <system_init_flash+0x62>
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  409a68:	4b05      	ldr	r3, [pc, #20]	; (409a80 <system_init_flash+0x74>)
  409a6a:	4a0d      	ldr	r2, [pc, #52]	; (409aa0 <system_init_flash+0x94>)
  409a6c:	601a      	str	r2, [r3, #0]
}
  409a6e:	bf00      	nop
  409a70:	370c      	adds	r7, #12
  409a72:	46bd      	mov	sp, r7
  409a74:	f85d 7b04 	ldr.w	r7, [sp], #4
  409a78:	4770      	bx	lr
  409a7a:	bf00      	nop
  409a7c:	01312cff 	.word	0x01312cff
  409a80:	400e0a00 	.word	0x400e0a00
  409a84:	026259ff 	.word	0x026259ff
  409a88:	04000100 	.word	0x04000100
  409a8c:	039386ff 	.word	0x039386ff
  409a90:	04000200 	.word	0x04000200
  409a94:	04c4b3ff 	.word	0x04c4b3ff
  409a98:	04000300 	.word	0x04000300
  409a9c:	05f5e0ff 	.word	0x05f5e0ff
  409aa0:	04000500 	.word	0x04000500

00409aa4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  409aa4:	b480      	push	{r7}
  409aa6:	b085      	sub	sp, #20
  409aa8:	af00      	add	r7, sp, #0
  409aaa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  409aac:	4b10      	ldr	r3, [pc, #64]	; (409af0 <_sbrk+0x4c>)
  409aae:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  409ab0:	4b10      	ldr	r3, [pc, #64]	; (409af4 <_sbrk+0x50>)
  409ab2:	681b      	ldr	r3, [r3, #0]
  409ab4:	2b00      	cmp	r3, #0
  409ab6:	d102      	bne.n	409abe <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  409ab8:	4b0e      	ldr	r3, [pc, #56]	; (409af4 <_sbrk+0x50>)
  409aba:	4a0f      	ldr	r2, [pc, #60]	; (409af8 <_sbrk+0x54>)
  409abc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  409abe:	4b0d      	ldr	r3, [pc, #52]	; (409af4 <_sbrk+0x50>)
  409ac0:	681b      	ldr	r3, [r3, #0]
  409ac2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  409ac4:	68ba      	ldr	r2, [r7, #8]
  409ac6:	687b      	ldr	r3, [r7, #4]
  409ac8:	441a      	add	r2, r3
  409aca:	68fb      	ldr	r3, [r7, #12]
  409acc:	429a      	cmp	r2, r3
  409ace:	dd02      	ble.n	409ad6 <_sbrk+0x32>
		return (caddr_t) -1;	
  409ad0:	f04f 33ff 	mov.w	r3, #4294967295
  409ad4:	e006      	b.n	409ae4 <_sbrk+0x40>
	}

	heap += incr;
  409ad6:	4b07      	ldr	r3, [pc, #28]	; (409af4 <_sbrk+0x50>)
  409ad8:	681a      	ldr	r2, [r3, #0]
  409ada:	687b      	ldr	r3, [r7, #4]
  409adc:	4413      	add	r3, r2
  409ade:	4a05      	ldr	r2, [pc, #20]	; (409af4 <_sbrk+0x50>)
  409ae0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  409ae2:	68bb      	ldr	r3, [r7, #8]
}
  409ae4:	4618      	mov	r0, r3
  409ae6:	3714      	adds	r7, #20
  409ae8:	46bd      	mov	sp, r7
  409aea:	f85d 7b04 	ldr.w	r7, [sp], #4
  409aee:	4770      	bx	lr
  409af0:	20027ffc 	.word	0x20027ffc
  409af4:	20004698 	.word	0x20004698
  409af8:	200082e8 	.word	0x200082e8

00409afc <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
  409afc:	b480      	push	{r7}
  409afe:	b087      	sub	sp, #28
  409b00:	af00      	add	r7, sp, #0
  409b02:	60f8      	str	r0, [r7, #12]
  409b04:	60b9      	str	r1, [r7, #8]
  409b06:	607a      	str	r2, [r7, #4]
  409b08:	603b      	str	r3, [r7, #0]
	us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
  409b0a:	4b12      	ldr	r3, [pc, #72]	; (409b54 <translate_address+0x58>)
  409b0c:	617b      	str	r3, [r7, #20]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  409b0e:	68bb      	ldr	r3, [r7, #8]
  409b10:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
  409b14:	0a5b      	lsrs	r3, r3, #9
  409b16:	827b      	strh	r3, [r7, #18]
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  409b18:	68bb      	ldr	r3, [r7, #8]
  409b1a:	b29b      	uxth	r3, r3
  409b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  409b20:	823b      	strh	r3, [r7, #16]
#endif

	/* Store values */
	if (pp_efc) {
  409b22:	68fb      	ldr	r3, [r7, #12]
  409b24:	2b00      	cmp	r3, #0
  409b26:	d002      	beq.n	409b2e <translate_address+0x32>
		*pp_efc = p_efc;
  409b28:	68fb      	ldr	r3, [r7, #12]
  409b2a:	697a      	ldr	r2, [r7, #20]
  409b2c:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
  409b2e:	687b      	ldr	r3, [r7, #4]
  409b30:	2b00      	cmp	r3, #0
  409b32:	d002      	beq.n	409b3a <translate_address+0x3e>
		*pus_page = us_page;
  409b34:	687b      	ldr	r3, [r7, #4]
  409b36:	8a7a      	ldrh	r2, [r7, #18]
  409b38:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
  409b3a:	683b      	ldr	r3, [r7, #0]
  409b3c:	2b00      	cmp	r3, #0
  409b3e:	d002      	beq.n	409b46 <translate_address+0x4a>
		*pus_offset = us_offset;
  409b40:	683b      	ldr	r3, [r7, #0]
  409b42:	8a3a      	ldrh	r2, [r7, #16]
  409b44:	801a      	strh	r2, [r3, #0]
	}
}
  409b46:	bf00      	nop
  409b48:	371c      	adds	r7, #28
  409b4a:	46bd      	mov	sp, r7
  409b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409b50:	4770      	bx	lr
  409b52:	bf00      	nop
  409b54:	400e0a00 	.word	0x400e0a00

00409b58 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
  409b58:	b480      	push	{r7}
  409b5a:	b087      	sub	sp, #28
  409b5c:	af00      	add	r7, sp, #0
  409b5e:	60f8      	str	r0, [r7, #12]
  409b60:	607b      	str	r3, [r7, #4]
  409b62:	460b      	mov	r3, r1
  409b64:	817b      	strh	r3, [r7, #10]
  409b66:	4613      	mov	r3, r2
  409b68:	813b      	strh	r3, [r7, #8]
/* One bank flash */
#else
	/* avoid Cppcheck Warning */
	UNUSED(p_efc);
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  409b6a:	897b      	ldrh	r3, [r7, #10]
  409b6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
  409b70:	025a      	lsls	r2, r3, #9
  409b72:	893b      	ldrh	r3, [r7, #8]
  409b74:	4413      	add	r3, r2
  409b76:	617b      	str	r3, [r7, #20]
#endif

	/* Store result */
	if (pul_addr != NULL) {
  409b78:	687b      	ldr	r3, [r7, #4]
  409b7a:	2b00      	cmp	r3, #0
  409b7c:	d002      	beq.n	409b84 <compute_address+0x2c>
		*pul_addr = ul_addr;
  409b7e:	687b      	ldr	r3, [r7, #4]
  409b80:	697a      	ldr	r2, [r7, #20]
  409b82:	601a      	str	r2, [r3, #0]
	}
}
  409b84:	bf00      	nop
  409b86:	371c      	adds	r7, #28
  409b88:	46bd      	mov	sp, r7
  409b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  409b8e:	4770      	bx	lr

00409b90 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  409b90:	b480      	push	{r7}
  409b92:	b087      	sub	sp, #28
  409b94:	af00      	add	r7, sp, #0
  409b96:	60f8      	str	r0, [r7, #12]
  409b98:	60b9      	str	r1, [r7, #8]
  409b9a:	607a      	str	r2, [r7, #4]
  409b9c:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  409b9e:	68fb      	ldr	r3, [r7, #12]
  409ba0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
  409ba4:	f023 031f 	bic.w	r3, r3, #31
  409ba8:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  409baa:	68bb      	ldr	r3, [r7, #8]
  409bac:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
  409bb0:	f023 031f 	bic.w	r3, r3, #31
  409bb4:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
  409bb8:	331f      	adds	r3, #31
  409bba:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
  409bbc:	687b      	ldr	r3, [r7, #4]
  409bbe:	2b00      	cmp	r3, #0
  409bc0:	d002      	beq.n	409bc8 <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
  409bc2:	687b      	ldr	r3, [r7, #4]
  409bc4:	697a      	ldr	r2, [r7, #20]
  409bc6:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
  409bc8:	683b      	ldr	r3, [r7, #0]
  409bca:	2b00      	cmp	r3, #0
  409bcc:	d002      	beq.n	409bd4 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
  409bce:	683b      	ldr	r3, [r7, #0]
  409bd0:	693a      	ldr	r2, [r7, #16]
  409bd2:	601a      	str	r2, [r3, #0]
	}
}
  409bd4:	bf00      	nop
  409bd6:	371c      	adds	r7, #28
  409bd8:	46bd      	mov	sp, r7
  409bda:	f85d 7b04 	ldr.w	r7, [sp], #4
  409bde:	4770      	bx	lr

00409be0 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
  409be0:	b580      	push	{r7, lr}
  409be2:	b082      	sub	sp, #8
  409be4:	af00      	add	r7, sp, #0
  409be6:	6078      	str	r0, [r7, #4]
  409be8:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
  409bea:	683a      	ldr	r2, [r7, #0]
  409bec:	6879      	ldr	r1, [r7, #4]
  409bee:	4804      	ldr	r0, [pc, #16]	; (409c00 <flash_init+0x20>)
  409bf0:	4b04      	ldr	r3, [pc, #16]	; (409c04 <flash_init+0x24>)
  409bf2:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
  409bf4:	2300      	movs	r3, #0
}
  409bf6:	4618      	mov	r0, r3
  409bf8:	3708      	adds	r7, #8
  409bfa:	46bd      	mov	sp, r7
  409bfc:	bd80      	pop	{r7, pc}
  409bfe:	bf00      	nop
  409c00:	400e0a00 	.word	0x400e0a00
  409c04:	00407dd5 	.word	0x00407dd5

00409c08 <flash_erase_sector>:
 * \param ul_address Flash sector start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_sector(uint32_t ul_address)
{
  409c08:	b590      	push	{r4, r7, lr}
  409c0a:	b085      	sub	sp, #20
  409c0c:	af00      	add	r7, sp, #0
  409c0e:	6078      	str	r0, [r7, #4]
	Efc *p_efc;
	uint16_t us_page;

	translate_address(&p_efc, ul_address, &us_page, NULL);
  409c10:	f107 020a 	add.w	r2, r7, #10
  409c14:	f107 000c 	add.w	r0, r7, #12
  409c18:	2300      	movs	r3, #0
  409c1a:	6879      	ldr	r1, [r7, #4]
  409c1c:	4c08      	ldr	r4, [pc, #32]	; (409c40 <flash_erase_sector+0x38>)
  409c1e:	47a0      	blx	r4

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
  409c20:	68fb      	ldr	r3, [r7, #12]
  409c22:	897a      	ldrh	r2, [r7, #10]
  409c24:	2111      	movs	r1, #17
  409c26:	4618      	mov	r0, r3
  409c28:	4b06      	ldr	r3, [pc, #24]	; (409c44 <flash_erase_sector+0x3c>)
  409c2a:	4798      	blx	r3
  409c2c:	4603      	mov	r3, r0
  409c2e:	2b00      	cmp	r3, #0
  409c30:	d001      	beq.n	409c36 <flash_erase_sector+0x2e>
		return FLASH_RC_ERROR;
  409c32:	2310      	movs	r3, #16
  409c34:	e000      	b.n	409c38 <flash_erase_sector+0x30>
	}

	return FLASH_RC_OK;
  409c36:	2300      	movs	r3, #0
}
  409c38:	4618      	mov	r0, r3
  409c3a:	3714      	adds	r7, #20
  409c3c:	46bd      	mov	sp, r7
  409c3e:	bd90      	pop	{r4, r7, pc}
  409c40:	00409afd 	.word	0x00409afd
  409c44:	00407e09 	.word	0x00407e09

00409c48 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  409c48:	b590      	push	{r4, r7, lr}
  409c4a:	b08f      	sub	sp, #60	; 0x3c
  409c4c:	af00      	add	r7, sp, #0
  409c4e:	60f8      	str	r0, [r7, #12]
  409c50:	60b9      	str	r1, [r7, #8]
  409c52:	607a      	str	r2, [r7, #4]
  409c54:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_fws_temp = 0;
  409c56:	2300      	movs	r3, #0
  409c58:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
  409c5a:	4b43      	ldr	r3, [pc, #268]	; (409d68 <flash_write+0x120>)
  409c5c:	627b      	str	r3, [r7, #36]	; 0x24

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
  409c5e:	f107 0314 	add.w	r3, r7, #20
  409c62:	f107 0216 	add.w	r2, r7, #22
  409c66:	f107 0018 	add.w	r0, r7, #24
  409c6a:	68f9      	ldr	r1, [r7, #12]
  409c6c:	4c3f      	ldr	r4, [pc, #252]	; (409d6c <flash_write+0x124>)
  409c6e:	47a0      	blx	r4
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  409c70:	e071      	b.n	409d56 <flash_write+0x10e>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  409c72:	8abb      	ldrh	r3, [r7, #20]
  409c74:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
  409c78:	687b      	ldr	r3, [r7, #4]
  409c7a:	4293      	cmp	r3, r2
  409c7c:	bf28      	it	cs
  409c7e:	4613      	movcs	r3, r2
  409c80:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
  409c82:	69b8      	ldr	r0, [r7, #24]
  409c84:	8af9      	ldrh	r1, [r7, #22]
  409c86:	f107 0310 	add.w	r3, r7, #16
  409c8a:	2200      	movs	r2, #0
  409c8c:	4c38      	ldr	r4, [pc, #224]	; (409d70 <flash_write+0x128>)
  409c8e:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  409c90:	6a3b      	ldr	r3, [r7, #32]
  409c92:	b29b      	uxth	r3, r3
  409c94:	425b      	negs	r3, r3
  409c96:	b29a      	uxth	r2, r3
  409c98:	8abb      	ldrh	r3, [r7, #20]
  409c9a:	1ad3      	subs	r3, r2, r3
  409c9c:	b29b      	uxth	r3, r3
  409c9e:	f503 7300 	add.w	r3, r3, #512	; 0x200
  409ca2:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  409ca4:	693b      	ldr	r3, [r7, #16]
  409ca6:	4619      	mov	r1, r3
  409ca8:	8abb      	ldrh	r3, [r7, #20]
  409caa:	461a      	mov	r2, r3
  409cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
  409cae:	4b31      	ldr	r3, [pc, #196]	; (409d74 <flash_write+0x12c>)
  409cb0:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  409cb2:	8abb      	ldrh	r3, [r7, #20]
  409cb4:	461a      	mov	r2, r3
  409cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409cb8:	4413      	add	r3, r2
  409cba:	6a3a      	ldr	r2, [r7, #32]
  409cbc:	68b9      	ldr	r1, [r7, #8]
  409cbe:	4618      	mov	r0, r3
  409cc0:	4b2c      	ldr	r3, [pc, #176]	; (409d74 <flash_write+0x12c>)
  409cc2:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
  409cc4:	8abb      	ldrh	r3, [r7, #20]
  409cc6:	461a      	mov	r2, r3
  409cc8:	6a3b      	ldr	r3, [r7, #32]
  409cca:	4413      	add	r3, r2
  409ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  409cce:	18d0      	adds	r0, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
  409cd0:	8abb      	ldrh	r3, [r7, #20]
  409cd2:	461a      	mov	r2, r3
  409cd4:	693b      	ldr	r3, [r7, #16]
  409cd6:	441a      	add	r2, r3
  409cd8:	6a3b      	ldr	r3, [r7, #32]
  409cda:	4413      	add	r3, r2
		memcpy(puc_page_buffer + us_offset + writeSize,
  409cdc:	4619      	mov	r1, r3
  409cde:	8bfb      	ldrh	r3, [r7, #30]
  409ce0:	461a      	mov	r2, r3
  409ce2:	4b24      	ldr	r3, [pc, #144]	; (409d74 <flash_write+0x12c>)
  409ce4:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
  409ce6:	693b      	ldr	r3, [r7, #16]
  409ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  409cea:	2300      	movs	r3, #0
  409cec:	633b      	str	r3, [r7, #48]	; 0x30
  409cee:	e00a      	b.n	409d06 <flash_write+0xbe>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  409cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409cf2:	1d1a      	adds	r2, r3, #4
  409cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
  409cf6:	491c      	ldr	r1, [pc, #112]	; (409d68 <flash_write+0x120>)
  409cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  409cfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  409cfe:	601a      	str	r2, [r3, #0]
				++ul_idx) {
  409d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409d02:	3301      	adds	r3, #1
  409d04:	633b      	str	r3, [r7, #48]	; 0x30
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  409d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409d08:	2b7f      	cmp	r3, #127	; 0x7f
  409d0a:	d9f1      	bls.n	409cf0 <flash_write+0xa8>
		}

		if (ul_erase_flag) {
  409d0c:	683b      	ldr	r3, [r7, #0]
  409d0e:	2b00      	cmp	r3, #0
  409d10:	d007      	beq.n	409d22 <flash_write+0xda>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  409d12:	69bb      	ldr	r3, [r7, #24]
  409d14:	8afa      	ldrh	r2, [r7, #22]
  409d16:	2103      	movs	r1, #3
  409d18:	4618      	mov	r0, r3
  409d1a:	4b17      	ldr	r3, [pc, #92]	; (409d78 <flash_write+0x130>)
  409d1c:	4798      	blx	r3
  409d1e:	6378      	str	r0, [r7, #52]	; 0x34
  409d20:	e006      	b.n	409d30 <flash_write+0xe8>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  409d22:	69bb      	ldr	r3, [r7, #24]
  409d24:	8afa      	ldrh	r2, [r7, #22]
  409d26:	2101      	movs	r1, #1
  409d28:	4618      	mov	r0, r3
  409d2a:	4b13      	ldr	r3, [pc, #76]	; (409d78 <flash_write+0x130>)
  409d2c:	4798      	blx	r3
  409d2e:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
  409d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  409d32:	2b00      	cmp	r3, #0
  409d34:	d001      	beq.n	409d3a <flash_write+0xf2>
			return ul_error;
  409d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  409d38:	e011      	b.n	409d5e <flash_write+0x116>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  409d3a:	68ba      	ldr	r2, [r7, #8]
  409d3c:	6a3b      	ldr	r3, [r7, #32]
  409d3e:	4413      	add	r3, r2
  409d40:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
  409d42:	687a      	ldr	r2, [r7, #4]
  409d44:	6a3b      	ldr	r3, [r7, #32]
  409d46:	1ad3      	subs	r3, r2, r3
  409d48:	607b      	str	r3, [r7, #4]
		us_page++;
  409d4a:	8afb      	ldrh	r3, [r7, #22]
  409d4c:	3301      	adds	r3, #1
  409d4e:	b29b      	uxth	r3, r3
  409d50:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
  409d52:	2300      	movs	r3, #0
  409d54:	82bb      	strh	r3, [r7, #20]
	while (ul_size > 0) {
  409d56:	687b      	ldr	r3, [r7, #4]
  409d58:	2b00      	cmp	r3, #0
  409d5a:	d18a      	bne.n	409c72 <flash_write+0x2a>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  409d5c:	2300      	movs	r3, #0
}
  409d5e:	4618      	mov	r0, r3
  409d60:	373c      	adds	r7, #60	; 0x3c
  409d62:	46bd      	mov	sp, r7
  409d64:	bd90      	pop	{r4, r7, pc}
  409d66:	bf00      	nop
  409d68:	2000469c 	.word	0x2000469c
  409d6c:	00409afd 	.word	0x00409afd
  409d70:	00409b59 	.word	0x00409b59
  409d74:	0040f861 	.word	0x0040f861
  409d78:	00407e09 	.word	0x00407e09

00409d7c <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  409d7c:	b590      	push	{r4, r7, lr}
  409d7e:	b08b      	sub	sp, #44	; 0x2c
  409d80:	af00      	add	r7, sp, #0
  409d82:	60f8      	str	r0, [r7, #12]
  409d84:	60b9      	str	r1, [r7, #8]
  409d86:	607a      	str	r2, [r7, #4]
  409d88:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
  409d8a:	2310      	movs	r3, #16
  409d8c:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
  409d8e:	f107 0314 	add.w	r3, r7, #20
  409d92:	f107 0218 	add.w	r2, r7, #24
  409d96:	68b9      	ldr	r1, [r7, #8]
  409d98:	68f8      	ldr	r0, [r7, #12]
  409d9a:	4c1c      	ldr	r4, [pc, #112]	; (409e0c <flash_lock+0x90>)
  409d9c:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
  409d9e:	687b      	ldr	r3, [r7, #4]
  409da0:	2b00      	cmp	r3, #0
  409da2:	d002      	beq.n	409daa <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
  409da4:	69ba      	ldr	r2, [r7, #24]
  409da6:	687b      	ldr	r3, [r7, #4]
  409da8:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
  409daa:	683b      	ldr	r3, [r7, #0]
  409dac:	2b00      	cmp	r3, #0
  409dae:	d002      	beq.n	409db6 <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
  409db0:	697a      	ldr	r2, [r7, #20]
  409db2:	683b      	ldr	r3, [r7, #0]
  409db4:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
  409db6:	69b9      	ldr	r1, [r7, #24]
  409db8:	f107 0212 	add.w	r2, r7, #18
  409dbc:	f107 001c 	add.w	r0, r7, #28
  409dc0:	2300      	movs	r3, #0
  409dc2:	4c13      	ldr	r4, [pc, #76]	; (409e10 <flash_lock+0x94>)
  409dc4:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
  409dc6:	6979      	ldr	r1, [r7, #20]
  409dc8:	f107 0210 	add.w	r2, r7, #16
  409dcc:	2300      	movs	r3, #0
  409dce:	2000      	movs	r0, #0
  409dd0:	4c0f      	ldr	r4, [pc, #60]	; (409e10 <flash_lock+0x94>)
  409dd2:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
  409dd4:	e010      	b.n	409df8 <flash_lock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
  409dd6:	69fb      	ldr	r3, [r7, #28]
  409dd8:	8a7a      	ldrh	r2, [r7, #18]
  409dda:	2108      	movs	r1, #8
  409ddc:	4618      	mov	r0, r3
  409dde:	4b0d      	ldr	r3, [pc, #52]	; (409e14 <flash_lock+0x98>)
  409de0:	4798      	blx	r3
  409de2:	6238      	str	r0, [r7, #32]

		if (ul_error) {
  409de4:	6a3b      	ldr	r3, [r7, #32]
  409de6:	2b00      	cmp	r3, #0
  409de8:	d001      	beq.n	409dee <flash_lock+0x72>
			return ul_error;
  409dea:	6a3b      	ldr	r3, [r7, #32]
  409dec:	e009      	b.n	409e02 <flash_lock+0x86>
		}
		us_start_page += us_num_pages_in_region;
  409dee:	8a7a      	ldrh	r2, [r7, #18]
  409df0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  409df2:	4413      	add	r3, r2
  409df4:	b29b      	uxth	r3, r3
  409df6:	827b      	strh	r3, [r7, #18]
	while (us_start_page < us_end_page) {
  409df8:	8a7a      	ldrh	r2, [r7, #18]
  409dfa:	8a3b      	ldrh	r3, [r7, #16]
  409dfc:	429a      	cmp	r2, r3
  409dfe:	d3ea      	bcc.n	409dd6 <flash_lock+0x5a>
	}

	return FLASH_RC_OK;
  409e00:	2300      	movs	r3, #0
}
  409e02:	4618      	mov	r0, r3
  409e04:	372c      	adds	r7, #44	; 0x2c
  409e06:	46bd      	mov	sp, r7
  409e08:	bd90      	pop	{r4, r7, pc}
  409e0a:	bf00      	nop
  409e0c:	00409b91 	.word	0x00409b91
  409e10:	00409afd 	.word	0x00409afd
  409e14:	00407e09 	.word	0x00407e09

00409e18 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  409e18:	b590      	push	{r4, r7, lr}
  409e1a:	b08b      	sub	sp, #44	; 0x2c
  409e1c:	af00      	add	r7, sp, #0
  409e1e:	60f8      	str	r0, [r7, #12]
  409e20:	60b9      	str	r1, [r7, #8]
  409e22:	607a      	str	r2, [r7, #4]
  409e24:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
  409e26:	2310      	movs	r3, #16
  409e28:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
  409e2a:	f107 0314 	add.w	r3, r7, #20
  409e2e:	f107 0218 	add.w	r2, r7, #24
  409e32:	68b9      	ldr	r1, [r7, #8]
  409e34:	68f8      	ldr	r0, [r7, #12]
  409e36:	4c1c      	ldr	r4, [pc, #112]	; (409ea8 <flash_unlock+0x90>)
  409e38:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
  409e3a:	687b      	ldr	r3, [r7, #4]
  409e3c:	2b00      	cmp	r3, #0
  409e3e:	d002      	beq.n	409e46 <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
  409e40:	69ba      	ldr	r2, [r7, #24]
  409e42:	687b      	ldr	r3, [r7, #4]
  409e44:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
  409e46:	683b      	ldr	r3, [r7, #0]
  409e48:	2b00      	cmp	r3, #0
  409e4a:	d002      	beq.n	409e52 <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
  409e4c:	697a      	ldr	r2, [r7, #20]
  409e4e:	683b      	ldr	r3, [r7, #0]
  409e50:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
  409e52:	69b9      	ldr	r1, [r7, #24]
  409e54:	f107 0212 	add.w	r2, r7, #18
  409e58:	f107 001c 	add.w	r0, r7, #28
  409e5c:	2300      	movs	r3, #0
  409e5e:	4c13      	ldr	r4, [pc, #76]	; (409eac <flash_unlock+0x94>)
  409e60:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
  409e62:	6979      	ldr	r1, [r7, #20]
  409e64:	f107 0210 	add.w	r2, r7, #16
  409e68:	2300      	movs	r3, #0
  409e6a:	2000      	movs	r0, #0
  409e6c:	4c0f      	ldr	r4, [pc, #60]	; (409eac <flash_unlock+0x94>)
  409e6e:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
  409e70:	e010      	b.n	409e94 <flash_unlock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
  409e72:	69fb      	ldr	r3, [r7, #28]
  409e74:	8a7a      	ldrh	r2, [r7, #18]
  409e76:	2109      	movs	r1, #9
  409e78:	4618      	mov	r0, r3
  409e7a:	4b0d      	ldr	r3, [pc, #52]	; (409eb0 <flash_unlock+0x98>)
  409e7c:	4798      	blx	r3
  409e7e:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
  409e80:	6a3b      	ldr	r3, [r7, #32]
  409e82:	2b00      	cmp	r3, #0
  409e84:	d001      	beq.n	409e8a <flash_unlock+0x72>
			return ul_error;
  409e86:	6a3b      	ldr	r3, [r7, #32]
  409e88:	e009      	b.n	409e9e <flash_unlock+0x86>
		}
		us_start_page += us_num_pages_in_region;
  409e8a:	8a7a      	ldrh	r2, [r7, #18]
  409e8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  409e8e:	4413      	add	r3, r2
  409e90:	b29b      	uxth	r3, r3
  409e92:	827b      	strh	r3, [r7, #18]
	while (us_start_page < us_end_page) {
  409e94:	8a7a      	ldrh	r2, [r7, #18]
  409e96:	8a3b      	ldrh	r3, [r7, #16]
  409e98:	429a      	cmp	r2, r3
  409e9a:	d3ea      	bcc.n	409e72 <flash_unlock+0x5a>
	}

	return FLASH_RC_OK;
  409e9c:	2300      	movs	r3, #0
}
  409e9e:	4618      	mov	r0, r3
  409ea0:	372c      	adds	r7, #44	; 0x2c
  409ea2:	46bd      	mov	sp, r7
  409ea4:	bd90      	pop	{r4, r7, pc}
  409ea6:	bf00      	nop
  409ea8:	00409b91 	.word	0x00409b91
  409eac:	00409afd 	.word	0x00409afd
  409eb0:	00407e09 	.word	0x00407e09

00409eb4 <flash_is_locked>:
 * \param ul_end End address of range.
 *
 * \return The number of locked regions inside the given address range.
 */
uint32_t flash_is_locked(uint32_t ul_start, uint32_t ul_end)
{
  409eb4:	b590      	push	{r4, r7, lr}
  409eb6:	b08b      	sub	sp, #44	; 0x2c
  409eb8:	af00      	add	r7, sp, #0
  409eba:	6078      	str	r0, [r7, #4]
  409ebc:	6039      	str	r1, [r7, #0]
	uint16_t us_start_page, us_end_page;
	uint8_t uc_start_region, uc_end_region;
	uint16_t us_num_pages_in_region;
	uint32_t ul_status;
	uint32_t ul_error;
	uint32_t ul_num_locked_regions = 0;
  409ebe:	2300      	movs	r3, #0
  409ec0:	623b      	str	r3, [r7, #32]
	uint32_t ul_count = 0;
  409ec2:	2300      	movs	r3, #0
  409ec4:	61fb      	str	r3, [r7, #28]
	uint32_t ul_bit = 0;
  409ec6:	2300      	movs	r3, #0
  409ec8:	61bb      	str	r3, [r7, #24]
	Assert((ul_start >= IFLASH_ADDR)
				&& (ul_end <= IFLASH_ADDR + IFLASH_SIZE));
#endif

	/* Compute page numbers */
	translate_address(&p_efc, ul_start, &us_start_page, 0);
  409eca:	f107 020a 	add.w	r2, r7, #10
  409ece:	f107 000c 	add.w	r0, r7, #12
  409ed2:	2300      	movs	r3, #0
  409ed4:	6879      	ldr	r1, [r7, #4]
  409ed6:	4c34      	ldr	r4, [pc, #208]	; (409fa8 <flash_is_locked+0xf4>)
  409ed8:	47a0      	blx	r4
	translate_address(0, ul_end, &us_end_page, 0);
  409eda:	f107 0208 	add.w	r2, r7, #8
  409ede:	2300      	movs	r3, #0
  409ee0:	6839      	ldr	r1, [r7, #0]
  409ee2:	2000      	movs	r0, #0
  409ee4:	4c30      	ldr	r4, [pc, #192]	; (409fa8 <flash_is_locked+0xf4>)
  409ee6:	47a0      	blx	r4

	/* Compute region numbers */
	us_num_pages_in_region = IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;
  409ee8:	2310      	movs	r3, #16
  409eea:	82fb      	strh	r3, [r7, #22]
	uc_start_region = us_start_page / us_num_pages_in_region;
  409eec:	897a      	ldrh	r2, [r7, #10]
  409eee:	8afb      	ldrh	r3, [r7, #22]
  409ef0:	fbb2 f3f3 	udiv	r3, r2, r3
  409ef4:	b29b      	uxth	r3, r3
  409ef6:	757b      	strb	r3, [r7, #21]
	uc_end_region = us_end_page / us_num_pages_in_region;
  409ef8:	893a      	ldrh	r2, [r7, #8]
  409efa:	8afb      	ldrh	r3, [r7, #22]
  409efc:	fbb2 f3f3 	udiv	r3, r2, r3
  409f00:	b29b      	uxth	r3, r3
  409f02:	753b      	strb	r3, [r7, #20]

	/* Retrieve lock status */
	ul_error = efc_perform_command(p_efc, EFC_FCMD_GLB, 0);
  409f04:	68fb      	ldr	r3, [r7, #12]
  409f06:	2200      	movs	r2, #0
  409f08:	210a      	movs	r1, #10
  409f0a:	4618      	mov	r0, r3
  409f0c:	4b27      	ldr	r3, [pc, #156]	; (409fac <flash_is_locked+0xf8>)
  409f0e:	4798      	blx	r3
  409f10:	6138      	str	r0, [r7, #16]
	if (ul_error) {
  409f12:	693b      	ldr	r3, [r7, #16]
  409f14:	2b00      	cmp	r3, #0
  409f16:	d001      	beq.n	409f1c <flash_is_locked+0x68>
		return ul_error;
  409f18:	693b      	ldr	r3, [r7, #16]
  409f1a:	e040      	b.n	409f9e <flash_is_locked+0xea>
	}
    UNUSED(ul_error);

	/* Skip unrequested regions (if necessary) */
	ul_status = efc_get_result(p_efc);
  409f1c:	68fb      	ldr	r3, [r7, #12]
  409f1e:	4618      	mov	r0, r3
  409f20:	4b23      	ldr	r3, [pc, #140]	; (409fb0 <flash_is_locked+0xfc>)
  409f22:	4798      	blx	r3
  409f24:	6278      	str	r0, [r7, #36]	; 0x24
	while (!(ul_count <= uc_start_region &&
  409f26:	e007      	b.n	409f38 <flash_is_locked+0x84>
			uc_start_region < (ul_count + 32))) {
		ul_status = efc_get_result(p_efc);
  409f28:	68fb      	ldr	r3, [r7, #12]
  409f2a:	4618      	mov	r0, r3
  409f2c:	4b20      	ldr	r3, [pc, #128]	; (409fb0 <flash_is_locked+0xfc>)
  409f2e:	4798      	blx	r3
  409f30:	6278      	str	r0, [r7, #36]	; 0x24
		ul_count += 32;
  409f32:	69fb      	ldr	r3, [r7, #28]
  409f34:	3320      	adds	r3, #32
  409f36:	61fb      	str	r3, [r7, #28]
	while (!(ul_count <= uc_start_region &&
  409f38:	7d7a      	ldrb	r2, [r7, #21]
  409f3a:	69fb      	ldr	r3, [r7, #28]
  409f3c:	429a      	cmp	r2, r3
  409f3e:	d3f3      	bcc.n	409f28 <flash_is_locked+0x74>
			uc_start_region < (ul_count + 32))) {
  409f40:	7d7a      	ldrb	r2, [r7, #21]
  409f42:	69fb      	ldr	r3, [r7, #28]
  409f44:	3320      	adds	r3, #32
	while (!(ul_count <= uc_start_region &&
  409f46:	429a      	cmp	r2, r3
  409f48:	d2ee      	bcs.n	409f28 <flash_is_locked+0x74>
	}

	/* Check status of each involved region */
	ul_bit = uc_start_region - ul_count;
  409f4a:	7d7a      	ldrb	r2, [r7, #21]
  409f4c:	69fb      	ldr	r3, [r7, #28]
  409f4e:	1ad3      	subs	r3, r2, r3
  409f50:	61bb      	str	r3, [r7, #24]

	/* Number of region to check (must be > 0) */
	ul_count = uc_end_region - uc_start_region + 1;
  409f52:	7d3a      	ldrb	r2, [r7, #20]
  409f54:	7d7b      	ldrb	r3, [r7, #21]
  409f56:	1ad3      	subs	r3, r2, r3
  409f58:	3301      	adds	r3, #1
  409f5a:	61fb      	str	r3, [r7, #28]

	while (ul_count > 0) {
  409f5c:	e01b      	b.n	409f96 <flash_is_locked+0xe2>
		if (ul_status & (1 << (ul_bit))) {
  409f5e:	2201      	movs	r2, #1
  409f60:	69bb      	ldr	r3, [r7, #24]
  409f62:	fa02 f303 	lsl.w	r3, r2, r3
  409f66:	461a      	mov	r2, r3
  409f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  409f6a:	4013      	ands	r3, r2
  409f6c:	2b00      	cmp	r3, #0
  409f6e:	d002      	beq.n	409f76 <flash_is_locked+0xc2>
			ul_num_locked_regions++;
  409f70:	6a3b      	ldr	r3, [r7, #32]
  409f72:	3301      	adds	r3, #1
  409f74:	623b      	str	r3, [r7, #32]
		}

		ul_count -= 1;
  409f76:	69fb      	ldr	r3, [r7, #28]
  409f78:	3b01      	subs	r3, #1
  409f7a:	61fb      	str	r3, [r7, #28]
		ul_bit += 1;
  409f7c:	69bb      	ldr	r3, [r7, #24]
  409f7e:	3301      	adds	r3, #1
  409f80:	61bb      	str	r3, [r7, #24]
		if (ul_bit == 32) {
  409f82:	69bb      	ldr	r3, [r7, #24]
  409f84:	2b20      	cmp	r3, #32
  409f86:	d106      	bne.n	409f96 <flash_is_locked+0xe2>
			ul_status = efc_get_result(p_efc);
  409f88:	68fb      	ldr	r3, [r7, #12]
  409f8a:	4618      	mov	r0, r3
  409f8c:	4b08      	ldr	r3, [pc, #32]	; (409fb0 <flash_is_locked+0xfc>)
  409f8e:	4798      	blx	r3
  409f90:	6278      	str	r0, [r7, #36]	; 0x24
			ul_bit = 0;
  409f92:	2300      	movs	r3, #0
  409f94:	61bb      	str	r3, [r7, #24]
	while (ul_count > 0) {
  409f96:	69fb      	ldr	r3, [r7, #28]
  409f98:	2b00      	cmp	r3, #0
  409f9a:	d1e0      	bne.n	409f5e <flash_is_locked+0xaa>
		}
	}

	return ul_num_locked_regions;
  409f9c:	6a3b      	ldr	r3, [r7, #32]
}
  409f9e:	4618      	mov	r0, r3
  409fa0:	372c      	adds	r7, #44	; 0x2c
  409fa2:	46bd      	mov	sp, r7
  409fa4:	bd90      	pop	{r4, r7, pc}
  409fa6:	bf00      	nop
  409fa8:	00409afd 	.word	0x00409afd
  409fac:	00407e09 	.word	0x00407e09
  409fb0:	00407e69 	.word	0x00407e69

00409fb4 <invn_algo_agm_process>:
  409fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409fb8:	2300      	movs	r3, #0
  409fba:	4d04      	ldr	r5, [pc, #16]	; (409fcc <invn_algo_agm_process+0x18>)
  409fbc:	600b      	str	r3, [r1, #0]
  409fbe:	782b      	ldrb	r3, [r5, #0]
  409fc0:	2b01      	cmp	r3, #1
  409fc2:	b0a9      	sub	sp, #164	; 0xa4
  409fc4:	d004      	beq.n	409fd0 <invn_algo_agm_process+0x1c>
  409fc6:	b029      	add	sp, #164	; 0xa4
  409fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fcc:	20004ae0 	.word	0x20004ae0
  409fd0:	6803      	ldr	r3, [r0, #0]
  409fd2:	079c      	lsls	r4, r3, #30
  409fd4:	d00f      	beq.n	409ff6 <invn_algo_agm_process+0x42>
  409fd6:	f9b0 6028 	ldrsh.w	r6, [r0, #40]	; 0x28
  409fda:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  409fdc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  409fde:	fb86 6702 	smull	r6, r7, r6, r2
  409fe2:	0bb2      	lsrs	r2, r6, #14
  409fe4:	ea42 4287 	orr.w	r2, r2, r7, lsl #18
  409fe8:	4414      	add	r4, r2
  409fea:	2264      	movs	r2, #100	; 0x64
  409fec:	fb02 f204 	mul.w	r2, r2, r4
  409ff0:	f8c1 40b8 	str.w	r4, [r1, #184]	; 0xb8
  409ff4:	1412      	asrs	r2, r2, #16
  409ff6:	4cc5      	ldr	r4, [pc, #788]	; (40a30c <invn_algo_agm_process+0x358>)
  409ff8:	e9d4 8900 	ldrd	r8, r9, [r4]
  409ffc:	ea58 0409 	orrs.w	r4, r8, r9
  40a000:	d009      	beq.n	40a016 <invn_algo_agm_process+0x62>
  40a002:	e9d0 ab02 	ldrd	sl, fp, [r0, #8]
  40a006:	ea5a 040b 	orrs.w	r4, sl, fp
  40a00a:	d004      	beq.n	40a016 <invn_algo_agm_process+0x62>
  40a00c:	45d0      	cmp	r8, sl
  40a00e:	eb79 040b 	sbcs.w	r4, r9, fp
  40a012:	f2c0 8215 	blt.w	40a440 <invn_algo_agm_process+0x48c>
  40a016:	2400      	movs	r4, #0
  40a018:	9403      	str	r4, [sp, #12]
  40a01a:	4680      	mov	r8, r0
  40a01c:	07d8      	lsls	r0, r3, #31
  40a01e:	460c      	mov	r4, r1
  40a020:	f100 8182 	bmi.w	40a328 <invn_algo_agm_process+0x374>
  40a024:	69aa      	ldr	r2, [r5, #24]
  40a026:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  40a02a:	f000 821b 	beq.w	40a464 <invn_algo_agm_process+0x4b0>
  40a02e:	f340 8169 	ble.w	40a304 <invn_algo_agm_process+0x350>
  40a032:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
  40a036:	f000 8213 	beq.w	40a460 <invn_algo_agm_process+0x4ac>
  40a03a:	f5b2 6f7a 	cmp.w	r2, #4000	; 0xfa0
  40a03e:	f040 81da 	bne.w	40a3f6 <invn_algo_agm_process+0x442>
  40a042:	220b      	movs	r2, #11
  40a044:	0799      	lsls	r1, r3, #30
  40a046:	f140 8114 	bpl.w	40a272 <invn_algo_agm_process+0x2be>
  40a04a:	f8d8 301c 	ldr.w	r3, [r8, #28]
  40a04e:	fa03 fa02 	lsl.w	sl, r3, r2
  40a052:	f1ba 5f00 	cmp.w	sl, #536870912	; 0x20000000
  40a056:	f340 81e8 	ble.w	40a42a <invn_algo_agm_process+0x476>
  40a05a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a05e:	9325      	str	r3, [sp, #148]	; 0x94
  40a060:	f8d8 7020 	ldr.w	r7, [r8, #32]
  40a064:	4097      	lsls	r7, r2
  40a066:	f1b7 5f00 	cmp.w	r7, #536870912	; 0x20000000
  40a06a:	f340 81d6 	ble.w	40a41a <invn_algo_agm_process+0x466>
  40a06e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a072:	9326      	str	r3, [sp, #152]	; 0x98
  40a074:	f8d8 6024 	ldr.w	r6, [r8, #36]	; 0x24
  40a078:	4096      	lsls	r6, r2
  40a07a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
  40a07e:	f340 81c4 	ble.w	40a40a <invn_algo_agm_process+0x456>
  40a082:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a086:	9327      	str	r3, [sp, #156]	; 0x9c
  40a088:	a925      	add	r1, sp, #148	; 0x94
  40a08a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
  40a08e:	48a0      	ldr	r0, [pc, #640]	; (40a310 <invn_algo_agm_process+0x35c>)
  40a090:	f001 fa9e 	bl	40b5d0 <GyroCalFnmFxp_UpdateData>
  40a094:	f8d5 32d0 	ldr.w	r3, [r5, #720]	; 0x2d0
  40a098:	f8d5 1300 	ldr.w	r1, [r5, #768]	; 0x300
  40a09c:	2b02      	cmp	r3, #2
  40a09e:	f000 81e3 	beq.w	40a468 <invn_algo_agm_process+0x4b4>
  40a0a2:	f8d5 22f4 	ldr.w	r2, [r5, #756]	; 0x2f4
  40a0a6:	f8d5 b2f8 	ldr.w	fp, [r5, #760]	; 0x2f8
  40a0aa:	f8d5 32fc 	ldr.w	r3, [r5, #764]	; 0x2fc
  40a0ae:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  40a0b2:	f04f 6cfa 	mov.w	ip, #131072000	; 0x7d00000
  40a0b6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40a0ba:	2100      	movs	r1, #0
  40a0bc:	f04f 6e7a 	mov.w	lr, #262144000	; 0xfa00000
  40a0c0:	fbcc 0102 	smlal	r0, r1, ip, r2
  40a0c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40a0c8:	fb8a 010e 	smull	r0, r1, sl, lr
  40a0cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40a0d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40a0d4:	ebaa 0262 	sub.w	r2, sl, r2, asr #1
  40a0d8:	e9dd 9a06 	ldrd	r9, sl, [sp, #24]
  40a0dc:	9222      	str	r2, [sp, #136]	; 0x88
  40a0de:	0f82      	lsrs	r2, r0, #30
  40a0e0:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
  40a0e4:	4649      	mov	r1, r9
  40a0e6:	0f88      	lsrs	r0, r1, #30
  40a0e8:	ea40 008a 	orr.w	r0, r0, sl, lsl #2
  40a0ec:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
  40a0f0:	f04f 0a00 	mov.w	sl, #0
  40a0f4:	fbcc 9a0b 	smlal	r9, sl, ip, fp
  40a0f8:	e9cd 9a06 	strd	r9, sl, [sp, #24]
  40a0fc:	f04f 5900 	mov.w	r9, #536870912	; 0x20000000
  40a100:	f04f 0a00 	mov.w	sl, #0
  40a104:	fbcc 9a03 	smlal	r9, sl, ip, r3
  40a108:	e9cd 9a04 	strd	r9, sl, [sp, #16]
  40a10c:	fb87 9a0e 	smull	r9, sl, r7, lr
  40a110:	eba7 016b 	sub.w	r1, r7, fp, asr #1
  40a114:	e9cd 9a08 	strd	r9, sl, [sp, #32]
  40a118:	fb86 bc0e 	smull	fp, ip, r6, lr
  40a11c:	eba6 0a63 	sub.w	sl, r6, r3, asr #1
  40a120:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  40a124:	ea4f 7e96 	mov.w	lr, r6, lsr #30
  40a128:	ea4e 0e87 	orr.w	lr, lr, r7, lsl #2
  40a12c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
  40a130:	9123      	str	r1, [sp, #140]	; 0x8c
  40a132:	0fb3      	lsrs	r3, r6, #30
  40a134:	9904      	ldr	r1, [sp, #16]
  40a136:	6462      	str	r2, [r4, #68]	; 0x44
  40a138:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
  40a13c:	9f05      	ldr	r7, [sp, #20]
  40a13e:	6323      	str	r3, [r4, #48]	; 0x30
  40a140:	0f8e      	lsrs	r6, r1, #30
  40a142:	ea46 0687 	orr.w	r6, r6, r7, lsl #2
  40a146:	ea4f 719b 	mov.w	r1, fp, lsr #30
  40a14a:	6827      	ldr	r7, [r4, #0]
  40a14c:	62e0      	str	r0, [r4, #44]	; 0x2c
  40a14e:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
  40a152:	eba3 0c0e 	sub.w	ip, r3, lr
  40a156:	9b03      	ldr	r3, [sp, #12]
  40a158:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
  40a15c:	eba0 0b02 	sub.w	fp, r0, r2
  40a160:	f047 0702 	orr.w	r7, r7, #2
  40a164:	1b8a      	subs	r2, r1, r6
  40a166:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
  40a16a:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
  40a16e:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
  40a172:	64e6      	str	r6, [r4, #76]	; 0x4c
  40a174:	6422      	str	r2, [r4, #64]	; 0x40
  40a176:	6361      	str	r1, [r4, #52]	; 0x34
  40a178:	6027      	str	r7, [r4, #0]
  40a17a:	2b00      	cmp	r3, #0
  40a17c:	f040 813d 	bne.w	40a3fa <invn_algo_agm_process+0x446>
  40a180:	6a29      	ldr	r1, [r5, #32]
  40a182:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a186:	f8d8 600c 	ldr.w	r6, [r8, #12]
  40a18a:	4862      	ldr	r0, [pc, #392]	; (40a314 <invn_algo_agm_process+0x360>)
  40a18c:	4a62      	ldr	r2, [pc, #392]	; (40a318 <invn_algo_agm_process+0x364>)
  40a18e:	f8c5 37d8 	str.w	r3, [r5, #2008]	; 0x7d8
  40a192:	f8c0 65cc 	str.w	r6, [r0, #1484]	; 0x5cc
  40a196:	f002 fed5 	bl	40cf44 <SphericalFxp_SetCustomParamGyr>
  40a19a:	f8d5 2300 	ldr.w	r2, [r5, #768]	; 0x300
  40a19e:	485f      	ldr	r0, [pc, #380]	; (40a31c <invn_algo_agm_process+0x368>)
  40a1a0:	a922      	add	r1, sp, #136	; 0x88
  40a1a2:	f002 ff5f 	bl	40d064 <SphericalFxp_UpdateGyrData>
  40a1a6:	f8d5 0298 	ldr.w	r0, [r5, #664]	; 0x298
  40a1aa:	f8d5 629c 	ldr.w	r6, [r5, #668]	; 0x29c
  40a1ae:	f8d5 12a0 	ldr.w	r1, [r5, #672]	; 0x2a0
  40a1b2:	6823      	ldr	r3, [r4, #0]
  40a1b4:	f8d5 22a4 	ldr.w	r2, [r5, #676]	; 0x2a4
  40a1b8:	67e0      	str	r0, [r4, #124]	; 0x7c
  40a1ba:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  40a1be:	4620      	mov	r0, r4
  40a1c0:	f8d5 62a8 	ldr.w	r6, [r5, #680]	; 0x2a8
  40a1c4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
  40a1c8:	f8d5 12ac 	ldr.w	r1, [r5, #684]	; 0x2ac
  40a1cc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  40a1d0:	f043 0318 	orr.w	r3, r3, #24
  40a1d4:	f8d5 22b0 	ldr.w	r2, [r5, #688]	; 0x2b0
  40a1d8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  40a1dc:	f8d5 62b4 	ldr.w	r6, [r5, #692]	; 0x2b4
  40a1e0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
  40a1e4:	f8d5 12b8 	ldr.w	r1, [r5, #696]	; 0x2b8
  40a1e8:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
  40a1ec:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  40a1f0:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
  40a1f4:	a916      	add	r1, sp, #88	; 0x58
  40a1f6:	f840 3b7c 	str.w	r3, [r0], #124
  40a1fa:	f000 ffd3 	bl	40b1a4 <invn_quat_to_gravity_fxp>
  40a1fe:	6823      	ldr	r3, [r4, #0]
  40a200:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40a202:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40a204:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
  40a208:	f8d5 e0c8 	ldr.w	lr, [r5, #200]	; 0xc8
  40a20c:	9f16      	ldr	r7, [sp, #88]	; 0x58
  40a20e:	f8d5 60b0 	ldr.w	r6, [r5, #176]	; 0xb0
  40a212:	1389      	asrs	r1, r1, #14
  40a214:	1392      	asrs	r2, r2, #14
  40a216:	f043 0320 	orr.w	r3, r3, #32
  40a21a:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  40a21e:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
  40a222:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
  40a226:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
  40a22a:	6023      	str	r3, [r4, #0]
  40a22c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
  40a230:	eba0 000e 	sub.w	r0, r0, lr
  40a234:	13bf      	asrs	r7, r7, #14
  40a236:	1a9b      	subs	r3, r3, r2
  40a238:	1a76      	subs	r6, r6, r1
  40a23a:	aa1c      	add	r2, sp, #112	; 0x70
  40a23c:	a919      	add	r1, sp, #100	; 0x64
  40a23e:	9019      	str	r0, [sp, #100]	; 0x64
  40a240:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
  40a244:	4836      	ldr	r0, [pc, #216]	; (40a320 <invn_algo_agm_process+0x36c>)
  40a246:	961a      	str	r6, [sp, #104]	; 0x68
  40a248:	931b      	str	r3, [sp, #108]	; 0x6c
  40a24a:	f000 fb09 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40a24e:	6822      	ldr	r2, [r4, #0]
  40a250:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  40a252:	981d      	ldr	r0, [sp, #116]	; 0x74
  40a254:	991e      	ldr	r1, [sp, #120]	; 0x78
  40a256:	f8d8 3000 	ldr.w	r3, [r8]
  40a25a:	1276      	asrs	r6, r6, #9
  40a25c:	1240      	asrs	r0, r0, #9
  40a25e:	1249      	asrs	r1, r1, #9
  40a260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40a264:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
  40a268:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
  40a26c:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  40a270:	6022      	str	r2, [r4, #0]
  40a272:	075b      	lsls	r3, r3, #29
  40a274:	f57f aea7 	bpl.w	409fc6 <invn_algo_agm_process+0x12>
  40a278:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40a27a:	f8d8 103c 	ldr.w	r1, [r8, #60]	; 0x3c
  40a27e:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
  40a282:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
  40a286:	4827      	ldr	r0, [pc, #156]	; (40a324 <invn_algo_agm_process+0x370>)
  40a288:	fb03 f505 	mul.w	r5, r3, r5
  40a28c:	fb03 f101 	mul.w	r1, r3, r1
  40a290:	fb03 f202 	mul.w	r2, r3, r2
  40a294:	af0c      	add	r7, sp, #48	; 0x30
  40a296:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  40a29a:	2300      	movs	r3, #0
  40a29c:	6565      	str	r5, [r4, #84]	; 0x54
  40a29e:	65a1      	str	r1, [r4, #88]	; 0x58
  40a2a0:	65e2      	str	r2, [r4, #92]	; 0x5c
  40a2a2:	f104 0154 	add.w	r1, r4, #84	; 0x54
  40a2a6:	e88d 00c0 	stmia.w	sp, {r6, r7}
  40a2aa:	461a      	mov	r2, r3
  40a2ac:	f002 f938 	bl	40c520 <RlsCalibrationFxp_UpdateUncalibratedData>
  40a2b0:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
  40a2b2:	6f26      	ldr	r6, [r4, #112]	; 0x70
  40a2b4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40a2b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40a2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40a2ba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  40a2bc:	6825      	ldr	r5, [r4, #0]
  40a2be:	1b80      	subs	r0, r0, r6
  40a2c0:	1a89      	subs	r1, r1, r2
  40a2c2:	1bdb      	subs	r3, r3, r7
  40a2c4:	f045 0e04 	orr.w	lr, r5, #4
  40a2c8:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
  40a2cc:	6623      	str	r3, [r4, #96]	; 0x60
  40a2ce:	eb00 0780 	add.w	r7, r0, r0, lsl #2
  40a2d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40a2d6:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  40a2da:	005d      	lsls	r5, r3, #1
  40a2dc:	6660      	str	r0, [r4, #100]	; 0x64
  40a2de:	66a1      	str	r1, [r4, #104]	; 0x68
  40a2e0:	007f      	lsls	r7, r7, #1
  40a2e2:	0076      	lsls	r6, r6, #1
  40a2e4:	f8c4 e000 	str.w	lr, [r4]
  40a2e8:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
  40a2ec:	f44f 133c 	mov.w	r3, #3080192	; 0x2f0000
  40a2f0:	a913      	add	r1, sp, #76	; 0x4c
  40a2f2:	480a      	ldr	r0, [pc, #40]	; (40a31c <invn_algo_agm_process+0x368>)
  40a2f4:	9513      	str	r5, [sp, #76]	; 0x4c
  40a2f6:	9714      	str	r7, [sp, #80]	; 0x50
  40a2f8:	9615      	str	r6, [sp, #84]	; 0x54
  40a2fa:	f003 f85f 	bl	40d3bc <SphericalFxp_UpdateMagData>
  40a2fe:	b029      	add	sp, #164	; 0xa4
  40a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a304:	2afa      	cmp	r2, #250	; 0xfa
  40a306:	d176      	bne.n	40a3f6 <invn_algo_agm_process+0x442>
  40a308:	2207      	movs	r2, #7
  40a30a:	e69b      	b.n	40a044 <invn_algo_agm_process+0x90>
  40a30c:	200052b8 	.word	0x200052b8
  40a310:	20004d9c 	.word	0x20004d9c
  40a314:	20004cf0 	.word	0x20004cf0
  40a318:	0010624e 	.word	0x0010624e
  40a31c:	20004b14 	.word	0x20004b14
  40a320:	20004d54 	.word	0x20004d54
  40a324:	200050a0 	.word	0x200050a0
  40a328:	696f      	ldr	r7, [r5, #20]
  40a32a:	f8d8 6010 	ldr.w	r6, [r8, #16]
  40a32e:	f8d8 1014 	ldr.w	r1, [r8, #20]
  40a332:	f8d8 3018 	ldr.w	r3, [r8, #24]
  40a336:	4851      	ldr	r0, [pc, #324]	; (40a47c <invn_algo_agm_process+0x4c8>)
  40a338:	fb06 f607 	mul.w	r6, r6, r7
  40a33c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
  40a340:	fb01 f107 	mul.w	r1, r1, r7
  40a344:	fb03 f307 	mul.w	r3, r3, r7
  40a348:	018e      	lsls	r6, r1, #6
  40a34a:	019f      	lsls	r7, r3, #6
  40a34c:	ea4f 236e 	mov.w	r3, lr, asr #9
  40a350:	6063      	str	r3, [r4, #4]
  40a352:	1273      	asrs	r3, r6, #9
  40a354:	60a3      	str	r3, [r4, #8]
  40a356:	127b      	asrs	r3, r7, #9
  40a358:	60e3      	str	r3, [r4, #12]
  40a35a:	ab0b      	add	r3, sp, #44	; 0x2c
  40a35c:	9301      	str	r3, [sp, #4]
  40a35e:	ab10      	add	r3, sp, #64	; 0x40
  40a360:	9300      	str	r3, [sp, #0]
  40a362:	a90d      	add	r1, sp, #52	; 0x34
  40a364:	2300      	movs	r3, #0
  40a366:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
  40a36a:	960e      	str	r6, [sp, #56]	; 0x38
  40a36c:	970f      	str	r7, [sp, #60]	; 0x3c
  40a36e:	f002 f8d7 	bl	40c520 <RlsCalibrationFxp_UpdateUncalibratedData>
  40a372:	a810      	add	r0, sp, #64	; 0x40
  40a374:	c80d      	ldmia	r0, {r0, r2, r3}
  40a376:	6861      	ldr	r1, [r4, #4]
  40a378:	68a7      	ldr	r7, [r4, #8]
  40a37a:	68e6      	ldr	r6, [r4, #12]
  40a37c:	f500 7080 	add.w	r0, r0, #256	; 0x100
  40a380:	1240      	asrs	r0, r0, #9
  40a382:	f502 7280 	add.w	r2, r2, #256	; 0x100
  40a386:	f503 7380 	add.w	r3, r3, #256	; 0x100
  40a38a:	1252      	asrs	r2, r2, #9
  40a38c:	125b      	asrs	r3, r3, #9
  40a38e:	1a09      	subs	r1, r1, r0
  40a390:	61e0      	str	r0, [r4, #28]
  40a392:	6820      	ldr	r0, [r4, #0]
  40a394:	6121      	str	r1, [r4, #16]
  40a396:	1abf      	subs	r7, r7, r2
  40a398:	1af6      	subs	r6, r6, r3
  40a39a:	0249      	lsls	r1, r1, #9
  40a39c:	6263      	str	r3, [r4, #36]	; 0x24
  40a39e:	9b03      	ldr	r3, [sp, #12]
  40a3a0:	911f      	str	r1, [sp, #124]	; 0x7c
  40a3a2:	f040 0001 	orr.w	r0, r0, #1
  40a3a6:	ea4f 2e47 	mov.w	lr, r7, lsl #9
  40a3aa:	6222      	str	r2, [r4, #32]
  40a3ac:	0271      	lsls	r1, r6, #9
  40a3ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a3b0:	6167      	str	r7, [r4, #20]
  40a3b2:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
  40a3b6:	61a6      	str	r6, [r4, #24]
  40a3b8:	9121      	str	r1, [sp, #132]	; 0x84
  40a3ba:	6020      	str	r0, [r4, #0]
  40a3bc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  40a3c0:	2b00      	cmp	r3, #0
  40a3c2:	d03b      	beq.n	40a43c <invn_algo_agm_process+0x488>
  40a3c4:	f8d8 1008 	ldr.w	r1, [r8, #8]
  40a3c8:	f8d5 37d8 	ldr.w	r3, [r5, #2008]	; 0x7d8
  40a3cc:	1ac9      	subs	r1, r1, r3
  40a3ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40a3d2:	f44f 736c 	mov.w	r3, #944	; 0x3b0
  40a3d6:	e88d 000c 	stmia.w	sp, {r2, r3}
  40a3da:	4829      	ldr	r0, [pc, #164]	; (40a480 <invn_algo_agm_process+0x4cc>)
  40a3dc:	4a29      	ldr	r2, [pc, #164]	; (40a484 <invn_algo_agm_process+0x4d0>)
  40a3de:	2314      	movs	r3, #20
  40a3e0:	f002 fd5c 	bl	40ce9c <SphericalFxp_SetCustomParamAcc>
  40a3e4:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
  40a3e8:	4827      	ldr	r0, [pc, #156]	; (40a488 <invn_algo_agm_process+0x4d4>)
  40a3ea:	a91f      	add	r1, sp, #124	; 0x7c
  40a3ec:	f002 ff2a 	bl	40d244 <SphericalFxp_UpdateAccData>
  40a3f0:	f8d8 3000 	ldr.w	r3, [r8]
  40a3f4:	e616      	b.n	40a024 <invn_algo_agm_process+0x70>
  40a3f6:	220a      	movs	r2, #10
  40a3f8:	e624      	b.n	40a044 <invn_algo_agm_process+0x90>
  40a3fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40a3fe:	f8d5 17d8 	ldr.w	r1, [r5, #2008]	; 0x7d8
  40a402:	f8d8 600c 	ldr.w	r6, [r8, #12]
  40a406:	1a59      	subs	r1, r3, r1
  40a408:	e6bf      	b.n	40a18a <invn_algo_agm_process+0x1d6>
  40a40a:	f1b6 4f60 	cmp.w	r6, #3758096384	; 0xe0000000
  40a40e:	bfb4      	ite	lt
  40a410:	f04f 4340 	movlt.w	r3, #3221225472	; 0xc0000000
  40a414:	0073      	lslge	r3, r6, #1
  40a416:	9327      	str	r3, [sp, #156]	; 0x9c
  40a418:	e636      	b.n	40a088 <invn_algo_agm_process+0xd4>
  40a41a:	f1b7 4f60 	cmp.w	r7, #3758096384	; 0xe0000000
  40a41e:	bfac      	ite	ge
  40a420:	007b      	lslge	r3, r7, #1
  40a422:	f04f 4340 	movlt.w	r3, #3221225472	; 0xc0000000
  40a426:	9326      	str	r3, [sp, #152]	; 0x98
  40a428:	e624      	b.n	40a074 <invn_algo_agm_process+0xc0>
  40a42a:	f1ba 4f60 	cmp.w	sl, #3758096384	; 0xe0000000
  40a42e:	bfac      	ite	ge
  40a430:	ea4f 034a 	movge.w	r3, sl, lsl #1
  40a434:	f04f 4340 	movlt.w	r3, #3221225472	; 0xc0000000
  40a438:	9325      	str	r3, [sp, #148]	; 0x94
  40a43a:	e611      	b.n	40a060 <invn_algo_agm_process+0xac>
  40a43c:	69e9      	ldr	r1, [r5, #28]
  40a43e:	e7c6      	b.n	40a3ce <invn_algo_agm_process+0x41a>
  40a440:	ebba 0608 	subs.w	r6, sl, r8
  40a444:	f8df a048 	ldr.w	sl, [pc, #72]	; 40a490 <invn_algo_agm_process+0x4dc>
  40a448:	eb6b 0709 	sbc.w	r7, fp, r9
  40a44c:	f04f 0b00 	mov.w	fp, #0
  40a450:	45b2      	cmp	sl, r6
  40a452:	eb7b 0407 	sbcs.w	r4, fp, r7
  40a456:	bfac      	ite	ge
  40a458:	2401      	movge	r4, #1
  40a45a:	2400      	movlt	r4, #0
  40a45c:	9403      	str	r4, [sp, #12]
  40a45e:	e5dc      	b.n	40a01a <invn_algo_agm_process+0x66>
  40a460:	2209      	movs	r2, #9
  40a462:	e5ef      	b.n	40a044 <invn_algo_agm_process+0x90>
  40a464:	2208      	movs	r2, #8
  40a466:	e5ed      	b.n	40a044 <invn_algo_agm_process+0x90>
  40a468:	2903      	cmp	r1, #3
  40a46a:	f47f ae1a 	bne.w	40a0a2 <invn_algo_agm_process+0xee>
  40a46e:	4807      	ldr	r0, [pc, #28]	; (40a48c <invn_algo_agm_process+0x4d8>)
  40a470:	f000 fec0 	bl	40b1f4 <GyroCalFnmFxp_Recalibrate>
  40a474:	f8d5 1300 	ldr.w	r1, [r5, #768]	; 0x300
  40a478:	e613      	b.n	40a0a2 <invn_algo_agm_process+0xee>
  40a47a:	bf00      	nop
  40a47c:	20004ea0 	.word	0x20004ea0
  40a480:	20004cf0 	.word	0x20004cf0
  40a484:	00666666 	.word	0x00666666
  40a488:	20004b14 	.word	0x20004b14
  40a48c:	20004d9c 	.word	0x20004d9c
  40a490:	0007a11f 	.word	0x0007a11f

0040a494 <InvnAlgoAGM_SetConfig_r>:
  40a494:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a496:	460b      	mov	r3, r1
  40a498:	460c      	mov	r4, r1
  40a49a:	b089      	sub	sp, #36	; 0x24
  40a49c:	4605      	mov	r5, r0
  40a49e:	1d02      	adds	r2, r0, #4
  40a4a0:	3130      	adds	r1, #48	; 0x30
  40a4a2:	681f      	ldr	r7, [r3, #0]
  40a4a4:	685e      	ldr	r6, [r3, #4]
  40a4a6:	6898      	ldr	r0, [r3, #8]
  40a4a8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
  40a4ac:	f8c2 e00c 	str.w	lr, [r2, #12]
  40a4b0:	3310      	adds	r3, #16
  40a4b2:	428b      	cmp	r3, r1
  40a4b4:	6017      	str	r7, [r2, #0]
  40a4b6:	6056      	str	r6, [r2, #4]
  40a4b8:	6090      	str	r0, [r2, #8]
  40a4ba:	f102 0210 	add.w	r2, r2, #16
  40a4be:	d1f0      	bne.n	40a4a2 <InvnAlgoAGM_SetConfig_r+0xe>
  40a4c0:	2301      	movs	r3, #1
  40a4c2:	4a26      	ldr	r2, [pc, #152]	; (40a55c <InvnAlgoAGM_SetConfig_r+0xc8>)
  40a4c4:	702b      	strb	r3, [r5, #0]
  40a4c6:	f505 7649 	add.w	r6, r5, #804	; 0x324
  40a4ca:	2306      	movs	r3, #6
  40a4cc:	9204      	str	r2, [sp, #16]
  40a4ce:	4f24      	ldr	r7, [pc, #144]	; (40a560 <InvnAlgoAGM_SetConfig_r+0xcc>)
  40a4d0:	9703      	str	r7, [sp, #12]
  40a4d2:	2196      	movs	r1, #150	; 0x96
  40a4d4:	22b4      	movs	r2, #180	; 0xb4
  40a4d6:	e88d 000c 	stmia.w	sp, {r2, r3}
  40a4da:	4630      	mov	r0, r6
  40a4dc:	2200      	movs	r2, #0
  40a4de:	9102      	str	r1, [sp, #8]
  40a4e0:	4920      	ldr	r1, [pc, #128]	; (40a564 <InvnAlgoAGM_SetConfig_r+0xd0>)
  40a4e2:	f000 fe8b 	bl	40b1fc <GyroCalFnmFxp_SetCustomParam>
  40a4e6:	4630      	mov	r0, r6
  40a4e8:	69e1      	ldr	r1, [r4, #28]
  40a4ea:	f000 fe9b 	bl	40b224 <GyroCalFnmFxp_SetSamplingPeriod>
  40a4ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40a4f0:	f205 7014 	addw	r0, r5, #1812	; 0x714
  40a4f4:	f001 f918 	bl	40b728 <RlsCalibrationFxp_SetDefaultParamMag>
  40a4f8:	f505 7604 	add.w	r6, r5, #528	; 0x210
  40a4fc:	69a1      	ldr	r1, [r4, #24]
  40a4fe:	f205 5014 	addw	r0, r5, #1300	; 0x514
  40a502:	f001 f961 	bl	40b7c8 <RlsCalibrationFxp_SetDefaultParamAcc>
  40a506:	4630      	mov	r0, r6
  40a508:	69e1      	ldr	r1, [r4, #28]
  40a50a:	4a17      	ldr	r2, [pc, #92]	; (40a568 <InvnAlgoAGM_SetConfig_r+0xd4>)
  40a50c:	f002 fd1a 	bl	40cf44 <SphericalFxp_SetCustomParamGyr>
  40a510:	f44f 756c 	mov.w	r5, #944	; 0x3b0
  40a514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40a518:	69a1      	ldr	r1, [r4, #24]
  40a51a:	4a14      	ldr	r2, [pc, #80]	; (40a56c <InvnAlgoAGM_SetConfig_r+0xd8>)
  40a51c:	e88d 0028 	stmia.w	sp, {r3, r5}
  40a520:	4630      	mov	r0, r6
  40a522:	2314      	movs	r3, #20
  40a524:	f002 fcba 	bl	40ce9c <SphericalFxp_SetCustomParamAcc>
  40a528:	f04f 33ff 	mov.w	r3, #4294967295
  40a52c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  40a52e:	9307      	str	r3, [sp, #28]
  40a530:	f241 3e88 	movw	lr, #5000	; 0x1388
  40a534:	9306      	str	r3, [sp, #24]
  40a536:	9305      	str	r3, [sp, #20]
  40a538:	f44f 7761 	mov.w	r7, #900	; 0x384
  40a53c:	2502      	movs	r5, #2
  40a53e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40a542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40a546:	e88d 00b8 	stmia.w	sp, {r3, r4, r5, r7}
  40a54a:	4a08      	ldr	r2, [pc, #32]	; (40a56c <InvnAlgoAGM_SetConfig_r+0xd8>)
  40a54c:	f8cd e010 	str.w	lr, [sp, #16]
  40a550:	4630      	mov	r0, r6
  40a552:	2314      	movs	r3, #20
  40a554:	f002 fcce 	bl	40cef4 <SphericalFxp_SetCustomParamMag>
  40a558:	b009      	add	sp, #36	; 0x24
  40a55a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a55c:	00192b85 	.word	0x00192b85
  40a560:	0147ae14 	.word	0x0147ae14
  40a564:	0007a120 	.word	0x0007a120
  40a568:	0010624e 	.word	0x0010624e
  40a56c:	00666666 	.word	0x00666666

0040a570 <invn_algo_agm_init>:
  40a570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a574:	b087      	sub	sp, #28
  40a576:	2300      	movs	r3, #0
  40a578:	4604      	mov	r4, r0
  40a57a:	4842      	ldr	r0, [pc, #264]	; (40a684 <invn_algo_agm_init+0x114>)
  40a57c:	9301      	str	r3, [sp, #4]
  40a57e:	9300      	str	r3, [sp, #0]
  40a580:	9302      	str	r3, [sp, #8]
  40a582:	9303      	str	r3, [sp, #12]
  40a584:	9304      	str	r3, [sp, #16]
  40a586:	9305      	str	r3, [sp, #20]
  40a588:	f000 fffc 	bl	40b584 <GyroCalFnmFxp_Init>
  40a58c:	483e      	ldr	r0, [pc, #248]	; (40a688 <invn_algo_agm_init+0x118>)
  40a58e:	f002 fcf9 	bl	40cf84 <SphericalFxp_Init>
  40a592:	6863      	ldr	r3, [r4, #4]
  40a594:	4a3d      	ldr	r2, [pc, #244]	; (40a68c <invn_algo_agm_init+0x11c>)
  40a596:	2000      	movs	r0, #0
  40a598:	2100      	movs	r1, #0
  40a59a:	e9c2 0100 	strd	r0, r1, [r2]
  40a59e:	b32b      	cbz	r3, 40a5ec <invn_algo_agm_init+0x7c>
  40a5a0:	f8d3 c000 	ldr.w	ip, [r3]
  40a5a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 40a6a8 <invn_algo_agm_init+0x138>
  40a5a8:	f8d3 e004 	ldr.w	lr, [r3, #4]
  40a5ac:	689d      	ldr	r5, [r3, #8]
  40a5ae:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40a5b2:	2100      	movs	r1, #0
  40a5b4:	4602      	mov	r2, r0
  40a5b6:	460b      	mov	r3, r1
  40a5b8:	fbc9 230c 	smlal	r2, r3, r9, ip
  40a5bc:	4606      	mov	r6, r0
  40a5be:	460f      	mov	r7, r1
  40a5c0:	ea4f 7892 	mov.w	r8, r2, lsr #30
  40a5c4:	fbc9 0105 	smlal	r0, r1, r9, r5
  40a5c8:	fbc9 670e 	smlal	r6, r7, r9, lr
  40a5cc:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  40a5d0:	0fb2      	lsrs	r2, r6, #30
  40a5d2:	0f83      	lsrs	r3, r0, #30
  40a5d4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  40a5d8:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
  40a5dc:	eb08 01cc 	add.w	r1, r8, ip, lsl #3
  40a5e0:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  40a5e4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40a5e8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  40a5ec:	f994 200d 	ldrsb.w	r2, [r4, #13]
  40a5f0:	4b27      	ldr	r3, [pc, #156]	; (40a690 <invn_algo_agm_init+0x120>)
  40a5f2:	9800      	ldr	r0, [sp, #0]
  40a5f4:	6821      	ldr	r1, [r4, #0]
  40a5f6:	f8c3 02f4 	str.w	r0, [r3, #756]	; 0x2f4
  40a5fa:	1e50      	subs	r0, r2, #1
  40a5fc:	b2c0      	uxtb	r0, r0
  40a5fe:	2803      	cmp	r0, #3
  40a600:	bf28      	it	cs
  40a602:	2200      	movcs	r2, #0
  40a604:	9d01      	ldr	r5, [sp, #4]
  40a606:	9802      	ldr	r0, [sp, #8]
  40a608:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  40a60c:	2200      	movs	r2, #0
  40a60e:	f8c3 52f8 	str.w	r5, [r3, #760]	; 0x2f8
  40a612:	f8c3 02fc 	str.w	r0, [r3, #764]	; 0x2fc
  40a616:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
  40a61a:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
  40a61e:	f8c3 27c4 	str.w	r2, [r3, #1988]	; 0x7c4
  40a622:	f8c3 27c8 	str.w	r2, [r3, #1992]	; 0x7c8
  40a626:	b141      	cbz	r1, 40a63a <invn_algo_agm_init+0xca>
  40a628:	680b      	ldr	r3, [r1, #0]
  40a62a:	025b      	lsls	r3, r3, #9
  40a62c:	9303      	str	r3, [sp, #12]
  40a62e:	684b      	ldr	r3, [r1, #4]
  40a630:	025b      	lsls	r3, r3, #9
  40a632:	9304      	str	r3, [sp, #16]
  40a634:	688b      	ldr	r3, [r1, #8]
  40a636:	025b      	lsls	r3, r3, #9
  40a638:	9305      	str	r3, [sp, #20]
  40a63a:	a903      	add	r1, sp, #12
  40a63c:	69a2      	ldr	r2, [r4, #24]
  40a63e:	4815      	ldr	r0, [pc, #84]	; (40a694 <invn_algo_agm_init+0x124>)
  40a640:	f001 ff3e 	bl	40c4c0 <RlsCalibrationFxp_Init>
  40a644:	4914      	ldr	r1, [pc, #80]	; (40a698 <invn_algo_agm_init+0x128>)
  40a646:	f994 200c 	ldrsb.w	r2, [r4, #12]
  40a64a:	f5a1 70aa 	sub.w	r0, r1, #340	; 0x154
  40a64e:	f001 f835 	bl	40b6bc <RlsCalibrationFxp_SetAccuracy>
  40a652:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40a654:	68a1      	ldr	r1, [r4, #8]
  40a656:	4811      	ldr	r0, [pc, #68]	; (40a69c <invn_algo_agm_init+0x12c>)
  40a658:	f001 ff32 	bl	40c4c0 <RlsCalibrationFxp_Init>
  40a65c:	4910      	ldr	r1, [pc, #64]	; (40a6a0 <invn_algo_agm_init+0x130>)
  40a65e:	f994 200e 	ldrsb.w	r2, [r4, #14]
  40a662:	f5a1 70aa 	sub.w	r0, r1, #340	; 0x154
  40a666:	f001 f829 	bl	40b6bc <RlsCalibrationFxp_SetAccuracy>
  40a66a:	2100      	movs	r1, #0
  40a66c:	480d      	ldr	r0, [pc, #52]	; (40a6a4 <invn_algo_agm_init+0x134>)
  40a66e:	f002 fc13 	bl	40ce98 <SphericalFxp_SetProductId>
  40a672:	4621      	mov	r1, r4
  40a674:	4806      	ldr	r0, [pc, #24]	; (40a690 <invn_algo_agm_init+0x120>)
  40a676:	f7ff ff0d 	bl	40a494 <InvnAlgoAGM_SetConfig_r>
  40a67a:	2000      	movs	r0, #0
  40a67c:	b007      	add	sp, #28
  40a67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a682:	bf00      	nop
  40a684:	20004d9c 	.word	0x20004d9c
  40a688:	20004b14 	.word	0x20004b14
  40a68c:	200052b8 	.word	0x200052b8
  40a690:	20004ae0 	.word	0x20004ae0
  40a694:	20004ea0 	.word	0x20004ea0
  40a698:	20004ff4 	.word	0x20004ff4
  40a69c:	200050a0 	.word	0x200050a0
  40a6a0:	200051f4 	.word	0x200051f4
  40a6a4:	20004d4c 	.word	0x20004d4c
  40a6a8:	0c49ba5e 	.word	0x0c49ba5e

0040a6ac <invn_math_quat_mult_fxp>:
  40a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a6ae:	4604      	mov	r4, r0
  40a6b0:	460d      	mov	r5, r1
  40a6b2:	6800      	ldr	r0, [r0, #0]
  40a6b4:	6809      	ldr	r1, [r1, #0]
  40a6b6:	4617      	mov	r7, r2
  40a6b8:	f000 f96c 	bl	40a994 <invn_math_mult_q30_fxp>
  40a6bc:	6869      	ldr	r1, [r5, #4]
  40a6be:	4606      	mov	r6, r0
  40a6c0:	6860      	ldr	r0, [r4, #4]
  40a6c2:	f000 f967 	bl	40a994 <invn_math_mult_q30_fxp>
  40a6c6:	68a9      	ldr	r1, [r5, #8]
  40a6c8:	1a36      	subs	r6, r6, r0
  40a6ca:	68a0      	ldr	r0, [r4, #8]
  40a6cc:	f000 f962 	bl	40a994 <invn_math_mult_q30_fxp>
  40a6d0:	68e9      	ldr	r1, [r5, #12]
  40a6d2:	1a36      	subs	r6, r6, r0
  40a6d4:	68e0      	ldr	r0, [r4, #12]
  40a6d6:	f000 f95d 	bl	40a994 <invn_math_mult_q30_fxp>
  40a6da:	1a30      	subs	r0, r6, r0
  40a6dc:	6038      	str	r0, [r7, #0]
  40a6de:	6869      	ldr	r1, [r5, #4]
  40a6e0:	6820      	ldr	r0, [r4, #0]
  40a6e2:	f000 f957 	bl	40a994 <invn_math_mult_q30_fxp>
  40a6e6:	6829      	ldr	r1, [r5, #0]
  40a6e8:	4606      	mov	r6, r0
  40a6ea:	6860      	ldr	r0, [r4, #4]
  40a6ec:	f000 f952 	bl	40a994 <invn_math_mult_q30_fxp>
  40a6f0:	68e9      	ldr	r1, [r5, #12]
  40a6f2:	4406      	add	r6, r0
  40a6f4:	68a0      	ldr	r0, [r4, #8]
  40a6f6:	f000 f94d 	bl	40a994 <invn_math_mult_q30_fxp>
  40a6fa:	68a9      	ldr	r1, [r5, #8]
  40a6fc:	4406      	add	r6, r0
  40a6fe:	68e0      	ldr	r0, [r4, #12]
  40a700:	f000 f948 	bl	40a994 <invn_math_mult_q30_fxp>
  40a704:	1a30      	subs	r0, r6, r0
  40a706:	6078      	str	r0, [r7, #4]
  40a708:	68a9      	ldr	r1, [r5, #8]
  40a70a:	6820      	ldr	r0, [r4, #0]
  40a70c:	f000 f942 	bl	40a994 <invn_math_mult_q30_fxp>
  40a710:	68e9      	ldr	r1, [r5, #12]
  40a712:	4606      	mov	r6, r0
  40a714:	6860      	ldr	r0, [r4, #4]
  40a716:	f000 f93d 	bl	40a994 <invn_math_mult_q30_fxp>
  40a71a:	6829      	ldr	r1, [r5, #0]
  40a71c:	1a36      	subs	r6, r6, r0
  40a71e:	68a0      	ldr	r0, [r4, #8]
  40a720:	f000 f938 	bl	40a994 <invn_math_mult_q30_fxp>
  40a724:	6869      	ldr	r1, [r5, #4]
  40a726:	4406      	add	r6, r0
  40a728:	68e0      	ldr	r0, [r4, #12]
  40a72a:	f000 f933 	bl	40a994 <invn_math_mult_q30_fxp>
  40a72e:	4430      	add	r0, r6
  40a730:	60b8      	str	r0, [r7, #8]
  40a732:	68e9      	ldr	r1, [r5, #12]
  40a734:	6820      	ldr	r0, [r4, #0]
  40a736:	f000 f92d 	bl	40a994 <invn_math_mult_q30_fxp>
  40a73a:	68a9      	ldr	r1, [r5, #8]
  40a73c:	4606      	mov	r6, r0
  40a73e:	6860      	ldr	r0, [r4, #4]
  40a740:	f000 f928 	bl	40a994 <invn_math_mult_q30_fxp>
  40a744:	6869      	ldr	r1, [r5, #4]
  40a746:	4406      	add	r6, r0
  40a748:	68a0      	ldr	r0, [r4, #8]
  40a74a:	f000 f923 	bl	40a994 <invn_math_mult_q30_fxp>
  40a74e:	6829      	ldr	r1, [r5, #0]
  40a750:	1a36      	subs	r6, r6, r0
  40a752:	68e0      	ldr	r0, [r4, #12]
  40a754:	f000 f91e 	bl	40a994 <invn_math_mult_q30_fxp>
  40a758:	4430      	add	r0, r6
  40a75a:	60f8      	str	r0, [r7, #12]
  40a75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40a75e:	bf00      	nop

0040a760 <invn_math_quat_invert_fxp>:
  40a760:	6803      	ldr	r3, [r0, #0]
  40a762:	600b      	str	r3, [r1, #0]
  40a764:	6843      	ldr	r3, [r0, #4]
  40a766:	425b      	negs	r3, r3
  40a768:	604b      	str	r3, [r1, #4]
  40a76a:	6883      	ldr	r3, [r0, #8]
  40a76c:	425b      	negs	r3, r3
  40a76e:	608b      	str	r3, [r1, #8]
  40a770:	68c3      	ldr	r3, [r0, #12]
  40a772:	425b      	negs	r3, r3
  40a774:	60cb      	str	r3, [r1, #12]
  40a776:	4770      	bx	lr

0040a778 <invn_math_quat_rotate_BtoI_fxp>:
  40a778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a77c:	b08d      	sub	sp, #52	; 0x34
  40a77e:	ad0c      	add	r5, sp, #48	; 0x30
  40a780:	460b      	mov	r3, r1
  40a782:	2700      	movs	r7, #0
  40a784:	4604      	mov	r4, r0
  40a786:	4616      	mov	r6, r2
  40a788:	f845 7d20 	str.w	r7, [r5, #-32]!
  40a78c:	6808      	ldr	r0, [r1, #0]
  40a78e:	689a      	ldr	r2, [r3, #8]
  40a790:	6849      	ldr	r1, [r1, #4]
  40a792:	ab05      	add	r3, sp, #20
  40a794:	c307      	stmia	r3!, {r0, r1, r2}
  40a796:	4629      	mov	r1, r5
  40a798:	4620      	mov	r0, r4
  40a79a:	466a      	mov	r2, sp
  40a79c:	f7ff ff86 	bl	40a6ac <invn_math_quat_mult_fxp>
  40a7a0:	6827      	ldr	r7, [r4, #0]
  40a7a2:	6865      	ldr	r5, [r4, #4]
  40a7a4:	68a2      	ldr	r2, [r4, #8]
  40a7a6:	68e3      	ldr	r3, [r4, #12]
  40a7a8:	9800      	ldr	r0, [sp, #0]
  40a7aa:	426d      	negs	r5, r5
  40a7ac:	4639      	mov	r1, r7
  40a7ae:	f1c2 0800 	rsb	r8, r2, #0
  40a7b2:	f1c3 0900 	rsb	r9, r3, #0
  40a7b6:	f000 f8ed 	bl	40a994 <invn_math_mult_q30_fxp>
  40a7ba:	4629      	mov	r1, r5
  40a7bc:	9801      	ldr	r0, [sp, #4]
  40a7be:	f000 f8e9 	bl	40a994 <invn_math_mult_q30_fxp>
  40a7c2:	4641      	mov	r1, r8
  40a7c4:	9802      	ldr	r0, [sp, #8]
  40a7c6:	f000 f8e5 	bl	40a994 <invn_math_mult_q30_fxp>
  40a7ca:	4649      	mov	r1, r9
  40a7cc:	9803      	ldr	r0, [sp, #12]
  40a7ce:	f000 f8e1 	bl	40a994 <invn_math_mult_q30_fxp>
  40a7d2:	4629      	mov	r1, r5
  40a7d4:	9800      	ldr	r0, [sp, #0]
  40a7d6:	f000 f8dd 	bl	40a994 <invn_math_mult_q30_fxp>
  40a7da:	4639      	mov	r1, r7
  40a7dc:	4604      	mov	r4, r0
  40a7de:	9801      	ldr	r0, [sp, #4]
  40a7e0:	f000 f8d8 	bl	40a994 <invn_math_mult_q30_fxp>
  40a7e4:	4649      	mov	r1, r9
  40a7e6:	4404      	add	r4, r0
  40a7e8:	9802      	ldr	r0, [sp, #8]
  40a7ea:	f000 f8d3 	bl	40a994 <invn_math_mult_q30_fxp>
  40a7ee:	4641      	mov	r1, r8
  40a7f0:	4404      	add	r4, r0
  40a7f2:	9803      	ldr	r0, [sp, #12]
  40a7f4:	f000 f8ce 	bl	40a994 <invn_math_mult_q30_fxp>
  40a7f8:	4641      	mov	r1, r8
  40a7fa:	1a24      	subs	r4, r4, r0
  40a7fc:	9800      	ldr	r0, [sp, #0]
  40a7fe:	9409      	str	r4, [sp, #36]	; 0x24
  40a800:	f000 f8c8 	bl	40a994 <invn_math_mult_q30_fxp>
  40a804:	4649      	mov	r1, r9
  40a806:	4604      	mov	r4, r0
  40a808:	9801      	ldr	r0, [sp, #4]
  40a80a:	f000 f8c3 	bl	40a994 <invn_math_mult_q30_fxp>
  40a80e:	4639      	mov	r1, r7
  40a810:	1a24      	subs	r4, r4, r0
  40a812:	9802      	ldr	r0, [sp, #8]
  40a814:	f000 f8be 	bl	40a994 <invn_math_mult_q30_fxp>
  40a818:	4629      	mov	r1, r5
  40a81a:	4404      	add	r4, r0
  40a81c:	9803      	ldr	r0, [sp, #12]
  40a81e:	f000 f8b9 	bl	40a994 <invn_math_mult_q30_fxp>
  40a822:	4649      	mov	r1, r9
  40a824:	4404      	add	r4, r0
  40a826:	9800      	ldr	r0, [sp, #0]
  40a828:	940a      	str	r4, [sp, #40]	; 0x28
  40a82a:	f000 f8b3 	bl	40a994 <invn_math_mult_q30_fxp>
  40a82e:	4641      	mov	r1, r8
  40a830:	4604      	mov	r4, r0
  40a832:	9801      	ldr	r0, [sp, #4]
  40a834:	f000 f8ae 	bl	40a994 <invn_math_mult_q30_fxp>
  40a838:	4629      	mov	r1, r5
  40a83a:	4404      	add	r4, r0
  40a83c:	9802      	ldr	r0, [sp, #8]
  40a83e:	f000 f8a9 	bl	40a994 <invn_math_mult_q30_fxp>
  40a842:	4639      	mov	r1, r7
  40a844:	1a24      	subs	r4, r4, r0
  40a846:	9803      	ldr	r0, [sp, #12]
  40a848:	f000 f8a4 	bl	40a994 <invn_math_mult_q30_fxp>
  40a84c:	4420      	add	r0, r4
  40a84e:	900b      	str	r0, [sp, #44]	; 0x2c
  40a850:	ab09      	add	r3, sp, #36	; 0x24
  40a852:	cb07      	ldmia	r3!, {r0, r1, r2}
  40a854:	6030      	str	r0, [r6, #0]
  40a856:	6071      	str	r1, [r6, #4]
  40a858:	60b2      	str	r2, [r6, #8]
  40a85a:	b00d      	add	sp, #52	; 0x34
  40a85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0040a860 <invn_math_quat_rotate_ItoB_fxp>:
  40a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a864:	4607      	mov	r7, r0
  40a866:	b08f      	sub	sp, #60	; 0x3c
  40a868:	460c      	mov	r4, r1
  40a86a:	f8d7 a000 	ldr.w	sl, [r7]
  40a86e:	6808      	ldr	r0, [r1, #0]
  40a870:	9201      	str	r2, [sp, #4]
  40a872:	6849      	ldr	r1, [r1, #4]
  40a874:	68a2      	ldr	r2, [r4, #8]
  40a876:	687e      	ldr	r6, [r7, #4]
  40a878:	68bd      	ldr	r5, [r7, #8]
  40a87a:	68fc      	ldr	r4, [r7, #12]
  40a87c:	f10d 0e1c 	add.w	lr, sp, #28
  40a880:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
  40a884:	4650      	mov	r0, sl
  40a886:	2100      	movs	r1, #0
  40a888:	f000 f884 	bl	40a994 <invn_math_mult_q30_fxp>
  40a88c:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40a890:	4276      	negs	r6, r6
  40a892:	4683      	mov	fp, r0
  40a894:	4641      	mov	r1, r8
  40a896:	4630      	mov	r0, r6
  40a898:	f000 f87c 	bl	40a994 <invn_math_mult_q30_fxp>
  40a89c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40a8a0:	426d      	negs	r5, r5
  40a8a2:	ebab 0200 	sub.w	r2, fp, r0
  40a8a6:	4649      	mov	r1, r9
  40a8a8:	4628      	mov	r0, r5
  40a8aa:	9200      	str	r2, [sp, #0]
  40a8ac:	f000 f872 	bl	40a994 <invn_math_mult_q30_fxp>
  40a8b0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40a8b4:	9a00      	ldr	r2, [sp, #0]
  40a8b6:	4264      	negs	r4, r4
  40a8b8:	1a12      	subs	r2, r2, r0
  40a8ba:	4659      	mov	r1, fp
  40a8bc:	4620      	mov	r0, r4
  40a8be:	9200      	str	r2, [sp, #0]
  40a8c0:	f000 f868 	bl	40a994 <invn_math_mult_q30_fxp>
  40a8c4:	9a00      	ldr	r2, [sp, #0]
  40a8c6:	4641      	mov	r1, r8
  40a8c8:	1a12      	subs	r2, r2, r0
  40a8ca:	4650      	mov	r0, sl
  40a8cc:	9202      	str	r2, [sp, #8]
  40a8ce:	f000 f861 	bl	40a994 <invn_math_mult_q30_fxp>
  40a8d2:	2100      	movs	r1, #0
  40a8d4:	9000      	str	r0, [sp, #0]
  40a8d6:	4630      	mov	r0, r6
  40a8d8:	f000 f85c 	bl	40a994 <invn_math_mult_q30_fxp>
  40a8dc:	9a00      	ldr	r2, [sp, #0]
  40a8de:	4659      	mov	r1, fp
  40a8e0:	4402      	add	r2, r0
  40a8e2:	4628      	mov	r0, r5
  40a8e4:	9200      	str	r2, [sp, #0]
  40a8e6:	f000 f855 	bl	40a994 <invn_math_mult_q30_fxp>
  40a8ea:	9a00      	ldr	r2, [sp, #0]
  40a8ec:	4649      	mov	r1, r9
  40a8ee:	4402      	add	r2, r0
  40a8f0:	4620      	mov	r0, r4
  40a8f2:	9200      	str	r2, [sp, #0]
  40a8f4:	f000 f84e 	bl	40a994 <invn_math_mult_q30_fxp>
  40a8f8:	9a00      	ldr	r2, [sp, #0]
  40a8fa:	4649      	mov	r1, r9
  40a8fc:	1a12      	subs	r2, r2, r0
  40a8fe:	4650      	mov	r0, sl
  40a900:	9203      	str	r2, [sp, #12]
  40a902:	f000 f847 	bl	40a994 <invn_math_mult_q30_fxp>
  40a906:	4659      	mov	r1, fp
  40a908:	9000      	str	r0, [sp, #0]
  40a90a:	4630      	mov	r0, r6
  40a90c:	f000 f842 	bl	40a994 <invn_math_mult_q30_fxp>
  40a910:	9a00      	ldr	r2, [sp, #0]
  40a912:	2100      	movs	r1, #0
  40a914:	1a12      	subs	r2, r2, r0
  40a916:	4628      	mov	r0, r5
  40a918:	9200      	str	r2, [sp, #0]
  40a91a:	f000 f83b 	bl	40a994 <invn_math_mult_q30_fxp>
  40a91e:	9a00      	ldr	r2, [sp, #0]
  40a920:	4641      	mov	r1, r8
  40a922:	4402      	add	r2, r0
  40a924:	4620      	mov	r0, r4
  40a926:	9200      	str	r2, [sp, #0]
  40a928:	f000 f834 	bl	40a994 <invn_math_mult_q30_fxp>
  40a92c:	9a00      	ldr	r2, [sp, #0]
  40a92e:	4659      	mov	r1, fp
  40a930:	4402      	add	r2, r0
  40a932:	4650      	mov	r0, sl
  40a934:	9204      	str	r2, [sp, #16]
  40a936:	f000 f82d 	bl	40a994 <invn_math_mult_q30_fxp>
  40a93a:	4649      	mov	r1, r9
  40a93c:	4682      	mov	sl, r0
  40a93e:	4630      	mov	r0, r6
  40a940:	f000 f828 	bl	40a994 <invn_math_mult_q30_fxp>
  40a944:	4641      	mov	r1, r8
  40a946:	4482      	add	sl, r0
  40a948:	4628      	mov	r0, r5
  40a94a:	f000 f823 	bl	40a994 <invn_math_mult_q30_fxp>
  40a94e:	2100      	movs	r1, #0
  40a950:	ebaa 0500 	sub.w	r5, sl, r0
  40a954:	4620      	mov	r0, r4
  40a956:	f000 f81d 	bl	40a994 <invn_math_mult_q30_fxp>
  40a95a:	ac0b      	add	r4, sp, #44	; 0x2c
  40a95c:	4639      	mov	r1, r7
  40a95e:	4405      	add	r5, r0
  40a960:	aa0a      	add	r2, sp, #40	; 0x28
  40a962:	a802      	add	r0, sp, #8
  40a964:	9505      	str	r5, [sp, #20]
  40a966:	f7ff fea1 	bl	40a6ac <invn_math_quat_mult_fxp>
  40a96a:	cc07      	ldmia	r4!, {r0, r1, r2}
  40a96c:	9b01      	ldr	r3, [sp, #4]
  40a96e:	6018      	str	r0, [r3, #0]
  40a970:	6059      	str	r1, [r3, #4]
  40a972:	609a      	str	r2, [r3, #8]
  40a974:	b00f      	add	sp, #60	; 0x3c
  40a976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a97a:	bf00      	nop

0040a97c <invn_math_mult_q15_fxp>:
  40a97c:	fb80 2301 	smull	r2, r3, r0, r1
  40a980:	0bd0      	lsrs	r0, r2, #15
  40a982:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
  40a986:	4770      	bx	lr

0040a988 <invn_math_mult_q29_fxp>:
  40a988:	fb80 2301 	smull	r2, r3, r0, r1
  40a98c:	0f50      	lsrs	r0, r2, #29
  40a98e:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
  40a992:	4770      	bx	lr

0040a994 <invn_math_mult_q30_fxp>:
  40a994:	fb80 2301 	smull	r2, r3, r0, r1
  40a998:	0f90      	lsrs	r0, r2, #30
  40a99a:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
  40a99e:	4770      	bx	lr

0040a9a0 <invn_math_sqrt_q15_fxp>:
  40a9a0:	2800      	cmp	r0, #0
  40a9a2:	dd7d      	ble.n	40aaa0 <invn_math_sqrt_q15_fxp+0x100>
  40a9a4:	f24b 1272 	movw	r2, #45426	; 0xb172
  40a9a8:	4290      	cmp	r0, r2
  40a9aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a9ae:	dd64      	ble.n	40aa7a <invn_math_sqrt_q15_fxp+0xda>
  40a9b0:	4603      	mov	r3, r0
  40a9b2:	2400      	movs	r4, #0
  40a9b4:	105b      	asrs	r3, r3, #1
  40a9b6:	4293      	cmp	r3, r2
  40a9b8:	f104 34ff 	add.w	r4, r4, #4294967295
  40a9bc:	dcfa      	bgt.n	40a9b4 <invn_math_sqrt_q15_fxp+0x14>
  40a9be:	f004 0101 	and.w	r1, r4, #1
  40a9c2:	1062      	asrs	r2, r4, #1
  40a9c4:	105b      	asrs	r3, r3, #1
  40a9c6:	f5c3 4540 	rsb	r5, r3, #49152	; 0xc000
  40a9ca:	fb85 6705 	smull	r6, r7, r5, r5
  40a9ce:	0bf6      	lsrs	r6, r6, #15
  40a9d0:	ea4f 79e3 	mov.w	r9, r3, asr #31
  40a9d4:	ea46 4647 	orr.w	r6, r6, r7, lsl #17
  40a9d8:	13fc      	asrs	r4, r7, #15
  40a9da:	fb06 f709 	mul.w	r7, r6, r9
  40a9de:	fb03 7404 	mla	r4, r3, r4, r7
  40a9e2:	fba6 6703 	umull	r6, r7, r6, r3
  40a9e6:	4427      	add	r7, r4
  40a9e8:	0bf4      	lsrs	r4, r6, #15
  40a9ea:	ea44 4447 	orr.w	r4, r4, r7, lsl #17
  40a9ee:	f5c4 4440 	rsb	r4, r4, #49152	; 0xc000
  40a9f2:	fb84 4505 	smull	r4, r5, r4, r5
  40a9f6:	0be7      	lsrs	r7, r4, #15
  40a9f8:	ea47 4745 	orr.w	r7, r7, r5, lsl #17
  40a9fc:	ea4f 3ee5 	mov.w	lr, r5, asr #15
  40aa00:	fb07 f40e 	mul.w	r4, r7, lr
  40aa04:	fba7 ab07 	umull	sl, fp, r7, r7
  40aa08:	eb0b 0b44 	add.w	fp, fp, r4, lsl #1
  40aa0c:	ea4f 34da 	mov.w	r4, sl, lsr #15
  40aa10:	ea44 444b 	orr.w	r4, r4, fp, lsl #17
  40aa14:	fb04 f509 	mul.w	r5, r4, r9
  40aa18:	ea4f 36eb 	mov.w	r6, fp, asr #15
  40aa1c:	fb03 5606 	mla	r6, r3, r6, r5
  40aa20:	fba4 4503 	umull	r4, r5, r4, r3
  40aa24:	4435      	add	r5, r6
  40aa26:	0be6      	lsrs	r6, r4, #15
  40aa28:	ea46 4645 	orr.w	r6, r6, r5, lsl #17
  40aa2c:	f5c6 4640 	rsb	r6, r6, #49152	; 0xc000
  40aa30:	fb06 f30e 	mul.w	r3, r6, lr
  40aa34:	17f5      	asrs	r5, r6, #31
  40aa36:	fb07 3305 	mla	r3, r7, r5, r3
  40aa3a:	fba6 6707 	umull	r6, r7, r6, r7
  40aa3e:	441f      	add	r7, r3
  40aa40:	0bf4      	lsrs	r4, r6, #15
  40aa42:	ea44 4447 	orr.w	r4, r4, r7, lsl #17
  40aa46:	13fb      	asrs	r3, r7, #15
  40aa48:	b149      	cbz	r1, 40aa5e <invn_math_sqrt_q15_fxp+0xbe>
  40aa4a:	f645 2182 	movw	r1, #23170	; 0x5a82
  40aa4e:	fba4 4501 	umull	r4, r5, r4, r1
  40aa52:	fb01 5503 	mla	r5, r1, r3, r5
  40aa56:	0be4      	lsrs	r4, r4, #15
  40aa58:	3201      	adds	r2, #1
  40aa5a:	ea44 4445 	orr.w	r4, r4, r5, lsl #17
  40aa5e:	2a00      	cmp	r2, #0
  40aa60:	bfba      	itte	lt
  40aa62:	4252      	neglt	r2, r2
  40aa64:	fa44 f202 	asrlt.w	r2, r4, r2
  40aa68:	fa04 f202 	lslge.w	r2, r4, r2
  40aa6c:	fb82 2300 	smull	r2, r3, r2, r0
  40aa70:	0bd0      	lsrs	r0, r2, #15
  40aa72:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
  40aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aa7a:	f645 01b8 	movw	r1, #22712	; 0x58b8
  40aa7e:	4288      	cmp	r0, r1
  40aa80:	dc0a      	bgt.n	40aa98 <invn_math_sqrt_q15_fxp+0xf8>
  40aa82:	4603      	mov	r3, r0
  40aa84:	2200      	movs	r2, #0
  40aa86:	005b      	lsls	r3, r3, #1
  40aa88:	428b      	cmp	r3, r1
  40aa8a:	f102 0201 	add.w	r2, r2, #1
  40aa8e:	ddfa      	ble.n	40aa86 <invn_math_sqrt_q15_fxp+0xe6>
  40aa90:	f002 0101 	and.w	r1, r2, #1
  40aa94:	1052      	asrs	r2, r2, #1
  40aa96:	e795      	b.n	40a9c4 <invn_math_sqrt_q15_fxp+0x24>
  40aa98:	2200      	movs	r2, #0
  40aa9a:	4611      	mov	r1, r2
  40aa9c:	4603      	mov	r3, r0
  40aa9e:	e791      	b.n	40a9c4 <invn_math_sqrt_q15_fxp+0x24>
  40aaa0:	2000      	movs	r0, #0
  40aaa2:	4770      	bx	lr

0040aaa4 <invn_math_inv_sqrt_q30_fxp>:
  40aaa4:	2300      	movs	r3, #0
  40aaa6:	2800      	cmp	r0, #0
  40aaa8:	600b      	str	r3, [r1, #0]
  40aaaa:	dd55      	ble.n	40ab58 <invn_math_inv_sqrt_q30_fxp+0xb4>
  40aaac:	4a32      	ldr	r2, [pc, #200]	; (40ab78 <invn_math_inv_sqrt_q30_fxp+0xd4>)
  40aaae:	4290      	cmp	r0, r2
  40aab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40aab4:	468e      	mov	lr, r1
  40aab6:	dc4a      	bgt.n	40ab4e <invn_math_inv_sqrt_q30_fxp+0xaa>
  40aab8:	4930      	ldr	r1, [pc, #192]	; (40ab7c <invn_math_inv_sqrt_q30_fxp+0xd8>)
  40aaba:	4288      	cmp	r0, r1
  40aabc:	dc08      	bgt.n	40aad0 <invn_math_inv_sqrt_q30_fxp+0x2c>
  40aabe:	2201      	movs	r2, #1
  40aac0:	0040      	lsls	r0, r0, #1
  40aac2:	4288      	cmp	r0, r1
  40aac4:	4613      	mov	r3, r2
  40aac6:	f102 0201 	add.w	r2, r2, #1
  40aaca:	ddf9      	ble.n	40aac0 <invn_math_inv_sqrt_q30_fxp+0x1c>
  40aacc:	f8ce 3000 	str.w	r3, [lr]
  40aad0:	1040      	asrs	r0, r0, #1
  40aad2:	f1c0 46c0 	rsb	r6, r0, #1610612736	; 0x60000000
  40aad6:	fb86 4506 	smull	r4, r5, r6, r6
  40aada:	0fa4      	lsrs	r4, r4, #30
  40aadc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40aae0:	ea4f 79e0 	mov.w	r9, r0, asr #31
  40aae4:	fb04 f109 	mul.w	r1, r4, r9
  40aae8:	17aa      	asrs	r2, r5, #30
  40aaea:	fb00 1202 	mla	r2, r0, r2, r1
  40aaee:	fba4 4500 	umull	r4, r5, r4, r0
  40aaf2:	4415      	add	r5, r2
  40aaf4:	0fa2      	lsrs	r2, r4, #30
  40aaf6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  40aafa:	f1c2 42c0 	rsb	r2, r2, #1610612736	; 0x60000000
  40aafe:	fb82 6706 	smull	r6, r7, r2, r6
  40ab02:	0fb2      	lsrs	r2, r6, #30
  40ab04:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
  40ab08:	17bd      	asrs	r5, r7, #30
  40ab0a:	fb02 f105 	mul.w	r1, r2, r5
  40ab0e:	fba2 6702 	umull	r6, r7, r2, r2
  40ab12:	eb07 0741 	add.w	r7, r7, r1, lsl #1
  40ab16:	0fb1      	lsrs	r1, r6, #30
  40ab18:	ea41 0187 	orr.w	r1, r1, r7, lsl #2
  40ab1c:	fb80 0101 	smull	r0, r1, r0, r1
  40ab20:	0f84      	lsrs	r4, r0, #30
  40ab22:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
  40ab26:	f1c4 44c0 	rsb	r4, r4, #1610612736	; 0x60000000
  40ab2a:	fb04 f505 	mul.w	r5, r4, r5
  40ab2e:	17e1      	asrs	r1, r4, #31
  40ab30:	fb02 5101 	mla	r1, r2, r1, r5
  40ab34:	fba4 4502 	umull	r4, r5, r4, r2
  40ab38:	440d      	add	r5, r1
  40ab3a:	0fa0      	lsrs	r0, r4, #30
  40ab3c:	07da      	lsls	r2, r3, #31
  40ab3e:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
  40ab42:	d40c      	bmi.n	40ab5e <invn_math_inv_sqrt_q30_fxp+0xba>
  40ab44:	105b      	asrs	r3, r3, #1
  40ab46:	f8ce 3000 	str.w	r3, [lr]
  40ab4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40ab4e:	f04f 33ff 	mov.w	r3, #4294967295
  40ab52:	1040      	asrs	r0, r0, #1
  40ab54:	600b      	str	r3, [r1, #0]
  40ab56:	e7bb      	b.n	40aad0 <invn_math_inv_sqrt_q30_fxp+0x2c>
  40ab58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40ab5c:	4770      	bx	lr
  40ab5e:	4a08      	ldr	r2, [pc, #32]	; (40ab80 <invn_math_inv_sqrt_q30_fxp+0xdc>)
  40ab60:	105b      	asrs	r3, r3, #1
  40ab62:	fb80 0102 	smull	r0, r1, r0, r2
  40ab66:	3301      	adds	r3, #1
  40ab68:	0f80      	lsrs	r0, r0, #30
  40ab6a:	f8ce 3000 	str.w	r3, [lr]
  40ab6e:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40ab72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40ab76:	bf00      	nop
  40ab78:	58b90bfc 	.word	0x58b90bfc
  40ab7c:	2c5c85fd 	.word	0x2c5c85fd
  40ab80:	2d413ccd 	.word	0x2d413ccd

0040ab84 <invn_math_inverse_q30_fxp>:
  40ab84:	2800      	cmp	r0, #0
  40ab86:	460a      	mov	r2, r1
  40ab88:	d05f      	beq.n	40ac4a <invn_math_inverse_q30_fxp+0xc6>
  40ab8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ab8e:	db72      	blt.n	40ac76 <invn_math_inverse_q30_fxp+0xf2>
  40ab90:	4943      	ldr	r1, [pc, #268]	; (40aca0 <invn_math_inverse_q30_fxp+0x11c>)
  40ab92:	2300      	movs	r3, #0
  40ab94:	4288      	cmp	r0, r1
  40ab96:	f04f 0400 	mov.w	r4, #0
  40ab9a:	6013      	str	r3, [r2, #0]
  40ab9c:	dc76      	bgt.n	40ac8c <invn_math_inverse_q30_fxp+0x108>
  40ab9e:	4d41      	ldr	r5, [pc, #260]	; (40aca4 <invn_math_inverse_q30_fxp+0x120>)
  40aba0:	42a8      	cmp	r0, r5
  40aba2:	dc07      	bgt.n	40abb4 <invn_math_inverse_q30_fxp+0x30>
  40aba4:	2101      	movs	r1, #1
  40aba6:	0040      	lsls	r0, r0, #1
  40aba8:	42a8      	cmp	r0, r5
  40abaa:	460b      	mov	r3, r1
  40abac:	f101 0101 	add.w	r1, r1, #1
  40abb0:	ddf9      	ble.n	40aba6 <invn_math_inverse_q30_fxp+0x22>
  40abb2:	6013      	str	r3, [r2, #0]
  40abb4:	1040      	asrs	r0, r0, #1
  40abb6:	f1c0 46c0 	rsb	r6, r0, #1610612736	; 0x60000000
  40abba:	fb86 8906 	smull	r8, r9, r6, r6
  40abbe:	ea4f 7898 	mov.w	r8, r8, lsr #30
  40abc2:	ea48 0889 	orr.w	r8, r8, r9, lsl #2
  40abc6:	ea4f 7be0 	mov.w	fp, r0, asr #31
  40abca:	fb08 f50b 	mul.w	r5, r8, fp
  40abce:	ea4f 71a9 	mov.w	r1, r9, asr #30
  40abd2:	fb00 5101 	mla	r1, r0, r1, r5
  40abd6:	fba8 8900 	umull	r8, r9, r8, r0
  40abda:	4489      	add	r9, r1
  40abdc:	ea4f 7198 	mov.w	r1, r8, lsr #30
  40abe0:	ea41 0189 	orr.w	r1, r1, r9, lsl #2
  40abe4:	f1c1 41c0 	rsb	r1, r1, #1610612736	; 0x60000000
  40abe8:	fb81 6706 	smull	r6, r7, r1, r6
  40abec:	0fb5      	lsrs	r5, r6, #30
  40abee:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
  40abf2:	ea4f 7ea7 	mov.w	lr, r7, asr #30
  40abf6:	fb05 f10e 	mul.w	r1, r5, lr
  40abfa:	fba5 6705 	umull	r6, r7, r5, r5
  40abfe:	eb07 0741 	add.w	r7, r7, r1, lsl #1
  40ac02:	0fb1      	lsrs	r1, r6, #30
  40ac04:	ea41 0187 	orr.w	r1, r1, r7, lsl #2
  40ac08:	fb80 0101 	smull	r0, r1, r0, r1
  40ac0c:	0f80      	lsrs	r0, r0, #30
  40ac0e:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40ac12:	f1c0 40c0 	rsb	r0, r0, #1610612736	; 0x60000000
  40ac16:	fb00 fe0e 	mul.w	lr, r0, lr
  40ac1a:	17c7      	asrs	r7, r0, #31
  40ac1c:	fb05 ee07 	mla	lr, r5, r7, lr
  40ac20:	fba0 0105 	umull	r0, r1, r0, r5
  40ac24:	4471      	add	r1, lr
  40ac26:	0f80      	lsrs	r0, r0, #30
  40ac28:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40ac2c:	07d9      	lsls	r1, r3, #31
  40ac2e:	d40e      	bmi.n	40ac4e <invn_math_inverse_q30_fxp+0xca>
  40ac30:	491d      	ldr	r1, [pc, #116]	; (40aca8 <invn_math_inverse_q30_fxp+0x124>)
  40ac32:	105b      	asrs	r3, r3, #1
  40ac34:	4288      	cmp	r0, r1
  40ac36:	6013      	str	r3, [r2, #0]
  40ac38:	bfc8      	it	gt
  40ac3a:	f06f 4000 	mvngt.w	r0, #2147483648	; 0x80000000
  40ac3e:	dd0e      	ble.n	40ac5e <invn_math_inverse_q30_fxp+0xda>
  40ac40:	005b      	lsls	r3, r3, #1
  40ac42:	6013      	str	r3, [r2, #0]
  40ac44:	b9a4      	cbnz	r4, 40ac70 <invn_math_inverse_q30_fxp+0xec>
  40ac46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ac4a:	6008      	str	r0, [r1, #0]
  40ac4c:	4770      	bx	lr
  40ac4e:	4917      	ldr	r1, [pc, #92]	; (40acac <invn_math_inverse_q30_fxp+0x128>)
  40ac50:	fb80 0101 	smull	r0, r1, r0, r1
  40ac54:	105b      	asrs	r3, r3, #1
  40ac56:	0f80      	lsrs	r0, r0, #30
  40ac58:	3301      	adds	r3, #1
  40ac5a:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40ac5e:	fb80 0100 	smull	r0, r1, r0, r0
  40ac62:	0f80      	lsrs	r0, r0, #30
  40ac64:	005b      	lsls	r3, r3, #1
  40ac66:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
  40ac6a:	6013      	str	r3, [r2, #0]
  40ac6c:	2c00      	cmp	r4, #0
  40ac6e:	d0ea      	beq.n	40ac46 <invn_math_inverse_q30_fxp+0xc2>
  40ac70:	4240      	negs	r0, r0
  40ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ac76:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
  40ac7a:	d00c      	beq.n	40ac96 <invn_math_inverse_q30_fxp+0x112>
  40ac7c:	4908      	ldr	r1, [pc, #32]	; (40aca0 <invn_math_inverse_q30_fxp+0x11c>)
  40ac7e:	4240      	negs	r0, r0
  40ac80:	2300      	movs	r3, #0
  40ac82:	4288      	cmp	r0, r1
  40ac84:	f04f 0401 	mov.w	r4, #1
  40ac88:	6013      	str	r3, [r2, #0]
  40ac8a:	dd88      	ble.n	40ab9e <invn_math_inverse_q30_fxp+0x1a>
  40ac8c:	1040      	asrs	r0, r0, #1
  40ac8e:	f04f 33ff 	mov.w	r3, #4294967295
  40ac92:	6013      	str	r3, [r2, #0]
  40ac94:	e78e      	b.n	40abb4 <invn_math_inverse_q30_fxp+0x30>
  40ac96:	2401      	movs	r4, #1
  40ac98:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
  40ac9c:	e7f7      	b.n	40ac8e <invn_math_inverse_q30_fxp+0x10a>
  40ac9e:	bf00      	nop
  40aca0:	58b90bfc 	.word	0x58b90bfc
  40aca4:	2c5c85fd 	.word	0x2c5c85fd
  40aca8:	5a827999 	.word	0x5a827999
  40acac:	2d413ccd 	.word	0x2d413ccd

0040acb0 <invn_math_divide_q30_fxp>:
  40acb0:	2300      	movs	r3, #0
  40acb2:	6013      	str	r3, [r2, #0]
  40acb4:	2800      	cmp	r0, #0
  40acb6:	f000 808f 	beq.w	40add8 <invn_math_divide_q30_fxp+0x128>
  40acba:	2900      	cmp	r1, #0
  40acbc:	f000 8088 	beq.w	40add0 <invn_math_divide_q30_fxp+0x120>
  40acc0:	4298      	cmp	r0, r3
  40acc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40acc6:	f2c0 8091 	blt.w	40adec <invn_math_divide_q30_fxp+0x13c>
  40acca:	2900      	cmp	r1, #0
  40accc:	f2c0 8085 	blt.w	40adda <invn_math_divide_q30_fxp+0x12a>
  40acd0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  40acd4:	d07e      	beq.n	40add4 <invn_math_divide_q30_fxp+0x124>
  40acd6:	2600      	movs	r6, #0
  40acd8:	4b5a      	ldr	r3, [pc, #360]	; (40ae44 <invn_math_divide_q30_fxp+0x194>)
  40acda:	4299      	cmp	r1, r3
  40acdc:	f300 8093 	bgt.w	40ae06 <invn_math_divide_q30_fxp+0x156>
  40ace0:	4d59      	ldr	r5, [pc, #356]	; (40ae48 <invn_math_divide_q30_fxp+0x198>)
  40ace2:	42a9      	cmp	r1, r5
  40ace4:	f300 80ab 	bgt.w	40ae3e <invn_math_divide_q30_fxp+0x18e>
  40ace8:	2401      	movs	r4, #1
  40acea:	0049      	lsls	r1, r1, #1
  40acec:	42a9      	cmp	r1, r5
  40acee:	4623      	mov	r3, r4
  40acf0:	f104 0401 	add.w	r4, r4, #1
  40acf4:	ddf9      	ble.n	40acea <invn_math_divide_q30_fxp+0x3a>
  40acf6:	6013      	str	r3, [r2, #0]
  40acf8:	1049      	asrs	r1, r1, #1
  40acfa:	f1c1 47c0 	rsb	r7, r1, #1610612736	; 0x60000000
  40acfe:	fb87 4507 	smull	r4, r5, r7, r7
  40ad02:	0fa4      	lsrs	r4, r4, #30
  40ad04:	ea4f 79e1 	mov.w	r9, r1, asr #31
  40ad08:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40ad0c:	ea4f 7ea5 	mov.w	lr, r5, asr #30
  40ad10:	fb04 f509 	mul.w	r5, r4, r9
  40ad14:	fb01 5e0e 	mla	lr, r1, lr, r5
  40ad18:	fba4 4501 	umull	r4, r5, r4, r1
  40ad1c:	4475      	add	r5, lr
  40ad1e:	0fa4      	lsrs	r4, r4, #30
  40ad20:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40ad24:	f1c4 44c0 	rsb	r4, r4, #1610612736	; 0x60000000
  40ad28:	fb84 4507 	smull	r4, r5, r4, r7
  40ad2c:	0fa7      	lsrs	r7, r4, #30
  40ad2e:	ea47 0785 	orr.w	r7, r7, r5, lsl #2
  40ad32:	ea4f 7ea5 	mov.w	lr, r5, asr #30
  40ad36:	fb07 fc0e 	mul.w	ip, r7, lr
  40ad3a:	fba7 4507 	umull	r4, r5, r7, r7
  40ad3e:	eb05 054c 	add.w	r5, r5, ip, lsl #1
  40ad42:	0fa4      	lsrs	r4, r4, #30
  40ad44:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40ad48:	fb81 4504 	smull	r4, r5, r1, r4
  40ad4c:	0fa4      	lsrs	r4, r4, #30
  40ad4e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40ad52:	f1c4 44c0 	rsb	r4, r4, #1610612736	; 0x60000000
  40ad56:	fb04 f10e 	mul.w	r1, r4, lr
  40ad5a:	ea4f 79e4 	mov.w	r9, r4, asr #31
  40ad5e:	fb07 1109 	mla	r1, r7, r9, r1
  40ad62:	fba4 4507 	umull	r4, r5, r4, r7
  40ad66:	440d      	add	r5, r1
  40ad68:	ea4f 7894 	mov.w	r8, r4, lsr #30
  40ad6c:	07d9      	lsls	r1, r3, #31
  40ad6e:	ea48 0885 	orr.w	r8, r8, r5, lsl #2
  40ad72:	d44c      	bmi.n	40ae0e <invn_math_divide_q30_fxp+0x15e>
  40ad74:	4935      	ldr	r1, [pc, #212]	; (40ae4c <invn_math_divide_q30_fxp+0x19c>)
  40ad76:	105b      	asrs	r3, r3, #1
  40ad78:	4588      	cmp	r8, r1
  40ad7a:	6013      	str	r3, [r2, #0]
  40ad7c:	dd50      	ble.n	40ae20 <invn_math_divide_q30_fxp+0x170>
  40ad7e:	005b      	lsls	r3, r3, #1
  40ad80:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40ad84:	2500      	movs	r5, #0
  40ad86:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  40ad8a:	6013      	str	r3, [r2, #0]
  40ad8c:	dc07      	bgt.n	40ad9e <invn_math_divide_q30_fxp+0xee>
  40ad8e:	1e59      	subs	r1, r3, #1
  40ad90:	0040      	lsls	r0, r0, #1
  40ad92:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  40ad96:	460b      	mov	r3, r1
  40ad98:	f101 31ff 	add.w	r1, r1, #4294967295
  40ad9c:	ddf8      	ble.n	40ad90 <invn_math_divide_q30_fxp+0xe0>
  40ad9e:	3301      	adds	r3, #1
  40ada0:	1040      	asrs	r0, r0, #1
  40ada2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  40ada6:	4619      	mov	r1, r3
  40ada8:	f103 0301 	add.w	r3, r3, #1
  40adac:	dcf8      	bgt.n	40ada0 <invn_math_divide_q30_fxp+0xf0>
  40adae:	fb00 f305 	mul.w	r3, r0, r5
  40adb2:	ea4f 79e0 	mov.w	r9, r0, asr #31
  40adb6:	fb04 3309 	mla	r3, r4, r9, r3
  40adba:	fba0 4504 	umull	r4, r5, r0, r4
  40adbe:	441d      	add	r5, r3
  40adc0:	0fa0      	lsrs	r0, r4, #30
  40adc2:	6011      	str	r1, [r2, #0]
  40adc4:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
  40adc8:	b126      	cbz	r6, 40add4 <invn_math_divide_q30_fxp+0x124>
  40adca:	4240      	negs	r0, r0
  40adcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40add0:	4608      	mov	r0, r1
  40add2:	4770      	bx	lr
  40add4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40add8:	4770      	bx	lr
  40adda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40adde:	d028      	beq.n	40ae32 <invn_math_divide_q30_fxp+0x182>
  40ade0:	4249      	negs	r1, r1
  40ade2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  40ade6:	d0f0      	beq.n	40adca <invn_math_divide_q30_fxp+0x11a>
  40ade8:	2601      	movs	r6, #1
  40adea:	e775      	b.n	40acd8 <invn_math_divide_q30_fxp+0x28>
  40adec:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
  40adf0:	bf14      	ite	ne
  40adf2:	4240      	negne	r0, r0
  40adf4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40adf8:	2900      	cmp	r1, #0
  40adfa:	dcf2      	bgt.n	40ade2 <invn_math_divide_q30_fxp+0x132>
  40adfc:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40ae00:	d01b      	beq.n	40ae3a <invn_math_divide_q30_fxp+0x18a>
  40ae02:	4249      	negs	r1, r1
  40ae04:	e764      	b.n	40acd0 <invn_math_divide_q30_fxp+0x20>
  40ae06:	1049      	asrs	r1, r1, #1
  40ae08:	f04f 33ff 	mov.w	r3, #4294967295
  40ae0c:	e773      	b.n	40acf6 <invn_math_divide_q30_fxp+0x46>
  40ae0e:	4910      	ldr	r1, [pc, #64]	; (40ae50 <invn_math_divide_q30_fxp+0x1a0>)
  40ae10:	fb88 8901 	smull	r8, r9, r8, r1
  40ae14:	105b      	asrs	r3, r3, #1
  40ae16:	ea4f 7898 	mov.w	r8, r8, lsr #30
  40ae1a:	3301      	adds	r3, #1
  40ae1c:	ea48 0889 	orr.w	r8, r8, r9, lsl #2
  40ae20:	fb88 8908 	smull	r8, r9, r8, r8
  40ae24:	ea4f 7498 	mov.w	r4, r8, lsr #30
  40ae28:	ea44 0489 	orr.w	r4, r4, r9, lsl #2
  40ae2c:	005b      	lsls	r3, r3, #1
  40ae2e:	17e5      	asrs	r5, r4, #31
  40ae30:	e7a9      	b.n	40ad86 <invn_math_divide_q30_fxp+0xd6>
  40ae32:	2601      	movs	r6, #1
  40ae34:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
  40ae38:	e7e6      	b.n	40ae08 <invn_math_divide_q30_fxp+0x158>
  40ae3a:	2600      	movs	r6, #0
  40ae3c:	e7fa      	b.n	40ae34 <invn_math_divide_q30_fxp+0x184>
  40ae3e:	2300      	movs	r3, #0
  40ae40:	e75a      	b.n	40acf8 <invn_math_divide_q30_fxp+0x48>
  40ae42:	bf00      	nop
  40ae44:	58b90bfc 	.word	0x58b90bfc
  40ae48:	2c5c85fd 	.word	0x2c5c85fd
  40ae4c:	5a827999 	.word	0x5a827999
  40ae50:	2d413ccd 	.word	0x2d413ccd

0040ae54 <invn_integrate_gyro_fast_trigo_fxp>:
  40ae54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ae58:	6846      	ldr	r6, [r0, #4]
  40ae5a:	6807      	ldr	r7, [r0, #0]
  40ae5c:	460c      	mov	r4, r1
  40ae5e:	fb86 2306 	smull	r2, r3, r6, r6
  40ae62:	6881      	ldr	r1, [r0, #8]
  40ae64:	fbc7 2307 	smlal	r2, r3, r7, r7
  40ae68:	fbc1 2301 	smlal	r2, r3, r1, r1
  40ae6c:	4605      	mov	r5, r0
  40ae6e:	0f90      	lsrs	r0, r2, #30
  40ae70:	ea50 0083 	orrs.w	r0, r0, r3, lsl #2
  40ae74:	b08a      	sub	sp, #40	; 0x28
  40ae76:	d41c      	bmi.n	40aeb2 <invn_integrate_gyro_fast_trigo_fxp+0x5e>
  40ae78:	4b5e      	ldr	r3, [pc, #376]	; (40aff4 <invn_integrate_gyro_fast_trigo_fxp+0x1a0>)
  40ae7a:	4298      	cmp	r0, r3
  40ae7c:	f300 80af 	bgt.w	40afde <invn_integrate_gyro_fast_trigo_fxp+0x18a>
  40ae80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40ae84:	9703      	str	r7, [sp, #12]
  40ae86:	9604      	str	r6, [sp, #16]
  40ae88:	9105      	str	r1, [sp, #20]
  40ae8a:	9302      	str	r3, [sp, #8]
  40ae8c:	e894 0044 	ldmia.w	r4, {r2, r6}
  40ae90:	68e3      	ldr	r3, [r4, #12]
  40ae92:	68a5      	ldr	r5, [r4, #8]
  40ae94:	9206      	str	r2, [sp, #24]
  40ae96:	a902      	add	r1, sp, #8
  40ae98:	4622      	mov	r2, r4
  40ae9a:	a806      	add	r0, sp, #24
  40ae9c:	9309      	str	r3, [sp, #36]	; 0x24
  40ae9e:	9607      	str	r6, [sp, #28]
  40aea0:	9508      	str	r5, [sp, #32]
  40aea2:	f7ff fc03 	bl	40a6ac <invn_math_quat_mult_fxp>
  40aea6:	4620      	mov	r0, r4
  40aea8:	f002 fb8e 	bl	40d5c8 <invn_normalize_quaternion_q30>
  40aeac:	b00a      	add	sp, #40	; 0x28
  40aeae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40aeb2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  40aeb6:	2700      	movs	r7, #0
  40aeb8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40aebc:	a901      	add	r1, sp, #4
  40aebe:	f7ff fdf1 	bl	40aaa4 <invn_math_inv_sqrt_q30_fxp>
  40aec2:	f8dd e004 	ldr.w	lr, [sp, #4]
  40aec6:	6829      	ldr	r1, [r5, #0]
  40aec8:	f1ce 031e 	rsb	r3, lr, #30
  40aecc:	fb80 8901 	smull	r8, r9, r0, r1
  40aed0:	f1c3 0220 	rsb	r2, r3, #32
  40aed4:	f1b3 0120 	subs.w	r1, r3, #32
  40aed8:	fa09 fa02 	lsl.w	sl, r9, r2
  40aedc:	fa28 fc03 	lsr.w	ip, r8, r3
  40aee0:	ea4c 0c0a 	orr.w	ip, ip, sl
  40aee4:	bf5c      	itt	pl
  40aee6:	fa49 f101 	asrpl.w	r1, r9, r1
  40aeea:	ea4c 0c01 	orrpl.w	ip, ip, r1
  40aeee:	6869      	ldr	r1, [r5, #4]
  40aef0:	f8cd c00c 	str.w	ip, [sp, #12]
  40aef4:	fb80 8901 	smull	r8, r9, r0, r1
  40aef8:	fa28 f103 	lsr.w	r1, r8, r3
  40aefc:	fa09 fa02 	lsl.w	sl, r9, r2
  40af00:	f1b3 0c20 	subs.w	ip, r3, #32
  40af04:	68ad      	ldr	r5, [r5, #8]
  40af06:	ea41 010a 	orr.w	r1, r1, sl
  40af0a:	bf5c      	itt	pl
  40af0c:	fa49 fc0c 	asrpl.w	ip, r9, ip
  40af10:	ea41 010c 	orrpl.w	r1, r1, ip
  40af14:	fb80 8905 	smull	r8, r9, r0, r5
  40af18:	fa09 f202 	lsl.w	r2, r9, r2
  40af1c:	9104      	str	r1, [sp, #16]
  40af1e:	fa28 f103 	lsr.w	r1, r8, r3
  40af22:	3b20      	subs	r3, #32
  40af24:	ea41 0102 	orr.w	r1, r1, r2
  40af28:	bf5c      	itt	pl
  40af2a:	fa49 f303 	asrpl.w	r3, r9, r3
  40af2e:	4319      	orrpl	r1, r3
  40af30:	fb00 f207 	mul.w	r2, r0, r7
  40af34:	17c3      	asrs	r3, r0, #31
  40af36:	f1ce 0e1f 	rsb	lr, lr, #31
  40af3a:	fb06 2303 	mla	r3, r6, r3, r2
  40af3e:	fba0 6706 	umull	r6, r7, r0, r6
  40af42:	441f      	add	r7, r3
  40af44:	f1ce 0320 	rsb	r3, lr, #32
  40af48:	fa26 f50e 	lsr.w	r5, r6, lr
  40af4c:	fa07 f303 	lsl.w	r3, r7, r3
  40af50:	f1be 0e20 	subs.w	lr, lr, #32
  40af54:	ea45 0503 	orr.w	r5, r5, r3
  40af58:	bf5c      	itt	pl
  40af5a:	fa47 fe0e 	asrpl.w	lr, r7, lr
  40af5e:	ea45 050e 	orrpl.w	r5, r5, lr
  40af62:	f1b5 7f00 	cmp.w	r5, #33554432	; 0x2000000
  40af66:	9105      	str	r1, [sp, #20]
  40af68:	462e      	mov	r6, r5
  40af6a:	dd3b      	ble.n	40afe4 <invn_integrate_gyro_fast_trigo_fxp+0x190>
  40af6c:	2501      	movs	r5, #1
  40af6e:	1076      	asrs	r6, r6, #1
  40af70:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
  40af74:	f105 0501 	add.w	r5, r5, #1
  40af78:	dcf9      	bgt.n	40af6e <invn_integrate_gyro_fast_trigo_fxp+0x11a>
  40af7a:	4630      	mov	r0, r6
  40af7c:	f002 fa76 	bl	40d46c <invn_math_cos_q30_fxp>
  40af80:	4607      	mov	r7, r0
  40af82:	4630      	mov	r0, r6
  40af84:	f002 fa46 	bl	40d414 <invn_math_sin_q30_fxp>
  40af88:	fb87 8907 	smull	r8, r9, r7, r7
  40af8c:	fb80 2300 	smull	r2, r3, r0, r0
  40af90:	ebb8 0202 	subs.w	r2, r8, r2
  40af94:	fb87 0100 	smull	r0, r1, r7, r0
  40af98:	eb69 0303 	sbc.w	r3, r9, r3
  40af9c:	0f96      	lsrs	r6, r2, #30
  40af9e:	3d01      	subs	r5, #1
  40afa0:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
  40afa4:	0f40      	lsrs	r0, r0, #29
  40afa6:	2d01      	cmp	r5, #1
  40afa8:	4637      	mov	r7, r6
  40afaa:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
  40afae:	d1eb      	bne.n	40af88 <invn_integrate_gyro_fast_trigo_fxp+0x134>
  40afb0:	9b03      	ldr	r3, [sp, #12]
  40afb2:	9a04      	ldr	r2, [sp, #16]
  40afb4:	9905      	ldr	r1, [sp, #20]
  40afb6:	9602      	str	r6, [sp, #8]
  40afb8:	fb80 6703 	smull	r6, r7, r0, r3
  40afbc:	fb80 2302 	smull	r2, r3, r0, r2
  40afc0:	fb80 0101 	smull	r0, r1, r0, r1
  40afc4:	0f95      	lsrs	r5, r2, #30
  40afc6:	0fb6      	lsrs	r6, r6, #30
  40afc8:	0f82      	lsrs	r2, r0, #30
  40afca:	ea46 0687 	orr.w	r6, r6, r7, lsl #2
  40afce:	ea45 0583 	orr.w	r5, r5, r3, lsl #2
  40afd2:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
  40afd6:	9603      	str	r6, [sp, #12]
  40afd8:	9504      	str	r5, [sp, #16]
  40afda:	9205      	str	r2, [sp, #20]
  40afdc:	e756      	b.n	40ae8c <invn_integrate_gyro_fast_trigo_fxp+0x38>
  40afde:	4606      	mov	r6, r0
  40afe0:	17c7      	asrs	r7, r0, #31
  40afe2:	e76b      	b.n	40aebc <invn_integrate_gyro_fast_trigo_fxp+0x68>
  40afe4:	4628      	mov	r0, r5
  40afe6:	f002 fa41 	bl	40d46c <invn_math_cos_q30_fxp>
  40afea:	4606      	mov	r6, r0
  40afec:	4628      	mov	r0, r5
  40afee:	f002 fa11 	bl	40d414 <invn_math_sin_q30_fxp>
  40aff2:	e7dd      	b.n	40afb0 <invn_integrate_gyro_fast_trigo_fxp+0x15c>
  40aff4:	0028f5c1 	.word	0x0028f5c1

0040aff8 <invn_angle_from_mag_correction_fxp>:
  40aff8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40affa:	460c      	mov	r4, r1
  40affc:	b08b      	sub	sp, #44	; 0x2c
  40affe:	4607      	mov	r7, r0
  40b000:	68c9      	ldr	r1, [r1, #12]
  40b002:	6860      	ldr	r0, [r4, #4]
  40b004:	4616      	mov	r6, r2
  40b006:	f7ff fcbf 	bl	40a988 <invn_math_mult_q29_fxp>
  40b00a:	6821      	ldr	r1, [r4, #0]
  40b00c:	4605      	mov	r5, r0
  40b00e:	68a0      	ldr	r0, [r4, #8]
  40b010:	f7ff fcba 	bl	40a988 <invn_math_mult_q29_fxp>
  40b014:	68e1      	ldr	r1, [r4, #12]
  40b016:	1a2d      	subs	r5, r5, r0
  40b018:	68a0      	ldr	r0, [r4, #8]
  40b01a:	9501      	str	r5, [sp, #4]
  40b01c:	f7ff fcb4 	bl	40a988 <invn_math_mult_q29_fxp>
  40b020:	6821      	ldr	r1, [r4, #0]
  40b022:	4605      	mov	r5, r0
  40b024:	6860      	ldr	r0, [r4, #4]
  40b026:	f7ff fcaf 	bl	40a988 <invn_math_mult_q29_fxp>
  40b02a:	68e1      	ldr	r1, [r4, #12]
  40b02c:	4405      	add	r5, r0
  40b02e:	4608      	mov	r0, r1
  40b030:	9502      	str	r5, [sp, #8]
  40b032:	f7ff fca9 	bl	40a988 <invn_math_mult_q29_fxp>
  40b036:	6821      	ldr	r1, [r4, #0]
  40b038:	4605      	mov	r5, r0
  40b03a:	4608      	mov	r0, r1
  40b03c:	f7ff fca4 	bl	40a988 <invn_math_mult_q29_fxp>
  40b040:	4405      	add	r5, r0
  40b042:	aa07      	add	r2, sp, #28
  40b044:	4639      	mov	r1, r7
  40b046:	a801      	add	r0, sp, #4
  40b048:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
  40b04c:	9503      	str	r5, [sp, #12]
  40b04e:	f002 fa41 	bl	40d4d4 <invn_cross_product_q30>
  40b052:	a807      	add	r0, sp, #28
  40b054:	a904      	add	r1, sp, #16
  40b056:	f002 fa6d 	bl	40d534 <invn_normalize_vector_q30>
  40b05a:	6861      	ldr	r1, [r4, #4]
  40b05c:	4608      	mov	r0, r1
  40b05e:	f7ff fc93 	bl	40a988 <invn_math_mult_q29_fxp>
  40b062:	6821      	ldr	r1, [r4, #0]
  40b064:	4605      	mov	r5, r0
  40b066:	4608      	mov	r0, r1
  40b068:	f7ff fc8e 	bl	40a988 <invn_math_mult_q29_fxp>
  40b06c:	4405      	add	r5, r0
  40b06e:	6821      	ldr	r1, [r4, #0]
  40b070:	68e0      	ldr	r0, [r4, #12]
  40b072:	f1c5 4580 	rsb	r5, r5, #1073741824	; 0x40000000
  40b076:	9501      	str	r5, [sp, #4]
  40b078:	f7ff fc86 	bl	40a988 <invn_math_mult_q29_fxp>
  40b07c:	68a1      	ldr	r1, [r4, #8]
  40b07e:	4605      	mov	r5, r0
  40b080:	6860      	ldr	r0, [r4, #4]
  40b082:	f7ff fc81 	bl	40a988 <invn_math_mult_q29_fxp>
  40b086:	68e1      	ldr	r1, [r4, #12]
  40b088:	1a2d      	subs	r5, r5, r0
  40b08a:	6860      	ldr	r0, [r4, #4]
  40b08c:	9502      	str	r5, [sp, #8]
  40b08e:	f7ff fc7b 	bl	40a988 <invn_math_mult_q29_fxp>
  40b092:	6821      	ldr	r1, [r4, #0]
  40b094:	4605      	mov	r5, r0
  40b096:	68a0      	ldr	r0, [r4, #8]
  40b098:	f7ff fc76 	bl	40a988 <invn_math_mult_q29_fxp>
  40b09c:	4405      	add	r5, r0
  40b09e:	426d      	negs	r5, r5
  40b0a0:	4632      	mov	r2, r6
  40b0a2:	a901      	add	r1, sp, #4
  40b0a4:	a804      	add	r0, sp, #16
  40b0a6:	9503      	str	r5, [sp, #12]
  40b0a8:	f002 fa14 	bl	40d4d4 <invn_cross_product_q30>
  40b0ac:	b00b      	add	sp, #44	; 0x2c
  40b0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040b0b0 <invn_angle_from_acc_correction_fxp>:
  40b0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b0b2:	460c      	mov	r4, r1
  40b0b4:	b087      	sub	sp, #28
  40b0b6:	4606      	mov	r6, r0
  40b0b8:	68c9      	ldr	r1, [r1, #12]
  40b0ba:	6860      	ldr	r0, [r4, #4]
  40b0bc:	4617      	mov	r7, r2
  40b0be:	f7ff fc63 	bl	40a988 <invn_math_mult_q29_fxp>
  40b0c2:	6821      	ldr	r1, [r4, #0]
  40b0c4:	4605      	mov	r5, r0
  40b0c6:	68a0      	ldr	r0, [r4, #8]
  40b0c8:	f7ff fc5e 	bl	40a988 <invn_math_mult_q29_fxp>
  40b0cc:	68e1      	ldr	r1, [r4, #12]
  40b0ce:	1a2d      	subs	r5, r5, r0
  40b0d0:	68a0      	ldr	r0, [r4, #8]
  40b0d2:	9500      	str	r5, [sp, #0]
  40b0d4:	f7ff fc58 	bl	40a988 <invn_math_mult_q29_fxp>
  40b0d8:	6821      	ldr	r1, [r4, #0]
  40b0da:	4605      	mov	r5, r0
  40b0dc:	6860      	ldr	r0, [r4, #4]
  40b0de:	f7ff fc53 	bl	40a988 <invn_math_mult_q29_fxp>
  40b0e2:	68e1      	ldr	r1, [r4, #12]
  40b0e4:	4405      	add	r5, r0
  40b0e6:	4608      	mov	r0, r1
  40b0e8:	9501      	str	r5, [sp, #4]
  40b0ea:	f7ff fc4d 	bl	40a988 <invn_math_mult_q29_fxp>
  40b0ee:	6821      	ldr	r1, [r4, #0]
  40b0f0:	4605      	mov	r5, r0
  40b0f2:	4608      	mov	r0, r1
  40b0f4:	f7ff fc48 	bl	40a988 <invn_math_mult_q29_fxp>
  40b0f8:	4405      	add	r5, r0
  40b0fa:	a903      	add	r1, sp, #12
  40b0fc:	4630      	mov	r0, r6
  40b0fe:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
  40b102:	9502      	str	r5, [sp, #8]
  40b104:	f002 fa16 	bl	40d534 <invn_normalize_vector_q30>
  40b108:	463a      	mov	r2, r7
  40b10a:	a803      	add	r0, sp, #12
  40b10c:	4669      	mov	r1, sp
  40b10e:	f002 f9e1 	bl	40d4d4 <invn_cross_product_q30>
  40b112:	b007      	add	sp, #28
  40b114:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b116:	bf00      	nop

0040b118 <invn_quat_6x_correction_fxp>:
  40b118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b11c:	460c      	mov	r4, r1
  40b11e:	b086      	sub	sp, #24
  40b120:	4680      	mov	r8, r0
  40b122:	68c9      	ldr	r1, [r1, #12]
  40b124:	6860      	ldr	r0, [r4, #4]
  40b126:	4615      	mov	r5, r2
  40b128:	461f      	mov	r7, r3
  40b12a:	f7ff fc2d 	bl	40a988 <invn_math_mult_q29_fxp>
  40b12e:	6821      	ldr	r1, [r4, #0]
  40b130:	4606      	mov	r6, r0
  40b132:	68a0      	ldr	r0, [r4, #8]
  40b134:	f7ff fc28 	bl	40a988 <invn_math_mult_q29_fxp>
  40b138:	68e1      	ldr	r1, [r4, #12]
  40b13a:	1a36      	subs	r6, r6, r0
  40b13c:	68a0      	ldr	r0, [r4, #8]
  40b13e:	9600      	str	r6, [sp, #0]
  40b140:	f7ff fc22 	bl	40a988 <invn_math_mult_q29_fxp>
  40b144:	6821      	ldr	r1, [r4, #0]
  40b146:	4606      	mov	r6, r0
  40b148:	6860      	ldr	r0, [r4, #4]
  40b14a:	f7ff fc1d 	bl	40a988 <invn_math_mult_q29_fxp>
  40b14e:	68e1      	ldr	r1, [r4, #12]
  40b150:	4406      	add	r6, r0
  40b152:	4608      	mov	r0, r1
  40b154:	9601      	str	r6, [sp, #4]
  40b156:	f7ff fc17 	bl	40a988 <invn_math_mult_q29_fxp>
  40b15a:	6821      	ldr	r1, [r4, #0]
  40b15c:	4606      	mov	r6, r0
  40b15e:	4608      	mov	r0, r1
  40b160:	f7ff fc12 	bl	40a988 <invn_math_mult_q29_fxp>
  40b164:	4406      	add	r6, r0
  40b166:	a903      	add	r1, sp, #12
  40b168:	4640      	mov	r0, r8
  40b16a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
  40b16e:	9602      	str	r6, [sp, #8]
  40b170:	f002 f9e0 	bl	40d534 <invn_normalize_vector_q30>
  40b174:	462a      	mov	r2, r5
  40b176:	a803      	add	r0, sp, #12
  40b178:	4669      	mov	r1, sp
  40b17a:	f002 f9ab 	bl	40d4d4 <invn_cross_product_q30>
  40b17e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
  40b182:	1048      	asrs	r0, r1, #1
  40b184:	1052      	asrs	r2, r2, #1
  40b186:	105b      	asrs	r3, r3, #1
  40b188:	e885 000d 	stmia.w	r5, {r0, r2, r3}
  40b18c:	4621      	mov	r1, r4
  40b18e:	4628      	mov	r0, r5
  40b190:	f7ff fe60 	bl	40ae54 <invn_integrate_gyro_fast_trigo_fxp>
  40b194:	e89d 000e 	ldmia.w	sp, {r1, r2, r3}
  40b198:	e887 000e 	stmia.w	r7, {r1, r2, r3}
  40b19c:	b006      	add	sp, #24
  40b19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b1a2:	bf00      	nop

0040b1a4 <invn_quat_to_gravity_fxp>:
  40b1a4:	b570      	push	{r4, r5, r6, lr}
  40b1a6:	4604      	mov	r4, r0
  40b1a8:	460e      	mov	r6, r1
  40b1aa:	6840      	ldr	r0, [r0, #4]
  40b1ac:	68e1      	ldr	r1, [r4, #12]
  40b1ae:	f7ff fbeb 	bl	40a988 <invn_math_mult_q29_fxp>
  40b1b2:	6821      	ldr	r1, [r4, #0]
  40b1b4:	4605      	mov	r5, r0
  40b1b6:	68a0      	ldr	r0, [r4, #8]
  40b1b8:	f7ff fbe6 	bl	40a988 <invn_math_mult_q29_fxp>
  40b1bc:	1a28      	subs	r0, r5, r0
  40b1be:	6030      	str	r0, [r6, #0]
  40b1c0:	68e1      	ldr	r1, [r4, #12]
  40b1c2:	68a0      	ldr	r0, [r4, #8]
  40b1c4:	f7ff fbe0 	bl	40a988 <invn_math_mult_q29_fxp>
  40b1c8:	6821      	ldr	r1, [r4, #0]
  40b1ca:	4605      	mov	r5, r0
  40b1cc:	6860      	ldr	r0, [r4, #4]
  40b1ce:	f7ff fbdb 	bl	40a988 <invn_math_mult_q29_fxp>
  40b1d2:	4428      	add	r0, r5
  40b1d4:	6070      	str	r0, [r6, #4]
  40b1d6:	68e1      	ldr	r1, [r4, #12]
  40b1d8:	4608      	mov	r0, r1
  40b1da:	f7ff fbd5 	bl	40a988 <invn_math_mult_q29_fxp>
  40b1de:	6821      	ldr	r1, [r4, #0]
  40b1e0:	4605      	mov	r5, r0
  40b1e2:	4608      	mov	r0, r1
  40b1e4:	f7ff fbd0 	bl	40a988 <invn_math_mult_q29_fxp>
  40b1e8:	4428      	add	r0, r5
  40b1ea:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
  40b1ee:	60b0      	str	r0, [r6, #8]
  40b1f0:	bd70      	pop	{r4, r5, r6, pc}
  40b1f2:	bf00      	nop

0040b1f4 <GyroCalFnmFxp_Recalibrate>:
  40b1f4:	2300      	movs	r3, #0
  40b1f6:	6143      	str	r3, [r0, #20]
  40b1f8:	4770      	bx	lr
  40b1fa:	bf00      	nop

0040b1fc <GyroCalFnmFxp_SetCustomParam>:
  40b1fc:	b4f0      	push	{r4, r5, r6, r7}
  40b1fe:	2401      	movs	r4, #1
  40b200:	409c      	lsls	r4, r3
  40b202:	9f05      	ldr	r7, [sp, #20]
  40b204:	9e04      	ldr	r6, [sp, #16]
  40b206:	9d06      	ldr	r5, [sp, #24]
  40b208:	6001      	str	r1, [r0, #0]
  40b20a:	6042      	str	r2, [r0, #4]
  40b20c:	9907      	ldr	r1, [sp, #28]
  40b20e:	9a08      	ldr	r2, [sp, #32]
  40b210:	61c4      	str	r4, [r0, #28]
  40b212:	60c7      	str	r7, [r0, #12]
  40b214:	6206      	str	r6, [r0, #32]
  40b216:	6105      	str	r5, [r0, #16]
  40b218:	6083      	str	r3, [r0, #8]
  40b21a:	6141      	str	r1, [r0, #20]
  40b21c:	6182      	str	r2, [r0, #24]
  40b21e:	bcf0      	pop	{r4, r5, r6, r7}
  40b220:	4770      	bx	lr
  40b222:	bf00      	nop

0040b224 <GyroCalFnmFxp_SetSamplingPeriod>:
  40b224:	2900      	cmp	r1, #0
  40b226:	dd14      	ble.n	40b252 <GyroCalFnmFxp_SetSamplingPeriod+0x2e>
  40b228:	b430      	push	{r4, r5}
  40b22a:	6884      	ldr	r4, [r0, #8]
  40b22c:	6805      	ldr	r5, [r0, #0]
  40b22e:	fa01 f404 	lsl.w	r4, r1, r4
  40b232:	1049      	asrs	r1, r1, #1
  40b234:	440c      	add	r4, r1
  40b236:	440d      	add	r5, r1
  40b238:	2200      	movs	r2, #0
  40b23a:	42a5      	cmp	r5, r4
  40b23c:	6042      	str	r2, [r0, #4]
  40b23e:	dd07      	ble.n	40b250 <GyroCalFnmFxp_SetSamplingPeriod+0x2c>
  40b240:	0063      	lsls	r3, r4, #1
  40b242:	4619      	mov	r1, r3
  40b244:	428d      	cmp	r5, r1
  40b246:	f102 0201 	add.w	r2, r2, #1
  40b24a:	4423      	add	r3, r4
  40b24c:	dcf9      	bgt.n	40b242 <GyroCalFnmFxp_SetSamplingPeriod+0x1e>
  40b24e:	6042      	str	r2, [r0, #4]
  40b250:	bc30      	pop	{r4, r5}
  40b252:	4770      	bx	lr

0040b254 <gyro_cal_computeMoment>:
  40b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b258:	2b00      	cmp	r3, #0
  40b25a:	b085      	sub	sp, #20
  40b25c:	db78      	blt.n	40b350 <gyro_cal_computeMoment+0xfc>
  40b25e:	68c4      	ldr	r4, [r0, #12]
  40b260:	6907      	ldr	r7, [r0, #16]
  40b262:	6805      	ldr	r5, [r0, #0]
  40b264:	2600      	movs	r6, #0
  40b266:	ea46 0804 	orr.w	r8, r6, r4
  40b26a:	ea47 79e4 	orr.w	r9, r7, r4, asr #31
  40b26e:	f1a3 0420 	sub.w	r4, r3, #32
  40b272:	fa09 fe03 	lsl.w	lr, r9, r3
  40b276:	fa08 f404 	lsl.w	r4, r8, r4
  40b27a:	ea4e 0e04 	orr.w	lr, lr, r4
  40b27e:	f1c3 0420 	rsb	r4, r3, #32
  40b282:	fa28 f404 	lsr.w	r4, r8, r4
  40b286:	ea4e 0e04 	orr.w	lr, lr, r4
  40b28a:	6846      	ldr	r6, [r0, #4]
  40b28c:	6884      	ldr	r4, [r0, #8]
  40b28e:	fa08 fc03 	lsl.w	ip, r8, r3
  40b292:	409d      	lsls	r5, r3
  40b294:	409e      	lsls	r6, r3
  40b296:	fa04 f303 	lsl.w	r3, r4, r3
  40b29a:	9303      	str	r3, [sp, #12]
  40b29c:	eb01 0741 	add.w	r7, r1, r1, lsl #1
  40b2a0:	f04f 0800 	mov.w	r8, #0
  40b2a4:	ea48 0a0c 	orr.w	sl, r8, ip
  40b2a8:	ea4e 7bec 	orr.w	fp, lr, ip, asr #31
  40b2ac:	f1a7 0e20 	sub.w	lr, r7, #32
  40b2b0:	fa0b f307 	lsl.w	r3, fp, r7
  40b2b4:	fa0a fe0e 	lsl.w	lr, sl, lr
  40b2b8:	1c4c      	adds	r4, r1, #1
  40b2ba:	f1c7 0c20 	rsb	ip, r7, #32
  40b2be:	ea43 030e 	orr.w	r3, r3, lr
  40b2c2:	fa2a fc0c 	lsr.w	ip, sl, ip
  40b2c6:	0064      	lsls	r4, r4, #1
  40b2c8:	fb05 fe05 	mul.w	lr, r5, r5
  40b2cc:	fa05 f404 	lsl.w	r4, r5, r4
  40b2d0:	ea43 050c 	orr.w	r5, r3, ip
  40b2d4:	9b03      	ldr	r3, [sp, #12]
  40b2d6:	9501      	str	r5, [sp, #4]
  40b2d8:	fb84 4503 	smull	r4, r5, r4, r3
  40b2dc:	fa0a f307 	lsl.w	r3, sl, r7
  40b2e0:	9300      	str	r3, [sp, #0]
  40b2e2:	e9dd ab00 	ldrd	sl, fp, [sp]
  40b2e6:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
  40b2ea:	ea4f 084c 	mov.w	r8, ip, lsl #1
  40b2ee:	ebba 0a04 	subs.w	sl, sl, r4
  40b2f2:	fa06 f601 	lsl.w	r6, r6, r1
  40b2f6:	eb6b 0b05 	sbc.w	fp, fp, r5
  40b2fa:	fb8e 4508 	smull	r4, r5, lr, r8
  40b2fe:	ebba 0a04 	subs.w	sl, sl, r4
  40b302:	fb88 3406 	smull	r3, r4, r8, r6
  40b306:	eb6b 0b05 	sbc.w	fp, fp, r5
  40b30a:	eb1a 0a03 	adds.w	sl, sl, r3
  40b30e:	eb4b 0b04 	adc.w	fp, fp, r4
  40b312:	eb13 080a 	adds.w	r8, r3, sl
  40b316:	eb44 090b 	adc.w	r9, r4, fp
  40b31a:	fb86 4506 	smull	r4, r5, r6, r6
  40b31e:	ebb8 0604 	subs.w	r6, r8, r4
  40b322:	eb69 0705 	sbc.w	r7, r9, r5
  40b326:	1b36      	subs	r6, r6, r4
  40b328:	eb67 0705 	sbc.w	r7, r7, r5
  40b32c:	1b36      	subs	r6, r6, r4
  40b32e:	eb67 0705 	sbc.w	r7, r7, r5
  40b332:	0ff3      	lsrs	r3, r6, #31
  40b334:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
  40b338:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  40b33c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  40b340:	4291      	cmp	r1, r2
  40b342:	6143      	str	r3, [r0, #20]
  40b344:	bfac      	ite	ge
  40b346:	2000      	movge	r0, #0
  40b348:	2001      	movlt	r0, #1
  40b34a:	b005      	add	sp, #20
  40b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b350:	68c7      	ldr	r7, [r0, #12]
  40b352:	6905      	ldr	r5, [r0, #16]
  40b354:	6846      	ldr	r6, [r0, #4]
  40b356:	f1c3 0e00 	rsb	lr, r3, #0
  40b35a:	2400      	movs	r4, #0
  40b35c:	ea45 79e7 	orr.w	r9, r5, r7, asr #31
  40b360:	ea44 0807 	orr.w	r8, r4, r7
  40b364:	f1ce 0320 	rsb	r3, lr, #32
  40b368:	fa28 fc0e 	lsr.w	ip, r8, lr
  40b36c:	fa09 f303 	lsl.w	r3, r9, r3
  40b370:	ea4c 0c03 	orr.w	ip, ip, r3
  40b374:	6803      	ldr	r3, [r0, #0]
  40b376:	fa43 f50e 	asr.w	r5, r3, lr
  40b37a:	6883      	ldr	r3, [r0, #8]
  40b37c:	f1be 0720 	subs.w	r7, lr, #32
  40b380:	fa43 f30e 	asr.w	r3, r3, lr
  40b384:	bf58      	it	pl
  40b386:	fa49 f707 	asrpl.w	r7, r9, r7
  40b38a:	fa46 f60e 	asr.w	r6, r6, lr
  40b38e:	9303      	str	r3, [sp, #12]
  40b390:	bf58      	it	pl
  40b392:	ea4c 0c07 	orrpl.w	ip, ip, r7
  40b396:	fa49 fe0e 	asr.w	lr, r9, lr
  40b39a:	e77f      	b.n	40b29c <gyro_cal_computeMoment+0x48>

0040b39c <gyro_cal_fnm>:
  40b39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b3a0:	f8d2 c008 	ldr.w	ip, [r2, #8]
  40b3a4:	4615      	mov	r5, r2
  40b3a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
  40b3a8:	ebac 0e02 	sub.w	lr, ip, r2
  40b3ac:	460e      	mov	r6, r1
  40b3ae:	ea8e 73ee 	eor.w	r3, lr, lr, asr #31
  40b3b2:	6a09      	ldr	r1, [r1, #32]
  40b3b4:	eba3 73ee 	sub.w	r3, r3, lr, asr #31
  40b3b8:	428b      	cmp	r3, r1
  40b3ba:	b089      	sub	sp, #36	; 0x24
  40b3bc:	f280 809a 	bge.w	40b4f4 <gyro_cal_fnm+0x158>
  40b3c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40b3c2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  40b3c6:	ebaa 0903 	sub.w	r9, sl, r3
  40b3ca:	ea89 73e9 	eor.w	r3, r9, r9, asr #31
  40b3ce:	eba3 73e9 	sub.w	r3, r3, r9, asr #31
  40b3d2:	4299      	cmp	r1, r3
  40b3d4:	4604      	mov	r4, r0
  40b3d6:	f340 808d 	ble.w	40b4f4 <gyro_cal_fnm+0x158>
  40b3da:	692a      	ldr	r2, [r5, #16]
  40b3dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  40b3de:	9206      	str	r2, [sp, #24]
  40b3e0:	eba2 0b03 	sub.w	fp, r2, r3
  40b3e4:	ea8b 73eb 	eor.w	r3, fp, fp, asr #31
  40b3e8:	eba3 73eb 	sub.w	r3, r3, fp, asr #31
  40b3ec:	4299      	cmp	r1, r3
  40b3ee:	f340 8081 	ble.w	40b4f4 <gyro_cal_fnm+0x158>
  40b3f2:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40b3f4:	9201      	str	r2, [sp, #4]
  40b3f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
  40b3f8:	f8d4 8058 	ldr.w	r8, [r4, #88]	; 0x58
  40b3fc:	6be7      	ldr	r7, [r4, #60]	; 0x3c
  40b3fe:	9707      	str	r7, [sp, #28]
  40b400:	2000      	movs	r0, #0
  40b402:	ea4f 1329 	mov.w	r3, r9, asr #4
  40b406:	4691      	mov	r9, r2
  40b408:	9303      	str	r3, [sp, #12]
  40b40a:	4302      	orrs	r2, r0
  40b40c:	ea48 73e9 	orr.w	r3, r8, r9, asr #31
  40b410:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40b414:	9b03      	ldr	r3, [sp, #12]
  40b416:	9000      	str	r0, [sp, #0]
  40b418:	fb03 f803 	mul.w	r8, r3, r3
  40b41c:	f8cd 8008 	str.w	r8, [sp, #8]
  40b420:	e9dd 7800 	ldrd	r7, r8, [sp]
  40b424:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  40b426:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40b428:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40b42a:	4317      	orrs	r7, r2
  40b42c:	ea48 78e2 	orr.w	r8, r8, r2, asr #31
  40b430:	e9cd 7800 	strd	r7, r8, [sp]
  40b434:	9f07      	ldr	r7, [sp, #28]
  40b436:	ea41 79e7 	orr.w	r9, r1, r7, asr #31
  40b43a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
  40b43e:	ea40 0807 	orr.w	r8, r0, r7
  40b442:	9802      	ldr	r0, [sp, #8]
  40b444:	6b27      	ldr	r7, [r4, #48]	; 0x30
  40b446:	fbc0 1200 	smlal	r1, r2, r0, r0
  40b44a:	4608      	mov	r0, r1
  40b44c:	4611      	mov	r1, r2
  40b44e:	65a1      	str	r1, [r4, #88]	; 0x58
  40b450:	6560      	str	r0, [r4, #84]	; 0x54
  40b452:	e9dd 0100 	ldrd	r0, r1, [sp]
  40b456:	ea4f 1e2e 	mov.w	lr, lr, asr #4
  40b45a:	ea4f 1b2b 	mov.w	fp, fp, asr #4
  40b45e:	eb07 020e 	add.w	r2, r7, lr
  40b462:	fb0b f70b 	mul.w	r7, fp, fp
  40b466:	fbc7 0107 	smlal	r0, r1, r7, r7
  40b46a:	6322      	str	r2, [r4, #48]	; 0x30
  40b46c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40b46e:	6721      	str	r1, [r4, #112]	; 0x70
  40b470:	fb0e f10e 	mul.w	r1, lr, lr
  40b474:	fbc1 8901 	smlal	r8, r9, r1, r1
  40b478:	fb01 2e0e 	mla	lr, r1, lr, r2
  40b47c:	440b      	add	r3, r1
  40b47e:	9a02      	ldr	r2, [sp, #8]
  40b480:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  40b482:	66e0      	str	r0, [r4, #108]	; 0x6c
  40b484:	188a      	adds	r2, r1, r2
  40b486:	6d20      	ldr	r0, [r4, #80]	; 0x50
  40b488:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  40b48c:	9200      	str	r2, [sp, #0]
  40b48e:	9903      	ldr	r1, [sp, #12]
  40b490:	9a02      	ldr	r2, [sp, #8]
  40b492:	6363      	str	r3, [r4, #52]	; 0x34
  40b494:	fb02 0001 	mla	r0, r2, r1, r0
  40b498:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40b49a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40b49c:	f8c4 e038 	str.w	lr, [r4, #56]	; 0x38
  40b4a0:	4689      	mov	r9, r1
  40b4a2:	eb02 0e07 	add.w	lr, r2, r7
  40b4a6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  40b4a8:	69e1      	ldr	r1, [r4, #28]
  40b4aa:	6520      	str	r0, [r4, #80]	; 0x50
  40b4ac:	4499      	add	r9, r3
  40b4ae:	69a3      	ldr	r3, [r4, #24]
  40b4b0:	69f0      	ldr	r0, [r6, #28]
  40b4b2:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
  40b4b6:	fb07 270b 	mla	r7, r7, fp, r2
  40b4ba:	6e22      	ldr	r2, [r4, #96]	; 0x60
  40b4bc:	66a7      	str	r7, [r4, #104]	; 0x68
  40b4be:	4463      	add	r3, ip
  40b4c0:	4493      	add	fp, r2
  40b4c2:	61a3      	str	r3, [r4, #24]
  40b4c4:	9a00      	ldr	r2, [sp, #0]
  40b4c6:	68e3      	ldr	r3, [r4, #12]
  40b4c8:	6a27      	ldr	r7, [r4, #32]
  40b4ca:	64e2      	str	r2, [r4, #76]	; 0x4c
  40b4cc:	9a06      	ldr	r2, [sp, #24]
  40b4ce:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  40b4d2:	3301      	adds	r3, #1
  40b4d4:	4451      	add	r1, sl
  40b4d6:	443a      	add	r2, r7
  40b4d8:	4283      	cmp	r3, r0
  40b4da:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
  40b4de:	f8c4 b060 	str.w	fp, [r4, #96]	; 0x60
  40b4e2:	61e1      	str	r1, [r4, #28]
  40b4e4:	6222      	str	r2, [r4, #32]
  40b4e6:	60e3      	str	r3, [r4, #12]
  40b4e8:	d009      	beq.n	40b4fe <gyro_cal_fnm+0x162>
  40b4ea:	2301      	movs	r3, #1
  40b4ec:	616b      	str	r3, [r5, #20]
  40b4ee:	b009      	add	sp, #36	; 0x24
  40b4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4f4:	2300      	movs	r3, #0
  40b4f6:	616b      	str	r3, [r5, #20]
  40b4f8:	b009      	add	sp, #36	; 0x24
  40b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b4fe:	68f1      	ldr	r1, [r6, #12]
  40b500:	68b7      	ldr	r7, [r6, #8]
  40b502:	6932      	ldr	r2, [r6, #16]
  40b504:	1bcf      	subs	r7, r1, r7
  40b506:	463b      	mov	r3, r7
  40b508:	f104 0030 	add.w	r0, r4, #48	; 0x30
  40b50c:	f7ff fea2 	bl	40b254 <gyro_cal_computeMoment>
  40b510:	2800      	cmp	r0, #0
  40b512:	d0ef      	beq.n	40b4f4 <gyro_cal_fnm+0x158>
  40b514:	463b      	mov	r3, r7
  40b516:	6932      	ldr	r2, [r6, #16]
  40b518:	68f1      	ldr	r1, [r6, #12]
  40b51a:	f104 0048 	add.w	r0, r4, #72	; 0x48
  40b51e:	f7ff fe99 	bl	40b254 <gyro_cal_computeMoment>
  40b522:	2800      	cmp	r0, #0
  40b524:	d0e6      	beq.n	40b4f4 <gyro_cal_fnm+0x158>
  40b526:	463b      	mov	r3, r7
  40b528:	6932      	ldr	r2, [r6, #16]
  40b52a:	68f1      	ldr	r1, [r6, #12]
  40b52c:	f104 0060 	add.w	r0, r4, #96	; 0x60
  40b530:	f7ff fe90 	bl	40b254 <gyro_cal_computeMoment>
  40b534:	2800      	cmp	r0, #0
  40b536:	d0dd      	beq.n	40b4f4 <gyro_cal_fnm+0x158>
  40b538:	68b3      	ldr	r3, [r6, #8]
  40b53a:	69a2      	ldr	r2, [r4, #24]
  40b53c:	6971      	ldr	r1, [r6, #20]
  40b53e:	f1c3 030a 	rsb	r3, r3, #10
  40b542:	409a      	lsls	r2, r3
  40b544:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  40b548:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  40b54c:	4288      	cmp	r0, r1
  40b54e:	dad1      	bge.n	40b4f4 <gyro_cal_fnm+0x158>
  40b550:	69e0      	ldr	r0, [r4, #28]
  40b552:	4098      	lsls	r0, r3
  40b554:	ea80 76e0 	eor.w	r6, r0, r0, asr #31
  40b558:	eba6 76e0 	sub.w	r6, r6, r0, asr #31
  40b55c:	42b1      	cmp	r1, r6
  40b55e:	ddc9      	ble.n	40b4f4 <gyro_cal_fnm+0x158>
  40b560:	6a26      	ldr	r6, [r4, #32]
  40b562:	fa06 f303 	lsl.w	r3, r6, r3
  40b566:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  40b56a:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  40b56e:	42b1      	cmp	r1, r6
  40b570:	ddc0      	ble.n	40b4f4 <gyro_cal_fnm+0x158>
  40b572:	2603      	movs	r6, #3
  40b574:	6869      	ldr	r1, [r5, #4]
  40b576:	642b      	str	r3, [r5, #64]	; 0x40
  40b578:	63aa      	str	r2, [r5, #56]	; 0x38
  40b57a:	63e8      	str	r0, [r5, #60]	; 0x3c
  40b57c:	646e      	str	r6, [r5, #68]	; 0x44
  40b57e:	2302      	movs	r3, #2
  40b580:	6061      	str	r1, [r4, #4]
  40b582:	e7b8      	b.n	40b4f6 <gyro_cal_fnm+0x15a>

0040b584 <GyroCalFnmFxp_Init>:
  40b584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b586:	4604      	mov	r4, r0
  40b588:	f000 ffec 	bl	40c564 <InterfaceCalibrationGyrFxp_Reset>
  40b58c:	2278      	movs	r2, #120	; 0x78
  40b58e:	2100      	movs	r1, #0
  40b590:	f104 008c 	add.w	r0, r4, #140	; 0x8c
  40b594:	f004 fa62 	bl	40fa5c <memset>
  40b598:	4b0b      	ldr	r3, [pc, #44]	; (40b5c8 <GyroCalFnmFxp_Init+0x44>)
  40b59a:	490c      	ldr	r1, [pc, #48]	; (40b5cc <GyroCalFnmFxp_Init+0x48>)
  40b59c:	66a3      	str	r3, [r4, #104]	; 0x68
  40b59e:	2700      	movs	r7, #0
  40b5a0:	2306      	movs	r3, #6
  40b5a2:	2640      	movs	r6, #64	; 0x40
  40b5a4:	f44f 75a0 	mov.w	r5, #320	; 0x140
  40b5a8:	2003      	movs	r0, #3
  40b5aa:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
  40b5ae:	66e7      	str	r7, [r4, #108]	; 0x6c
  40b5b0:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  40b5b4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  40b5b8:	67a0      	str	r0, [r4, #120]	; 0x78
  40b5ba:	67e1      	str	r1, [r4, #124]	; 0x7c
  40b5bc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  40b5c0:	6723      	str	r3, [r4, #112]	; 0x70
  40b5c2:	6763      	str	r3, [r4, #116]	; 0x74
  40b5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b5c6:	bf00      	nop
  40b5c8:	0007a120 	.word	0x0007a120
  40b5cc:	0147ae14 	.word	0x0147ae14

0040b5d0 <GyroCalFnmFxp_UpdateData>:
  40b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b5d2:	680d      	ldr	r5, [r1, #0]
  40b5d4:	6205      	str	r5, [r0, #32]
  40b5d6:	4604      	mov	r4, r0
  40b5d8:	6848      	ldr	r0, [r1, #4]
  40b5da:	6260      	str	r0, [r4, #36]	; 0x24
  40b5dc:	688b      	ldr	r3, [r1, #8]
  40b5de:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
  40b5e2:	62a3      	str	r3, [r4, #40]	; 0x28
  40b5e4:	3901      	subs	r1, #1
  40b5e6:	129f      	asrs	r7, r3, #10
  40b5e8:	ea4f 2ea0 	mov.w	lr, r0, asr #10
  40b5ec:	ea4f 2ca5 	mov.w	ip, r5, asr #10
  40b5f0:	2900      	cmp	r1, #0
  40b5f2:	6062      	str	r2, [r4, #4]
  40b5f4:	6127      	str	r7, [r4, #16]
  40b5f6:	f8c4 e00c 	str.w	lr, [r4, #12]
  40b5fa:	f8c4 c008 	str.w	ip, [r4, #8]
  40b5fe:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  40b602:	db09      	blt.n	40b618 <GyroCalFnmFxp_UpdateData+0x48>
  40b604:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  40b606:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  40b608:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40b60a:	1bad      	subs	r5, r5, r6
  40b60c:	1a40      	subs	r0, r0, r1
  40b60e:	1a9b      	subs	r3, r3, r2
  40b610:	62e5      	str	r5, [r4, #44]	; 0x2c
  40b612:	6320      	str	r0, [r4, #48]	; 0x30
  40b614:	6363      	str	r3, [r4, #52]	; 0x34
  40b616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b618:	6966      	ldr	r6, [r4, #20]
  40b61a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  40b61c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  40b620:	2e02      	cmp	r6, #2
  40b622:	d03a      	beq.n	40b69a <GyroCalFnmFxp_UpdateData+0xca>
  40b624:	f104 008c 	add.w	r0, r4, #140	; 0x8c
  40b628:	f104 0168 	add.w	r1, r4, #104	; 0x68
  40b62c:	b136      	cbz	r6, 40b63c <GyroCalFnmFxp_UpdateData+0x6c>
  40b62e:	4622      	mov	r2, r4
  40b630:	f7ff feb4 	bl	40b39c <gyro_cal_fnm>
  40b634:	6a25      	ldr	r5, [r4, #32]
  40b636:	6a60      	ldr	r0, [r4, #36]	; 0x24
  40b638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40b63a:	e7e3      	b.n	40b604 <GyroCalFnmFxp_UpdateData+0x34>
  40b63c:	2301      	movs	r3, #1
  40b63e:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
  40b642:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
  40b646:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
  40b64a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
  40b64e:	f8c4 c0b0 	str.w	ip, [r4, #176]	; 0xb0
  40b652:	f8c4 e0b4 	str.w	lr, [r4, #180]	; 0xb4
  40b656:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
  40b65a:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
  40b65e:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
  40b662:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
  40b666:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
  40b66a:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
  40b66e:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
  40b672:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
  40b676:	f8c4 60dc 	str.w	r6, [r4, #220]	; 0xdc
  40b67a:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
  40b67e:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
  40b682:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
  40b686:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
  40b68a:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
  40b68e:	f8c4 60f8 	str.w	r6, [r4, #248]	; 0xf8
  40b692:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
  40b696:	6163      	str	r3, [r4, #20]
  40b698:	e7c9      	b.n	40b62e <GyroCalFnmFxp_UpdateData+0x5e>
  40b69a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
  40b69e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  40b6a2:	1a8a      	subs	r2, r1, r2
  40b6a4:	2a00      	cmp	r2, #0
  40b6a6:	bfb8      	it	lt
  40b6a8:	4252      	neglt	r2, r2
  40b6aa:	42ba      	cmp	r2, r7
  40b6ac:	dc02      	bgt.n	40b6b4 <GyroCalFnmFxp_UpdateData+0xe4>
  40b6ae:	2203      	movs	r2, #3
  40b6b0:	6462      	str	r2, [r4, #68]	; 0x44
  40b6b2:	e7a7      	b.n	40b604 <GyroCalFnmFxp_UpdateData+0x34>
  40b6b4:	2200      	movs	r2, #0
  40b6b6:	6466      	str	r6, [r4, #68]	; 0x44
  40b6b8:	6162      	str	r2, [r4, #20]
  40b6ba:	e7a3      	b.n	40b604 <GyroCalFnmFxp_UpdateData+0x34>

0040b6bc <RlsCalibrationFxp_SetAccuracy>:
  40b6bc:	2a03      	cmp	r2, #3
  40b6be:	d017      	beq.n	40b6f0 <RlsCalibrationFxp_SetAccuracy+0x34>
  40b6c0:	2a02      	cmp	r2, #2
  40b6c2:	d02b      	beq.n	40b71c <RlsCalibrationFxp_SetAccuracy+0x60>
  40b6c4:	2a01      	cmp	r2, #1
  40b6c6:	d02b      	beq.n	40b720 <RlsCalibrationFxp_SetAccuracy+0x64>
  40b6c8:	2300      	movs	r3, #0
  40b6ca:	4a16      	ldr	r2, [pc, #88]	; (40b724 <RlsCalibrationFxp_SetAccuracy+0x68>)
  40b6cc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  40b6d0:	6103      	str	r3, [r0, #16]
  40b6d2:	6143      	str	r3, [r0, #20]
  40b6d4:	6183      	str	r3, [r0, #24]
  40b6d6:	61c3      	str	r3, [r0, #28]
  40b6d8:	6583      	str	r3, [r0, #88]	; 0x58
  40b6da:	65c3      	str	r3, [r0, #92]	; 0x5c
  40b6dc:	6603      	str	r3, [r0, #96]	; 0x60
  40b6de:	6643      	str	r3, [r0, #100]	; 0x64
  40b6e0:	6683      	str	r3, [r0, #104]	; 0x68
  40b6e2:	66c3      	str	r3, [r0, #108]	; 0x6c
  40b6e4:	67c2      	str	r2, [r0, #124]	; 0x7c
  40b6e6:	6302      	str	r2, [r0, #48]	; 0x30
  40b6e8:	6342      	str	r2, [r0, #52]	; 0x34
  40b6ea:	6382      	str	r2, [r0, #56]	; 0x38
  40b6ec:	63c2      	str	r2, [r0, #60]	; 0x3c
  40b6ee:	4770      	bx	lr
  40b6f0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40b6f2:	490c      	ldr	r1, [pc, #48]	; (40b724 <RlsCalibrationFxp_SetAccuracy+0x68>)
  40b6f4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  40b6f8:	1e5a      	subs	r2, r3, #1
  40b6fa:	2300      	movs	r3, #0
  40b6fc:	67c2      	str	r2, [r0, #124]	; 0x7c
  40b6fe:	6103      	str	r3, [r0, #16]
  40b700:	6143      	str	r3, [r0, #20]
  40b702:	6183      	str	r3, [r0, #24]
  40b704:	61c3      	str	r3, [r0, #28]
  40b706:	6583      	str	r3, [r0, #88]	; 0x58
  40b708:	65c3      	str	r3, [r0, #92]	; 0x5c
  40b70a:	6603      	str	r3, [r0, #96]	; 0x60
  40b70c:	6643      	str	r3, [r0, #100]	; 0x64
  40b70e:	6683      	str	r3, [r0, #104]	; 0x68
  40b710:	66c3      	str	r3, [r0, #108]	; 0x6c
  40b712:	6301      	str	r1, [r0, #48]	; 0x30
  40b714:	6341      	str	r1, [r0, #52]	; 0x34
  40b716:	6381      	str	r1, [r0, #56]	; 0x38
  40b718:	63c1      	str	r1, [r0, #60]	; 0x3c
  40b71a:	4770      	bx	lr
  40b71c:	6e0b      	ldr	r3, [r1, #96]	; 0x60
  40b71e:	e7e8      	b.n	40b6f2 <RlsCalibrationFxp_SetAccuracy+0x36>
  40b720:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
  40b722:	e7e6      	b.n	40b6f2 <RlsCalibrationFxp_SetAccuracy+0x36>
  40b724:	0007a120 	.word	0x0007a120

0040b728 <RlsCalibrationFxp_SetDefaultParamMag>:
  40b728:	2900      	cmp	r1, #0
  40b72a:	bfc8      	it	gt
  40b72c:	4b20      	ldrgt	r3, [pc, #128]	; (40b7b0 <RlsCalibrationFxp_SetDefaultParamMag+0x88>)
  40b72e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b730:	f04f 0200 	mov.w	r2, #0
  40b734:	bfc8      	it	gt
  40b736:	e880 000a 	stmiagt.w	r0, {r1, r3}
  40b73a:	2405      	movs	r4, #5
  40b73c:	4b1d      	ldr	r3, [pc, #116]	; (40b7b4 <RlsCalibrationFxp_SetDefaultParamMag+0x8c>)
  40b73e:	6082      	str	r2, [r0, #8]
  40b740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40b744:	60c4      	str	r4, [r0, #12]
  40b746:	6103      	str	r3, [r0, #16]
  40b748:	f44f 24c8 	mov.w	r4, #409600	; 0x64000
  40b74c:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
  40b750:	6142      	str	r2, [r0, #20]
  40b752:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  40b756:	4f18      	ldr	r7, [pc, #96]	; (40b7b8 <RlsCalibrationFxp_SetDefaultParamMag+0x90>)
  40b758:	4918      	ldr	r1, [pc, #96]	; (40b7bc <RlsCalibrationFxp_SetDefaultParamMag+0x94>)
  40b75a:	6184      	str	r4, [r0, #24]
  40b75c:	f44f 5620 	mov.w	r6, #10240	; 0x2800
  40b760:	2403      	movs	r4, #3
  40b762:	61c3      	str	r3, [r0, #28]
  40b764:	6303      	str	r3, [r0, #48]	; 0x30
  40b766:	6242      	str	r2, [r0, #36]	; 0x24
  40b768:	f241 3388 	movw	r3, #5000	; 0x1388
  40b76c:	2201      	movs	r2, #1
  40b76e:	f8df e054 	ldr.w	lr, [pc, #84]	; 40b7c4 <RlsCalibrationFxp_SetDefaultParamMag+0x9c>
  40b772:	4d13      	ldr	r5, [pc, #76]	; (40b7c0 <RlsCalibrationFxp_SetDefaultParamMag+0x98>)
  40b774:	6287      	str	r7, [r0, #40]	; 0x28
  40b776:	62c6      	str	r6, [r0, #44]	; 0x2c
  40b778:	f247 5730 	movw	r7, #30000	; 0x7530
  40b77c:	f44f 4620 	mov.w	r6, #40960	; 0xa000
  40b780:	6344      	str	r4, [r0, #52]	; 0x34
  40b782:	6381      	str	r1, [r0, #56]	; 0x38
  40b784:	f44f 347a 	mov.w	r4, #256000	; 0x3e800
  40b788:	f44f 4110 	mov.w	r1, #36864	; 0x9000
  40b78c:	6402      	str	r2, [r0, #64]	; 0x40
  40b78e:	6443      	str	r3, [r0, #68]	; 0x44
  40b790:	f242 7210 	movw	r2, #10000	; 0x2710
  40b794:	6603      	str	r3, [r0, #96]	; 0x60
  40b796:	f640 13c4 	movw	r3, #2500	; 0x9c4
  40b79a:	f8c0 e020 	str.w	lr, [r0, #32]
  40b79e:	6487      	str	r7, [r0, #72]	; 0x48
  40b7a0:	64c6      	str	r6, [r0, #76]	; 0x4c
  40b7a2:	6505      	str	r5, [r0, #80]	; 0x50
  40b7a4:	6544      	str	r4, [r0, #84]	; 0x54
  40b7a6:	6581      	str	r1, [r0, #88]	; 0x58
  40b7a8:	65c2      	str	r2, [r0, #92]	; 0x5c
  40b7aa:	6643      	str	r3, [r0, #100]	; 0x64
  40b7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b7ae:	bf00      	nop
  40b7b0:	000f4240 	.word	0x000f4240
  40b7b4:	000186a0 	.word	0x000186a0
  40b7b8:	3e99f865 	.word	0x3e99f865
  40b7bc:	00061a80 	.word	0x00061a80
  40b7c0:	00271000 	.word	0x00271000
  40b7c4:	000927c0 	.word	0x000927c0

0040b7c8 <RlsCalibrationFxp_SetDefaultParamAcc>:
  40b7c8:	2900      	cmp	r1, #0
  40b7ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b7cc:	dd3f      	ble.n	40b84e <RlsCalibrationFxp_SetDefaultParamAcc+0x86>
  40b7ce:	4d24      	ldr	r5, [pc, #144]	; (40b860 <RlsCalibrationFxp_SetDefaultParamAcc+0x98>)
  40b7d0:	6001      	str	r1, [r0, #0]
  40b7d2:	2401      	movs	r4, #1
  40b7d4:	220a      	movs	r2, #10
  40b7d6:	239d      	movs	r3, #157	; 0x9d
  40b7d8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  40b7dc:	6045      	str	r5, [r0, #4]
  40b7de:	6084      	str	r4, [r0, #8]
  40b7e0:	60c2      	str	r2, [r0, #12]
  40b7e2:	6103      	str	r3, [r0, #16]
  40b7e4:	db39      	blt.n	40b85a <RlsCalibrationFxp_SetDefaultParamAcc+0x92>
  40b7e6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40b7ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40b7ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40b7f2:	f240 57dc 	movw	r7, #1500	; 0x5dc
  40b7f6:	4e1b      	ldr	r6, [pc, #108]	; (40b864 <RlsCalibrationFxp_SetDefaultParamAcc+0x9c>)
  40b7f8:	6141      	str	r1, [r0, #20]
  40b7fa:	f641 159a 	movw	r5, #6554	; 0x199a
  40b7fe:	f246 6466 	movw	r4, #26214	; 0x6666
  40b802:	2103      	movs	r1, #3
  40b804:	6183      	str	r3, [r0, #24]
  40b806:	61c3      	str	r3, [r0, #28]
  40b808:	6203      	str	r3, [r0, #32]
  40b80a:	f04f 0e01 	mov.w	lr, #1
  40b80e:	f644 43cc 	movw	r3, #19660	; 0x4ccc
  40b812:	6247      	str	r7, [r0, #36]	; 0x24
  40b814:	6286      	str	r6, [r0, #40]	; 0x28
  40b816:	f240 6766 	movw	r7, #1638	; 0x666
  40b81a:	62c5      	str	r5, [r0, #44]	; 0x2c
  40b81c:	f248 6666 	movw	r6, #34406	; 0x8666
  40b820:	6304      	str	r4, [r0, #48]	; 0x30
  40b822:	f647 1599 	movw	r5, #31129	; 0x7999
  40b826:	6341      	str	r1, [r0, #52]	; 0x34
  40b828:	f242 7410 	movw	r4, #10000	; 0x2710
  40b82c:	6382      	str	r2, [r0, #56]	; 0x38
  40b82e:	6442      	str	r2, [r0, #68]	; 0x44
  40b830:	f241 3188 	movw	r1, #5000	; 0x1388
  40b834:	f640 12c4 	movw	r2, #2500	; 0x9c4
  40b838:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
  40b83c:	6487      	str	r7, [r0, #72]	; 0x48
  40b83e:	64c3      	str	r3, [r0, #76]	; 0x4c
  40b840:	6503      	str	r3, [r0, #80]	; 0x50
  40b842:	6546      	str	r6, [r0, #84]	; 0x54
  40b844:	6585      	str	r5, [r0, #88]	; 0x58
  40b846:	65c4      	str	r4, [r0, #92]	; 0x5c
  40b848:	6601      	str	r1, [r0, #96]	; 0x60
  40b84a:	6642      	str	r2, [r0, #100]	; 0x64
  40b84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b84e:	2401      	movs	r4, #1
  40b850:	220a      	movs	r2, #10
  40b852:	239d      	movs	r3, #157	; 0x9d
  40b854:	6084      	str	r4, [r0, #8]
  40b856:	60c2      	str	r2, [r0, #12]
  40b858:	6103      	str	r3, [r0, #16]
  40b85a:	0349      	lsls	r1, r1, #13
  40b85c:	e7c5      	b.n	40b7ea <RlsCalibrationFxp_SetDefaultParamAcc+0x22>
  40b85e:	bf00      	nop
  40b860:	000f4240 	.word	0x000f4240
  40b864:	3e99f865 	.word	0x3e99f865

0040b868 <RlsCalibrationFxp_UpdateUncalibrated>:
  40b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b86c:	4689      	mov	r9, r1
  40b86e:	f100 0188 	add.w	r1, r0, #136	; 0x88
  40b872:	4690      	mov	r8, r2
  40b874:	c90e      	ldmia	r1, {r1, r2, r3}
  40b876:	4604      	mov	r4, r0
  40b878:	b0a1      	sub	sp, #132	; 0x84
  40b87a:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  40b87e:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
  40b882:	f500 719a 	add.w	r1, r0, #308	; 0x134
  40b886:	f500 7294 	add.w	r2, r0, #296	; 0x128
  40b88a:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  40b88e:	f108 0014 	add.w	r0, r8, #20
  40b892:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40b896:	f002 f8c3 	bl	40da20 <fxpRecursiveVariance3_q30>
  40b89a:	f8d9 000c 	ldr.w	r0, [r9, #12]
  40b89e:	f8d8 2014 	ldr.w	r2, [r8, #20]
  40b8a2:	6865      	ldr	r5, [r4, #4]
  40b8a4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
  40b8a8:	f8d8 3018 	ldr.w	r3, [r8, #24]
  40b8ac:	f8d8 701c 	ldr.w	r7, [r8, #28]
  40b8b0:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
  40b8b4:	4102      	asrs	r2, r0
  40b8b6:	1b52      	subs	r2, r2, r5
  40b8b8:	1a51      	subs	r1, r2, r1
  40b8ba:	68a2      	ldr	r2, [r4, #8]
  40b8bc:	fa43 f500 	asr.w	r5, r3, r0
  40b8c0:	1aad      	subs	r5, r5, r2
  40b8c2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
  40b8c6:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
  40b8ca:	ea81 7ee1 	eor.w	lr, r1, r1, asr #31
  40b8ce:	4103      	asrs	r3, r0
  40b8d0:	4102      	asrs	r2, r0
  40b8d2:	ebae 7ee1 	sub.w	lr, lr, r1, asr #31
  40b8d6:	4106      	asrs	r6, r0
  40b8d8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
  40b8dc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  40b8e0:	4107      	asrs	r7, r0
  40b8e2:	68e0      	ldr	r0, [r4, #12]
  40b8e4:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
  40b8e8:	1a6d      	subs	r5, r5, r1
  40b8ea:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
  40b8ee:	4671      	mov	r1, lr
  40b8f0:	1a3f      	subs	r7, r7, r0
  40b8f2:	4670      	mov	r0, lr
  40b8f4:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
  40b8f8:	f7ff f840 	bl	40a97c <invn_math_mult_q15_fxp>
  40b8fc:	ea85 7ae5 	eor.w	sl, r5, r5, asr #31
  40b900:	ebaa 7ae5 	sub.w	sl, sl, r5, asr #31
  40b904:	1bbf      	subs	r7, r7, r6
  40b906:	4651      	mov	r1, sl
  40b908:	4606      	mov	r6, r0
  40b90a:	4650      	mov	r0, sl
  40b90c:	f7ff f836 	bl	40a97c <invn_math_mult_q15_fxp>
  40b910:	ea87 75e7 	eor.w	r5, r7, r7, asr #31
  40b914:	eba5 75e7 	sub.w	r5, r5, r7, asr #31
  40b918:	4629      	mov	r1, r5
  40b91a:	4406      	add	r6, r0
  40b91c:	4628      	mov	r0, r5
  40b91e:	f7ff f82d 	bl	40a97c <invn_math_mult_q15_fxp>
  40b922:	4430      	add	r0, r6
  40b924:	f7ff f83c 	bl	40a9a0 <invn_math_sqrt_q15_fxp>
  40b928:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  40b92c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
  40b930:	2a02      	cmp	r2, #2
  40b932:	f300 80ab 	bgt.w	40ba8c <RlsCalibrationFxp_UpdateUncalibrated+0x224>
  40b936:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
  40b93a:	2b00      	cmp	r3, #0
  40b93c:	f000 80a9 	beq.w	40ba92 <RlsCalibrationFxp_UpdateUncalibrated+0x22a>
  40b940:	2a00      	cmp	r2, #0
  40b942:	dd2d      	ble.n	40b9a0 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40b944:	f8d8 0010 	ldr.w	r0, [r8, #16]
  40b948:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  40b94c:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
  40b950:	1a1b      	subs	r3, r3, r0
  40b952:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  40b956:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  40b95a:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
  40b95e:	f300 80a3 	bgt.w	40baa8 <RlsCalibrationFxp_UpdateUncalibrated+0x240>
  40b962:	2a01      	cmp	r2, #1
  40b964:	dd1c      	ble.n	40b9a0 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40b966:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
  40b96a:	f340 80d4 	ble.w	40bb16 <RlsCalibrationFxp_UpdateUncalibrated+0x2ae>
  40b96e:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
  40b972:	4aca      	ldr	r2, [pc, #808]	; (40bc9c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40b974:	6322      	str	r2, [r4, #48]	; 0x30
  40b976:	3901      	subs	r1, #1
  40b978:	2001      	movs	r0, #1
  40b97a:	2300      	movs	r3, #0
  40b97c:	67e1      	str	r1, [r4, #124]	; 0x7c
  40b97e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  40b982:	6123      	str	r3, [r4, #16]
  40b984:	6163      	str	r3, [r4, #20]
  40b986:	61a3      	str	r3, [r4, #24]
  40b988:	61e3      	str	r3, [r4, #28]
  40b98a:	65a3      	str	r3, [r4, #88]	; 0x58
  40b98c:	65e3      	str	r3, [r4, #92]	; 0x5c
  40b98e:	6623      	str	r3, [r4, #96]	; 0x60
  40b990:	6663      	str	r3, [r4, #100]	; 0x64
  40b992:	66a3      	str	r3, [r4, #104]	; 0x68
  40b994:	66e3      	str	r3, [r4, #108]	; 0x6c
  40b996:	6362      	str	r2, [r4, #52]	; 0x34
  40b998:	63a2      	str	r2, [r4, #56]	; 0x38
  40b99a:	63e2      	str	r2, [r4, #60]	; 0x3c
  40b99c:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
  40b9a0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  40b9a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b9a8:	4293      	cmp	r3, r2
  40b9aa:	da04      	bge.n	40b9b6 <RlsCalibrationFxp_UpdateUncalibrated+0x14e>
  40b9ac:	f8d9 1000 	ldr.w	r1, [r9]
  40b9b0:	440b      	add	r3, r1
  40b9b2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  40b9b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40b9ba:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
  40b9be:	4299      	cmp	r1, r3
  40b9c0:	dc6c      	bgt.n	40ba9c <RlsCalibrationFxp_UpdateUncalibrated+0x234>
  40b9c2:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
  40b9c6:	428b      	cmp	r3, r1
  40b9c8:	db68      	blt.n	40ba9c <RlsCalibrationFxp_UpdateUncalibrated+0x234>
  40b9ca:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
  40b9ce:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
  40b9d2:	dc63      	bgt.n	40ba9c <RlsCalibrationFxp_UpdateUncalibrated+0x234>
  40b9d4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
  40b9d8:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
  40b9dc:	f8d9 5018 	ldr.w	r5, [r9, #24]
  40b9e0:	1bc8      	subs	r0, r1, r7
  40b9e2:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
  40b9e6:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40b9ea:	42ab      	cmp	r3, r5
  40b9ec:	f340 80a0 	ble.w	40bb30 <RlsCalibrationFxp_UpdateUncalibrated+0x2c8>
  40b9f0:	f8d9 3000 	ldr.w	r3, [r9]
  40b9f4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  40b9f8:	2301      	movs	r3, #1
  40b9fa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  40b9fe:	2300      	movs	r3, #0
  40ba00:	48a6      	ldr	r0, [pc, #664]	; (40bc9c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40ba02:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  40ba06:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  40ba0a:	2310      	movs	r3, #16
  40ba0c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  40ba10:	67e0      	str	r0, [r4, #124]	; 0x7c
  40ba12:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
  40ba16:	f8d9 3020 	ldr.w	r3, [r9, #32]
  40ba1a:	4298      	cmp	r0, r3
  40ba1c:	f280 80ae 	bge.w	40bb7c <RlsCalibrationFxp_UpdateUncalibrated+0x314>
  40ba20:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
  40ba24:	429a      	cmp	r2, r3
  40ba26:	f340 80b4 	ble.w	40bb92 <RlsCalibrationFxp_UpdateUncalibrated+0x32a>
  40ba2a:	f8d9 2000 	ldr.w	r2, [r9]
  40ba2e:	f8d9 0008 	ldr.w	r0, [r9, #8]
  40ba32:	4413      	add	r3, r2
  40ba34:	2801      	cmp	r0, #1
  40ba36:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  40ba3a:	f000 838c 	beq.w	40c156 <RlsCalibrationFxp_UpdateUncalibrated+0x8ee>
  40ba3e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
  40ba42:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
  40ba46:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
  40ba4a:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  40ba4e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40ba52:	2300      	movs	r3, #0
  40ba54:	4a91      	ldr	r2, [pc, #580]	; (40bc9c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40ba56:	6123      	str	r3, [r4, #16]
  40ba58:	2002      	movs	r0, #2
  40ba5a:	469b      	mov	fp, r3
  40ba5c:	2101      	movs	r1, #1
  40ba5e:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
  40ba62:	4658      	mov	r0, fp
  40ba64:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
  40ba68:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
  40ba6c:	6163      	str	r3, [r4, #20]
  40ba6e:	61a3      	str	r3, [r4, #24]
  40ba70:	61e3      	str	r3, [r4, #28]
  40ba72:	65a3      	str	r3, [r4, #88]	; 0x58
  40ba74:	65e3      	str	r3, [r4, #92]	; 0x5c
  40ba76:	6623      	str	r3, [r4, #96]	; 0x60
  40ba78:	6663      	str	r3, [r4, #100]	; 0x64
  40ba7a:	66a3      	str	r3, [r4, #104]	; 0x68
  40ba7c:	66e3      	str	r3, [r4, #108]	; 0x6c
  40ba7e:	6322      	str	r2, [r4, #48]	; 0x30
  40ba80:	6362      	str	r2, [r4, #52]	; 0x34
  40ba82:	63a2      	str	r2, [r4, #56]	; 0x38
  40ba84:	63e2      	str	r2, [r4, #60]	; 0x3c
  40ba86:	b021      	add	sp, #132	; 0x84
  40ba88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba8c:	bb13      	cbnz	r3, 40bad4 <RlsCalibrationFxp_UpdateUncalibrated+0x26c>
  40ba8e:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
  40ba92:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ba96:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  40ba9a:	e751      	b.n	40b940 <RlsCalibrationFxp_UpdateUncalibrated+0xd8>
  40ba9c:	f04f 0b00 	mov.w	fp, #0
  40baa0:	4658      	mov	r0, fp
  40baa2:	b021      	add	sp, #132	; 0x84
  40baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40baa8:	2300      	movs	r3, #0
  40baaa:	4a7c      	ldr	r2, [pc, #496]	; (40bc9c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40baac:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  40bab0:	6123      	str	r3, [r4, #16]
  40bab2:	6163      	str	r3, [r4, #20]
  40bab4:	61a3      	str	r3, [r4, #24]
  40bab6:	61e3      	str	r3, [r4, #28]
  40bab8:	65a3      	str	r3, [r4, #88]	; 0x58
  40baba:	65e3      	str	r3, [r4, #92]	; 0x5c
  40babc:	6623      	str	r3, [r4, #96]	; 0x60
  40babe:	6663      	str	r3, [r4, #100]	; 0x64
  40bac0:	66a3      	str	r3, [r4, #104]	; 0x68
  40bac2:	66e3      	str	r3, [r4, #108]	; 0x6c
  40bac4:	67e2      	str	r2, [r4, #124]	; 0x7c
  40bac6:	6322      	str	r2, [r4, #48]	; 0x30
  40bac8:	6362      	str	r2, [r4, #52]	; 0x34
  40baca:	63a2      	str	r2, [r4, #56]	; 0x38
  40bacc:	63e2      	str	r2, [r4, #60]	; 0x3c
  40bace:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
  40bad2:	e765      	b.n	40b9a0 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40bad4:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
  40bad8:	2b02      	cmp	r3, #2
  40bada:	d042      	beq.n	40bb62 <RlsCalibrationFxp_UpdateUncalibrated+0x2fa>
  40badc:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40bae0:	2b00      	cmp	r3, #0
  40bae2:	f47f af2d 	bne.w	40b940 <RlsCalibrationFxp_UpdateUncalibrated+0xd8>
  40bae6:	2a03      	cmp	r2, #3
  40bae8:	f47f af2a 	bne.w	40b940 <RlsCalibrationFxp_UpdateUncalibrated+0xd8>
  40baec:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40baee:	f8d9 101c 	ldr.w	r1, [r9, #28]
  40baf2:	1a18      	subs	r0, r3, r0
  40baf4:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
  40baf8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40bafc:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  40bb00:	f6ff af20 	blt.w	40b944 <RlsCalibrationFxp_UpdateUncalibrated+0xdc>
  40bb04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
  40bb08:	2b00      	cmp	r3, #0
  40bb0a:	f47f af1b 	bne.w	40b944 <RlsCalibrationFxp_UpdateUncalibrated+0xdc>
  40bb0e:	2302      	movs	r3, #2
  40bb10:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
  40bb14:	e716      	b.n	40b944 <RlsCalibrationFxp_UpdateUncalibrated+0xdc>
  40bb16:	2a02      	cmp	r2, #2
  40bb18:	f43f af42 	beq.w	40b9a0 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40bb1c:	4288      	cmp	r0, r1
  40bb1e:	f77f af3f 	ble.w	40b9a0 <RlsCalibrationFxp_UpdateUncalibrated+0x138>
  40bb22:	f8d9 1060 	ldr.w	r1, [r9, #96]	; 0x60
  40bb26:	4a5d      	ldr	r2, [pc, #372]	; (40bc9c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40bb28:	6322      	str	r2, [r4, #48]	; 0x30
  40bb2a:	3901      	subs	r1, #1
  40bb2c:	2002      	movs	r0, #2
  40bb2e:	e724      	b.n	40b97a <RlsCalibrationFxp_UpdateUncalibrated+0x112>
  40bb30:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  40bb34:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  40bb38:	1a18      	subs	r0, r3, r0
  40bb3a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
  40bb3e:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40bb42:	429d      	cmp	r5, r3
  40bb44:	f6ff af54 	blt.w	40b9f0 <RlsCalibrationFxp_UpdateUncalibrated+0x188>
  40bb48:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
  40bb4c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
  40bb50:	1a18      	subs	r0, r3, r0
  40bb52:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
  40bb56:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40bb5a:	429d      	cmp	r5, r3
  40bb5c:	f6bf af59 	bge.w	40ba12 <RlsCalibrationFxp_UpdateUncalibrated+0x1aa>
  40bb60:	e746      	b.n	40b9f0 <RlsCalibrationFxp_UpdateUncalibrated+0x188>
  40bb62:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40bb64:	f8d9 101c 	ldr.w	r1, [r9, #28]
  40bb68:	1a1d      	subs	r5, r3, r0
  40bb6a:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40bb6e:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40bb72:	428b      	cmp	r3, r1
  40bb74:	dab2      	bge.n	40badc <RlsCalibrationFxp_UpdateUncalibrated+0x274>
  40bb76:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
  40bb7a:	e6e1      	b.n	40b940 <RlsCalibrationFxp_UpdateUncalibrated+0xd8>
  40bb7c:	2000      	movs	r0, #0
  40bb7e:	f8d9 3000 	ldr.w	r3, [r9]
  40bb82:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
  40bb86:	200a      	movs	r0, #10
  40bb88:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  40bb8c:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
  40bb90:	e748      	b.n	40ba24 <RlsCalibrationFxp_UpdateUncalibrated+0x1bc>
  40bb92:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40bb96:	f8d8 1014 	ldr.w	r1, [r8, #20]
  40bb9a:	6965      	ldr	r5, [r4, #20]
  40bb9c:	f8d8 2018 	ldr.w	r2, [r8, #24]
  40bba0:	69e6      	ldr	r6, [r4, #28]
  40bba2:	69a0      	ldr	r0, [r4, #24]
  40bba4:	4119      	asrs	r1, r3
  40bba6:	1b4d      	subs	r5, r1, r5
  40bba8:	f8d8 101c 	ldr.w	r1, [r8, #28]
  40bbac:	411a      	asrs	r2, r3
  40bbae:	fa41 f303 	asr.w	r3, r1, r3
  40bbb2:	1b9e      	subs	r6, r3, r6
  40bbb4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
  40bbb8:	1a12      	subs	r2, r2, r0
  40bbba:	1ad2      	subs	r2, r2, r3
  40bbbc:	1bef      	subs	r7, r5, r7
  40bbbe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  40bbc2:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
  40bbc6:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
  40bbca:	1af3      	subs	r3, r6, r3
  40bbcc:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40bbd0:	f04f 0a01 	mov.w	sl, #1
  40bbd4:	f04f 0b00 	mov.w	fp, #0
  40bbd8:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  40bbdc:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
  40bbe0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  40bbe4:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
  40bbe8:	4608      	mov	r0, r1
  40bbea:	f8c4 a120 	str.w	sl, [r4, #288]	; 0x120
  40bbee:	f8c4 b118 	str.w	fp, [r4, #280]	; 0x118
  40bbf2:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  40bbf6:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
  40bbfa:	f7fe febf 	bl	40a97c <invn_math_mult_q15_fxp>
  40bbfe:	4629      	mov	r1, r5
  40bc00:	4607      	mov	r7, r0
  40bc02:	4628      	mov	r0, r5
  40bc04:	f7fe feba 	bl	40a97c <invn_math_mult_q15_fxp>
  40bc08:	4631      	mov	r1, r6
  40bc0a:	4407      	add	r7, r0
  40bc0c:	4630      	mov	r0, r6
  40bc0e:	f7fe feb5 	bl	40a97c <invn_math_mult_q15_fxp>
  40bc12:	4438      	add	r0, r7
  40bc14:	f7fe fec4 	bl	40a9a0 <invn_math_sqrt_q15_fxp>
  40bc18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
  40bc1c:	6760      	str	r0, [r4, #116]	; 0x74
  40bc1e:	4553      	cmp	r3, sl
  40bc20:	d03e      	beq.n	40bca0 <RlsCalibrationFxp_UpdateUncalibrated+0x438>
  40bc22:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  40bc24:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
  40bc28:	4291      	cmp	r1, r2
  40bc2a:	dc39      	bgt.n	40bca0 <RlsCalibrationFxp_UpdateUncalibrated+0x438>
  40bc2c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40bc2e:	f8d9 101c 	ldr.w	r1, [r9, #28]
  40bc32:	1a10      	subs	r0, r2, r0
  40bc34:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
  40bc38:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
  40bc3c:	428a      	cmp	r2, r1
  40bc3e:	dd2f      	ble.n	40bca0 <RlsCalibrationFxp_UpdateUncalibrated+0x438>
  40bc40:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
  40bc44:	4553      	cmp	r3, sl
  40bc46:	f000 840d 	beq.w	40c464 <RlsCalibrationFxp_UpdateUncalibrated+0xbfc>
  40bc4a:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40bc4e:	f8d9 2000 	ldr.w	r2, [r9]
  40bc52:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  40bc56:	4553      	cmp	r3, sl
  40bc58:	f8c4 a110 	str.w	sl, [r4, #272]	; 0x110
  40bc5c:	f8c4 a10c 	str.w	sl, [r4, #268]	; 0x10c
  40bc60:	f000 840d 	beq.w	40c47e <RlsCalibrationFxp_UpdateUncalibrated+0xc16>
  40bc64:	f104 01ac 	add.w	r1, r4, #172	; 0xac
  40bc68:	c90e      	ldmia	r1, {r1, r2, r3}
  40bc6a:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
  40bc6e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  40bc72:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40bc76:	2300      	movs	r3, #0
  40bc78:	4a08      	ldr	r2, [pc, #32]	; (40bc9c <RlsCalibrationFxp_UpdateUncalibrated+0x434>)
  40bc7a:	6123      	str	r3, [r4, #16]
  40bc7c:	6163      	str	r3, [r4, #20]
  40bc7e:	61a3      	str	r3, [r4, #24]
  40bc80:	61e3      	str	r3, [r4, #28]
  40bc82:	65a3      	str	r3, [r4, #88]	; 0x58
  40bc84:	65e3      	str	r3, [r4, #92]	; 0x5c
  40bc86:	6623      	str	r3, [r4, #96]	; 0x60
  40bc88:	6663      	str	r3, [r4, #100]	; 0x64
  40bc8a:	66a3      	str	r3, [r4, #104]	; 0x68
  40bc8c:	66e3      	str	r3, [r4, #108]	; 0x6c
  40bc8e:	469b      	mov	fp, r3
  40bc90:	6322      	str	r2, [r4, #48]	; 0x30
  40bc92:	6362      	str	r2, [r4, #52]	; 0x34
  40bc94:	63a2      	str	r2, [r4, #56]	; 0x38
  40bc96:	63e2      	str	r2, [r4, #60]	; 0x3c
  40bc98:	e702      	b.n	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40bc9a:	bf00      	nop
  40bc9c:	0007a120 	.word	0x0007a120
  40bca0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
  40bca4:	2a01      	cmp	r2, #1
  40bca6:	f000 823d 	beq.w	40c124 <RlsCalibrationFxp_UpdateUncalibrated+0x8bc>
  40bcaa:	f8d9 0004 	ldr.w	r0, [r9, #4]
  40bcae:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
  40bcb2:	9005      	str	r0, [sp, #20]
  40bcb4:	2004      	movs	r0, #4
  40bcb6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
  40bcba:	2900      	cmp	r1, #0
  40bcbc:	f040 8249 	bne.w	40c152 <RlsCalibrationFxp_UpdateUncalibrated+0x8ea>
  40bcc0:	2a00      	cmp	r2, #0
  40bcc2:	f040 8246 	bne.w	40c152 <RlsCalibrationFxp_UpdateUncalibrated+0x8ea>
  40bcc6:	3300      	adds	r3, #0
  40bcc8:	bf18      	it	ne
  40bcca:	2301      	movne	r3, #1
  40bccc:	f8d4 c0e0 	ldr.w	ip, [r4, #224]	; 0xe0
  40bcd0:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
  40bcd4:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
  40bcd8:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  40bcdc:	f8d4 70f4 	ldr.w	r7, [r4, #244]	; 0xf4
  40bce0:	f8d4 e0e4 	ldr.w	lr, [r4, #228]	; 0xe4
  40bce4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
  40bce8:	fb8c 2302 	smull	r2, r3, ip, r2
  40bcec:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
  40bcf0:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
  40bcf4:	fbc6 2300 	smlal	r2, r3, r6, r0
  40bcf8:	fbc7 230e 	smlal	r2, r3, r7, lr
  40bcfc:	fbc1 2305 	smlal	r2, r3, r1, r5
  40bd00:	ea4f 7b92 	mov.w	fp, r2, lsr #30
  40bd04:	ea4b 0b83 	orr.w	fp, fp, r3, lsl #2
  40bd08:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  40bd0c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
  40bd10:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
  40bd14:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
  40bd18:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
  40bd1c:	eba3 0a01 	sub.w	sl, r3, r1
  40bd20:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
  40bd24:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
  40bd28:	1bdf      	subs	r7, r3, r7
  40bd2a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
  40bd2e:	1a52      	subs	r2, r2, r1
  40bd30:	459b      	cmp	fp, r3
  40bd32:	4616      	mov	r6, r2
  40bd34:	9204      	str	r2, [sp, #16]
  40bd36:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  40bd3a:	9a05      	ldr	r2, [sp, #20]
  40bd3c:	f280 8213 	bge.w	40c166 <RlsCalibrationFxp_UpdateUncalibrated+0x8fe>
  40bd40:	4293      	cmp	r3, r2
  40bd42:	f280 8213 	bge.w	40c16c <RlsCalibrationFxp_UpdateUncalibrated+0x904>
  40bd46:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
  40bd4a:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
  40bd4e:	eba2 0b0a 	sub.w	fp, r2, sl
  40bd52:	ea8b 72eb 	eor.w	r2, fp, fp, asr #31
  40bd56:	eba2 72eb 	sub.w	r2, r2, fp, asr #31
  40bd5a:	428a      	cmp	r2, r1
  40bd5c:	f300 8274 	bgt.w	40c248 <RlsCalibrationFxp_UpdateUncalibrated+0x9e0>
  40bd60:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
  40bd64:	eba2 0b07 	sub.w	fp, r2, r7
  40bd68:	ea8b 72eb 	eor.w	r2, fp, fp, asr #31
  40bd6c:	eba2 72eb 	sub.w	r2, r2, fp, asr #31
  40bd70:	4291      	cmp	r1, r2
  40bd72:	f2c0 8269 	blt.w	40c248 <RlsCalibrationFxp_UpdateUncalibrated+0x9e0>
  40bd76:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
  40bd7a:	1b96      	subs	r6, r2, r6
  40bd7c:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
  40bd80:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
  40bd84:	4291      	cmp	r1, r2
  40bd86:	f2c0 825f 	blt.w	40c248 <RlsCalibrationFxp_UpdateUncalibrated+0x9e0>
  40bd8a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
  40bd8e:	2a03      	cmp	r2, #3
  40bd90:	f000 825a 	beq.w	40c248 <RlsCalibrationFxp_UpdateUncalibrated+0x9e0>
  40bd94:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40bd98:	2a00      	cmp	r2, #0
  40bd9a:	f43f ae7f 	beq.w	40ba9c <RlsCalibrationFxp_UpdateUncalibrated+0x234>
  40bd9e:	2200      	movs	r2, #0
  40bda0:	9208      	str	r2, [sp, #32]
  40bda2:	f8d4 b11c 	ldr.w	fp, [r4, #284]	; 0x11c
  40bda6:	f1bb 0f00 	cmp.w	fp, #0
  40bdaa:	f040 820f 	bne.w	40c1cc <RlsCalibrationFxp_UpdateUncalibrated+0x964>
  40bdae:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
  40bdb2:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
  40bdb6:	2d00      	cmp	r5, #0
  40bdb8:	dd36      	ble.n	40be28 <RlsCalibrationFxp_UpdateUncalibrated+0x5c0>
  40bdba:	9e04      	ldr	r6, [sp, #16]
  40bdbc:	fb87 0107 	smull	r0, r1, r7, r7
  40bdc0:	fbca 010a 	smlal	r0, r1, sl, sl
  40bdc4:	fbc6 0106 	smlal	r0, r1, r6, r6
  40bdc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40bdcc:	9907      	ldr	r1, [sp, #28]
  40bdce:	0bc2      	lsrs	r2, r0, #15
  40bdd0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
  40bdd4:	0071      	lsls	r1, r6, #1
  40bdd6:	911f      	str	r1, [sp, #124]	; 0x7c
  40bdd8:	9905      	ldr	r1, [sp, #20]
  40bdda:	48b7      	ldr	r0, [pc, #732]	; (40c0b8 <RlsCalibrationFxp_UpdateUncalibrated+0x850>)
  40bddc:	901c      	str	r0, [sp, #112]	; 0x70
  40bdde:	3d01      	subs	r5, #1
  40bde0:	fab5 fb85 	clz	fp, r5
  40bde4:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
  40bde8:	ea4f 004a 	mov.w	r0, sl, lsl #1
  40bdec:	007d      	lsls	r5, r7, #1
  40bdee:	428b      	cmp	r3, r1
  40bdf0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
  40bdf4:	901d      	str	r0, [sp, #116]	; 0x74
  40bdf6:	951e      	str	r5, [sp, #120]	; 0x78
  40bdf8:	f2c0 824b 	blt.w	40c292 <RlsCalibrationFxp_UpdateUncalibrated+0xa2a>
  40bdfc:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
  40be00:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
  40be04:	9302      	str	r3, [sp, #8]
  40be06:	f104 0358 	add.w	r3, r4, #88	; 0x58
  40be0a:	9101      	str	r1, [sp, #4]
  40be0c:	9300      	str	r3, [sp, #0]
  40be0e:	a91c      	add	r1, sp, #112	; 0x70
  40be10:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40be14:	f104 0010 	add.w	r0, r4, #16
  40be18:	f001 fc32 	bl	40d680 <rls_core_Bierman4_fxp>
  40be1c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
  40be20:	4298      	cmp	r0, r3
  40be22:	bfc8      	it	gt
  40be24:	f8c4 0114 	strgt.w	r0, [r4, #276]	; 0x114
  40be28:	9b08      	ldr	r3, [sp, #32]
  40be2a:	2b00      	cmp	r3, #0
  40be2c:	f000 8123 	beq.w	40c076 <RlsCalibrationFxp_UpdateUncalibrated+0x80e>
  40be30:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
  40be34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40be38:	930d      	str	r3, [sp, #52]	; 0x34
  40be3a:	9311      	str	r3, [sp, #68]	; 0x44
  40be3c:	9315      	str	r3, [sp, #84]	; 0x54
  40be3e:	2a01      	cmp	r2, #1
  40be40:	f04f 0300 	mov.w	r3, #0
  40be44:	930e      	str	r3, [sp, #56]	; 0x38
  40be46:	930f      	str	r3, [sp, #60]	; 0x3c
  40be48:	9310      	str	r3, [sp, #64]	; 0x40
  40be4a:	9312      	str	r3, [sp, #72]	; 0x48
  40be4c:	9313      	str	r3, [sp, #76]	; 0x4c
  40be4e:	9314      	str	r3, [sp, #80]	; 0x50
  40be50:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
  40be54:	f340 830d 	ble.w	40c472 <RlsCalibrationFxp_UpdateUncalibrated+0xc0a>
  40be58:	9305      	str	r3, [sp, #20]
  40be5a:	f104 03ec 	add.w	r3, r4, #236	; 0xec
  40be5e:	4618      	mov	r0, r3
  40be60:	9306      	str	r3, [sp, #24]
  40be62:	f104 03dc 	add.w	r3, r4, #220	; 0xdc
  40be66:	461d      	mov	r5, r3
  40be68:	aa16      	add	r2, sp, #88	; 0x58
  40be6a:	a90d      	add	r1, sp, #52	; 0x34
  40be6c:	9309      	str	r3, [sp, #36]	; 0x24
  40be6e:	f7fe fcf7 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40be72:	4628      	mov	r0, r5
  40be74:	a90d      	add	r1, sp, #52	; 0x34
  40be76:	aa19      	add	r2, sp, #100	; 0x64
  40be78:	f7fe fcf2 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40be7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40be7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40be80:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40be82:	9816      	ldr	r0, [sp, #88]	; 0x58
  40be84:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40be86:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
  40be8a:	1ad2      	subs	r2, r2, r3
  40be8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40be8e:	1b45      	subs	r5, r0, r5
  40be90:	1af3      	subs	r3, r6, r3
  40be92:	13d2      	asrs	r2, r2, #15
  40be94:	13db      	asrs	r3, r3, #15
  40be96:	13ed      	asrs	r5, r5, #15
  40be98:	2600      	movs	r6, #0
  40be9a:	921e      	str	r2, [sp, #120]	; 0x78
  40be9c:	931f      	str	r3, [sp, #124]	; 0x7c
  40be9e:	951d      	str	r5, [sp, #116]	; 0x74
  40bea0:	961c      	str	r6, [sp, #112]	; 0x70
  40bea2:	f7fe fd77 	bl	40a994 <invn_math_mult_q30_fxp>
  40bea6:	4651      	mov	r1, sl
  40bea8:	4606      	mov	r6, r0
  40beaa:	9819      	ldr	r0, [sp, #100]	; 0x64
  40beac:	f7fe fd72 	bl	40a994 <invn_math_mult_q30_fxp>
  40beb0:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
  40beb4:	1a36      	subs	r6, r6, r0
  40beb6:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40beb8:	f7fe fd6c 	bl	40a994 <invn_math_mult_q30_fxp>
  40bebc:	4639      	mov	r1, r7
  40bebe:	4406      	add	r6, r0
  40bec0:	981a      	ldr	r0, [sp, #104]	; 0x68
  40bec2:	f7fe fd67 	bl	40a994 <invn_math_mult_q30_fxp>
  40bec6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
  40beca:	1a36      	subs	r6, r6, r0
  40becc:	9818      	ldr	r0, [sp, #96]	; 0x60
  40bece:	f7fe fd61 	bl	40a994 <invn_math_mult_q30_fxp>
  40bed2:	9904      	ldr	r1, [sp, #16]
  40bed4:	4406      	add	r6, r0
  40bed6:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40bed8:	f7fe fd5c 	bl	40a994 <invn_math_mult_q30_fxp>
  40bedc:	f104 0310 	add.w	r3, r4, #16
  40bee0:	f104 0258 	add.w	r2, r4, #88	; 0x58
  40bee4:	4619      	mov	r1, r3
  40bee6:	9208      	str	r2, [sp, #32]
  40bee8:	9a05      	ldr	r2, [sp, #20]
  40beea:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
  40beee:	9202      	str	r2, [sp, #8]
  40bef0:	1a32      	subs	r2, r6, r0
  40bef2:	4608      	mov	r0, r1
  40bef4:	9908      	ldr	r1, [sp, #32]
  40bef6:	930a      	str	r3, [sp, #40]	; 0x28
  40bef8:	9100      	str	r1, [sp, #0]
  40befa:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40befe:	a91c      	add	r1, sp, #112	; 0x70
  40bf00:	9501      	str	r5, [sp, #4]
  40bf02:	930b      	str	r3, [sp, #44]	; 0x2c
  40bf04:	f001 fbbc 	bl	40d680 <rls_core_Bierman4_fxp>
  40bf08:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
  40bf0c:	4298      	cmp	r0, r3
  40bf0e:	bfc8      	it	gt
  40bf10:	f8c4 0114 	strgt.w	r0, [r4, #276]	; 0x114
  40bf14:	a910      	add	r1, sp, #64	; 0x40
  40bf16:	aa16      	add	r2, sp, #88	; 0x58
  40bf18:	9806      	ldr	r0, [sp, #24]
  40bf1a:	f7fe fca1 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40bf1e:	aa19      	add	r2, sp, #100	; 0x64
  40bf20:	a910      	add	r1, sp, #64	; 0x40
  40bf22:	9809      	ldr	r0, [sp, #36]	; 0x24
  40bf24:	f7fe fc9c 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40bf28:	9816      	ldr	r0, [sp, #88]	; 0x58
  40bf2a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40bf2c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40bf2e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40bf30:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40bf32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bf34:	1a41      	subs	r1, r0, r1
  40bf36:	1ab2      	subs	r2, r6, r2
  40bf38:	1aeb      	subs	r3, r5, r3
  40bf3a:	13c9      	asrs	r1, r1, #15
  40bf3c:	13d2      	asrs	r2, r2, #15
  40bf3e:	13db      	asrs	r3, r3, #15
  40bf40:	2500      	movs	r5, #0
  40bf42:	911d      	str	r1, [sp, #116]	; 0x74
  40bf44:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
  40bf48:	921e      	str	r2, [sp, #120]	; 0x78
  40bf4a:	931f      	str	r3, [sp, #124]	; 0x7c
  40bf4c:	951c      	str	r5, [sp, #112]	; 0x70
  40bf4e:	f7fe fd21 	bl	40a994 <invn_math_mult_q30_fxp>
  40bf52:	4651      	mov	r1, sl
  40bf54:	4605      	mov	r5, r0
  40bf56:	9819      	ldr	r0, [sp, #100]	; 0x64
  40bf58:	f7fe fd1c 	bl	40a994 <invn_math_mult_q30_fxp>
  40bf5c:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
  40bf60:	1a2d      	subs	r5, r5, r0
  40bf62:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40bf64:	f7fe fd16 	bl	40a994 <invn_math_mult_q30_fxp>
  40bf68:	4639      	mov	r1, r7
  40bf6a:	4405      	add	r5, r0
  40bf6c:	981a      	ldr	r0, [sp, #104]	; 0x68
  40bf6e:	f7fe fd11 	bl	40a994 <invn_math_mult_q30_fxp>
  40bf72:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
  40bf76:	1a2d      	subs	r5, r5, r0
  40bf78:	9818      	ldr	r0, [sp, #96]	; 0x60
  40bf7a:	f7fe fd0b 	bl	40a994 <invn_math_mult_q30_fxp>
  40bf7e:	9904      	ldr	r1, [sp, #16]
  40bf80:	4405      	add	r5, r0
  40bf82:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40bf84:	f7fe fd06 	bl	40a994 <invn_math_mult_q30_fxp>
  40bf88:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
  40bf8c:	9908      	ldr	r1, [sp, #32]
  40bf8e:	9a05      	ldr	r2, [sp, #20]
  40bf90:	9202      	str	r2, [sp, #8]
  40bf92:	e88d 000a 	stmia.w	sp, {r1, r3}
  40bf96:	1a2a      	subs	r2, r5, r0
  40bf98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bf9a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bf9c:	a91c      	add	r1, sp, #112	; 0x70
  40bf9e:	f001 fb6f 	bl	40d680 <rls_core_Bierman4_fxp>
  40bfa2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
  40bfa6:	4298      	cmp	r0, r3
  40bfa8:	bfc8      	it	gt
  40bfaa:	f8c4 0114 	strgt.w	r0, [r4, #276]	; 0x114
  40bfae:	aa16      	add	r2, sp, #88	; 0x58
  40bfb0:	9806      	ldr	r0, [sp, #24]
  40bfb2:	a913      	add	r1, sp, #76	; 0x4c
  40bfb4:	f7fe fc54 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40bfb8:	aa19      	add	r2, sp, #100	; 0x64
  40bfba:	a913      	add	r1, sp, #76	; 0x4c
  40bfbc:	9809      	ldr	r0, [sp, #36]	; 0x24
  40bfbe:	f7fe fc4f 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40bfc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40bfc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40bfc6:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40bfc8:	9816      	ldr	r0, [sp, #88]	; 0x58
  40bfca:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40bfcc:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
  40bfd0:	1ad2      	subs	r2, r2, r3
  40bfd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bfd4:	1b45      	subs	r5, r0, r5
  40bfd6:	1af3      	subs	r3, r6, r3
  40bfd8:	13d2      	asrs	r2, r2, #15
  40bfda:	13db      	asrs	r3, r3, #15
  40bfdc:	13ed      	asrs	r5, r5, #15
  40bfde:	2600      	movs	r6, #0
  40bfe0:	921e      	str	r2, [sp, #120]	; 0x78
  40bfe2:	931f      	str	r3, [sp, #124]	; 0x7c
  40bfe4:	951d      	str	r5, [sp, #116]	; 0x74
  40bfe6:	961c      	str	r6, [sp, #112]	; 0x70
  40bfe8:	f7fe fcd4 	bl	40a994 <invn_math_mult_q30_fxp>
  40bfec:	4651      	mov	r1, sl
  40bfee:	4606      	mov	r6, r0
  40bff0:	9819      	ldr	r0, [sp, #100]	; 0x64
  40bff2:	f7fe fccf 	bl	40a994 <invn_math_mult_q30_fxp>
  40bff6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
  40bffa:	1a36      	subs	r6, r6, r0
  40bffc:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40bffe:	f7fe fcc9 	bl	40a994 <invn_math_mult_q30_fxp>
  40c002:	4639      	mov	r1, r7
  40c004:	4406      	add	r6, r0
  40c006:	981a      	ldr	r0, [sp, #104]	; 0x68
  40c008:	f7fe fcc4 	bl	40a994 <invn_math_mult_q30_fxp>
  40c00c:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
  40c010:	1a36      	subs	r6, r6, r0
  40c012:	9818      	ldr	r0, [sp, #96]	; 0x60
  40c014:	f7fe fcbe 	bl	40a994 <invn_math_mult_q30_fxp>
  40c018:	9904      	ldr	r1, [sp, #16]
  40c01a:	4406      	add	r6, r0
  40c01c:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40c01e:	f7fe fcb9 	bl	40a994 <invn_math_mult_q30_fxp>
  40c022:	9b05      	ldr	r3, [sp, #20]
  40c024:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
  40c028:	9302      	str	r3, [sp, #8]
  40c02a:	9b08      	ldr	r3, [sp, #32]
  40c02c:	9300      	str	r3, [sp, #0]
  40c02e:	1a32      	subs	r2, r6, r0
  40c030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c032:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c034:	9501      	str	r5, [sp, #4]
  40c036:	a91c      	add	r1, sp, #112	; 0x70
  40c038:	f001 fb22 	bl	40d680 <rls_core_Bierman4_fxp>
  40c03c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
  40c040:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
  40c044:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
  40c048:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
  40c04c:	4298      	cmp	r0, r3
  40c04e:	9b04      	ldr	r3, [sp, #16]
  40c050:	bfc8      	it	gt
  40c052:	f8c4 0114 	strgt.w	r0, [r4, #276]	; 0x114
  40c056:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  40c05a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
  40c05e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
  40c062:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
  40c066:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
  40c06a:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
  40c06e:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
  40c072:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
  40c076:	f8d9 3008 	ldr.w	r3, [r9, #8]
  40c07a:	2b01      	cmp	r3, #1
  40c07c:	f040 80ba 	bne.w	40c1f4 <RlsCalibrationFxp_UpdateUncalibrated+0x98c>
  40c080:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  40c082:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40c084:	6b62      	ldr	r2, [r4, #52]	; 0x34
  40c086:	4298      	cmp	r0, r3
  40c088:	bfb8      	it	lt
  40c08a:	4618      	movlt	r0, r3
  40c08c:	4290      	cmp	r0, r2
  40c08e:	bfb8      	it	lt
  40c090:	4610      	movlt	r0, r2
  40c092:	67a0      	str	r0, [r4, #120]	; 0x78
  40c094:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  40c096:	b18a      	cbz	r2, 40c0bc <RlsCalibrationFxp_UpdateUncalibrated+0x854>
  40c098:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
  40c09c:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
  40c0a0:	105b      	asrs	r3, r3, #1
  40c0a2:	429a      	cmp	r2, r3
  40c0a4:	db0c      	blt.n	40c0c0 <RlsCalibrationFxp_UpdateUncalibrated+0x858>
  40c0a6:	428a      	cmp	r2, r1
  40c0a8:	f2c0 81e7 	blt.w	40c47a <RlsCalibrationFxp_UpdateUncalibrated+0xc12>
  40c0ac:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
  40c0b0:	429a      	cmp	r2, r3
  40c0b2:	db05      	blt.n	40c0c0 <RlsCalibrationFxp_UpdateUncalibrated+0x858>
  40c0b4:	e002      	b.n	40c0bc <RlsCalibrationFxp_UpdateUncalibrated+0x854>
  40c0b6:	bf00      	nop
  40c0b8:	ffff8000 	.word	0xffff8000
  40c0bc:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  40c0c0:	4283      	cmp	r3, r0
  40c0c2:	f77f aced 	ble.w	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c0c6:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
  40c0ca:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
  40c0ce:	429a      	cmp	r2, r3
  40c0d0:	f2c0 80fe 	blt.w	40c2d0 <RlsCalibrationFxp_UpdateUncalibrated+0xa68>
  40c0d4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
  40c0d8:	3301      	adds	r3, #1
  40c0da:	2b05      	cmp	r3, #5
  40c0dc:	f340 81be 	ble.w	40c45c <RlsCalibrationFxp_UpdateUncalibrated+0xbf4>
  40c0e0:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40c0e4:	2300      	movs	r3, #0
  40c0e6:	2a01      	cmp	r2, #1
  40c0e8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  40c0ec:	f000 81cf 	beq.w	40c48e <RlsCalibrationFxp_UpdateUncalibrated+0xc26>
  40c0f0:	f104 01ac 	add.w	r1, r4, #172	; 0xac
  40c0f4:	c90e      	ldmia	r1, {r1, r2, r3}
  40c0f6:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
  40c0fa:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  40c0fe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40c102:	2300      	movs	r3, #0
  40c104:	4a70      	ldr	r2, [pc, #448]	; (40c2c8 <RlsCalibrationFxp_UpdateUncalibrated+0xa60>)
  40c106:	6123      	str	r3, [r4, #16]
  40c108:	6163      	str	r3, [r4, #20]
  40c10a:	61a3      	str	r3, [r4, #24]
  40c10c:	61e3      	str	r3, [r4, #28]
  40c10e:	65a3      	str	r3, [r4, #88]	; 0x58
  40c110:	65e3      	str	r3, [r4, #92]	; 0x5c
  40c112:	6623      	str	r3, [r4, #96]	; 0x60
  40c114:	6663      	str	r3, [r4, #100]	; 0x64
  40c116:	66a3      	str	r3, [r4, #104]	; 0x68
  40c118:	66e3      	str	r3, [r4, #108]	; 0x6c
  40c11a:	6322      	str	r2, [r4, #48]	; 0x30
  40c11c:	6362      	str	r2, [r4, #52]	; 0x34
  40c11e:	63a2      	str	r2, [r4, #56]	; 0x38
  40c120:	63e2      	str	r2, [r4, #60]	; 0x3c
  40c122:	e4bd      	b.n	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c124:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
  40c128:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
  40c12c:	429a      	cmp	r2, r3
  40c12e:	f280 80a1 	bge.w	40c274 <RlsCalibrationFxp_UpdateUncalibrated+0xa0c>
  40c132:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40c136:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
  40c13a:	9205      	str	r2, [sp, #20]
  40c13c:	4293      	cmp	r3, r2
  40c13e:	f280 8099 	bge.w	40c274 <RlsCalibrationFxp_UpdateUncalibrated+0xa0c>
  40c142:	f8d9 2000 	ldr.w	r2, [r9]
  40c146:	2107      	movs	r1, #7
  40c148:	4413      	add	r3, r2
  40c14a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
  40c14e:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
  40c152:	2301      	movs	r3, #1
  40c154:	e5ba      	b.n	40bccc <RlsCalibrationFxp_UpdateUncalibrated+0x464>
  40c156:	2300      	movs	r3, #0
  40c158:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  40c15c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  40c160:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40c164:	e475      	b.n	40ba52 <RlsCalibrationFxp_UpdateUncalibrated+0x1ea>
  40c166:	4293      	cmp	r3, r2
  40c168:	f6ff ae14 	blt.w	40bd94 <RlsCalibrationFxp_UpdateUncalibrated+0x52c>
  40c16c:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
  40c170:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
  40c174:	eba2 060a 	sub.w	r6, r2, sl
  40c178:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
  40c17c:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
  40c180:	428a      	cmp	r2, r1
  40c182:	dc13      	bgt.n	40c1ac <RlsCalibrationFxp_UpdateUncalibrated+0x944>
  40c184:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
  40c188:	1bd6      	subs	r6, r2, r7
  40c18a:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
  40c18e:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
  40c192:	4291      	cmp	r1, r2
  40c194:	db0a      	blt.n	40c1ac <RlsCalibrationFxp_UpdateUncalibrated+0x944>
  40c196:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
  40c19a:	9e04      	ldr	r6, [sp, #16]
  40c19c:	1b96      	subs	r6, r2, r6
  40c19e:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
  40c1a2:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
  40c1a6:	4291      	cmp	r1, r2
  40c1a8:	f6bf adf4 	bge.w	40bd94 <RlsCalibrationFxp_UpdateUncalibrated+0x52c>
  40c1ac:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40c1b0:	9904      	ldr	r1, [sp, #16]
  40c1b2:	f8c4 a0d0 	str.w	sl, [r4, #208]	; 0xd0
  40c1b6:	2a01      	cmp	r2, #1
  40c1b8:	bf14      	ite	ne
  40c1ba:	2202      	movne	r2, #2
  40c1bc:	220a      	moveq	r2, #10
  40c1be:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
  40c1c2:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
  40c1c6:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
  40c1ca:	e5e3      	b.n	40bd94 <RlsCalibrationFxp_UpdateUncalibrated+0x52c>
  40c1cc:	2300      	movs	r3, #0
  40c1ce:	9a04      	ldr	r2, [sp, #16]
  40c1d0:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
  40c1d4:	f8c4 c0f0 	str.w	ip, [r4, #240]	; 0xf0
  40c1d8:	f8c4 e0f4 	str.w	lr, [r4, #244]	; 0xf4
  40c1dc:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
  40c1e0:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
  40c1e4:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
  40c1e8:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
  40c1ec:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
  40c1f0:	469b      	mov	fp, r3
  40c1f2:	e455      	b.n	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c1f4:	6e21      	ldr	r1, [r4, #96]	; 0x60
  40c1f6:	6b66      	ldr	r6, [r4, #52]	; 0x34
  40c1f8:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
  40c1fc:	4608      	mov	r0, r1
  40c1fe:	f7fe fbbd 	bl	40a97c <invn_math_mult_q15_fxp>
  40c202:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  40c204:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  40c206:	4607      	mov	r7, r0
  40c208:	4608      	mov	r0, r1
  40c20a:	f7fe fbb7 	bl	40a97c <invn_math_mult_q15_fxp>
  40c20e:	fb85 0100 	smull	r0, r1, r5, r0
  40c212:	fbc7 010a 	smlal	r0, r1, r7, sl
  40c216:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40c218:	6be7      	ldr	r7, [r4, #60]	; 0x3c
  40c21a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  40c21c:	0bc2      	lsrs	r2, r0, #15
  40c21e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
  40c222:	4618      	mov	r0, r3
  40c224:	4619      	mov	r1, r3
  40c226:	4416      	add	r6, r2
  40c228:	f7fe fba8 	bl	40a97c <invn_math_mult_q15_fxp>
  40c22c:	4601      	mov	r1, r0
  40c22e:	4638      	mov	r0, r7
  40c230:	f7fe fba4 	bl	40a97c <invn_math_mult_q15_fxp>
  40c234:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40c236:	4428      	add	r0, r5
  40c238:	4298      	cmp	r0, r3
  40c23a:	bfb8      	it	lt
  40c23c:	4618      	movlt	r0, r3
  40c23e:	42b0      	cmp	r0, r6
  40c240:	bfb8      	it	lt
  40c242:	4630      	movlt	r0, r6
  40c244:	67a0      	str	r0, [r4, #120]	; 0x78
  40c246:	e725      	b.n	40c094 <RlsCalibrationFxp_UpdateUncalibrated+0x82c>
  40c248:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40c24c:	9e04      	ldr	r6, [sp, #16]
  40c24e:	f8c4 a0d0 	str.w	sl, [r4, #208]	; 0xd0
  40c252:	2a01      	cmp	r2, #1
  40c254:	f04f 0200 	mov.w	r2, #0
  40c258:	bf14      	ite	ne
  40c25a:	2101      	movne	r1, #1
  40c25c:	210a      	moveq	r1, #10
  40c25e:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
  40c262:	2201      	movs	r2, #1
  40c264:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
  40c268:	f8c4 60d8 	str.w	r6, [r4, #216]	; 0xd8
  40c26c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
  40c270:	9208      	str	r2, [sp, #32]
  40c272:	e596      	b.n	40bda2 <RlsCalibrationFxp_UpdateUncalibrated+0x53a>
  40c274:	f8d9 3000 	ldr.w	r3, [r9]
  40c278:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
  40c27c:	2106      	movs	r1, #6
  40c27e:	2300      	movs	r3, #0
  40c280:	2201      	movs	r2, #1
  40c282:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
  40c286:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
  40c28a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  40c28e:	469b      	mov	fp, r3
  40c290:	e406      	b.n	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c292:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
  40c296:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
  40c29a:	4b0c      	ldr	r3, [pc, #48]	; (40c2cc <RlsCalibrationFxp_UpdateUncalibrated+0xa64>)
  40c29c:	0049      	lsls	r1, r1, #1
  40c29e:	fb83 5601 	smull	r5, r6, r3, r1
  40c2a2:	fb83 5300 	smull	r5, r3, r3, r0
  40c2a6:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
  40c2aa:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  40c2ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40c2b2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
  40c2b6:	f104 0330 	add.w	r3, r4, #48	; 0x30
  40c2ba:	a91c      	add	r1, sp, #112	; 0x70
  40c2bc:	f104 0010 	add.w	r0, r4, #16
  40c2c0:	f001 f9de 	bl	40d680 <rls_core_Bierman4_fxp>
  40c2c4:	e5aa      	b.n	40be1c <RlsCalibrationFxp_UpdateUncalibrated+0x5b4>
  40c2c6:	bf00      	nop
  40c2c8:	0007a120 	.word	0x0007a120
  40c2cc:	55555556 	.word	0x55555556
  40c2d0:	6960      	ldr	r0, [r4, #20]
  40c2d2:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
  40c2d6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
  40c2da:	f8d8 3014 	ldr.w	r3, [r8, #20]
  40c2de:	69a1      	ldr	r1, [r4, #24]
  40c2e0:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
  40c2e4:	69e2      	ldr	r2, [r4, #28]
  40c2e6:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
  40c2ea:	4407      	add	r7, r0
  40c2ec:	fa07 f70e 	lsl.w	r7, r7, lr
  40c2f0:	1bdb      	subs	r3, r3, r7
  40c2f2:	440e      	add	r6, r1
  40c2f4:	fa43 f10e 	asr.w	r1, r3, lr
  40c2f8:	f8d8 3018 	ldr.w	r3, [r8, #24]
  40c2fc:	f8d8 001c 	ldr.w	r0, [r8, #28]
  40c300:	fa06 f60e 	lsl.w	r6, r6, lr
  40c304:	4415      	add	r5, r2
  40c306:	eba3 0a06 	sub.w	sl, r3, r6
  40c30a:	fa05 f30e 	lsl.w	r3, r5, lr
  40c30e:	9304      	str	r3, [sp, #16]
  40c310:	1ac3      	subs	r3, r0, r3
  40c312:	fa4a fa0e 	asr.w	sl, sl, lr
  40c316:	fa43 f30e 	asr.w	r3, r3, lr
  40c31a:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
  40c31e:	2200      	movs	r2, #0
  40c320:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
  40c324:	4655      	mov	r5, sl
  40c326:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
  40c32a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
  40c32e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
  40c332:	4661      	mov	r1, ip
  40c334:	2d00      	cmp	r5, #0
  40c336:	4660      	mov	r0, ip
  40c338:	bfb8      	it	lt
  40c33a:	426d      	neglt	r5, r5
  40c33c:	9208      	str	r2, [sp, #32]
  40c33e:	f7fe fb1d 	bl	40a97c <invn_math_mult_q15_fxp>
  40c342:	4629      	mov	r1, r5
  40c344:	9005      	str	r0, [sp, #20]
  40c346:	4628      	mov	r0, r5
  40c348:	f7fe fb18 	bl	40a97c <invn_math_mult_q15_fxp>
  40c34c:	9a08      	ldr	r2, [sp, #32]
  40c34e:	4611      	mov	r1, r2
  40c350:	9a05      	ldr	r2, [sp, #20]
  40c352:	eb02 0a00 	add.w	sl, r2, r0
  40c356:	4608      	mov	r0, r1
  40c358:	f7fe fb10 	bl	40a97c <invn_math_mult_q15_fxp>
  40c35c:	4450      	add	r0, sl
  40c35e:	f7fe fb1f 	bl	40a9a0 <invn_math_sqrt_q15_fxp>
  40c362:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
  40c366:	b95a      	cbnz	r2, 40c380 <RlsCalibrationFxp_UpdateUncalibrated+0xb18>
  40c368:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40c36a:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
  40c36e:	eba3 0e00 	sub.w	lr, r3, r0
  40c372:	ea8e 73ee 	eor.w	r3, lr, lr, asr #31
  40c376:	eba3 73ee 	sub.w	r3, r3, lr, asr #31
  40c37a:	428b      	cmp	r3, r1
  40c37c:	f6bf ab90 	bge.w	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c380:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
  40c384:	4298      	cmp	r0, r3
  40c386:	f77f ab8b 	ble.w	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c38a:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
  40c38e:	4298      	cmp	r0, r3
  40c390:	f6bf ab86 	bge.w	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c394:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  40c396:	67e1      	str	r1, [r4, #124]	; 0x7c
  40c398:	2a00      	cmp	r2, #0
  40c39a:	f000 8083 	beq.w	40c4a4 <RlsCalibrationFxp_UpdateUncalibrated+0xc3c>
  40c39e:	6922      	ldr	r2, [r4, #16]
  40c3a0:	6963      	ldr	r3, [r4, #20]
  40c3a2:	6022      	str	r2, [r4, #0]
  40c3a4:	6063      	str	r3, [r4, #4]
  40c3a6:	69a2      	ldr	r2, [r4, #24]
  40c3a8:	69e3      	ldr	r3, [r4, #28]
  40c3aa:	60a2      	str	r2, [r4, #8]
  40c3ac:	60e3      	str	r3, [r4, #12]
  40c3ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
  40c3b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40c3b2:	6222      	str	r2, [r4, #32]
  40c3b4:	6263      	str	r3, [r4, #36]	; 0x24
  40c3b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40c3b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40c3ba:	62a2      	str	r2, [r4, #40]	; 0x28
  40c3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  40c3be:	6da2      	ldr	r2, [r4, #88]	; 0x58
  40c3c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40c3c2:	6422      	str	r2, [r4, #64]	; 0x40
  40c3c4:	6463      	str	r3, [r4, #68]	; 0x44
  40c3c6:	6e22      	ldr	r2, [r4, #96]	; 0x60
  40c3c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40c3ca:	9d04      	ldr	r5, [sp, #16]
  40c3cc:	64a2      	str	r2, [r4, #72]	; 0x48
  40c3ce:	64e3      	str	r3, [r4, #76]	; 0x4c
  40c3d0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  40c3d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  40c3d4:	6720      	str	r0, [r4, #112]	; 0x70
  40c3d6:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
  40c3da:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  40c3de:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  40c3e2:	6522      	str	r2, [r4, #80]	; 0x50
  40c3e4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
  40c3e8:	6563      	str	r3, [r4, #84]	; 0x54
  40c3ea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
  40c3ee:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
  40c3f2:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
  40c3f6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  40c3fa:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  40c3fe:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  40c402:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40c406:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  40c40a:	2300      	movs	r3, #0
  40c40c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  40c410:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  40c414:	428a      	cmp	r2, r1
  40c416:	f04f 0301 	mov.w	r3, #1
  40c41a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  40c41e:	bfc4      	itt	gt
  40c420:	2302      	movgt	r3, #2
  40c422:	f8c4 3080 	strgt.w	r3, [r4, #128]	; 0x80
  40c426:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
  40c42a:	428b      	cmp	r3, r1
  40c42c:	bfc4      	itt	gt
  40c42e:	2303      	movgt	r3, #3
  40c430:	f8c4 3080 	strgt.w	r3, [r4, #128]	; 0x80
  40c434:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40c438:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  40c43c:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
  40c440:	4098      	lsls	r0, r3
  40c442:	9b04      	ldr	r3, [sp, #16]
  40c444:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
  40c448:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
  40c44c:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
  40c450:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  40c454:	f04f 0b02 	mov.w	fp, #2
  40c458:	f7ff bb22 	b.w	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c45c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  40c460:	f7ff bb1e 	b.w	40baa0 <RlsCalibrationFxp_UpdateUncalibrated+0x238>
  40c464:	2302      	movs	r3, #2
  40c466:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  40c46a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40c46e:	9305      	str	r3, [sp, #20]
  40c470:	e66f      	b.n	40c152 <RlsCalibrationFxp_UpdateUncalibrated+0x8ea>
  40c472:	d013      	beq.n	40c49c <RlsCalibrationFxp_UpdateUncalibrated+0xc34>
  40c474:	eb03 0363 	add.w	r3, r3, r3, asr #1
  40c478:	e4ee      	b.n	40be58 <RlsCalibrationFxp_UpdateUncalibrated+0x5f0>
  40c47a:	460b      	mov	r3, r1
  40c47c:	e620      	b.n	40c0c0 <RlsCalibrationFxp_UpdateUncalibrated+0x858>
  40c47e:	f8c4 b094 	str.w	fp, [r4, #148]	; 0x94
  40c482:	f8c4 b098 	str.w	fp, [r4, #152]	; 0x98
  40c486:	f8c4 b09c 	str.w	fp, [r4, #156]	; 0x9c
  40c48a:	f7ff bbf4 	b.w	40bc76 <RlsCalibrationFxp_UpdateUncalibrated+0x40e>
  40c48e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  40c492:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  40c496:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40c49a:	e632      	b.n	40c102 <RlsCalibrationFxp_UpdateUncalibrated+0x89a>
  40c49c:	eb03 03a3 	add.w	r3, r3, r3, asr #2
  40c4a0:	9305      	str	r3, [sp, #20]
  40c4a2:	e4da      	b.n	40be5a <RlsCalibrationFxp_UpdateUncalibrated+0x5f2>
  40c4a4:	4601      	mov	r1, r0
  40c4a6:	f641 109a 	movw	r0, #6554	; 0x199a
  40c4aa:	f7fe fa67 	bl	40a97c <invn_math_mult_q15_fxp>
  40c4ae:	6f21      	ldr	r1, [r4, #112]	; 0x70
  40c4b0:	4682      	mov	sl, r0
  40c4b2:	f246 6066 	movw	r0, #26214	; 0x6666
  40c4b6:	f7fe fa61 	bl	40a97c <invn_math_mult_q15_fxp>
  40c4ba:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  40c4bc:	4450      	add	r0, sl
  40c4be:	e76e      	b.n	40c39e <RlsCalibrationFxp_UpdateUncalibrated+0xb36>

0040c4c0 <RlsCalibrationFxp_Init>:
  40c4c0:	b570      	push	{r4, r5, r6, lr}
  40c4c2:	4604      	mov	r4, r0
  40c4c4:	460d      	mov	r5, r1
  40c4c6:	4616      	mov	r6, r2
  40c4c8:	2100      	movs	r1, #0
  40c4ca:	f44f 72aa 	mov.w	r2, #340	; 0x154
  40c4ce:	f003 fac5 	bl	40fa5c <memset>
  40c4d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40c4d6:	4b10      	ldr	r3, [pc, #64]	; (40c518 <RlsCalibrationFxp_Init+0x58>)
  40c4d8:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
  40c4dc:	2201      	movs	r2, #1
  40c4de:	6323      	str	r3, [r4, #48]	; 0x30
  40c4e0:	6363      	str	r3, [r4, #52]	; 0x34
  40c4e2:	63a3      	str	r3, [r4, #56]	; 0x38
  40c4e4:	63e3      	str	r3, [r4, #60]	; 0x3c
  40c4e6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
  40c4ea:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
  40c4ee:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
  40c4f2:	b145      	cbz	r5, 40c506 <RlsCalibrationFxp_Init+0x46>
  40c4f4:	682b      	ldr	r3, [r5, #0]
  40c4f6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  40c4fa:	686b      	ldr	r3, [r5, #4]
  40c4fc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  40c500:	68ab      	ldr	r3, [r5, #8]
  40c502:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  40c506:	2e00      	cmp	r6, #0
  40c508:	dd04      	ble.n	40c514 <RlsCalibrationFxp_Init+0x54>
  40c50a:	4b04      	ldr	r3, [pc, #16]	; (40c51c <RlsCalibrationFxp_Init+0x5c>)
  40c50c:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
  40c510:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  40c514:	bd70      	pop	{r4, r5, r6, pc}
  40c516:	bf00      	nop
  40c518:	0007a120 	.word	0x0007a120
  40c51c:	000f4240 	.word	0x000f4240

0040c520 <RlsCalibrationFxp_UpdateUncalibratedData>:
  40c520:	680b      	ldr	r3, [r1, #0]
  40c522:	b570      	push	{r4, r5, r6, lr}
  40c524:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
  40c528:	684b      	ldr	r3, [r1, #4]
  40c52a:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
  40c52e:	4604      	mov	r4, r0
  40c530:	688b      	ldr	r3, [r1, #8]
  40c532:	9d04      	ldr	r5, [sp, #16]
  40c534:	f8c0 31d8 	str.w	r3, [r0, #472]	; 0x1d8
  40c538:	f8c0 21cc 	str.w	r2, [r0, #460]	; 0x1cc
  40c53c:	f500 71aa 	add.w	r1, r0, #340	; 0x154
  40c540:	f500 72de 	add.w	r2, r0, #444	; 0x1bc
  40c544:	9e05      	ldr	r6, [sp, #20]
  40c546:	f7ff f98f 	bl	40b868 <RlsCalibrationFxp_UpdateUncalibrated>
  40c54a:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
  40c54e:	602b      	str	r3, [r5, #0]
  40c550:	f8d4 31ec 	ldr.w	r3, [r4, #492]	; 0x1ec
  40c554:	606b      	str	r3, [r5, #4]
  40c556:	f8d4 31f0 	ldr.w	r3, [r4, #496]	; 0x1f0
  40c55a:	60ab      	str	r3, [r5, #8]
  40c55c:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
  40c560:	6033      	str	r3, [r6, #0]
  40c562:	bd70      	pop	{r4, r5, r6, pc}

0040c564 <InterfaceCalibrationGyrFxp_Reset>:
  40c564:	b508      	push	{r3, lr}
  40c566:	2268      	movs	r2, #104	; 0x68
  40c568:	2100      	movs	r1, #0
  40c56a:	f003 fa77 	bl	40fa5c <memset>
  40c56e:	bd08      	pop	{r3, pc}

0040c570 <SphericalFxp_UpdateMag.part.0>:
  40c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c574:	6a1d      	ldr	r5, [r3, #32]
  40c576:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  40c578:	469b      	mov	fp, r3
  40c57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40c57c:	b097      	sub	sp, #92	; 0x5c
  40c57e:	4680      	mov	r8, r0
  40c580:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40c584:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40c588:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40c58c:	6b00      	ldr	r0, [r0, #48]	; 0x30
  40c58e:	9206      	str	r2, [sp, #24]
  40c590:	006d      	lsls	r5, r5, #1
  40c592:	0064      	lsls	r4, r4, #1
  40c594:	005b      	lsls	r3, r3, #1
  40c596:	468a      	mov	sl, r1
  40c598:	950f      	str	r5, [sp, #60]	; 0x3c
  40c59a:	9410      	str	r4, [sp, #64]	; 0x40
  40c59c:	9311      	str	r3, [sp, #68]	; 0x44
  40c59e:	b928      	cbnz	r0, 40c5ac <SphericalFxp_UpdateMag.part.0+0x3c>
  40c5a0:	f8c8 5018 	str.w	r5, [r8, #24]
  40c5a4:	f8c8 401c 	str.w	r4, [r8, #28]
  40c5a8:	f8c8 3020 	str.w	r3, [r8, #32]
  40c5ac:	2203      	movs	r2, #3
  40c5ae:	f108 0918 	add.w	r9, r8, #24
  40c5b2:	f8da 301c 	ldr.w	r3, [sl, #28]
  40c5b6:	9200      	str	r2, [sp, #0]
  40c5b8:	4649      	mov	r1, r9
  40c5ba:	f108 0228 	add.w	r2, r8, #40	; 0x28
  40c5be:	a80f      	add	r0, sp, #60	; 0x3c
  40c5c0:	f001 fb18 	bl	40dbf4 <fxpRecursiveVariance>
  40c5c4:	9a06      	ldr	r2, [sp, #24]
  40c5c6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
  40c5ca:	f8da 1008 	ldr.w	r1, [sl, #8]
  40c5ce:	6812      	ldr	r2, [r2, #0]
  40c5d0:	440b      	add	r3, r1
  40c5d2:	f012 0f05 	tst.w	r2, #5
  40c5d6:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  40c5da:	f000 8098 	beq.w	40c70e <SphericalFxp_UpdateMag.part.0+0x19e>
  40c5de:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  40c5e2:	2900      	cmp	r1, #0
  40c5e4:	f340 8093 	ble.w	40c70e <SphericalFxp_UpdateMag.part.0+0x19e>
  40c5e8:	2b00      	cmp	r3, #0
  40c5ea:	f340 8090 	ble.w	40c70e <SphericalFxp_UpdateMag.part.0+0x19e>
  40c5ee:	f8d8 31d0 	ldr.w	r3, [r8, #464]	; 0x1d0
  40c5f2:	b953      	cbnz	r3, 40c60a <SphericalFxp_UpdateMag.part.0+0x9a>
  40c5f4:	f8d8 201c 	ldr.w	r2, [r8, #28]
  40c5f8:	2a00      	cmp	r2, #0
  40c5fa:	f2c0 8407 	blt.w	40ce0c <SphericalFxp_UpdateMag.part.0+0x89c>
  40c5fe:	d004      	beq.n	40c60a <SphericalFxp_UpdateMag.part.0+0x9a>
  40c600:	f8d8 2014 	ldr.w	r2, [r8, #20]
  40c604:	2a00      	cmp	r2, #0
  40c606:	f2c0 83b8 	blt.w	40cd7a <SphericalFxp_UpdateMag.part.0+0x80a>
  40c60a:	9b06      	ldr	r3, [sp, #24]
  40c60c:	f103 0618 	add.w	r6, r3, #24
  40c610:	ab12      	add	r3, sp, #72	; 0x48
  40c612:	4654      	mov	r4, sl
  40c614:	f108 070c 	add.w	r7, r8, #12
  40c618:	469a      	mov	sl, r3
  40c61a:	4652      	mov	r2, sl
  40c61c:	4631      	mov	r1, r6
  40c61e:	4638      	mov	r0, r7
  40c620:	f7fe fd46 	bl	40b0b0 <invn_angle_from_acc_correction_fxp>
  40c624:	4642      	mov	r2, r8
  40c626:	4631      	mov	r1, r6
  40c628:	4648      	mov	r0, r9
  40c62a:	f7fe fce5 	bl	40aff8 <invn_angle_from_mag_correction_fxp>
  40c62e:	f8d8 5000 	ldr.w	r5, [r8]
  40c632:	9912      	ldr	r1, [sp, #72]	; 0x48
  40c634:	f8d8 0008 	ldr.w	r0, [r8, #8]
  40c638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40c63a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c63c:	4429      	add	r1, r5
  40c63e:	f8d8 5004 	ldr.w	r5, [r8, #4]
  40c642:	4403      	add	r3, r0
  40c644:	442a      	add	r2, r5
  40c646:	105b      	asrs	r3, r3, #1
  40c648:	1049      	asrs	r1, r1, #1
  40c64a:	1052      	asrs	r2, r2, #1
  40c64c:	e888 000e 	stmia.w	r8, {r1, r2, r3}
  40c650:	4640      	mov	r0, r8
  40c652:	4631      	mov	r1, r6
  40c654:	f7fe fbfe 	bl	40ae54 <invn_integrate_gyro_fast_trigo_fxp>
  40c658:	f8d8 31d0 	ldr.w	r3, [r8, #464]	; 0x1d0
  40c65c:	3301      	adds	r3, #1
  40c65e:	2b04      	cmp	r3, #4
  40c660:	f8c8 31d0 	str.w	r3, [r8, #464]	; 0x1d0
  40c664:	ddd9      	ble.n	40c61a <SphericalFxp_UpdateMag.part.0+0xaa>
  40c666:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
  40c66a:	f8d8 601c 	ldr.w	r6, [r8, #28]
  40c66e:	46a2      	mov	sl, r4
  40c670:	fb80 4500 	smull	r4, r5, r0, r0
  40c674:	4620      	mov	r0, r4
  40c676:	4629      	mov	r1, r5
  40c678:	1924      	adds	r4, r4, r4
  40c67a:	416d      	adcs	r5, r5
  40c67c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40c680:	1900      	adds	r0, r0, r4
  40c682:	4169      	adcs	r1, r5
  40c684:	0144      	lsls	r4, r0, #5
  40c686:	014d      	lsls	r5, r1, #5
  40c688:	1822      	adds	r2, r4, r0
  40c68a:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
  40c68e:	eb45 0301 	adc.w	r3, r5, r1
  40c692:	f8d8 5018 	ldr.w	r5, [r8, #24]
  40c696:	f8d8 4020 	ldr.w	r4, [r8, #32]
  40c69a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40c69e:	fb86 6706 	smull	r6, r7, r6, r6
  40c6a2:	fbc5 6705 	smlal	r6, r7, r5, r5
  40c6a6:	1880      	adds	r0, r0, r2
  40c6a8:	fbc4 6704 	smlal	r6, r7, r4, r4
  40c6ac:	4159      	adcs	r1, r3
  40c6ae:	0f84      	lsrs	r4, r0, #30
  40c6b0:	ea4f 7e96 	mov.w	lr, r6, lsr #30
  40c6b4:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
  40c6b8:	ea4e 0e87 	orr.w	lr, lr, r7, lsl #2
  40c6bc:	eba4 060e 	sub.w	r6, r4, lr
  40c6c0:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
  40c6c4:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
  40c6c8:	4dc5      	ldr	r5, [pc, #788]	; (40c9e0 <SphericalFxp_UpdateMag.part.0+0x470>)
  40c6ca:	9412      	str	r4, [sp, #72]	; 0x48
  40c6cc:	ea86 70e6 	eor.w	r0, r6, r6, asr #31
  40c6d0:	eba0 70e6 	sub.w	r0, r0, r6, asr #31
  40c6d4:	2332      	movs	r3, #50	; 0x32
  40c6d6:	fb03 f400 	mul.w	r4, r3, r0
  40c6da:	1853      	adds	r3, r2, r1
  40c6dc:	2264      	movs	r2, #100	; 0x64
  40c6de:	fb02 4303 	mla	r3, r2, r3, r4
  40c6e2:	9906      	ldr	r1, [sp, #24]
  40c6e4:	9014      	str	r0, [sp, #80]	; 0x50
  40c6e6:	42ab      	cmp	r3, r5
  40c6e8:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  40c6ec:	628b      	str	r3, [r1, #40]	; 0x28
  40c6ee:	f200 82ab 	bhi.w	40cc48 <SphericalFxp_UpdateMag.part.0+0x6d8>
  40c6f2:	4abc      	ldr	r2, [pc, #752]	; (40c9e4 <SphericalFxp_UpdateMag.part.0+0x474>)
  40c6f4:	4293      	cmp	r3, r2
  40c6f6:	f300 82a8 	bgt.w	40cc4a <SphericalFxp_UpdateMag.part.0+0x6da>
  40c6fa:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
  40c6fe:	0655      	lsls	r5, r2, #25
  40c700:	f140 8328 	bpl.w	40cd54 <SphericalFxp_UpdateMag.part.0+0x7e4>
  40c704:	4608      	mov	r0, r1
  40c706:	49b8      	ldr	r1, [pc, #736]	; (40c9e8 <SphericalFxp_UpdateMag.part.0+0x478>)
  40c708:	6802      	ldr	r2, [r0, #0]
  40c70a:	4419      	add	r1, r3
  40c70c:	6281      	str	r1, [r0, #40]	; 0x28
  40c70e:	0754      	lsls	r4, r2, #29
  40c710:	d40c      	bmi.n	40c72c <SphericalFxp_UpdateMag.part.0+0x1bc>
  40c712:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
  40c716:	2b03      	cmp	r3, #3
  40c718:	d105      	bne.n	40c726 <SphericalFxp_UpdateMag.part.0+0x1b6>
  40c71a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
  40c71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40c722:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
  40c726:	b017      	add	sp, #92	; 0x5c
  40c728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c72c:	9b06      	ldr	r3, [sp, #24]
  40c72e:	3308      	adds	r3, #8
  40c730:	4618      	mov	r0, r3
  40c732:	f508 7288 	add.w	r2, r8, #272	; 0x110
  40c736:	a90f      	add	r1, sp, #60	; 0x3c
  40c738:	930a      	str	r3, [sp, #40]	; 0x28
  40c73a:	9204      	str	r2, [sp, #16]
  40c73c:	f7fe f81c 	bl	40a778 <invn_math_quat_rotate_BtoI_fxp>
  40c740:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
  40c744:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
  40c748:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
  40c74c:	06d0      	lsls	r0, r2, #27
  40c74e:	bf5b      	ittet	pl
  40c750:	13c9      	asrpl	r1, r1, #15
  40c752:	f241 3088 	movwpl	r0, #5000	; 0x1388
  40c756:	eb03 1321 	addmi.w	r3, r3, r1, asr #4
  40c75a:	fb00 1303 	mlapl	r3, r0, r3, r1
  40c75e:	f8db 103c 	ldr.w	r1, [fp, #60]	; 0x3c
  40c762:	f8c8 311c 	str.w	r3, [r8, #284]	; 0x11c
  40c766:	2903      	cmp	r1, #3
  40c768:	f000 82e2 	beq.w	40cd30 <SphericalFxp_UpdateMag.part.0+0x7c0>
  40c76c:	f108 0394 	add.w	r3, r8, #148	; 0x94
  40c770:	f508 749e 	add.w	r4, r8, #316	; 0x13c
  40c774:	4621      	mov	r1, r4
  40c776:	f508 75a4 	add.w	r5, r8, #328	; 0x148
  40c77a:	930c      	str	r3, [sp, #48]	; 0x30
  40c77c:	4618      	mov	r0, r3
  40c77e:	2204      	movs	r2, #4
  40c780:	2303      	movs	r3, #3
  40c782:	f001 fa0d 	bl	40dba0 <fxpScaleAndSaturate>
  40c786:	af12      	add	r7, sp, #72	; 0x48
  40c788:	4629      	mov	r1, r5
  40c78a:	2303      	movs	r3, #3
  40c78c:	2204      	movs	r2, #4
  40c78e:	9804      	ldr	r0, [sp, #16]
  40c790:	970d      	str	r7, [sp, #52]	; 0x34
  40c792:	f001 fa05 	bl	40dba0 <fxpScaleAndSaturate>
  40c796:	4629      	mov	r1, r5
  40c798:	4620      	mov	r0, r4
  40c79a:	463a      	mov	r2, r7
  40c79c:	f000 fe9a 	bl	40d4d4 <invn_cross_product_q30>
  40c7a0:	f8d8 2140 	ldr.w	r2, [r8, #320]	; 0x140
  40c7a4:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
  40c7a8:	f8d8 513c 	ldr.w	r5, [r8, #316]	; 0x13c
  40c7ac:	f8d8 4148 	ldr.w	r4, [r8, #328]	; 0x148
  40c7b0:	f8d8 7144 	ldr.w	r7, [r8, #324]	; 0x144
  40c7b4:	f8d8 1150 	ldr.w	r1, [r8, #336]	; 0x150
  40c7b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40c7ba:	fb82 2303 	smull	r2, r3, r2, r3
  40c7be:	fbc4 2305 	smlal	r2, r3, r4, r5
  40c7c2:	9c12      	ldr	r4, [sp, #72]	; 0x48
  40c7c4:	fbc1 2307 	smlal	r2, r3, r1, r7
  40c7c8:	fb80 0100 	smull	r0, r1, r0, r0
  40c7cc:	461e      	mov	r6, r3
  40c7ce:	fbc4 0104 	smlal	r0, r1, r4, r4
  40c7d2:	0f92      	lsrs	r2, r2, #30
  40c7d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40c7d6:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
  40c7da:	fbc4 0104 	smlal	r0, r1, r4, r4
  40c7de:	fb82 2302 	smull	r2, r3, r2, r2
  40c7e2:	461f      	mov	r7, r3
  40c7e4:	0f95      	lsrs	r5, r2, #30
  40c7e6:	0f82      	lsrs	r2, r0, #30
  40c7e8:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
  40c7ec:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
  40c7f0:	f508 74ae 	add.w	r4, r8, #348	; 0x15c
  40c7f4:	f8c8 2158 	str.w	r2, [r8, #344]	; 0x158
  40c7f8:	f8c8 5154 	str.w	r5, [r8, #340]	; 0x154
  40c7fc:	2203      	movs	r2, #3
  40c7fe:	4621      	mov	r1, r4
  40c800:	2302      	movs	r3, #2
  40c802:	f508 70aa 	add.w	r0, r8, #340	; 0x154
  40c806:	f001 f9cb 	bl	40dba0 <fxpScaleAndSaturate>
  40c80a:	f8d8 2138 	ldr.w	r2, [r8, #312]	; 0x138
  40c80e:	2a00      	cmp	r2, #0
  40c810:	f000 81dd 	beq.w	40cbce <SphericalFxp_UpdateMag.part.0+0x65e>
  40c814:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
  40c818:	f003 0303 	and.w	r3, r3, #3
  40c81c:	2b03      	cmp	r3, #3
  40c81e:	f000 81de 	beq.w	40cbde <SphericalFxp_UpdateMag.part.0+0x66e>
  40c822:	f640 33b7 	movw	r3, #2999	; 0xbb7
  40c826:	429a      	cmp	r2, r3
  40c828:	f340 81d9 	ble.w	40cbde <SphericalFxp_UpdateMag.part.0+0x66e>
  40c82c:	f8d8 4164 	ldr.w	r4, [r8, #356]	; 0x164
  40c830:	f8d8 3168 	ldr.w	r3, [r8, #360]	; 0x168
  40c834:	f8d8 2160 	ldr.w	r2, [r8, #352]	; 0x160
  40c838:	f8d8 115c 	ldr.w	r1, [r8, #348]	; 0x15c
  40c83c:	f8d8 017c 	ldr.w	r0, [r8, #380]	; 0x17c
  40c840:	1ad2      	subs	r2, r2, r3
  40c842:	fb82 2302 	smull	r2, r3, r2, r2
  40c846:	1b09      	subs	r1, r1, r4
  40c848:	fbc1 2301 	smlal	r2, r3, r1, r1
  40c84c:	10db      	asrs	r3, r3, #3
  40c84e:	4283      	cmp	r3, r0
  40c850:	dc0b      	bgt.n	40c86a <SphericalFxp_UpdateMag.part.0+0x2fa>
  40c852:	f8da 1008 	ldr.w	r1, [sl, #8]
  40c856:	4a65      	ldr	r2, [pc, #404]	; (40c9ec <SphericalFxp_UpdateMag.part.0+0x47c>)
  40c858:	1a1b      	subs	r3, r3, r0
  40c85a:	fb02 f201 	mul.w	r2, r2, r1
  40c85e:	fb82 3403 	smull	r3, r4, r2, r3
  40c862:	0f9a      	lsrs	r2, r3, #30
  40c864:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
  40c868:	1883      	adds	r3, r0, r2
  40c86a:	fb83 0103 	smull	r0, r1, r3, r3
  40c86e:	0c82      	lsrs	r2, r0, #18
  40c870:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
  40c874:	f8c8 317c 	str.w	r3, [r8, #380]	; 0x17c
  40c878:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
  40c87c:	fb80 0102 	smull	r0, r1, r0, r2
  40c880:	0f83      	lsrs	r3, r0, #30
  40c882:	f8da 2020 	ldr.w	r2, [sl, #32]
  40c886:	f8d8 0188 	ldr.w	r0, [r8, #392]	; 0x188
  40c88a:	f8d8 e00c 	ldr.w	lr, [r8, #12]
  40c88e:	f8d8 5018 	ldr.w	r5, [r8, #24]
  40c892:	f8d8 c014 	ldr.w	ip, [r8, #20]
  40c896:	9508      	str	r5, [sp, #32]
  40c898:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  40c89c:	4413      	add	r3, r2
  40c89e:	429a      	cmp	r2, r3
  40c8a0:	bfc8      	it	gt
  40c8a2:	f04f 4380 	movgt.w	r3, #1073741824	; 0x40000000
  40c8a6:	f8c8 3120 	str.w	r3, [r8, #288]	; 0x120
  40c8aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40c8ae:	9307      	str	r3, [sp, #28]
  40c8b0:	4619      	mov	r1, r3
  40c8b2:	f8d8 301c 	ldr.w	r3, [r8, #28]
  40c8b6:	930b      	str	r3, [sp, #44]	; 0x2c
  40c8b8:	461c      	mov	r4, r3
  40c8ba:	f8d8 3184 	ldr.w	r3, [r8, #388]	; 0x184
  40c8be:	f8d8 2194 	ldr.w	r2, [r8, #404]	; 0x194
  40c8c2:	f8d8 7020 	ldr.w	r7, [r8, #32]
  40c8c6:	1a40      	subs	r0, r0, r1
  40c8c8:	eba3 030e 	sub.w	r3, r3, lr
  40c8cc:	fb80 0100 	smull	r0, r1, r0, r0
  40c8d0:	fbc3 0103 	smlal	r0, r1, r3, r3
  40c8d4:	f8d8 318c 	ldr.w	r3, [r8, #396]	; 0x18c
  40c8d8:	462e      	mov	r6, r5
  40c8da:	f8d8 5190 	ldr.w	r5, [r8, #400]	; 0x190
  40c8de:	1b12      	subs	r2, r2, r4
  40c8e0:	eba3 030c 	sub.w	r3, r3, ip
  40c8e4:	f8d8 4198 	ldr.w	r4, [r8, #408]	; 0x198
  40c8e8:	9213      	str	r2, [sp, #76]	; 0x4c
  40c8ea:	fbc3 0103 	smlal	r0, r1, r3, r3
  40c8ee:	1bad      	subs	r5, r5, r6
  40c8f0:	fb82 2302 	smull	r2, r3, r2, r2
  40c8f4:	1be4      	subs	r4, r4, r7
  40c8f6:	0f86      	lsrs	r6, r0, #30
  40c8f8:	fbc5 2305 	smlal	r2, r3, r5, r5
  40c8fc:	fbc4 2304 	smlal	r2, r3, r4, r4
  40c900:	ea46 0181 	orr.w	r1, r6, r1, lsl #2
  40c904:	4608      	mov	r0, r1
  40c906:	f8c8 119c 	str.w	r1, [r8, #412]	; 0x19c
  40c90a:	0f91      	lsrs	r1, r2, #30
  40c90c:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
  40c910:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
  40c914:	9512      	str	r5, [sp, #72]	; 0x48
  40c916:	4298      	cmp	r0, r3
  40c918:	9414      	str	r4, [sp, #80]	; 0x50
  40c91a:	f8c8 11a0 	str.w	r1, [r8, #416]	; 0x1a0
  40c91e:	f300 8197 	bgt.w	40cc50 <SphericalFxp_UpdateMag.part.0+0x6e0>
  40c922:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
  40c926:	4299      	cmp	r1, r3
  40c928:	f300 8192 	bgt.w	40cc50 <SphericalFxp_UpdateMag.part.0+0x6e0>
  40c92c:	f8d8 3180 	ldr.w	r3, [r8, #384]	; 0x180
  40c930:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
  40c934:	4293      	cmp	r3, r2
  40c936:	f2c0 829d 	blt.w	40ce74 <SphericalFxp_UpdateMag.part.0+0x904>
  40c93a:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
  40c93e:	2b00      	cmp	r3, #0
  40c940:	f000 8237 	beq.w	40cdb2 <SphericalFxp_UpdateMag.part.0+0x842>
  40c944:	f508 74da 	add.w	r4, r8, #436	; 0x1b4
  40c948:	a90f      	add	r1, sp, #60	; 0x3c
  40c94a:	4622      	mov	r2, r4
  40c94c:	f508 70d2 	add.w	r0, r8, #420	; 0x1a4
  40c950:	f7fd ff86 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40c954:	9a04      	ldr	r2, [sp, #16]
  40c956:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c958:	4621      	mov	r1, r4
  40c95a:	f7fd ff0d 	bl	40a778 <invn_math_quat_rotate_BtoI_fxp>
  40c95e:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
  40c962:	2b00      	cmp	r3, #0
  40c964:	f300 819f 	bgt.w	40cca6 <SphericalFxp_UpdateMag.part.0+0x736>
  40c968:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
  40c96c:	f8d8 1114 	ldr.w	r1, [r8, #276]	; 0x114
  40c970:	f8c8 212c 	str.w	r2, [r8, #300]	; 0x12c
  40c974:	f8c8 1130 	str.w	r1, [r8, #304]	; 0x130
  40c978:	f8d8 2118 	ldr.w	r2, [r8, #280]	; 0x118
  40c97c:	f8da 1008 	ldr.w	r1, [sl, #8]
  40c980:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
  40c984:	f8d8 21d4 	ldr.w	r2, [r8, #468]	; 0x1d4
  40c988:	440b      	add	r3, r1
  40c98a:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
  40c98e:	2a00      	cmp	r2, #0
  40c990:	f040 81a8 	bne.w	40cce4 <SphericalFxp_UpdateMag.part.0+0x774>
  40c994:	2b00      	cmp	r3, #0
  40c996:	f77f aebc 	ble.w	40c712 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40c99a:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
  40c99e:	2b00      	cmp	r3, #0
  40c9a0:	f77f aeb7 	ble.w	40c712 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40c9a4:	f8d8 3130 	ldr.w	r3, [r8, #304]	; 0x130
  40c9a8:	2b00      	cmp	r3, #0
  40c9aa:	f2c0 823c 	blt.w	40ce26 <SphericalFxp_UpdateMag.part.0+0x8b6>
  40c9ae:	d004      	beq.n	40c9ba <SphericalFxp_UpdateMag.part.0+0x44a>
  40c9b0:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
  40c9b4:	2b00      	cmp	r3, #0
  40c9b6:	f2c0 81e8 	blt.w	40cd8a <SphericalFxp_UpdateMag.part.0+0x81a>
  40c9ba:	f508 7182 	add.w	r1, r8, #260	; 0x104
  40c9be:	f108 03f8 	add.w	r3, r8, #248	; 0xf8
  40c9c2:	f108 02ec 	add.w	r2, r8, #236	; 0xec
  40c9c6:	9104      	str	r1, [sp, #16]
  40c9c8:	f508 7196 	add.w	r1, r8, #300	; 0x12c
  40c9cc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  40c9d0:	f108 09dc 	add.w	r9, r8, #220	; 0xdc
  40c9d4:	9107      	str	r1, [sp, #28]
  40c9d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40c9d8:	461f      	mov	r7, r3
  40c9da:	4693      	mov	fp, r2
  40c9dc:	e038      	b.n	40ca50 <SphericalFxp_UpdateMag.part.0+0x4e0>
  40c9de:	bf00      	nop
  40c9e0:	1921fb54 	.word	0x1921fb54
  40c9e4:	186f4291 	.word	0x186f4291
  40c9e8:	00b2b8c2 	.word	0x00b2b8c2
  40c9ec:	001cac08 	.word	0x001cac08
  40c9f0:	f8d8 2074 	ldr.w	r2, [r8, #116]	; 0x74
  40c9f4:	f241 3387 	movw	r3, #4999	; 0x1387
  40c9f8:	429a      	cmp	r2, r3
  40c9fa:	dd37      	ble.n	40ca6c <SphericalFxp_UpdateMag.part.0+0x4fc>
  40c9fc:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
  40ca00:	429a      	cmp	r2, r3
  40ca02:	dd33      	ble.n	40ca6c <SphericalFxp_UpdateMag.part.0+0x4fc>
  40ca04:	f8c8 e104 	str.w	lr, [r8, #260]	; 0x104
  40ca08:	f8c8 e108 	str.w	lr, [r8, #264]	; 0x108
  40ca0c:	f8c8 e10c 	str.w	lr, [r8, #268]	; 0x10c
  40ca10:	4673      	mov	r3, lr
  40ca12:	46f4      	mov	ip, lr
  40ca14:	f8d8 0100 	ldr.w	r0, [r8, #256]	; 0x100
  40ca18:	f8d8 10f8 	ldr.w	r1, [r8, #248]	; 0xf8
  40ca1c:	f8d8 20fc 	ldr.w	r2, [r8, #252]	; 0xfc
  40ca20:	4471      	add	r1, lr
  40ca22:	4462      	add	r2, ip
  40ca24:	4403      	add	r3, r0
  40ca26:	105b      	asrs	r3, r3, #1
  40ca28:	1049      	asrs	r1, r1, #1
  40ca2a:	1052      	asrs	r2, r2, #1
  40ca2c:	f8c8 10ec 	str.w	r1, [r8, #236]	; 0xec
  40ca30:	f8c8 30f4 	str.w	r3, [r8, #244]	; 0xf4
  40ca34:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
  40ca38:	4649      	mov	r1, r9
  40ca3a:	4658      	mov	r0, fp
  40ca3c:	f7fe fa0a 	bl	40ae54 <invn_integrate_gyro_fast_trigo_fxp>
  40ca40:	f8d8 31d4 	ldr.w	r3, [r8, #468]	; 0x1d4
  40ca44:	3301      	adds	r3, #1
  40ca46:	2b04      	cmp	r3, #4
  40ca48:	f8c8 31d4 	str.w	r3, [r8, #468]	; 0x1d4
  40ca4c:	f300 8153 	bgt.w	40ccf6 <SphericalFxp_UpdateMag.part.0+0x786>
  40ca50:	463a      	mov	r2, r7
  40ca52:	4649      	mov	r1, r9
  40ca54:	4630      	mov	r0, r6
  40ca56:	f7fe fb2b 	bl	40b0b0 <invn_angle_from_acc_correction_fxp>
  40ca5a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
  40ca5e:	071a      	lsls	r2, r3, #28
  40ca60:	d404      	bmi.n	40ca6c <SphericalFxp_UpdateMag.part.0+0x4fc>
  40ca62:	f8d8 e1cc 	ldr.w	lr, [r8, #460]	; 0x1cc
  40ca66:	f1be 0f00 	cmp.w	lr, #0
  40ca6a:	d0c1      	beq.n	40c9f0 <SphericalFxp_UpdateMag.part.0+0x480>
  40ca6c:	9a04      	ldr	r2, [sp, #16]
  40ca6e:	9807      	ldr	r0, [sp, #28]
  40ca70:	4649      	mov	r1, r9
  40ca72:	f7fe fac1 	bl	40aff8 <invn_angle_from_mag_correction_fxp>
  40ca76:	f8d8 e104 	ldr.w	lr, [r8, #260]	; 0x104
  40ca7a:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
  40ca7e:	ea8e 73ee 	eor.w	r3, lr, lr, asr #31
  40ca82:	eba3 73ee 	sub.w	r3, r3, lr, asr #31
  40ca86:	4293      	cmp	r3, r2
  40ca88:	db0f      	blt.n	40caaa <SphericalFxp_UpdateMag.part.0+0x53a>
  40ca8a:	f8d8 c108 	ldr.w	ip, [r8, #264]	; 0x108
  40ca8e:	ea8c 73ec 	eor.w	r3, ip, ip, asr #31
  40ca92:	eba3 73ec 	sub.w	r3, r3, ip, asr #31
  40ca96:	429a      	cmp	r2, r3
  40ca98:	dc07      	bgt.n	40caaa <SphericalFxp_UpdateMag.part.0+0x53a>
  40ca9a:	f8d8 310c 	ldr.w	r3, [r8, #268]	; 0x10c
  40ca9e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  40caa2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  40caa6:	428a      	cmp	r2, r1
  40caa8:	dd09      	ble.n	40cabe <SphericalFxp_UpdateMag.part.0+0x54e>
  40caaa:	2200      	movs	r2, #0
  40caac:	4613      	mov	r3, r2
  40caae:	f8c8 2104 	str.w	r2, [r8, #260]	; 0x104
  40cab2:	f8c8 2108 	str.w	r2, [r8, #264]	; 0x108
  40cab6:	f8c8 210c 	str.w	r2, [r8, #268]	; 0x10c
  40caba:	4694      	mov	ip, r2
  40cabc:	4696      	mov	lr, r2
  40cabe:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
  40cac2:	2900      	cmp	r1, #0
  40cac4:	dda6      	ble.n	40ca14 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40cac6:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
  40caca:	2a00      	cmp	r2, #0
  40cacc:	d1a2      	bne.n	40ca14 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40cace:	f8d8 2074 	ldr.w	r2, [r8, #116]	; 0x74
  40cad2:	f241 3088 	movw	r0, #5000	; 0x1388
  40cad6:	4282      	cmp	r2, r0
  40cad8:	dd9c      	ble.n	40ca14 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40cada:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
  40cade:	4282      	cmp	r2, r0
  40cae0:	dd98      	ble.n	40ca14 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40cae2:	f8da 2008 	ldr.w	r2, [sl, #8]
  40cae6:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
  40caea:	2441      	movs	r4, #65	; 0x41
  40caec:	fb82 4504 	smull	r4, r5, r2, r4
  40caf0:	e9cd 4508 	strd	r4, r5, [sp, #32]
  40caf4:	9c08      	ldr	r4, [sp, #32]
  40caf6:	17cd      	asrs	r5, r1, #31
  40caf8:	462a      	mov	r2, r5
  40cafa:	fb04 f202 	mul.w	r2, r4, r2
  40cafe:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40cb00:	fb01 2204 	mla	r2, r1, r4, r2
  40cb04:	9c08      	ldr	r4, [sp, #32]
  40cb06:	fba4 4501 	umull	r4, r5, r4, r1
  40cb0a:	4415      	add	r5, r2
  40cb0c:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40cb10:	0c22      	lsrs	r2, r4, #16
  40cb12:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  40cb16:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40cb1a:	fb81 0102 	smull	r0, r1, r1, r2
  40cb1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40cb22:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cb24:	9212      	str	r2, [sp, #72]	; 0x48
  40cb26:	0c04      	lsrs	r4, r0, #16
  40cb28:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40cb2c:	9908      	ldr	r1, [sp, #32]
  40cb2e:	0f8d      	lsrs	r5, r1, #30
  40cb30:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cb32:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
  40cb36:	ea4f 452e 	mov.w	r5, lr, asr #16
  40cb3a:	42ac      	cmp	r4, r5
  40cb3c:	bfb8      	it	lt
  40cb3e:	468e      	movlt	lr, r1
  40cb40:	4260      	negs	r0, r4
  40cb42:	f8d8 4068 	ldr.w	r4, [r8, #104]	; 0x68
  40cb46:	4285      	cmp	r5, r0
  40cb48:	bfb8      	it	lt
  40cb4a:	f1c1 0e00 	rsblt	lr, r1, #0
  40cb4e:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
  40cb52:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
  40cb56:	fb81 0102 	smull	r0, r1, r1, r2
  40cb5a:	460d      	mov	r5, r1
  40cb5c:	4604      	mov	r4, r0
  40cb5e:	e9cd 4508 	strd	r4, r5, [sp, #32]
  40cb62:	0c01      	lsrs	r1, r0, #16
  40cb64:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  40cb68:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40cb6a:	f8c8 e104 	str.w	lr, [r8, #260]	; 0x104
  40cb6e:	0fa0      	lsrs	r0, r4, #30
  40cb70:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
  40cb74:	424c      	negs	r4, r1
  40cb76:	ea4f 452c 	mov.w	r5, ip, asr #16
  40cb7a:	42a9      	cmp	r1, r5
  40cb7c:	bfb8      	it	lt
  40cb7e:	4684      	movlt	ip, r0
  40cb80:	42a5      	cmp	r5, r4
  40cb82:	bfb8      	it	lt
  40cb84:	f1c0 0c00 	rsblt	ip, r0, #0
  40cb88:	f8d8 006c 	ldr.w	r0, [r8, #108]	; 0x6c
  40cb8c:	f8c8 c108 	str.w	ip, [r8, #264]	; 0x108
  40cb90:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40cb94:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40cb98:	fb81 1202 	smull	r1, r2, r1, r2
  40cb9c:	460c      	mov	r4, r1
  40cb9e:	4615      	mov	r5, r2
  40cba0:	e9cd 4508 	strd	r4, r5, [sp, #32]
  40cba4:	0c0a      	lsrs	r2, r1, #16
  40cba6:	9909      	ldr	r1, [sp, #36]	; 0x24
  40cba8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  40cbac:	0fa4      	lsrs	r4, r4, #30
  40cbae:	ea44 0181 	orr.w	r1, r4, r1, lsl #2
  40cbb2:	4250      	negs	r0, r2
  40cbb4:	141c      	asrs	r4, r3, #16
  40cbb6:	42a2      	cmp	r2, r4
  40cbb8:	bfb8      	it	lt
  40cbba:	460b      	movlt	r3, r1
  40cbbc:	4284      	cmp	r4, r0
  40cbbe:	bfb8      	it	lt
  40cbc0:	424b      	neglt	r3, r1
  40cbc2:	9214      	str	r2, [sp, #80]	; 0x50
  40cbc4:	9113      	str	r1, [sp, #76]	; 0x4c
  40cbc6:	9415      	str	r4, [sp, #84]	; 0x54
  40cbc8:	f8c8 310c 	str.w	r3, [r8, #268]	; 0x10c
  40cbcc:	e722      	b.n	40ca14 <SphericalFxp_UpdateMag.part.0+0x4a4>
  40cbce:	f8d8 115c 	ldr.w	r1, [r8, #348]	; 0x15c
  40cbd2:	f8d8 3160 	ldr.w	r3, [r8, #352]	; 0x160
  40cbd6:	f8c8 1170 	str.w	r1, [r8, #368]	; 0x170
  40cbda:	f8c8 3174 	str.w	r3, [r8, #372]	; 0x174
  40cbde:	f8da 3008 	ldr.w	r3, [sl, #8]
  40cbe2:	4da6      	ldr	r5, [pc, #664]	; (40ce7c <SphericalFxp_UpdateMag.part.0+0x90c>)
  40cbe4:	441a      	add	r2, r3
  40cbe6:	2102      	movs	r1, #2
  40cbe8:	f8c8 2138 	str.w	r2, [r8, #312]	; 0x138
  40cbec:	fb05 f303 	mul.w	r3, r5, r3
  40cbf0:	9100      	str	r1, [sp, #0]
  40cbf2:	4620      	mov	r0, r4
  40cbf4:	f508 72bc 	add.w	r2, r8, #376	; 0x178
  40cbf8:	f508 71b8 	add.w	r1, r8, #368	; 0x170
  40cbfc:	f000 fffa 	bl	40dbf4 <fxpRecursiveVariance>
  40cc00:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
  40cc04:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40cc08:	2b70      	cmp	r3, #112	; 0x70
  40cc0a:	f000 80c9 	beq.w	40cda0 <SphericalFxp_UpdateMag.part.0+0x830>
  40cc0e:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
  40cc12:	f8da 3008 	ldr.w	r3, [sl, #8]
  40cc16:	f8d8 216c 	ldr.w	r2, [r8, #364]	; 0x16c
  40cc1a:	fb03 f301 	mul.w	r3, r3, r1
  40cc1e:	21c8      	movs	r1, #200	; 0xc8
  40cc20:	fb01 2303 	mla	r3, r1, r3, r2
  40cc24:	f8d8 2178 	ldr.w	r2, [r8, #376]	; 0x178
  40cc28:	f8c8 316c 	str.w	r3, [r8, #364]	; 0x16c
  40cc2c:	429a      	cmp	r2, r3
  40cc2e:	f6bf adfd 	bge.w	40c82c <SphericalFxp_UpdateMag.part.0+0x2bc>
  40cc32:	f8d8 4170 	ldr.w	r4, [r8, #368]	; 0x170
  40cc36:	f8d8 3174 	ldr.w	r3, [r8, #372]	; 0x174
  40cc3a:	f8c8 216c 	str.w	r2, [r8, #364]	; 0x16c
  40cc3e:	f8c8 4164 	str.w	r4, [r8, #356]	; 0x164
  40cc42:	f8c8 3168 	str.w	r3, [r8, #360]	; 0x168
  40cc46:	e5f5      	b.n	40c834 <SphericalFxp_UpdateMag.part.0+0x2c4>
  40cc48:	628d      	str	r5, [r1, #40]	; 0x28
  40cc4a:	9b06      	ldr	r3, [sp, #24]
  40cc4c:	681a      	ldr	r2, [r3, #0]
  40cc4e:	e55e      	b.n	40c70e <SphericalFxp_UpdateMag.part.0+0x19e>
  40cc50:	9907      	ldr	r1, [sp, #28]
  40cc52:	f8c8 1188 	str.w	r1, [r8, #392]	; 0x188
  40cc56:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
  40cc5a:	9908      	ldr	r1, [sp, #32]
  40cc5c:	f8c8 1190 	str.w	r1, [r8, #400]	; 0x190
  40cc60:	2200      	movs	r2, #0
  40cc62:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40cc64:	f8c8 e184 	str.w	lr, [r8, #388]	; 0x184
  40cc68:	f8c8 c18c 	str.w	ip, [r8, #396]	; 0x18c
  40cc6c:	f8c8 1194 	str.w	r1, [r8, #404]	; 0x194
  40cc70:	f8c8 7198 	str.w	r7, [r8, #408]	; 0x198
  40cc74:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
  40cc78:	2b00      	cmp	r3, #0
  40cc7a:	d171      	bne.n	40cd60 <SphericalFxp_UpdateMag.part.0+0x7f0>
  40cc7c:	f8da 1034 	ldr.w	r1, [sl, #52]	; 0x34
  40cc80:	2200      	movs	r2, #0
  40cc82:	4299      	cmp	r1, r3
  40cc84:	f8c8 21cc 	str.w	r2, [r8, #460]	; 0x1cc
  40cc88:	f340 8093 	ble.w	40cdb2 <SphericalFxp_UpdateMag.part.0+0x842>
  40cc8c:	f8da 1008 	ldr.w	r1, [sl, #8]
  40cc90:	440b      	add	r3, r1
  40cc92:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
  40cc96:	2a00      	cmp	r2, #0
  40cc98:	f47f ae54 	bne.w	40c944 <SphericalFxp_UpdateMag.part.0+0x3d4>
  40cc9c:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
  40cca0:	2b00      	cmp	r3, #0
  40cca2:	f77f ae61 	ble.w	40c968 <SphericalFxp_UpdateMag.part.0+0x3f8>
  40cca6:	f8d8 2120 	ldr.w	r2, [r8, #288]	; 0x120
  40ccaa:	f8d8 311c 	ldr.w	r3, [r8, #284]	; 0x11c
  40ccae:	9300      	str	r3, [sp, #0]
  40ccb0:	2001      	movs	r0, #1
  40ccb2:	2103      	movs	r1, #3
  40ccb4:	9003      	str	r0, [sp, #12]
  40ccb6:	9102      	str	r1, [sp, #8]
  40ccb8:	9201      	str	r2, [sp, #4]
  40ccba:	f508 7394 	add.w	r3, r8, #296	; 0x128
  40ccbe:	f508 7292 	add.w	r2, r8, #292	; 0x124
  40ccc2:	f508 7196 	add.w	r1, r8, #300	; 0x12c
  40ccc6:	9804      	ldr	r0, [sp, #16]
  40ccc8:	f000 fef2 	bl	40dab0 <fxpAdaptiveFilter>
  40cccc:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
  40ccd0:	f8da 1008 	ldr.w	r1, [sl, #8]
  40ccd4:	f8d8 21d4 	ldr.w	r2, [r8, #468]	; 0x1d4
  40ccd8:	440b      	add	r3, r1
  40ccda:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
  40ccde:	2a00      	cmp	r2, #0
  40cce0:	f43f ae58 	beq.w	40c994 <SphericalFxp_UpdateMag.part.0+0x424>
  40cce4:	f8d8 2074 	ldr.w	r2, [r8, #116]	; 0x74
  40cce8:	2a00      	cmp	r2, #0
  40ccea:	f77f ad12 	ble.w	40c712 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40ccee:	2b00      	cmp	r3, #0
  40ccf0:	f73f ae63 	bgt.w	40c9ba <SphericalFxp_UpdateMag.part.0+0x44a>
  40ccf4:	e50d      	b.n	40c712 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40ccf6:	9b06      	ldr	r3, [sp, #24]
  40ccf8:	990a      	ldr	r1, [sp, #40]	; 0x28
  40ccfa:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40ccfe:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  40cd02:	4648      	mov	r0, r9
  40cd04:	f7fd fcd2 	bl	40a6ac <invn_math_quat_mult_fxp>
  40cd08:	f8d8 316c 	ldr.w	r3, [r8, #364]	; 0x16c
  40cd0c:	f8d8 2128 	ldr.w	r2, [r8, #296]	; 0x128
  40cd10:	f8d8 1070 	ldr.w	r1, [r8, #112]	; 0x70
  40cd14:	eb03 02a2 	add.w	r2, r3, r2, asr #2
  40cd18:	064b      	lsls	r3, r1, #25
  40cd1a:	bf4c      	ite	mi
  40cd1c:	4b58      	ldrmi	r3, [pc, #352]	; (40ce80 <SphericalFxp_UpdateMag.part.0+0x910>)
  40cd1e:	4b59      	ldrpl	r3, [pc, #356]	; (40ce84 <SphericalFxp_UpdateMag.part.0+0x914>)
  40cd20:	4413      	add	r3, r2
  40cd22:	4a59      	ldr	r2, [pc, #356]	; (40ce88 <SphericalFxp_UpdateMag.part.0+0x918>)
  40cd24:	4293      	cmp	r3, r2
  40cd26:	bf28      	it	cs
  40cd28:	4613      	movcs	r3, r2
  40cd2a:	9a06      	ldr	r2, [sp, #24]
  40cd2c:	64d3      	str	r3, [r2, #76]	; 0x4c
  40cd2e:	e4f0      	b.n	40c712 <SphericalFxp_UpdateMag.part.0+0x1a2>
  40cd30:	f012 0240 	ands.w	r2, r2, #64	; 0x40
  40cd34:	f47f ad1a 	bne.w	40c76c <SphericalFxp_UpdateMag.part.0+0x1fc>
  40cd38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40cd3c:	f8c8 2138 	str.w	r2, [r8, #312]	; 0x138
  40cd40:	f8c8 3178 	str.w	r3, [r8, #376]	; 0x178
  40cd44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40cd48:	4b50      	ldr	r3, [pc, #320]	; (40ce8c <SphericalFxp_UpdateMag.part.0+0x91c>)
  40cd4a:	f8c8 216c 	str.w	r2, [r8, #364]	; 0x16c
  40cd4e:	f8c8 3128 	str.w	r3, [r8, #296]	; 0x128
  40cd52:	e50b      	b.n	40c76c <SphericalFxp_UpdateMag.part.0+0x1fc>
  40cd54:	4a4e      	ldr	r2, [pc, #312]	; (40ce90 <SphericalFxp_UpdateMag.part.0+0x920>)
  40cd56:	4293      	cmp	r3, r2
  40cd58:	dc0d      	bgt.n	40cd76 <SphericalFxp_UpdateMag.part.0+0x806>
  40cd5a:	4608      	mov	r0, r1
  40cd5c:	494d      	ldr	r1, [pc, #308]	; (40ce94 <SphericalFxp_UpdateMag.part.0+0x924>)
  40cd5e:	e4d3      	b.n	40c708 <SphericalFxp_UpdateMag.part.0+0x198>
  40cd60:	f508 7296 	add.w	r2, r8, #300	; 0x12c
  40cd64:	f508 71e0 	add.w	r1, r8, #448	; 0x1c0
  40cd68:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
  40cd6c:	f7fd fd04 	bl	40a778 <invn_math_quat_rotate_BtoI_fxp>
  40cd70:	f8d8 3180 	ldr.w	r3, [r8, #384]	; 0x180
  40cd74:	e782      	b.n	40cc7c <SphericalFxp_UpdateMag.part.0+0x70c>
  40cd76:	680a      	ldr	r2, [r1, #0]
  40cd78:	e4c9      	b.n	40c70e <SphericalFxp_UpdateMag.part.0+0x19e>
  40cd7a:	9806      	ldr	r0, [sp, #24]
  40cd7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40cd80:	6183      	str	r3, [r0, #24]
  40cd82:	61c3      	str	r3, [r0, #28]
  40cd84:	6243      	str	r3, [r0, #36]	; 0x24
  40cd86:	6202      	str	r2, [r0, #32]
  40cd88:	e43f      	b.n	40c60a <SphericalFxp_UpdateMag.part.0+0x9a>
  40cd8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40cd8e:	f8c8 20dc 	str.w	r2, [r8, #220]	; 0xdc
  40cd92:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
  40cd96:	f8c8 20e8 	str.w	r2, [r8, #232]	; 0xe8
  40cd9a:	f8c8 30e4 	str.w	r3, [r8, #228]	; 0xe4
  40cd9e:	e60c      	b.n	40c9ba <SphericalFxp_UpdateMag.part.0+0x44a>
  40cda0:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  40cda4:	f8da 1008 	ldr.w	r1, [sl, #8]
  40cda8:	f8d8 216c 	ldr.w	r2, [r8, #364]	; 0x16c
  40cdac:	fb01 2303 	mla	r3, r1, r3, r2
  40cdb0:	e738      	b.n	40cc24 <SphericalFxp_UpdateMag.part.0+0x6b4>
  40cdb2:	9c06      	ldr	r4, [sp, #24]
  40cdb4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40cdb6:	2301      	movs	r3, #1
  40cdb8:	f8c8 31cc 	str.w	r3, [r8, #460]	; 0x1cc
  40cdbc:	f104 0018 	add.w	r0, r4, #24
  40cdc0:	4631      	mov	r1, r6
  40cdc2:	f508 77d2 	add.w	r7, r8, #420	; 0x1a4
  40cdc6:	f7fd fccb 	bl	40a760 <invn_math_quat_invert_fxp>
  40cdca:	f508 7596 	add.w	r5, r8, #300	; 0x12c
  40cdce:	f104 013c 	add.w	r1, r4, #60	; 0x3c
  40cdd2:	4630      	mov	r0, r6
  40cdd4:	463a      	mov	r2, r7
  40cdd6:	f7fd fc69 	bl	40a6ac <invn_math_quat_mult_fxp>
  40cdda:	f508 74da 	add.w	r4, r8, #436	; 0x1b4
  40cdde:	4629      	mov	r1, r5
  40cde0:	f508 72e0 	add.w	r2, r8, #448	; 0x1c0
  40cde4:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
  40cde8:	f7fd fd3a 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40cdec:	4638      	mov	r0, r7
  40cdee:	4649      	mov	r1, r9
  40cdf0:	4622      	mov	r2, r4
  40cdf2:	f7fd fd35 	bl	40a860 <invn_math_quat_rotate_ItoB_fxp>
  40cdf6:	462a      	mov	r2, r5
  40cdf8:	4621      	mov	r1, r4
  40cdfa:	980a      	ldr	r0, [sp, #40]	; 0x28
  40cdfc:	f7fd fcbc 	bl	40a778 <invn_math_quat_rotate_BtoI_fxp>
  40ce00:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
  40ce04:	2a00      	cmp	r2, #0
  40ce06:	f43f af49 	beq.w	40cc9c <SphericalFxp_UpdateMag.part.0+0x72c>
  40ce0a:	e59b      	b.n	40c944 <SphericalFxp_UpdateMag.part.0+0x3d4>
  40ce0c:	f8d8 2014 	ldr.w	r2, [r8, #20]
  40ce10:	2a00      	cmp	r2, #0
  40ce12:	dd17      	ble.n	40ce44 <SphericalFxp_UpdateMag.part.0+0x8d4>
  40ce14:	9806      	ldr	r0, [sp, #24]
  40ce16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40ce1a:	6183      	str	r3, [r0, #24]
  40ce1c:	61c3      	str	r3, [r0, #28]
  40ce1e:	6203      	str	r3, [r0, #32]
  40ce20:	6242      	str	r2, [r0, #36]	; 0x24
  40ce22:	f7ff bbf2 	b.w	40c60a <SphericalFxp_UpdateMag.part.0+0x9a>
  40ce26:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
  40ce2a:	2b00      	cmp	r3, #0
  40ce2c:	dd15      	ble.n	40ce5a <SphericalFxp_UpdateMag.part.0+0x8ea>
  40ce2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40ce32:	f8c8 20dc 	str.w	r2, [r8, #220]	; 0xdc
  40ce36:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
  40ce3a:	f8c8 20e4 	str.w	r2, [r8, #228]	; 0xe4
  40ce3e:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
  40ce42:	e5ba      	b.n	40c9ba <SphericalFxp_UpdateMag.part.0+0x44a>
  40ce44:	f6bf abe1 	bge.w	40c60a <SphericalFxp_UpdateMag.part.0+0x9a>
  40ce48:	9806      	ldr	r0, [sp, #24]
  40ce4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40ce4e:	6183      	str	r3, [r0, #24]
  40ce50:	6203      	str	r3, [r0, #32]
  40ce52:	6243      	str	r3, [r0, #36]	; 0x24
  40ce54:	61c2      	str	r2, [r0, #28]
  40ce56:	f7ff bbd8 	b.w	40c60a <SphericalFxp_UpdateMag.part.0+0x9a>
  40ce5a:	f6bf adae 	bge.w	40c9ba <SphericalFxp_UpdateMag.part.0+0x44a>
  40ce5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40ce62:	f8c8 20dc 	str.w	r2, [r8, #220]	; 0xdc
  40ce66:	f8c8 20e4 	str.w	r2, [r8, #228]	; 0xe4
  40ce6a:	f8c8 20e8 	str.w	r2, [r8, #232]	; 0xe8
  40ce6e:	f8c8 30e0 	str.w	r3, [r8, #224]	; 0xe0
  40ce72:	e5a2      	b.n	40c9ba <SphericalFxp_UpdateMag.part.0+0x44a>
  40ce74:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
  40ce78:	e708      	b.n	40cc8c <SphericalFxp_UpdateMag.part.0+0x71c>
  40ce7a:	bf00      	nop
  40ce7c:	00041893 	.word	0x00041893
  40ce80:	006b3ba8 	.word	0x006b3ba8
  40ce84:	06487ed6 	.word	0x06487ed6
  40ce88:	1921fb54 	.word	0x1921fb54
  40ce8c:	0147adf0 	.word	0x0147adf0
  40ce90:	0c90fda9 	.word	0x0c90fda9
  40ce94:	0c90fdaa 	.word	0x0c90fdaa

0040ce98 <SphericalFxp_SetProductId>:
  40ce98:	7101      	strb	r1, [r0, #4]
  40ce9a:	4770      	bx	lr

0040ce9c <SphericalFxp_SetCustomParamAcc>:
  40ce9c:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
  40cea0:	4c12      	ldr	r4, [pc, #72]	; (40ceec <SphericalFxp_SetCustomParamAcc+0x50>)
  40cea2:	9e05      	ldr	r6, [sp, #20]
  40cea4:	9d06      	ldr	r5, [sp, #24]
  40cea6:	6101      	str	r1, [r0, #16]
  40cea8:	fb81 8904 	smull	r8, r9, r1, r4
  40ceac:	ea4f 7498 	mov.w	r4, r8, lsr #30
  40ceb0:	ea44 0489 	orr.w	r4, r4, r9, lsl #2
  40ceb4:	2c00      	cmp	r4, #0
  40ceb6:	dd14      	ble.n	40cee2 <SphericalFxp_SetCustomParamAcc+0x46>
  40ceb8:	490d      	ldr	r1, [pc, #52]	; (40cef0 <SphericalFxp_SetCustomParamAcc+0x54>)
  40ceba:	6044      	str	r4, [r0, #4]
  40cebc:	fb01 f104 	mul.w	r1, r1, r4
  40cec0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  40cec4:	bfa8      	it	ge
  40cec6:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  40ceca:	fb04 f202 	mul.w	r2, r4, r2
  40cece:	fb04 f403 	mul.w	r4, r4, r3
  40ced2:	64c4      	str	r4, [r0, #76]	; 0x4c
  40ced4:	6406      	str	r6, [r0, #64]	; 0x40
  40ced6:	62c5      	str	r5, [r0, #44]	; 0x2c
  40ced8:	6182      	str	r2, [r0, #24]
  40ceda:	6581      	str	r1, [r0, #88]	; 0x58
  40cedc:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
  40cee0:	4770      	bx	lr
  40cee2:	2401      	movs	r4, #1
  40cee4:	4902      	ldr	r1, [pc, #8]	; (40cef0 <SphericalFxp_SetCustomParamAcc+0x54>)
  40cee6:	6044      	str	r4, [r0, #4]
  40cee8:	e7ef      	b.n	40ceca <SphericalFxp_SetCustomParamAcc+0x2e>
  40ceea:	bf00      	nop
  40ceec:	0010624e 	.word	0x0010624e
  40cef0:	00a3d70a 	.word	0x00a3d70a

0040cef4 <SphericalFxp_SetCustomParamMag>:
  40cef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40cef8:	4c11      	ldr	r4, [pc, #68]	; (40cf40 <SphericalFxp_SetCustomParamMag+0x4c>)
  40cefa:	9f07      	ldr	r7, [sp, #28]
  40cefc:	9e08      	ldr	r6, [sp, #32]
  40cefe:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40cf00:	6141      	str	r1, [r0, #20]
  40cf02:	fb81 8904 	smull	r8, r9, r1, r4
  40cf06:	ea4f 7e98 	mov.w	lr, r8, lsr #30
  40cf0a:	ea4e 0489 	orr.w	r4, lr, r9, lsl #2
  40cf0e:	2c00      	cmp	r4, #0
  40cf10:	bfd8      	it	le
  40cf12:	2401      	movle	r4, #1
  40cf14:	fb04 f303 	mul.w	r3, r4, r3
  40cf18:	6503      	str	r3, [r0, #80]	; 0x50
  40cf1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cf1c:	6303      	str	r3, [r0, #48]	; 0x30
  40cf1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40cf20:	6343      	str	r3, [r0, #52]	; 0x34
  40cf22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cf24:	990e      	ldr	r1, [sp, #56]	; 0x38
  40cf26:	6383      	str	r3, [r0, #56]	; 0x38
  40cf28:	fb04 f202 	mul.w	r2, r4, r2
  40cf2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40cf2e:	6084      	str	r4, [r0, #8]
  40cf30:	61c2      	str	r2, [r0, #28]
  40cf32:	6207      	str	r7, [r0, #32]
  40cf34:	6246      	str	r6, [r0, #36]	; 0x24
  40cf36:	6285      	str	r5, [r0, #40]	; 0x28
  40cf38:	6543      	str	r3, [r0, #84]	; 0x54
  40cf3a:	63c1      	str	r1, [r0, #60]	; 0x3c
  40cf3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40cf40:	0010624e 	.word	0x0010624e

0040cf44 <SphericalFxp_SetCustomParamGyr>:
  40cf44:	b5f0      	push	{r4, r5, r6, r7, lr}
  40cf46:	4c0d      	ldr	r4, [pc, #52]	; (40cf7c <SphericalFxp_SetCustomParamGyr+0x38>)
  40cf48:	4e0d      	ldr	r6, [pc, #52]	; (40cf80 <SphericalFxp_SetCustomParamGyr+0x3c>)
  40cf4a:	60c1      	str	r1, [r0, #12]
  40cf4c:	fb81 4504 	smull	r4, r5, r1, r4
  40cf50:	0fa3      	lsrs	r3, r4, #30
  40cf52:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  40cf56:	fb81 6706 	smull	r6, r7, r1, r6
  40cf5a:	ea4f 7e96 	mov.w	lr, r6, lsr #30
  40cf5e:	2b00      	cmp	r3, #0
  40cf60:	bfd8      	it	le
  40cf62:	2301      	movle	r3, #1
  40cf64:	ea4e 0e87 	orr.w	lr, lr, r7, lsl #2
  40cf68:	f249 2668 	movw	r6, #37480	; 0x9268
  40cf6c:	fb06 e601 	mla	r6, r6, r1, lr
  40cf70:	6003      	str	r3, [r0, #0]
  40cf72:	fb03 f302 	mul.w	r3, r3, r2
  40cf76:	6446      	str	r6, [r0, #68]	; 0x44
  40cf78:	6483      	str	r3, [r0, #72]	; 0x48
  40cf7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40cf7c:	0010624e 	.word	0x0010624e
  40cf80:	2a423269 	.word	0x2a423269

0040cf84 <SphericalFxp_Init>:
  40cf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40cf86:	2307      	movs	r3, #7
  40cf88:	4604      	mov	r4, r0
  40cf8a:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
  40cf8e:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
  40cf92:	2100      	movs	r1, #0
  40cf94:	f002 fd62 	bl	40fa5c <memset>
  40cf98:	492c      	ldr	r1, [pc, #176]	; (40d04c <SphericalFxp_Init+0xc8>)
  40cf9a:	4e2d      	ldr	r6, [pc, #180]	; (40d050 <SphericalFxp_Init+0xcc>)
  40cf9c:	4b2d      	ldr	r3, [pc, #180]	; (40d054 <SphericalFxp_Init+0xd0>)
  40cf9e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  40cfa2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  40cfa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40cfaa:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
  40cfae:	f44f 706c 	mov.w	r0, #944	; 0x3b0
  40cfb2:	4a29      	ldr	r2, [pc, #164]	; (40d058 <SphericalFxp_Init+0xd4>)
  40cfb4:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
  40cfb8:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  40cfbc:	2602      	movs	r6, #2
  40cfbe:	f44f 7361 	mov.w	r3, #900	; 0x384
  40cfc2:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
  40cfc6:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
  40cfca:	f241 3188 	movw	r1, #5000	; 0x1388
  40cfce:	f242 7010 	movw	r0, #10000	; 0x2710
  40cfd2:	4d22      	ldr	r5, [pc, #136]	; (40d05c <SphericalFxp_Init+0xd8>)
  40cfd4:	4f22      	ldr	r7, [pc, #136]	; (40d060 <SphericalFxp_Init+0xdc>)
  40cfd6:	f8c4 6204 	str.w	r6, [r4, #516]	; 0x204
  40cfda:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  40cfde:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  40cfe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40cfe6:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
  40cfea:	f8c4 01e8 	str.w	r0, [r4, #488]	; 0x1e8
  40cfee:	210a      	movs	r1, #10
  40cff0:	20c8      	movs	r0, #200	; 0xc8
  40cff2:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
  40cff6:	f04f 32ff 	mov.w	r2, #4294967295
  40cffa:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
  40cffe:	f8c4 022c 	str.w	r0, [r4, #556]	; 0x22c
  40d002:	f8c4 7224 	str.w	r7, [r4, #548]	; 0x224
  40d006:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
  40d00a:	f8c4 61fc 	str.w	r6, [r4, #508]	; 0x1fc
  40d00e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  40d012:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
  40d016:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  40d01a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
  40d01e:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
  40d022:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
  40d026:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
  40d02a:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
  40d02e:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
  40d032:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
  40d036:	f8c4 2230 	str.w	r2, [r4, #560]	; 0x230
  40d03a:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
  40d03e:	f504 700e 	add.w	r0, r4, #568	; 0x238
  40d042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  40d046:	f000 b9cf 	b.w	40d3e8 <InterfaceOrientation_Reset>
  40d04a:	bf00      	nop
  40d04c:	06666666 	.word	0x06666666
  40d050:	0147adf0 	.word	0x0147adf0
  40d054:	06666664 	.word	0x06666664
  40d058:	1657184a 	.word	0x1657184a
  40d05c:	03fffffc 	.word	0x03fffffc
  40d060:	00a3d70c 	.word	0x00a3d70c

0040d064 <SphericalFxp_UpdateGyrData>:
  40d064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d068:	e891 00a0 	ldmia.w	r1, {r5, r7}
  40d06c:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  40d070:	688e      	ldr	r6, [r1, #8]
  40d072:	b09d      	sub	sp, #116	; 0x74
  40d074:	4604      	mov	r4, r0
  40d076:	fb83 8905 	smull	r8, r9, r3, r5
  40d07a:	fb83 0107 	smull	r0, r1, r3, r7
  40d07e:	fb83 ab06 	smull	sl, fp, r3, r6
  40d082:	9213      	str	r2, [sp, #76]	; 0x4c
  40d084:	950d      	str	r5, [sp, #52]	; 0x34
  40d086:	ea4f 7e90 	mov.w	lr, r0, lsr #30
  40d08a:	ea4f 7c98 	mov.w	ip, r8, lsr #30
  40d08e:	ea4f 729a 	mov.w	r2, sl, lsr #30
  40d092:	f504 7510 	add.w	r5, r4, #576	; 0x240
  40d096:	ea4e 0e81 	orr.w	lr, lr, r1, lsl #2
  40d09a:	ea4c 0c89 	orr.w	ip, ip, r9, lsl #2
  40d09e:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
  40d0a2:	4629      	mov	r1, r5
  40d0a4:	a815      	add	r0, sp, #84	; 0x54
  40d0a6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  40d0aa:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
  40d0ae:	970e      	str	r7, [sp, #56]	; 0x38
  40d0b0:	960f      	str	r6, [sp, #60]	; 0x3c
  40d0b2:	9217      	str	r2, [sp, #92]	; 0x5c
  40d0b4:	f7fd fece 	bl	40ae54 <invn_integrate_gyro_fast_trigo_fxp>
  40d0b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d0ba:	990e      	ldr	r1, [sp, #56]	; 0x38
  40d0bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d0be:	6663      	str	r3, [r4, #100]	; 0x64
  40d0c0:	f104 0638 	add.w	r6, r4, #56	; 0x38
  40d0c4:	2303      	movs	r3, #3
  40d0c6:	66a1      	str	r1, [r4, #104]	; 0x68
  40d0c8:	66e2      	str	r2, [r4, #108]	; 0x6c
  40d0ca:	4631      	mov	r1, r6
  40d0cc:	461a      	mov	r2, r3
  40d0ce:	2703      	movs	r7, #3
  40d0d0:	a815      	add	r0, sp, #84	; 0x54
  40d0d2:	f000 fd65 	bl	40dba0 <fxpScaleAndSaturate>
  40d0d6:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
  40d0da:	9700      	str	r7, [sp, #0]
  40d0dc:	4630      	mov	r0, r6
  40d0de:	f104 0250 	add.w	r2, r4, #80	; 0x50
  40d0e2:	f104 0144 	add.w	r1, r4, #68	; 0x44
  40d0e6:	f000 fd85 	bl	40dbf4 <fxpRecursiveVariance>
  40d0ea:	9816      	ldr	r0, [sp, #88]	; 0x58
  40d0ec:	9f15      	ldr	r7, [sp, #84]	; 0x54
  40d0ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40d0f0:	fb80 2300 	smull	r2, r3, r0, r0
  40d0f4:	fbc7 2307 	smlal	r2, r3, r7, r7
  40d0f8:	fbc1 2301 	smlal	r2, r3, r1, r1
  40d0fc:	0f96      	lsrs	r6, r2, #30
  40d0fe:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
  40d102:	6566      	str	r6, [r4, #84]	; 0x54
  40d104:	6f26      	ldr	r6, [r4, #112]	; 0x70
  40d106:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40d108:	f64f 72f0 	movw	r2, #65520	; 0xfff0
  40d10c:	4016      	ands	r6, r2
  40d10e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40d110:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
  40d114:	bfc8      	it	gt
  40d116:	f046 0601 	orrgt.w	r6, r6, #1
  40d11a:	2a03      	cmp	r2, #3
  40d11c:	6726      	str	r6, [r4, #112]	; 0x70
  40d11e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d120:	d060      	beq.n	40d1e4 <SphericalFxp_UpdateGyrData+0x180>
  40d122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d124:	2b00      	cmp	r3, #0
  40d126:	bfb8      	it	lt
  40d128:	425b      	neglt	r3, r3
  40d12a:	469c      	mov	ip, r3
  40d12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d12e:	2b00      	cmp	r3, #0
  40d130:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
  40d134:	bfb8      	it	lt
  40d136:	425b      	neglt	r3, r3
  40d138:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
  40d13c:	4699      	mov	r9, r3
  40d13e:	f8df e100 	ldr.w	lr, [pc, #256]	; 40d240 <SphericalFxp_UpdateGyrData+0x1dc>
  40d142:	f8d4 8230 	ldr.w	r8, [r4, #560]	; 0x230
  40d146:	45f2      	cmp	sl, lr
  40d148:	bfcc      	ite	gt
  40d14a:	2304      	movgt	r3, #4
  40d14c:	2300      	movle	r3, #0
  40d14e:	4333      	orrs	r3, r6
  40d150:	45f4      	cmp	ip, lr
  40d152:	bfcc      	ite	gt
  40d154:	2604      	movgt	r6, #4
  40d156:	2600      	movle	r6, #0
  40d158:	4333      	orrs	r3, r6
  40d15a:	45f1      	cmp	r9, lr
  40d15c:	bfcc      	ite	gt
  40d15e:	f04f 0e04 	movgt.w	lr, #4
  40d162:	f04f 0e00 	movle.w	lr, #0
  40d166:	ea43 030e 	orr.w	r3, r3, lr
  40d16a:	45d0      	cmp	r8, sl
  40d16c:	6723      	str	r3, [r4, #112]	; 0x70
  40d16e:	db01      	blt.n	40d174 <SphericalFxp_UpdateGyrData+0x110>
  40d170:	45e0      	cmp	r8, ip
  40d172:	da34      	bge.n	40d1de <SphericalFxp_UpdateGyrData+0x17a>
  40d174:	f043 0308 	orr.w	r3, r3, #8
  40d178:	6723      	str	r3, [r4, #112]	; 0x70
  40d17a:	075e      	lsls	r6, r3, #29
  40d17c:	d504      	bpl.n	40d188 <SphericalFxp_UpdateGyrData+0x124>
  40d17e:	4b2e      	ldr	r3, [pc, #184]	; (40d238 <SphericalFxp_UpdateGyrData+0x1d4>)
  40d180:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  40d184:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
  40d188:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40d18a:	f8d4 61dc 	ldr.w	r6, [r4, #476]	; 0x1dc
  40d18e:	f8d4 2238 	ldr.w	r2, [r4, #568]	; 0x238
  40d192:	6621      	str	r1, [r4, #96]	; 0x60
  40d194:	4433      	add	r3, r6
  40d196:	0791      	lsls	r1, r2, #30
  40d198:	65a7      	str	r7, [r4, #88]	; 0x58
  40d19a:	65e0      	str	r0, [r4, #92]	; 0x5c
  40d19c:	6363      	str	r3, [r4, #52]	; 0x34
  40d19e:	d50b      	bpl.n	40d1b8 <SphericalFxp_UpdateGyrData+0x154>
  40d1a0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40d1a2:	2b00      	cmp	r3, #0
  40d1a4:	dd18      	ble.n	40d1d8 <SphericalFxp_UpdateGyrData+0x174>
  40d1a6:	f504 7219 	add.w	r2, r4, #612	; 0x264
  40d1aa:	4629      	mov	r1, r5
  40d1ac:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
  40d1b0:	f7fd fa7c 	bl	40a6ac <invn_math_quat_mult_fxp>
  40d1b4:	f8d4 2238 	ldr.w	r2, [r4, #568]	; 0x238
  40d1b8:	0753      	lsls	r3, r2, #29
  40d1ba:	d50d      	bpl.n	40d1d8 <SphericalFxp_UpdateGyrData+0x174>
  40d1bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40d1be:	2b00      	cmp	r3, #0
  40d1c0:	dd0a      	ble.n	40d1d8 <SphericalFxp_UpdateGyrData+0x174>
  40d1c2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
  40d1c6:	2b00      	cmp	r3, #0
  40d1c8:	dd06      	ble.n	40d1d8 <SphericalFxp_UpdateGyrData+0x174>
  40d1ca:	4629      	mov	r1, r5
  40d1cc:	f504 721d 	add.w	r2, r4, #628	; 0x274
  40d1d0:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
  40d1d4:	f7fd fa6a 	bl	40a6ac <invn_math_quat_mult_fxp>
  40d1d8:	b01d      	add	sp, #116	; 0x74
  40d1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d1de:	45c1      	cmp	r9, r8
  40d1e0:	ddcb      	ble.n	40d17a <SphericalFxp_UpdateGyrData+0x116>
  40d1e2:	e7c7      	b.n	40d174 <SphericalFxp_UpdateGyrData+0x110>
  40d1e4:	4b15      	ldr	r3, [pc, #84]	; (40d23c <SphericalFxp_UpdateGyrData+0x1d8>)
  40d1e6:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
  40d1ea:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
  40d1ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40d1f0:	459a      	cmp	sl, r3
  40d1f2:	bfcc      	ite	gt
  40d1f4:	f06f 0e02 	mvngt.w	lr, #2
  40d1f8:	f04f 3eff 	movle.w	lr, #4294967295
  40d1fc:	2a00      	cmp	r2, #0
  40d1fe:	bfb8      	it	lt
  40d200:	4252      	neglt	r2, r2
  40d202:	429a      	cmp	r2, r3
  40d204:	4694      	mov	ip, r2
  40d206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d208:	f046 0612 	orr.w	r6, r6, #18
  40d20c:	ea06 060e 	and.w	r6, r6, lr
  40d210:	bfcc      	ite	gt
  40d212:	f06f 0e02 	mvngt.w	lr, #2
  40d216:	f04f 3eff 	movle.w	lr, #4294967295
  40d21a:	2a00      	cmp	r2, #0
  40d21c:	bfb8      	it	lt
  40d21e:	4252      	neglt	r2, r2
  40d220:	429a      	cmp	r2, r3
  40d222:	ea06 060e 	and.w	r6, r6, lr
  40d226:	bfcc      	ite	gt
  40d228:	f06f 0302 	mvngt.w	r3, #2
  40d22c:	f04f 33ff 	movle.w	r3, #4294967295
  40d230:	4691      	mov	r9, r2
  40d232:	401e      	ands	r6, r3
  40d234:	e783      	b.n	40d13e <SphericalFxp_UpdateGyrData+0xda>
  40d236:	bf00      	nop
  40d238:	3999999a 	.word	0x3999999a
  40d23c:	29999999 	.word	0x29999999
  40d240:	3f333333 	.word	0x3f333333

0040d244 <SphericalFxp_UpdateAccData>:
  40d244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40d248:	b097      	sub	sp, #92	; 0x5c
  40d24a:	680e      	ldr	r6, [r1, #0]
  40d24c:	684d      	ldr	r5, [r1, #4]
  40d24e:	688b      	ldr	r3, [r1, #8]
  40d250:	9214      	str	r2, [sp, #80]	; 0x50
  40d252:	2a03      	cmp	r2, #3
  40d254:	4604      	mov	r4, r0
  40d256:	960d      	str	r6, [sp, #52]	; 0x34
  40d258:	950e      	str	r5, [sp, #56]	; 0x38
  40d25a:	930f      	str	r3, [sp, #60]	; 0x3c
  40d25c:	f000 8081 	beq.w	40d362 <SphericalFxp_UpdateAccData+0x11e>
  40d260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40d262:	b912      	cbnz	r2, 40d26a <SphericalFxp_UpdateAccData+0x26>
  40d264:	60e6      	str	r6, [r4, #12]
  40d266:	6125      	str	r5, [r4, #16]
  40d268:	6163      	str	r3, [r4, #20]
  40d26a:	2203      	movs	r2, #3
  40d26c:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
  40d270:	9200      	str	r2, [sp, #0]
  40d272:	f104 010c 	add.w	r1, r4, #12
  40d276:	f104 0224 	add.w	r2, r4, #36	; 0x24
  40d27a:	a80d      	add	r0, sp, #52	; 0x34
  40d27c:	f000 fcba 	bl	40dbf4 <fxpRecursiveVariance>
  40d280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40d282:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
  40d286:	f8d4 2238 	ldr.w	r2, [r4, #568]	; 0x238
  40d28a:	440b      	add	r3, r1
  40d28c:	f012 0f06 	tst.w	r2, #6
  40d290:	62e3      	str	r3, [r4, #44]	; 0x2c
  40d292:	d102      	bne.n	40d29a <SphericalFxp_UpdateAccData+0x56>
  40d294:	b017      	add	sp, #92	; 0x5c
  40d296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d29a:	f504 7910 	add.w	r9, r4, #576	; 0x240
  40d29e:	f104 0578 	add.w	r5, r4, #120	; 0x78
  40d2a2:	a90d      	add	r1, sp, #52	; 0x34
  40d2a4:	462a      	mov	r2, r5
  40d2a6:	4648      	mov	r0, r9
  40d2a8:	f7fd fa66 	bl	40a778 <invn_math_quat_rotate_BtoI_fxp>
  40d2ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40d2ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
  40d2b0:	f013 0f10 	tst.w	r3, #16
  40d2b4:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
  40d2b8:	bf05      	ittet	eq
  40d2ba:	1292      	asreq	r2, r2, #10
  40d2bc:	f44f 61fa 	moveq.w	r1, #2000	; 0x7d0
  40d2c0:	eb03 23a2 	addne.w	r3, r3, r2, asr #10
  40d2c4:	fb01 2303 	mlaeq	r3, r1, r3, r2
  40d2c8:	f894 223c 	ldrb.w	r2, [r4, #572]	; 0x23c
  40d2cc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  40d2d0:	2a01      	cmp	r2, #1
  40d2d2:	d04b      	beq.n	40d36c <SphericalFxp_UpdateAccData+0x128>
  40d2d4:	2203      	movs	r2, #3
  40d2d6:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
  40d2da:	9200      	str	r2, [sp, #0]
  40d2dc:	a80d      	add	r0, sp, #52	; 0x34
  40d2de:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
  40d2e2:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
  40d2e6:	f000 fc85 	bl	40dbf4 <fxpRecursiveVariance>
  40d2ea:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
  40d2ee:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
  40d2f2:	4413      	add	r3, r2
  40d2f4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40d2f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  40d2fa:	2a00      	cmp	r2, #0
  40d2fc:	dc40      	bgt.n	40d380 <SphericalFxp_UpdateAccData+0x13c>
  40d2fe:	f104 0178 	add.w	r1, r4, #120	; 0x78
  40d302:	c90e      	ldmia	r1, {r1, r2, r3}
  40d304:	2b00      	cmp	r3, #0
  40d306:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  40d30a:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
  40d30e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  40d312:	db47      	blt.n	40d3a4 <SphericalFxp_UpdateAccData+0x160>
  40d314:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
  40d318:	079b      	lsls	r3, r3, #30
  40d31a:	d51a      	bpl.n	40d352 <SphericalFxp_UpdateAccData+0x10e>
  40d31c:	f104 0894 	add.w	r8, r4, #148	; 0x94
  40d320:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
  40d324:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
  40d328:	f104 06b0 	add.w	r6, r4, #176	; 0xb0
  40d32c:	4633      	mov	r3, r6
  40d32e:	463a      	mov	r2, r7
  40d330:	4629      	mov	r1, r5
  40d332:	4640      	mov	r0, r8
  40d334:	f7fd fef0 	bl	40b118 <invn_quat_6x_correction_fxp>
  40d338:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
  40d33c:	3301      	adds	r3, #1
  40d33e:	2b04      	cmp	r3, #4
  40d340:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
  40d344:	ddf2      	ble.n	40d32c <SphericalFxp_UpdateAccData+0xe8>
  40d346:	4649      	mov	r1, r9
  40d348:	4628      	mov	r0, r5
  40d34a:	f504 7219 	add.w	r2, r4, #612	; 0x264
  40d34e:	f7fd f9ad 	bl	40a6ac <invn_math_quat_mult_fxp>
  40d352:	6f63      	ldr	r3, [r4, #116]	; 0x74
  40d354:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
  40d358:	4413      	add	r3, r2
  40d35a:	6763      	str	r3, [r4, #116]	; 0x74
  40d35c:	b017      	add	sp, #92	; 0x5c
  40d35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40d362:	6f02      	ldr	r2, [r0, #112]	; 0x70
  40d364:	f042 0220 	orr.w	r2, r2, #32
  40d368:	6702      	str	r2, [r0, #112]	; 0x70
  40d36a:	e779      	b.n	40d260 <SphericalFxp_UpdateAccData+0x1c>
  40d36c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  40d36e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
  40d372:	eb03 1322 	add.w	r3, r3, r2, asr #4
  40d376:	6f62      	ldr	r2, [r4, #116]	; 0x74
  40d378:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  40d37c:	2a00      	cmp	r2, #0
  40d37e:	ddbe      	ble.n	40d2fe <SphericalFxp_UpdateAccData+0xba>
  40d380:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
  40d384:	9200      	str	r2, [sp, #0]
  40d386:	2601      	movs	r6, #1
  40d388:	2103      	movs	r1, #3
  40d38a:	9301      	str	r3, [sp, #4]
  40d38c:	9102      	str	r1, [sp, #8]
  40d38e:	4628      	mov	r0, r5
  40d390:	9603      	str	r6, [sp, #12]
  40d392:	f104 038c 	add.w	r3, r4, #140	; 0x8c
  40d396:	f104 0288 	add.w	r2, r4, #136	; 0x88
  40d39a:	f104 0194 	add.w	r1, r4, #148	; 0x94
  40d39e:	f000 fb87 	bl	40dab0 <fxpAdaptiveFilter>
  40d3a2:	e7b7      	b.n	40d314 <SphericalFxp_UpdateAccData+0xd0>
  40d3a4:	2300      	movs	r3, #0
  40d3a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40d3aa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  40d3ae:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  40d3b2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
  40d3b6:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
  40d3ba:	e7ab      	b.n	40d314 <SphericalFxp_UpdateAccData+0xd0>

0040d3bc <SphericalFxp_UpdateMagData>:
  40d3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d3be:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  40d3c0:	680f      	ldr	r7, [r1, #0]
  40d3c2:	684e      	ldr	r6, [r1, #4]
  40d3c4:	6889      	ldr	r1, [r1, #8]
  40d3c6:	b093      	sub	sp, #76	; 0x4c
  40d3c8:	9210      	str	r2, [sp, #64]	; 0x40
  40d3ca:	930f      	str	r3, [sp, #60]	; 0x3c
  40d3cc:	9709      	str	r7, [sp, #36]	; 0x24
  40d3ce:	960a      	str	r6, [sp, #40]	; 0x28
  40d3d0:	910b      	str	r1, [sp, #44]	; 0x2c
  40d3d2:	b135      	cbz	r5, 40d3e2 <SphericalFxp_UpdateMagData+0x26>
  40d3d4:	ab01      	add	r3, sp, #4
  40d3d6:	f500 720e 	add.w	r2, r0, #568	; 0x238
  40d3da:	f500 71ee 	add.w	r1, r0, #476	; 0x1dc
  40d3de:	f7ff f8c7 	bl	40c570 <SphericalFxp_UpdateMag.part.0>
  40d3e2:	b013      	add	sp, #76	; 0x4c
  40d3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d3e6:	bf00      	nop

0040d3e8 <InterfaceOrientation_Reset>:
  40d3e8:	b510      	push	{r4, lr}
  40d3ea:	2250      	movs	r2, #80	; 0x50
  40d3ec:	4604      	mov	r4, r0
  40d3ee:	2100      	movs	r1, #0
  40d3f0:	f002 fb34 	bl	40fa5c <memset>
  40d3f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40d3f8:	4a05      	ldr	r2, [pc, #20]	; (40d410 <InterfaceOrientation_Reset+0x28>)
  40d3fa:	60a3      	str	r3, [r4, #8]
  40d3fc:	2007      	movs	r0, #7
  40d3fe:	2100      	movs	r1, #0
  40d400:	6020      	str	r0, [r4, #0]
  40d402:	7121      	strb	r1, [r4, #4]
  40d404:	62e3      	str	r3, [r4, #44]	; 0x2c
  40d406:	63e3      	str	r3, [r4, #60]	; 0x3c
  40d408:	61a3      	str	r3, [r4, #24]
  40d40a:	62a2      	str	r2, [r4, #40]	; 0x28
  40d40c:	64e2      	str	r2, [r4, #76]	; 0x4c
  40d40e:	bd10      	pop	{r4, pc}
  40d410:	1921fb54 	.word	0x1921fb54

0040d414 <invn_math_sin_q30_fxp>:
  40d414:	4a11      	ldr	r2, [pc, #68]	; (40d45c <invn_math_sin_q30_fxp+0x48>)
  40d416:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d41a:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d41e:	4291      	cmp	r1, r2
  40d420:	dc01      	bgt.n	40d426 <invn_math_sin_q30_fxp+0x12>
  40d422:	0040      	lsls	r0, r0, #1
  40d424:	4770      	bx	lr
  40d426:	b510      	push	{r4, lr}
  40d428:	490d      	ldr	r1, [pc, #52]	; (40d460 <invn_math_sin_q30_fxp+0x4c>)
  40d42a:	f7fd faad 	bl	40a988 <invn_math_mult_q29_fxp>
  40d42e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d432:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d436:	f1c1 4180 	rsb	r1, r1, #1073741824	; 0x40000000
  40d43a:	f7fd faa5 	bl	40a988 <invn_math_mult_q29_fxp>
  40d43e:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d442:	4604      	mov	r4, r0
  40d444:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d448:	4806      	ldr	r0, [pc, #24]	; (40d464 <invn_math_sin_q30_fxp+0x50>)
  40d44a:	f7fd fa9d 	bl	40a988 <invn_math_mult_q29_fxp>
  40d44e:	4906      	ldr	r1, [pc, #24]	; (40d468 <invn_math_sin_q30_fxp+0x54>)
  40d450:	4401      	add	r1, r0
  40d452:	4620      	mov	r0, r4
  40d454:	f7fd fa98 	bl	40a988 <invn_math_mult_q29_fxp>
  40d458:	0040      	lsls	r0, r0, #1
  40d45a:	bd10      	pop	{r4, pc}
  40d45c:	05fcb923 	.word	0x05fcb923
  40d460:	145f306e 	.word	0x145f306e
  40d464:	07333333 	.word	0x07333333
  40d468:	18cccccd 	.word	0x18cccccd

0040d46c <invn_math_cos_q30_fxp>:
  40d46c:	1e03      	subs	r3, r0, #0
  40d46e:	4814      	ldr	r0, [pc, #80]	; (40d4c0 <invn_math_cos_q30_fxp+0x54>)
  40d470:	bfb4      	ite	lt
  40d472:	18c0      	addlt	r0, r0, r3
  40d474:	1ac0      	subge	r0, r0, r3
  40d476:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
  40d47a:	4b12      	ldr	r3, [pc, #72]	; (40d4c4 <invn_math_cos_q30_fxp+0x58>)
  40d47c:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
  40d480:	429a      	cmp	r2, r3
  40d482:	dc01      	bgt.n	40d488 <invn_math_cos_q30_fxp+0x1c>
  40d484:	0040      	lsls	r0, r0, #1
  40d486:	4770      	bx	lr
  40d488:	b510      	push	{r4, lr}
  40d48a:	490f      	ldr	r1, [pc, #60]	; (40d4c8 <invn_math_cos_q30_fxp+0x5c>)
  40d48c:	f7fd fa7c 	bl	40a988 <invn_math_mult_q29_fxp>
  40d490:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d494:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d498:	f1c1 4180 	rsb	r1, r1, #1073741824	; 0x40000000
  40d49c:	f7fd fa74 	bl	40a988 <invn_math_mult_q29_fxp>
  40d4a0:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d4a4:	4604      	mov	r4, r0
  40d4a6:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d4aa:	4808      	ldr	r0, [pc, #32]	; (40d4cc <invn_math_cos_q30_fxp+0x60>)
  40d4ac:	f7fd fa6c 	bl	40a988 <invn_math_mult_q29_fxp>
  40d4b0:	4907      	ldr	r1, [pc, #28]	; (40d4d0 <invn_math_cos_q30_fxp+0x64>)
  40d4b2:	4401      	add	r1, r0
  40d4b4:	4620      	mov	r0, r4
  40d4b6:	f7fd fa67 	bl	40a988 <invn_math_mult_q29_fxp>
  40d4ba:	0040      	lsls	r0, r0, #1
  40d4bc:	bd10      	pop	{r4, pc}
  40d4be:	bf00      	nop
  40d4c0:	3243f6a9 	.word	0x3243f6a9
  40d4c4:	05fcb923 	.word	0x05fcb923
  40d4c8:	145f306e 	.word	0x145f306e
  40d4cc:	07333333 	.word	0x07333333
  40d4d0:	18cccccd 	.word	0x18cccccd

0040d4d4 <invn_cross_product_q30>:
  40d4d4:	684b      	ldr	r3, [r1, #4]
  40d4d6:	b4f0      	push	{r4, r5, r6, r7}
  40d4d8:	6845      	ldr	r5, [r0, #4]
  40d4da:	688c      	ldr	r4, [r1, #8]
  40d4dc:	6886      	ldr	r6, [r0, #8]
  40d4de:	fb85 4504 	smull	r4, r5, r5, r4
  40d4e2:	fb86 6703 	smull	r6, r7, r6, r3
  40d4e6:	1ba4      	subs	r4, r4, r6
  40d4e8:	eb65 0507 	sbc.w	r5, r5, r7
  40d4ec:	0fa3      	lsrs	r3, r4, #30
  40d4ee:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  40d4f2:	6013      	str	r3, [r2, #0]
  40d4f4:	688b      	ldr	r3, [r1, #8]
  40d4f6:	6885      	ldr	r5, [r0, #8]
  40d4f8:	680c      	ldr	r4, [r1, #0]
  40d4fa:	6806      	ldr	r6, [r0, #0]
  40d4fc:	fb85 4504 	smull	r4, r5, r5, r4
  40d500:	fb86 6703 	smull	r6, r7, r6, r3
  40d504:	1ba4      	subs	r4, r4, r6
  40d506:	eb65 0507 	sbc.w	r5, r5, r7
  40d50a:	0fa3      	lsrs	r3, r4, #30
  40d50c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  40d510:	6053      	str	r3, [r2, #4]
  40d512:	e890 0018 	ldmia.w	r0, {r3, r4}
  40d516:	680d      	ldr	r5, [r1, #0]
  40d518:	6848      	ldr	r0, [r1, #4]
  40d51a:	fb84 4505 	smull	r4, r5, r4, r5
  40d51e:	fb83 0100 	smull	r0, r1, r3, r0
  40d522:	1b00      	subs	r0, r0, r4
  40d524:	eb61 0105 	sbc.w	r1, r1, r5
  40d528:	0f83      	lsrs	r3, r0, #30
  40d52a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  40d52e:	6093      	str	r3, [r2, #8]
  40d530:	bcf0      	pop	{r4, r5, r6, r7}
  40d532:	4770      	bx	lr

0040d534 <invn_normalize_vector_q30>:
  40d534:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d536:	4605      	mov	r5, r0
  40d538:	c805      	ldmia	r0, {r0, r2}
  40d53a:	460c      	mov	r4, r1
  40d53c:	fb82 2302 	smull	r2, r3, r2, r2
  40d540:	68a9      	ldr	r1, [r5, #8]
  40d542:	fbc0 2300 	smlal	r2, r3, r0, r0
  40d546:	fbc1 2301 	smlal	r2, r3, r1, r1
  40d54a:	b083      	sub	sp, #12
  40d54c:	0f90      	lsrs	r0, r2, #30
  40d54e:	a901      	add	r1, sp, #4
  40d550:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
  40d554:	f7fd faa6 	bl	40aaa4 <invn_math_inv_sqrt_q30_fxp>
  40d558:	9b01      	ldr	r3, [sp, #4]
  40d55a:	682e      	ldr	r6, [r5, #0]
  40d55c:	f1c3 031e 	rsb	r3, r3, #30
  40d560:	fb80 6706 	smull	r6, r7, r0, r6
  40d564:	f1c3 0220 	rsb	r2, r3, #32
  40d568:	fa07 fc02 	lsl.w	ip, r7, r2
  40d56c:	f1b3 0e20 	subs.w	lr, r3, #32
  40d570:	fa26 f103 	lsr.w	r1, r6, r3
  40d574:	ea41 010c 	orr.w	r1, r1, ip
  40d578:	bf5c      	itt	pl
  40d57a:	fa47 fe0e 	asrpl.w	lr, r7, lr
  40d57e:	ea41 010e 	orrpl.w	r1, r1, lr
  40d582:	6021      	str	r1, [r4, #0]
  40d584:	686e      	ldr	r6, [r5, #4]
  40d586:	fb80 6706 	smull	r6, r7, r0, r6
  40d58a:	f1b3 0e20 	subs.w	lr, r3, #32
  40d58e:	fa26 f103 	lsr.w	r1, r6, r3
  40d592:	fa07 fc02 	lsl.w	ip, r7, r2
  40d596:	ea41 010c 	orr.w	r1, r1, ip
  40d59a:	bf5c      	itt	pl
  40d59c:	fa47 fe0e 	asrpl.w	lr, r7, lr
  40d5a0:	ea41 010e 	orrpl.w	r1, r1, lr
  40d5a4:	6061      	str	r1, [r4, #4]
  40d5a6:	68a9      	ldr	r1, [r5, #8]
  40d5a8:	fb80 0101 	smull	r0, r1, r0, r1
  40d5ac:	fa20 f503 	lsr.w	r5, r0, r3
  40d5b0:	fa01 f202 	lsl.w	r2, r1, r2
  40d5b4:	3b20      	subs	r3, #32
  40d5b6:	ea45 0502 	orr.w	r5, r5, r2
  40d5ba:	bf5c      	itt	pl
  40d5bc:	fa41 f303 	asrpl.w	r3, r1, r3
  40d5c0:	431d      	orrpl	r5, r3
  40d5c2:	60a5      	str	r5, [r4, #8]
  40d5c4:	b003      	add	sp, #12
  40d5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0040d5c8 <invn_normalize_quaternion_q30>:
  40d5c8:	6842      	ldr	r2, [r0, #4]
  40d5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d5cc:	6806      	ldr	r6, [r0, #0]
  40d5ce:	6885      	ldr	r5, [r0, #8]
  40d5d0:	fb82 2302 	smull	r2, r3, r2, r2
  40d5d4:	4604      	mov	r4, r0
  40d5d6:	fbc6 2306 	smlal	r2, r3, r6, r6
  40d5da:	68c0      	ldr	r0, [r0, #12]
  40d5dc:	fbc5 2305 	smlal	r2, r3, r5, r5
  40d5e0:	fbc0 2300 	smlal	r2, r3, r0, r0
  40d5e4:	b083      	sub	sp, #12
  40d5e6:	0f90      	lsrs	r0, r2, #30
  40d5e8:	a901      	add	r1, sp, #4
  40d5ea:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
  40d5ee:	f7fd fa59 	bl	40aaa4 <invn_math_inv_sqrt_q30_fxp>
  40d5f2:	9b01      	ldr	r3, [sp, #4]
  40d5f4:	6826      	ldr	r6, [r4, #0]
  40d5f6:	f1c3 031e 	rsb	r3, r3, #30
  40d5fa:	fb80 6706 	smull	r6, r7, r0, r6
  40d5fe:	f1c3 0220 	rsb	r2, r3, #32
  40d602:	fa07 fe02 	lsl.w	lr, r7, r2
  40d606:	f1b3 0520 	subs.w	r5, r3, #32
  40d60a:	fa26 f103 	lsr.w	r1, r6, r3
  40d60e:	6866      	ldr	r6, [r4, #4]
  40d610:	ea41 010e 	orr.w	r1, r1, lr
  40d614:	bf5c      	itt	pl
  40d616:	fa47 f505 	asrpl.w	r5, r7, r5
  40d61a:	4329      	orrpl	r1, r5
  40d61c:	fb80 6706 	smull	r6, r7, r0, r6
  40d620:	fa07 fe02 	lsl.w	lr, r7, r2
  40d624:	f1b3 0520 	subs.w	r5, r3, #32
  40d628:	6021      	str	r1, [r4, #0]
  40d62a:	fa26 f103 	lsr.w	r1, r6, r3
  40d62e:	68a6      	ldr	r6, [r4, #8]
  40d630:	ea41 010e 	orr.w	r1, r1, lr
  40d634:	bf5c      	itt	pl
  40d636:	fa47 f505 	asrpl.w	r5, r7, r5
  40d63a:	4329      	orrpl	r1, r5
  40d63c:	fb80 6706 	smull	r6, r7, r0, r6
  40d640:	f1b3 0520 	subs.w	r5, r3, #32
  40d644:	fa07 fe02 	lsl.w	lr, r7, r2
  40d648:	6061      	str	r1, [r4, #4]
  40d64a:	fa26 f103 	lsr.w	r1, r6, r3
  40d64e:	ea41 010e 	orr.w	r1, r1, lr
  40d652:	bf5c      	itt	pl
  40d654:	fa47 f505 	asrpl.w	r5, r7, r5
  40d658:	4329      	orrpl	r1, r5
  40d65a:	68e5      	ldr	r5, [r4, #12]
  40d65c:	60a1      	str	r1, [r4, #8]
  40d65e:	fb80 0105 	smull	r0, r1, r0, r5
  40d662:	fa20 f503 	lsr.w	r5, r0, r3
  40d666:	fa01 f202 	lsl.w	r2, r1, r2
  40d66a:	3b20      	subs	r3, #32
  40d66c:	ea45 0502 	orr.w	r5, r5, r2
  40d670:	bf5c      	itt	pl
  40d672:	fa41 f303 	asrpl.w	r3, r1, r3
  40d676:	431d      	orrpl	r5, r3
  40d678:	60e5      	str	r5, [r4, #12]
  40d67a:	b003      	add	sp, #12
  40d67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d67e:	bf00      	nop

0040d680 <rls_core_Bierman4_fxp>:
  40d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d684:	b08f      	sub	sp, #60	; 0x3c
  40d686:	469b      	mov	fp, r3
  40d688:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  40d68c:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40d68e:	9209      	str	r2, [sp, #36]	; 0x24
  40d690:	4688      	mov	r8, r1
  40d692:	4605      	mov	r5, r0
  40d694:	a90d      	add	r1, sp, #52	; 0x34
  40d696:	4650      	mov	r0, sl
  40d698:	f7fd fa74 	bl	40ab84 <invn_math_inverse_q30_fxp>
  40d69c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d69e:	f8db 7000 	ldr.w	r7, [fp]
  40d6a2:	f8db 4004 	ldr.w	r4, [fp, #4]
  40d6a6:	f8db 1008 	ldr.w	r1, [fp, #8]
  40d6aa:	f8db 200c 	ldr.w	r2, [fp, #12]
  40d6ae:	f1c3 031e 	rsb	r3, r3, #30
  40d6b2:	4432      	add	r2, r6
  40d6b4:	4437      	add	r7, r6
  40d6b6:	4434      	add	r4, r6
  40d6b8:	4431      	add	r1, r6
  40d6ba:	fa40 f903 	asr.w	r9, r0, r3
  40d6be:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d6c0:	f8cb 7000 	str.w	r7, [fp]
  40d6c4:	f8cb 4004 	str.w	r4, [fp, #4]
  40d6c8:	f8cb 200c 	str.w	r2, [fp, #12]
  40d6cc:	f8cb 1008 	str.w	r1, [fp, #8]
  40d6d0:	f8d8 1000 	ldr.w	r1, [r8]
  40d6d4:	6818      	ldr	r0, [r3, #0]
  40d6d6:	9104      	str	r1, [sp, #16]
  40d6d8:	f7fd f950 	bl	40a97c <invn_math_mult_q15_fxp>
  40d6dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d6de:	f8d8 1004 	ldr.w	r1, [r8, #4]
  40d6e2:	68df      	ldr	r7, [r3, #12]
  40d6e4:	691a      	ldr	r2, [r3, #16]
  40d6e6:	689e      	ldr	r6, [r3, #8]
  40d6e8:	695b      	ldr	r3, [r3, #20]
  40d6ea:	f8d8 c000 	ldr.w	ip, [r8]
  40d6ee:	461c      	mov	r4, r3
  40d6f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d6f2:	685b      	ldr	r3, [r3, #4]
  40d6f4:	9303      	str	r3, [sp, #12]
  40d6f6:	46a6      	mov	lr, r4
  40d6f8:	fb81 2302 	smull	r2, r3, r1, r2
  40d6fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
  40d700:	fbc7 230c 	smlal	r2, r3, r7, ip
  40d704:	fbc4 230e 	smlal	r2, r3, r4, lr
  40d708:	e9cd 2300 	strd	r2, r3, [sp]
  40d70c:	9b03      	ldr	r3, [sp, #12]
  40d70e:	fb81 6706 	smull	r6, r7, r1, r6
  40d712:	fbcc 6703 	smlal	r6, r7, ip, r3
  40d716:	9b00      	ldr	r3, [sp, #0]
  40d718:	0bf4      	lsrs	r4, r6, #15
  40d71a:	0bda      	lsrs	r2, r3, #15
  40d71c:	f8d8 6008 	ldr.w	r6, [r8, #8]
  40d720:	1843      	adds	r3, r0, r1
  40d722:	9307      	str	r3, [sp, #28]
  40d724:	ea44 4447 	orr.w	r4, r4, r7, lsl #17
  40d728:	9b01      	ldr	r3, [sp, #4]
  40d72a:	9904      	ldr	r1, [sp, #16]
  40d72c:	f8db 0000 	ldr.w	r0, [fp]
  40d730:	1934      	adds	r4, r6, r4
  40d732:	f8d8 600c 	ldr.w	r6, [r8, #12]
  40d736:	940b      	str	r4, [sp, #44]	; 0x2c
  40d738:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
  40d73c:	4416      	add	r6, r2
  40d73e:	f7fd f91d 	bl	40a97c <invn_math_mult_q15_fxp>
  40d742:	9907      	ldr	r1, [sp, #28]
  40d744:	9000      	str	r0, [sp, #0]
  40d746:	f8db 0004 	ldr.w	r0, [fp, #4]
  40d74a:	f7fd f917 	bl	40a97c <invn_math_mult_q15_fxp>
  40d74e:	4621      	mov	r1, r4
  40d750:	9005      	str	r0, [sp, #20]
  40d752:	f8db 0008 	ldr.w	r0, [fp, #8]
  40d756:	f7fd f911 	bl	40a97c <invn_math_mult_q15_fxp>
  40d75a:	4631      	mov	r1, r6
  40d75c:	9006      	str	r0, [sp, #24]
  40d75e:	f8db 000c 	ldr.w	r0, [fp, #12]
  40d762:	9608      	str	r6, [sp, #32]
  40d764:	f7fd f90a 	bl	40a97c <invn_math_mult_q15_fxp>
  40d768:	686a      	ldr	r2, [r5, #4]
  40d76a:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40d76e:	6829      	ldr	r1, [r5, #0]
  40d770:	f8d8 6000 	ldr.w	r6, [r8]
  40d774:	68af      	ldr	r7, [r5, #8]
  40d776:	f8d8 4008 	ldr.w	r4, [r8, #8]
  40d77a:	9003      	str	r0, [sp, #12]
  40d77c:	fb82 2303 	smull	r2, r3, r2, r3
  40d780:	fbc6 2301 	smlal	r2, r3, r6, r1
  40d784:	fbc4 2307 	smlal	r2, r3, r4, r7
  40d788:	f8d8 000c 	ldr.w	r0, [r8, #12]
  40d78c:	68e9      	ldr	r1, [r5, #12]
  40d78e:	9e08      	ldr	r6, [sp, #32]
  40d790:	9508      	str	r5, [sp, #32]
  40d792:	461c      	mov	r4, r3
  40d794:	4613      	mov	r3, r2
  40d796:	fbc0 3401 	smlal	r3, r4, r0, r1
  40d79a:	0bda      	lsrs	r2, r3, #15
  40d79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d79e:	f8dd 8010 	ldr.w	r8, [sp, #16]
  40d7a2:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  40d7a6:	1a9b      	subs	r3, r3, r2
  40d7a8:	2b00      	cmp	r3, #0
  40d7aa:	f04f 0700 	mov.w	r7, #0
  40d7ae:	9309      	str	r3, [sp, #36]	; 0x24
  40d7b0:	463d      	mov	r5, r7
  40d7b2:	bfb8      	it	lt
  40d7b4:	425b      	neglt	r3, r3
  40d7b6:	930a      	str	r3, [sp, #40]	; 0x28
  40d7b8:	b22a      	sxth	r2, r5
  40d7ba:	b375      	cbz	r5, 40d81a <rls_core_Bierman4_fxp+0x19a>
  40d7bc:	2a01      	cmp	r2, #1
  40d7be:	d073      	beq.n	40d8a8 <rls_core_Bierman4_fxp+0x228>
  40d7c0:	2a02      	cmp	r2, #2
  40d7c2:	f000 80bc 	beq.w	40d93e <rls_core_Bierman4_fxp+0x2be>
  40d7c6:	9903      	ldr	r1, [sp, #12]
  40d7c8:	f8db 700c 	ldr.w	r7, [fp, #12]
  40d7cc:	4630      	mov	r0, r6
  40d7ce:	f7fd f8d5 	bl	40a97c <invn_math_mult_q15_fxp>
  40d7d2:	4649      	mov	r1, r9
  40d7d4:	eb0a 0400 	add.w	r4, sl, r0
  40d7d8:	4630      	mov	r0, r6
  40d7da:	f7fd f8cf 	bl	40a97c <invn_math_mult_q15_fxp>
  40d7de:	a90d      	add	r1, sp, #52	; 0x34
  40d7e0:	4243      	negs	r3, r0
  40d7e2:	4620      	mov	r0, r4
  40d7e4:	9304      	str	r3, [sp, #16]
  40d7e6:	f7fd f9cd 	bl	40ab84 <invn_math_inverse_q30_fxp>
  40d7ea:	990d      	ldr	r1, [sp, #52]	; 0x34
  40d7ec:	f1c1 011e 	rsb	r1, r1, #30
  40d7f0:	fa40 f901 	asr.w	r9, r0, r1
  40d7f4:	4648      	mov	r0, r9
  40d7f6:	4639      	mov	r1, r7
  40d7f8:	f7fd f8c0 	bl	40a97c <invn_math_mult_q15_fxp>
  40d7fc:	4601      	mov	r1, r0
  40d7fe:	4650      	mov	r0, sl
  40d800:	f7fd f8bc 	bl	40a97c <invn_math_mult_q15_fxp>
  40d804:	2d03      	cmp	r5, #3
  40d806:	f000 80ba 	beq.w	40d97e <rls_core_Bierman4_fxp+0x2fe>
  40d80a:	b2aa      	uxth	r2, r5
  40d80c:	2a03      	cmp	r2, #3
  40d80e:	d026      	beq.n	40d85e <rls_core_Bierman4_fxp+0x1de>
  40d810:	3501      	adds	r5, #1
  40d812:	46a2      	mov	sl, r4
  40d814:	b22a      	sxth	r2, r5
  40d816:	2d00      	cmp	r5, #0
  40d818:	d1d0      	bne.n	40d7bc <rls_core_Bierman4_fxp+0x13c>
  40d81a:	9900      	ldr	r1, [sp, #0]
  40d81c:	f8db 7000 	ldr.w	r7, [fp]
  40d820:	4640      	mov	r0, r8
  40d822:	f7fd f8ab 	bl	40a97c <invn_math_mult_q15_fxp>
  40d826:	4649      	mov	r1, r9
  40d828:	eb0a 0400 	add.w	r4, sl, r0
  40d82c:	4640      	mov	r0, r8
  40d82e:	f7fd f8a5 	bl	40a97c <invn_math_mult_q15_fxp>
  40d832:	a90d      	add	r1, sp, #52	; 0x34
  40d834:	4620      	mov	r0, r4
  40d836:	f7fd f9a5 	bl	40ab84 <invn_math_inverse_q30_fxp>
  40d83a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d83c:	f1c2 021e 	rsb	r2, r2, #30
  40d840:	fa40 f902 	asr.w	r9, r0, r2
  40d844:	4639      	mov	r1, r7
  40d846:	4648      	mov	r0, r9
  40d848:	f7fd f898 	bl	40a97c <invn_math_mult_q15_fxp>
  40d84c:	4601      	mov	r1, r0
  40d84e:	4650      	mov	r0, sl
  40d850:	f7fd f894 	bl	40a97c <invn_math_mult_q15_fxp>
  40d854:	b2aa      	uxth	r2, r5
  40d856:	2a03      	cmp	r2, #3
  40d858:	f8cb 0000 	str.w	r0, [fp]
  40d85c:	d1d8      	bne.n	40d810 <rls_core_Bierman4_fxp+0x190>
  40d85e:	9d08      	ldr	r5, [sp, #32]
  40d860:	9909      	ldr	r1, [sp, #36]	; 0x24
  40d862:	4648      	mov	r0, r9
  40d864:	f7fd f88a 	bl	40a97c <invn_math_mult_q15_fxp>
  40d868:	9900      	ldr	r1, [sp, #0]
  40d86a:	4604      	mov	r4, r0
  40d86c:	f7fd f886 	bl	40a97c <invn_math_mult_q15_fxp>
  40d870:	682b      	ldr	r3, [r5, #0]
  40d872:	9905      	ldr	r1, [sp, #20]
  40d874:	4418      	add	r0, r3
  40d876:	6028      	str	r0, [r5, #0]
  40d878:	4620      	mov	r0, r4
  40d87a:	f7fd f87f 	bl	40a97c <invn_math_mult_q15_fxp>
  40d87e:	686b      	ldr	r3, [r5, #4]
  40d880:	9906      	ldr	r1, [sp, #24]
  40d882:	4418      	add	r0, r3
  40d884:	6068      	str	r0, [r5, #4]
  40d886:	4620      	mov	r0, r4
  40d888:	f7fd f878 	bl	40a97c <invn_math_mult_q15_fxp>
  40d88c:	68ab      	ldr	r3, [r5, #8]
  40d88e:	9903      	ldr	r1, [sp, #12]
  40d890:	4418      	add	r0, r3
  40d892:	60a8      	str	r0, [r5, #8]
  40d894:	4620      	mov	r0, r4
  40d896:	f7fd f871 	bl	40a97c <invn_math_mult_q15_fxp>
  40d89a:	68eb      	ldr	r3, [r5, #12]
  40d89c:	4418      	add	r0, r3
  40d89e:	60e8      	str	r0, [r5, #12]
  40d8a0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40d8a2:	b00f      	add	sp, #60	; 0x3c
  40d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d8a8:	9905      	ldr	r1, [sp, #20]
  40d8aa:	9807      	ldr	r0, [sp, #28]
  40d8ac:	f8db 7004 	ldr.w	r7, [fp, #4]
  40d8b0:	f7fd f864 	bl	40a97c <invn_math_mult_q15_fxp>
  40d8b4:	4649      	mov	r1, r9
  40d8b6:	eb0a 0400 	add.w	r4, sl, r0
  40d8ba:	9807      	ldr	r0, [sp, #28]
  40d8bc:	f7fd f85e 	bl	40a97c <invn_math_mult_q15_fxp>
  40d8c0:	a90d      	add	r1, sp, #52	; 0x34
  40d8c2:	4243      	negs	r3, r0
  40d8c4:	4620      	mov	r0, r4
  40d8c6:	9304      	str	r3, [sp, #16]
  40d8c8:	f7fd f95c 	bl	40ab84 <invn_math_inverse_q30_fxp>
  40d8cc:	990d      	ldr	r1, [sp, #52]	; 0x34
  40d8ce:	f1c1 011e 	rsb	r1, r1, #30
  40d8d2:	fa40 f901 	asr.w	r9, r0, r1
  40d8d6:	4648      	mov	r0, r9
  40d8d8:	4639      	mov	r1, r7
  40d8da:	f7fd f84f 	bl	40a97c <invn_math_mult_q15_fxp>
  40d8de:	4601      	mov	r1, r0
  40d8e0:	4650      	mov	r0, sl
  40d8e2:	f7fd f84b 	bl	40a97c <invn_math_mult_q15_fxp>
  40d8e6:	2d01      	cmp	r5, #1
  40d8e8:	f000 8084 	beq.w	40d9f4 <rls_core_Bierman4_fxp+0x374>
  40d8ec:	2d02      	cmp	r5, #2
  40d8ee:	d189      	bne.n	40d804 <rls_core_Bierman4_fxp+0x184>
  40d8f0:	9f00      	ldr	r7, [sp, #0]
  40d8f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d8f4:	f8cb 0008 	str.w	r0, [fp, #8]
  40d8f8:	9904      	ldr	r1, [sp, #16]
  40d8fa:	f8d3 a004 	ldr.w	sl, [r3, #4]
  40d8fe:	4638      	mov	r0, r7
  40d900:	f7fd f83c 	bl	40a97c <invn_math_mult_q15_fxp>
  40d904:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d906:	4450      	add	r0, sl
  40d908:	6058      	str	r0, [r3, #4]
  40d90a:	4651      	mov	r1, sl
  40d90c:	9806      	ldr	r0, [sp, #24]
  40d90e:	f7fd f835 	bl	40a97c <invn_math_mult_q15_fxp>
  40d912:	463b      	mov	r3, r7
  40d914:	4403      	add	r3, r0
  40d916:	f8dd a014 	ldr.w	sl, [sp, #20]
  40d91a:	9300      	str	r3, [sp, #0]
  40d91c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d91e:	9904      	ldr	r1, [sp, #16]
  40d920:	689f      	ldr	r7, [r3, #8]
  40d922:	4650      	mov	r0, sl
  40d924:	f7fd f82a 	bl	40a97c <invn_math_mult_q15_fxp>
  40d928:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d92a:	4438      	add	r0, r7
  40d92c:	6098      	str	r0, [r3, #8]
  40d92e:	4639      	mov	r1, r7
  40d930:	9806      	ldr	r0, [sp, #24]
  40d932:	f7fd f823 	bl	40a97c <invn_math_mult_q15_fxp>
  40d936:	4653      	mov	r3, sl
  40d938:	4403      	add	r3, r0
  40d93a:	9305      	str	r3, [sp, #20]
  40d93c:	e768      	b.n	40d810 <rls_core_Bierman4_fxp+0x190>
  40d93e:	9906      	ldr	r1, [sp, #24]
  40d940:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d942:	f8db 7008 	ldr.w	r7, [fp, #8]
  40d946:	f7fd f819 	bl	40a97c <invn_math_mult_q15_fxp>
  40d94a:	4649      	mov	r1, r9
  40d94c:	eb0a 0400 	add.w	r4, sl, r0
  40d950:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d952:	f7fd f813 	bl	40a97c <invn_math_mult_q15_fxp>
  40d956:	a90d      	add	r1, sp, #52	; 0x34
  40d958:	4243      	negs	r3, r0
  40d95a:	4620      	mov	r0, r4
  40d95c:	9304      	str	r3, [sp, #16]
  40d95e:	f7fd f911 	bl	40ab84 <invn_math_inverse_q30_fxp>
  40d962:	990d      	ldr	r1, [sp, #52]	; 0x34
  40d964:	f1c1 011e 	rsb	r1, r1, #30
  40d968:	fa40 f901 	asr.w	r9, r0, r1
  40d96c:	4648      	mov	r0, r9
  40d96e:	4639      	mov	r1, r7
  40d970:	f7fd f804 	bl	40a97c <invn_math_mult_q15_fxp>
  40d974:	4601      	mov	r1, r0
  40d976:	4650      	mov	r0, sl
  40d978:	f7fd f800 	bl	40a97c <invn_math_mult_q15_fxp>
  40d97c:	e7b6      	b.n	40d8ec <rls_core_Bierman4_fxp+0x26c>
  40d97e:	9e04      	ldr	r6, [sp, #16]
  40d980:	f8dd 8000 	ldr.w	r8, [sp]
  40d984:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d986:	f8cb 000c 	str.w	r0, [fp, #12]
  40d98a:	4631      	mov	r1, r6
  40d98c:	4640      	mov	r0, r8
  40d98e:	68dc      	ldr	r4, [r3, #12]
  40d990:	9d08      	ldr	r5, [sp, #32]
  40d992:	f7fc fff3 	bl	40a97c <invn_math_mult_q15_fxp>
  40d996:	9f03      	ldr	r7, [sp, #12]
  40d998:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d99a:	4420      	add	r0, r4
  40d99c:	60d8      	str	r0, [r3, #12]
  40d99e:	4621      	mov	r1, r4
  40d9a0:	4638      	mov	r0, r7
  40d9a2:	f7fc ffeb 	bl	40a97c <invn_math_mult_q15_fxp>
  40d9a6:	4643      	mov	r3, r8
  40d9a8:	4403      	add	r3, r0
  40d9aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
  40d9ae:	9300      	str	r3, [sp, #0]
  40d9b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9b2:	4631      	mov	r1, r6
  40d9b4:	4640      	mov	r0, r8
  40d9b6:	691c      	ldr	r4, [r3, #16]
  40d9b8:	f7fc ffe0 	bl	40a97c <invn_math_mult_q15_fxp>
  40d9bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9be:	4420      	add	r0, r4
  40d9c0:	6118      	str	r0, [r3, #16]
  40d9c2:	4621      	mov	r1, r4
  40d9c4:	4638      	mov	r0, r7
  40d9c6:	f7fc ffd9 	bl	40a97c <invn_math_mult_q15_fxp>
  40d9ca:	4643      	mov	r3, r8
  40d9cc:	4631      	mov	r1, r6
  40d9ce:	4403      	add	r3, r0
  40d9d0:	9e06      	ldr	r6, [sp, #24]
  40d9d2:	9305      	str	r3, [sp, #20]
  40d9d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9d6:	4630      	mov	r0, r6
  40d9d8:	695c      	ldr	r4, [r3, #20]
  40d9da:	f7fc ffcf 	bl	40a97c <invn_math_mult_q15_fxp>
  40d9de:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9e0:	4420      	add	r0, r4
  40d9e2:	6158      	str	r0, [r3, #20]
  40d9e4:	4621      	mov	r1, r4
  40d9e6:	4638      	mov	r0, r7
  40d9e8:	f7fc ffc8 	bl	40a97c <invn_math_mult_q15_fxp>
  40d9ec:	4633      	mov	r3, r6
  40d9ee:	4403      	add	r3, r0
  40d9f0:	9306      	str	r3, [sp, #24]
  40d9f2:	e735      	b.n	40d860 <rls_core_Bierman4_fxp+0x1e0>
  40d9f4:	f8dd a000 	ldr.w	sl, [sp]
  40d9f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9fa:	f8cb 0004 	str.w	r0, [fp, #4]
  40d9fe:	9904      	ldr	r1, [sp, #16]
  40da00:	681f      	ldr	r7, [r3, #0]
  40da02:	4650      	mov	r0, sl
  40da04:	f7fc ffba 	bl	40a97c <invn_math_mult_q15_fxp>
  40da08:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40da0a:	4438      	add	r0, r7
  40da0c:	6018      	str	r0, [r3, #0]
  40da0e:	4639      	mov	r1, r7
  40da10:	9805      	ldr	r0, [sp, #20]
  40da12:	f7fc ffb3 	bl	40a97c <invn_math_mult_q15_fxp>
  40da16:	4653      	mov	r3, sl
  40da18:	4403      	add	r3, r0
  40da1a:	9300      	str	r3, [sp, #0]
  40da1c:	e6f5      	b.n	40d80a <rls_core_Bierman4_fxp+0x18a>
  40da1e:	bf00      	nop

0040da20 <fxpRecursiveVariance3_q30>:
  40da20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40da24:	460c      	mov	r4, r1
  40da26:	6806      	ldr	r6, [r0, #0]
  40da28:	6809      	ldr	r1, [r1, #0]
  40da2a:	1a76      	subs	r6, r6, r1
  40da2c:	4680      	mov	r8, r0
  40da2e:	4631      	mov	r1, r6
  40da30:	4618      	mov	r0, r3
  40da32:	4615      	mov	r5, r2
  40da34:	461f      	mov	r7, r3
  40da36:	f7fc ffad 	bl	40a994 <invn_math_mult_q30_fxp>
  40da3a:	6823      	ldr	r3, [r4, #0]
  40da3c:	4403      	add	r3, r0
  40da3e:	6023      	str	r3, [r4, #0]
  40da40:	4601      	mov	r1, r0
  40da42:	4630      	mov	r0, r6
  40da44:	682e      	ldr	r6, [r5, #0]
  40da46:	f7fc ffa5 	bl	40a994 <invn_math_mult_q30_fxp>
  40da4a:	f1c7 4980 	rsb	r9, r7, #1073741824	; 0x40000000
  40da4e:	1831      	adds	r1, r6, r0
  40da50:	4648      	mov	r0, r9
  40da52:	f7fc ff9f 	bl	40a994 <invn_math_mult_q30_fxp>
  40da56:	6028      	str	r0, [r5, #0]
  40da58:	6863      	ldr	r3, [r4, #4]
  40da5a:	f8d8 6004 	ldr.w	r6, [r8, #4]
  40da5e:	1af6      	subs	r6, r6, r3
  40da60:	4631      	mov	r1, r6
  40da62:	4638      	mov	r0, r7
  40da64:	f7fc ff96 	bl	40a994 <invn_math_mult_q30_fxp>
  40da68:	6863      	ldr	r3, [r4, #4]
  40da6a:	4403      	add	r3, r0
  40da6c:	6063      	str	r3, [r4, #4]
  40da6e:	4601      	mov	r1, r0
  40da70:	4630      	mov	r0, r6
  40da72:	686e      	ldr	r6, [r5, #4]
  40da74:	f7fc ff8e 	bl	40a994 <invn_math_mult_q30_fxp>
  40da78:	1831      	adds	r1, r6, r0
  40da7a:	4648      	mov	r0, r9
  40da7c:	f7fc ff8a 	bl	40a994 <invn_math_mult_q30_fxp>
  40da80:	6068      	str	r0, [r5, #4]
  40da82:	68a3      	ldr	r3, [r4, #8]
  40da84:	f8d8 6008 	ldr.w	r6, [r8, #8]
  40da88:	1af6      	subs	r6, r6, r3
  40da8a:	4631      	mov	r1, r6
  40da8c:	4638      	mov	r0, r7
  40da8e:	f7fc ff81 	bl	40a994 <invn_math_mult_q30_fxp>
  40da92:	68a3      	ldr	r3, [r4, #8]
  40da94:	4403      	add	r3, r0
  40da96:	4601      	mov	r1, r0
  40da98:	60a3      	str	r3, [r4, #8]
  40da9a:	4630      	mov	r0, r6
  40da9c:	68ac      	ldr	r4, [r5, #8]
  40da9e:	f7fc ff79 	bl	40a994 <invn_math_mult_q30_fxp>
  40daa2:	1821      	adds	r1, r4, r0
  40daa4:	4648      	mov	r0, r9
  40daa6:	f7fc ff75 	bl	40a994 <invn_math_mult_q30_fxp>
  40daaa:	60a8      	str	r0, [r5, #8]
  40daac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040dab0 <fxpAdaptiveFilter>:
  40dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dab4:	b083      	sub	sp, #12
  40dab6:	469b      	mov	fp, r3
  40dab8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40daba:	681b      	ldr	r3, [r3, #0]
  40dabc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40dabe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40dac0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40dac2:	4682      	mov	sl, r0
  40dac4:	18e8      	adds	r0, r5, r3
  40dac6:	4688      	mov	r8, r1
  40dac8:	bf52      	itee	pl
  40daca:	13c1      	asrpl	r1, r0, #15
  40dacc:	f640 41cc 	movwmi	r1, #3276	; 0xccc
  40dad0:	4831      	ldrmi	r0, [pc, #196]	; (40db98 <fxpAdaptiveFilter+0xe8>)
  40dad2:	f8cb 0000 	str.w	r0, [fp]
  40dad6:	1871      	adds	r1, r6, r1
  40dad8:	4691      	mov	r9, r2
  40dada:	bf48      	it	mi
  40dadc:	f04f 4180 	movmi.w	r1, #1073741824	; 0x40000000
  40dae0:	aa01      	add	r2, sp, #4
  40dae2:	f7fd f8e5 	bl	40acb0 <invn_math_divide_q30_fxp>
  40dae6:	9a01      	ldr	r2, [sp, #4]
  40dae8:	f8c9 0000 	str.w	r0, [r9]
  40daec:	f1a2 030f 	sub.w	r3, r2, #15
  40daf0:	2b00      	cmp	r3, #0
  40daf2:	9301      	str	r3, [sp, #4]
  40daf4:	dd4a      	ble.n	40db8c <fxpAdaptiveFilter+0xdc>
  40daf6:	4098      	lsls	r0, r3
  40daf8:	4b28      	ldr	r3, [pc, #160]	; (40db9c <fxpAdaptiveFilter+0xec>)
  40dafa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  40dafe:	4298      	cmp	r0, r3
  40db00:	bfa8      	it	ge
  40db02:	4618      	movge	r0, r3
  40db04:	f8c9 0000 	str.w	r0, [r9]
  40db08:	f8db 1000 	ldr.w	r1, [fp]
  40db0c:	f1c0 4080 	rsb	r0, r0, #1073741824	; 0x40000000
  40db10:	f7fc ff40 	bl	40a994 <invn_math_mult_q30_fxp>
  40db14:	00a4      	lsls	r4, r4, #2
  40db16:	44a2      	add	sl, r4
  40db18:	f8cb 0000 	str.w	r0, [fp]
  40db1c:	4444      	add	r4, r8
  40db1e:	b387      	cbz	r7, 40db82 <fxpAdaptiveFilter+0xd2>
  40db20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40db24:	2100      	movs	r1, #0
  40db26:	e019      	b.n	40db5c <fxpAdaptiveFilter+0xac>
  40db28:	f854 cc04 	ldr.w	ip, [r4, #-4]
  40db2c:	f8d9 5000 	ldr.w	r5, [r9]
  40db30:	f85a ed04 	ldr.w	lr, [sl, #-4]!
  40db34:	4666      	mov	r6, ip
  40db36:	1b42      	subs	r2, r0, r5
  40db38:	ea4f 77e6 	mov.w	r7, r6, asr #31
  40db3c:	eb61 73e5 	sbc.w	r3, r1, r5, asr #31
  40db40:	fb02 f607 	mul.w	r6, r2, r7
  40db44:	fb0c 6603 	mla	r6, ip, r3, r6
  40db48:	fba2 230c 	umull	r2, r3, r2, ip
  40db4c:	4433      	add	r3, r6
  40db4e:	fbce 2305 	smlal	r2, r3, lr, r5
  40db52:	0f92      	lsrs	r2, r2, #30
  40db54:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
  40db58:	f844 2d04 	str.w	r2, [r4, #-4]!
  40db5c:	4544      	cmp	r4, r8
  40db5e:	d1e3      	bne.n	40db28 <fxpAdaptiveFilter+0x78>
  40db60:	b003      	add	sp, #12
  40db62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db66:	f85a 2d04 	ldr.w	r2, [sl, #-4]!
  40db6a:	f8d9 3000 	ldr.w	r3, [r9]
  40db6e:	f854 1c04 	ldr.w	r1, [r4, #-4]
  40db72:	fb82 5603 	smull	r5, r6, r2, r3
  40db76:	0faa      	lsrs	r2, r5, #30
  40db78:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
  40db7c:	4411      	add	r1, r2
  40db7e:	f844 1d04 	str.w	r1, [r4, #-4]!
  40db82:	45a0      	cmp	r8, r4
  40db84:	d1ef      	bne.n	40db66 <fxpAdaptiveFilter+0xb6>
  40db86:	b003      	add	sp, #12
  40db88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40db8c:	bf1c      	itt	ne
  40db8e:	f1c2 020f 	rsbne	r2, r2, #15
  40db92:	4110      	asrne	r0, r2
  40db94:	e7b0      	b.n	40daf8 <fxpAdaptiveFilter+0x48>
  40db96:	bf00      	nop
  40db98:	06666666 	.word	0x06666666
  40db9c:	3999999a 	.word	0x3999999a

0040dba0 <fxpScaleAndSaturate>:
  40dba0:	b333      	cbz	r3, 40dbf0 <fxpScaleAndSaturate+0x50>
  40dba2:	009b      	lsls	r3, r3, #2
  40dba4:	b4f0      	push	{r4, r5, r6, r7}
  40dba6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  40dbaa:	4419      	add	r1, r3
  40dbac:	18c5      	adds	r5, r0, r3
  40dbae:	4117      	asrs	r7, r2
  40dbb0:	2300      	movs	r3, #0
  40dbb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
  40dbb6:	4094      	lsls	r4, r2
  40dbb8:	f841 4c04 	str.w	r4, [r1, #-4]
  40dbbc:	f855 6c04 	ldr.w	r6, [r5, #-4]
  40dbc0:	42be      	cmp	r6, r7
  40dbc2:	bfc8      	it	gt
  40dbc4:	f04f 4480 	movgt.w	r4, #1073741824	; 0x40000000
  40dbc8:	f841 4c04 	str.w	r4, [r1, #-4]
  40dbcc:	f855 6d04 	ldr.w	r6, [r5, #-4]!
  40dbd0:	f1c6 0600 	rsb	r6, r6, #0
  40dbd4:	bfc8      	it	gt
  40dbd6:	2301      	movgt	r3, #1
  40dbd8:	42be      	cmp	r6, r7
  40dbda:	bfc4      	itt	gt
  40dbdc:	f04f 4440 	movgt.w	r4, #3221225472	; 0xc0000000
  40dbe0:	2301      	movgt	r3, #1
  40dbe2:	4285      	cmp	r5, r0
  40dbe4:	f841 4d04 	str.w	r4, [r1, #-4]!
  40dbe8:	d1e3      	bne.n	40dbb2 <fxpScaleAndSaturate+0x12>
  40dbea:	4618      	mov	r0, r3
  40dbec:	bcf0      	pop	{r4, r5, r6, r7}
  40dbee:	4770      	bx	lr
  40dbf0:	4618      	mov	r0, r3
  40dbf2:	4770      	bx	lr

0040dbf4 <fxpRecursiveVariance>:
  40dbf4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40dbf8:	9e08      	ldr	r6, [sp, #32]
  40dbfa:	b3be      	cbz	r6, 40dc6c <fxpRecursiveVariance+0x78>
  40dbfc:	00b6      	lsls	r6, r6, #2
  40dbfe:	4431      	add	r1, r6
  40dc00:	4698      	mov	r8, r3
  40dc02:	4406      	add	r6, r0
  40dc04:	ea4f 79e3 	mov.w	r9, r3, asr #31
  40dc08:	f851 7c04 	ldr.w	r7, [r1, #-4]
  40dc0c:	f856 5d04 	ldr.w	r5, [r6, #-4]!
  40dc10:	1bed      	subs	r5, r5, r7
  40dc12:	fb85 ab03 	smull	sl, fp, r5, r3
  40dc16:	ea4f 749a 	mov.w	r4, sl, lsr #30
  40dc1a:	ea44 048b 	orr.w	r4, r4, fp, lsl #2
  40dc1e:	4427      	add	r7, r4
  40dc20:	f841 7d04 	str.w	r7, [r1, #-4]!
  40dc24:	fb85 4504 	smull	r4, r5, r5, r4
  40dc28:	6817      	ldr	r7, [r2, #0]
  40dc2a:	0fa4      	lsrs	r4, r4, #30
  40dc2c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  40dc30:	4427      	add	r7, r4
  40dc32:	42b0      	cmp	r0, r6
  40dc34:	6017      	str	r7, [r2, #0]
  40dc36:	d1e7      	bne.n	40dc08 <fxpRecursiveVariance+0x14>
  40dc38:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  40dc3c:	ebb4 0408 	subs.w	r4, r4, r8
  40dc40:	ea4f 71e7 	mov.w	r1, r7, asr #31
  40dc44:	f04f 0500 	mov.w	r5, #0
  40dc48:	eb65 0509 	sbc.w	r5, r5, r9
  40dc4c:	fb04 f301 	mul.w	r3, r4, r1
  40dc50:	fb07 3305 	mla	r3, r7, r5, r3
  40dc54:	fba4 4507 	umull	r4, r5, r4, r7
  40dc58:	441d      	add	r5, r3
  40dc5a:	0fa3      	lsrs	r3, r4, #30
  40dc5c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
  40dc60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40dc64:	6013      	str	r3, [r2, #0]
  40dc66:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40dc6a:	4770      	bx	lr
  40dc6c:	4698      	mov	r8, r3
  40dc6e:	ea4f 79e3 	mov.w	r9, r3, asr #31
  40dc72:	6817      	ldr	r7, [r2, #0]
  40dc74:	e7e0      	b.n	40dc38 <fxpRecursiveVariance+0x44>
  40dc76:	bf00      	nop

0040dc78 <asinf>:
  40dc78:	b510      	push	{r4, lr}
  40dc7a:	ed2d 8b02 	vpush	{d8}
  40dc7e:	4c29      	ldr	r4, [pc, #164]	; (40dd24 <asinf+0xac>)
  40dc80:	b08a      	sub	sp, #40	; 0x28
  40dc82:	eeb0 8a40 	vmov.f32	s16, s0
  40dc86:	f000 f855 	bl	40dd34 <__ieee754_asinf>
  40dc8a:	f994 3000 	ldrsb.w	r3, [r4]
  40dc8e:	3301      	adds	r3, #1
  40dc90:	eef0 8a40 	vmov.f32	s17, s0
  40dc94:	d034      	beq.n	40dd00 <asinf+0x88>
  40dc96:	eeb4 8a48 	vcmp.f32	s16, s16
  40dc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40dc9e:	d62f      	bvs.n	40dd00 <asinf+0x88>
  40dca0:	eeb0 0a48 	vmov.f32	s0, s16
  40dca4:	f000 fae8 	bl	40e278 <fabsf>
  40dca8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  40dcac:	eeb4 0ae7 	vcmpe.f32	s0, s15
  40dcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40dcb4:	dd24      	ble.n	40dd00 <asinf+0x88>
  40dcb6:	2301      	movs	r3, #1
  40dcb8:	4a1b      	ldr	r2, [pc, #108]	; (40dd28 <asinf+0xb0>)
  40dcba:	9300      	str	r3, [sp, #0]
  40dcbc:	ee18 0a10 	vmov	r0, s16
  40dcc0:	2300      	movs	r3, #0
  40dcc2:	9201      	str	r2, [sp, #4]
  40dcc4:	9308      	str	r3, [sp, #32]
  40dcc6:	f000 fc43 	bl	40e550 <__aeabi_f2d>
  40dcca:	4602      	mov	r2, r0
  40dccc:	460b      	mov	r3, r1
  40dcce:	4817      	ldr	r0, [pc, #92]	; (40dd2c <asinf+0xb4>)
  40dcd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40dcd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40dcd8:	f000 f9ee 	bl	40e0b8 <nan>
  40dcdc:	f994 3000 	ldrsb.w	r3, [r4]
  40dce0:	2b02      	cmp	r3, #2
  40dce2:	ed8d 0b06 	vstr	d0, [sp, #24]
  40dce6:	d011      	beq.n	40dd0c <asinf+0x94>
  40dce8:	4668      	mov	r0, sp
  40dcea:	f000 f9e3 	bl	40e0b4 <matherr>
  40dcee:	b168      	cbz	r0, 40dd0c <asinf+0x94>
  40dcf0:	9b08      	ldr	r3, [sp, #32]
  40dcf2:	b993      	cbnz	r3, 40dd1a <asinf+0xa2>
  40dcf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40dcf8:	f000 ff76 	bl	40ebe8 <__aeabi_d2f>
  40dcfc:	ee08 0a90 	vmov	s17, r0
  40dd00:	eeb0 0a68 	vmov.f32	s0, s17
  40dd04:	b00a      	add	sp, #40	; 0x28
  40dd06:	ecbd 8b02 	vpop	{d8}
  40dd0a:	bd10      	pop	{r4, pc}
  40dd0c:	f001 fa72 	bl	40f1f4 <__errno>
  40dd10:	2321      	movs	r3, #33	; 0x21
  40dd12:	6003      	str	r3, [r0, #0]
  40dd14:	9b08      	ldr	r3, [sp, #32]
  40dd16:	2b00      	cmp	r3, #0
  40dd18:	d0ec      	beq.n	40dcf4 <asinf+0x7c>
  40dd1a:	f001 fa6b 	bl	40f1f4 <__errno>
  40dd1e:	9b08      	ldr	r3, [sp, #32]
  40dd20:	6003      	str	r3, [r0, #0]
  40dd22:	e7e7      	b.n	40dcf4 <asinf+0x7c>
  40dd24:	20002518 	.word	0x20002518
  40dd28:	00413910 	.word	0x00413910
  40dd2c:	0041395c 	.word	0x0041395c

0040dd30 <atan2f>:
  40dd30:	f000 b8fc 	b.w	40df2c <__ieee754_atan2f>

0040dd34 <__ieee754_asinf>:
  40dd34:	b538      	push	{r3, r4, r5, lr}
  40dd36:	ee10 5a10 	vmov	r5, s0
  40dd3a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
  40dd3e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
  40dd42:	ed2d 8b04 	vpush	{d8-d9}
  40dd46:	f000 8091 	beq.w	40de6c <__ieee754_asinf+0x138>
  40dd4a:	dc79      	bgt.n	40de40 <__ieee754_asinf+0x10c>
  40dd4c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
  40dd50:	da0e      	bge.n	40dd70 <__ieee754_asinf+0x3c>
  40dd52:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
  40dd56:	f280 8096 	bge.w	40de86 <__ieee754_asinf+0x152>
  40dd5a:	eddf 7a64 	vldr	s15, [pc, #400]	; 40deec <__ieee754_asinf+0x1b8>
  40dd5e:	ee70 7a27 	vadd.f32	s15, s0, s15
  40dd62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  40dd66:	eef4 7ac7 	vcmpe.f32	s15, s14
  40dd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40dd6e:	dc6b      	bgt.n	40de48 <__ieee754_asinf+0x114>
  40dd70:	f000 fa82 	bl	40e278 <fabsf>
  40dd74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  40dd78:	ee37 0a40 	vsub.f32	s0, s14, s0
  40dd7c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
  40dd80:	ee20 8a08 	vmul.f32	s16, s0, s16
  40dd84:	eddf 2a5a 	vldr	s5, [pc, #360]	; 40def0 <__ieee754_asinf+0x1bc>
  40dd88:	eddf 3a5a 	vldr	s7, [pc, #360]	; 40def4 <__ieee754_asinf+0x1c0>
  40dd8c:	ed9f 3a5a 	vldr	s6, [pc, #360]	; 40def8 <__ieee754_asinf+0x1c4>
  40dd90:	eddf 4a5a 	vldr	s9, [pc, #360]	; 40defc <__ieee754_asinf+0x1c8>
  40dd94:	ed9f 4a5a 	vldr	s8, [pc, #360]	; 40df00 <__ieee754_asinf+0x1cc>
  40dd98:	eddf 5a5a 	vldr	s11, [pc, #360]	; 40df04 <__ieee754_asinf+0x1d0>
  40dd9c:	ed9f 5a5a 	vldr	s10, [pc, #360]	; 40df08 <__ieee754_asinf+0x1d4>
  40dda0:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 40df0c <__ieee754_asinf+0x1d8>
  40dda4:	eddf 6a5a 	vldr	s13, [pc, #360]	; 40df10 <__ieee754_asinf+0x1dc>
  40dda8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 40df14 <__ieee754_asinf+0x1e0>
  40ddac:	eee8 3a22 	vfma.f32	s7, s16, s5
  40ddb0:	eea8 4a03 	vfma.f32	s8, s16, s6
  40ddb4:	eee8 4a23 	vfma.f32	s9, s16, s7
  40ddb8:	eea8 5a04 	vfma.f32	s10, s16, s8
  40ddbc:	eee8 5a24 	vfma.f32	s11, s16, s9
  40ddc0:	eee8 6a05 	vfma.f32	s13, s16, s10
  40ddc4:	eea8 6a25 	vfma.f32	s12, s16, s11
  40ddc8:	eea8 7a26 	vfma.f32	s14, s16, s13
  40ddcc:	eee8 7a06 	vfma.f32	s15, s16, s12
  40ddd0:	eeb0 0a48 	vmov.f32	s0, s16
  40ddd4:	eeb0 9a47 	vmov.f32	s18, s14
  40ddd8:	ee67 8a88 	vmul.f32	s17, s15, s16
  40dddc:	f000 f966 	bl	40e0ac <__ieee754_sqrtf>
  40dde0:	4b4d      	ldr	r3, [pc, #308]	; (40df18 <__ieee754_asinf+0x1e4>)
  40dde2:	429c      	cmp	r4, r3
  40dde4:	dc33      	bgt.n	40de4e <__ieee754_asinf+0x11a>
  40dde6:	ee10 3a10 	vmov	r3, s0
  40ddea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
  40ddee:	f023 030f 	bic.w	r3, r3, #15
  40ddf2:	ee07 3a90 	vmov	s15, r3
  40ddf6:	eeb1 6a67 	vneg.f32	s12, s15
  40ddfa:	eea6 8a27 	vfma.f32	s16, s12, s15
  40ddfe:	ee77 7a80 	vadd.f32	s15, s15, s0
  40de02:	eec8 5a89 	vdiv.f32	s11, s17, s18
  40de06:	ee88 5a27 	vdiv.f32	s10, s16, s15
  40de0a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 40df1c <__ieee754_asinf+0x1e8>
  40de0e:	eddf 7a44 	vldr	s15, [pc, #272]	; 40df20 <__ieee754_asinf+0x1ec>
  40de12:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  40de16:	eea5 7a66 	vfms.f32	s14, s10, s13
  40de1a:	ee30 0a00 	vadd.f32	s0, s0, s0
  40de1e:	eeb0 5a67 	vmov.f32	s10, s15
  40de22:	eea6 5a26 	vfma.f32	s10, s12, s13
  40de26:	ee95 7a80 	vfnms.f32	s14, s11, s0
  40de2a:	ee37 0a45 	vsub.f32	s0, s14, s10
  40de2e:	ee37 0ac0 	vsub.f32	s0, s15, s0
  40de32:	ecbd 8b04 	vpop	{d8-d9}
  40de36:	2d00      	cmp	r5, #0
  40de38:	bfd8      	it	le
  40de3a:	eeb1 0a40 	vnegle.f32	s0, s0
  40de3e:	bd38      	pop	{r3, r4, r5, pc}
  40de40:	ee70 7a40 	vsub.f32	s15, s0, s0
  40de44:	ee87 0aa7 	vdiv.f32	s0, s15, s15
  40de48:	ecbd 8b04 	vpop	{d8-d9}
  40de4c:	bd38      	pop	{r3, r4, r5, pc}
  40de4e:	eec8 6a89 	vdiv.f32	s13, s17, s18
  40de52:	ed9f 7a34 	vldr	s14, [pc, #208]	; 40df24 <__ieee754_asinf+0x1f0>
  40de56:	eddf 7a34 	vldr	s15, [pc, #208]	; 40df28 <__ieee754_asinf+0x1f4>
  40de5a:	eea0 0a26 	vfma.f32	s0, s0, s13
  40de5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
  40de62:	eea0 7a26 	vfma.f32	s14, s0, s13
  40de66:	ee37 0ac7 	vsub.f32	s0, s15, s14
  40de6a:	e7e2      	b.n	40de32 <__ieee754_asinf+0xfe>
  40de6c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 40df1c <__ieee754_asinf+0x1e8>
  40de70:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 40df28 <__ieee754_asinf+0x1f4>
  40de74:	ee60 7a27 	vmul.f32	s15, s0, s15
  40de78:	ecbd 8b04 	vpop	{d8-d9}
  40de7c:	eee0 7a07 	vfma.f32	s15, s0, s14
  40de80:	eeb0 0a67 	vmov.f32	s0, s15
  40de84:	bd38      	pop	{r3, r4, r5, pc}
  40de86:	ee60 7a00 	vmul.f32	s15, s0, s0
  40de8a:	eddf 2a19 	vldr	s5, [pc, #100]	; 40def0 <__ieee754_asinf+0x1bc>
  40de8e:	eddf 3a19 	vldr	s7, [pc, #100]	; 40def4 <__ieee754_asinf+0x1c0>
  40de92:	eddf 4a1a 	vldr	s9, [pc, #104]	; 40defc <__ieee754_asinf+0x1c8>
  40de96:	ed9f 3a18 	vldr	s6, [pc, #96]	; 40def8 <__ieee754_asinf+0x1c4>
  40de9a:	ed9f 4a19 	vldr	s8, [pc, #100]	; 40df00 <__ieee754_asinf+0x1cc>
  40de9e:	eddf 6a19 	vldr	s13, [pc, #100]	; 40df04 <__ieee754_asinf+0x1d0>
  40dea2:	ed9f 5a19 	vldr	s10, [pc, #100]	; 40df08 <__ieee754_asinf+0x1d4>
  40dea6:	eddf 5a19 	vldr	s11, [pc, #100]	; 40df0c <__ieee754_asinf+0x1d8>
  40deaa:	ed9f 6a19 	vldr	s12, [pc, #100]	; 40df10 <__ieee754_asinf+0x1dc>
  40deae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 40df14 <__ieee754_asinf+0x1e0>
  40deb2:	eee7 3aa2 	vfma.f32	s7, s15, s5
  40deb6:	ecbd 8b04 	vpop	{d8-d9}
  40deba:	eee7 4aa3 	vfma.f32	s9, s15, s7
  40debe:	eea7 4a83 	vfma.f32	s8, s15, s6
  40dec2:	eee7 6aa4 	vfma.f32	s13, s15, s9
  40dec6:	eea7 5a84 	vfma.f32	s10, s15, s8
  40deca:	eee7 5aa6 	vfma.f32	s11, s15, s13
  40dece:	eea7 6a85 	vfma.f32	s12, s15, s10
  40ded2:	eea7 7aa5 	vfma.f32	s14, s15, s11
  40ded6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  40deda:	eee7 6a86 	vfma.f32	s13, s15, s12
  40dede:	ee67 7a27 	vmul.f32	s15, s14, s15
  40dee2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  40dee6:	eea0 0a07 	vfma.f32	s0, s0, s14
  40deea:	bd38      	pop	{r3, r4, r5, pc}
  40deec:	7149f2ca 	.word	0x7149f2ca
  40def0:	3811ef08 	.word	0x3811ef08
  40def4:	3a4f7f04 	.word	0x3a4f7f04
  40def8:	3d9dc62e 	.word	0x3d9dc62e
  40defc:	bd241146 	.word	0xbd241146
  40df00:	bf303361 	.word	0xbf303361
  40df04:	3e4e0aa8 	.word	0x3e4e0aa8
  40df08:	4001572d 	.word	0x4001572d
  40df0c:	bea6b090 	.word	0xbea6b090
  40df10:	c019d139 	.word	0xc019d139
  40df14:	3e2aaaab 	.word	0x3e2aaaab
  40df18:	3f799999 	.word	0x3f799999
  40df1c:	b33bbd2e 	.word	0xb33bbd2e
  40df20:	3f490fdb 	.word	0x3f490fdb
  40df24:	333bbd2e 	.word	0x333bbd2e
  40df28:	3fc90fdb 	.word	0x3fc90fdb

0040df2c <__ieee754_atan2f>:
  40df2c:	b510      	push	{r4, lr}
  40df2e:	b082      	sub	sp, #8
  40df30:	edcd 0a01 	vstr	s1, [sp, #4]
  40df34:	9b01      	ldr	r3, [sp, #4]
  40df36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
  40df3a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  40df3e:	eef0 7a40 	vmov.f32	s15, s0
  40df42:	dc19      	bgt.n	40df78 <__ieee754_atan2f+0x4c>
  40df44:	ee10 0a10 	vmov	r0, s0
  40df48:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  40df4c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  40df50:	dc12      	bgt.n	40df78 <__ieee754_atan2f+0x4c>
  40df52:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
  40df56:	d049      	beq.n	40dfec <__ieee754_atan2f+0xc0>
  40df58:	179c      	asrs	r4, r3, #30
  40df5a:	f004 0402 	and.w	r4, r4, #2
  40df5e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
  40df62:	b979      	cbnz	r1, 40df84 <__ieee754_atan2f+0x58>
  40df64:	2c02      	cmp	r4, #2
  40df66:	d03e      	beq.n	40dfe6 <__ieee754_atan2f+0xba>
  40df68:	ed9f 0a45 	vldr	s0, [pc, #276]	; 40e080 <__ieee754_atan2f+0x154>
  40df6c:	2c03      	cmp	r4, #3
  40df6e:	bf18      	it	ne
  40df70:	eeb0 0a67 	vmovne.f32	s0, s15
  40df74:	b002      	add	sp, #8
  40df76:	bd10      	pop	{r4, pc}
  40df78:	ed9d 7a01 	vldr	s14, [sp, #4]
  40df7c:	ee37 0a27 	vadd.f32	s0, s14, s15
  40df80:	b002      	add	sp, #8
  40df82:	bd10      	pop	{r4, pc}
  40df84:	b312      	cbz	r2, 40dfcc <__ieee754_atan2f+0xa0>
  40df86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  40df8a:	d034      	beq.n	40dff6 <__ieee754_atan2f+0xca>
  40df8c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  40df90:	d041      	beq.n	40e016 <__ieee754_atan2f+0xea>
  40df92:	1a8a      	subs	r2, r1, r2
  40df94:	15d2      	asrs	r2, r2, #23
  40df96:	2a3c      	cmp	r2, #60	; 0x3c
  40df98:	dc22      	bgt.n	40dfe0 <__ieee754_atan2f+0xb4>
  40df9a:	2b00      	cmp	r3, #0
  40df9c:	db54      	blt.n	40e048 <__ieee754_atan2f+0x11c>
  40df9e:	ed9d 0a01 	vldr	s0, [sp, #4]
  40dfa2:	ee87 0a80 	vdiv.f32	s0, s15, s0
  40dfa6:	f000 f967 	bl	40e278 <fabsf>
  40dfaa:	f000 f88d 	bl	40e0c8 <atanf>
  40dfae:	2c01      	cmp	r4, #1
  40dfb0:	d043      	beq.n	40e03a <__ieee754_atan2f+0x10e>
  40dfb2:	2c02      	cmp	r4, #2
  40dfb4:	d038      	beq.n	40e028 <__ieee754_atan2f+0xfc>
  40dfb6:	2c00      	cmp	r4, #0
  40dfb8:	d0e2      	beq.n	40df80 <__ieee754_atan2f+0x54>
  40dfba:	eddf 7a32 	vldr	s15, [pc, #200]	; 40e084 <__ieee754_atan2f+0x158>
  40dfbe:	ed9f 7a32 	vldr	s14, [pc, #200]	; 40e088 <__ieee754_atan2f+0x15c>
  40dfc2:	ee70 7a27 	vadd.f32	s15, s0, s15
  40dfc6:	ee37 0ac7 	vsub.f32	s0, s15, s14
  40dfca:	e7d9      	b.n	40df80 <__ieee754_atan2f+0x54>
  40dfcc:	eddf 7a2f 	vldr	s15, [pc, #188]	; 40e08c <__ieee754_atan2f+0x160>
  40dfd0:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 40e090 <__ieee754_atan2f+0x164>
  40dfd4:	2800      	cmp	r0, #0
  40dfd6:	bfb8      	it	lt
  40dfd8:	eeb0 0a67 	vmovlt.f32	s0, s15
  40dfdc:	b002      	add	sp, #8
  40dfde:	bd10      	pop	{r4, pc}
  40dfe0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 40e090 <__ieee754_atan2f+0x164>
  40dfe4:	e7e3      	b.n	40dfae <__ieee754_atan2f+0x82>
  40dfe6:	ed9f 0a28 	vldr	s0, [pc, #160]	; 40e088 <__ieee754_atan2f+0x15c>
  40dfea:	e7c9      	b.n	40df80 <__ieee754_atan2f+0x54>
  40dfec:	b002      	add	sp, #8
  40dfee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40dff2:	f000 b869 	b.w	40e0c8 <atanf>
  40dff6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  40dffa:	d02a      	beq.n	40e052 <__ieee754_atan2f+0x126>
  40dffc:	2c02      	cmp	r4, #2
  40dffe:	d0f2      	beq.n	40dfe6 <__ieee754_atan2f+0xba>
  40e000:	2c03      	cmp	r4, #3
  40e002:	d033      	beq.n	40e06c <__ieee754_atan2f+0x140>
  40e004:	eddf 7a23 	vldr	s15, [pc, #140]	; 40e094 <__ieee754_atan2f+0x168>
  40e008:	ed9f 0a23 	vldr	s0, [pc, #140]	; 40e098 <__ieee754_atan2f+0x16c>
  40e00c:	2c01      	cmp	r4, #1
  40e00e:	bf08      	it	eq
  40e010:	eeb0 0a67 	vmoveq.f32	s0, s15
  40e014:	e7b4      	b.n	40df80 <__ieee754_atan2f+0x54>
  40e016:	eddf 7a1e 	vldr	s15, [pc, #120]	; 40e090 <__ieee754_atan2f+0x164>
  40e01a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 40e08c <__ieee754_atan2f+0x160>
  40e01e:	2800      	cmp	r0, #0
  40e020:	bfa8      	it	ge
  40e022:	eeb0 0a67 	vmovge.f32	s0, s15
  40e026:	e7ab      	b.n	40df80 <__ieee754_atan2f+0x54>
  40e028:	eddf 7a16 	vldr	s15, [pc, #88]	; 40e084 <__ieee754_atan2f+0x158>
  40e02c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 40e088 <__ieee754_atan2f+0x15c>
  40e030:	ee70 7a27 	vadd.f32	s15, s0, s15
  40e034:	ee37 0a67 	vsub.f32	s0, s14, s15
  40e038:	e7a2      	b.n	40df80 <__ieee754_atan2f+0x54>
  40e03a:	ee10 3a10 	vmov	r3, s0
  40e03e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40e042:	ee00 3a10 	vmov	s0, r3
  40e046:	e79b      	b.n	40df80 <__ieee754_atan2f+0x54>
  40e048:	323c      	adds	r2, #60	; 0x3c
  40e04a:	daa8      	bge.n	40df9e <__ieee754_atan2f+0x72>
  40e04c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 40e098 <__ieee754_atan2f+0x16c>
  40e050:	e7ad      	b.n	40dfae <__ieee754_atan2f+0x82>
  40e052:	2c02      	cmp	r4, #2
  40e054:	d010      	beq.n	40e078 <__ieee754_atan2f+0x14c>
  40e056:	2c03      	cmp	r4, #3
  40e058:	d00b      	beq.n	40e072 <__ieee754_atan2f+0x146>
  40e05a:	eddf 7a10 	vldr	s15, [pc, #64]	; 40e09c <__ieee754_atan2f+0x170>
  40e05e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 40e0a0 <__ieee754_atan2f+0x174>
  40e062:	2c01      	cmp	r4, #1
  40e064:	bf08      	it	eq
  40e066:	eeb0 0a67 	vmoveq.f32	s0, s15
  40e06a:	e789      	b.n	40df80 <__ieee754_atan2f+0x54>
  40e06c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 40e080 <__ieee754_atan2f+0x154>
  40e070:	e786      	b.n	40df80 <__ieee754_atan2f+0x54>
  40e072:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 40e0a4 <__ieee754_atan2f+0x178>
  40e076:	e783      	b.n	40df80 <__ieee754_atan2f+0x54>
  40e078:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 40e0a8 <__ieee754_atan2f+0x17c>
  40e07c:	e780      	b.n	40df80 <__ieee754_atan2f+0x54>
  40e07e:	bf00      	nop
  40e080:	c0490fdb 	.word	0xc0490fdb
  40e084:	33bbbd2e 	.word	0x33bbbd2e
  40e088:	40490fdb 	.word	0x40490fdb
  40e08c:	bfc90fdb 	.word	0xbfc90fdb
  40e090:	3fc90fdb 	.word	0x3fc90fdb
  40e094:	80000000 	.word	0x80000000
  40e098:	00000000 	.word	0x00000000
  40e09c:	bf490fdb 	.word	0xbf490fdb
  40e0a0:	3f490fdb 	.word	0x3f490fdb
  40e0a4:	c016cbe4 	.word	0xc016cbe4
  40e0a8:	4016cbe4 	.word	0x4016cbe4

0040e0ac <__ieee754_sqrtf>:
  40e0ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
  40e0b0:	4770      	bx	lr
  40e0b2:	bf00      	nop

0040e0b4 <matherr>:
  40e0b4:	2000      	movs	r0, #0
  40e0b6:	4770      	bx	lr

0040e0b8 <nan>:
  40e0b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 40e0c0 <nan+0x8>
  40e0bc:	4770      	bx	lr
  40e0be:	bf00      	nop
  40e0c0:	00000000 	.word	0x00000000
  40e0c4:	7ff80000 	.word	0x7ff80000

0040e0c8 <atanf>:
  40e0c8:	b538      	push	{r3, r4, r5, lr}
  40e0ca:	ee10 5a10 	vmov	r5, s0
  40e0ce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
  40e0d2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
  40e0d6:	eef0 7a40 	vmov.f32	s15, s0
  40e0da:	db0b      	blt.n	40e0f4 <atanf+0x2c>
  40e0dc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  40e0e0:	dc56      	bgt.n	40e190 <atanf+0xc8>
  40e0e2:	eddf 7a52 	vldr	s15, [pc, #328]	; 40e22c <atanf+0x164>
  40e0e6:	ed9f 0a52 	vldr	s0, [pc, #328]	; 40e230 <atanf+0x168>
  40e0ea:	2d00      	cmp	r5, #0
  40e0ec:	bfc8      	it	gt
  40e0ee:	eeb0 0a67 	vmovgt.f32	s0, s15
  40e0f2:	bd38      	pop	{r3, r4, r5, pc}
  40e0f4:	4b4f      	ldr	r3, [pc, #316]	; (40e234 <atanf+0x16c>)
  40e0f6:	429c      	cmp	r4, r3
  40e0f8:	dc59      	bgt.n	40e1ae <atanf+0xe6>
  40e0fa:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
  40e0fe:	db4a      	blt.n	40e196 <atanf+0xce>
  40e100:	f04f 33ff 	mov.w	r3, #4294967295
  40e104:	ee67 5aa7 	vmul.f32	s11, s15, s15
  40e108:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 40e238 <atanf+0x170>
  40e10c:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 40e23c <atanf+0x174>
  40e110:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 40e240 <atanf+0x178>
  40e114:	eddf 1a4b 	vldr	s3, [pc, #300]	; 40e244 <atanf+0x17c>
  40e118:	eddf 2a4b 	vldr	s5, [pc, #300]	; 40e248 <atanf+0x180>
  40e11c:	ed9f 4a4b 	vldr	s8, [pc, #300]	; 40e24c <atanf+0x184>
  40e120:	eddf 3a4b 	vldr	s7, [pc, #300]	; 40e250 <atanf+0x188>
  40e124:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 40e254 <atanf+0x18c>
  40e128:	eddf 4a4b 	vldr	s9, [pc, #300]	; 40e258 <atanf+0x190>
  40e12c:	eddf 6a4b 	vldr	s13, [pc, #300]	; 40e25c <atanf+0x194>
  40e130:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 40e260 <atanf+0x198>
  40e134:	ee25 7aa5 	vmul.f32	s14, s11, s11
  40e138:	1c5a      	adds	r2, r3, #1
  40e13a:	eea7 2a01 	vfma.f32	s4, s14, s2
  40e13e:	eee7 2a21 	vfma.f32	s5, s14, s3
  40e142:	eea7 3a02 	vfma.f32	s6, s14, s4
  40e146:	eee7 3a22 	vfma.f32	s7, s14, s5
  40e14a:	eea7 4a03 	vfma.f32	s8, s14, s6
  40e14e:	eee7 4a23 	vfma.f32	s9, s14, s7
  40e152:	eea7 5a04 	vfma.f32	s10, s14, s8
  40e156:	eea7 6a24 	vfma.f32	s12, s14, s9
  40e15a:	eee7 6a05 	vfma.f32	s13, s14, s10
  40e15e:	ee26 7a07 	vmul.f32	s14, s12, s14
  40e162:	ee66 6aa5 	vmul.f32	s13, s13, s11
  40e166:	d03a      	beq.n	40e1de <atanf+0x116>
  40e168:	493e      	ldr	r1, [pc, #248]	; (40e264 <atanf+0x19c>)
  40e16a:	4a3f      	ldr	r2, [pc, #252]	; (40e268 <atanf+0x1a0>)
  40e16c:	009b      	lsls	r3, r3, #2
  40e16e:	4419      	add	r1, r3
  40e170:	ee76 6a87 	vadd.f32	s13, s13, s14
  40e174:	ed91 0a00 	vldr	s0, [r1]
  40e178:	ee97 0aa6 	vfnms.f32	s0, s15, s13
  40e17c:	4413      	add	r3, r2
  40e17e:	2d00      	cmp	r5, #0
  40e180:	ed93 7a00 	vldr	s14, [r3]
  40e184:	ee70 7a67 	vsub.f32	s15, s0, s15
  40e188:	ee37 0a67 	vsub.f32	s0, s14, s15
  40e18c:	db24      	blt.n	40e1d8 <atanf+0x110>
  40e18e:	bd38      	pop	{r3, r4, r5, pc}
  40e190:	ee30 0a00 	vadd.f32	s0, s0, s0
  40e194:	bd38      	pop	{r3, r4, r5, pc}
  40e196:	ed9f 7a35 	vldr	s14, [pc, #212]	; 40e26c <atanf+0x1a4>
  40e19a:	ee30 7a07 	vadd.f32	s14, s0, s14
  40e19e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  40e1a2:	eeb4 7ae6 	vcmpe.f32	s14, s13
  40e1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40e1aa:	dda9      	ble.n	40e100 <atanf+0x38>
  40e1ac:	bd38      	pop	{r3, r4, r5, pc}
  40e1ae:	f000 f863 	bl	40e278 <fabsf>
  40e1b2:	4b2f      	ldr	r3, [pc, #188]	; (40e270 <atanf+0x1a8>)
  40e1b4:	429c      	cmp	r4, r3
  40e1b6:	dc19      	bgt.n	40e1ec <atanf+0x124>
  40e1b8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  40e1bc:	429c      	cmp	r4, r3
  40e1be:	dc2a      	bgt.n	40e216 <atanf+0x14e>
  40e1c0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
  40e1c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  40e1c8:	eea0 7a27 	vfma.f32	s14, s0, s15
  40e1cc:	2300      	movs	r3, #0
  40e1ce:	ee30 0a27 	vadd.f32	s0, s0, s15
  40e1d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
  40e1d6:	e795      	b.n	40e104 <atanf+0x3c>
  40e1d8:	eeb1 0a40 	vneg.f32	s0, s0
  40e1dc:	bd38      	pop	{r3, r4, r5, pc}
  40e1de:	ee76 6a87 	vadd.f32	s13, s13, s14
  40e1e2:	eee7 7ae6 	vfms.f32	s15, s15, s13
  40e1e6:	eeb0 0a67 	vmov.f32	s0, s15
  40e1ea:	bd38      	pop	{r3, r4, r5, pc}
  40e1ec:	4b21      	ldr	r3, [pc, #132]	; (40e274 <atanf+0x1ac>)
  40e1ee:	429c      	cmp	r4, r3
  40e1f0:	dc0b      	bgt.n	40e20a <atanf+0x142>
  40e1f2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
  40e1f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  40e1fa:	eea0 7a27 	vfma.f32	s14, s0, s15
  40e1fe:	2302      	movs	r3, #2
  40e200:	ee30 0a67 	vsub.f32	s0, s0, s15
  40e204:	eec0 7a07 	vdiv.f32	s15, s0, s14
  40e208:	e77c      	b.n	40e104 <atanf+0x3c>
  40e20a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  40e20e:	eec7 7a00 	vdiv.f32	s15, s14, s0
  40e212:	2303      	movs	r3, #3
  40e214:	e776      	b.n	40e104 <atanf+0x3c>
  40e216:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  40e21a:	ee30 7a67 	vsub.f32	s14, s0, s15
  40e21e:	ee30 0a27 	vadd.f32	s0, s0, s15
  40e222:	2301      	movs	r3, #1
  40e224:	eec7 7a00 	vdiv.f32	s15, s14, s0
  40e228:	e76c      	b.n	40e104 <atanf+0x3c>
  40e22a:	bf00      	nop
  40e22c:	3fc90fdb 	.word	0x3fc90fdb
  40e230:	bfc90fdb 	.word	0xbfc90fdb
  40e234:	3edfffff 	.word	0x3edfffff
  40e238:	3c8569d7 	.word	0x3c8569d7
  40e23c:	3d4bda59 	.word	0x3d4bda59
  40e240:	3d886b35 	.word	0x3d886b35
  40e244:	bd15a221 	.word	0xbd15a221
  40e248:	bd6ef16b 	.word	0xbd6ef16b
  40e24c:	3dba2e6e 	.word	0x3dba2e6e
  40e250:	bd9d8795 	.word	0xbd9d8795
  40e254:	3e124925 	.word	0x3e124925
  40e258:	bde38e38 	.word	0xbde38e38
  40e25c:	3eaaaaab 	.word	0x3eaaaaab
  40e260:	be4ccccd 	.word	0xbe4ccccd
  40e264:	00413928 	.word	0x00413928
  40e268:	00413918 	.word	0x00413918
  40e26c:	7149f2ca 	.word	0x7149f2ca
  40e270:	3f97ffff 	.word	0x3f97ffff
  40e274:	401bffff 	.word	0x401bffff

0040e278 <fabsf>:
  40e278:	ee10 3a10 	vmov	r3, s0
  40e27c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  40e280:	ee00 3a10 	vmov	s0, r3
  40e284:	4770      	bx	lr
  40e286:	bf00      	nop

0040e288 <__aeabi_drsub>:
  40e288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40e28c:	e002      	b.n	40e294 <__adddf3>
  40e28e:	bf00      	nop

0040e290 <__aeabi_dsub>:
  40e290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040e294 <__adddf3>:
  40e294:	b530      	push	{r4, r5, lr}
  40e296:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40e29a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40e29e:	ea94 0f05 	teq	r4, r5
  40e2a2:	bf08      	it	eq
  40e2a4:	ea90 0f02 	teqeq	r0, r2
  40e2a8:	bf1f      	itttt	ne
  40e2aa:	ea54 0c00 	orrsne.w	ip, r4, r0
  40e2ae:	ea55 0c02 	orrsne.w	ip, r5, r2
  40e2b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40e2b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40e2ba:	f000 80e2 	beq.w	40e482 <__adddf3+0x1ee>
  40e2be:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40e2c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40e2c6:	bfb8      	it	lt
  40e2c8:	426d      	neglt	r5, r5
  40e2ca:	dd0c      	ble.n	40e2e6 <__adddf3+0x52>
  40e2cc:	442c      	add	r4, r5
  40e2ce:	ea80 0202 	eor.w	r2, r0, r2
  40e2d2:	ea81 0303 	eor.w	r3, r1, r3
  40e2d6:	ea82 0000 	eor.w	r0, r2, r0
  40e2da:	ea83 0101 	eor.w	r1, r3, r1
  40e2de:	ea80 0202 	eor.w	r2, r0, r2
  40e2e2:	ea81 0303 	eor.w	r3, r1, r3
  40e2e6:	2d36      	cmp	r5, #54	; 0x36
  40e2e8:	bf88      	it	hi
  40e2ea:	bd30      	pophi	{r4, r5, pc}
  40e2ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40e2f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40e2f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40e2f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40e2fc:	d002      	beq.n	40e304 <__adddf3+0x70>
  40e2fe:	4240      	negs	r0, r0
  40e300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40e304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40e308:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40e30c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40e310:	d002      	beq.n	40e318 <__adddf3+0x84>
  40e312:	4252      	negs	r2, r2
  40e314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40e318:	ea94 0f05 	teq	r4, r5
  40e31c:	f000 80a7 	beq.w	40e46e <__adddf3+0x1da>
  40e320:	f1a4 0401 	sub.w	r4, r4, #1
  40e324:	f1d5 0e20 	rsbs	lr, r5, #32
  40e328:	db0d      	blt.n	40e346 <__adddf3+0xb2>
  40e32a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40e32e:	fa22 f205 	lsr.w	r2, r2, r5
  40e332:	1880      	adds	r0, r0, r2
  40e334:	f141 0100 	adc.w	r1, r1, #0
  40e338:	fa03 f20e 	lsl.w	r2, r3, lr
  40e33c:	1880      	adds	r0, r0, r2
  40e33e:	fa43 f305 	asr.w	r3, r3, r5
  40e342:	4159      	adcs	r1, r3
  40e344:	e00e      	b.n	40e364 <__adddf3+0xd0>
  40e346:	f1a5 0520 	sub.w	r5, r5, #32
  40e34a:	f10e 0e20 	add.w	lr, lr, #32
  40e34e:	2a01      	cmp	r2, #1
  40e350:	fa03 fc0e 	lsl.w	ip, r3, lr
  40e354:	bf28      	it	cs
  40e356:	f04c 0c02 	orrcs.w	ip, ip, #2
  40e35a:	fa43 f305 	asr.w	r3, r3, r5
  40e35e:	18c0      	adds	r0, r0, r3
  40e360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40e364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40e368:	d507      	bpl.n	40e37a <__adddf3+0xe6>
  40e36a:	f04f 0e00 	mov.w	lr, #0
  40e36e:	f1dc 0c00 	rsbs	ip, ip, #0
  40e372:	eb7e 0000 	sbcs.w	r0, lr, r0
  40e376:	eb6e 0101 	sbc.w	r1, lr, r1
  40e37a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40e37e:	d31b      	bcc.n	40e3b8 <__adddf3+0x124>
  40e380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40e384:	d30c      	bcc.n	40e3a0 <__adddf3+0x10c>
  40e386:	0849      	lsrs	r1, r1, #1
  40e388:	ea5f 0030 	movs.w	r0, r0, rrx
  40e38c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40e390:	f104 0401 	add.w	r4, r4, #1
  40e394:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40e398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40e39c:	f080 809a 	bcs.w	40e4d4 <__adddf3+0x240>
  40e3a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40e3a4:	bf08      	it	eq
  40e3a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40e3aa:	f150 0000 	adcs.w	r0, r0, #0
  40e3ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e3b2:	ea41 0105 	orr.w	r1, r1, r5
  40e3b6:	bd30      	pop	{r4, r5, pc}
  40e3b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40e3bc:	4140      	adcs	r0, r0
  40e3be:	eb41 0101 	adc.w	r1, r1, r1
  40e3c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e3c6:	f1a4 0401 	sub.w	r4, r4, #1
  40e3ca:	d1e9      	bne.n	40e3a0 <__adddf3+0x10c>
  40e3cc:	f091 0f00 	teq	r1, #0
  40e3d0:	bf04      	itt	eq
  40e3d2:	4601      	moveq	r1, r0
  40e3d4:	2000      	moveq	r0, #0
  40e3d6:	fab1 f381 	clz	r3, r1
  40e3da:	bf08      	it	eq
  40e3dc:	3320      	addeq	r3, #32
  40e3de:	f1a3 030b 	sub.w	r3, r3, #11
  40e3e2:	f1b3 0220 	subs.w	r2, r3, #32
  40e3e6:	da0c      	bge.n	40e402 <__adddf3+0x16e>
  40e3e8:	320c      	adds	r2, #12
  40e3ea:	dd08      	ble.n	40e3fe <__adddf3+0x16a>
  40e3ec:	f102 0c14 	add.w	ip, r2, #20
  40e3f0:	f1c2 020c 	rsb	r2, r2, #12
  40e3f4:	fa01 f00c 	lsl.w	r0, r1, ip
  40e3f8:	fa21 f102 	lsr.w	r1, r1, r2
  40e3fc:	e00c      	b.n	40e418 <__adddf3+0x184>
  40e3fe:	f102 0214 	add.w	r2, r2, #20
  40e402:	bfd8      	it	le
  40e404:	f1c2 0c20 	rsble	ip, r2, #32
  40e408:	fa01 f102 	lsl.w	r1, r1, r2
  40e40c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40e410:	bfdc      	itt	le
  40e412:	ea41 010c 	orrle.w	r1, r1, ip
  40e416:	4090      	lslle	r0, r2
  40e418:	1ae4      	subs	r4, r4, r3
  40e41a:	bfa2      	ittt	ge
  40e41c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40e420:	4329      	orrge	r1, r5
  40e422:	bd30      	popge	{r4, r5, pc}
  40e424:	ea6f 0404 	mvn.w	r4, r4
  40e428:	3c1f      	subs	r4, #31
  40e42a:	da1c      	bge.n	40e466 <__adddf3+0x1d2>
  40e42c:	340c      	adds	r4, #12
  40e42e:	dc0e      	bgt.n	40e44e <__adddf3+0x1ba>
  40e430:	f104 0414 	add.w	r4, r4, #20
  40e434:	f1c4 0220 	rsb	r2, r4, #32
  40e438:	fa20 f004 	lsr.w	r0, r0, r4
  40e43c:	fa01 f302 	lsl.w	r3, r1, r2
  40e440:	ea40 0003 	orr.w	r0, r0, r3
  40e444:	fa21 f304 	lsr.w	r3, r1, r4
  40e448:	ea45 0103 	orr.w	r1, r5, r3
  40e44c:	bd30      	pop	{r4, r5, pc}
  40e44e:	f1c4 040c 	rsb	r4, r4, #12
  40e452:	f1c4 0220 	rsb	r2, r4, #32
  40e456:	fa20 f002 	lsr.w	r0, r0, r2
  40e45a:	fa01 f304 	lsl.w	r3, r1, r4
  40e45e:	ea40 0003 	orr.w	r0, r0, r3
  40e462:	4629      	mov	r1, r5
  40e464:	bd30      	pop	{r4, r5, pc}
  40e466:	fa21 f004 	lsr.w	r0, r1, r4
  40e46a:	4629      	mov	r1, r5
  40e46c:	bd30      	pop	{r4, r5, pc}
  40e46e:	f094 0f00 	teq	r4, #0
  40e472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40e476:	bf06      	itte	eq
  40e478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40e47c:	3401      	addeq	r4, #1
  40e47e:	3d01      	subne	r5, #1
  40e480:	e74e      	b.n	40e320 <__adddf3+0x8c>
  40e482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40e486:	bf18      	it	ne
  40e488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40e48c:	d029      	beq.n	40e4e2 <__adddf3+0x24e>
  40e48e:	ea94 0f05 	teq	r4, r5
  40e492:	bf08      	it	eq
  40e494:	ea90 0f02 	teqeq	r0, r2
  40e498:	d005      	beq.n	40e4a6 <__adddf3+0x212>
  40e49a:	ea54 0c00 	orrs.w	ip, r4, r0
  40e49e:	bf04      	itt	eq
  40e4a0:	4619      	moveq	r1, r3
  40e4a2:	4610      	moveq	r0, r2
  40e4a4:	bd30      	pop	{r4, r5, pc}
  40e4a6:	ea91 0f03 	teq	r1, r3
  40e4aa:	bf1e      	ittt	ne
  40e4ac:	2100      	movne	r1, #0
  40e4ae:	2000      	movne	r0, #0
  40e4b0:	bd30      	popne	{r4, r5, pc}
  40e4b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40e4b6:	d105      	bne.n	40e4c4 <__adddf3+0x230>
  40e4b8:	0040      	lsls	r0, r0, #1
  40e4ba:	4149      	adcs	r1, r1
  40e4bc:	bf28      	it	cs
  40e4be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40e4c2:	bd30      	pop	{r4, r5, pc}
  40e4c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40e4c8:	bf3c      	itt	cc
  40e4ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40e4ce:	bd30      	popcc	{r4, r5, pc}
  40e4d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40e4d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40e4d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40e4dc:	f04f 0000 	mov.w	r0, #0
  40e4e0:	bd30      	pop	{r4, r5, pc}
  40e4e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40e4e6:	bf1a      	itte	ne
  40e4e8:	4619      	movne	r1, r3
  40e4ea:	4610      	movne	r0, r2
  40e4ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40e4f0:	bf1c      	itt	ne
  40e4f2:	460b      	movne	r3, r1
  40e4f4:	4602      	movne	r2, r0
  40e4f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40e4fa:	bf06      	itte	eq
  40e4fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40e500:	ea91 0f03 	teqeq	r1, r3
  40e504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40e508:	bd30      	pop	{r4, r5, pc}
  40e50a:	bf00      	nop

0040e50c <__aeabi_ui2d>:
  40e50c:	f090 0f00 	teq	r0, #0
  40e510:	bf04      	itt	eq
  40e512:	2100      	moveq	r1, #0
  40e514:	4770      	bxeq	lr
  40e516:	b530      	push	{r4, r5, lr}
  40e518:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40e51c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40e520:	f04f 0500 	mov.w	r5, #0
  40e524:	f04f 0100 	mov.w	r1, #0
  40e528:	e750      	b.n	40e3cc <__adddf3+0x138>
  40e52a:	bf00      	nop

0040e52c <__aeabi_i2d>:
  40e52c:	f090 0f00 	teq	r0, #0
  40e530:	bf04      	itt	eq
  40e532:	2100      	moveq	r1, #0
  40e534:	4770      	bxeq	lr
  40e536:	b530      	push	{r4, r5, lr}
  40e538:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40e53c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40e540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40e544:	bf48      	it	mi
  40e546:	4240      	negmi	r0, r0
  40e548:	f04f 0100 	mov.w	r1, #0
  40e54c:	e73e      	b.n	40e3cc <__adddf3+0x138>
  40e54e:	bf00      	nop

0040e550 <__aeabi_f2d>:
  40e550:	0042      	lsls	r2, r0, #1
  40e552:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40e556:	ea4f 0131 	mov.w	r1, r1, rrx
  40e55a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40e55e:	bf1f      	itttt	ne
  40e560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40e564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40e568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40e56c:	4770      	bxne	lr
  40e56e:	f092 0f00 	teq	r2, #0
  40e572:	bf14      	ite	ne
  40e574:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40e578:	4770      	bxeq	lr
  40e57a:	b530      	push	{r4, r5, lr}
  40e57c:	f44f 7460 	mov.w	r4, #896	; 0x380
  40e580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40e584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40e588:	e720      	b.n	40e3cc <__adddf3+0x138>
  40e58a:	bf00      	nop

0040e58c <__aeabi_ul2d>:
  40e58c:	ea50 0201 	orrs.w	r2, r0, r1
  40e590:	bf08      	it	eq
  40e592:	4770      	bxeq	lr
  40e594:	b530      	push	{r4, r5, lr}
  40e596:	f04f 0500 	mov.w	r5, #0
  40e59a:	e00a      	b.n	40e5b2 <__aeabi_l2d+0x16>

0040e59c <__aeabi_l2d>:
  40e59c:	ea50 0201 	orrs.w	r2, r0, r1
  40e5a0:	bf08      	it	eq
  40e5a2:	4770      	bxeq	lr
  40e5a4:	b530      	push	{r4, r5, lr}
  40e5a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40e5aa:	d502      	bpl.n	40e5b2 <__aeabi_l2d+0x16>
  40e5ac:	4240      	negs	r0, r0
  40e5ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40e5b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40e5b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40e5ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40e5be:	f43f aedc 	beq.w	40e37a <__adddf3+0xe6>
  40e5c2:	f04f 0203 	mov.w	r2, #3
  40e5c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40e5ca:	bf18      	it	ne
  40e5cc:	3203      	addne	r2, #3
  40e5ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40e5d2:	bf18      	it	ne
  40e5d4:	3203      	addne	r2, #3
  40e5d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40e5da:	f1c2 0320 	rsb	r3, r2, #32
  40e5de:	fa00 fc03 	lsl.w	ip, r0, r3
  40e5e2:	fa20 f002 	lsr.w	r0, r0, r2
  40e5e6:	fa01 fe03 	lsl.w	lr, r1, r3
  40e5ea:	ea40 000e 	orr.w	r0, r0, lr
  40e5ee:	fa21 f102 	lsr.w	r1, r1, r2
  40e5f2:	4414      	add	r4, r2
  40e5f4:	e6c1      	b.n	40e37a <__adddf3+0xe6>
  40e5f6:	bf00      	nop

0040e5f8 <__aeabi_dmul>:
  40e5f8:	b570      	push	{r4, r5, r6, lr}
  40e5fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40e5fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40e602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40e606:	bf1d      	ittte	ne
  40e608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40e60c:	ea94 0f0c 	teqne	r4, ip
  40e610:	ea95 0f0c 	teqne	r5, ip
  40e614:	f000 f8de 	bleq	40e7d4 <__aeabi_dmul+0x1dc>
  40e618:	442c      	add	r4, r5
  40e61a:	ea81 0603 	eor.w	r6, r1, r3
  40e61e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40e622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40e626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40e62a:	bf18      	it	ne
  40e62c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40e630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40e638:	d038      	beq.n	40e6ac <__aeabi_dmul+0xb4>
  40e63a:	fba0 ce02 	umull	ip, lr, r0, r2
  40e63e:	f04f 0500 	mov.w	r5, #0
  40e642:	fbe1 e502 	umlal	lr, r5, r1, r2
  40e646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40e64a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40e64e:	f04f 0600 	mov.w	r6, #0
  40e652:	fbe1 5603 	umlal	r5, r6, r1, r3
  40e656:	f09c 0f00 	teq	ip, #0
  40e65a:	bf18      	it	ne
  40e65c:	f04e 0e01 	orrne.w	lr, lr, #1
  40e660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40e664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40e668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40e66c:	d204      	bcs.n	40e678 <__aeabi_dmul+0x80>
  40e66e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40e672:	416d      	adcs	r5, r5
  40e674:	eb46 0606 	adc.w	r6, r6, r6
  40e678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40e67c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40e680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40e684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40e688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40e68c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40e690:	bf88      	it	hi
  40e692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40e696:	d81e      	bhi.n	40e6d6 <__aeabi_dmul+0xde>
  40e698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40e69c:	bf08      	it	eq
  40e69e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40e6a2:	f150 0000 	adcs.w	r0, r0, #0
  40e6a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e6aa:	bd70      	pop	{r4, r5, r6, pc}
  40e6ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40e6b0:	ea46 0101 	orr.w	r1, r6, r1
  40e6b4:	ea40 0002 	orr.w	r0, r0, r2
  40e6b8:	ea81 0103 	eor.w	r1, r1, r3
  40e6bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40e6c0:	bfc2      	ittt	gt
  40e6c2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40e6c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40e6ca:	bd70      	popgt	{r4, r5, r6, pc}
  40e6cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e6d0:	f04f 0e00 	mov.w	lr, #0
  40e6d4:	3c01      	subs	r4, #1
  40e6d6:	f300 80ab 	bgt.w	40e830 <__aeabi_dmul+0x238>
  40e6da:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40e6de:	bfde      	ittt	le
  40e6e0:	2000      	movle	r0, #0
  40e6e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40e6e6:	bd70      	pople	{r4, r5, r6, pc}
  40e6e8:	f1c4 0400 	rsb	r4, r4, #0
  40e6ec:	3c20      	subs	r4, #32
  40e6ee:	da35      	bge.n	40e75c <__aeabi_dmul+0x164>
  40e6f0:	340c      	adds	r4, #12
  40e6f2:	dc1b      	bgt.n	40e72c <__aeabi_dmul+0x134>
  40e6f4:	f104 0414 	add.w	r4, r4, #20
  40e6f8:	f1c4 0520 	rsb	r5, r4, #32
  40e6fc:	fa00 f305 	lsl.w	r3, r0, r5
  40e700:	fa20 f004 	lsr.w	r0, r0, r4
  40e704:	fa01 f205 	lsl.w	r2, r1, r5
  40e708:	ea40 0002 	orr.w	r0, r0, r2
  40e70c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40e710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40e714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40e718:	fa21 f604 	lsr.w	r6, r1, r4
  40e71c:	eb42 0106 	adc.w	r1, r2, r6
  40e720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e724:	bf08      	it	eq
  40e726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e72a:	bd70      	pop	{r4, r5, r6, pc}
  40e72c:	f1c4 040c 	rsb	r4, r4, #12
  40e730:	f1c4 0520 	rsb	r5, r4, #32
  40e734:	fa00 f304 	lsl.w	r3, r0, r4
  40e738:	fa20 f005 	lsr.w	r0, r0, r5
  40e73c:	fa01 f204 	lsl.w	r2, r1, r4
  40e740:	ea40 0002 	orr.w	r0, r0, r2
  40e744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40e74c:	f141 0100 	adc.w	r1, r1, #0
  40e750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e754:	bf08      	it	eq
  40e756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e75a:	bd70      	pop	{r4, r5, r6, pc}
  40e75c:	f1c4 0520 	rsb	r5, r4, #32
  40e760:	fa00 f205 	lsl.w	r2, r0, r5
  40e764:	ea4e 0e02 	orr.w	lr, lr, r2
  40e768:	fa20 f304 	lsr.w	r3, r0, r4
  40e76c:	fa01 f205 	lsl.w	r2, r1, r5
  40e770:	ea43 0302 	orr.w	r3, r3, r2
  40e774:	fa21 f004 	lsr.w	r0, r1, r4
  40e778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e77c:	fa21 f204 	lsr.w	r2, r1, r4
  40e780:	ea20 0002 	bic.w	r0, r0, r2
  40e784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40e788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e78c:	bf08      	it	eq
  40e78e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e792:	bd70      	pop	{r4, r5, r6, pc}
  40e794:	f094 0f00 	teq	r4, #0
  40e798:	d10f      	bne.n	40e7ba <__aeabi_dmul+0x1c2>
  40e79a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40e79e:	0040      	lsls	r0, r0, #1
  40e7a0:	eb41 0101 	adc.w	r1, r1, r1
  40e7a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e7a8:	bf08      	it	eq
  40e7aa:	3c01      	subeq	r4, #1
  40e7ac:	d0f7      	beq.n	40e79e <__aeabi_dmul+0x1a6>
  40e7ae:	ea41 0106 	orr.w	r1, r1, r6
  40e7b2:	f095 0f00 	teq	r5, #0
  40e7b6:	bf18      	it	ne
  40e7b8:	4770      	bxne	lr
  40e7ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40e7be:	0052      	lsls	r2, r2, #1
  40e7c0:	eb43 0303 	adc.w	r3, r3, r3
  40e7c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40e7c8:	bf08      	it	eq
  40e7ca:	3d01      	subeq	r5, #1
  40e7cc:	d0f7      	beq.n	40e7be <__aeabi_dmul+0x1c6>
  40e7ce:	ea43 0306 	orr.w	r3, r3, r6
  40e7d2:	4770      	bx	lr
  40e7d4:	ea94 0f0c 	teq	r4, ip
  40e7d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e7dc:	bf18      	it	ne
  40e7de:	ea95 0f0c 	teqne	r5, ip
  40e7e2:	d00c      	beq.n	40e7fe <__aeabi_dmul+0x206>
  40e7e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e7e8:	bf18      	it	ne
  40e7ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e7ee:	d1d1      	bne.n	40e794 <__aeabi_dmul+0x19c>
  40e7f0:	ea81 0103 	eor.w	r1, r1, r3
  40e7f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e7f8:	f04f 0000 	mov.w	r0, #0
  40e7fc:	bd70      	pop	{r4, r5, r6, pc}
  40e7fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e802:	bf06      	itte	eq
  40e804:	4610      	moveq	r0, r2
  40e806:	4619      	moveq	r1, r3
  40e808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e80c:	d019      	beq.n	40e842 <__aeabi_dmul+0x24a>
  40e80e:	ea94 0f0c 	teq	r4, ip
  40e812:	d102      	bne.n	40e81a <__aeabi_dmul+0x222>
  40e814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40e818:	d113      	bne.n	40e842 <__aeabi_dmul+0x24a>
  40e81a:	ea95 0f0c 	teq	r5, ip
  40e81e:	d105      	bne.n	40e82c <__aeabi_dmul+0x234>
  40e820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40e824:	bf1c      	itt	ne
  40e826:	4610      	movne	r0, r2
  40e828:	4619      	movne	r1, r3
  40e82a:	d10a      	bne.n	40e842 <__aeabi_dmul+0x24a>
  40e82c:	ea81 0103 	eor.w	r1, r1, r3
  40e830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40e83c:	f04f 0000 	mov.w	r0, #0
  40e840:	bd70      	pop	{r4, r5, r6, pc}
  40e842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40e84a:	bd70      	pop	{r4, r5, r6, pc}

0040e84c <__aeabi_ddiv>:
  40e84c:	b570      	push	{r4, r5, r6, lr}
  40e84e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40e852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40e856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40e85a:	bf1d      	ittte	ne
  40e85c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40e860:	ea94 0f0c 	teqne	r4, ip
  40e864:	ea95 0f0c 	teqne	r5, ip
  40e868:	f000 f8a7 	bleq	40e9ba <__aeabi_ddiv+0x16e>
  40e86c:	eba4 0405 	sub.w	r4, r4, r5
  40e870:	ea81 0e03 	eor.w	lr, r1, r3
  40e874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e878:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40e87c:	f000 8088 	beq.w	40e990 <__aeabi_ddiv+0x144>
  40e880:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40e884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40e888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40e88c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40e890:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40e894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40e898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40e89c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40e8a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40e8a4:	429d      	cmp	r5, r3
  40e8a6:	bf08      	it	eq
  40e8a8:	4296      	cmpeq	r6, r2
  40e8aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40e8ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40e8b2:	d202      	bcs.n	40e8ba <__aeabi_ddiv+0x6e>
  40e8b4:	085b      	lsrs	r3, r3, #1
  40e8b6:	ea4f 0232 	mov.w	r2, r2, rrx
  40e8ba:	1ab6      	subs	r6, r6, r2
  40e8bc:	eb65 0503 	sbc.w	r5, r5, r3
  40e8c0:	085b      	lsrs	r3, r3, #1
  40e8c2:	ea4f 0232 	mov.w	r2, r2, rrx
  40e8c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40e8ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40e8ce:	ebb6 0e02 	subs.w	lr, r6, r2
  40e8d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e8d6:	bf22      	ittt	cs
  40e8d8:	1ab6      	subcs	r6, r6, r2
  40e8da:	4675      	movcs	r5, lr
  40e8dc:	ea40 000c 	orrcs.w	r0, r0, ip
  40e8e0:	085b      	lsrs	r3, r3, #1
  40e8e2:	ea4f 0232 	mov.w	r2, r2, rrx
  40e8e6:	ebb6 0e02 	subs.w	lr, r6, r2
  40e8ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e8ee:	bf22      	ittt	cs
  40e8f0:	1ab6      	subcs	r6, r6, r2
  40e8f2:	4675      	movcs	r5, lr
  40e8f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40e8f8:	085b      	lsrs	r3, r3, #1
  40e8fa:	ea4f 0232 	mov.w	r2, r2, rrx
  40e8fe:	ebb6 0e02 	subs.w	lr, r6, r2
  40e902:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e906:	bf22      	ittt	cs
  40e908:	1ab6      	subcs	r6, r6, r2
  40e90a:	4675      	movcs	r5, lr
  40e90c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40e910:	085b      	lsrs	r3, r3, #1
  40e912:	ea4f 0232 	mov.w	r2, r2, rrx
  40e916:	ebb6 0e02 	subs.w	lr, r6, r2
  40e91a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e91e:	bf22      	ittt	cs
  40e920:	1ab6      	subcs	r6, r6, r2
  40e922:	4675      	movcs	r5, lr
  40e924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40e928:	ea55 0e06 	orrs.w	lr, r5, r6
  40e92c:	d018      	beq.n	40e960 <__aeabi_ddiv+0x114>
  40e92e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40e932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40e936:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40e93a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40e93e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40e942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40e946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40e94a:	d1c0      	bne.n	40e8ce <__aeabi_ddiv+0x82>
  40e94c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e950:	d10b      	bne.n	40e96a <__aeabi_ddiv+0x11e>
  40e952:	ea41 0100 	orr.w	r1, r1, r0
  40e956:	f04f 0000 	mov.w	r0, #0
  40e95a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40e95e:	e7b6      	b.n	40e8ce <__aeabi_ddiv+0x82>
  40e960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e964:	bf04      	itt	eq
  40e966:	4301      	orreq	r1, r0
  40e968:	2000      	moveq	r0, #0
  40e96a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40e96e:	bf88      	it	hi
  40e970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40e974:	f63f aeaf 	bhi.w	40e6d6 <__aeabi_dmul+0xde>
  40e978:	ebb5 0c03 	subs.w	ip, r5, r3
  40e97c:	bf04      	itt	eq
  40e97e:	ebb6 0c02 	subseq.w	ip, r6, r2
  40e982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40e986:	f150 0000 	adcs.w	r0, r0, #0
  40e98a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e98e:	bd70      	pop	{r4, r5, r6, pc}
  40e990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40e994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40e998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40e99c:	bfc2      	ittt	gt
  40e99e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40e9a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40e9a6:	bd70      	popgt	{r4, r5, r6, pc}
  40e9a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e9ac:	f04f 0e00 	mov.w	lr, #0
  40e9b0:	3c01      	subs	r4, #1
  40e9b2:	e690      	b.n	40e6d6 <__aeabi_dmul+0xde>
  40e9b4:	ea45 0e06 	orr.w	lr, r5, r6
  40e9b8:	e68d      	b.n	40e6d6 <__aeabi_dmul+0xde>
  40e9ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e9be:	ea94 0f0c 	teq	r4, ip
  40e9c2:	bf08      	it	eq
  40e9c4:	ea95 0f0c 	teqeq	r5, ip
  40e9c8:	f43f af3b 	beq.w	40e842 <__aeabi_dmul+0x24a>
  40e9cc:	ea94 0f0c 	teq	r4, ip
  40e9d0:	d10a      	bne.n	40e9e8 <__aeabi_ddiv+0x19c>
  40e9d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40e9d6:	f47f af34 	bne.w	40e842 <__aeabi_dmul+0x24a>
  40e9da:	ea95 0f0c 	teq	r5, ip
  40e9de:	f47f af25 	bne.w	40e82c <__aeabi_dmul+0x234>
  40e9e2:	4610      	mov	r0, r2
  40e9e4:	4619      	mov	r1, r3
  40e9e6:	e72c      	b.n	40e842 <__aeabi_dmul+0x24a>
  40e9e8:	ea95 0f0c 	teq	r5, ip
  40e9ec:	d106      	bne.n	40e9fc <__aeabi_ddiv+0x1b0>
  40e9ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e9f2:	f43f aefd 	beq.w	40e7f0 <__aeabi_dmul+0x1f8>
  40e9f6:	4610      	mov	r0, r2
  40e9f8:	4619      	mov	r1, r3
  40e9fa:	e722      	b.n	40e842 <__aeabi_dmul+0x24a>
  40e9fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ea00:	bf18      	it	ne
  40ea02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ea06:	f47f aec5 	bne.w	40e794 <__aeabi_dmul+0x19c>
  40ea0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40ea0e:	f47f af0d 	bne.w	40e82c <__aeabi_dmul+0x234>
  40ea12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40ea16:	f47f aeeb 	bne.w	40e7f0 <__aeabi_dmul+0x1f8>
  40ea1a:	e712      	b.n	40e842 <__aeabi_dmul+0x24a>

0040ea1c <__gedf2>:
  40ea1c:	f04f 3cff 	mov.w	ip, #4294967295
  40ea20:	e006      	b.n	40ea30 <__cmpdf2+0x4>
  40ea22:	bf00      	nop

0040ea24 <__ledf2>:
  40ea24:	f04f 0c01 	mov.w	ip, #1
  40ea28:	e002      	b.n	40ea30 <__cmpdf2+0x4>
  40ea2a:	bf00      	nop

0040ea2c <__cmpdf2>:
  40ea2c:	f04f 0c01 	mov.w	ip, #1
  40ea30:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ea34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ea38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ea3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ea40:	bf18      	it	ne
  40ea42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40ea46:	d01b      	beq.n	40ea80 <__cmpdf2+0x54>
  40ea48:	b001      	add	sp, #4
  40ea4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40ea4e:	bf0c      	ite	eq
  40ea50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40ea54:	ea91 0f03 	teqne	r1, r3
  40ea58:	bf02      	ittt	eq
  40ea5a:	ea90 0f02 	teqeq	r0, r2
  40ea5e:	2000      	moveq	r0, #0
  40ea60:	4770      	bxeq	lr
  40ea62:	f110 0f00 	cmn.w	r0, #0
  40ea66:	ea91 0f03 	teq	r1, r3
  40ea6a:	bf58      	it	pl
  40ea6c:	4299      	cmppl	r1, r3
  40ea6e:	bf08      	it	eq
  40ea70:	4290      	cmpeq	r0, r2
  40ea72:	bf2c      	ite	cs
  40ea74:	17d8      	asrcs	r0, r3, #31
  40ea76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40ea7a:	f040 0001 	orr.w	r0, r0, #1
  40ea7e:	4770      	bx	lr
  40ea80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ea84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ea88:	d102      	bne.n	40ea90 <__cmpdf2+0x64>
  40ea8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ea8e:	d107      	bne.n	40eaa0 <__cmpdf2+0x74>
  40ea90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ea94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ea98:	d1d6      	bne.n	40ea48 <__cmpdf2+0x1c>
  40ea9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ea9e:	d0d3      	beq.n	40ea48 <__cmpdf2+0x1c>
  40eaa0:	f85d 0b04 	ldr.w	r0, [sp], #4
  40eaa4:	4770      	bx	lr
  40eaa6:	bf00      	nop

0040eaa8 <__aeabi_cdrcmple>:
  40eaa8:	4684      	mov	ip, r0
  40eaaa:	4610      	mov	r0, r2
  40eaac:	4662      	mov	r2, ip
  40eaae:	468c      	mov	ip, r1
  40eab0:	4619      	mov	r1, r3
  40eab2:	4663      	mov	r3, ip
  40eab4:	e000      	b.n	40eab8 <__aeabi_cdcmpeq>
  40eab6:	bf00      	nop

0040eab8 <__aeabi_cdcmpeq>:
  40eab8:	b501      	push	{r0, lr}
  40eaba:	f7ff ffb7 	bl	40ea2c <__cmpdf2>
  40eabe:	2800      	cmp	r0, #0
  40eac0:	bf48      	it	mi
  40eac2:	f110 0f00 	cmnmi.w	r0, #0
  40eac6:	bd01      	pop	{r0, pc}

0040eac8 <__aeabi_dcmpeq>:
  40eac8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40eacc:	f7ff fff4 	bl	40eab8 <__aeabi_cdcmpeq>
  40ead0:	bf0c      	ite	eq
  40ead2:	2001      	moveq	r0, #1
  40ead4:	2000      	movne	r0, #0
  40ead6:	f85d fb08 	ldr.w	pc, [sp], #8
  40eada:	bf00      	nop

0040eadc <__aeabi_dcmplt>:
  40eadc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40eae0:	f7ff ffea 	bl	40eab8 <__aeabi_cdcmpeq>
  40eae4:	bf34      	ite	cc
  40eae6:	2001      	movcc	r0, #1
  40eae8:	2000      	movcs	r0, #0
  40eaea:	f85d fb08 	ldr.w	pc, [sp], #8
  40eaee:	bf00      	nop

0040eaf0 <__aeabi_dcmple>:
  40eaf0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40eaf4:	f7ff ffe0 	bl	40eab8 <__aeabi_cdcmpeq>
  40eaf8:	bf94      	ite	ls
  40eafa:	2001      	movls	r0, #1
  40eafc:	2000      	movhi	r0, #0
  40eafe:	f85d fb08 	ldr.w	pc, [sp], #8
  40eb02:	bf00      	nop

0040eb04 <__aeabi_dcmpge>:
  40eb04:	f84d ed08 	str.w	lr, [sp, #-8]!
  40eb08:	f7ff ffce 	bl	40eaa8 <__aeabi_cdrcmple>
  40eb0c:	bf94      	ite	ls
  40eb0e:	2001      	movls	r0, #1
  40eb10:	2000      	movhi	r0, #0
  40eb12:	f85d fb08 	ldr.w	pc, [sp], #8
  40eb16:	bf00      	nop

0040eb18 <__aeabi_dcmpgt>:
  40eb18:	f84d ed08 	str.w	lr, [sp, #-8]!
  40eb1c:	f7ff ffc4 	bl	40eaa8 <__aeabi_cdrcmple>
  40eb20:	bf34      	ite	cc
  40eb22:	2001      	movcc	r0, #1
  40eb24:	2000      	movcs	r0, #0
  40eb26:	f85d fb08 	ldr.w	pc, [sp], #8
  40eb2a:	bf00      	nop

0040eb2c <__aeabi_dcmpun>:
  40eb2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40eb30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40eb34:	d102      	bne.n	40eb3c <__aeabi_dcmpun+0x10>
  40eb36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40eb3a:	d10a      	bne.n	40eb52 <__aeabi_dcmpun+0x26>
  40eb3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40eb40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40eb44:	d102      	bne.n	40eb4c <__aeabi_dcmpun+0x20>
  40eb46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40eb4a:	d102      	bne.n	40eb52 <__aeabi_dcmpun+0x26>
  40eb4c:	f04f 0000 	mov.w	r0, #0
  40eb50:	4770      	bx	lr
  40eb52:	f04f 0001 	mov.w	r0, #1
  40eb56:	4770      	bx	lr

0040eb58 <__aeabi_d2iz>:
  40eb58:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40eb5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40eb60:	d215      	bcs.n	40eb8e <__aeabi_d2iz+0x36>
  40eb62:	d511      	bpl.n	40eb88 <__aeabi_d2iz+0x30>
  40eb64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40eb68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40eb6c:	d912      	bls.n	40eb94 <__aeabi_d2iz+0x3c>
  40eb6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40eb72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40eb76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40eb7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40eb7e:	fa23 f002 	lsr.w	r0, r3, r2
  40eb82:	bf18      	it	ne
  40eb84:	4240      	negne	r0, r0
  40eb86:	4770      	bx	lr
  40eb88:	f04f 0000 	mov.w	r0, #0
  40eb8c:	4770      	bx	lr
  40eb8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40eb92:	d105      	bne.n	40eba0 <__aeabi_d2iz+0x48>
  40eb94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40eb98:	bf08      	it	eq
  40eb9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40eb9e:	4770      	bx	lr
  40eba0:	f04f 0000 	mov.w	r0, #0
  40eba4:	4770      	bx	lr
  40eba6:	bf00      	nop

0040eba8 <__aeabi_d2uiz>:
  40eba8:	004a      	lsls	r2, r1, #1
  40ebaa:	d211      	bcs.n	40ebd0 <__aeabi_d2uiz+0x28>
  40ebac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40ebb0:	d211      	bcs.n	40ebd6 <__aeabi_d2uiz+0x2e>
  40ebb2:	d50d      	bpl.n	40ebd0 <__aeabi_d2uiz+0x28>
  40ebb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40ebb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40ebbc:	d40e      	bmi.n	40ebdc <__aeabi_d2uiz+0x34>
  40ebbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ebc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ebc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40ebca:	fa23 f002 	lsr.w	r0, r3, r2
  40ebce:	4770      	bx	lr
  40ebd0:	f04f 0000 	mov.w	r0, #0
  40ebd4:	4770      	bx	lr
  40ebd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40ebda:	d102      	bne.n	40ebe2 <__aeabi_d2uiz+0x3a>
  40ebdc:	f04f 30ff 	mov.w	r0, #4294967295
  40ebe0:	4770      	bx	lr
  40ebe2:	f04f 0000 	mov.w	r0, #0
  40ebe6:	4770      	bx	lr

0040ebe8 <__aeabi_d2f>:
  40ebe8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40ebec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40ebf0:	bf24      	itt	cs
  40ebf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40ebf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40ebfa:	d90d      	bls.n	40ec18 <__aeabi_d2f+0x30>
  40ebfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40ec00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40ec04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40ec08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40ec0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40ec10:	bf08      	it	eq
  40ec12:	f020 0001 	biceq.w	r0, r0, #1
  40ec16:	4770      	bx	lr
  40ec18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40ec1c:	d121      	bne.n	40ec62 <__aeabi_d2f+0x7a>
  40ec1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40ec22:	bfbc      	itt	lt
  40ec24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40ec28:	4770      	bxlt	lr
  40ec2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ec2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40ec32:	f1c2 0218 	rsb	r2, r2, #24
  40ec36:	f1c2 0c20 	rsb	ip, r2, #32
  40ec3a:	fa10 f30c 	lsls.w	r3, r0, ip
  40ec3e:	fa20 f002 	lsr.w	r0, r0, r2
  40ec42:	bf18      	it	ne
  40ec44:	f040 0001 	orrne.w	r0, r0, #1
  40ec48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ec4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40ec50:	fa03 fc0c 	lsl.w	ip, r3, ip
  40ec54:	ea40 000c 	orr.w	r0, r0, ip
  40ec58:	fa23 f302 	lsr.w	r3, r3, r2
  40ec5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40ec60:	e7cc      	b.n	40ebfc <__aeabi_d2f+0x14>
  40ec62:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40ec66:	d107      	bne.n	40ec78 <__aeabi_d2f+0x90>
  40ec68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40ec6c:	bf1e      	ittt	ne
  40ec6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40ec72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40ec76:	4770      	bxne	lr
  40ec78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40ec7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40ec80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40ec84:	4770      	bx	lr
  40ec86:	bf00      	nop

0040ec88 <__aeabi_frsub>:
  40ec88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40ec8c:	e002      	b.n	40ec94 <__addsf3>
  40ec8e:	bf00      	nop

0040ec90 <__aeabi_fsub>:
  40ec90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040ec94 <__addsf3>:
  40ec94:	0042      	lsls	r2, r0, #1
  40ec96:	bf1f      	itttt	ne
  40ec98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40ec9c:	ea92 0f03 	teqne	r2, r3
  40eca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40eca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40eca8:	d06a      	beq.n	40ed80 <__addsf3+0xec>
  40ecaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40ecae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40ecb2:	bfc1      	itttt	gt
  40ecb4:	18d2      	addgt	r2, r2, r3
  40ecb6:	4041      	eorgt	r1, r0
  40ecb8:	4048      	eorgt	r0, r1
  40ecba:	4041      	eorgt	r1, r0
  40ecbc:	bfb8      	it	lt
  40ecbe:	425b      	neglt	r3, r3
  40ecc0:	2b19      	cmp	r3, #25
  40ecc2:	bf88      	it	hi
  40ecc4:	4770      	bxhi	lr
  40ecc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40ecca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40ecce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40ecd2:	bf18      	it	ne
  40ecd4:	4240      	negne	r0, r0
  40ecd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ecda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40ecde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40ece2:	bf18      	it	ne
  40ece4:	4249      	negne	r1, r1
  40ece6:	ea92 0f03 	teq	r2, r3
  40ecea:	d03f      	beq.n	40ed6c <__addsf3+0xd8>
  40ecec:	f1a2 0201 	sub.w	r2, r2, #1
  40ecf0:	fa41 fc03 	asr.w	ip, r1, r3
  40ecf4:	eb10 000c 	adds.w	r0, r0, ip
  40ecf8:	f1c3 0320 	rsb	r3, r3, #32
  40ecfc:	fa01 f103 	lsl.w	r1, r1, r3
  40ed00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40ed04:	d502      	bpl.n	40ed0c <__addsf3+0x78>
  40ed06:	4249      	negs	r1, r1
  40ed08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  40ed0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40ed10:	d313      	bcc.n	40ed3a <__addsf3+0xa6>
  40ed12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40ed16:	d306      	bcc.n	40ed26 <__addsf3+0x92>
  40ed18:	0840      	lsrs	r0, r0, #1
  40ed1a:	ea4f 0131 	mov.w	r1, r1, rrx
  40ed1e:	f102 0201 	add.w	r2, r2, #1
  40ed22:	2afe      	cmp	r2, #254	; 0xfe
  40ed24:	d251      	bcs.n	40edca <__addsf3+0x136>
  40ed26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40ed2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40ed2e:	bf08      	it	eq
  40ed30:	f020 0001 	biceq.w	r0, r0, #1
  40ed34:	ea40 0003 	orr.w	r0, r0, r3
  40ed38:	4770      	bx	lr
  40ed3a:	0049      	lsls	r1, r1, #1
  40ed3c:	eb40 0000 	adc.w	r0, r0, r0
  40ed40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40ed44:	f1a2 0201 	sub.w	r2, r2, #1
  40ed48:	d1ed      	bne.n	40ed26 <__addsf3+0x92>
  40ed4a:	fab0 fc80 	clz	ip, r0
  40ed4e:	f1ac 0c08 	sub.w	ip, ip, #8
  40ed52:	ebb2 020c 	subs.w	r2, r2, ip
  40ed56:	fa00 f00c 	lsl.w	r0, r0, ip
  40ed5a:	bfaa      	itet	ge
  40ed5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40ed60:	4252      	neglt	r2, r2
  40ed62:	4318      	orrge	r0, r3
  40ed64:	bfbc      	itt	lt
  40ed66:	40d0      	lsrlt	r0, r2
  40ed68:	4318      	orrlt	r0, r3
  40ed6a:	4770      	bx	lr
  40ed6c:	f092 0f00 	teq	r2, #0
  40ed70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40ed74:	bf06      	itte	eq
  40ed76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40ed7a:	3201      	addeq	r2, #1
  40ed7c:	3b01      	subne	r3, #1
  40ed7e:	e7b5      	b.n	40ecec <__addsf3+0x58>
  40ed80:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40ed84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40ed88:	bf18      	it	ne
  40ed8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40ed8e:	d021      	beq.n	40edd4 <__addsf3+0x140>
  40ed90:	ea92 0f03 	teq	r2, r3
  40ed94:	d004      	beq.n	40eda0 <__addsf3+0x10c>
  40ed96:	f092 0f00 	teq	r2, #0
  40ed9a:	bf08      	it	eq
  40ed9c:	4608      	moveq	r0, r1
  40ed9e:	4770      	bx	lr
  40eda0:	ea90 0f01 	teq	r0, r1
  40eda4:	bf1c      	itt	ne
  40eda6:	2000      	movne	r0, #0
  40eda8:	4770      	bxne	lr
  40edaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40edae:	d104      	bne.n	40edba <__addsf3+0x126>
  40edb0:	0040      	lsls	r0, r0, #1
  40edb2:	bf28      	it	cs
  40edb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40edb8:	4770      	bx	lr
  40edba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40edbe:	bf3c      	itt	cc
  40edc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40edc4:	4770      	bxcc	lr
  40edc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40edca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40edce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40edd2:	4770      	bx	lr
  40edd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40edd8:	bf16      	itet	ne
  40edda:	4608      	movne	r0, r1
  40eddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40ede0:	4601      	movne	r1, r0
  40ede2:	0242      	lsls	r2, r0, #9
  40ede4:	bf06      	itte	eq
  40ede6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40edea:	ea90 0f01 	teqeq	r0, r1
  40edee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40edf2:	4770      	bx	lr

0040edf4 <__aeabi_ui2f>:
  40edf4:	f04f 0300 	mov.w	r3, #0
  40edf8:	e004      	b.n	40ee04 <__aeabi_i2f+0x8>
  40edfa:	bf00      	nop

0040edfc <__aeabi_i2f>:
  40edfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40ee00:	bf48      	it	mi
  40ee02:	4240      	negmi	r0, r0
  40ee04:	ea5f 0c00 	movs.w	ip, r0
  40ee08:	bf08      	it	eq
  40ee0a:	4770      	bxeq	lr
  40ee0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40ee10:	4601      	mov	r1, r0
  40ee12:	f04f 0000 	mov.w	r0, #0
  40ee16:	e01c      	b.n	40ee52 <__aeabi_l2f+0x2a>

0040ee18 <__aeabi_ul2f>:
  40ee18:	ea50 0201 	orrs.w	r2, r0, r1
  40ee1c:	bf08      	it	eq
  40ee1e:	4770      	bxeq	lr
  40ee20:	f04f 0300 	mov.w	r3, #0
  40ee24:	e00a      	b.n	40ee3c <__aeabi_l2f+0x14>
  40ee26:	bf00      	nop

0040ee28 <__aeabi_l2f>:
  40ee28:	ea50 0201 	orrs.w	r2, r0, r1
  40ee2c:	bf08      	it	eq
  40ee2e:	4770      	bxeq	lr
  40ee30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40ee34:	d502      	bpl.n	40ee3c <__aeabi_l2f+0x14>
  40ee36:	4240      	negs	r0, r0
  40ee38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ee3c:	ea5f 0c01 	movs.w	ip, r1
  40ee40:	bf02      	ittt	eq
  40ee42:	4684      	moveq	ip, r0
  40ee44:	4601      	moveq	r1, r0
  40ee46:	2000      	moveq	r0, #0
  40ee48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40ee4c:	bf08      	it	eq
  40ee4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40ee52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40ee56:	fabc f28c 	clz	r2, ip
  40ee5a:	3a08      	subs	r2, #8
  40ee5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40ee60:	db10      	blt.n	40ee84 <__aeabi_l2f+0x5c>
  40ee62:	fa01 fc02 	lsl.w	ip, r1, r2
  40ee66:	4463      	add	r3, ip
  40ee68:	fa00 fc02 	lsl.w	ip, r0, r2
  40ee6c:	f1c2 0220 	rsb	r2, r2, #32
  40ee70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40ee74:	fa20 f202 	lsr.w	r2, r0, r2
  40ee78:	eb43 0002 	adc.w	r0, r3, r2
  40ee7c:	bf08      	it	eq
  40ee7e:	f020 0001 	biceq.w	r0, r0, #1
  40ee82:	4770      	bx	lr
  40ee84:	f102 0220 	add.w	r2, r2, #32
  40ee88:	fa01 fc02 	lsl.w	ip, r1, r2
  40ee8c:	f1c2 0220 	rsb	r2, r2, #32
  40ee90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40ee94:	fa21 f202 	lsr.w	r2, r1, r2
  40ee98:	eb43 0002 	adc.w	r0, r3, r2
  40ee9c:	bf08      	it	eq
  40ee9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40eea2:	4770      	bx	lr

0040eea4 <__aeabi_f2lz>:
  40eea4:	ee07 0a90 	vmov	s15, r0
  40eea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  40eeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40eeb0:	d401      	bmi.n	40eeb6 <__aeabi_f2lz+0x12>
  40eeb2:	f000 b809 	b.w	40eec8 <__aeabi_f2ulz>
  40eeb6:	b508      	push	{r3, lr}
  40eeb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40eebc:	f000 f804 	bl	40eec8 <__aeabi_f2ulz>
  40eec0:	4240      	negs	r0, r0
  40eec2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40eec6:	bd08      	pop	{r3, pc}

0040eec8 <__aeabi_f2ulz>:
  40eec8:	b5d0      	push	{r4, r6, r7, lr}
  40eeca:	f7ff fb41 	bl	40e550 <__aeabi_f2d>
  40eece:	2200      	movs	r2, #0
  40eed0:	4b0e      	ldr	r3, [pc, #56]	; (40ef0c <__aeabi_f2ulz+0x44>)
  40eed2:	4606      	mov	r6, r0
  40eed4:	460f      	mov	r7, r1
  40eed6:	f7ff fb8f 	bl	40e5f8 <__aeabi_dmul>
  40eeda:	f7ff fe65 	bl	40eba8 <__aeabi_d2uiz>
  40eede:	4604      	mov	r4, r0
  40eee0:	f7ff fb14 	bl	40e50c <__aeabi_ui2d>
  40eee4:	2200      	movs	r2, #0
  40eee6:	4b0a      	ldr	r3, [pc, #40]	; (40ef10 <__aeabi_f2ulz+0x48>)
  40eee8:	f7ff fb86 	bl	40e5f8 <__aeabi_dmul>
  40eeec:	4602      	mov	r2, r0
  40eeee:	460b      	mov	r3, r1
  40eef0:	4630      	mov	r0, r6
  40eef2:	4639      	mov	r1, r7
  40eef4:	f7ff f9cc 	bl	40e290 <__aeabi_dsub>
  40eef8:	f7ff fe56 	bl	40eba8 <__aeabi_d2uiz>
  40eefc:	4623      	mov	r3, r4
  40eefe:	2200      	movs	r2, #0
  40ef00:	ea42 0200 	orr.w	r2, r2, r0
  40ef04:	4610      	mov	r0, r2
  40ef06:	4619      	mov	r1, r3
  40ef08:	bdd0      	pop	{r4, r6, r7, pc}
  40ef0a:	bf00      	nop
  40ef0c:	3df00000 	.word	0x3df00000
  40ef10:	41f00000 	.word	0x41f00000

0040ef14 <__udivmoddi4>:
  40ef14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40ef18:	468c      	mov	ip, r1
  40ef1a:	460d      	mov	r5, r1
  40ef1c:	4604      	mov	r4, r0
  40ef1e:	9e08      	ldr	r6, [sp, #32]
  40ef20:	2b00      	cmp	r3, #0
  40ef22:	d151      	bne.n	40efc8 <__udivmoddi4+0xb4>
  40ef24:	428a      	cmp	r2, r1
  40ef26:	4617      	mov	r7, r2
  40ef28:	d96d      	bls.n	40f006 <__udivmoddi4+0xf2>
  40ef2a:	fab2 fe82 	clz	lr, r2
  40ef2e:	f1be 0f00 	cmp.w	lr, #0
  40ef32:	d00b      	beq.n	40ef4c <__udivmoddi4+0x38>
  40ef34:	f1ce 0c20 	rsb	ip, lr, #32
  40ef38:	fa01 f50e 	lsl.w	r5, r1, lr
  40ef3c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40ef40:	fa02 f70e 	lsl.w	r7, r2, lr
  40ef44:	ea4c 0c05 	orr.w	ip, ip, r5
  40ef48:	fa00 f40e 	lsl.w	r4, r0, lr
  40ef4c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40ef50:	0c25      	lsrs	r5, r4, #16
  40ef52:	fbbc f8fa 	udiv	r8, ip, sl
  40ef56:	fa1f f987 	uxth.w	r9, r7
  40ef5a:	fb0a cc18 	mls	ip, sl, r8, ip
  40ef5e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40ef62:	fb08 f309 	mul.w	r3, r8, r9
  40ef66:	42ab      	cmp	r3, r5
  40ef68:	d90a      	bls.n	40ef80 <__udivmoddi4+0x6c>
  40ef6a:	19ed      	adds	r5, r5, r7
  40ef6c:	f108 32ff 	add.w	r2, r8, #4294967295
  40ef70:	f080 8123 	bcs.w	40f1ba <__udivmoddi4+0x2a6>
  40ef74:	42ab      	cmp	r3, r5
  40ef76:	f240 8120 	bls.w	40f1ba <__udivmoddi4+0x2a6>
  40ef7a:	f1a8 0802 	sub.w	r8, r8, #2
  40ef7e:	443d      	add	r5, r7
  40ef80:	1aed      	subs	r5, r5, r3
  40ef82:	b2a4      	uxth	r4, r4
  40ef84:	fbb5 f0fa 	udiv	r0, r5, sl
  40ef88:	fb0a 5510 	mls	r5, sl, r0, r5
  40ef8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40ef90:	fb00 f909 	mul.w	r9, r0, r9
  40ef94:	45a1      	cmp	r9, r4
  40ef96:	d909      	bls.n	40efac <__udivmoddi4+0x98>
  40ef98:	19e4      	adds	r4, r4, r7
  40ef9a:	f100 33ff 	add.w	r3, r0, #4294967295
  40ef9e:	f080 810a 	bcs.w	40f1b6 <__udivmoddi4+0x2a2>
  40efa2:	45a1      	cmp	r9, r4
  40efa4:	f240 8107 	bls.w	40f1b6 <__udivmoddi4+0x2a2>
  40efa8:	3802      	subs	r0, #2
  40efaa:	443c      	add	r4, r7
  40efac:	eba4 0409 	sub.w	r4, r4, r9
  40efb0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40efb4:	2100      	movs	r1, #0
  40efb6:	2e00      	cmp	r6, #0
  40efb8:	d061      	beq.n	40f07e <__udivmoddi4+0x16a>
  40efba:	fa24 f40e 	lsr.w	r4, r4, lr
  40efbe:	2300      	movs	r3, #0
  40efc0:	6034      	str	r4, [r6, #0]
  40efc2:	6073      	str	r3, [r6, #4]
  40efc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40efc8:	428b      	cmp	r3, r1
  40efca:	d907      	bls.n	40efdc <__udivmoddi4+0xc8>
  40efcc:	2e00      	cmp	r6, #0
  40efce:	d054      	beq.n	40f07a <__udivmoddi4+0x166>
  40efd0:	2100      	movs	r1, #0
  40efd2:	e886 0021 	stmia.w	r6, {r0, r5}
  40efd6:	4608      	mov	r0, r1
  40efd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40efdc:	fab3 f183 	clz	r1, r3
  40efe0:	2900      	cmp	r1, #0
  40efe2:	f040 808e 	bne.w	40f102 <__udivmoddi4+0x1ee>
  40efe6:	42ab      	cmp	r3, r5
  40efe8:	d302      	bcc.n	40eff0 <__udivmoddi4+0xdc>
  40efea:	4282      	cmp	r2, r0
  40efec:	f200 80fa 	bhi.w	40f1e4 <__udivmoddi4+0x2d0>
  40eff0:	1a84      	subs	r4, r0, r2
  40eff2:	eb65 0503 	sbc.w	r5, r5, r3
  40eff6:	2001      	movs	r0, #1
  40eff8:	46ac      	mov	ip, r5
  40effa:	2e00      	cmp	r6, #0
  40effc:	d03f      	beq.n	40f07e <__udivmoddi4+0x16a>
  40effe:	e886 1010 	stmia.w	r6, {r4, ip}
  40f002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f006:	b912      	cbnz	r2, 40f00e <__udivmoddi4+0xfa>
  40f008:	2701      	movs	r7, #1
  40f00a:	fbb7 f7f2 	udiv	r7, r7, r2
  40f00e:	fab7 fe87 	clz	lr, r7
  40f012:	f1be 0f00 	cmp.w	lr, #0
  40f016:	d134      	bne.n	40f082 <__udivmoddi4+0x16e>
  40f018:	1beb      	subs	r3, r5, r7
  40f01a:	0c3a      	lsrs	r2, r7, #16
  40f01c:	fa1f fc87 	uxth.w	ip, r7
  40f020:	2101      	movs	r1, #1
  40f022:	fbb3 f8f2 	udiv	r8, r3, r2
  40f026:	0c25      	lsrs	r5, r4, #16
  40f028:	fb02 3318 	mls	r3, r2, r8, r3
  40f02c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f030:	fb0c f308 	mul.w	r3, ip, r8
  40f034:	42ab      	cmp	r3, r5
  40f036:	d907      	bls.n	40f048 <__udivmoddi4+0x134>
  40f038:	19ed      	adds	r5, r5, r7
  40f03a:	f108 30ff 	add.w	r0, r8, #4294967295
  40f03e:	d202      	bcs.n	40f046 <__udivmoddi4+0x132>
  40f040:	42ab      	cmp	r3, r5
  40f042:	f200 80d1 	bhi.w	40f1e8 <__udivmoddi4+0x2d4>
  40f046:	4680      	mov	r8, r0
  40f048:	1aed      	subs	r5, r5, r3
  40f04a:	b2a3      	uxth	r3, r4
  40f04c:	fbb5 f0f2 	udiv	r0, r5, r2
  40f050:	fb02 5510 	mls	r5, r2, r0, r5
  40f054:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40f058:	fb0c fc00 	mul.w	ip, ip, r0
  40f05c:	45a4      	cmp	ip, r4
  40f05e:	d907      	bls.n	40f070 <__udivmoddi4+0x15c>
  40f060:	19e4      	adds	r4, r4, r7
  40f062:	f100 33ff 	add.w	r3, r0, #4294967295
  40f066:	d202      	bcs.n	40f06e <__udivmoddi4+0x15a>
  40f068:	45a4      	cmp	ip, r4
  40f06a:	f200 80b8 	bhi.w	40f1de <__udivmoddi4+0x2ca>
  40f06e:	4618      	mov	r0, r3
  40f070:	eba4 040c 	sub.w	r4, r4, ip
  40f074:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40f078:	e79d      	b.n	40efb6 <__udivmoddi4+0xa2>
  40f07a:	4631      	mov	r1, r6
  40f07c:	4630      	mov	r0, r6
  40f07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f082:	f1ce 0420 	rsb	r4, lr, #32
  40f086:	fa05 f30e 	lsl.w	r3, r5, lr
  40f08a:	fa07 f70e 	lsl.w	r7, r7, lr
  40f08e:	fa20 f804 	lsr.w	r8, r0, r4
  40f092:	0c3a      	lsrs	r2, r7, #16
  40f094:	fa25 f404 	lsr.w	r4, r5, r4
  40f098:	ea48 0803 	orr.w	r8, r8, r3
  40f09c:	fbb4 f1f2 	udiv	r1, r4, r2
  40f0a0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40f0a4:	fb02 4411 	mls	r4, r2, r1, r4
  40f0a8:	fa1f fc87 	uxth.w	ip, r7
  40f0ac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40f0b0:	fb01 f30c 	mul.w	r3, r1, ip
  40f0b4:	42ab      	cmp	r3, r5
  40f0b6:	fa00 f40e 	lsl.w	r4, r0, lr
  40f0ba:	d909      	bls.n	40f0d0 <__udivmoddi4+0x1bc>
  40f0bc:	19ed      	adds	r5, r5, r7
  40f0be:	f101 30ff 	add.w	r0, r1, #4294967295
  40f0c2:	f080 808a 	bcs.w	40f1da <__udivmoddi4+0x2c6>
  40f0c6:	42ab      	cmp	r3, r5
  40f0c8:	f240 8087 	bls.w	40f1da <__udivmoddi4+0x2c6>
  40f0cc:	3902      	subs	r1, #2
  40f0ce:	443d      	add	r5, r7
  40f0d0:	1aeb      	subs	r3, r5, r3
  40f0d2:	fa1f f588 	uxth.w	r5, r8
  40f0d6:	fbb3 f0f2 	udiv	r0, r3, r2
  40f0da:	fb02 3310 	mls	r3, r2, r0, r3
  40f0de:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f0e2:	fb00 f30c 	mul.w	r3, r0, ip
  40f0e6:	42ab      	cmp	r3, r5
  40f0e8:	d907      	bls.n	40f0fa <__udivmoddi4+0x1e6>
  40f0ea:	19ed      	adds	r5, r5, r7
  40f0ec:	f100 38ff 	add.w	r8, r0, #4294967295
  40f0f0:	d26f      	bcs.n	40f1d2 <__udivmoddi4+0x2be>
  40f0f2:	42ab      	cmp	r3, r5
  40f0f4:	d96d      	bls.n	40f1d2 <__udivmoddi4+0x2be>
  40f0f6:	3802      	subs	r0, #2
  40f0f8:	443d      	add	r5, r7
  40f0fa:	1aeb      	subs	r3, r5, r3
  40f0fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40f100:	e78f      	b.n	40f022 <__udivmoddi4+0x10e>
  40f102:	f1c1 0720 	rsb	r7, r1, #32
  40f106:	fa22 f807 	lsr.w	r8, r2, r7
  40f10a:	408b      	lsls	r3, r1
  40f10c:	fa05 f401 	lsl.w	r4, r5, r1
  40f110:	ea48 0303 	orr.w	r3, r8, r3
  40f114:	fa20 fe07 	lsr.w	lr, r0, r7
  40f118:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40f11c:	40fd      	lsrs	r5, r7
  40f11e:	ea4e 0e04 	orr.w	lr, lr, r4
  40f122:	fbb5 f9fc 	udiv	r9, r5, ip
  40f126:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40f12a:	fb0c 5519 	mls	r5, ip, r9, r5
  40f12e:	fa1f f883 	uxth.w	r8, r3
  40f132:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40f136:	fb09 f408 	mul.w	r4, r9, r8
  40f13a:	42ac      	cmp	r4, r5
  40f13c:	fa02 f201 	lsl.w	r2, r2, r1
  40f140:	fa00 fa01 	lsl.w	sl, r0, r1
  40f144:	d908      	bls.n	40f158 <__udivmoddi4+0x244>
  40f146:	18ed      	adds	r5, r5, r3
  40f148:	f109 30ff 	add.w	r0, r9, #4294967295
  40f14c:	d243      	bcs.n	40f1d6 <__udivmoddi4+0x2c2>
  40f14e:	42ac      	cmp	r4, r5
  40f150:	d941      	bls.n	40f1d6 <__udivmoddi4+0x2c2>
  40f152:	f1a9 0902 	sub.w	r9, r9, #2
  40f156:	441d      	add	r5, r3
  40f158:	1b2d      	subs	r5, r5, r4
  40f15a:	fa1f fe8e 	uxth.w	lr, lr
  40f15e:	fbb5 f0fc 	udiv	r0, r5, ip
  40f162:	fb0c 5510 	mls	r5, ip, r0, r5
  40f166:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40f16a:	fb00 f808 	mul.w	r8, r0, r8
  40f16e:	45a0      	cmp	r8, r4
  40f170:	d907      	bls.n	40f182 <__udivmoddi4+0x26e>
  40f172:	18e4      	adds	r4, r4, r3
  40f174:	f100 35ff 	add.w	r5, r0, #4294967295
  40f178:	d229      	bcs.n	40f1ce <__udivmoddi4+0x2ba>
  40f17a:	45a0      	cmp	r8, r4
  40f17c:	d927      	bls.n	40f1ce <__udivmoddi4+0x2ba>
  40f17e:	3802      	subs	r0, #2
  40f180:	441c      	add	r4, r3
  40f182:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40f186:	eba4 0408 	sub.w	r4, r4, r8
  40f18a:	fba0 8902 	umull	r8, r9, r0, r2
  40f18e:	454c      	cmp	r4, r9
  40f190:	46c6      	mov	lr, r8
  40f192:	464d      	mov	r5, r9
  40f194:	d315      	bcc.n	40f1c2 <__udivmoddi4+0x2ae>
  40f196:	d012      	beq.n	40f1be <__udivmoddi4+0x2aa>
  40f198:	b156      	cbz	r6, 40f1b0 <__udivmoddi4+0x29c>
  40f19a:	ebba 030e 	subs.w	r3, sl, lr
  40f19e:	eb64 0405 	sbc.w	r4, r4, r5
  40f1a2:	fa04 f707 	lsl.w	r7, r4, r7
  40f1a6:	40cb      	lsrs	r3, r1
  40f1a8:	431f      	orrs	r7, r3
  40f1aa:	40cc      	lsrs	r4, r1
  40f1ac:	6037      	str	r7, [r6, #0]
  40f1ae:	6074      	str	r4, [r6, #4]
  40f1b0:	2100      	movs	r1, #0
  40f1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f1b6:	4618      	mov	r0, r3
  40f1b8:	e6f8      	b.n	40efac <__udivmoddi4+0x98>
  40f1ba:	4690      	mov	r8, r2
  40f1bc:	e6e0      	b.n	40ef80 <__udivmoddi4+0x6c>
  40f1be:	45c2      	cmp	sl, r8
  40f1c0:	d2ea      	bcs.n	40f198 <__udivmoddi4+0x284>
  40f1c2:	ebb8 0e02 	subs.w	lr, r8, r2
  40f1c6:	eb69 0503 	sbc.w	r5, r9, r3
  40f1ca:	3801      	subs	r0, #1
  40f1cc:	e7e4      	b.n	40f198 <__udivmoddi4+0x284>
  40f1ce:	4628      	mov	r0, r5
  40f1d0:	e7d7      	b.n	40f182 <__udivmoddi4+0x26e>
  40f1d2:	4640      	mov	r0, r8
  40f1d4:	e791      	b.n	40f0fa <__udivmoddi4+0x1e6>
  40f1d6:	4681      	mov	r9, r0
  40f1d8:	e7be      	b.n	40f158 <__udivmoddi4+0x244>
  40f1da:	4601      	mov	r1, r0
  40f1dc:	e778      	b.n	40f0d0 <__udivmoddi4+0x1bc>
  40f1de:	3802      	subs	r0, #2
  40f1e0:	443c      	add	r4, r7
  40f1e2:	e745      	b.n	40f070 <__udivmoddi4+0x15c>
  40f1e4:	4608      	mov	r0, r1
  40f1e6:	e708      	b.n	40effa <__udivmoddi4+0xe6>
  40f1e8:	f1a8 0802 	sub.w	r8, r8, #2
  40f1ec:	443d      	add	r5, r7
  40f1ee:	e72b      	b.n	40f048 <__udivmoddi4+0x134>

0040f1f0 <__aeabi_idiv0>:
  40f1f0:	4770      	bx	lr
  40f1f2:	bf00      	nop

0040f1f4 <__errno>:
  40f1f4:	4b01      	ldr	r3, [pc, #4]	; (40f1fc <__errno+0x8>)
  40f1f6:	6818      	ldr	r0, [r3, #0]
  40f1f8:	4770      	bx	lr
  40f1fa:	bf00      	nop
  40f1fc:	2000251c 	.word	0x2000251c

0040f200 <__libc_init_array>:
  40f200:	b570      	push	{r4, r5, r6, lr}
  40f202:	4e0f      	ldr	r6, [pc, #60]	; (40f240 <__libc_init_array+0x40>)
  40f204:	4d0f      	ldr	r5, [pc, #60]	; (40f244 <__libc_init_array+0x44>)
  40f206:	1b76      	subs	r6, r6, r5
  40f208:	10b6      	asrs	r6, r6, #2
  40f20a:	bf18      	it	ne
  40f20c:	2400      	movne	r4, #0
  40f20e:	d005      	beq.n	40f21c <__libc_init_array+0x1c>
  40f210:	3401      	adds	r4, #1
  40f212:	f855 3b04 	ldr.w	r3, [r5], #4
  40f216:	4798      	blx	r3
  40f218:	42a6      	cmp	r6, r4
  40f21a:	d1f9      	bne.n	40f210 <__libc_init_array+0x10>
  40f21c:	4e0a      	ldr	r6, [pc, #40]	; (40f248 <__libc_init_array+0x48>)
  40f21e:	4d0b      	ldr	r5, [pc, #44]	; (40f24c <__libc_init_array+0x4c>)
  40f220:	1b76      	subs	r6, r6, r5
  40f222:	f004 fccd 	bl	413bc0 <_init>
  40f226:	10b6      	asrs	r6, r6, #2
  40f228:	bf18      	it	ne
  40f22a:	2400      	movne	r4, #0
  40f22c:	d006      	beq.n	40f23c <__libc_init_array+0x3c>
  40f22e:	3401      	adds	r4, #1
  40f230:	f855 3b04 	ldr.w	r3, [r5], #4
  40f234:	4798      	blx	r3
  40f236:	42a6      	cmp	r6, r4
  40f238:	d1f9      	bne.n	40f22e <__libc_init_array+0x2e>
  40f23a:	bd70      	pop	{r4, r5, r6, pc}
  40f23c:	bd70      	pop	{r4, r5, r6, pc}
  40f23e:	bf00      	nop
  40f240:	00413bcc 	.word	0x00413bcc
  40f244:	00413bcc 	.word	0x00413bcc
  40f248:	00413bd4 	.word	0x00413bd4
  40f24c:	00413bcc 	.word	0x00413bcc

0040f250 <__retarget_lock_acquire_recursive>:
  40f250:	4770      	bx	lr
  40f252:	bf00      	nop

0040f254 <__retarget_lock_release_recursive>:
  40f254:	4770      	bx	lr
  40f256:	bf00      	nop

0040f258 <_malloc_r>:
  40f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f25c:	f101 060b 	add.w	r6, r1, #11
  40f260:	2e16      	cmp	r6, #22
  40f262:	b083      	sub	sp, #12
  40f264:	4605      	mov	r5, r0
  40f266:	f240 809e 	bls.w	40f3a6 <_malloc_r+0x14e>
  40f26a:	f036 0607 	bics.w	r6, r6, #7
  40f26e:	f100 80bd 	bmi.w	40f3ec <_malloc_r+0x194>
  40f272:	42b1      	cmp	r1, r6
  40f274:	f200 80ba 	bhi.w	40f3ec <_malloc_r+0x194>
  40f278:	f000 fc3e 	bl	40faf8 <__malloc_lock>
  40f27c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40f280:	f0c0 8293 	bcc.w	40f7aa <_malloc_r+0x552>
  40f284:	0a73      	lsrs	r3, r6, #9
  40f286:	f000 80b8 	beq.w	40f3fa <_malloc_r+0x1a2>
  40f28a:	2b04      	cmp	r3, #4
  40f28c:	f200 8179 	bhi.w	40f582 <_malloc_r+0x32a>
  40f290:	09b3      	lsrs	r3, r6, #6
  40f292:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40f296:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40f29a:	00c3      	lsls	r3, r0, #3
  40f29c:	4fbf      	ldr	r7, [pc, #764]	; (40f59c <_malloc_r+0x344>)
  40f29e:	443b      	add	r3, r7
  40f2a0:	f1a3 0108 	sub.w	r1, r3, #8
  40f2a4:	685c      	ldr	r4, [r3, #4]
  40f2a6:	42a1      	cmp	r1, r4
  40f2a8:	d106      	bne.n	40f2b8 <_malloc_r+0x60>
  40f2aa:	e00c      	b.n	40f2c6 <_malloc_r+0x6e>
  40f2ac:	2a00      	cmp	r2, #0
  40f2ae:	f280 80aa 	bge.w	40f406 <_malloc_r+0x1ae>
  40f2b2:	68e4      	ldr	r4, [r4, #12]
  40f2b4:	42a1      	cmp	r1, r4
  40f2b6:	d006      	beq.n	40f2c6 <_malloc_r+0x6e>
  40f2b8:	6863      	ldr	r3, [r4, #4]
  40f2ba:	f023 0303 	bic.w	r3, r3, #3
  40f2be:	1b9a      	subs	r2, r3, r6
  40f2c0:	2a0f      	cmp	r2, #15
  40f2c2:	ddf3      	ble.n	40f2ac <_malloc_r+0x54>
  40f2c4:	4670      	mov	r0, lr
  40f2c6:	693c      	ldr	r4, [r7, #16]
  40f2c8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40f5b0 <_malloc_r+0x358>
  40f2cc:	4574      	cmp	r4, lr
  40f2ce:	f000 81ab 	beq.w	40f628 <_malloc_r+0x3d0>
  40f2d2:	6863      	ldr	r3, [r4, #4]
  40f2d4:	f023 0303 	bic.w	r3, r3, #3
  40f2d8:	1b9a      	subs	r2, r3, r6
  40f2da:	2a0f      	cmp	r2, #15
  40f2dc:	f300 8190 	bgt.w	40f600 <_malloc_r+0x3a8>
  40f2e0:	2a00      	cmp	r2, #0
  40f2e2:	f8c7 e014 	str.w	lr, [r7, #20]
  40f2e6:	f8c7 e010 	str.w	lr, [r7, #16]
  40f2ea:	f280 809d 	bge.w	40f428 <_malloc_r+0x1d0>
  40f2ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40f2f2:	f080 8161 	bcs.w	40f5b8 <_malloc_r+0x360>
  40f2f6:	08db      	lsrs	r3, r3, #3
  40f2f8:	f103 0c01 	add.w	ip, r3, #1
  40f2fc:	1099      	asrs	r1, r3, #2
  40f2fe:	687a      	ldr	r2, [r7, #4]
  40f300:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40f304:	f8c4 8008 	str.w	r8, [r4, #8]
  40f308:	2301      	movs	r3, #1
  40f30a:	408b      	lsls	r3, r1
  40f30c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40f310:	4313      	orrs	r3, r2
  40f312:	3908      	subs	r1, #8
  40f314:	60e1      	str	r1, [r4, #12]
  40f316:	607b      	str	r3, [r7, #4]
  40f318:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40f31c:	f8c8 400c 	str.w	r4, [r8, #12]
  40f320:	1082      	asrs	r2, r0, #2
  40f322:	2401      	movs	r4, #1
  40f324:	4094      	lsls	r4, r2
  40f326:	429c      	cmp	r4, r3
  40f328:	f200 808b 	bhi.w	40f442 <_malloc_r+0x1ea>
  40f32c:	421c      	tst	r4, r3
  40f32e:	d106      	bne.n	40f33e <_malloc_r+0xe6>
  40f330:	f020 0003 	bic.w	r0, r0, #3
  40f334:	0064      	lsls	r4, r4, #1
  40f336:	421c      	tst	r4, r3
  40f338:	f100 0004 	add.w	r0, r0, #4
  40f33c:	d0fa      	beq.n	40f334 <_malloc_r+0xdc>
  40f33e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40f342:	46cc      	mov	ip, r9
  40f344:	4680      	mov	r8, r0
  40f346:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40f34a:	459c      	cmp	ip, r3
  40f34c:	d107      	bne.n	40f35e <_malloc_r+0x106>
  40f34e:	e16d      	b.n	40f62c <_malloc_r+0x3d4>
  40f350:	2a00      	cmp	r2, #0
  40f352:	f280 817b 	bge.w	40f64c <_malloc_r+0x3f4>
  40f356:	68db      	ldr	r3, [r3, #12]
  40f358:	459c      	cmp	ip, r3
  40f35a:	f000 8167 	beq.w	40f62c <_malloc_r+0x3d4>
  40f35e:	6859      	ldr	r1, [r3, #4]
  40f360:	f021 0103 	bic.w	r1, r1, #3
  40f364:	1b8a      	subs	r2, r1, r6
  40f366:	2a0f      	cmp	r2, #15
  40f368:	ddf2      	ble.n	40f350 <_malloc_r+0xf8>
  40f36a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40f36e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40f372:	9300      	str	r3, [sp, #0]
  40f374:	199c      	adds	r4, r3, r6
  40f376:	4628      	mov	r0, r5
  40f378:	f046 0601 	orr.w	r6, r6, #1
  40f37c:	f042 0501 	orr.w	r5, r2, #1
  40f380:	605e      	str	r6, [r3, #4]
  40f382:	f8c8 c00c 	str.w	ip, [r8, #12]
  40f386:	f8cc 8008 	str.w	r8, [ip, #8]
  40f38a:	617c      	str	r4, [r7, #20]
  40f38c:	613c      	str	r4, [r7, #16]
  40f38e:	f8c4 e00c 	str.w	lr, [r4, #12]
  40f392:	f8c4 e008 	str.w	lr, [r4, #8]
  40f396:	6065      	str	r5, [r4, #4]
  40f398:	505a      	str	r2, [r3, r1]
  40f39a:	f000 fbb3 	bl	40fb04 <__malloc_unlock>
  40f39e:	9b00      	ldr	r3, [sp, #0]
  40f3a0:	f103 0408 	add.w	r4, r3, #8
  40f3a4:	e01e      	b.n	40f3e4 <_malloc_r+0x18c>
  40f3a6:	2910      	cmp	r1, #16
  40f3a8:	d820      	bhi.n	40f3ec <_malloc_r+0x194>
  40f3aa:	f000 fba5 	bl	40faf8 <__malloc_lock>
  40f3ae:	2610      	movs	r6, #16
  40f3b0:	2318      	movs	r3, #24
  40f3b2:	2002      	movs	r0, #2
  40f3b4:	4f79      	ldr	r7, [pc, #484]	; (40f59c <_malloc_r+0x344>)
  40f3b6:	443b      	add	r3, r7
  40f3b8:	f1a3 0208 	sub.w	r2, r3, #8
  40f3bc:	685c      	ldr	r4, [r3, #4]
  40f3be:	4294      	cmp	r4, r2
  40f3c0:	f000 813d 	beq.w	40f63e <_malloc_r+0x3e6>
  40f3c4:	6863      	ldr	r3, [r4, #4]
  40f3c6:	68e1      	ldr	r1, [r4, #12]
  40f3c8:	68a6      	ldr	r6, [r4, #8]
  40f3ca:	f023 0303 	bic.w	r3, r3, #3
  40f3ce:	4423      	add	r3, r4
  40f3d0:	4628      	mov	r0, r5
  40f3d2:	685a      	ldr	r2, [r3, #4]
  40f3d4:	60f1      	str	r1, [r6, #12]
  40f3d6:	f042 0201 	orr.w	r2, r2, #1
  40f3da:	608e      	str	r6, [r1, #8]
  40f3dc:	605a      	str	r2, [r3, #4]
  40f3de:	f000 fb91 	bl	40fb04 <__malloc_unlock>
  40f3e2:	3408      	adds	r4, #8
  40f3e4:	4620      	mov	r0, r4
  40f3e6:	b003      	add	sp, #12
  40f3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f3ec:	2400      	movs	r4, #0
  40f3ee:	230c      	movs	r3, #12
  40f3f0:	4620      	mov	r0, r4
  40f3f2:	602b      	str	r3, [r5, #0]
  40f3f4:	b003      	add	sp, #12
  40f3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f3fa:	2040      	movs	r0, #64	; 0x40
  40f3fc:	f44f 7300 	mov.w	r3, #512	; 0x200
  40f400:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40f404:	e74a      	b.n	40f29c <_malloc_r+0x44>
  40f406:	4423      	add	r3, r4
  40f408:	68e1      	ldr	r1, [r4, #12]
  40f40a:	685a      	ldr	r2, [r3, #4]
  40f40c:	68a6      	ldr	r6, [r4, #8]
  40f40e:	f042 0201 	orr.w	r2, r2, #1
  40f412:	60f1      	str	r1, [r6, #12]
  40f414:	4628      	mov	r0, r5
  40f416:	608e      	str	r6, [r1, #8]
  40f418:	605a      	str	r2, [r3, #4]
  40f41a:	f000 fb73 	bl	40fb04 <__malloc_unlock>
  40f41e:	3408      	adds	r4, #8
  40f420:	4620      	mov	r0, r4
  40f422:	b003      	add	sp, #12
  40f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f428:	4423      	add	r3, r4
  40f42a:	4628      	mov	r0, r5
  40f42c:	685a      	ldr	r2, [r3, #4]
  40f42e:	f042 0201 	orr.w	r2, r2, #1
  40f432:	605a      	str	r2, [r3, #4]
  40f434:	f000 fb66 	bl	40fb04 <__malloc_unlock>
  40f438:	3408      	adds	r4, #8
  40f43a:	4620      	mov	r0, r4
  40f43c:	b003      	add	sp, #12
  40f43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f442:	68bc      	ldr	r4, [r7, #8]
  40f444:	6863      	ldr	r3, [r4, #4]
  40f446:	f023 0803 	bic.w	r8, r3, #3
  40f44a:	45b0      	cmp	r8, r6
  40f44c:	d304      	bcc.n	40f458 <_malloc_r+0x200>
  40f44e:	eba8 0306 	sub.w	r3, r8, r6
  40f452:	2b0f      	cmp	r3, #15
  40f454:	f300 8085 	bgt.w	40f562 <_malloc_r+0x30a>
  40f458:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40f5b4 <_malloc_r+0x35c>
  40f45c:	4b50      	ldr	r3, [pc, #320]	; (40f5a0 <_malloc_r+0x348>)
  40f45e:	f8d9 2000 	ldr.w	r2, [r9]
  40f462:	681b      	ldr	r3, [r3, #0]
  40f464:	3201      	adds	r2, #1
  40f466:	4433      	add	r3, r6
  40f468:	eb04 0a08 	add.w	sl, r4, r8
  40f46c:	f000 8155 	beq.w	40f71a <_malloc_r+0x4c2>
  40f470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40f474:	330f      	adds	r3, #15
  40f476:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40f47a:	f02b 0b0f 	bic.w	fp, fp, #15
  40f47e:	4659      	mov	r1, fp
  40f480:	4628      	mov	r0, r5
  40f482:	f000 fceb 	bl	40fe5c <_sbrk_r>
  40f486:	1c41      	adds	r1, r0, #1
  40f488:	4602      	mov	r2, r0
  40f48a:	f000 80fc 	beq.w	40f686 <_malloc_r+0x42e>
  40f48e:	4582      	cmp	sl, r0
  40f490:	f200 80f7 	bhi.w	40f682 <_malloc_r+0x42a>
  40f494:	4b43      	ldr	r3, [pc, #268]	; (40f5a4 <_malloc_r+0x34c>)
  40f496:	6819      	ldr	r1, [r3, #0]
  40f498:	4459      	add	r1, fp
  40f49a:	6019      	str	r1, [r3, #0]
  40f49c:	f000 814d 	beq.w	40f73a <_malloc_r+0x4e2>
  40f4a0:	f8d9 0000 	ldr.w	r0, [r9]
  40f4a4:	3001      	adds	r0, #1
  40f4a6:	bf1b      	ittet	ne
  40f4a8:	eba2 0a0a 	subne.w	sl, r2, sl
  40f4ac:	4451      	addne	r1, sl
  40f4ae:	f8c9 2000 	streq.w	r2, [r9]
  40f4b2:	6019      	strne	r1, [r3, #0]
  40f4b4:	f012 0107 	ands.w	r1, r2, #7
  40f4b8:	f000 8115 	beq.w	40f6e6 <_malloc_r+0x48e>
  40f4bc:	f1c1 0008 	rsb	r0, r1, #8
  40f4c0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40f4c4:	4402      	add	r2, r0
  40f4c6:	3108      	adds	r1, #8
  40f4c8:	eb02 090b 	add.w	r9, r2, fp
  40f4cc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40f4d0:	eba1 0909 	sub.w	r9, r1, r9
  40f4d4:	4649      	mov	r1, r9
  40f4d6:	4628      	mov	r0, r5
  40f4d8:	9301      	str	r3, [sp, #4]
  40f4da:	9200      	str	r2, [sp, #0]
  40f4dc:	f000 fcbe 	bl	40fe5c <_sbrk_r>
  40f4e0:	1c43      	adds	r3, r0, #1
  40f4e2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40f4e6:	f000 8143 	beq.w	40f770 <_malloc_r+0x518>
  40f4ea:	1a80      	subs	r0, r0, r2
  40f4ec:	4448      	add	r0, r9
  40f4ee:	f040 0001 	orr.w	r0, r0, #1
  40f4f2:	6819      	ldr	r1, [r3, #0]
  40f4f4:	60ba      	str	r2, [r7, #8]
  40f4f6:	4449      	add	r1, r9
  40f4f8:	42bc      	cmp	r4, r7
  40f4fa:	6050      	str	r0, [r2, #4]
  40f4fc:	6019      	str	r1, [r3, #0]
  40f4fe:	d017      	beq.n	40f530 <_malloc_r+0x2d8>
  40f500:	f1b8 0f0f 	cmp.w	r8, #15
  40f504:	f240 80fb 	bls.w	40f6fe <_malloc_r+0x4a6>
  40f508:	6860      	ldr	r0, [r4, #4]
  40f50a:	f1a8 020c 	sub.w	r2, r8, #12
  40f50e:	f022 0207 	bic.w	r2, r2, #7
  40f512:	eb04 0e02 	add.w	lr, r4, r2
  40f516:	f000 0001 	and.w	r0, r0, #1
  40f51a:	f04f 0c05 	mov.w	ip, #5
  40f51e:	4310      	orrs	r0, r2
  40f520:	2a0f      	cmp	r2, #15
  40f522:	6060      	str	r0, [r4, #4]
  40f524:	f8ce c004 	str.w	ip, [lr, #4]
  40f528:	f8ce c008 	str.w	ip, [lr, #8]
  40f52c:	f200 8117 	bhi.w	40f75e <_malloc_r+0x506>
  40f530:	4b1d      	ldr	r3, [pc, #116]	; (40f5a8 <_malloc_r+0x350>)
  40f532:	68bc      	ldr	r4, [r7, #8]
  40f534:	681a      	ldr	r2, [r3, #0]
  40f536:	4291      	cmp	r1, r2
  40f538:	bf88      	it	hi
  40f53a:	6019      	strhi	r1, [r3, #0]
  40f53c:	4b1b      	ldr	r3, [pc, #108]	; (40f5ac <_malloc_r+0x354>)
  40f53e:	681a      	ldr	r2, [r3, #0]
  40f540:	4291      	cmp	r1, r2
  40f542:	6862      	ldr	r2, [r4, #4]
  40f544:	bf88      	it	hi
  40f546:	6019      	strhi	r1, [r3, #0]
  40f548:	f022 0203 	bic.w	r2, r2, #3
  40f54c:	4296      	cmp	r6, r2
  40f54e:	eba2 0306 	sub.w	r3, r2, r6
  40f552:	d801      	bhi.n	40f558 <_malloc_r+0x300>
  40f554:	2b0f      	cmp	r3, #15
  40f556:	dc04      	bgt.n	40f562 <_malloc_r+0x30a>
  40f558:	4628      	mov	r0, r5
  40f55a:	f000 fad3 	bl	40fb04 <__malloc_unlock>
  40f55e:	2400      	movs	r4, #0
  40f560:	e740      	b.n	40f3e4 <_malloc_r+0x18c>
  40f562:	19a2      	adds	r2, r4, r6
  40f564:	f043 0301 	orr.w	r3, r3, #1
  40f568:	f046 0601 	orr.w	r6, r6, #1
  40f56c:	6066      	str	r6, [r4, #4]
  40f56e:	4628      	mov	r0, r5
  40f570:	60ba      	str	r2, [r7, #8]
  40f572:	6053      	str	r3, [r2, #4]
  40f574:	f000 fac6 	bl	40fb04 <__malloc_unlock>
  40f578:	3408      	adds	r4, #8
  40f57a:	4620      	mov	r0, r4
  40f57c:	b003      	add	sp, #12
  40f57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f582:	2b14      	cmp	r3, #20
  40f584:	d971      	bls.n	40f66a <_malloc_r+0x412>
  40f586:	2b54      	cmp	r3, #84	; 0x54
  40f588:	f200 80a3 	bhi.w	40f6d2 <_malloc_r+0x47a>
  40f58c:	0b33      	lsrs	r3, r6, #12
  40f58e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40f592:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40f596:	00c3      	lsls	r3, r0, #3
  40f598:	e680      	b.n	40f29c <_malloc_r+0x44>
  40f59a:	bf00      	nop
  40f59c:	20002948 	.word	0x20002948
  40f5a0:	200048cc 	.word	0x200048cc
  40f5a4:	2000489c 	.word	0x2000489c
  40f5a8:	200048c4 	.word	0x200048c4
  40f5ac:	200048c8 	.word	0x200048c8
  40f5b0:	20002950 	.word	0x20002950
  40f5b4:	20002d50 	.word	0x20002d50
  40f5b8:	0a5a      	lsrs	r2, r3, #9
  40f5ba:	2a04      	cmp	r2, #4
  40f5bc:	d95b      	bls.n	40f676 <_malloc_r+0x41e>
  40f5be:	2a14      	cmp	r2, #20
  40f5c0:	f200 80ae 	bhi.w	40f720 <_malloc_r+0x4c8>
  40f5c4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40f5c8:	00c9      	lsls	r1, r1, #3
  40f5ca:	325b      	adds	r2, #91	; 0x5b
  40f5cc:	eb07 0c01 	add.w	ip, r7, r1
  40f5d0:	5879      	ldr	r1, [r7, r1]
  40f5d2:	f1ac 0c08 	sub.w	ip, ip, #8
  40f5d6:	458c      	cmp	ip, r1
  40f5d8:	f000 8088 	beq.w	40f6ec <_malloc_r+0x494>
  40f5dc:	684a      	ldr	r2, [r1, #4]
  40f5de:	f022 0203 	bic.w	r2, r2, #3
  40f5e2:	4293      	cmp	r3, r2
  40f5e4:	d273      	bcs.n	40f6ce <_malloc_r+0x476>
  40f5e6:	6889      	ldr	r1, [r1, #8]
  40f5e8:	458c      	cmp	ip, r1
  40f5ea:	d1f7      	bne.n	40f5dc <_malloc_r+0x384>
  40f5ec:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40f5f0:	687b      	ldr	r3, [r7, #4]
  40f5f2:	60e2      	str	r2, [r4, #12]
  40f5f4:	f8c4 c008 	str.w	ip, [r4, #8]
  40f5f8:	6094      	str	r4, [r2, #8]
  40f5fa:	f8cc 400c 	str.w	r4, [ip, #12]
  40f5fe:	e68f      	b.n	40f320 <_malloc_r+0xc8>
  40f600:	19a1      	adds	r1, r4, r6
  40f602:	f046 0c01 	orr.w	ip, r6, #1
  40f606:	f042 0601 	orr.w	r6, r2, #1
  40f60a:	f8c4 c004 	str.w	ip, [r4, #4]
  40f60e:	4628      	mov	r0, r5
  40f610:	6179      	str	r1, [r7, #20]
  40f612:	6139      	str	r1, [r7, #16]
  40f614:	f8c1 e00c 	str.w	lr, [r1, #12]
  40f618:	f8c1 e008 	str.w	lr, [r1, #8]
  40f61c:	604e      	str	r6, [r1, #4]
  40f61e:	50e2      	str	r2, [r4, r3]
  40f620:	f000 fa70 	bl	40fb04 <__malloc_unlock>
  40f624:	3408      	adds	r4, #8
  40f626:	e6dd      	b.n	40f3e4 <_malloc_r+0x18c>
  40f628:	687b      	ldr	r3, [r7, #4]
  40f62a:	e679      	b.n	40f320 <_malloc_r+0xc8>
  40f62c:	f108 0801 	add.w	r8, r8, #1
  40f630:	f018 0f03 	tst.w	r8, #3
  40f634:	f10c 0c08 	add.w	ip, ip, #8
  40f638:	f47f ae85 	bne.w	40f346 <_malloc_r+0xee>
  40f63c:	e02d      	b.n	40f69a <_malloc_r+0x442>
  40f63e:	68dc      	ldr	r4, [r3, #12]
  40f640:	42a3      	cmp	r3, r4
  40f642:	bf08      	it	eq
  40f644:	3002      	addeq	r0, #2
  40f646:	f43f ae3e 	beq.w	40f2c6 <_malloc_r+0x6e>
  40f64a:	e6bb      	b.n	40f3c4 <_malloc_r+0x16c>
  40f64c:	4419      	add	r1, r3
  40f64e:	461c      	mov	r4, r3
  40f650:	684a      	ldr	r2, [r1, #4]
  40f652:	68db      	ldr	r3, [r3, #12]
  40f654:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40f658:	f042 0201 	orr.w	r2, r2, #1
  40f65c:	604a      	str	r2, [r1, #4]
  40f65e:	4628      	mov	r0, r5
  40f660:	60f3      	str	r3, [r6, #12]
  40f662:	609e      	str	r6, [r3, #8]
  40f664:	f000 fa4e 	bl	40fb04 <__malloc_unlock>
  40f668:	e6bc      	b.n	40f3e4 <_malloc_r+0x18c>
  40f66a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40f66e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40f672:	00c3      	lsls	r3, r0, #3
  40f674:	e612      	b.n	40f29c <_malloc_r+0x44>
  40f676:	099a      	lsrs	r2, r3, #6
  40f678:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40f67c:	00c9      	lsls	r1, r1, #3
  40f67e:	3238      	adds	r2, #56	; 0x38
  40f680:	e7a4      	b.n	40f5cc <_malloc_r+0x374>
  40f682:	42bc      	cmp	r4, r7
  40f684:	d054      	beq.n	40f730 <_malloc_r+0x4d8>
  40f686:	68bc      	ldr	r4, [r7, #8]
  40f688:	6862      	ldr	r2, [r4, #4]
  40f68a:	f022 0203 	bic.w	r2, r2, #3
  40f68e:	e75d      	b.n	40f54c <_malloc_r+0x2f4>
  40f690:	f859 3908 	ldr.w	r3, [r9], #-8
  40f694:	4599      	cmp	r9, r3
  40f696:	f040 8086 	bne.w	40f7a6 <_malloc_r+0x54e>
  40f69a:	f010 0f03 	tst.w	r0, #3
  40f69e:	f100 30ff 	add.w	r0, r0, #4294967295
  40f6a2:	d1f5      	bne.n	40f690 <_malloc_r+0x438>
  40f6a4:	687b      	ldr	r3, [r7, #4]
  40f6a6:	ea23 0304 	bic.w	r3, r3, r4
  40f6aa:	607b      	str	r3, [r7, #4]
  40f6ac:	0064      	lsls	r4, r4, #1
  40f6ae:	429c      	cmp	r4, r3
  40f6b0:	f63f aec7 	bhi.w	40f442 <_malloc_r+0x1ea>
  40f6b4:	2c00      	cmp	r4, #0
  40f6b6:	f43f aec4 	beq.w	40f442 <_malloc_r+0x1ea>
  40f6ba:	421c      	tst	r4, r3
  40f6bc:	4640      	mov	r0, r8
  40f6be:	f47f ae3e 	bne.w	40f33e <_malloc_r+0xe6>
  40f6c2:	0064      	lsls	r4, r4, #1
  40f6c4:	421c      	tst	r4, r3
  40f6c6:	f100 0004 	add.w	r0, r0, #4
  40f6ca:	d0fa      	beq.n	40f6c2 <_malloc_r+0x46a>
  40f6cc:	e637      	b.n	40f33e <_malloc_r+0xe6>
  40f6ce:	468c      	mov	ip, r1
  40f6d0:	e78c      	b.n	40f5ec <_malloc_r+0x394>
  40f6d2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40f6d6:	d815      	bhi.n	40f704 <_malloc_r+0x4ac>
  40f6d8:	0bf3      	lsrs	r3, r6, #15
  40f6da:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40f6de:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40f6e2:	00c3      	lsls	r3, r0, #3
  40f6e4:	e5da      	b.n	40f29c <_malloc_r+0x44>
  40f6e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40f6ea:	e6ed      	b.n	40f4c8 <_malloc_r+0x270>
  40f6ec:	687b      	ldr	r3, [r7, #4]
  40f6ee:	1092      	asrs	r2, r2, #2
  40f6f0:	2101      	movs	r1, #1
  40f6f2:	fa01 f202 	lsl.w	r2, r1, r2
  40f6f6:	4313      	orrs	r3, r2
  40f6f8:	607b      	str	r3, [r7, #4]
  40f6fa:	4662      	mov	r2, ip
  40f6fc:	e779      	b.n	40f5f2 <_malloc_r+0x39a>
  40f6fe:	2301      	movs	r3, #1
  40f700:	6053      	str	r3, [r2, #4]
  40f702:	e729      	b.n	40f558 <_malloc_r+0x300>
  40f704:	f240 5254 	movw	r2, #1364	; 0x554
  40f708:	4293      	cmp	r3, r2
  40f70a:	d822      	bhi.n	40f752 <_malloc_r+0x4fa>
  40f70c:	0cb3      	lsrs	r3, r6, #18
  40f70e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40f712:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40f716:	00c3      	lsls	r3, r0, #3
  40f718:	e5c0      	b.n	40f29c <_malloc_r+0x44>
  40f71a:	f103 0b10 	add.w	fp, r3, #16
  40f71e:	e6ae      	b.n	40f47e <_malloc_r+0x226>
  40f720:	2a54      	cmp	r2, #84	; 0x54
  40f722:	d829      	bhi.n	40f778 <_malloc_r+0x520>
  40f724:	0b1a      	lsrs	r2, r3, #12
  40f726:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40f72a:	00c9      	lsls	r1, r1, #3
  40f72c:	326e      	adds	r2, #110	; 0x6e
  40f72e:	e74d      	b.n	40f5cc <_malloc_r+0x374>
  40f730:	4b20      	ldr	r3, [pc, #128]	; (40f7b4 <_malloc_r+0x55c>)
  40f732:	6819      	ldr	r1, [r3, #0]
  40f734:	4459      	add	r1, fp
  40f736:	6019      	str	r1, [r3, #0]
  40f738:	e6b2      	b.n	40f4a0 <_malloc_r+0x248>
  40f73a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40f73e:	2800      	cmp	r0, #0
  40f740:	f47f aeae 	bne.w	40f4a0 <_malloc_r+0x248>
  40f744:	eb08 030b 	add.w	r3, r8, fp
  40f748:	68ba      	ldr	r2, [r7, #8]
  40f74a:	f043 0301 	orr.w	r3, r3, #1
  40f74e:	6053      	str	r3, [r2, #4]
  40f750:	e6ee      	b.n	40f530 <_malloc_r+0x2d8>
  40f752:	207f      	movs	r0, #127	; 0x7f
  40f754:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40f758:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40f75c:	e59e      	b.n	40f29c <_malloc_r+0x44>
  40f75e:	f104 0108 	add.w	r1, r4, #8
  40f762:	4628      	mov	r0, r5
  40f764:	9300      	str	r3, [sp, #0]
  40f766:	f002 ff23 	bl	4125b0 <_free_r>
  40f76a:	9b00      	ldr	r3, [sp, #0]
  40f76c:	6819      	ldr	r1, [r3, #0]
  40f76e:	e6df      	b.n	40f530 <_malloc_r+0x2d8>
  40f770:	2001      	movs	r0, #1
  40f772:	f04f 0900 	mov.w	r9, #0
  40f776:	e6bc      	b.n	40f4f2 <_malloc_r+0x29a>
  40f778:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40f77c:	d805      	bhi.n	40f78a <_malloc_r+0x532>
  40f77e:	0bda      	lsrs	r2, r3, #15
  40f780:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40f784:	00c9      	lsls	r1, r1, #3
  40f786:	3277      	adds	r2, #119	; 0x77
  40f788:	e720      	b.n	40f5cc <_malloc_r+0x374>
  40f78a:	f240 5154 	movw	r1, #1364	; 0x554
  40f78e:	428a      	cmp	r2, r1
  40f790:	d805      	bhi.n	40f79e <_malloc_r+0x546>
  40f792:	0c9a      	lsrs	r2, r3, #18
  40f794:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40f798:	00c9      	lsls	r1, r1, #3
  40f79a:	327c      	adds	r2, #124	; 0x7c
  40f79c:	e716      	b.n	40f5cc <_malloc_r+0x374>
  40f79e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40f7a2:	227e      	movs	r2, #126	; 0x7e
  40f7a4:	e712      	b.n	40f5cc <_malloc_r+0x374>
  40f7a6:	687b      	ldr	r3, [r7, #4]
  40f7a8:	e780      	b.n	40f6ac <_malloc_r+0x454>
  40f7aa:	08f0      	lsrs	r0, r6, #3
  40f7ac:	f106 0308 	add.w	r3, r6, #8
  40f7b0:	e600      	b.n	40f3b4 <_malloc_r+0x15c>
  40f7b2:	bf00      	nop
  40f7b4:	2000489c 	.word	0x2000489c
	...

0040f7c0 <memchr>:
  40f7c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40f7c4:	2a10      	cmp	r2, #16
  40f7c6:	db2b      	blt.n	40f820 <memchr+0x60>
  40f7c8:	f010 0f07 	tst.w	r0, #7
  40f7cc:	d008      	beq.n	40f7e0 <memchr+0x20>
  40f7ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  40f7d2:	3a01      	subs	r2, #1
  40f7d4:	428b      	cmp	r3, r1
  40f7d6:	d02d      	beq.n	40f834 <memchr+0x74>
  40f7d8:	f010 0f07 	tst.w	r0, #7
  40f7dc:	b342      	cbz	r2, 40f830 <memchr+0x70>
  40f7de:	d1f6      	bne.n	40f7ce <memchr+0xe>
  40f7e0:	b4f0      	push	{r4, r5, r6, r7}
  40f7e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40f7e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40f7ea:	f022 0407 	bic.w	r4, r2, #7
  40f7ee:	f07f 0700 	mvns.w	r7, #0
  40f7f2:	2300      	movs	r3, #0
  40f7f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40f7f8:	3c08      	subs	r4, #8
  40f7fa:	ea85 0501 	eor.w	r5, r5, r1
  40f7fe:	ea86 0601 	eor.w	r6, r6, r1
  40f802:	fa85 f547 	uadd8	r5, r5, r7
  40f806:	faa3 f587 	sel	r5, r3, r7
  40f80a:	fa86 f647 	uadd8	r6, r6, r7
  40f80e:	faa5 f687 	sel	r6, r5, r7
  40f812:	b98e      	cbnz	r6, 40f838 <memchr+0x78>
  40f814:	d1ee      	bne.n	40f7f4 <memchr+0x34>
  40f816:	bcf0      	pop	{r4, r5, r6, r7}
  40f818:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40f81c:	f002 0207 	and.w	r2, r2, #7
  40f820:	b132      	cbz	r2, 40f830 <memchr+0x70>
  40f822:	f810 3b01 	ldrb.w	r3, [r0], #1
  40f826:	3a01      	subs	r2, #1
  40f828:	ea83 0301 	eor.w	r3, r3, r1
  40f82c:	b113      	cbz	r3, 40f834 <memchr+0x74>
  40f82e:	d1f8      	bne.n	40f822 <memchr+0x62>
  40f830:	2000      	movs	r0, #0
  40f832:	4770      	bx	lr
  40f834:	3801      	subs	r0, #1
  40f836:	4770      	bx	lr
  40f838:	2d00      	cmp	r5, #0
  40f83a:	bf06      	itte	eq
  40f83c:	4635      	moveq	r5, r6
  40f83e:	3803      	subeq	r0, #3
  40f840:	3807      	subne	r0, #7
  40f842:	f015 0f01 	tst.w	r5, #1
  40f846:	d107      	bne.n	40f858 <memchr+0x98>
  40f848:	3001      	adds	r0, #1
  40f84a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40f84e:	bf02      	ittt	eq
  40f850:	3001      	addeq	r0, #1
  40f852:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40f856:	3001      	addeq	r0, #1
  40f858:	bcf0      	pop	{r4, r5, r6, r7}
  40f85a:	3801      	subs	r0, #1
  40f85c:	4770      	bx	lr
  40f85e:	bf00      	nop

0040f860 <memcpy>:
  40f860:	4684      	mov	ip, r0
  40f862:	ea41 0300 	orr.w	r3, r1, r0
  40f866:	f013 0303 	ands.w	r3, r3, #3
  40f86a:	d16d      	bne.n	40f948 <memcpy+0xe8>
  40f86c:	3a40      	subs	r2, #64	; 0x40
  40f86e:	d341      	bcc.n	40f8f4 <memcpy+0x94>
  40f870:	f851 3b04 	ldr.w	r3, [r1], #4
  40f874:	f840 3b04 	str.w	r3, [r0], #4
  40f878:	f851 3b04 	ldr.w	r3, [r1], #4
  40f87c:	f840 3b04 	str.w	r3, [r0], #4
  40f880:	f851 3b04 	ldr.w	r3, [r1], #4
  40f884:	f840 3b04 	str.w	r3, [r0], #4
  40f888:	f851 3b04 	ldr.w	r3, [r1], #4
  40f88c:	f840 3b04 	str.w	r3, [r0], #4
  40f890:	f851 3b04 	ldr.w	r3, [r1], #4
  40f894:	f840 3b04 	str.w	r3, [r0], #4
  40f898:	f851 3b04 	ldr.w	r3, [r1], #4
  40f89c:	f840 3b04 	str.w	r3, [r0], #4
  40f8a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8a4:	f840 3b04 	str.w	r3, [r0], #4
  40f8a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8ac:	f840 3b04 	str.w	r3, [r0], #4
  40f8b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8b4:	f840 3b04 	str.w	r3, [r0], #4
  40f8b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8bc:	f840 3b04 	str.w	r3, [r0], #4
  40f8c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8c4:	f840 3b04 	str.w	r3, [r0], #4
  40f8c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8cc:	f840 3b04 	str.w	r3, [r0], #4
  40f8d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8d4:	f840 3b04 	str.w	r3, [r0], #4
  40f8d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8dc:	f840 3b04 	str.w	r3, [r0], #4
  40f8e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8e4:	f840 3b04 	str.w	r3, [r0], #4
  40f8e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8ec:	f840 3b04 	str.w	r3, [r0], #4
  40f8f0:	3a40      	subs	r2, #64	; 0x40
  40f8f2:	d2bd      	bcs.n	40f870 <memcpy+0x10>
  40f8f4:	3230      	adds	r2, #48	; 0x30
  40f8f6:	d311      	bcc.n	40f91c <memcpy+0xbc>
  40f8f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40f8fc:	f840 3b04 	str.w	r3, [r0], #4
  40f900:	f851 3b04 	ldr.w	r3, [r1], #4
  40f904:	f840 3b04 	str.w	r3, [r0], #4
  40f908:	f851 3b04 	ldr.w	r3, [r1], #4
  40f90c:	f840 3b04 	str.w	r3, [r0], #4
  40f910:	f851 3b04 	ldr.w	r3, [r1], #4
  40f914:	f840 3b04 	str.w	r3, [r0], #4
  40f918:	3a10      	subs	r2, #16
  40f91a:	d2ed      	bcs.n	40f8f8 <memcpy+0x98>
  40f91c:	320c      	adds	r2, #12
  40f91e:	d305      	bcc.n	40f92c <memcpy+0xcc>
  40f920:	f851 3b04 	ldr.w	r3, [r1], #4
  40f924:	f840 3b04 	str.w	r3, [r0], #4
  40f928:	3a04      	subs	r2, #4
  40f92a:	d2f9      	bcs.n	40f920 <memcpy+0xc0>
  40f92c:	3204      	adds	r2, #4
  40f92e:	d008      	beq.n	40f942 <memcpy+0xe2>
  40f930:	07d2      	lsls	r2, r2, #31
  40f932:	bf1c      	itt	ne
  40f934:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40f938:	f800 3b01 	strbne.w	r3, [r0], #1
  40f93c:	d301      	bcc.n	40f942 <memcpy+0xe2>
  40f93e:	880b      	ldrh	r3, [r1, #0]
  40f940:	8003      	strh	r3, [r0, #0]
  40f942:	4660      	mov	r0, ip
  40f944:	4770      	bx	lr
  40f946:	bf00      	nop
  40f948:	2a08      	cmp	r2, #8
  40f94a:	d313      	bcc.n	40f974 <memcpy+0x114>
  40f94c:	078b      	lsls	r3, r1, #30
  40f94e:	d08d      	beq.n	40f86c <memcpy+0xc>
  40f950:	f010 0303 	ands.w	r3, r0, #3
  40f954:	d08a      	beq.n	40f86c <memcpy+0xc>
  40f956:	f1c3 0304 	rsb	r3, r3, #4
  40f95a:	1ad2      	subs	r2, r2, r3
  40f95c:	07db      	lsls	r3, r3, #31
  40f95e:	bf1c      	itt	ne
  40f960:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40f964:	f800 3b01 	strbne.w	r3, [r0], #1
  40f968:	d380      	bcc.n	40f86c <memcpy+0xc>
  40f96a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40f96e:	f820 3b02 	strh.w	r3, [r0], #2
  40f972:	e77b      	b.n	40f86c <memcpy+0xc>
  40f974:	3a04      	subs	r2, #4
  40f976:	d3d9      	bcc.n	40f92c <memcpy+0xcc>
  40f978:	3a01      	subs	r2, #1
  40f97a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40f97e:	f800 3b01 	strb.w	r3, [r0], #1
  40f982:	d2f9      	bcs.n	40f978 <memcpy+0x118>
  40f984:	780b      	ldrb	r3, [r1, #0]
  40f986:	7003      	strb	r3, [r0, #0]
  40f988:	784b      	ldrb	r3, [r1, #1]
  40f98a:	7043      	strb	r3, [r0, #1]
  40f98c:	788b      	ldrb	r3, [r1, #2]
  40f98e:	7083      	strb	r3, [r0, #2]
  40f990:	4660      	mov	r0, ip
  40f992:	4770      	bx	lr

0040f994 <memmove>:
  40f994:	4288      	cmp	r0, r1
  40f996:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f998:	d90d      	bls.n	40f9b6 <memmove+0x22>
  40f99a:	188b      	adds	r3, r1, r2
  40f99c:	4298      	cmp	r0, r3
  40f99e:	d20a      	bcs.n	40f9b6 <memmove+0x22>
  40f9a0:	1884      	adds	r4, r0, r2
  40f9a2:	2a00      	cmp	r2, #0
  40f9a4:	d051      	beq.n	40fa4a <memmove+0xb6>
  40f9a6:	4622      	mov	r2, r4
  40f9a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40f9ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40f9b0:	4299      	cmp	r1, r3
  40f9b2:	d1f9      	bne.n	40f9a8 <memmove+0x14>
  40f9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f9b6:	2a0f      	cmp	r2, #15
  40f9b8:	d948      	bls.n	40fa4c <memmove+0xb8>
  40f9ba:	ea41 0300 	orr.w	r3, r1, r0
  40f9be:	079b      	lsls	r3, r3, #30
  40f9c0:	d146      	bne.n	40fa50 <memmove+0xbc>
  40f9c2:	f100 0410 	add.w	r4, r0, #16
  40f9c6:	f101 0310 	add.w	r3, r1, #16
  40f9ca:	4615      	mov	r5, r2
  40f9cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40f9d0:	f844 6c10 	str.w	r6, [r4, #-16]
  40f9d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40f9d8:	f844 6c0c 	str.w	r6, [r4, #-12]
  40f9dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40f9e0:	f844 6c08 	str.w	r6, [r4, #-8]
  40f9e4:	3d10      	subs	r5, #16
  40f9e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40f9ea:	f844 6c04 	str.w	r6, [r4, #-4]
  40f9ee:	2d0f      	cmp	r5, #15
  40f9f0:	f103 0310 	add.w	r3, r3, #16
  40f9f4:	f104 0410 	add.w	r4, r4, #16
  40f9f8:	d8e8      	bhi.n	40f9cc <memmove+0x38>
  40f9fa:	f1a2 0310 	sub.w	r3, r2, #16
  40f9fe:	f023 030f 	bic.w	r3, r3, #15
  40fa02:	f002 0e0f 	and.w	lr, r2, #15
  40fa06:	3310      	adds	r3, #16
  40fa08:	f1be 0f03 	cmp.w	lr, #3
  40fa0c:	4419      	add	r1, r3
  40fa0e:	4403      	add	r3, r0
  40fa10:	d921      	bls.n	40fa56 <memmove+0xc2>
  40fa12:	1f1e      	subs	r6, r3, #4
  40fa14:	460d      	mov	r5, r1
  40fa16:	4674      	mov	r4, lr
  40fa18:	3c04      	subs	r4, #4
  40fa1a:	f855 7b04 	ldr.w	r7, [r5], #4
  40fa1e:	f846 7f04 	str.w	r7, [r6, #4]!
  40fa22:	2c03      	cmp	r4, #3
  40fa24:	d8f8      	bhi.n	40fa18 <memmove+0x84>
  40fa26:	f1ae 0404 	sub.w	r4, lr, #4
  40fa2a:	f024 0403 	bic.w	r4, r4, #3
  40fa2e:	3404      	adds	r4, #4
  40fa30:	4421      	add	r1, r4
  40fa32:	4423      	add	r3, r4
  40fa34:	f002 0203 	and.w	r2, r2, #3
  40fa38:	b162      	cbz	r2, 40fa54 <memmove+0xc0>
  40fa3a:	3b01      	subs	r3, #1
  40fa3c:	440a      	add	r2, r1
  40fa3e:	f811 4b01 	ldrb.w	r4, [r1], #1
  40fa42:	f803 4f01 	strb.w	r4, [r3, #1]!
  40fa46:	428a      	cmp	r2, r1
  40fa48:	d1f9      	bne.n	40fa3e <memmove+0xaa>
  40fa4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40fa4c:	4603      	mov	r3, r0
  40fa4e:	e7f3      	b.n	40fa38 <memmove+0xa4>
  40fa50:	4603      	mov	r3, r0
  40fa52:	e7f2      	b.n	40fa3a <memmove+0xa6>
  40fa54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40fa56:	4672      	mov	r2, lr
  40fa58:	e7ee      	b.n	40fa38 <memmove+0xa4>
  40fa5a:	bf00      	nop

0040fa5c <memset>:
  40fa5c:	b470      	push	{r4, r5, r6}
  40fa5e:	0786      	lsls	r6, r0, #30
  40fa60:	d046      	beq.n	40faf0 <memset+0x94>
  40fa62:	1e54      	subs	r4, r2, #1
  40fa64:	2a00      	cmp	r2, #0
  40fa66:	d041      	beq.n	40faec <memset+0x90>
  40fa68:	b2ca      	uxtb	r2, r1
  40fa6a:	4603      	mov	r3, r0
  40fa6c:	e002      	b.n	40fa74 <memset+0x18>
  40fa6e:	f114 34ff 	adds.w	r4, r4, #4294967295
  40fa72:	d33b      	bcc.n	40faec <memset+0x90>
  40fa74:	f803 2b01 	strb.w	r2, [r3], #1
  40fa78:	079d      	lsls	r5, r3, #30
  40fa7a:	d1f8      	bne.n	40fa6e <memset+0x12>
  40fa7c:	2c03      	cmp	r4, #3
  40fa7e:	d92e      	bls.n	40fade <memset+0x82>
  40fa80:	b2cd      	uxtb	r5, r1
  40fa82:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40fa86:	2c0f      	cmp	r4, #15
  40fa88:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40fa8c:	d919      	bls.n	40fac2 <memset+0x66>
  40fa8e:	f103 0210 	add.w	r2, r3, #16
  40fa92:	4626      	mov	r6, r4
  40fa94:	3e10      	subs	r6, #16
  40fa96:	2e0f      	cmp	r6, #15
  40fa98:	f842 5c10 	str.w	r5, [r2, #-16]
  40fa9c:	f842 5c0c 	str.w	r5, [r2, #-12]
  40faa0:	f842 5c08 	str.w	r5, [r2, #-8]
  40faa4:	f842 5c04 	str.w	r5, [r2, #-4]
  40faa8:	f102 0210 	add.w	r2, r2, #16
  40faac:	d8f2      	bhi.n	40fa94 <memset+0x38>
  40faae:	f1a4 0210 	sub.w	r2, r4, #16
  40fab2:	f022 020f 	bic.w	r2, r2, #15
  40fab6:	f004 040f 	and.w	r4, r4, #15
  40faba:	3210      	adds	r2, #16
  40fabc:	2c03      	cmp	r4, #3
  40fabe:	4413      	add	r3, r2
  40fac0:	d90d      	bls.n	40fade <memset+0x82>
  40fac2:	461e      	mov	r6, r3
  40fac4:	4622      	mov	r2, r4
  40fac6:	3a04      	subs	r2, #4
  40fac8:	2a03      	cmp	r2, #3
  40faca:	f846 5b04 	str.w	r5, [r6], #4
  40face:	d8fa      	bhi.n	40fac6 <memset+0x6a>
  40fad0:	1f22      	subs	r2, r4, #4
  40fad2:	f022 0203 	bic.w	r2, r2, #3
  40fad6:	3204      	adds	r2, #4
  40fad8:	4413      	add	r3, r2
  40fada:	f004 0403 	and.w	r4, r4, #3
  40fade:	b12c      	cbz	r4, 40faec <memset+0x90>
  40fae0:	b2c9      	uxtb	r1, r1
  40fae2:	441c      	add	r4, r3
  40fae4:	f803 1b01 	strb.w	r1, [r3], #1
  40fae8:	429c      	cmp	r4, r3
  40faea:	d1fb      	bne.n	40fae4 <memset+0x88>
  40faec:	bc70      	pop	{r4, r5, r6}
  40faee:	4770      	bx	lr
  40faf0:	4614      	mov	r4, r2
  40faf2:	4603      	mov	r3, r0
  40faf4:	e7c2      	b.n	40fa7c <memset+0x20>
  40faf6:	bf00      	nop

0040faf8 <__malloc_lock>:
  40faf8:	4801      	ldr	r0, [pc, #4]	; (40fb00 <__malloc_lock+0x8>)
  40fafa:	f7ff bba9 	b.w	40f250 <__retarget_lock_acquire_recursive>
  40fafe:	bf00      	nop
  40fb00:	200052d0 	.word	0x200052d0

0040fb04 <__malloc_unlock>:
  40fb04:	4801      	ldr	r0, [pc, #4]	; (40fb0c <__malloc_unlock+0x8>)
  40fb06:	f7ff bba5 	b.w	40f254 <__retarget_lock_release_recursive>
  40fb0a:	bf00      	nop
  40fb0c:	200052d0 	.word	0x200052d0

0040fb10 <_realloc_r>:
  40fb10:	2900      	cmp	r1, #0
  40fb12:	f000 8095 	beq.w	40fc40 <_realloc_r+0x130>
  40fb16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fb1a:	460d      	mov	r5, r1
  40fb1c:	4616      	mov	r6, r2
  40fb1e:	b083      	sub	sp, #12
  40fb20:	4680      	mov	r8, r0
  40fb22:	f106 070b 	add.w	r7, r6, #11
  40fb26:	f7ff ffe7 	bl	40faf8 <__malloc_lock>
  40fb2a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40fb2e:	2f16      	cmp	r7, #22
  40fb30:	f02e 0403 	bic.w	r4, lr, #3
  40fb34:	f1a5 0908 	sub.w	r9, r5, #8
  40fb38:	d83c      	bhi.n	40fbb4 <_realloc_r+0xa4>
  40fb3a:	2210      	movs	r2, #16
  40fb3c:	4617      	mov	r7, r2
  40fb3e:	42be      	cmp	r6, r7
  40fb40:	d83d      	bhi.n	40fbbe <_realloc_r+0xae>
  40fb42:	4294      	cmp	r4, r2
  40fb44:	da43      	bge.n	40fbce <_realloc_r+0xbe>
  40fb46:	4bc4      	ldr	r3, [pc, #784]	; (40fe58 <_realloc_r+0x348>)
  40fb48:	6899      	ldr	r1, [r3, #8]
  40fb4a:	eb09 0004 	add.w	r0, r9, r4
  40fb4e:	4288      	cmp	r0, r1
  40fb50:	f000 80b4 	beq.w	40fcbc <_realloc_r+0x1ac>
  40fb54:	6843      	ldr	r3, [r0, #4]
  40fb56:	f023 0101 	bic.w	r1, r3, #1
  40fb5a:	4401      	add	r1, r0
  40fb5c:	6849      	ldr	r1, [r1, #4]
  40fb5e:	07c9      	lsls	r1, r1, #31
  40fb60:	d54c      	bpl.n	40fbfc <_realloc_r+0xec>
  40fb62:	f01e 0f01 	tst.w	lr, #1
  40fb66:	f000 809b 	beq.w	40fca0 <_realloc_r+0x190>
  40fb6a:	4631      	mov	r1, r6
  40fb6c:	4640      	mov	r0, r8
  40fb6e:	f7ff fb73 	bl	40f258 <_malloc_r>
  40fb72:	4606      	mov	r6, r0
  40fb74:	2800      	cmp	r0, #0
  40fb76:	d03a      	beq.n	40fbee <_realloc_r+0xde>
  40fb78:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40fb7c:	f023 0301 	bic.w	r3, r3, #1
  40fb80:	444b      	add	r3, r9
  40fb82:	f1a0 0208 	sub.w	r2, r0, #8
  40fb86:	429a      	cmp	r2, r3
  40fb88:	f000 8121 	beq.w	40fdce <_realloc_r+0x2be>
  40fb8c:	1f22      	subs	r2, r4, #4
  40fb8e:	2a24      	cmp	r2, #36	; 0x24
  40fb90:	f200 8107 	bhi.w	40fda2 <_realloc_r+0x292>
  40fb94:	2a13      	cmp	r2, #19
  40fb96:	f200 80db 	bhi.w	40fd50 <_realloc_r+0x240>
  40fb9a:	4603      	mov	r3, r0
  40fb9c:	462a      	mov	r2, r5
  40fb9e:	6811      	ldr	r1, [r2, #0]
  40fba0:	6019      	str	r1, [r3, #0]
  40fba2:	6851      	ldr	r1, [r2, #4]
  40fba4:	6059      	str	r1, [r3, #4]
  40fba6:	6892      	ldr	r2, [r2, #8]
  40fba8:	609a      	str	r2, [r3, #8]
  40fbaa:	4629      	mov	r1, r5
  40fbac:	4640      	mov	r0, r8
  40fbae:	f002 fcff 	bl	4125b0 <_free_r>
  40fbb2:	e01c      	b.n	40fbee <_realloc_r+0xde>
  40fbb4:	f027 0707 	bic.w	r7, r7, #7
  40fbb8:	2f00      	cmp	r7, #0
  40fbba:	463a      	mov	r2, r7
  40fbbc:	dabf      	bge.n	40fb3e <_realloc_r+0x2e>
  40fbbe:	2600      	movs	r6, #0
  40fbc0:	230c      	movs	r3, #12
  40fbc2:	4630      	mov	r0, r6
  40fbc4:	f8c8 3000 	str.w	r3, [r8]
  40fbc8:	b003      	add	sp, #12
  40fbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fbce:	462e      	mov	r6, r5
  40fbd0:	1be3      	subs	r3, r4, r7
  40fbd2:	2b0f      	cmp	r3, #15
  40fbd4:	d81e      	bhi.n	40fc14 <_realloc_r+0x104>
  40fbd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40fbda:	f003 0301 	and.w	r3, r3, #1
  40fbde:	4323      	orrs	r3, r4
  40fbe0:	444c      	add	r4, r9
  40fbe2:	f8c9 3004 	str.w	r3, [r9, #4]
  40fbe6:	6863      	ldr	r3, [r4, #4]
  40fbe8:	f043 0301 	orr.w	r3, r3, #1
  40fbec:	6063      	str	r3, [r4, #4]
  40fbee:	4640      	mov	r0, r8
  40fbf0:	f7ff ff88 	bl	40fb04 <__malloc_unlock>
  40fbf4:	4630      	mov	r0, r6
  40fbf6:	b003      	add	sp, #12
  40fbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fbfc:	f023 0303 	bic.w	r3, r3, #3
  40fc00:	18e1      	adds	r1, r4, r3
  40fc02:	4291      	cmp	r1, r2
  40fc04:	db1f      	blt.n	40fc46 <_realloc_r+0x136>
  40fc06:	68c3      	ldr	r3, [r0, #12]
  40fc08:	6882      	ldr	r2, [r0, #8]
  40fc0a:	462e      	mov	r6, r5
  40fc0c:	60d3      	str	r3, [r2, #12]
  40fc0e:	460c      	mov	r4, r1
  40fc10:	609a      	str	r2, [r3, #8]
  40fc12:	e7dd      	b.n	40fbd0 <_realloc_r+0xc0>
  40fc14:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40fc18:	eb09 0107 	add.w	r1, r9, r7
  40fc1c:	f002 0201 	and.w	r2, r2, #1
  40fc20:	444c      	add	r4, r9
  40fc22:	f043 0301 	orr.w	r3, r3, #1
  40fc26:	4317      	orrs	r7, r2
  40fc28:	f8c9 7004 	str.w	r7, [r9, #4]
  40fc2c:	604b      	str	r3, [r1, #4]
  40fc2e:	6863      	ldr	r3, [r4, #4]
  40fc30:	f043 0301 	orr.w	r3, r3, #1
  40fc34:	3108      	adds	r1, #8
  40fc36:	6063      	str	r3, [r4, #4]
  40fc38:	4640      	mov	r0, r8
  40fc3a:	f002 fcb9 	bl	4125b0 <_free_r>
  40fc3e:	e7d6      	b.n	40fbee <_realloc_r+0xde>
  40fc40:	4611      	mov	r1, r2
  40fc42:	f7ff bb09 	b.w	40f258 <_malloc_r>
  40fc46:	f01e 0f01 	tst.w	lr, #1
  40fc4a:	d18e      	bne.n	40fb6a <_realloc_r+0x5a>
  40fc4c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40fc50:	eba9 0a01 	sub.w	sl, r9, r1
  40fc54:	f8da 1004 	ldr.w	r1, [sl, #4]
  40fc58:	f021 0103 	bic.w	r1, r1, #3
  40fc5c:	440b      	add	r3, r1
  40fc5e:	4423      	add	r3, r4
  40fc60:	4293      	cmp	r3, r2
  40fc62:	db25      	blt.n	40fcb0 <_realloc_r+0x1a0>
  40fc64:	68c2      	ldr	r2, [r0, #12]
  40fc66:	6881      	ldr	r1, [r0, #8]
  40fc68:	4656      	mov	r6, sl
  40fc6a:	60ca      	str	r2, [r1, #12]
  40fc6c:	6091      	str	r1, [r2, #8]
  40fc6e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40fc72:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40fc76:	1f22      	subs	r2, r4, #4
  40fc78:	2a24      	cmp	r2, #36	; 0x24
  40fc7a:	60c1      	str	r1, [r0, #12]
  40fc7c:	6088      	str	r0, [r1, #8]
  40fc7e:	f200 8094 	bhi.w	40fdaa <_realloc_r+0x29a>
  40fc82:	2a13      	cmp	r2, #19
  40fc84:	d96f      	bls.n	40fd66 <_realloc_r+0x256>
  40fc86:	6829      	ldr	r1, [r5, #0]
  40fc88:	f8ca 1008 	str.w	r1, [sl, #8]
  40fc8c:	6869      	ldr	r1, [r5, #4]
  40fc8e:	f8ca 100c 	str.w	r1, [sl, #12]
  40fc92:	2a1b      	cmp	r2, #27
  40fc94:	f200 80a2 	bhi.w	40fddc <_realloc_r+0x2cc>
  40fc98:	3508      	adds	r5, #8
  40fc9a:	f10a 0210 	add.w	r2, sl, #16
  40fc9e:	e063      	b.n	40fd68 <_realloc_r+0x258>
  40fca0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40fca4:	eba9 0a03 	sub.w	sl, r9, r3
  40fca8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40fcac:	f021 0103 	bic.w	r1, r1, #3
  40fcb0:	1863      	adds	r3, r4, r1
  40fcb2:	4293      	cmp	r3, r2
  40fcb4:	f6ff af59 	blt.w	40fb6a <_realloc_r+0x5a>
  40fcb8:	4656      	mov	r6, sl
  40fcba:	e7d8      	b.n	40fc6e <_realloc_r+0x15e>
  40fcbc:	6841      	ldr	r1, [r0, #4]
  40fcbe:	f021 0b03 	bic.w	fp, r1, #3
  40fcc2:	44a3      	add	fp, r4
  40fcc4:	f107 0010 	add.w	r0, r7, #16
  40fcc8:	4583      	cmp	fp, r0
  40fcca:	da56      	bge.n	40fd7a <_realloc_r+0x26a>
  40fccc:	f01e 0f01 	tst.w	lr, #1
  40fcd0:	f47f af4b 	bne.w	40fb6a <_realloc_r+0x5a>
  40fcd4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40fcd8:	eba9 0a01 	sub.w	sl, r9, r1
  40fcdc:	f8da 1004 	ldr.w	r1, [sl, #4]
  40fce0:	f021 0103 	bic.w	r1, r1, #3
  40fce4:	448b      	add	fp, r1
  40fce6:	4558      	cmp	r0, fp
  40fce8:	dce2      	bgt.n	40fcb0 <_realloc_r+0x1a0>
  40fcea:	4656      	mov	r6, sl
  40fcec:	f8da 100c 	ldr.w	r1, [sl, #12]
  40fcf0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40fcf4:	1f22      	subs	r2, r4, #4
  40fcf6:	2a24      	cmp	r2, #36	; 0x24
  40fcf8:	60c1      	str	r1, [r0, #12]
  40fcfa:	6088      	str	r0, [r1, #8]
  40fcfc:	f200 808f 	bhi.w	40fe1e <_realloc_r+0x30e>
  40fd00:	2a13      	cmp	r2, #19
  40fd02:	f240 808a 	bls.w	40fe1a <_realloc_r+0x30a>
  40fd06:	6829      	ldr	r1, [r5, #0]
  40fd08:	f8ca 1008 	str.w	r1, [sl, #8]
  40fd0c:	6869      	ldr	r1, [r5, #4]
  40fd0e:	f8ca 100c 	str.w	r1, [sl, #12]
  40fd12:	2a1b      	cmp	r2, #27
  40fd14:	f200 808a 	bhi.w	40fe2c <_realloc_r+0x31c>
  40fd18:	3508      	adds	r5, #8
  40fd1a:	f10a 0210 	add.w	r2, sl, #16
  40fd1e:	6829      	ldr	r1, [r5, #0]
  40fd20:	6011      	str	r1, [r2, #0]
  40fd22:	6869      	ldr	r1, [r5, #4]
  40fd24:	6051      	str	r1, [r2, #4]
  40fd26:	68a9      	ldr	r1, [r5, #8]
  40fd28:	6091      	str	r1, [r2, #8]
  40fd2a:	eb0a 0107 	add.w	r1, sl, r7
  40fd2e:	ebab 0207 	sub.w	r2, fp, r7
  40fd32:	f042 0201 	orr.w	r2, r2, #1
  40fd36:	6099      	str	r1, [r3, #8]
  40fd38:	604a      	str	r2, [r1, #4]
  40fd3a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40fd3e:	f003 0301 	and.w	r3, r3, #1
  40fd42:	431f      	orrs	r7, r3
  40fd44:	4640      	mov	r0, r8
  40fd46:	f8ca 7004 	str.w	r7, [sl, #4]
  40fd4a:	f7ff fedb 	bl	40fb04 <__malloc_unlock>
  40fd4e:	e751      	b.n	40fbf4 <_realloc_r+0xe4>
  40fd50:	682b      	ldr	r3, [r5, #0]
  40fd52:	6003      	str	r3, [r0, #0]
  40fd54:	686b      	ldr	r3, [r5, #4]
  40fd56:	6043      	str	r3, [r0, #4]
  40fd58:	2a1b      	cmp	r2, #27
  40fd5a:	d82d      	bhi.n	40fdb8 <_realloc_r+0x2a8>
  40fd5c:	f100 0308 	add.w	r3, r0, #8
  40fd60:	f105 0208 	add.w	r2, r5, #8
  40fd64:	e71b      	b.n	40fb9e <_realloc_r+0x8e>
  40fd66:	4632      	mov	r2, r6
  40fd68:	6829      	ldr	r1, [r5, #0]
  40fd6a:	6011      	str	r1, [r2, #0]
  40fd6c:	6869      	ldr	r1, [r5, #4]
  40fd6e:	6051      	str	r1, [r2, #4]
  40fd70:	68a9      	ldr	r1, [r5, #8]
  40fd72:	6091      	str	r1, [r2, #8]
  40fd74:	461c      	mov	r4, r3
  40fd76:	46d1      	mov	r9, sl
  40fd78:	e72a      	b.n	40fbd0 <_realloc_r+0xc0>
  40fd7a:	eb09 0107 	add.w	r1, r9, r7
  40fd7e:	ebab 0b07 	sub.w	fp, fp, r7
  40fd82:	f04b 0201 	orr.w	r2, fp, #1
  40fd86:	6099      	str	r1, [r3, #8]
  40fd88:	604a      	str	r2, [r1, #4]
  40fd8a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40fd8e:	f003 0301 	and.w	r3, r3, #1
  40fd92:	431f      	orrs	r7, r3
  40fd94:	4640      	mov	r0, r8
  40fd96:	f845 7c04 	str.w	r7, [r5, #-4]
  40fd9a:	f7ff feb3 	bl	40fb04 <__malloc_unlock>
  40fd9e:	462e      	mov	r6, r5
  40fda0:	e728      	b.n	40fbf4 <_realloc_r+0xe4>
  40fda2:	4629      	mov	r1, r5
  40fda4:	f7ff fdf6 	bl	40f994 <memmove>
  40fda8:	e6ff      	b.n	40fbaa <_realloc_r+0x9a>
  40fdaa:	4629      	mov	r1, r5
  40fdac:	4630      	mov	r0, r6
  40fdae:	461c      	mov	r4, r3
  40fdb0:	46d1      	mov	r9, sl
  40fdb2:	f7ff fdef 	bl	40f994 <memmove>
  40fdb6:	e70b      	b.n	40fbd0 <_realloc_r+0xc0>
  40fdb8:	68ab      	ldr	r3, [r5, #8]
  40fdba:	6083      	str	r3, [r0, #8]
  40fdbc:	68eb      	ldr	r3, [r5, #12]
  40fdbe:	60c3      	str	r3, [r0, #12]
  40fdc0:	2a24      	cmp	r2, #36	; 0x24
  40fdc2:	d017      	beq.n	40fdf4 <_realloc_r+0x2e4>
  40fdc4:	f100 0310 	add.w	r3, r0, #16
  40fdc8:	f105 0210 	add.w	r2, r5, #16
  40fdcc:	e6e7      	b.n	40fb9e <_realloc_r+0x8e>
  40fdce:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40fdd2:	f023 0303 	bic.w	r3, r3, #3
  40fdd6:	441c      	add	r4, r3
  40fdd8:	462e      	mov	r6, r5
  40fdda:	e6f9      	b.n	40fbd0 <_realloc_r+0xc0>
  40fddc:	68a9      	ldr	r1, [r5, #8]
  40fdde:	f8ca 1010 	str.w	r1, [sl, #16]
  40fde2:	68e9      	ldr	r1, [r5, #12]
  40fde4:	f8ca 1014 	str.w	r1, [sl, #20]
  40fde8:	2a24      	cmp	r2, #36	; 0x24
  40fdea:	d00c      	beq.n	40fe06 <_realloc_r+0x2f6>
  40fdec:	3510      	adds	r5, #16
  40fdee:	f10a 0218 	add.w	r2, sl, #24
  40fdf2:	e7b9      	b.n	40fd68 <_realloc_r+0x258>
  40fdf4:	692b      	ldr	r3, [r5, #16]
  40fdf6:	6103      	str	r3, [r0, #16]
  40fdf8:	696b      	ldr	r3, [r5, #20]
  40fdfa:	6143      	str	r3, [r0, #20]
  40fdfc:	f105 0218 	add.w	r2, r5, #24
  40fe00:	f100 0318 	add.w	r3, r0, #24
  40fe04:	e6cb      	b.n	40fb9e <_realloc_r+0x8e>
  40fe06:	692a      	ldr	r2, [r5, #16]
  40fe08:	f8ca 2018 	str.w	r2, [sl, #24]
  40fe0c:	696a      	ldr	r2, [r5, #20]
  40fe0e:	f8ca 201c 	str.w	r2, [sl, #28]
  40fe12:	3518      	adds	r5, #24
  40fe14:	f10a 0220 	add.w	r2, sl, #32
  40fe18:	e7a6      	b.n	40fd68 <_realloc_r+0x258>
  40fe1a:	4632      	mov	r2, r6
  40fe1c:	e77f      	b.n	40fd1e <_realloc_r+0x20e>
  40fe1e:	4629      	mov	r1, r5
  40fe20:	4630      	mov	r0, r6
  40fe22:	9301      	str	r3, [sp, #4]
  40fe24:	f7ff fdb6 	bl	40f994 <memmove>
  40fe28:	9b01      	ldr	r3, [sp, #4]
  40fe2a:	e77e      	b.n	40fd2a <_realloc_r+0x21a>
  40fe2c:	68a9      	ldr	r1, [r5, #8]
  40fe2e:	f8ca 1010 	str.w	r1, [sl, #16]
  40fe32:	68e9      	ldr	r1, [r5, #12]
  40fe34:	f8ca 1014 	str.w	r1, [sl, #20]
  40fe38:	2a24      	cmp	r2, #36	; 0x24
  40fe3a:	d003      	beq.n	40fe44 <_realloc_r+0x334>
  40fe3c:	3510      	adds	r5, #16
  40fe3e:	f10a 0218 	add.w	r2, sl, #24
  40fe42:	e76c      	b.n	40fd1e <_realloc_r+0x20e>
  40fe44:	692a      	ldr	r2, [r5, #16]
  40fe46:	f8ca 2018 	str.w	r2, [sl, #24]
  40fe4a:	696a      	ldr	r2, [r5, #20]
  40fe4c:	f8ca 201c 	str.w	r2, [sl, #28]
  40fe50:	3518      	adds	r5, #24
  40fe52:	f10a 0220 	add.w	r2, sl, #32
  40fe56:	e762      	b.n	40fd1e <_realloc_r+0x20e>
  40fe58:	20002948 	.word	0x20002948

0040fe5c <_sbrk_r>:
  40fe5c:	b538      	push	{r3, r4, r5, lr}
  40fe5e:	4c07      	ldr	r4, [pc, #28]	; (40fe7c <_sbrk_r+0x20>)
  40fe60:	2300      	movs	r3, #0
  40fe62:	4605      	mov	r5, r0
  40fe64:	4608      	mov	r0, r1
  40fe66:	6023      	str	r3, [r4, #0]
  40fe68:	f7f9 fe1c 	bl	409aa4 <_sbrk>
  40fe6c:	1c43      	adds	r3, r0, #1
  40fe6e:	d000      	beq.n	40fe72 <_sbrk_r+0x16>
  40fe70:	bd38      	pop	{r3, r4, r5, pc}
  40fe72:	6823      	ldr	r3, [r4, #0]
  40fe74:	2b00      	cmp	r3, #0
  40fe76:	d0fb      	beq.n	40fe70 <_sbrk_r+0x14>
  40fe78:	602b      	str	r3, [r5, #0]
  40fe7a:	bd38      	pop	{r3, r4, r5, pc}
  40fe7c:	200052e4 	.word	0x200052e4

0040fe80 <snprintf>:
  40fe80:	b40c      	push	{r2, r3}
  40fe82:	b5f0      	push	{r4, r5, r6, r7, lr}
  40fe84:	4b23      	ldr	r3, [pc, #140]	; (40ff14 <snprintf+0x94>)
  40fe86:	1e0c      	subs	r4, r1, #0
  40fe88:	b09d      	sub	sp, #116	; 0x74
  40fe8a:	681d      	ldr	r5, [r3, #0]
  40fe8c:	db3d      	blt.n	40ff0a <snprintf+0x8a>
  40fe8e:	f44f 7302 	mov.w	r3, #520	; 0x208
  40fe92:	9002      	str	r0, [sp, #8]
  40fe94:	9006      	str	r0, [sp, #24]
  40fe96:	f8ad 3014 	strh.w	r3, [sp, #20]
  40fe9a:	ae23      	add	r6, sp, #140	; 0x8c
  40fe9c:	d017      	beq.n	40fece <snprintf+0x4e>
  40fe9e:	3c01      	subs	r4, #1
  40fea0:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40fea2:	9404      	str	r4, [sp, #16]
  40fea4:	4633      	mov	r3, r6
  40fea6:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40feaa:	a902      	add	r1, sp, #8
  40feac:	4628      	mov	r0, r5
  40feae:	9407      	str	r4, [sp, #28]
  40feb0:	9601      	str	r6, [sp, #4]
  40feb2:	f8ad 7016 	strh.w	r7, [sp, #22]
  40feb6:	f000 f8b3 	bl	410020 <_svfprintf_r>
  40feba:	1c42      	adds	r2, r0, #1
  40febc:	db1b      	blt.n	40fef6 <snprintf+0x76>
  40febe:	9b02      	ldr	r3, [sp, #8]
  40fec0:	2200      	movs	r2, #0
  40fec2:	701a      	strb	r2, [r3, #0]
  40fec4:	b01d      	add	sp, #116	; 0x74
  40fec6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40feca:	b002      	add	sp, #8
  40fecc:	4770      	bx	lr
  40fece:	4633      	mov	r3, r6
  40fed0:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40fed4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40fed6:	9404      	str	r4, [sp, #16]
  40fed8:	a902      	add	r1, sp, #8
  40feda:	4628      	mov	r0, r5
  40fedc:	9407      	str	r4, [sp, #28]
  40fede:	9601      	str	r6, [sp, #4]
  40fee0:	f8ad 7016 	strh.w	r7, [sp, #22]
  40fee4:	f000 f89c 	bl	410020 <_svfprintf_r>
  40fee8:	1c43      	adds	r3, r0, #1
  40feea:	db07      	blt.n	40fefc <snprintf+0x7c>
  40feec:	b01d      	add	sp, #116	; 0x74
  40feee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40fef2:	b002      	add	sp, #8
  40fef4:	4770      	bx	lr
  40fef6:	238b      	movs	r3, #139	; 0x8b
  40fef8:	602b      	str	r3, [r5, #0]
  40fefa:	e7e0      	b.n	40febe <snprintf+0x3e>
  40fefc:	238b      	movs	r3, #139	; 0x8b
  40fefe:	602b      	str	r3, [r5, #0]
  40ff00:	b01d      	add	sp, #116	; 0x74
  40ff02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40ff06:	b002      	add	sp, #8
  40ff08:	4770      	bx	lr
  40ff0a:	238b      	movs	r3, #139	; 0x8b
  40ff0c:	602b      	str	r3, [r5, #0]
  40ff0e:	f04f 30ff 	mov.w	r0, #4294967295
  40ff12:	e7eb      	b.n	40feec <snprintf+0x6c>
  40ff14:	2000251c 	.word	0x2000251c
	...

0040ff40 <strlen>:
  40ff40:	f890 f000 	pld	[r0]
  40ff44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40ff48:	f020 0107 	bic.w	r1, r0, #7
  40ff4c:	f06f 0c00 	mvn.w	ip, #0
  40ff50:	f010 0407 	ands.w	r4, r0, #7
  40ff54:	f891 f020 	pld	[r1, #32]
  40ff58:	f040 8049 	bne.w	40ffee <strlen+0xae>
  40ff5c:	f04f 0400 	mov.w	r4, #0
  40ff60:	f06f 0007 	mvn.w	r0, #7
  40ff64:	e9d1 2300 	ldrd	r2, r3, [r1]
  40ff68:	f891 f040 	pld	[r1, #64]	; 0x40
  40ff6c:	f100 0008 	add.w	r0, r0, #8
  40ff70:	fa82 f24c 	uadd8	r2, r2, ip
  40ff74:	faa4 f28c 	sel	r2, r4, ip
  40ff78:	fa83 f34c 	uadd8	r3, r3, ip
  40ff7c:	faa2 f38c 	sel	r3, r2, ip
  40ff80:	bb4b      	cbnz	r3, 40ffd6 <strlen+0x96>
  40ff82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40ff86:	fa82 f24c 	uadd8	r2, r2, ip
  40ff8a:	f100 0008 	add.w	r0, r0, #8
  40ff8e:	faa4 f28c 	sel	r2, r4, ip
  40ff92:	fa83 f34c 	uadd8	r3, r3, ip
  40ff96:	faa2 f38c 	sel	r3, r2, ip
  40ff9a:	b9e3      	cbnz	r3, 40ffd6 <strlen+0x96>
  40ff9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40ffa0:	fa82 f24c 	uadd8	r2, r2, ip
  40ffa4:	f100 0008 	add.w	r0, r0, #8
  40ffa8:	faa4 f28c 	sel	r2, r4, ip
  40ffac:	fa83 f34c 	uadd8	r3, r3, ip
  40ffb0:	faa2 f38c 	sel	r3, r2, ip
  40ffb4:	b97b      	cbnz	r3, 40ffd6 <strlen+0x96>
  40ffb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40ffba:	f101 0120 	add.w	r1, r1, #32
  40ffbe:	fa82 f24c 	uadd8	r2, r2, ip
  40ffc2:	f100 0008 	add.w	r0, r0, #8
  40ffc6:	faa4 f28c 	sel	r2, r4, ip
  40ffca:	fa83 f34c 	uadd8	r3, r3, ip
  40ffce:	faa2 f38c 	sel	r3, r2, ip
  40ffd2:	2b00      	cmp	r3, #0
  40ffd4:	d0c6      	beq.n	40ff64 <strlen+0x24>
  40ffd6:	2a00      	cmp	r2, #0
  40ffd8:	bf04      	itt	eq
  40ffda:	3004      	addeq	r0, #4
  40ffdc:	461a      	moveq	r2, r3
  40ffde:	ba12      	rev	r2, r2
  40ffe0:	fab2 f282 	clz	r2, r2
  40ffe4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40ffe8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40ffec:	4770      	bx	lr
  40ffee:	e9d1 2300 	ldrd	r2, r3, [r1]
  40fff2:	f004 0503 	and.w	r5, r4, #3
  40fff6:	f1c4 0000 	rsb	r0, r4, #0
  40fffa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40fffe:	f014 0f04 	tst.w	r4, #4
  410002:	f891 f040 	pld	[r1, #64]	; 0x40
  410006:	fa0c f505 	lsl.w	r5, ip, r5
  41000a:	ea62 0205 	orn	r2, r2, r5
  41000e:	bf1c      	itt	ne
  410010:	ea63 0305 	ornne	r3, r3, r5
  410014:	4662      	movne	r2, ip
  410016:	f04f 0400 	mov.w	r4, #0
  41001a:	e7a9      	b.n	40ff70 <strlen+0x30>
  41001c:	0000      	movs	r0, r0
	...

00410020 <_svfprintf_r>:
  410020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410024:	b0c1      	sub	sp, #260	; 0x104
  410026:	460c      	mov	r4, r1
  410028:	9107      	str	r1, [sp, #28]
  41002a:	4692      	mov	sl, r2
  41002c:	930b      	str	r3, [sp, #44]	; 0x2c
  41002e:	9008      	str	r0, [sp, #32]
  410030:	f002 fba4 	bl	41277c <_localeconv_r>
  410034:	6803      	ldr	r3, [r0, #0]
  410036:	9314      	str	r3, [sp, #80]	; 0x50
  410038:	4618      	mov	r0, r3
  41003a:	f7ff ff81 	bl	40ff40 <strlen>
  41003e:	89a3      	ldrh	r3, [r4, #12]
  410040:	9013      	str	r0, [sp, #76]	; 0x4c
  410042:	0619      	lsls	r1, r3, #24
  410044:	d503      	bpl.n	41004e <_svfprintf_r+0x2e>
  410046:	6923      	ldr	r3, [r4, #16]
  410048:	2b00      	cmp	r3, #0
  41004a:	f001 801b 	beq.w	411084 <_svfprintf_r+0x1064>
  41004e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 4102a0 <_svfprintf_r+0x280>
  410052:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  410056:	2300      	movs	r3, #0
  410058:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  41005c:	930f      	str	r3, [sp, #60]	; 0x3c
  41005e:	9325      	str	r3, [sp, #148]	; 0x94
  410060:	9324      	str	r3, [sp, #144]	; 0x90
  410062:	9312      	str	r3, [sp, #72]	; 0x48
  410064:	9315      	str	r3, [sp, #84]	; 0x54
  410066:	9305      	str	r3, [sp, #20]
  410068:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
  41006c:	46c8      	mov	r8, r9
  41006e:	f89a 3000 	ldrb.w	r3, [sl]
  410072:	4654      	mov	r4, sl
  410074:	b1e3      	cbz	r3, 4100b0 <_svfprintf_r+0x90>
  410076:	2b25      	cmp	r3, #37	; 0x25
  410078:	d102      	bne.n	410080 <_svfprintf_r+0x60>
  41007a:	e019      	b.n	4100b0 <_svfprintf_r+0x90>
  41007c:	2b25      	cmp	r3, #37	; 0x25
  41007e:	d003      	beq.n	410088 <_svfprintf_r+0x68>
  410080:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  410084:	2b00      	cmp	r3, #0
  410086:	d1f9      	bne.n	41007c <_svfprintf_r+0x5c>
  410088:	eba4 050a 	sub.w	r5, r4, sl
  41008c:	b185      	cbz	r5, 4100b0 <_svfprintf_r+0x90>
  41008e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410090:	9a25      	ldr	r2, [sp, #148]	; 0x94
  410092:	f8c8 a000 	str.w	sl, [r8]
  410096:	3301      	adds	r3, #1
  410098:	442a      	add	r2, r5
  41009a:	2b07      	cmp	r3, #7
  41009c:	f8c8 5004 	str.w	r5, [r8, #4]
  4100a0:	9225      	str	r2, [sp, #148]	; 0x94
  4100a2:	9324      	str	r3, [sp, #144]	; 0x90
  4100a4:	dc7f      	bgt.n	4101a6 <_svfprintf_r+0x186>
  4100a6:	f108 0808 	add.w	r8, r8, #8
  4100aa:	9b05      	ldr	r3, [sp, #20]
  4100ac:	442b      	add	r3, r5
  4100ae:	9305      	str	r3, [sp, #20]
  4100b0:	7823      	ldrb	r3, [r4, #0]
  4100b2:	2b00      	cmp	r3, #0
  4100b4:	d07f      	beq.n	4101b6 <_svfprintf_r+0x196>
  4100b6:	2300      	movs	r3, #0
  4100b8:	461a      	mov	r2, r3
  4100ba:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4100be:	4619      	mov	r1, r3
  4100c0:	9309      	str	r3, [sp, #36]	; 0x24
  4100c2:	469b      	mov	fp, r3
  4100c4:	f04f 30ff 	mov.w	r0, #4294967295
  4100c8:	7863      	ldrb	r3, [r4, #1]
  4100ca:	9006      	str	r0, [sp, #24]
  4100cc:	f104 0a01 	add.w	sl, r4, #1
  4100d0:	f10a 0a01 	add.w	sl, sl, #1
  4100d4:	f1a3 0020 	sub.w	r0, r3, #32
  4100d8:	2858      	cmp	r0, #88	; 0x58
  4100da:	f200 83d3 	bhi.w	410884 <_svfprintf_r+0x864>
  4100de:	e8df f010 	tbh	[pc, r0, lsl #1]
  4100e2:	023f      	.short	0x023f
  4100e4:	03d103d1 	.word	0x03d103d1
  4100e8:	03d10247 	.word	0x03d10247
  4100ec:	03d103d1 	.word	0x03d103d1
  4100f0:	03d103d1 	.word	0x03d103d1
  4100f4:	024c03d1 	.word	0x024c03d1
  4100f8:	03d1020a 	.word	0x03d1020a
  4100fc:	0273005d 	.word	0x0273005d
  410100:	028e03d1 	.word	0x028e03d1
  410104:	03c103c1 	.word	0x03c103c1
  410108:	03c103c1 	.word	0x03c103c1
  41010c:	03c103c1 	.word	0x03c103c1
  410110:	03c103c1 	.word	0x03c103c1
  410114:	03d103c1 	.word	0x03d103c1
  410118:	03d103d1 	.word	0x03d103d1
  41011c:	03d103d1 	.word	0x03d103d1
  410120:	03d103d1 	.word	0x03d103d1
  410124:	03d103d1 	.word	0x03d103d1
  410128:	033f03d1 	.word	0x033f03d1
  41012c:	03d1035f 	.word	0x03d1035f
  410130:	03d1035f 	.word	0x03d1035f
  410134:	03d103d1 	.word	0x03d103d1
  410138:	03aa03d1 	.word	0x03aa03d1
  41013c:	03d103d1 	.word	0x03d103d1
  410140:	03d103af 	.word	0x03d103af
  410144:	03d103d1 	.word	0x03d103d1
  410148:	03d103d1 	.word	0x03d103d1
  41014c:	03d10261 	.word	0x03d10261
  410150:	032603d1 	.word	0x032603d1
  410154:	03d103d1 	.word	0x03d103d1
  410158:	03d103d1 	.word	0x03d103d1
  41015c:	03d103d1 	.word	0x03d103d1
  410160:	03d103d1 	.word	0x03d103d1
  410164:	03d103d1 	.word	0x03d103d1
  410168:	02e302ce 	.word	0x02e302ce
  41016c:	035f035f 	.word	0x035f035f
  410170:	0293035f 	.word	0x0293035f
  410174:	03d102e3 	.word	0x03d102e3
  410178:	029803d1 	.word	0x029803d1
  41017c:	02a503d1 	.word	0x02a503d1
  410180:	02bc01d3 	.word	0x02bc01d3
  410184:	03d1020f 	.word	0x03d1020f
  410188:	03d101e8 	.word	0x03d101e8
  41018c:	03d1007e 	.word	0x03d1007e
  410190:	021403d1 	.word	0x021403d1
  410194:	9809      	ldr	r0, [sp, #36]	; 0x24
  410196:	930b      	str	r3, [sp, #44]	; 0x2c
  410198:	4240      	negs	r0, r0
  41019a:	9009      	str	r0, [sp, #36]	; 0x24
  41019c:	f04b 0b04 	orr.w	fp, fp, #4
  4101a0:	f89a 3000 	ldrb.w	r3, [sl]
  4101a4:	e794      	b.n	4100d0 <_svfprintf_r+0xb0>
  4101a6:	aa23      	add	r2, sp, #140	; 0x8c
  4101a8:	9907      	ldr	r1, [sp, #28]
  4101aa:	9808      	ldr	r0, [sp, #32]
  4101ac:	f002 fdf0 	bl	412d90 <__ssprint_r>
  4101b0:	b940      	cbnz	r0, 4101c4 <_svfprintf_r+0x1a4>
  4101b2:	46c8      	mov	r8, r9
  4101b4:	e779      	b.n	4100aa <_svfprintf_r+0x8a>
  4101b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4101b8:	b123      	cbz	r3, 4101c4 <_svfprintf_r+0x1a4>
  4101ba:	9808      	ldr	r0, [sp, #32]
  4101bc:	9907      	ldr	r1, [sp, #28]
  4101be:	aa23      	add	r2, sp, #140	; 0x8c
  4101c0:	f002 fde6 	bl	412d90 <__ssprint_r>
  4101c4:	9b07      	ldr	r3, [sp, #28]
  4101c6:	899b      	ldrh	r3, [r3, #12]
  4101c8:	f013 0f40 	tst.w	r3, #64	; 0x40
  4101cc:	9b05      	ldr	r3, [sp, #20]
  4101ce:	bf18      	it	ne
  4101d0:	f04f 33ff 	movne.w	r3, #4294967295
  4101d4:	9305      	str	r3, [sp, #20]
  4101d6:	9805      	ldr	r0, [sp, #20]
  4101d8:	b041      	add	sp, #260	; 0x104
  4101da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4101de:	f01b 0f20 	tst.w	fp, #32
  4101e2:	930d      	str	r3, [sp, #52]	; 0x34
  4101e4:	f040 81e5 	bne.w	4105b2 <_svfprintf_r+0x592>
  4101e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4101ea:	f01b 0f10 	tst.w	fp, #16
  4101ee:	4613      	mov	r3, r2
  4101f0:	f040 8588 	bne.w	410d04 <_svfprintf_r+0xce4>
  4101f4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4101f8:	f000 8584 	beq.w	410d04 <_svfprintf_r+0xce4>
  4101fc:	8814      	ldrh	r4, [r2, #0]
  4101fe:	3204      	adds	r2, #4
  410200:	2500      	movs	r5, #0
  410202:	2301      	movs	r3, #1
  410204:	920b      	str	r2, [sp, #44]	; 0x2c
  410206:	2700      	movs	r7, #0
  410208:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  41020c:	9906      	ldr	r1, [sp, #24]
  41020e:	1c4a      	adds	r2, r1, #1
  410210:	f000 826d 	beq.w	4106ee <_svfprintf_r+0x6ce>
  410214:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  410218:	9203      	str	r2, [sp, #12]
  41021a:	ea54 0205 	orrs.w	r2, r4, r5
  41021e:	f040 826c 	bne.w	4106fa <_svfprintf_r+0x6da>
  410222:	2900      	cmp	r1, #0
  410224:	f040 8451 	bne.w	410aca <_svfprintf_r+0xaaa>
  410228:	2b00      	cmp	r3, #0
  41022a:	f040 850b 	bne.w	410c44 <_svfprintf_r+0xc24>
  41022e:	f01b 0301 	ands.w	r3, fp, #1
  410232:	930a      	str	r3, [sp, #40]	; 0x28
  410234:	f000 861a 	beq.w	410e6c <_svfprintf_r+0xe4c>
  410238:	ae40      	add	r6, sp, #256	; 0x100
  41023a:	2330      	movs	r3, #48	; 0x30
  41023c:	f806 3d41 	strb.w	r3, [r6, #-65]!
  410240:	9b06      	ldr	r3, [sp, #24]
  410242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410244:	4293      	cmp	r3, r2
  410246:	bfb8      	it	lt
  410248:	4613      	movlt	r3, r2
  41024a:	9304      	str	r3, [sp, #16]
  41024c:	2300      	movs	r3, #0
  41024e:	930e      	str	r3, [sp, #56]	; 0x38
  410250:	b117      	cbz	r7, 410258 <_svfprintf_r+0x238>
  410252:	9b04      	ldr	r3, [sp, #16]
  410254:	3301      	adds	r3, #1
  410256:	9304      	str	r3, [sp, #16]
  410258:	9b03      	ldr	r3, [sp, #12]
  41025a:	f013 0302 	ands.w	r3, r3, #2
  41025e:	930c      	str	r3, [sp, #48]	; 0x30
  410260:	d002      	beq.n	410268 <_svfprintf_r+0x248>
  410262:	9b04      	ldr	r3, [sp, #16]
  410264:	3302      	adds	r3, #2
  410266:	9304      	str	r3, [sp, #16]
  410268:	9b03      	ldr	r3, [sp, #12]
  41026a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  41026e:	f040 8320 	bne.w	4108b2 <_svfprintf_r+0x892>
  410272:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410274:	9a04      	ldr	r2, [sp, #16]
  410276:	eba3 0b02 	sub.w	fp, r3, r2
  41027a:	f1bb 0f00 	cmp.w	fp, #0
  41027e:	f340 8318 	ble.w	4108b2 <_svfprintf_r+0x892>
  410282:	f1bb 0f10 	cmp.w	fp, #16
  410286:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410288:	9a24      	ldr	r2, [sp, #144]	; 0x90
  41028a:	dd30      	ble.n	4102ee <_svfprintf_r+0x2ce>
  41028c:	4643      	mov	r3, r8
  41028e:	4621      	mov	r1, r4
  410290:	46a8      	mov	r8, r5
  410292:	2710      	movs	r7, #16
  410294:	9c08      	ldr	r4, [sp, #32]
  410296:	9d07      	ldr	r5, [sp, #28]
  410298:	e00d      	b.n	4102b6 <_svfprintf_r+0x296>
  41029a:	bf00      	nop
  41029c:	f3af 8000 	nop.w
	...
  4102a8:	f1ab 0b10 	sub.w	fp, fp, #16
  4102ac:	f1bb 0f10 	cmp.w	fp, #16
  4102b0:	f103 0308 	add.w	r3, r3, #8
  4102b4:	dd18      	ble.n	4102e8 <_svfprintf_r+0x2c8>
  4102b6:	3201      	adds	r2, #1
  4102b8:	48b7      	ldr	r0, [pc, #732]	; (410598 <_svfprintf_r+0x578>)
  4102ba:	9224      	str	r2, [sp, #144]	; 0x90
  4102bc:	3110      	adds	r1, #16
  4102be:	2a07      	cmp	r2, #7
  4102c0:	9125      	str	r1, [sp, #148]	; 0x94
  4102c2:	e883 0081 	stmia.w	r3, {r0, r7}
  4102c6:	ddef      	ble.n	4102a8 <_svfprintf_r+0x288>
  4102c8:	aa23      	add	r2, sp, #140	; 0x8c
  4102ca:	4629      	mov	r1, r5
  4102cc:	4620      	mov	r0, r4
  4102ce:	f002 fd5f 	bl	412d90 <__ssprint_r>
  4102d2:	2800      	cmp	r0, #0
  4102d4:	f47f af76 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  4102d8:	f1ab 0b10 	sub.w	fp, fp, #16
  4102dc:	f1bb 0f10 	cmp.w	fp, #16
  4102e0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4102e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4102e4:	464b      	mov	r3, r9
  4102e6:	dce6      	bgt.n	4102b6 <_svfprintf_r+0x296>
  4102e8:	4645      	mov	r5, r8
  4102ea:	460c      	mov	r4, r1
  4102ec:	4698      	mov	r8, r3
  4102ee:	3201      	adds	r2, #1
  4102f0:	4ba9      	ldr	r3, [pc, #676]	; (410598 <_svfprintf_r+0x578>)
  4102f2:	9224      	str	r2, [sp, #144]	; 0x90
  4102f4:	445c      	add	r4, fp
  4102f6:	2a07      	cmp	r2, #7
  4102f8:	9425      	str	r4, [sp, #148]	; 0x94
  4102fa:	e888 0808 	stmia.w	r8, {r3, fp}
  4102fe:	f300 84a6 	bgt.w	410c4e <_svfprintf_r+0xc2e>
  410302:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  410306:	f108 0808 	add.w	r8, r8, #8
  41030a:	b177      	cbz	r7, 41032a <_svfprintf_r+0x30a>
  41030c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  41030e:	3301      	adds	r3, #1
  410310:	3401      	adds	r4, #1
  410312:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  410316:	2201      	movs	r2, #1
  410318:	2b07      	cmp	r3, #7
  41031a:	9425      	str	r4, [sp, #148]	; 0x94
  41031c:	9324      	str	r3, [sp, #144]	; 0x90
  41031e:	e888 0006 	stmia.w	r8, {r1, r2}
  410322:	f300 83f4 	bgt.w	410b0e <_svfprintf_r+0xaee>
  410326:	f108 0808 	add.w	r8, r8, #8
  41032a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  41032c:	b16b      	cbz	r3, 41034a <_svfprintf_r+0x32a>
  41032e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410330:	3301      	adds	r3, #1
  410332:	3402      	adds	r4, #2
  410334:	a91c      	add	r1, sp, #112	; 0x70
  410336:	2202      	movs	r2, #2
  410338:	2b07      	cmp	r3, #7
  41033a:	9425      	str	r4, [sp, #148]	; 0x94
  41033c:	9324      	str	r3, [sp, #144]	; 0x90
  41033e:	e888 0006 	stmia.w	r8, {r1, r2}
  410342:	f300 83d9 	bgt.w	410af8 <_svfprintf_r+0xad8>
  410346:	f108 0808 	add.w	r8, r8, #8
  41034a:	2d80      	cmp	r5, #128	; 0x80
  41034c:	f000 8322 	beq.w	410994 <_svfprintf_r+0x974>
  410350:	9b06      	ldr	r3, [sp, #24]
  410352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410354:	1a9f      	subs	r7, r3, r2
  410356:	2f00      	cmp	r7, #0
  410358:	dd36      	ble.n	4103c8 <_svfprintf_r+0x3a8>
  41035a:	2f10      	cmp	r7, #16
  41035c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  41035e:	4d8f      	ldr	r5, [pc, #572]	; (41059c <_svfprintf_r+0x57c>)
  410360:	dd27      	ble.n	4103b2 <_svfprintf_r+0x392>
  410362:	4642      	mov	r2, r8
  410364:	4621      	mov	r1, r4
  410366:	46b0      	mov	r8, r6
  410368:	f04f 0b10 	mov.w	fp, #16
  41036c:	462e      	mov	r6, r5
  41036e:	9c08      	ldr	r4, [sp, #32]
  410370:	9d07      	ldr	r5, [sp, #28]
  410372:	e004      	b.n	41037e <_svfprintf_r+0x35e>
  410374:	3f10      	subs	r7, #16
  410376:	2f10      	cmp	r7, #16
  410378:	f102 0208 	add.w	r2, r2, #8
  41037c:	dd15      	ble.n	4103aa <_svfprintf_r+0x38a>
  41037e:	3301      	adds	r3, #1
  410380:	3110      	adds	r1, #16
  410382:	2b07      	cmp	r3, #7
  410384:	9125      	str	r1, [sp, #148]	; 0x94
  410386:	9324      	str	r3, [sp, #144]	; 0x90
  410388:	e882 0840 	stmia.w	r2, {r6, fp}
  41038c:	ddf2      	ble.n	410374 <_svfprintf_r+0x354>
  41038e:	aa23      	add	r2, sp, #140	; 0x8c
  410390:	4629      	mov	r1, r5
  410392:	4620      	mov	r0, r4
  410394:	f002 fcfc 	bl	412d90 <__ssprint_r>
  410398:	2800      	cmp	r0, #0
  41039a:	f47f af13 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  41039e:	3f10      	subs	r7, #16
  4103a0:	2f10      	cmp	r7, #16
  4103a2:	9925      	ldr	r1, [sp, #148]	; 0x94
  4103a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4103a6:	464a      	mov	r2, r9
  4103a8:	dce9      	bgt.n	41037e <_svfprintf_r+0x35e>
  4103aa:	4635      	mov	r5, r6
  4103ac:	460c      	mov	r4, r1
  4103ae:	4646      	mov	r6, r8
  4103b0:	4690      	mov	r8, r2
  4103b2:	3301      	adds	r3, #1
  4103b4:	443c      	add	r4, r7
  4103b6:	2b07      	cmp	r3, #7
  4103b8:	9425      	str	r4, [sp, #148]	; 0x94
  4103ba:	9324      	str	r3, [sp, #144]	; 0x90
  4103bc:	e888 00a0 	stmia.w	r8, {r5, r7}
  4103c0:	f300 838f 	bgt.w	410ae2 <_svfprintf_r+0xac2>
  4103c4:	f108 0808 	add.w	r8, r8, #8
  4103c8:	9b03      	ldr	r3, [sp, #12]
  4103ca:	05df      	lsls	r7, r3, #23
  4103cc:	f100 8273 	bmi.w	4108b6 <_svfprintf_r+0x896>
  4103d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4103d2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4103d4:	f8c8 6000 	str.w	r6, [r8]
  4103d8:	3301      	adds	r3, #1
  4103da:	440c      	add	r4, r1
  4103dc:	2b07      	cmp	r3, #7
  4103de:	9425      	str	r4, [sp, #148]	; 0x94
  4103e0:	f8c8 1004 	str.w	r1, [r8, #4]
  4103e4:	9324      	str	r3, [sp, #144]	; 0x90
  4103e6:	f300 835b 	bgt.w	410aa0 <_svfprintf_r+0xa80>
  4103ea:	f108 0808 	add.w	r8, r8, #8
  4103ee:	9b03      	ldr	r3, [sp, #12]
  4103f0:	075b      	lsls	r3, r3, #29
  4103f2:	d53a      	bpl.n	41046a <_svfprintf_r+0x44a>
  4103f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4103f6:	9a04      	ldr	r2, [sp, #16]
  4103f8:	1a9d      	subs	r5, r3, r2
  4103fa:	2d00      	cmp	r5, #0
  4103fc:	dd35      	ble.n	41046a <_svfprintf_r+0x44a>
  4103fe:	2d10      	cmp	r5, #16
  410400:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410402:	dd20      	ble.n	410446 <_svfprintf_r+0x426>
  410404:	2610      	movs	r6, #16
  410406:	9f08      	ldr	r7, [sp, #32]
  410408:	f8dd b01c 	ldr.w	fp, [sp, #28]
  41040c:	e004      	b.n	410418 <_svfprintf_r+0x3f8>
  41040e:	3d10      	subs	r5, #16
  410410:	2d10      	cmp	r5, #16
  410412:	f108 0808 	add.w	r8, r8, #8
  410416:	dd16      	ble.n	410446 <_svfprintf_r+0x426>
  410418:	3301      	adds	r3, #1
  41041a:	4a5f      	ldr	r2, [pc, #380]	; (410598 <_svfprintf_r+0x578>)
  41041c:	9324      	str	r3, [sp, #144]	; 0x90
  41041e:	3410      	adds	r4, #16
  410420:	2b07      	cmp	r3, #7
  410422:	9425      	str	r4, [sp, #148]	; 0x94
  410424:	e888 0044 	stmia.w	r8, {r2, r6}
  410428:	ddf1      	ble.n	41040e <_svfprintf_r+0x3ee>
  41042a:	aa23      	add	r2, sp, #140	; 0x8c
  41042c:	4659      	mov	r1, fp
  41042e:	4638      	mov	r0, r7
  410430:	f002 fcae 	bl	412d90 <__ssprint_r>
  410434:	2800      	cmp	r0, #0
  410436:	f47f aec5 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  41043a:	3d10      	subs	r5, #16
  41043c:	2d10      	cmp	r5, #16
  41043e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410440:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410442:	46c8      	mov	r8, r9
  410444:	dce8      	bgt.n	410418 <_svfprintf_r+0x3f8>
  410446:	3301      	adds	r3, #1
  410448:	4a53      	ldr	r2, [pc, #332]	; (410598 <_svfprintf_r+0x578>)
  41044a:	9324      	str	r3, [sp, #144]	; 0x90
  41044c:	442c      	add	r4, r5
  41044e:	2b07      	cmp	r3, #7
  410450:	9425      	str	r4, [sp, #148]	; 0x94
  410452:	e888 0024 	stmia.w	r8, {r2, r5}
  410456:	dd08      	ble.n	41046a <_svfprintf_r+0x44a>
  410458:	aa23      	add	r2, sp, #140	; 0x8c
  41045a:	9907      	ldr	r1, [sp, #28]
  41045c:	9808      	ldr	r0, [sp, #32]
  41045e:	f002 fc97 	bl	412d90 <__ssprint_r>
  410462:	2800      	cmp	r0, #0
  410464:	f47f aeae 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410468:	9c25      	ldr	r4, [sp, #148]	; 0x94
  41046a:	9b05      	ldr	r3, [sp, #20]
  41046c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41046e:	9904      	ldr	r1, [sp, #16]
  410470:	428a      	cmp	r2, r1
  410472:	bfac      	ite	ge
  410474:	189b      	addge	r3, r3, r2
  410476:	185b      	addlt	r3, r3, r1
  410478:	9305      	str	r3, [sp, #20]
  41047a:	2c00      	cmp	r4, #0
  41047c:	f040 831b 	bne.w	410ab6 <_svfprintf_r+0xa96>
  410480:	2300      	movs	r3, #0
  410482:	9324      	str	r3, [sp, #144]	; 0x90
  410484:	46c8      	mov	r8, r9
  410486:	e5f2      	b.n	41006e <_svfprintf_r+0x4e>
  410488:	930d      	str	r3, [sp, #52]	; 0x34
  41048a:	f01b 0320 	ands.w	r3, fp, #32
  41048e:	f040 81de 	bne.w	41084e <_svfprintf_r+0x82e>
  410492:	f01b 0210 	ands.w	r2, fp, #16
  410496:	f040 842d 	bne.w	410cf4 <_svfprintf_r+0xcd4>
  41049a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  41049e:	f000 8429 	beq.w	410cf4 <_svfprintf_r+0xcd4>
  4104a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4104a4:	4613      	mov	r3, r2
  4104a6:	460a      	mov	r2, r1
  4104a8:	3204      	adds	r2, #4
  4104aa:	880c      	ldrh	r4, [r1, #0]
  4104ac:	920b      	str	r2, [sp, #44]	; 0x2c
  4104ae:	2500      	movs	r5, #0
  4104b0:	e6a9      	b.n	410206 <_svfprintf_r+0x1e6>
  4104b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4104b4:	930d      	str	r3, [sp, #52]	; 0x34
  4104b6:	6816      	ldr	r6, [r2, #0]
  4104b8:	2400      	movs	r4, #0
  4104ba:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4104be:	1d15      	adds	r5, r2, #4
  4104c0:	2e00      	cmp	r6, #0
  4104c2:	f000 86b5 	beq.w	411230 <_svfprintf_r+0x1210>
  4104c6:	9a06      	ldr	r2, [sp, #24]
  4104c8:	1c53      	adds	r3, r2, #1
  4104ca:	f000 8617 	beq.w	4110fc <_svfprintf_r+0x10dc>
  4104ce:	4621      	mov	r1, r4
  4104d0:	4630      	mov	r0, r6
  4104d2:	f7ff f975 	bl	40f7c0 <memchr>
  4104d6:	2800      	cmp	r0, #0
  4104d8:	f000 8708 	beq.w	4112ec <_svfprintf_r+0x12cc>
  4104dc:	1b83      	subs	r3, r0, r6
  4104de:	930a      	str	r3, [sp, #40]	; 0x28
  4104e0:	9406      	str	r4, [sp, #24]
  4104e2:	950b      	str	r5, [sp, #44]	; 0x2c
  4104e4:	f8cd b00c 	str.w	fp, [sp, #12]
  4104e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4104ec:	9304      	str	r3, [sp, #16]
  4104ee:	940e      	str	r4, [sp, #56]	; 0x38
  4104f0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4104f4:	e6ac      	b.n	410250 <_svfprintf_r+0x230>
  4104f6:	f89a 3000 	ldrb.w	r3, [sl]
  4104fa:	2201      	movs	r2, #1
  4104fc:	212b      	movs	r1, #43	; 0x2b
  4104fe:	e5e7      	b.n	4100d0 <_svfprintf_r+0xb0>
  410500:	f04b 0b20 	orr.w	fp, fp, #32
  410504:	f89a 3000 	ldrb.w	r3, [sl]
  410508:	e5e2      	b.n	4100d0 <_svfprintf_r+0xb0>
  41050a:	930d      	str	r3, [sp, #52]	; 0x34
  41050c:	2a00      	cmp	r2, #0
  41050e:	f040 87aa 	bne.w	411466 <_svfprintf_r+0x1446>
  410512:	4b23      	ldr	r3, [pc, #140]	; (4105a0 <_svfprintf_r+0x580>)
  410514:	9312      	str	r3, [sp, #72]	; 0x48
  410516:	f01b 0f20 	tst.w	fp, #32
  41051a:	f040 8112 	bne.w	410742 <_svfprintf_r+0x722>
  41051e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410520:	f01b 0f10 	tst.w	fp, #16
  410524:	4613      	mov	r3, r2
  410526:	f040 83e0 	bne.w	410cea <_svfprintf_r+0xcca>
  41052a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  41052e:	f000 83dc 	beq.w	410cea <_svfprintf_r+0xcca>
  410532:	3304      	adds	r3, #4
  410534:	8814      	ldrh	r4, [r2, #0]
  410536:	930b      	str	r3, [sp, #44]	; 0x2c
  410538:	2500      	movs	r5, #0
  41053a:	f01b 0f01 	tst.w	fp, #1
  41053e:	f000 810d 	beq.w	41075c <_svfprintf_r+0x73c>
  410542:	ea54 0305 	orrs.w	r3, r4, r5
  410546:	f000 8109 	beq.w	41075c <_svfprintf_r+0x73c>
  41054a:	2330      	movs	r3, #48	; 0x30
  41054c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  410550:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  410554:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  410558:	f04b 0b02 	orr.w	fp, fp, #2
  41055c:	2302      	movs	r3, #2
  41055e:	e652      	b.n	410206 <_svfprintf_r+0x1e6>
  410560:	f89a 3000 	ldrb.w	r3, [sl]
  410564:	2900      	cmp	r1, #0
  410566:	f47f adb3 	bne.w	4100d0 <_svfprintf_r+0xb0>
  41056a:	2201      	movs	r2, #1
  41056c:	2120      	movs	r1, #32
  41056e:	e5af      	b.n	4100d0 <_svfprintf_r+0xb0>
  410570:	f04b 0b01 	orr.w	fp, fp, #1
  410574:	f89a 3000 	ldrb.w	r3, [sl]
  410578:	e5aa      	b.n	4100d0 <_svfprintf_r+0xb0>
  41057a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  41057c:	6823      	ldr	r3, [r4, #0]
  41057e:	9309      	str	r3, [sp, #36]	; 0x24
  410580:	4618      	mov	r0, r3
  410582:	2800      	cmp	r0, #0
  410584:	4623      	mov	r3, r4
  410586:	f103 0304 	add.w	r3, r3, #4
  41058a:	f6ff ae03 	blt.w	410194 <_svfprintf_r+0x174>
  41058e:	930b      	str	r3, [sp, #44]	; 0x2c
  410590:	f89a 3000 	ldrb.w	r3, [sl]
  410594:	e59c      	b.n	4100d0 <_svfprintf_r+0xb0>
  410596:	bf00      	nop
  410598:	00413980 	.word	0x00413980
  41059c:	00413990 	.word	0x00413990
  4105a0:	00413960 	.word	0x00413960
  4105a4:	f04b 0b10 	orr.w	fp, fp, #16
  4105a8:	f01b 0f20 	tst.w	fp, #32
  4105ac:	930d      	str	r3, [sp, #52]	; 0x34
  4105ae:	f43f ae1b 	beq.w	4101e8 <_svfprintf_r+0x1c8>
  4105b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4105b4:	3507      	adds	r5, #7
  4105b6:	f025 0307 	bic.w	r3, r5, #7
  4105ba:	f103 0208 	add.w	r2, r3, #8
  4105be:	e9d3 4500 	ldrd	r4, r5, [r3]
  4105c2:	920b      	str	r2, [sp, #44]	; 0x2c
  4105c4:	2301      	movs	r3, #1
  4105c6:	e61e      	b.n	410206 <_svfprintf_r+0x1e6>
  4105c8:	f89a 3000 	ldrb.w	r3, [sl]
  4105cc:	2b2a      	cmp	r3, #42	; 0x2a
  4105ce:	f10a 0401 	add.w	r4, sl, #1
  4105d2:	f000 873b 	beq.w	41144c <_svfprintf_r+0x142c>
  4105d6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4105da:	2809      	cmp	r0, #9
  4105dc:	46a2      	mov	sl, r4
  4105de:	f200 8691 	bhi.w	411304 <_svfprintf_r+0x12e4>
  4105e2:	2300      	movs	r3, #0
  4105e4:	461c      	mov	r4, r3
  4105e6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4105ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4105ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4105f2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4105f6:	2809      	cmp	r0, #9
  4105f8:	d9f5      	bls.n	4105e6 <_svfprintf_r+0x5c6>
  4105fa:	9406      	str	r4, [sp, #24]
  4105fc:	e56a      	b.n	4100d4 <_svfprintf_r+0xb4>
  4105fe:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  410602:	f89a 3000 	ldrb.w	r3, [sl]
  410606:	e563      	b.n	4100d0 <_svfprintf_r+0xb0>
  410608:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  41060c:	f89a 3000 	ldrb.w	r3, [sl]
  410610:	e55e      	b.n	4100d0 <_svfprintf_r+0xb0>
  410612:	f89a 3000 	ldrb.w	r3, [sl]
  410616:	2b6c      	cmp	r3, #108	; 0x6c
  410618:	bf03      	ittte	eq
  41061a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  41061e:	f04b 0b20 	orreq.w	fp, fp, #32
  410622:	f10a 0a01 	addeq.w	sl, sl, #1
  410626:	f04b 0b10 	orrne.w	fp, fp, #16
  41062a:	e551      	b.n	4100d0 <_svfprintf_r+0xb0>
  41062c:	2a00      	cmp	r2, #0
  41062e:	f040 871e 	bne.w	41146e <_svfprintf_r+0x144e>
  410632:	f01b 0f20 	tst.w	fp, #32
  410636:	f040 8509 	bne.w	41104c <_svfprintf_r+0x102c>
  41063a:	f01b 0f10 	tst.w	fp, #16
  41063e:	f040 84bc 	bne.w	410fba <_svfprintf_r+0xf9a>
  410642:	f01b 0f40 	tst.w	fp, #64	; 0x40
  410646:	f000 84b8 	beq.w	410fba <_svfprintf_r+0xf9a>
  41064a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41064c:	6813      	ldr	r3, [r2, #0]
  41064e:	3204      	adds	r2, #4
  410650:	920b      	str	r2, [sp, #44]	; 0x2c
  410652:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  410656:	801a      	strh	r2, [r3, #0]
  410658:	e509      	b.n	41006e <_svfprintf_r+0x4e>
  41065a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  41065c:	4bb9      	ldr	r3, [pc, #740]	; (410944 <_svfprintf_r+0x924>)
  41065e:	680c      	ldr	r4, [r1, #0]
  410660:	9312      	str	r3, [sp, #72]	; 0x48
  410662:	2230      	movs	r2, #48	; 0x30
  410664:	2378      	movs	r3, #120	; 0x78
  410666:	3104      	adds	r1, #4
  410668:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  41066c:	930d      	str	r3, [sp, #52]	; 0x34
  41066e:	f04b 0b02 	orr.w	fp, fp, #2
  410672:	910b      	str	r1, [sp, #44]	; 0x2c
  410674:	2500      	movs	r5, #0
  410676:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  41067a:	2302      	movs	r3, #2
  41067c:	e5c3      	b.n	410206 <_svfprintf_r+0x1e6>
  41067e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410680:	930d      	str	r3, [sp, #52]	; 0x34
  410682:	680a      	ldr	r2, [r1, #0]
  410684:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  410688:	2300      	movs	r3, #0
  41068a:	460a      	mov	r2, r1
  41068c:	461f      	mov	r7, r3
  41068e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  410692:	3204      	adds	r2, #4
  410694:	2301      	movs	r3, #1
  410696:	9304      	str	r3, [sp, #16]
  410698:	f8cd b00c 	str.w	fp, [sp, #12]
  41069c:	9706      	str	r7, [sp, #24]
  41069e:	970e      	str	r7, [sp, #56]	; 0x38
  4106a0:	920b      	str	r2, [sp, #44]	; 0x2c
  4106a2:	930a      	str	r3, [sp, #40]	; 0x28
  4106a4:	ae26      	add	r6, sp, #152	; 0x98
  4106a6:	e5d7      	b.n	410258 <_svfprintf_r+0x238>
  4106a8:	930d      	str	r3, [sp, #52]	; 0x34
  4106aa:	2a00      	cmp	r2, #0
  4106ac:	f040 86fe 	bne.w	4114ac <_svfprintf_r+0x148c>
  4106b0:	f01b 0f20 	tst.w	fp, #32
  4106b4:	d15d      	bne.n	410772 <_svfprintf_r+0x752>
  4106b6:	f01b 0f10 	tst.w	fp, #16
  4106ba:	f040 8335 	bne.w	410d28 <_svfprintf_r+0xd08>
  4106be:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4106c2:	f000 8331 	beq.w	410d28 <_svfprintf_r+0xd08>
  4106c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4106c8:	f9b1 4000 	ldrsh.w	r4, [r1]
  4106cc:	3104      	adds	r1, #4
  4106ce:	17e5      	asrs	r5, r4, #31
  4106d0:	4622      	mov	r2, r4
  4106d2:	462b      	mov	r3, r5
  4106d4:	910b      	str	r1, [sp, #44]	; 0x2c
  4106d6:	2a00      	cmp	r2, #0
  4106d8:	f173 0300 	sbcs.w	r3, r3, #0
  4106dc:	db58      	blt.n	410790 <_svfprintf_r+0x770>
  4106de:	9906      	ldr	r1, [sp, #24]
  4106e0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4106e4:	1c4a      	adds	r2, r1, #1
  4106e6:	f04f 0301 	mov.w	r3, #1
  4106ea:	f47f ad93 	bne.w	410214 <_svfprintf_r+0x1f4>
  4106ee:	ea54 0205 	orrs.w	r2, r4, r5
  4106f2:	f000 81ec 	beq.w	410ace <_svfprintf_r+0xaae>
  4106f6:	f8cd b00c 	str.w	fp, [sp, #12]
  4106fa:	2b01      	cmp	r3, #1
  4106fc:	f000 8283 	beq.w	410c06 <_svfprintf_r+0xbe6>
  410700:	2b02      	cmp	r3, #2
  410702:	f040 8213 	bne.w	410b2c <_svfprintf_r+0xb0c>
  410706:	9812      	ldr	r0, [sp, #72]	; 0x48
  410708:	464e      	mov	r6, r9
  41070a:	0923      	lsrs	r3, r4, #4
  41070c:	f004 010f 	and.w	r1, r4, #15
  410710:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  410714:	092a      	lsrs	r2, r5, #4
  410716:	461c      	mov	r4, r3
  410718:	4615      	mov	r5, r2
  41071a:	5c43      	ldrb	r3, [r0, r1]
  41071c:	f806 3d01 	strb.w	r3, [r6, #-1]!
  410720:	ea54 0305 	orrs.w	r3, r4, r5
  410724:	d1f1      	bne.n	41070a <_svfprintf_r+0x6ea>
  410726:	eba9 0306 	sub.w	r3, r9, r6
  41072a:	930a      	str	r3, [sp, #40]	; 0x28
  41072c:	e588      	b.n	410240 <_svfprintf_r+0x220>
  41072e:	930d      	str	r3, [sp, #52]	; 0x34
  410730:	2a00      	cmp	r2, #0
  410732:	f040 86b7 	bne.w	4114a4 <_svfprintf_r+0x1484>
  410736:	4b84      	ldr	r3, [pc, #528]	; (410948 <_svfprintf_r+0x928>)
  410738:	9312      	str	r3, [sp, #72]	; 0x48
  41073a:	f01b 0f20 	tst.w	fp, #32
  41073e:	f43f aeee 	beq.w	41051e <_svfprintf_r+0x4fe>
  410742:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410744:	3507      	adds	r5, #7
  410746:	f025 0307 	bic.w	r3, r5, #7
  41074a:	f103 0208 	add.w	r2, r3, #8
  41074e:	f01b 0f01 	tst.w	fp, #1
  410752:	920b      	str	r2, [sp, #44]	; 0x2c
  410754:	e9d3 4500 	ldrd	r4, r5, [r3]
  410758:	f47f aef3 	bne.w	410542 <_svfprintf_r+0x522>
  41075c:	2302      	movs	r3, #2
  41075e:	e552      	b.n	410206 <_svfprintf_r+0x1e6>
  410760:	930d      	str	r3, [sp, #52]	; 0x34
  410762:	2a00      	cmp	r2, #0
  410764:	f040 869a 	bne.w	41149c <_svfprintf_r+0x147c>
  410768:	f04b 0b10 	orr.w	fp, fp, #16
  41076c:	f01b 0f20 	tst.w	fp, #32
  410770:	d0a1      	beq.n	4106b6 <_svfprintf_r+0x696>
  410772:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410774:	3507      	adds	r5, #7
  410776:	f025 0507 	bic.w	r5, r5, #7
  41077a:	e9d5 2300 	ldrd	r2, r3, [r5]
  41077e:	2a00      	cmp	r2, #0
  410780:	f105 0108 	add.w	r1, r5, #8
  410784:	461d      	mov	r5, r3
  410786:	f173 0300 	sbcs.w	r3, r3, #0
  41078a:	910b      	str	r1, [sp, #44]	; 0x2c
  41078c:	4614      	mov	r4, r2
  41078e:	daa6      	bge.n	4106de <_svfprintf_r+0x6be>
  410790:	272d      	movs	r7, #45	; 0x2d
  410792:	4264      	negs	r4, r4
  410794:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  410798:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  41079c:	2301      	movs	r3, #1
  41079e:	e535      	b.n	41020c <_svfprintf_r+0x1ec>
  4107a0:	930d      	str	r3, [sp, #52]	; 0x34
  4107a2:	2a00      	cmp	r2, #0
  4107a4:	f040 8676 	bne.w	411494 <_svfprintf_r+0x1474>
  4107a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4107aa:	f01b 0f08 	tst.w	fp, #8
  4107ae:	f105 0507 	add.w	r5, r5, #7
  4107b2:	f000 83e8 	beq.w	410f86 <_svfprintf_r+0xf66>
  4107b6:	f025 0307 	bic.w	r3, r5, #7
  4107ba:	ed93 7b00 	vldr	d7, [r3]
  4107be:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  4107c2:	f103 0208 	add.w	r2, r3, #8
  4107c6:	920b      	str	r2, [sp, #44]	; 0x2c
  4107c8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
  4107cc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
  4107d0:	9116      	str	r1, [sp, #88]	; 0x58
  4107d2:	9317      	str	r3, [sp, #92]	; 0x5c
  4107d4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4107d8:	f04f 32ff 	mov.w	r2, #4294967295
  4107dc:	4620      	mov	r0, r4
  4107de:	4629      	mov	r1, r5
  4107e0:	4b5a      	ldr	r3, [pc, #360]	; (41094c <_svfprintf_r+0x92c>)
  4107e2:	f7fe f9a3 	bl	40eb2c <__aeabi_dcmpun>
  4107e6:	2800      	cmp	r0, #0
  4107e8:	f040 834f 	bne.w	410e8a <_svfprintf_r+0xe6a>
  4107ec:	f04f 32ff 	mov.w	r2, #4294967295
  4107f0:	4b56      	ldr	r3, [pc, #344]	; (41094c <_svfprintf_r+0x92c>)
  4107f2:	4620      	mov	r0, r4
  4107f4:	4629      	mov	r1, r5
  4107f6:	f7fe f97b 	bl	40eaf0 <__aeabi_dcmple>
  4107fa:	2800      	cmp	r0, #0
  4107fc:	f040 8345 	bne.w	410e8a <_svfprintf_r+0xe6a>
  410800:	2200      	movs	r2, #0
  410802:	2300      	movs	r3, #0
  410804:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410808:	f7fe f968 	bl	40eadc <__aeabi_dcmplt>
  41080c:	2800      	cmp	r0, #0
  41080e:	f040 8533 	bne.w	411278 <_svfprintf_r+0x1258>
  410812:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  410816:	4e4e      	ldr	r6, [pc, #312]	; (410950 <_svfprintf_r+0x930>)
  410818:	4b4e      	ldr	r3, [pc, #312]	; (410954 <_svfprintf_r+0x934>)
  41081a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  41081e:	9003      	str	r0, [sp, #12]
  410820:	980d      	ldr	r0, [sp, #52]	; 0x34
  410822:	2203      	movs	r2, #3
  410824:	2100      	movs	r1, #0
  410826:	9204      	str	r2, [sp, #16]
  410828:	9106      	str	r1, [sp, #24]
  41082a:	2847      	cmp	r0, #71	; 0x47
  41082c:	bfd8      	it	le
  41082e:	461e      	movle	r6, r3
  410830:	920a      	str	r2, [sp, #40]	; 0x28
  410832:	910e      	str	r1, [sp, #56]	; 0x38
  410834:	e50c      	b.n	410250 <_svfprintf_r+0x230>
  410836:	f04b 0b08 	orr.w	fp, fp, #8
  41083a:	f89a 3000 	ldrb.w	r3, [sl]
  41083e:	e447      	b.n	4100d0 <_svfprintf_r+0xb0>
  410840:	f04b 0b10 	orr.w	fp, fp, #16
  410844:	930d      	str	r3, [sp, #52]	; 0x34
  410846:	f01b 0320 	ands.w	r3, fp, #32
  41084a:	f43f ae22 	beq.w	410492 <_svfprintf_r+0x472>
  41084e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  410850:	3507      	adds	r5, #7
  410852:	f025 0307 	bic.w	r3, r5, #7
  410856:	f103 0208 	add.w	r2, r3, #8
  41085a:	e9d3 4500 	ldrd	r4, r5, [r3]
  41085e:	920b      	str	r2, [sp, #44]	; 0x2c
  410860:	2300      	movs	r3, #0
  410862:	e4d0      	b.n	410206 <_svfprintf_r+0x1e6>
  410864:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  410868:	2300      	movs	r3, #0
  41086a:	461c      	mov	r4, r3
  41086c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  410870:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  410874:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  410878:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  41087c:	2809      	cmp	r0, #9
  41087e:	d9f5      	bls.n	41086c <_svfprintf_r+0x84c>
  410880:	9409      	str	r4, [sp, #36]	; 0x24
  410882:	e427      	b.n	4100d4 <_svfprintf_r+0xb4>
  410884:	930d      	str	r3, [sp, #52]	; 0x34
  410886:	2a00      	cmp	r2, #0
  410888:	f040 85f5 	bne.w	411476 <_svfprintf_r+0x1456>
  41088c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  41088e:	2a00      	cmp	r2, #0
  410890:	f43f ac91 	beq.w	4101b6 <_svfprintf_r+0x196>
  410894:	2300      	movs	r3, #0
  410896:	2101      	movs	r1, #1
  410898:	461f      	mov	r7, r3
  41089a:	9104      	str	r1, [sp, #16]
  41089c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4108a0:	f8cd b00c 	str.w	fp, [sp, #12]
  4108a4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4108a8:	9306      	str	r3, [sp, #24]
  4108aa:	930e      	str	r3, [sp, #56]	; 0x38
  4108ac:	910a      	str	r1, [sp, #40]	; 0x28
  4108ae:	ae26      	add	r6, sp, #152	; 0x98
  4108b0:	e4d2      	b.n	410258 <_svfprintf_r+0x238>
  4108b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4108b4:	e529      	b.n	41030a <_svfprintf_r+0x2ea>
  4108b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4108b8:	2b65      	cmp	r3, #101	; 0x65
  4108ba:	f340 80a9 	ble.w	410a10 <_svfprintf_r+0x9f0>
  4108be:	2200      	movs	r2, #0
  4108c0:	2300      	movs	r3, #0
  4108c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4108c6:	f7fe f8ff 	bl	40eac8 <__aeabi_dcmpeq>
  4108ca:	2800      	cmp	r0, #0
  4108cc:	f000 8152 	beq.w	410b74 <_svfprintf_r+0xb54>
  4108d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4108d2:	4a21      	ldr	r2, [pc, #132]	; (410958 <_svfprintf_r+0x938>)
  4108d4:	f8c8 2000 	str.w	r2, [r8]
  4108d8:	3301      	adds	r3, #1
  4108da:	3401      	adds	r4, #1
  4108dc:	2201      	movs	r2, #1
  4108de:	2b07      	cmp	r3, #7
  4108e0:	9425      	str	r4, [sp, #148]	; 0x94
  4108e2:	9324      	str	r3, [sp, #144]	; 0x90
  4108e4:	f8c8 2004 	str.w	r2, [r8, #4]
  4108e8:	f300 836f 	bgt.w	410fca <_svfprintf_r+0xfaa>
  4108ec:	f108 0808 	add.w	r8, r8, #8
  4108f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4108f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4108f4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4108f6:	4293      	cmp	r3, r2
  4108f8:	db03      	blt.n	410902 <_svfprintf_r+0x8e2>
  4108fa:	9b03      	ldr	r3, [sp, #12]
  4108fc:	07dd      	lsls	r5, r3, #31
  4108fe:	f57f ad76 	bpl.w	4103ee <_svfprintf_r+0x3ce>
  410902:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410904:	9913      	ldr	r1, [sp, #76]	; 0x4c
  410906:	9a14      	ldr	r2, [sp, #80]	; 0x50
  410908:	f8c8 2000 	str.w	r2, [r8]
  41090c:	3301      	adds	r3, #1
  41090e:	440c      	add	r4, r1
  410910:	2b07      	cmp	r3, #7
  410912:	f8c8 1004 	str.w	r1, [r8, #4]
  410916:	9425      	str	r4, [sp, #148]	; 0x94
  410918:	9324      	str	r3, [sp, #144]	; 0x90
  41091a:	f300 83a3 	bgt.w	411064 <_svfprintf_r+0x1044>
  41091e:	f108 0808 	add.w	r8, r8, #8
  410922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410924:	1e5e      	subs	r6, r3, #1
  410926:	2e00      	cmp	r6, #0
  410928:	f77f ad61 	ble.w	4103ee <_svfprintf_r+0x3ce>
  41092c:	2e10      	cmp	r6, #16
  41092e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410930:	4d0a      	ldr	r5, [pc, #40]	; (41095c <_svfprintf_r+0x93c>)
  410932:	f340 81ef 	ble.w	410d14 <_svfprintf_r+0xcf4>
  410936:	4622      	mov	r2, r4
  410938:	2710      	movs	r7, #16
  41093a:	f8dd b020 	ldr.w	fp, [sp, #32]
  41093e:	9c07      	ldr	r4, [sp, #28]
  410940:	e014      	b.n	41096c <_svfprintf_r+0x94c>
  410942:	bf00      	nop
  410944:	00413960 	.word	0x00413960
  410948:	0041394c 	.word	0x0041394c
  41094c:	7fefffff 	.word	0x7fefffff
  410950:	00413940 	.word	0x00413940
  410954:	0041393c 	.word	0x0041393c
  410958:	0041397c 	.word	0x0041397c
  41095c:	00413990 	.word	0x00413990
  410960:	f108 0808 	add.w	r8, r8, #8
  410964:	3e10      	subs	r6, #16
  410966:	2e10      	cmp	r6, #16
  410968:	f340 81d3 	ble.w	410d12 <_svfprintf_r+0xcf2>
  41096c:	3301      	adds	r3, #1
  41096e:	3210      	adds	r2, #16
  410970:	2b07      	cmp	r3, #7
  410972:	9225      	str	r2, [sp, #148]	; 0x94
  410974:	9324      	str	r3, [sp, #144]	; 0x90
  410976:	e888 00a0 	stmia.w	r8, {r5, r7}
  41097a:	ddf1      	ble.n	410960 <_svfprintf_r+0x940>
  41097c:	aa23      	add	r2, sp, #140	; 0x8c
  41097e:	4621      	mov	r1, r4
  410980:	4658      	mov	r0, fp
  410982:	f002 fa05 	bl	412d90 <__ssprint_r>
  410986:	2800      	cmp	r0, #0
  410988:	f47f ac1c 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  41098c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  41098e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410990:	46c8      	mov	r8, r9
  410992:	e7e7      	b.n	410964 <_svfprintf_r+0x944>
  410994:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410996:	9a04      	ldr	r2, [sp, #16]
  410998:	1a9f      	subs	r7, r3, r2
  41099a:	2f00      	cmp	r7, #0
  41099c:	f77f acd8 	ble.w	410350 <_svfprintf_r+0x330>
  4109a0:	2f10      	cmp	r7, #16
  4109a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4109a4:	4db7      	ldr	r5, [pc, #732]	; (410c84 <_svfprintf_r+0xc64>)
  4109a6:	dd27      	ble.n	4109f8 <_svfprintf_r+0x9d8>
  4109a8:	4642      	mov	r2, r8
  4109aa:	4621      	mov	r1, r4
  4109ac:	46b0      	mov	r8, r6
  4109ae:	f04f 0b10 	mov.w	fp, #16
  4109b2:	462e      	mov	r6, r5
  4109b4:	9c08      	ldr	r4, [sp, #32]
  4109b6:	9d07      	ldr	r5, [sp, #28]
  4109b8:	e004      	b.n	4109c4 <_svfprintf_r+0x9a4>
  4109ba:	3f10      	subs	r7, #16
  4109bc:	2f10      	cmp	r7, #16
  4109be:	f102 0208 	add.w	r2, r2, #8
  4109c2:	dd15      	ble.n	4109f0 <_svfprintf_r+0x9d0>
  4109c4:	3301      	adds	r3, #1
  4109c6:	3110      	adds	r1, #16
  4109c8:	2b07      	cmp	r3, #7
  4109ca:	9125      	str	r1, [sp, #148]	; 0x94
  4109cc:	9324      	str	r3, [sp, #144]	; 0x90
  4109ce:	e882 0840 	stmia.w	r2, {r6, fp}
  4109d2:	ddf2      	ble.n	4109ba <_svfprintf_r+0x99a>
  4109d4:	aa23      	add	r2, sp, #140	; 0x8c
  4109d6:	4629      	mov	r1, r5
  4109d8:	4620      	mov	r0, r4
  4109da:	f002 f9d9 	bl	412d90 <__ssprint_r>
  4109de:	2800      	cmp	r0, #0
  4109e0:	f47f abf0 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  4109e4:	3f10      	subs	r7, #16
  4109e6:	2f10      	cmp	r7, #16
  4109e8:	9925      	ldr	r1, [sp, #148]	; 0x94
  4109ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4109ec:	464a      	mov	r2, r9
  4109ee:	dce9      	bgt.n	4109c4 <_svfprintf_r+0x9a4>
  4109f0:	4635      	mov	r5, r6
  4109f2:	460c      	mov	r4, r1
  4109f4:	4646      	mov	r6, r8
  4109f6:	4690      	mov	r8, r2
  4109f8:	3301      	adds	r3, #1
  4109fa:	443c      	add	r4, r7
  4109fc:	2b07      	cmp	r3, #7
  4109fe:	9425      	str	r4, [sp, #148]	; 0x94
  410a00:	9324      	str	r3, [sp, #144]	; 0x90
  410a02:	e888 00a0 	stmia.w	r8, {r5, r7}
  410a06:	f300 8234 	bgt.w	410e72 <_svfprintf_r+0xe52>
  410a0a:	f108 0808 	add.w	r8, r8, #8
  410a0e:	e49f      	b.n	410350 <_svfprintf_r+0x330>
  410a10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410a12:	9f24      	ldr	r7, [sp, #144]	; 0x90
  410a14:	2b01      	cmp	r3, #1
  410a16:	f340 8200 	ble.w	410e1a <_svfprintf_r+0xdfa>
  410a1a:	3701      	adds	r7, #1
  410a1c:	3401      	adds	r4, #1
  410a1e:	2301      	movs	r3, #1
  410a20:	2f07      	cmp	r7, #7
  410a22:	9425      	str	r4, [sp, #148]	; 0x94
  410a24:	9724      	str	r7, [sp, #144]	; 0x90
  410a26:	f8c8 6000 	str.w	r6, [r8]
  410a2a:	f8c8 3004 	str.w	r3, [r8, #4]
  410a2e:	f300 8205 	bgt.w	410e3c <_svfprintf_r+0xe1c>
  410a32:	f108 0808 	add.w	r8, r8, #8
  410a36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  410a38:	9b14      	ldr	r3, [sp, #80]	; 0x50
  410a3a:	f8c8 3000 	str.w	r3, [r8]
  410a3e:	3701      	adds	r7, #1
  410a40:	4414      	add	r4, r2
  410a42:	2f07      	cmp	r7, #7
  410a44:	9425      	str	r4, [sp, #148]	; 0x94
  410a46:	9724      	str	r7, [sp, #144]	; 0x90
  410a48:	f8c8 2004 	str.w	r2, [r8, #4]
  410a4c:	f300 8202 	bgt.w	410e54 <_svfprintf_r+0xe34>
  410a50:	f108 0808 	add.w	r8, r8, #8
  410a54:	2300      	movs	r3, #0
  410a56:	2200      	movs	r2, #0
  410a58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410a5c:	f7fe f834 	bl	40eac8 <__aeabi_dcmpeq>
  410a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410a62:	2800      	cmp	r0, #0
  410a64:	f040 8101 	bne.w	410c6a <_svfprintf_r+0xc4a>
  410a68:	3b01      	subs	r3, #1
  410a6a:	3701      	adds	r7, #1
  410a6c:	3601      	adds	r6, #1
  410a6e:	441c      	add	r4, r3
  410a70:	2f07      	cmp	r7, #7
  410a72:	9724      	str	r7, [sp, #144]	; 0x90
  410a74:	9425      	str	r4, [sp, #148]	; 0x94
  410a76:	f8c8 6000 	str.w	r6, [r8]
  410a7a:	f8c8 3004 	str.w	r3, [r8, #4]
  410a7e:	f300 8128 	bgt.w	410cd2 <_svfprintf_r+0xcb2>
  410a82:	f108 0808 	add.w	r8, r8, #8
  410a86:	9a15      	ldr	r2, [sp, #84]	; 0x54
  410a88:	f8c8 2004 	str.w	r2, [r8, #4]
  410a8c:	3701      	adds	r7, #1
  410a8e:	4414      	add	r4, r2
  410a90:	ab1f      	add	r3, sp, #124	; 0x7c
  410a92:	2f07      	cmp	r7, #7
  410a94:	9425      	str	r4, [sp, #148]	; 0x94
  410a96:	9724      	str	r7, [sp, #144]	; 0x90
  410a98:	f8c8 3000 	str.w	r3, [r8]
  410a9c:	f77f aca5 	ble.w	4103ea <_svfprintf_r+0x3ca>
  410aa0:	aa23      	add	r2, sp, #140	; 0x8c
  410aa2:	9907      	ldr	r1, [sp, #28]
  410aa4:	9808      	ldr	r0, [sp, #32]
  410aa6:	f002 f973 	bl	412d90 <__ssprint_r>
  410aaa:	2800      	cmp	r0, #0
  410aac:	f47f ab8a 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410ab0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410ab2:	46c8      	mov	r8, r9
  410ab4:	e49b      	b.n	4103ee <_svfprintf_r+0x3ce>
  410ab6:	aa23      	add	r2, sp, #140	; 0x8c
  410ab8:	9907      	ldr	r1, [sp, #28]
  410aba:	9808      	ldr	r0, [sp, #32]
  410abc:	f002 f968 	bl	412d90 <__ssprint_r>
  410ac0:	2800      	cmp	r0, #0
  410ac2:	f43f acdd 	beq.w	410480 <_svfprintf_r+0x460>
  410ac6:	f7ff bb7d 	b.w	4101c4 <_svfprintf_r+0x1a4>
  410aca:	f8dd b00c 	ldr.w	fp, [sp, #12]
  410ace:	2b01      	cmp	r3, #1
  410ad0:	f000 8135 	beq.w	410d3e <_svfprintf_r+0xd1e>
  410ad4:	2b02      	cmp	r3, #2
  410ad6:	d125      	bne.n	410b24 <_svfprintf_r+0xb04>
  410ad8:	f8cd b00c 	str.w	fp, [sp, #12]
  410adc:	2400      	movs	r4, #0
  410ade:	2500      	movs	r5, #0
  410ae0:	e611      	b.n	410706 <_svfprintf_r+0x6e6>
  410ae2:	aa23      	add	r2, sp, #140	; 0x8c
  410ae4:	9907      	ldr	r1, [sp, #28]
  410ae6:	9808      	ldr	r0, [sp, #32]
  410ae8:	f002 f952 	bl	412d90 <__ssprint_r>
  410aec:	2800      	cmp	r0, #0
  410aee:	f47f ab69 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410af2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410af4:	46c8      	mov	r8, r9
  410af6:	e467      	b.n	4103c8 <_svfprintf_r+0x3a8>
  410af8:	aa23      	add	r2, sp, #140	; 0x8c
  410afa:	9907      	ldr	r1, [sp, #28]
  410afc:	9808      	ldr	r0, [sp, #32]
  410afe:	f002 f947 	bl	412d90 <__ssprint_r>
  410b02:	2800      	cmp	r0, #0
  410b04:	f47f ab5e 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410b08:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410b0a:	46c8      	mov	r8, r9
  410b0c:	e41d      	b.n	41034a <_svfprintf_r+0x32a>
  410b0e:	aa23      	add	r2, sp, #140	; 0x8c
  410b10:	9907      	ldr	r1, [sp, #28]
  410b12:	9808      	ldr	r0, [sp, #32]
  410b14:	f002 f93c 	bl	412d90 <__ssprint_r>
  410b18:	2800      	cmp	r0, #0
  410b1a:	f47f ab53 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410b1e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410b20:	46c8      	mov	r8, r9
  410b22:	e402      	b.n	41032a <_svfprintf_r+0x30a>
  410b24:	f8cd b00c 	str.w	fp, [sp, #12]
  410b28:	2400      	movs	r4, #0
  410b2a:	2500      	movs	r5, #0
  410b2c:	4649      	mov	r1, r9
  410b2e:	e000      	b.n	410b32 <_svfprintf_r+0xb12>
  410b30:	4631      	mov	r1, r6
  410b32:	08e2      	lsrs	r2, r4, #3
  410b34:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  410b38:	08e8      	lsrs	r0, r5, #3
  410b3a:	f004 0307 	and.w	r3, r4, #7
  410b3e:	4605      	mov	r5, r0
  410b40:	4614      	mov	r4, r2
  410b42:	3330      	adds	r3, #48	; 0x30
  410b44:	ea54 0205 	orrs.w	r2, r4, r5
  410b48:	f801 3c01 	strb.w	r3, [r1, #-1]
  410b4c:	f101 36ff 	add.w	r6, r1, #4294967295
  410b50:	d1ee      	bne.n	410b30 <_svfprintf_r+0xb10>
  410b52:	9a03      	ldr	r2, [sp, #12]
  410b54:	07d2      	lsls	r2, r2, #31
  410b56:	f57f ade6 	bpl.w	410726 <_svfprintf_r+0x706>
  410b5a:	2b30      	cmp	r3, #48	; 0x30
  410b5c:	f43f ade3 	beq.w	410726 <_svfprintf_r+0x706>
  410b60:	3902      	subs	r1, #2
  410b62:	2330      	movs	r3, #48	; 0x30
  410b64:	f806 3c01 	strb.w	r3, [r6, #-1]
  410b68:	eba9 0301 	sub.w	r3, r9, r1
  410b6c:	930a      	str	r3, [sp, #40]	; 0x28
  410b6e:	460e      	mov	r6, r1
  410b70:	f7ff bb66 	b.w	410240 <_svfprintf_r+0x220>
  410b74:	991d      	ldr	r1, [sp, #116]	; 0x74
  410b76:	2900      	cmp	r1, #0
  410b78:	f340 8231 	ble.w	410fde <_svfprintf_r+0xfbe>
  410b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410b7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410b80:	4293      	cmp	r3, r2
  410b82:	bfa8      	it	ge
  410b84:	4613      	movge	r3, r2
  410b86:	2b00      	cmp	r3, #0
  410b88:	461f      	mov	r7, r3
  410b8a:	dd0d      	ble.n	410ba8 <_svfprintf_r+0xb88>
  410b8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410b8e:	f8c8 6000 	str.w	r6, [r8]
  410b92:	3301      	adds	r3, #1
  410b94:	443c      	add	r4, r7
  410b96:	2b07      	cmp	r3, #7
  410b98:	9425      	str	r4, [sp, #148]	; 0x94
  410b9a:	f8c8 7004 	str.w	r7, [r8, #4]
  410b9e:	9324      	str	r3, [sp, #144]	; 0x90
  410ba0:	f300 8321 	bgt.w	4111e6 <_svfprintf_r+0x11c6>
  410ba4:	f108 0808 	add.w	r8, r8, #8
  410ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  410baa:	2f00      	cmp	r7, #0
  410bac:	bfa8      	it	ge
  410bae:	1bdb      	subge	r3, r3, r7
  410bb0:	2b00      	cmp	r3, #0
  410bb2:	461f      	mov	r7, r3
  410bb4:	f340 80d7 	ble.w	410d66 <_svfprintf_r+0xd46>
  410bb8:	2f10      	cmp	r7, #16
  410bba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410bbc:	4d31      	ldr	r5, [pc, #196]	; (410c84 <_svfprintf_r+0xc64>)
  410bbe:	f340 81f0 	ble.w	410fa2 <_svfprintf_r+0xf82>
  410bc2:	4642      	mov	r2, r8
  410bc4:	4621      	mov	r1, r4
  410bc6:	46b0      	mov	r8, r6
  410bc8:	f04f 0b10 	mov.w	fp, #16
  410bcc:	462e      	mov	r6, r5
  410bce:	9c08      	ldr	r4, [sp, #32]
  410bd0:	9d07      	ldr	r5, [sp, #28]
  410bd2:	e004      	b.n	410bde <_svfprintf_r+0xbbe>
  410bd4:	3208      	adds	r2, #8
  410bd6:	3f10      	subs	r7, #16
  410bd8:	2f10      	cmp	r7, #16
  410bda:	f340 81de 	ble.w	410f9a <_svfprintf_r+0xf7a>
  410bde:	3301      	adds	r3, #1
  410be0:	3110      	adds	r1, #16
  410be2:	2b07      	cmp	r3, #7
  410be4:	9125      	str	r1, [sp, #148]	; 0x94
  410be6:	9324      	str	r3, [sp, #144]	; 0x90
  410be8:	e882 0840 	stmia.w	r2, {r6, fp}
  410bec:	ddf2      	ble.n	410bd4 <_svfprintf_r+0xbb4>
  410bee:	aa23      	add	r2, sp, #140	; 0x8c
  410bf0:	4629      	mov	r1, r5
  410bf2:	4620      	mov	r0, r4
  410bf4:	f002 f8cc 	bl	412d90 <__ssprint_r>
  410bf8:	2800      	cmp	r0, #0
  410bfa:	f47f aae3 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410bfe:	9925      	ldr	r1, [sp, #148]	; 0x94
  410c00:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410c02:	464a      	mov	r2, r9
  410c04:	e7e7      	b.n	410bd6 <_svfprintf_r+0xbb6>
  410c06:	2d00      	cmp	r5, #0
  410c08:	bf08      	it	eq
  410c0a:	2c0a      	cmpeq	r4, #10
  410c0c:	f0c0 8095 	bcc.w	410d3a <_svfprintf_r+0xd1a>
  410c10:	464e      	mov	r6, r9
  410c12:	4620      	mov	r0, r4
  410c14:	4629      	mov	r1, r5
  410c16:	220a      	movs	r2, #10
  410c18:	2300      	movs	r3, #0
  410c1a:	f002 f9ed 	bl	412ff8 <__aeabi_uldivmod>
  410c1e:	3230      	adds	r2, #48	; 0x30
  410c20:	f806 2d01 	strb.w	r2, [r6, #-1]!
  410c24:	4620      	mov	r0, r4
  410c26:	4629      	mov	r1, r5
  410c28:	2300      	movs	r3, #0
  410c2a:	220a      	movs	r2, #10
  410c2c:	f002 f9e4 	bl	412ff8 <__aeabi_uldivmod>
  410c30:	4604      	mov	r4, r0
  410c32:	460d      	mov	r5, r1
  410c34:	ea54 0305 	orrs.w	r3, r4, r5
  410c38:	d1eb      	bne.n	410c12 <_svfprintf_r+0xbf2>
  410c3a:	eba9 0306 	sub.w	r3, r9, r6
  410c3e:	930a      	str	r3, [sp, #40]	; 0x28
  410c40:	f7ff bafe 	b.w	410240 <_svfprintf_r+0x220>
  410c44:	9b06      	ldr	r3, [sp, #24]
  410c46:	930a      	str	r3, [sp, #40]	; 0x28
  410c48:	464e      	mov	r6, r9
  410c4a:	f7ff baf9 	b.w	410240 <_svfprintf_r+0x220>
  410c4e:	aa23      	add	r2, sp, #140	; 0x8c
  410c50:	9907      	ldr	r1, [sp, #28]
  410c52:	9808      	ldr	r0, [sp, #32]
  410c54:	f002 f89c 	bl	412d90 <__ssprint_r>
  410c58:	2800      	cmp	r0, #0
  410c5a:	f47f aab3 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410c5e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  410c62:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410c64:	46c8      	mov	r8, r9
  410c66:	f7ff bb50 	b.w	41030a <_svfprintf_r+0x2ea>
  410c6a:	1e5e      	subs	r6, r3, #1
  410c6c:	2e00      	cmp	r6, #0
  410c6e:	f77f af0a 	ble.w	410a86 <_svfprintf_r+0xa66>
  410c72:	2e10      	cmp	r6, #16
  410c74:	4d03      	ldr	r5, [pc, #12]	; (410c84 <_svfprintf_r+0xc64>)
  410c76:	dd23      	ble.n	410cc0 <_svfprintf_r+0xca0>
  410c78:	4622      	mov	r2, r4
  410c7a:	f04f 0b10 	mov.w	fp, #16
  410c7e:	9c08      	ldr	r4, [sp, #32]
  410c80:	e007      	b.n	410c92 <_svfprintf_r+0xc72>
  410c82:	bf00      	nop
  410c84:	00413990 	.word	0x00413990
  410c88:	3e10      	subs	r6, #16
  410c8a:	2e10      	cmp	r6, #16
  410c8c:	f108 0808 	add.w	r8, r8, #8
  410c90:	dd15      	ble.n	410cbe <_svfprintf_r+0xc9e>
  410c92:	3701      	adds	r7, #1
  410c94:	3210      	adds	r2, #16
  410c96:	2f07      	cmp	r7, #7
  410c98:	9225      	str	r2, [sp, #148]	; 0x94
  410c9a:	9724      	str	r7, [sp, #144]	; 0x90
  410c9c:	e888 0820 	stmia.w	r8, {r5, fp}
  410ca0:	ddf2      	ble.n	410c88 <_svfprintf_r+0xc68>
  410ca2:	aa23      	add	r2, sp, #140	; 0x8c
  410ca4:	9907      	ldr	r1, [sp, #28]
  410ca6:	4620      	mov	r0, r4
  410ca8:	f002 f872 	bl	412d90 <__ssprint_r>
  410cac:	2800      	cmp	r0, #0
  410cae:	f47f aa89 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410cb2:	3e10      	subs	r6, #16
  410cb4:	2e10      	cmp	r6, #16
  410cb6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  410cb8:	9f24      	ldr	r7, [sp, #144]	; 0x90
  410cba:	46c8      	mov	r8, r9
  410cbc:	dce9      	bgt.n	410c92 <_svfprintf_r+0xc72>
  410cbe:	4614      	mov	r4, r2
  410cc0:	3701      	adds	r7, #1
  410cc2:	4434      	add	r4, r6
  410cc4:	2f07      	cmp	r7, #7
  410cc6:	9425      	str	r4, [sp, #148]	; 0x94
  410cc8:	9724      	str	r7, [sp, #144]	; 0x90
  410cca:	e888 0060 	stmia.w	r8, {r5, r6}
  410cce:	f77f aed8 	ble.w	410a82 <_svfprintf_r+0xa62>
  410cd2:	aa23      	add	r2, sp, #140	; 0x8c
  410cd4:	9907      	ldr	r1, [sp, #28]
  410cd6:	9808      	ldr	r0, [sp, #32]
  410cd8:	f002 f85a 	bl	412d90 <__ssprint_r>
  410cdc:	2800      	cmp	r0, #0
  410cde:	f47f aa71 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410ce2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410ce4:	9f24      	ldr	r7, [sp, #144]	; 0x90
  410ce6:	46c8      	mov	r8, r9
  410ce8:	e6cd      	b.n	410a86 <_svfprintf_r+0xa66>
  410cea:	681c      	ldr	r4, [r3, #0]
  410cec:	3304      	adds	r3, #4
  410cee:	930b      	str	r3, [sp, #44]	; 0x2c
  410cf0:	2500      	movs	r5, #0
  410cf2:	e422      	b.n	41053a <_svfprintf_r+0x51a>
  410cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410cf6:	460a      	mov	r2, r1
  410cf8:	3204      	adds	r2, #4
  410cfa:	680c      	ldr	r4, [r1, #0]
  410cfc:	920b      	str	r2, [sp, #44]	; 0x2c
  410cfe:	2500      	movs	r5, #0
  410d00:	f7ff ba81 	b.w	410206 <_svfprintf_r+0x1e6>
  410d04:	3204      	adds	r2, #4
  410d06:	681c      	ldr	r4, [r3, #0]
  410d08:	920b      	str	r2, [sp, #44]	; 0x2c
  410d0a:	2301      	movs	r3, #1
  410d0c:	2500      	movs	r5, #0
  410d0e:	f7ff ba7a 	b.w	410206 <_svfprintf_r+0x1e6>
  410d12:	4614      	mov	r4, r2
  410d14:	3301      	adds	r3, #1
  410d16:	4434      	add	r4, r6
  410d18:	2b07      	cmp	r3, #7
  410d1a:	9425      	str	r4, [sp, #148]	; 0x94
  410d1c:	9324      	str	r3, [sp, #144]	; 0x90
  410d1e:	e888 0060 	stmia.w	r8, {r5, r6}
  410d22:	f77f ab62 	ble.w	4103ea <_svfprintf_r+0x3ca>
  410d26:	e6bb      	b.n	410aa0 <_svfprintf_r+0xa80>
  410d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410d2a:	6814      	ldr	r4, [r2, #0]
  410d2c:	4613      	mov	r3, r2
  410d2e:	3304      	adds	r3, #4
  410d30:	17e5      	asrs	r5, r4, #31
  410d32:	930b      	str	r3, [sp, #44]	; 0x2c
  410d34:	4622      	mov	r2, r4
  410d36:	462b      	mov	r3, r5
  410d38:	e4cd      	b.n	4106d6 <_svfprintf_r+0x6b6>
  410d3a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  410d3e:	f8cd b00c 	str.w	fp, [sp, #12]
  410d42:	ae40      	add	r6, sp, #256	; 0x100
  410d44:	3430      	adds	r4, #48	; 0x30
  410d46:	2301      	movs	r3, #1
  410d48:	f806 4d41 	strb.w	r4, [r6, #-65]!
  410d4c:	930a      	str	r3, [sp, #40]	; 0x28
  410d4e:	f7ff ba77 	b.w	410240 <_svfprintf_r+0x220>
  410d52:	aa23      	add	r2, sp, #140	; 0x8c
  410d54:	9907      	ldr	r1, [sp, #28]
  410d56:	9808      	ldr	r0, [sp, #32]
  410d58:	f002 f81a 	bl	412d90 <__ssprint_r>
  410d5c:	2800      	cmp	r0, #0
  410d5e:	f47f aa31 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410d62:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410d64:	46c8      	mov	r8, r9
  410d66:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  410d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410d6a:	429a      	cmp	r2, r3
  410d6c:	db44      	blt.n	410df8 <_svfprintf_r+0xdd8>
  410d6e:	9b03      	ldr	r3, [sp, #12]
  410d70:	07d9      	lsls	r1, r3, #31
  410d72:	d441      	bmi.n	410df8 <_svfprintf_r+0xdd8>
  410d74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410d76:	980e      	ldr	r0, [sp, #56]	; 0x38
  410d78:	1a9a      	subs	r2, r3, r2
  410d7a:	1a1d      	subs	r5, r3, r0
  410d7c:	4295      	cmp	r5, r2
  410d7e:	bfa8      	it	ge
  410d80:	4615      	movge	r5, r2
  410d82:	2d00      	cmp	r5, #0
  410d84:	dd0e      	ble.n	410da4 <_svfprintf_r+0xd84>
  410d86:	9924      	ldr	r1, [sp, #144]	; 0x90
  410d88:	f8c8 5004 	str.w	r5, [r8, #4]
  410d8c:	3101      	adds	r1, #1
  410d8e:	4406      	add	r6, r0
  410d90:	442c      	add	r4, r5
  410d92:	2907      	cmp	r1, #7
  410d94:	f8c8 6000 	str.w	r6, [r8]
  410d98:	9425      	str	r4, [sp, #148]	; 0x94
  410d9a:	9124      	str	r1, [sp, #144]	; 0x90
  410d9c:	f300 823a 	bgt.w	411214 <_svfprintf_r+0x11f4>
  410da0:	f108 0808 	add.w	r8, r8, #8
  410da4:	2d00      	cmp	r5, #0
  410da6:	bfac      	ite	ge
  410da8:	1b56      	subge	r6, r2, r5
  410daa:	4616      	movlt	r6, r2
  410dac:	2e00      	cmp	r6, #0
  410dae:	f77f ab1e 	ble.w	4103ee <_svfprintf_r+0x3ce>
  410db2:	2e10      	cmp	r6, #16
  410db4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410db6:	4db1      	ldr	r5, [pc, #708]	; (41107c <_svfprintf_r+0x105c>)
  410db8:	ddac      	ble.n	410d14 <_svfprintf_r+0xcf4>
  410dba:	4622      	mov	r2, r4
  410dbc:	2710      	movs	r7, #16
  410dbe:	f8dd b020 	ldr.w	fp, [sp, #32]
  410dc2:	9c07      	ldr	r4, [sp, #28]
  410dc4:	e004      	b.n	410dd0 <_svfprintf_r+0xdb0>
  410dc6:	f108 0808 	add.w	r8, r8, #8
  410dca:	3e10      	subs	r6, #16
  410dcc:	2e10      	cmp	r6, #16
  410dce:	dda0      	ble.n	410d12 <_svfprintf_r+0xcf2>
  410dd0:	3301      	adds	r3, #1
  410dd2:	3210      	adds	r2, #16
  410dd4:	2b07      	cmp	r3, #7
  410dd6:	9225      	str	r2, [sp, #148]	; 0x94
  410dd8:	9324      	str	r3, [sp, #144]	; 0x90
  410dda:	e888 00a0 	stmia.w	r8, {r5, r7}
  410dde:	ddf2      	ble.n	410dc6 <_svfprintf_r+0xda6>
  410de0:	aa23      	add	r2, sp, #140	; 0x8c
  410de2:	4621      	mov	r1, r4
  410de4:	4658      	mov	r0, fp
  410de6:	f001 ffd3 	bl	412d90 <__ssprint_r>
  410dea:	2800      	cmp	r0, #0
  410dec:	f47f a9ea 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410df0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  410df2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410df4:	46c8      	mov	r8, r9
  410df6:	e7e8      	b.n	410dca <_svfprintf_r+0xdaa>
  410df8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410dfa:	9813      	ldr	r0, [sp, #76]	; 0x4c
  410dfc:	9914      	ldr	r1, [sp, #80]	; 0x50
  410dfe:	f8c8 1000 	str.w	r1, [r8]
  410e02:	3301      	adds	r3, #1
  410e04:	4404      	add	r4, r0
  410e06:	2b07      	cmp	r3, #7
  410e08:	9425      	str	r4, [sp, #148]	; 0x94
  410e0a:	f8c8 0004 	str.w	r0, [r8, #4]
  410e0e:	9324      	str	r3, [sp, #144]	; 0x90
  410e10:	f300 81f4 	bgt.w	4111fc <_svfprintf_r+0x11dc>
  410e14:	f108 0808 	add.w	r8, r8, #8
  410e18:	e7ac      	b.n	410d74 <_svfprintf_r+0xd54>
  410e1a:	9b03      	ldr	r3, [sp, #12]
  410e1c:	07da      	lsls	r2, r3, #31
  410e1e:	f53f adfc 	bmi.w	410a1a <_svfprintf_r+0x9fa>
  410e22:	3701      	adds	r7, #1
  410e24:	3401      	adds	r4, #1
  410e26:	2301      	movs	r3, #1
  410e28:	2f07      	cmp	r7, #7
  410e2a:	9425      	str	r4, [sp, #148]	; 0x94
  410e2c:	9724      	str	r7, [sp, #144]	; 0x90
  410e2e:	f8c8 6000 	str.w	r6, [r8]
  410e32:	f8c8 3004 	str.w	r3, [r8, #4]
  410e36:	f77f ae24 	ble.w	410a82 <_svfprintf_r+0xa62>
  410e3a:	e74a      	b.n	410cd2 <_svfprintf_r+0xcb2>
  410e3c:	aa23      	add	r2, sp, #140	; 0x8c
  410e3e:	9907      	ldr	r1, [sp, #28]
  410e40:	9808      	ldr	r0, [sp, #32]
  410e42:	f001 ffa5 	bl	412d90 <__ssprint_r>
  410e46:	2800      	cmp	r0, #0
  410e48:	f47f a9bc 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410e4c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410e4e:	9f24      	ldr	r7, [sp, #144]	; 0x90
  410e50:	46c8      	mov	r8, r9
  410e52:	e5f0      	b.n	410a36 <_svfprintf_r+0xa16>
  410e54:	aa23      	add	r2, sp, #140	; 0x8c
  410e56:	9907      	ldr	r1, [sp, #28]
  410e58:	9808      	ldr	r0, [sp, #32]
  410e5a:	f001 ff99 	bl	412d90 <__ssprint_r>
  410e5e:	2800      	cmp	r0, #0
  410e60:	f47f a9b0 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410e64:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410e66:	9f24      	ldr	r7, [sp, #144]	; 0x90
  410e68:	46c8      	mov	r8, r9
  410e6a:	e5f3      	b.n	410a54 <_svfprintf_r+0xa34>
  410e6c:	464e      	mov	r6, r9
  410e6e:	f7ff b9e7 	b.w	410240 <_svfprintf_r+0x220>
  410e72:	aa23      	add	r2, sp, #140	; 0x8c
  410e74:	9907      	ldr	r1, [sp, #28]
  410e76:	9808      	ldr	r0, [sp, #32]
  410e78:	f001 ff8a 	bl	412d90 <__ssprint_r>
  410e7c:	2800      	cmp	r0, #0
  410e7e:	f47f a9a1 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410e82:	9c25      	ldr	r4, [sp, #148]	; 0x94
  410e84:	46c8      	mov	r8, r9
  410e86:	f7ff ba63 	b.w	410350 <_svfprintf_r+0x330>
  410e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  410e8e:	4602      	mov	r2, r0
  410e90:	460b      	mov	r3, r1
  410e92:	f7fd fe4b 	bl	40eb2c <__aeabi_dcmpun>
  410e96:	2800      	cmp	r0, #0
  410e98:	f040 8298 	bne.w	4113cc <_svfprintf_r+0x13ac>
  410e9c:	9b06      	ldr	r3, [sp, #24]
  410e9e:	3301      	adds	r3, #1
  410ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410ea2:	f023 0720 	bic.w	r7, r3, #32
  410ea6:	f000 81d2 	beq.w	41124e <_svfprintf_r+0x122e>
  410eaa:	2f47      	cmp	r7, #71	; 0x47
  410eac:	f000 8120 	beq.w	4110f0 <_svfprintf_r+0x10d0>
  410eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  410eb2:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
  410eb6:	2b00      	cmp	r3, #0
  410eb8:	9203      	str	r2, [sp, #12]
  410eba:	f2c0 81f0 	blt.w	41129e <_svfprintf_r+0x127e>
  410ebe:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
  410ec2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
  410ec6:	2300      	movs	r3, #0
  410ec8:	930c      	str	r3, [sp, #48]	; 0x30
  410eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410ecc:	2b66      	cmp	r3, #102	; 0x66
  410ece:	f000 81c1 	beq.w	411254 <_svfprintf_r+0x1234>
  410ed2:	2b46      	cmp	r3, #70	; 0x46
  410ed4:	f000 80f1 	beq.w	4110ba <_svfprintf_r+0x109a>
  410ed8:	2f45      	cmp	r7, #69	; 0x45
  410eda:	bf0c      	ite	eq
  410edc:	9b06      	ldreq	r3, [sp, #24]
  410ede:	9d06      	ldrne	r5, [sp, #24]
  410ee0:	9808      	ldr	r0, [sp, #32]
  410ee2:	bf08      	it	eq
  410ee4:	1c5d      	addeq	r5, r3, #1
  410ee6:	aa21      	add	r2, sp, #132	; 0x84
  410ee8:	ab1e      	add	r3, sp, #120	; 0x78
  410eea:	9201      	str	r2, [sp, #4]
  410eec:	9300      	str	r3, [sp, #0]
  410eee:	462a      	mov	r2, r5
  410ef0:	ab1d      	add	r3, sp, #116	; 0x74
  410ef2:	2102      	movs	r1, #2
  410ef4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
  410ef8:	f000 fbca 	bl	411690 <_dtoa_r>
  410efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410efe:	2b67      	cmp	r3, #103	; 0x67
  410f00:	4606      	mov	r6, r0
  410f02:	f040 81d5 	bne.w	4112b0 <_svfprintf_r+0x1290>
  410f06:	f01b 0f01 	tst.w	fp, #1
  410f0a:	f000 824e 	beq.w	4113aa <_svfprintf_r+0x138a>
  410f0e:	1974      	adds	r4, r6, r5
  410f10:	2200      	movs	r2, #0
  410f12:	2300      	movs	r3, #0
  410f14:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  410f18:	f7fd fdd6 	bl	40eac8 <__aeabi_dcmpeq>
  410f1c:	2800      	cmp	r0, #0
  410f1e:	f040 8160 	bne.w	4111e2 <_svfprintf_r+0x11c2>
  410f22:	9b21      	ldr	r3, [sp, #132]	; 0x84
  410f24:	42a3      	cmp	r3, r4
  410f26:	d206      	bcs.n	410f36 <_svfprintf_r+0xf16>
  410f28:	2130      	movs	r1, #48	; 0x30
  410f2a:	1c5a      	adds	r2, r3, #1
  410f2c:	9221      	str	r2, [sp, #132]	; 0x84
  410f2e:	7019      	strb	r1, [r3, #0]
  410f30:	9b21      	ldr	r3, [sp, #132]	; 0x84
  410f32:	429c      	cmp	r4, r3
  410f34:	d8f9      	bhi.n	410f2a <_svfprintf_r+0xf0a>
  410f36:	1b9b      	subs	r3, r3, r6
  410f38:	2f47      	cmp	r7, #71	; 0x47
  410f3a:	930f      	str	r3, [sp, #60]	; 0x3c
  410f3c:	f000 80f0 	beq.w	411120 <_svfprintf_r+0x1100>
  410f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410f42:	2b65      	cmp	r3, #101	; 0x65
  410f44:	f340 81c3 	ble.w	4112ce <_svfprintf_r+0x12ae>
  410f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  410f4a:	2b66      	cmp	r3, #102	; 0x66
  410f4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  410f4e:	930e      	str	r3, [sp, #56]	; 0x38
  410f50:	f000 81c0 	beq.w	4112d4 <_svfprintf_r+0x12b4>
  410f54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  410f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  410f58:	4619      	mov	r1, r3
  410f5a:	4291      	cmp	r1, r2
  410f5c:	f300 8191 	bgt.w	411282 <_svfprintf_r+0x1262>
  410f60:	f01b 0f01 	tst.w	fp, #1
  410f64:	f040 8223 	bne.w	4113ae <_svfprintf_r+0x138e>
  410f68:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  410f6c:	9304      	str	r3, [sp, #16]
  410f6e:	2367      	movs	r3, #103	; 0x67
  410f70:	920a      	str	r2, [sp, #40]	; 0x28
  410f72:	930d      	str	r3, [sp, #52]	; 0x34
  410f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  410f76:	2b00      	cmp	r3, #0
  410f78:	f040 80cb 	bne.w	411112 <_svfprintf_r+0x10f2>
  410f7c:	9306      	str	r3, [sp, #24]
  410f7e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  410f82:	f7ff b965 	b.w	410250 <_svfprintf_r+0x230>
  410f86:	f025 0507 	bic.w	r5, r5, #7
  410f8a:	ed95 7b00 	vldr	d7, [r5]
  410f8e:	f105 0308 	add.w	r3, r5, #8
  410f92:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  410f96:	930b      	str	r3, [sp, #44]	; 0x2c
  410f98:	e416      	b.n	4107c8 <_svfprintf_r+0x7a8>
  410f9a:	4635      	mov	r5, r6
  410f9c:	460c      	mov	r4, r1
  410f9e:	4646      	mov	r6, r8
  410fa0:	4690      	mov	r8, r2
  410fa2:	3301      	adds	r3, #1
  410fa4:	443c      	add	r4, r7
  410fa6:	2b07      	cmp	r3, #7
  410fa8:	9425      	str	r4, [sp, #148]	; 0x94
  410faa:	9324      	str	r3, [sp, #144]	; 0x90
  410fac:	e888 00a0 	stmia.w	r8, {r5, r7}
  410fb0:	f73f aecf 	bgt.w	410d52 <_svfprintf_r+0xd32>
  410fb4:	f108 0808 	add.w	r8, r8, #8
  410fb8:	e6d5      	b.n	410d66 <_svfprintf_r+0xd46>
  410fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  410fbc:	6813      	ldr	r3, [r2, #0]
  410fbe:	3204      	adds	r2, #4
  410fc0:	920b      	str	r2, [sp, #44]	; 0x2c
  410fc2:	9a05      	ldr	r2, [sp, #20]
  410fc4:	601a      	str	r2, [r3, #0]
  410fc6:	f7ff b852 	b.w	41006e <_svfprintf_r+0x4e>
  410fca:	aa23      	add	r2, sp, #140	; 0x8c
  410fcc:	9907      	ldr	r1, [sp, #28]
  410fce:	9808      	ldr	r0, [sp, #32]
  410fd0:	f001 fede 	bl	412d90 <__ssprint_r>
  410fd4:	2800      	cmp	r0, #0
  410fd6:	f47f a8f5 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  410fda:	46c8      	mov	r8, r9
  410fdc:	e488      	b.n	4108f0 <_svfprintf_r+0x8d0>
  410fde:	9b24      	ldr	r3, [sp, #144]	; 0x90
  410fe0:	4a27      	ldr	r2, [pc, #156]	; (411080 <_svfprintf_r+0x1060>)
  410fe2:	f8c8 2000 	str.w	r2, [r8]
  410fe6:	3301      	adds	r3, #1
  410fe8:	3401      	adds	r4, #1
  410fea:	2201      	movs	r2, #1
  410fec:	2b07      	cmp	r3, #7
  410fee:	9425      	str	r4, [sp, #148]	; 0x94
  410ff0:	9324      	str	r3, [sp, #144]	; 0x90
  410ff2:	f8c8 2004 	str.w	r2, [r8, #4]
  410ff6:	dc54      	bgt.n	4110a2 <_svfprintf_r+0x1082>
  410ff8:	f108 0808 	add.w	r8, r8, #8
  410ffc:	b929      	cbnz	r1, 41100a <_svfprintf_r+0xfea>
  410ffe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  411000:	b91b      	cbnz	r3, 41100a <_svfprintf_r+0xfea>
  411002:	9b03      	ldr	r3, [sp, #12]
  411004:	07d8      	lsls	r0, r3, #31
  411006:	f57f a9f2 	bpl.w	4103ee <_svfprintf_r+0x3ce>
  41100a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  41100c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  41100e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  411010:	f8c8 2000 	str.w	r2, [r8]
  411014:	3301      	adds	r3, #1
  411016:	4602      	mov	r2, r0
  411018:	4422      	add	r2, r4
  41101a:	2b07      	cmp	r3, #7
  41101c:	9225      	str	r2, [sp, #148]	; 0x94
  41101e:	f8c8 0004 	str.w	r0, [r8, #4]
  411022:	9324      	str	r3, [sp, #144]	; 0x90
  411024:	f300 8195 	bgt.w	411352 <_svfprintf_r+0x1332>
  411028:	f108 0808 	add.w	r8, r8, #8
  41102c:	2900      	cmp	r1, #0
  41102e:	f2c0 816d 	blt.w	41130c <_svfprintf_r+0x12ec>
  411032:	990f      	ldr	r1, [sp, #60]	; 0x3c
  411034:	f8c8 6000 	str.w	r6, [r8]
  411038:	3301      	adds	r3, #1
  41103a:	188c      	adds	r4, r1, r2
  41103c:	2b07      	cmp	r3, #7
  41103e:	9425      	str	r4, [sp, #148]	; 0x94
  411040:	9324      	str	r3, [sp, #144]	; 0x90
  411042:	f8c8 1004 	str.w	r1, [r8, #4]
  411046:	f77f a9d0 	ble.w	4103ea <_svfprintf_r+0x3ca>
  41104a:	e529      	b.n	410aa0 <_svfprintf_r+0xa80>
  41104c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  41104e:	9905      	ldr	r1, [sp, #20]
  411050:	6813      	ldr	r3, [r2, #0]
  411052:	17cd      	asrs	r5, r1, #31
  411054:	4608      	mov	r0, r1
  411056:	3204      	adds	r2, #4
  411058:	4629      	mov	r1, r5
  41105a:	920b      	str	r2, [sp, #44]	; 0x2c
  41105c:	e9c3 0100 	strd	r0, r1, [r3]
  411060:	f7ff b805 	b.w	41006e <_svfprintf_r+0x4e>
  411064:	aa23      	add	r2, sp, #140	; 0x8c
  411066:	9907      	ldr	r1, [sp, #28]
  411068:	9808      	ldr	r0, [sp, #32]
  41106a:	f001 fe91 	bl	412d90 <__ssprint_r>
  41106e:	2800      	cmp	r0, #0
  411070:	f47f a8a8 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  411074:	9c25      	ldr	r4, [sp, #148]	; 0x94
  411076:	46c8      	mov	r8, r9
  411078:	e453      	b.n	410922 <_svfprintf_r+0x902>
  41107a:	bf00      	nop
  41107c:	00413990 	.word	0x00413990
  411080:	0041397c 	.word	0x0041397c
  411084:	2140      	movs	r1, #64	; 0x40
  411086:	9808      	ldr	r0, [sp, #32]
  411088:	f7fe f8e6 	bl	40f258 <_malloc_r>
  41108c:	9a07      	ldr	r2, [sp, #28]
  41108e:	6010      	str	r0, [r2, #0]
  411090:	6110      	str	r0, [r2, #16]
  411092:	2800      	cmp	r0, #0
  411094:	f000 81f6 	beq.w	411484 <_svfprintf_r+0x1464>
  411098:	9a07      	ldr	r2, [sp, #28]
  41109a:	2340      	movs	r3, #64	; 0x40
  41109c:	6153      	str	r3, [r2, #20]
  41109e:	f7fe bfd6 	b.w	41004e <_svfprintf_r+0x2e>
  4110a2:	aa23      	add	r2, sp, #140	; 0x8c
  4110a4:	9907      	ldr	r1, [sp, #28]
  4110a6:	9808      	ldr	r0, [sp, #32]
  4110a8:	f001 fe72 	bl	412d90 <__ssprint_r>
  4110ac:	2800      	cmp	r0, #0
  4110ae:	f47f a889 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  4110b2:	991d      	ldr	r1, [sp, #116]	; 0x74
  4110b4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4110b6:	46c8      	mov	r8, r9
  4110b8:	e7a0      	b.n	410ffc <_svfprintf_r+0xfdc>
  4110ba:	9d06      	ldr	r5, [sp, #24]
  4110bc:	9808      	ldr	r0, [sp, #32]
  4110be:	aa21      	add	r2, sp, #132	; 0x84
  4110c0:	ab1e      	add	r3, sp, #120	; 0x78
  4110c2:	9201      	str	r2, [sp, #4]
  4110c4:	9300      	str	r3, [sp, #0]
  4110c6:	462a      	mov	r2, r5
  4110c8:	ab1d      	add	r3, sp, #116	; 0x74
  4110ca:	2103      	movs	r1, #3
  4110cc:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
  4110d0:	f000 fade 	bl	411690 <_dtoa_r>
  4110d4:	4606      	mov	r6, r0
  4110d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4110d8:	2b46      	cmp	r3, #70	; 0x46
  4110da:	eb06 0405 	add.w	r4, r6, r5
  4110de:	f47f af17 	bne.w	410f10 <_svfprintf_r+0xef0>
  4110e2:	7833      	ldrb	r3, [r6, #0]
  4110e4:	2b30      	cmp	r3, #48	; 0x30
  4110e6:	f000 817d 	beq.w	4113e4 <_svfprintf_r+0x13c4>
  4110ea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4110ec:	442c      	add	r4, r5
  4110ee:	e70f      	b.n	410f10 <_svfprintf_r+0xef0>
  4110f0:	9b06      	ldr	r3, [sp, #24]
  4110f2:	2b00      	cmp	r3, #0
  4110f4:	bf08      	it	eq
  4110f6:	2301      	moveq	r3, #1
  4110f8:	9306      	str	r3, [sp, #24]
  4110fa:	e6d9      	b.n	410eb0 <_svfprintf_r+0xe90>
  4110fc:	4630      	mov	r0, r6
  4110fe:	9406      	str	r4, [sp, #24]
  411100:	f7fe ff1e 	bl	40ff40 <strlen>
  411104:	950b      	str	r5, [sp, #44]	; 0x2c
  411106:	900a      	str	r0, [sp, #40]	; 0x28
  411108:	f8cd b00c 	str.w	fp, [sp, #12]
  41110c:	4603      	mov	r3, r0
  41110e:	f7ff b9eb 	b.w	4104e8 <_svfprintf_r+0x4c8>
  411112:	272d      	movs	r7, #45	; 0x2d
  411114:	2300      	movs	r3, #0
  411116:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  41111a:	9306      	str	r3, [sp, #24]
  41111c:	f7ff b899 	b.w	410252 <_svfprintf_r+0x232>
  411120:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  411122:	930e      	str	r3, [sp, #56]	; 0x38
  411124:	461a      	mov	r2, r3
  411126:	3303      	adds	r3, #3
  411128:	db04      	blt.n	411134 <_svfprintf_r+0x1114>
  41112a:	9b06      	ldr	r3, [sp, #24]
  41112c:	4619      	mov	r1, r3
  41112e:	4291      	cmp	r1, r2
  411130:	f6bf af10 	bge.w	410f54 <_svfprintf_r+0xf34>
  411134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411136:	3b02      	subs	r3, #2
  411138:	930d      	str	r3, [sp, #52]	; 0x34
  41113a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  41113e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
  411142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  411144:	3b01      	subs	r3, #1
  411146:	2b00      	cmp	r3, #0
  411148:	931d      	str	r3, [sp, #116]	; 0x74
  41114a:	bfbd      	ittte	lt
  41114c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
  41114e:	f1c3 0301 	rsblt	r3, r3, #1
  411152:	222d      	movlt	r2, #45	; 0x2d
  411154:	222b      	movge	r2, #43	; 0x2b
  411156:	2b09      	cmp	r3, #9
  411158:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  41115c:	f340 811d 	ble.w	41139a <_svfprintf_r+0x137a>
  411160:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  411164:	4620      	mov	r0, r4
  411166:	4daf      	ldr	r5, [pc, #700]	; (411424 <_svfprintf_r+0x1404>)
  411168:	e000      	b.n	41116c <_svfprintf_r+0x114c>
  41116a:	4610      	mov	r0, r2
  41116c:	fb85 1203 	smull	r1, r2, r5, r3
  411170:	17d9      	asrs	r1, r3, #31
  411172:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  411176:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  41117a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  41117e:	3230      	adds	r2, #48	; 0x30
  411180:	2909      	cmp	r1, #9
  411182:	f800 2c01 	strb.w	r2, [r0, #-1]
  411186:	460b      	mov	r3, r1
  411188:	f100 32ff 	add.w	r2, r0, #4294967295
  41118c:	dced      	bgt.n	41116a <_svfprintf_r+0x114a>
  41118e:	3330      	adds	r3, #48	; 0x30
  411190:	3802      	subs	r0, #2
  411192:	b2d9      	uxtb	r1, r3
  411194:	4284      	cmp	r4, r0
  411196:	f802 1c01 	strb.w	r1, [r2, #-1]
  41119a:	f240 8170 	bls.w	41147e <_svfprintf_r+0x145e>
  41119e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  4111a2:	4613      	mov	r3, r2
  4111a4:	e001      	b.n	4111aa <_svfprintf_r+0x118a>
  4111a6:	f813 1b01 	ldrb.w	r1, [r3], #1
  4111aa:	f800 1b01 	strb.w	r1, [r0], #1
  4111ae:	42a3      	cmp	r3, r4
  4111b0:	d1f9      	bne.n	4111a6 <_svfprintf_r+0x1186>
  4111b2:	3301      	adds	r3, #1
  4111b4:	1a9b      	subs	r3, r3, r2
  4111b6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4111ba:	4413      	add	r3, r2
  4111bc:	aa1f      	add	r2, sp, #124	; 0x7c
  4111be:	1a9b      	subs	r3, r3, r2
  4111c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4111c2:	9315      	str	r3, [sp, #84]	; 0x54
  4111c4:	2a01      	cmp	r2, #1
  4111c6:	4413      	add	r3, r2
  4111c8:	930a      	str	r3, [sp, #40]	; 0x28
  4111ca:	f340 8120 	ble.w	41140e <_svfprintf_r+0x13ee>
  4111ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4111d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4111d2:	4413      	add	r3, r2
  4111d4:	930a      	str	r3, [sp, #40]	; 0x28
  4111d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4111da:	9304      	str	r3, [sp, #16]
  4111dc:	2300      	movs	r3, #0
  4111de:	930e      	str	r3, [sp, #56]	; 0x38
  4111e0:	e6c8      	b.n	410f74 <_svfprintf_r+0xf54>
  4111e2:	4623      	mov	r3, r4
  4111e4:	e6a7      	b.n	410f36 <_svfprintf_r+0xf16>
  4111e6:	aa23      	add	r2, sp, #140	; 0x8c
  4111e8:	9907      	ldr	r1, [sp, #28]
  4111ea:	9808      	ldr	r0, [sp, #32]
  4111ec:	f001 fdd0 	bl	412d90 <__ssprint_r>
  4111f0:	2800      	cmp	r0, #0
  4111f2:	f47e afe7 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  4111f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4111f8:	46c8      	mov	r8, r9
  4111fa:	e4d5      	b.n	410ba8 <_svfprintf_r+0xb88>
  4111fc:	aa23      	add	r2, sp, #140	; 0x8c
  4111fe:	9907      	ldr	r1, [sp, #28]
  411200:	9808      	ldr	r0, [sp, #32]
  411202:	f001 fdc5 	bl	412d90 <__ssprint_r>
  411206:	2800      	cmp	r0, #0
  411208:	f47e afdc 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  41120c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  41120e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  411210:	46c8      	mov	r8, r9
  411212:	e5af      	b.n	410d74 <_svfprintf_r+0xd54>
  411214:	aa23      	add	r2, sp, #140	; 0x8c
  411216:	9907      	ldr	r1, [sp, #28]
  411218:	9808      	ldr	r0, [sp, #32]
  41121a:	f001 fdb9 	bl	412d90 <__ssprint_r>
  41121e:	2800      	cmp	r0, #0
  411220:	f47e afd0 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  411224:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  411226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  411228:	9c25      	ldr	r4, [sp, #148]	; 0x94
  41122a:	1a9a      	subs	r2, r3, r2
  41122c:	46c8      	mov	r8, r9
  41122e:	e5b9      	b.n	410da4 <_svfprintf_r+0xd84>
  411230:	9b06      	ldr	r3, [sp, #24]
  411232:	960e      	str	r6, [sp, #56]	; 0x38
  411234:	2b06      	cmp	r3, #6
  411236:	bf28      	it	cs
  411238:	2306      	movcs	r3, #6
  41123a:	9606      	str	r6, [sp, #24]
  41123c:	4637      	mov	r7, r6
  41123e:	9304      	str	r3, [sp, #16]
  411240:	950b      	str	r5, [sp, #44]	; 0x2c
  411242:	f8cd b00c 	str.w	fp, [sp, #12]
  411246:	930a      	str	r3, [sp, #40]	; 0x28
  411248:	4e77      	ldr	r6, [pc, #476]	; (411428 <_svfprintf_r+0x1408>)
  41124a:	f7ff b801 	b.w	410250 <_svfprintf_r+0x230>
  41124e:	2306      	movs	r3, #6
  411250:	9306      	str	r3, [sp, #24]
  411252:	e62d      	b.n	410eb0 <_svfprintf_r+0xe90>
  411254:	9c06      	ldr	r4, [sp, #24]
  411256:	9808      	ldr	r0, [sp, #32]
  411258:	aa21      	add	r2, sp, #132	; 0x84
  41125a:	ab1e      	add	r3, sp, #120	; 0x78
  41125c:	9201      	str	r2, [sp, #4]
  41125e:	9300      	str	r3, [sp, #0]
  411260:	4622      	mov	r2, r4
  411262:	ab1d      	add	r3, sp, #116	; 0x74
  411264:	2103      	movs	r1, #3
  411266:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
  41126a:	f000 fa11 	bl	411690 <_dtoa_r>
  41126e:	4623      	mov	r3, r4
  411270:	4606      	mov	r6, r0
  411272:	1904      	adds	r4, r0, r4
  411274:	461d      	mov	r5, r3
  411276:	e734      	b.n	4110e2 <_svfprintf_r+0x10c2>
  411278:	272d      	movs	r7, #45	; 0x2d
  41127a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  41127e:	f7ff baca 	b.w	410816 <_svfprintf_r+0x7f6>
  411282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  411284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  411286:	4413      	add	r3, r2
  411288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41128a:	930a      	str	r3, [sp, #40]	; 0x28
  41128c:	2a00      	cmp	r2, #0
  41128e:	f340 80b7 	ble.w	411400 <_svfprintf_r+0x13e0>
  411292:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  411296:	9304      	str	r3, [sp, #16]
  411298:	2367      	movs	r3, #103	; 0x67
  41129a:	930d      	str	r3, [sp, #52]	; 0x34
  41129c:	e66a      	b.n	410f74 <_svfprintf_r+0xf54>
  41129e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
  4112a2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  4112a6:	9319      	str	r3, [sp, #100]	; 0x64
  4112a8:	232d      	movs	r3, #45	; 0x2d
  4112aa:	9118      	str	r1, [sp, #96]	; 0x60
  4112ac:	930c      	str	r3, [sp, #48]	; 0x30
  4112ae:	e60c      	b.n	410eca <_svfprintf_r+0xeaa>
  4112b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4112b2:	2b47      	cmp	r3, #71	; 0x47
  4112b4:	f47f ae2b 	bne.w	410f0e <_svfprintf_r+0xeee>
  4112b8:	f01b 0f01 	tst.w	fp, #1
  4112bc:	f47f af0b 	bne.w	4110d6 <_svfprintf_r+0x10b6>
  4112c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4112c2:	2f47      	cmp	r7, #71	; 0x47
  4112c4:	eba3 0306 	sub.w	r3, r3, r6
  4112c8:	930f      	str	r3, [sp, #60]	; 0x3c
  4112ca:	f43f af29 	beq.w	411120 <_svfprintf_r+0x1100>
  4112ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4112d0:	930e      	str	r3, [sp, #56]	; 0x38
  4112d2:	e732      	b.n	41113a <_svfprintf_r+0x111a>
  4112d4:	2b00      	cmp	r3, #0
  4112d6:	f340 80af 	ble.w	411438 <_svfprintf_r+0x1418>
  4112da:	9a06      	ldr	r2, [sp, #24]
  4112dc:	2a00      	cmp	r2, #0
  4112de:	d16b      	bne.n	4113b8 <_svfprintf_r+0x1398>
  4112e0:	f01b 0f01 	tst.w	fp, #1
  4112e4:	d168      	bne.n	4113b8 <_svfprintf_r+0x1398>
  4112e6:	9304      	str	r3, [sp, #16]
  4112e8:	930a      	str	r3, [sp, #40]	; 0x28
  4112ea:	e643      	b.n	410f74 <_svfprintf_r+0xf54>
  4112ec:	9b06      	ldr	r3, [sp, #24]
  4112ee:	9304      	str	r3, [sp, #16]
  4112f0:	930a      	str	r3, [sp, #40]	; 0x28
  4112f2:	9006      	str	r0, [sp, #24]
  4112f4:	950b      	str	r5, [sp, #44]	; 0x2c
  4112f6:	f8cd b00c 	str.w	fp, [sp, #12]
  4112fa:	900e      	str	r0, [sp, #56]	; 0x38
  4112fc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  411300:	f7fe bfa6 	b.w	410250 <_svfprintf_r+0x230>
  411304:	2000      	movs	r0, #0
  411306:	9006      	str	r0, [sp, #24]
  411308:	f7fe bee4 	b.w	4100d4 <_svfprintf_r+0xb4>
  41130c:	424f      	negs	r7, r1
  41130e:	3110      	adds	r1, #16
  411310:	4d46      	ldr	r5, [pc, #280]	; (41142c <_svfprintf_r+0x140c>)
  411312:	da2b      	bge.n	41136c <_svfprintf_r+0x134c>
  411314:	2410      	movs	r4, #16
  411316:	f8dd b020 	ldr.w	fp, [sp, #32]
  41131a:	e004      	b.n	411326 <_svfprintf_r+0x1306>
  41131c:	f108 0808 	add.w	r8, r8, #8
  411320:	3f10      	subs	r7, #16
  411322:	2f10      	cmp	r7, #16
  411324:	dd22      	ble.n	41136c <_svfprintf_r+0x134c>
  411326:	3301      	adds	r3, #1
  411328:	3210      	adds	r2, #16
  41132a:	2b07      	cmp	r3, #7
  41132c:	9225      	str	r2, [sp, #148]	; 0x94
  41132e:	9324      	str	r3, [sp, #144]	; 0x90
  411330:	f8c8 5000 	str.w	r5, [r8]
  411334:	f8c8 4004 	str.w	r4, [r8, #4]
  411338:	ddf0      	ble.n	41131c <_svfprintf_r+0x12fc>
  41133a:	aa23      	add	r2, sp, #140	; 0x8c
  41133c:	9907      	ldr	r1, [sp, #28]
  41133e:	4658      	mov	r0, fp
  411340:	f001 fd26 	bl	412d90 <__ssprint_r>
  411344:	2800      	cmp	r0, #0
  411346:	f47e af3d 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  41134a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  41134c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  41134e:	46c8      	mov	r8, r9
  411350:	e7e6      	b.n	411320 <_svfprintf_r+0x1300>
  411352:	aa23      	add	r2, sp, #140	; 0x8c
  411354:	9907      	ldr	r1, [sp, #28]
  411356:	9808      	ldr	r0, [sp, #32]
  411358:	f001 fd1a 	bl	412d90 <__ssprint_r>
  41135c:	2800      	cmp	r0, #0
  41135e:	f47e af31 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  411362:	991d      	ldr	r1, [sp, #116]	; 0x74
  411364:	9a25      	ldr	r2, [sp, #148]	; 0x94
  411366:	9b24      	ldr	r3, [sp, #144]	; 0x90
  411368:	46c8      	mov	r8, r9
  41136a:	e65f      	b.n	41102c <_svfprintf_r+0x100c>
  41136c:	3301      	adds	r3, #1
  41136e:	443a      	add	r2, r7
  411370:	2b07      	cmp	r3, #7
  411372:	e888 00a0 	stmia.w	r8, {r5, r7}
  411376:	9225      	str	r2, [sp, #148]	; 0x94
  411378:	9324      	str	r3, [sp, #144]	; 0x90
  41137a:	f108 0808 	add.w	r8, r8, #8
  41137e:	f77f ae58 	ble.w	411032 <_svfprintf_r+0x1012>
  411382:	aa23      	add	r2, sp, #140	; 0x8c
  411384:	9907      	ldr	r1, [sp, #28]
  411386:	9808      	ldr	r0, [sp, #32]
  411388:	f001 fd02 	bl	412d90 <__ssprint_r>
  41138c:	2800      	cmp	r0, #0
  41138e:	f47e af19 	bne.w	4101c4 <_svfprintf_r+0x1a4>
  411392:	9a25      	ldr	r2, [sp, #148]	; 0x94
  411394:	9b24      	ldr	r3, [sp, #144]	; 0x90
  411396:	46c8      	mov	r8, r9
  411398:	e64b      	b.n	411032 <_svfprintf_r+0x1012>
  41139a:	3330      	adds	r3, #48	; 0x30
  41139c:	2230      	movs	r2, #48	; 0x30
  41139e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  4113a2:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  4113a6:	ab20      	add	r3, sp, #128	; 0x80
  4113a8:	e708      	b.n	4111bc <_svfprintf_r+0x119c>
  4113aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4113ac:	e5c3      	b.n	410f36 <_svfprintf_r+0xf16>
  4113ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4113b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4113b2:	4413      	add	r3, r2
  4113b4:	930a      	str	r3, [sp, #40]	; 0x28
  4113b6:	e76c      	b.n	411292 <_svfprintf_r+0x1272>
  4113b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4113ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4113bc:	4413      	add	r3, r2
  4113be:	9a06      	ldr	r2, [sp, #24]
  4113c0:	441a      	add	r2, r3
  4113c2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4113c6:	920a      	str	r2, [sp, #40]	; 0x28
  4113c8:	9304      	str	r3, [sp, #16]
  4113ca:	e5d3      	b.n	410f74 <_svfprintf_r+0xf54>
  4113cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4113ce:	4e18      	ldr	r6, [pc, #96]	; (411430 <_svfprintf_r+0x1410>)
  4113d0:	2b00      	cmp	r3, #0
  4113d2:	bfb6      	itet	lt
  4113d4:	272d      	movlt	r7, #45	; 0x2d
  4113d6:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
  4113da:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
  4113de:	4b15      	ldr	r3, [pc, #84]	; (411434 <_svfprintf_r+0x1414>)
  4113e0:	f7ff ba1b 	b.w	41081a <_svfprintf_r+0x7fa>
  4113e4:	2200      	movs	r2, #0
  4113e6:	2300      	movs	r3, #0
  4113e8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  4113ec:	f7fd fb6c 	bl	40eac8 <__aeabi_dcmpeq>
  4113f0:	2800      	cmp	r0, #0
  4113f2:	f47f ae7a 	bne.w	4110ea <_svfprintf_r+0x10ca>
  4113f6:	f1c5 0501 	rsb	r5, r5, #1
  4113fa:	951d      	str	r5, [sp, #116]	; 0x74
  4113fc:	442c      	add	r4, r5
  4113fe:	e587      	b.n	410f10 <_svfprintf_r+0xef0>
  411400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  411402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411404:	f1c3 0301 	rsb	r3, r3, #1
  411408:	441a      	add	r2, r3
  41140a:	4613      	mov	r3, r2
  41140c:	e7d2      	b.n	4113b4 <_svfprintf_r+0x1394>
  41140e:	f01b 0301 	ands.w	r3, fp, #1
  411412:	930e      	str	r3, [sp, #56]	; 0x38
  411414:	f47f aedb 	bne.w	4111ce <_svfprintf_r+0x11ae>
  411418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41141a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  41141e:	9304      	str	r3, [sp, #16]
  411420:	e5a8      	b.n	410f74 <_svfprintf_r+0xf54>
  411422:	bf00      	nop
  411424:	66666667 	.word	0x66666667
  411428:	00413974 	.word	0x00413974
  41142c:	00413990 	.word	0x00413990
  411430:	00413948 	.word	0x00413948
  411434:	00413944 	.word	0x00413944
  411438:	9b06      	ldr	r3, [sp, #24]
  41143a:	b913      	cbnz	r3, 411442 <_svfprintf_r+0x1422>
  41143c:	f01b 0f01 	tst.w	fp, #1
  411440:	d002      	beq.n	411448 <_svfprintf_r+0x1428>
  411442:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  411444:	3301      	adds	r3, #1
  411446:	e7ba      	b.n	4113be <_svfprintf_r+0x139e>
  411448:	2301      	movs	r3, #1
  41144a:	e74c      	b.n	4112e6 <_svfprintf_r+0x12c6>
  41144c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  41144e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  411452:	6828      	ldr	r0, [r5, #0]
  411454:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  411458:	9006      	str	r0, [sp, #24]
  41145a:	4628      	mov	r0, r5
  41145c:	3004      	adds	r0, #4
  41145e:	46a2      	mov	sl, r4
  411460:	900b      	str	r0, [sp, #44]	; 0x2c
  411462:	f7fe be35 	b.w	4100d0 <_svfprintf_r+0xb0>
  411466:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  41146a:	f7ff b852 	b.w	410512 <_svfprintf_r+0x4f2>
  41146e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  411472:	f7ff b8de 	b.w	410632 <_svfprintf_r+0x612>
  411476:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  41147a:	f7ff ba07 	b.w	41088c <_svfprintf_r+0x86c>
  41147e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  411482:	e69b      	b.n	4111bc <_svfprintf_r+0x119c>
  411484:	9a08      	ldr	r2, [sp, #32]
  411486:	230c      	movs	r3, #12
  411488:	6013      	str	r3, [r2, #0]
  41148a:	f04f 33ff 	mov.w	r3, #4294967295
  41148e:	9305      	str	r3, [sp, #20]
  411490:	f7fe bea1 	b.w	4101d6 <_svfprintf_r+0x1b6>
  411494:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  411498:	f7ff b986 	b.w	4107a8 <_svfprintf_r+0x788>
  41149c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4114a0:	f7ff b962 	b.w	410768 <_svfprintf_r+0x748>
  4114a4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4114a8:	f7ff b945 	b.w	410736 <_svfprintf_r+0x716>
  4114ac:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4114b0:	f7ff b8fe 	b.w	4106b0 <_svfprintf_r+0x690>

004114b4 <_vsnprintf_r>:
  4114b4:	b570      	push	{r4, r5, r6, lr}
  4114b6:	1e14      	subs	r4, r2, #0
  4114b8:	b09a      	sub	sp, #104	; 0x68
  4114ba:	4605      	mov	r5, r0
  4114bc:	db2e      	blt.n	41151c <_vsnprintf_r+0x68>
  4114be:	461a      	mov	r2, r3
  4114c0:	f44f 7302 	mov.w	r3, #520	; 0x208
  4114c4:	9100      	str	r1, [sp, #0]
  4114c6:	9104      	str	r1, [sp, #16]
  4114c8:	f8ad 300c 	strh.w	r3, [sp, #12]
  4114cc:	d011      	beq.n	4114f2 <_vsnprintf_r+0x3e>
  4114ce:	3c01      	subs	r4, #1
  4114d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4114d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4114d6:	9402      	str	r4, [sp, #8]
  4114d8:	4669      	mov	r1, sp
  4114da:	9405      	str	r4, [sp, #20]
  4114dc:	f8ad 600e 	strh.w	r6, [sp, #14]
  4114e0:	f7fe fd9e 	bl	410020 <_svfprintf_r>
  4114e4:	1c42      	adds	r2, r0, #1
  4114e6:	db12      	blt.n	41150e <_vsnprintf_r+0x5a>
  4114e8:	9b00      	ldr	r3, [sp, #0]
  4114ea:	2200      	movs	r2, #0
  4114ec:	701a      	strb	r2, [r3, #0]
  4114ee:	b01a      	add	sp, #104	; 0x68
  4114f0:	bd70      	pop	{r4, r5, r6, pc}
  4114f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4114f4:	9402      	str	r4, [sp, #8]
  4114f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4114fa:	4669      	mov	r1, sp
  4114fc:	9405      	str	r4, [sp, #20]
  4114fe:	f8ad 600e 	strh.w	r6, [sp, #14]
  411502:	f7fe fd8d 	bl	410020 <_svfprintf_r>
  411506:	1c43      	adds	r3, r0, #1
  411508:	db04      	blt.n	411514 <_vsnprintf_r+0x60>
  41150a:	b01a      	add	sp, #104	; 0x68
  41150c:	bd70      	pop	{r4, r5, r6, pc}
  41150e:	238b      	movs	r3, #139	; 0x8b
  411510:	602b      	str	r3, [r5, #0]
  411512:	e7e9      	b.n	4114e8 <_vsnprintf_r+0x34>
  411514:	238b      	movs	r3, #139	; 0x8b
  411516:	602b      	str	r3, [r5, #0]
  411518:	b01a      	add	sp, #104	; 0x68
  41151a:	bd70      	pop	{r4, r5, r6, pc}
  41151c:	238b      	movs	r3, #139	; 0x8b
  41151e:	6003      	str	r3, [r0, #0]
  411520:	f04f 30ff 	mov.w	r0, #4294967295
  411524:	e7f1      	b.n	41150a <_vsnprintf_r+0x56>
  411526:	bf00      	nop

00411528 <vsnprintf>:
  411528:	b510      	push	{r4, lr}
  41152a:	b082      	sub	sp, #8
  41152c:	4c05      	ldr	r4, [pc, #20]	; (411544 <vsnprintf+0x1c>)
  41152e:	9300      	str	r3, [sp, #0]
  411530:	6824      	ldr	r4, [r4, #0]
  411532:	4613      	mov	r3, r2
  411534:	460a      	mov	r2, r1
  411536:	4601      	mov	r1, r0
  411538:	4620      	mov	r0, r4
  41153a:	f7ff ffbb 	bl	4114b4 <_vsnprintf_r>
  41153e:	b002      	add	sp, #8
  411540:	bd10      	pop	{r4, pc}
  411542:	bf00      	nop
  411544:	2000251c 	.word	0x2000251c

00411548 <register_fini>:
  411548:	4b02      	ldr	r3, [pc, #8]	; (411554 <register_fini+0xc>)
  41154a:	b113      	cbz	r3, 411552 <register_fini+0xa>
  41154c:	4802      	ldr	r0, [pc, #8]	; (411558 <register_fini+0x10>)
  41154e:	f000 b805 	b.w	41155c <atexit>
  411552:	4770      	bx	lr
  411554:	00000000 	.word	0x00000000
  411558:	004124dd 	.word	0x004124dd

0041155c <atexit>:
  41155c:	2300      	movs	r3, #0
  41155e:	4601      	mov	r1, r0
  411560:	461a      	mov	r2, r3
  411562:	4618      	mov	r0, r3
  411564:	f001 bc92 	b.w	412e8c <__register_exitproc>

00411568 <quorem>:
  411568:	6902      	ldr	r2, [r0, #16]
  41156a:	690b      	ldr	r3, [r1, #16]
  41156c:	4293      	cmp	r3, r2
  41156e:	f300 808d 	bgt.w	41168c <quorem+0x124>
  411572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411576:	f103 38ff 	add.w	r8, r3, #4294967295
  41157a:	f101 0714 	add.w	r7, r1, #20
  41157e:	f100 0b14 	add.w	fp, r0, #20
  411582:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  411586:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  41158a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  41158e:	b083      	sub	sp, #12
  411590:	3201      	adds	r2, #1
  411592:	fbb3 f9f2 	udiv	r9, r3, r2
  411596:	eb0b 0304 	add.w	r3, fp, r4
  41159a:	9400      	str	r4, [sp, #0]
  41159c:	eb07 0a04 	add.w	sl, r7, r4
  4115a0:	9301      	str	r3, [sp, #4]
  4115a2:	f1b9 0f00 	cmp.w	r9, #0
  4115a6:	d039      	beq.n	41161c <quorem+0xb4>
  4115a8:	2500      	movs	r5, #0
  4115aa:	462e      	mov	r6, r5
  4115ac:	46bc      	mov	ip, r7
  4115ae:	46de      	mov	lr, fp
  4115b0:	f85c 4b04 	ldr.w	r4, [ip], #4
  4115b4:	f8de 3000 	ldr.w	r3, [lr]
  4115b8:	b2a2      	uxth	r2, r4
  4115ba:	fb09 5502 	mla	r5, r9, r2, r5
  4115be:	0c22      	lsrs	r2, r4, #16
  4115c0:	0c2c      	lsrs	r4, r5, #16
  4115c2:	fb09 4202 	mla	r2, r9, r2, r4
  4115c6:	b2ad      	uxth	r5, r5
  4115c8:	1b75      	subs	r5, r6, r5
  4115ca:	b296      	uxth	r6, r2
  4115cc:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4115d0:	fa15 f383 	uxtah	r3, r5, r3
  4115d4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4115d8:	b29b      	uxth	r3, r3
  4115da:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4115de:	45e2      	cmp	sl, ip
  4115e0:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4115e4:	f84e 3b04 	str.w	r3, [lr], #4
  4115e8:	ea4f 4626 	mov.w	r6, r6, asr #16
  4115ec:	d2e0      	bcs.n	4115b0 <quorem+0x48>
  4115ee:	9b00      	ldr	r3, [sp, #0]
  4115f0:	f85b 3003 	ldr.w	r3, [fp, r3]
  4115f4:	b993      	cbnz	r3, 41161c <quorem+0xb4>
  4115f6:	9c01      	ldr	r4, [sp, #4]
  4115f8:	1f23      	subs	r3, r4, #4
  4115fa:	459b      	cmp	fp, r3
  4115fc:	d20c      	bcs.n	411618 <quorem+0xb0>
  4115fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
  411602:	b94b      	cbnz	r3, 411618 <quorem+0xb0>
  411604:	f1a4 0308 	sub.w	r3, r4, #8
  411608:	e002      	b.n	411610 <quorem+0xa8>
  41160a:	681a      	ldr	r2, [r3, #0]
  41160c:	3b04      	subs	r3, #4
  41160e:	b91a      	cbnz	r2, 411618 <quorem+0xb0>
  411610:	459b      	cmp	fp, r3
  411612:	f108 38ff 	add.w	r8, r8, #4294967295
  411616:	d3f8      	bcc.n	41160a <quorem+0xa2>
  411618:	f8c0 8010 	str.w	r8, [r0, #16]
  41161c:	4604      	mov	r4, r0
  41161e:	f001 fab9 	bl	412b94 <__mcmp>
  411622:	2800      	cmp	r0, #0
  411624:	db2e      	blt.n	411684 <quorem+0x11c>
  411626:	f109 0901 	add.w	r9, r9, #1
  41162a:	465d      	mov	r5, fp
  41162c:	2300      	movs	r3, #0
  41162e:	f857 1b04 	ldr.w	r1, [r7], #4
  411632:	6828      	ldr	r0, [r5, #0]
  411634:	b28a      	uxth	r2, r1
  411636:	1a9a      	subs	r2, r3, r2
  411638:	0c0b      	lsrs	r3, r1, #16
  41163a:	fa12 f280 	uxtah	r2, r2, r0
  41163e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  411642:	eb03 4322 	add.w	r3, r3, r2, asr #16
  411646:	b292      	uxth	r2, r2
  411648:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  41164c:	45ba      	cmp	sl, r7
  41164e:	f845 2b04 	str.w	r2, [r5], #4
  411652:	ea4f 4323 	mov.w	r3, r3, asr #16
  411656:	d2ea      	bcs.n	41162e <quorem+0xc6>
  411658:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  41165c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  411660:	b982      	cbnz	r2, 411684 <quorem+0x11c>
  411662:	1f1a      	subs	r2, r3, #4
  411664:	4593      	cmp	fp, r2
  411666:	d20b      	bcs.n	411680 <quorem+0x118>
  411668:	f853 2c04 	ldr.w	r2, [r3, #-4]
  41166c:	b942      	cbnz	r2, 411680 <quorem+0x118>
  41166e:	3b08      	subs	r3, #8
  411670:	e002      	b.n	411678 <quorem+0x110>
  411672:	681a      	ldr	r2, [r3, #0]
  411674:	3b04      	subs	r3, #4
  411676:	b91a      	cbnz	r2, 411680 <quorem+0x118>
  411678:	459b      	cmp	fp, r3
  41167a:	f108 38ff 	add.w	r8, r8, #4294967295
  41167e:	d3f8      	bcc.n	411672 <quorem+0x10a>
  411680:	f8c4 8010 	str.w	r8, [r4, #16]
  411684:	4648      	mov	r0, r9
  411686:	b003      	add	sp, #12
  411688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41168c:	2000      	movs	r0, #0
  41168e:	4770      	bx	lr

00411690 <_dtoa_r>:
  411690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411694:	ec57 6b10 	vmov	r6, r7, d0
  411698:	b097      	sub	sp, #92	; 0x5c
  41169a:	6c05      	ldr	r5, [r0, #64]	; 0x40
  41169c:	9102      	str	r1, [sp, #8]
  41169e:	4604      	mov	r4, r0
  4116a0:	4693      	mov	fp, r2
  4116a2:	9303      	str	r3, [sp, #12]
  4116a4:	e9cd 6700 	strd	r6, r7, [sp]
  4116a8:	b14d      	cbz	r5, 4116be <_dtoa_r+0x2e>
  4116aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4116ac:	606a      	str	r2, [r5, #4]
  4116ae:	2301      	movs	r3, #1
  4116b0:	4093      	lsls	r3, r2
  4116b2:	60ab      	str	r3, [r5, #8]
  4116b4:	4629      	mov	r1, r5
  4116b6:	f001 f895 	bl	4127e4 <_Bfree>
  4116ba:	2300      	movs	r3, #0
  4116bc:	6423      	str	r3, [r4, #64]	; 0x40
  4116be:	e9dd 2300 	ldrd	r2, r3, [sp]
  4116c2:	2b00      	cmp	r3, #0
  4116c4:	4699      	mov	r9, r3
  4116c6:	db38      	blt.n	41173a <_dtoa_r+0xaa>
  4116c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4116ca:	2300      	movs	r3, #0
  4116cc:	6013      	str	r3, [r2, #0]
  4116ce:	4ba0      	ldr	r3, [pc, #640]	; (411950 <_dtoa_r+0x2c0>)
  4116d0:	ea33 0309 	bics.w	r3, r3, r9
  4116d4:	d017      	beq.n	411706 <_dtoa_r+0x76>
  4116d6:	e9dd 6700 	ldrd	r6, r7, [sp]
  4116da:	2200      	movs	r2, #0
  4116dc:	2300      	movs	r3, #0
  4116de:	4630      	mov	r0, r6
  4116e0:	4639      	mov	r1, r7
  4116e2:	f7fd f9f1 	bl	40eac8 <__aeabi_dcmpeq>
  4116e6:	4680      	mov	r8, r0
  4116e8:	2800      	cmp	r0, #0
  4116ea:	d02f      	beq.n	41174c <_dtoa_r+0xbc>
  4116ec:	9a03      	ldr	r2, [sp, #12]
  4116ee:	2301      	movs	r3, #1
  4116f0:	6013      	str	r3, [r2, #0]
  4116f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4116f4:	2b00      	cmp	r3, #0
  4116f6:	f000 80c4 	beq.w	411882 <_dtoa_r+0x1f2>
  4116fa:	4896      	ldr	r0, [pc, #600]	; (411954 <_dtoa_r+0x2c4>)
  4116fc:	6018      	str	r0, [r3, #0]
  4116fe:	3801      	subs	r0, #1
  411700:	b017      	add	sp, #92	; 0x5c
  411702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411706:	9a03      	ldr	r2, [sp, #12]
  411708:	f242 730f 	movw	r3, #9999	; 0x270f
  41170c:	6013      	str	r3, [r2, #0]
  41170e:	9b00      	ldr	r3, [sp, #0]
  411710:	b96b      	cbnz	r3, 41172e <_dtoa_r+0x9e>
  411712:	f3c9 0313 	ubfx	r3, r9, #0, #20
  411716:	b953      	cbnz	r3, 41172e <_dtoa_r+0x9e>
  411718:	9b21      	ldr	r3, [sp, #132]	; 0x84
  41171a:	488f      	ldr	r0, [pc, #572]	; (411958 <_dtoa_r+0x2c8>)
  41171c:	2b00      	cmp	r3, #0
  41171e:	d0ef      	beq.n	411700 <_dtoa_r+0x70>
  411720:	f100 0308 	add.w	r3, r0, #8
  411724:	9a21      	ldr	r2, [sp, #132]	; 0x84
  411726:	6013      	str	r3, [r2, #0]
  411728:	b017      	add	sp, #92	; 0x5c
  41172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41172e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  411730:	488a      	ldr	r0, [pc, #552]	; (41195c <_dtoa_r+0x2cc>)
  411732:	2b00      	cmp	r3, #0
  411734:	d0e4      	beq.n	411700 <_dtoa_r+0x70>
  411736:	1cc3      	adds	r3, r0, #3
  411738:	e7f4      	b.n	411724 <_dtoa_r+0x94>
  41173a:	9a01      	ldr	r2, [sp, #4]
  41173c:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
  411740:	9a20      	ldr	r2, [sp, #128]	; 0x80
  411742:	f8cd 9004 	str.w	r9, [sp, #4]
  411746:	2301      	movs	r3, #1
  411748:	6013      	str	r3, [r2, #0]
  41174a:	e7c0      	b.n	4116ce <_dtoa_r+0x3e>
  41174c:	aa14      	add	r2, sp, #80	; 0x50
  41174e:	a915      	add	r1, sp, #84	; 0x54
  411750:	ec47 6b10 	vmov	d0, r6, r7
  411754:	4620      	mov	r0, r4
  411756:	f001 fabd 	bl	412cd4 <__d2b>
  41175a:	ea5f 5519 	movs.w	r5, r9, lsr #20
  41175e:	4682      	mov	sl, r0
  411760:	d073      	beq.n	41184a <_dtoa_r+0x1ba>
  411762:	f3c7 0313 	ubfx	r3, r7, #0, #20
  411766:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  41176a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  41176e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  411772:	4630      	mov	r0, r6
  411774:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  411778:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  41177c:	2200      	movs	r2, #0
  41177e:	4b78      	ldr	r3, [pc, #480]	; (411960 <_dtoa_r+0x2d0>)
  411780:	f7fc fd86 	bl	40e290 <__aeabi_dsub>
  411784:	a36c      	add	r3, pc, #432	; (adr r3, 411938 <_dtoa_r+0x2a8>)
  411786:	e9d3 2300 	ldrd	r2, r3, [r3]
  41178a:	f7fc ff35 	bl	40e5f8 <__aeabi_dmul>
  41178e:	a36c      	add	r3, pc, #432	; (adr r3, 411940 <_dtoa_r+0x2b0>)
  411790:	e9d3 2300 	ldrd	r2, r3, [r3]
  411794:	f7fc fd7e 	bl	40e294 <__adddf3>
  411798:	4606      	mov	r6, r0
  41179a:	4628      	mov	r0, r5
  41179c:	460f      	mov	r7, r1
  41179e:	f7fc fec5 	bl	40e52c <__aeabi_i2d>
  4117a2:	a369      	add	r3, pc, #420	; (adr r3, 411948 <_dtoa_r+0x2b8>)
  4117a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4117a8:	f7fc ff26 	bl	40e5f8 <__aeabi_dmul>
  4117ac:	4602      	mov	r2, r0
  4117ae:	460b      	mov	r3, r1
  4117b0:	4630      	mov	r0, r6
  4117b2:	4639      	mov	r1, r7
  4117b4:	f7fc fd6e 	bl	40e294 <__adddf3>
  4117b8:	4606      	mov	r6, r0
  4117ba:	460f      	mov	r7, r1
  4117bc:	f7fd f9cc 	bl	40eb58 <__aeabi_d2iz>
  4117c0:	2200      	movs	r2, #0
  4117c2:	9004      	str	r0, [sp, #16]
  4117c4:	2300      	movs	r3, #0
  4117c6:	4630      	mov	r0, r6
  4117c8:	4639      	mov	r1, r7
  4117ca:	f7fd f987 	bl	40eadc <__aeabi_dcmplt>
  4117ce:	2800      	cmp	r0, #0
  4117d0:	f040 816f 	bne.w	411ab2 <_dtoa_r+0x422>
  4117d4:	9e04      	ldr	r6, [sp, #16]
  4117d6:	2e16      	cmp	r6, #22
  4117d8:	f200 8159 	bhi.w	411a8e <_dtoa_r+0x3fe>
  4117dc:	4b61      	ldr	r3, [pc, #388]	; (411964 <_dtoa_r+0x2d4>)
  4117de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4117e2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4117e6:	e9dd 2300 	ldrd	r2, r3, [sp]
  4117ea:	f7fd f995 	bl	40eb18 <__aeabi_dcmpgt>
  4117ee:	2800      	cmp	r0, #0
  4117f0:	f000 81c4 	beq.w	411b7c <_dtoa_r+0x4ec>
  4117f4:	1e73      	subs	r3, r6, #1
  4117f6:	9304      	str	r3, [sp, #16]
  4117f8:	2300      	movs	r3, #0
  4117fa:	930c      	str	r3, [sp, #48]	; 0x30
  4117fc:	eba8 0505 	sub.w	r5, r8, r5
  411800:	1e6b      	subs	r3, r5, #1
  411802:	9305      	str	r3, [sp, #20]
  411804:	f100 814f 	bmi.w	411aa6 <_dtoa_r+0x416>
  411808:	2300      	movs	r3, #0
  41180a:	9306      	str	r3, [sp, #24]
  41180c:	9b04      	ldr	r3, [sp, #16]
  41180e:	2b00      	cmp	r3, #0
  411810:	f2c0 8140 	blt.w	411a94 <_dtoa_r+0x404>
  411814:	9a05      	ldr	r2, [sp, #20]
  411816:	930b      	str	r3, [sp, #44]	; 0x2c
  411818:	4611      	mov	r1, r2
  41181a:	4419      	add	r1, r3
  41181c:	2300      	movs	r3, #0
  41181e:	9105      	str	r1, [sp, #20]
  411820:	930a      	str	r3, [sp, #40]	; 0x28
  411822:	9b02      	ldr	r3, [sp, #8]
  411824:	2b09      	cmp	r3, #9
  411826:	d82e      	bhi.n	411886 <_dtoa_r+0x1f6>
  411828:	2b05      	cmp	r3, #5
  41182a:	f340 8651 	ble.w	4124d0 <_dtoa_r+0xe40>
  41182e:	3b04      	subs	r3, #4
  411830:	9302      	str	r3, [sp, #8]
  411832:	2700      	movs	r7, #0
  411834:	9b02      	ldr	r3, [sp, #8]
  411836:	3b02      	subs	r3, #2
  411838:	2b03      	cmp	r3, #3
  41183a:	f200 8633 	bhi.w	4124a4 <_dtoa_r+0xe14>
  41183e:	e8df f013 	tbh	[pc, r3, lsl #1]
  411842:	03d6      	.short	0x03d6
  411844:	03e302cb 	.word	0x03e302cb
  411848:	0464      	.short	0x0464
  41184a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  41184e:	9d15      	ldr	r5, [sp, #84]	; 0x54
  411850:	4445      	add	r5, r8
  411852:	f205 4332 	addw	r3, r5, #1074	; 0x432
  411856:	2b20      	cmp	r3, #32
  411858:	f340 818a 	ble.w	411b70 <_dtoa_r+0x4e0>
  41185c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  411860:	fa09 f903 	lsl.w	r9, r9, r3
  411864:	9b00      	ldr	r3, [sp, #0]
  411866:	f205 4012 	addw	r0, r5, #1042	; 0x412
  41186a:	fa23 f000 	lsr.w	r0, r3, r0
  41186e:	ea40 0009 	orr.w	r0, r0, r9
  411872:	f7fc fe4b 	bl	40e50c <__aeabi_ui2d>
  411876:	2301      	movs	r3, #1
  411878:	3d01      	subs	r5, #1
  41187a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  41187e:	9310      	str	r3, [sp, #64]	; 0x40
  411880:	e77c      	b.n	41177c <_dtoa_r+0xec>
  411882:	4839      	ldr	r0, [pc, #228]	; (411968 <_dtoa_r+0x2d8>)
  411884:	e73c      	b.n	411700 <_dtoa_r+0x70>
  411886:	2100      	movs	r1, #0
  411888:	6461      	str	r1, [r4, #68]	; 0x44
  41188a:	4620      	mov	r0, r4
  41188c:	468b      	mov	fp, r1
  41188e:	f000 ff83 	bl	412798 <_Balloc>
  411892:	f04f 33ff 	mov.w	r3, #4294967295
  411896:	9308      	str	r3, [sp, #32]
  411898:	930d      	str	r3, [sp, #52]	; 0x34
  41189a:	2301      	movs	r3, #1
  41189c:	9007      	str	r0, [sp, #28]
  41189e:	6420      	str	r0, [r4, #64]	; 0x40
  4118a0:	f8cd b008 	str.w	fp, [sp, #8]
  4118a4:	9309      	str	r3, [sp, #36]	; 0x24
  4118a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4118a8:	2b00      	cmp	r3, #0
  4118aa:	f2c0 80d0 	blt.w	411a4e <_dtoa_r+0x3be>
  4118ae:	9a04      	ldr	r2, [sp, #16]
  4118b0:	2a0e      	cmp	r2, #14
  4118b2:	f300 80cc 	bgt.w	411a4e <_dtoa_r+0x3be>
  4118b6:	4b2b      	ldr	r3, [pc, #172]	; (411964 <_dtoa_r+0x2d4>)
  4118b8:	f1bb 0f00 	cmp.w	fp, #0
  4118bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4118c0:	e9d3 8900 	ldrd	r8, r9, [r3]
  4118c4:	f2c0 83be 	blt.w	412044 <_dtoa_r+0x9b4>
  4118c8:	e9dd 6700 	ldrd	r6, r7, [sp]
  4118cc:	4642      	mov	r2, r8
  4118ce:	464b      	mov	r3, r9
  4118d0:	4630      	mov	r0, r6
  4118d2:	4639      	mov	r1, r7
  4118d4:	f7fc ffba 	bl	40e84c <__aeabi_ddiv>
  4118d8:	f7fd f93e 	bl	40eb58 <__aeabi_d2iz>
  4118dc:	4683      	mov	fp, r0
  4118de:	f7fc fe25 	bl	40e52c <__aeabi_i2d>
  4118e2:	4642      	mov	r2, r8
  4118e4:	464b      	mov	r3, r9
  4118e6:	f7fc fe87 	bl	40e5f8 <__aeabi_dmul>
  4118ea:	460b      	mov	r3, r1
  4118ec:	4602      	mov	r2, r0
  4118ee:	4639      	mov	r1, r7
  4118f0:	4630      	mov	r0, r6
  4118f2:	f7fc fccd 	bl	40e290 <__aeabi_dsub>
  4118f6:	9d07      	ldr	r5, [sp, #28]
  4118f8:	f10b 0330 	add.w	r3, fp, #48	; 0x30
  4118fc:	702b      	strb	r3, [r5, #0]
  4118fe:	9b08      	ldr	r3, [sp, #32]
  411900:	2b01      	cmp	r3, #1
  411902:	4606      	mov	r6, r0
  411904:	460f      	mov	r7, r1
  411906:	f105 0501 	add.w	r5, r5, #1
  41190a:	d061      	beq.n	4119d0 <_dtoa_r+0x340>
  41190c:	2200      	movs	r2, #0
  41190e:	4b17      	ldr	r3, [pc, #92]	; (41196c <_dtoa_r+0x2dc>)
  411910:	f7fc fe72 	bl	40e5f8 <__aeabi_dmul>
  411914:	2200      	movs	r2, #0
  411916:	2300      	movs	r3, #0
  411918:	4606      	mov	r6, r0
  41191a:	460f      	mov	r7, r1
  41191c:	f7fd f8d4 	bl	40eac8 <__aeabi_dcmpeq>
  411920:	2800      	cmp	r0, #0
  411922:	f040 8081 	bne.w	411a28 <_dtoa_r+0x398>
  411926:	f8cd a000 	str.w	sl, [sp]
  41192a:	9402      	str	r4, [sp, #8]
  41192c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  411930:	9c08      	ldr	r4, [sp, #32]
  411932:	e028      	b.n	411986 <_dtoa_r+0x2f6>
  411934:	f3af 8000 	nop.w
  411938:	636f4361 	.word	0x636f4361
  41193c:	3fd287a7 	.word	0x3fd287a7
  411940:	8b60c8b3 	.word	0x8b60c8b3
  411944:	3fc68a28 	.word	0x3fc68a28
  411948:	509f79fb 	.word	0x509f79fb
  41194c:	3fd34413 	.word	0x3fd34413
  411950:	7ff00000 	.word	0x7ff00000
  411954:	0041397d 	.word	0x0041397d
  411958:	004139a0 	.word	0x004139a0
  41195c:	004139ac 	.word	0x004139ac
  411960:	3ff80000 	.word	0x3ff80000
  411964:	004139d8 	.word	0x004139d8
  411968:	0041397c 	.word	0x0041397c
  41196c:	40240000 	.word	0x40240000
  411970:	f7fc fe42 	bl	40e5f8 <__aeabi_dmul>
  411974:	2200      	movs	r2, #0
  411976:	2300      	movs	r3, #0
  411978:	4606      	mov	r6, r0
  41197a:	460f      	mov	r7, r1
  41197c:	f7fd f8a4 	bl	40eac8 <__aeabi_dcmpeq>
  411980:	2800      	cmp	r0, #0
  411982:	f040 83c5 	bne.w	412110 <_dtoa_r+0xa80>
  411986:	4642      	mov	r2, r8
  411988:	464b      	mov	r3, r9
  41198a:	4630      	mov	r0, r6
  41198c:	4639      	mov	r1, r7
  41198e:	f7fc ff5d 	bl	40e84c <__aeabi_ddiv>
  411992:	f7fd f8e1 	bl	40eb58 <__aeabi_d2iz>
  411996:	4683      	mov	fp, r0
  411998:	f7fc fdc8 	bl	40e52c <__aeabi_i2d>
  41199c:	4642      	mov	r2, r8
  41199e:	464b      	mov	r3, r9
  4119a0:	f7fc fe2a 	bl	40e5f8 <__aeabi_dmul>
  4119a4:	4602      	mov	r2, r0
  4119a6:	460b      	mov	r3, r1
  4119a8:	4630      	mov	r0, r6
  4119aa:	4639      	mov	r1, r7
  4119ac:	f7fc fc70 	bl	40e290 <__aeabi_dsub>
  4119b0:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
  4119b4:	f805 eb01 	strb.w	lr, [r5], #1
  4119b8:	eba5 0e0a 	sub.w	lr, r5, sl
  4119bc:	45a6      	cmp	lr, r4
  4119be:	4606      	mov	r6, r0
  4119c0:	460f      	mov	r7, r1
  4119c2:	f04f 0200 	mov.w	r2, #0
  4119c6:	4b6e      	ldr	r3, [pc, #440]	; (411b80 <_dtoa_r+0x4f0>)
  4119c8:	d1d2      	bne.n	411970 <_dtoa_r+0x2e0>
  4119ca:	f8dd a000 	ldr.w	sl, [sp]
  4119ce:	9c02      	ldr	r4, [sp, #8]
  4119d0:	4632      	mov	r2, r6
  4119d2:	463b      	mov	r3, r7
  4119d4:	4630      	mov	r0, r6
  4119d6:	4639      	mov	r1, r7
  4119d8:	f7fc fc5c 	bl	40e294 <__adddf3>
  4119dc:	4606      	mov	r6, r0
  4119de:	460f      	mov	r7, r1
  4119e0:	4602      	mov	r2, r0
  4119e2:	460b      	mov	r3, r1
  4119e4:	4640      	mov	r0, r8
  4119e6:	4649      	mov	r1, r9
  4119e8:	f7fd f878 	bl	40eadc <__aeabi_dcmplt>
  4119ec:	b948      	cbnz	r0, 411a02 <_dtoa_r+0x372>
  4119ee:	4632      	mov	r2, r6
  4119f0:	463b      	mov	r3, r7
  4119f2:	4640      	mov	r0, r8
  4119f4:	4649      	mov	r1, r9
  4119f6:	f7fd f867 	bl	40eac8 <__aeabi_dcmpeq>
  4119fa:	b1a8      	cbz	r0, 411a28 <_dtoa_r+0x398>
  4119fc:	f01b 0f01 	tst.w	fp, #1
  411a00:	d012      	beq.n	411a28 <_dtoa_r+0x398>
  411a02:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  411a06:	9a07      	ldr	r2, [sp, #28]
  411a08:	1e6b      	subs	r3, r5, #1
  411a0a:	e004      	b.n	411a16 <_dtoa_r+0x386>
  411a0c:	429a      	cmp	r2, r3
  411a0e:	f000 842d 	beq.w	41226c <_dtoa_r+0xbdc>
  411a12:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  411a16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  411a1a:	f103 0501 	add.w	r5, r3, #1
  411a1e:	d0f5      	beq.n	411a0c <_dtoa_r+0x37c>
  411a20:	f108 0801 	add.w	r8, r8, #1
  411a24:	f883 8000 	strb.w	r8, [r3]
  411a28:	4651      	mov	r1, sl
  411a2a:	4620      	mov	r0, r4
  411a2c:	f000 feda 	bl	4127e4 <_Bfree>
  411a30:	2200      	movs	r2, #0
  411a32:	9b04      	ldr	r3, [sp, #16]
  411a34:	702a      	strb	r2, [r5, #0]
  411a36:	9a03      	ldr	r2, [sp, #12]
  411a38:	3301      	adds	r3, #1
  411a3a:	6013      	str	r3, [r2, #0]
  411a3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  411a3e:	2b00      	cmp	r3, #0
  411a40:	f000 83a3 	beq.w	41218a <_dtoa_r+0xafa>
  411a44:	9807      	ldr	r0, [sp, #28]
  411a46:	601d      	str	r5, [r3, #0]
  411a48:	b017      	add	sp, #92	; 0x5c
  411a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  411a50:	2a00      	cmp	r2, #0
  411a52:	d040      	beq.n	411ad6 <_dtoa_r+0x446>
  411a54:	9a02      	ldr	r2, [sp, #8]
  411a56:	2a01      	cmp	r2, #1
  411a58:	f340 831c 	ble.w	412094 <_dtoa_r+0xa04>
  411a5c:	9b08      	ldr	r3, [sp, #32]
  411a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  411a60:	1e5f      	subs	r7, r3, #1
  411a62:	42ba      	cmp	r2, r7
  411a64:	f2c0 8394 	blt.w	412190 <_dtoa_r+0xb00>
  411a68:	1bd7      	subs	r7, r2, r7
  411a6a:	9b08      	ldr	r3, [sp, #32]
  411a6c:	2b00      	cmp	r3, #0
  411a6e:	f2c0 847e 	blt.w	41236e <_dtoa_r+0xcde>
  411a72:	9d06      	ldr	r5, [sp, #24]
  411a74:	9b08      	ldr	r3, [sp, #32]
  411a76:	9a06      	ldr	r2, [sp, #24]
  411a78:	441a      	add	r2, r3
  411a7a:	9206      	str	r2, [sp, #24]
  411a7c:	9a05      	ldr	r2, [sp, #20]
  411a7e:	2101      	movs	r1, #1
  411a80:	441a      	add	r2, r3
  411a82:	4620      	mov	r0, r4
  411a84:	9205      	str	r2, [sp, #20]
  411a86:	f000 ff47 	bl	412918 <__i2b>
  411a8a:	4606      	mov	r6, r0
  411a8c:	e026      	b.n	411adc <_dtoa_r+0x44c>
  411a8e:	2301      	movs	r3, #1
  411a90:	930c      	str	r3, [sp, #48]	; 0x30
  411a92:	e6b3      	b.n	4117fc <_dtoa_r+0x16c>
  411a94:	9a06      	ldr	r2, [sp, #24]
  411a96:	9b04      	ldr	r3, [sp, #16]
  411a98:	1ad2      	subs	r2, r2, r3
  411a9a:	425b      	negs	r3, r3
  411a9c:	930a      	str	r3, [sp, #40]	; 0x28
  411a9e:	2300      	movs	r3, #0
  411aa0:	9206      	str	r2, [sp, #24]
  411aa2:	930b      	str	r3, [sp, #44]	; 0x2c
  411aa4:	e6bd      	b.n	411822 <_dtoa_r+0x192>
  411aa6:	f1c5 0301 	rsb	r3, r5, #1
  411aaa:	9306      	str	r3, [sp, #24]
  411aac:	2300      	movs	r3, #0
  411aae:	9305      	str	r3, [sp, #20]
  411ab0:	e6ac      	b.n	41180c <_dtoa_r+0x17c>
  411ab2:	f8dd 9010 	ldr.w	r9, [sp, #16]
  411ab6:	4648      	mov	r0, r9
  411ab8:	f7fc fd38 	bl	40e52c <__aeabi_i2d>
  411abc:	4602      	mov	r2, r0
  411abe:	460b      	mov	r3, r1
  411ac0:	4630      	mov	r0, r6
  411ac2:	4639      	mov	r1, r7
  411ac4:	f7fd f800 	bl	40eac8 <__aeabi_dcmpeq>
  411ac8:	2800      	cmp	r0, #0
  411aca:	f47f ae83 	bne.w	4117d4 <_dtoa_r+0x144>
  411ace:	f109 33ff 	add.w	r3, r9, #4294967295
  411ad2:	9304      	str	r3, [sp, #16]
  411ad4:	e67e      	b.n	4117d4 <_dtoa_r+0x144>
  411ad6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  411ad8:	9d06      	ldr	r5, [sp, #24]
  411ada:	9e09      	ldr	r6, [sp, #36]	; 0x24
  411adc:	2d00      	cmp	r5, #0
  411ade:	dd0c      	ble.n	411afa <_dtoa_r+0x46a>
  411ae0:	9905      	ldr	r1, [sp, #20]
  411ae2:	2900      	cmp	r1, #0
  411ae4:	460b      	mov	r3, r1
  411ae6:	dd08      	ble.n	411afa <_dtoa_r+0x46a>
  411ae8:	42a9      	cmp	r1, r5
  411aea:	9a06      	ldr	r2, [sp, #24]
  411aec:	bfa8      	it	ge
  411aee:	462b      	movge	r3, r5
  411af0:	1ad2      	subs	r2, r2, r3
  411af2:	1aed      	subs	r5, r5, r3
  411af4:	1acb      	subs	r3, r1, r3
  411af6:	9206      	str	r2, [sp, #24]
  411af8:	9305      	str	r3, [sp, #20]
  411afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411afc:	b1d3      	cbz	r3, 411b34 <_dtoa_r+0x4a4>
  411afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411b00:	2b00      	cmp	r3, #0
  411b02:	f000 82c0 	beq.w	412086 <_dtoa_r+0x9f6>
  411b06:	2f00      	cmp	r7, #0
  411b08:	dd10      	ble.n	411b2c <_dtoa_r+0x49c>
  411b0a:	4631      	mov	r1, r6
  411b0c:	463a      	mov	r2, r7
  411b0e:	4620      	mov	r0, r4
  411b10:	f000 ff9e 	bl	412a50 <__pow5mult>
  411b14:	4652      	mov	r2, sl
  411b16:	4601      	mov	r1, r0
  411b18:	4606      	mov	r6, r0
  411b1a:	4620      	mov	r0, r4
  411b1c:	f000 ff06 	bl	41292c <__multiply>
  411b20:	4651      	mov	r1, sl
  411b22:	4680      	mov	r8, r0
  411b24:	4620      	mov	r0, r4
  411b26:	f000 fe5d 	bl	4127e4 <_Bfree>
  411b2a:	46c2      	mov	sl, r8
  411b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  411b2e:	1bda      	subs	r2, r3, r7
  411b30:	f040 82aa 	bne.w	412088 <_dtoa_r+0x9f8>
  411b34:	2101      	movs	r1, #1
  411b36:	4620      	mov	r0, r4
  411b38:	f000 feee 	bl	412918 <__i2b>
  411b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  411b3e:	2b00      	cmp	r3, #0
  411b40:	4681      	mov	r9, r0
  411b42:	dd1f      	ble.n	411b84 <_dtoa_r+0x4f4>
  411b44:	4601      	mov	r1, r0
  411b46:	461a      	mov	r2, r3
  411b48:	4620      	mov	r0, r4
  411b4a:	f000 ff81 	bl	412a50 <__pow5mult>
  411b4e:	9b02      	ldr	r3, [sp, #8]
  411b50:	2b01      	cmp	r3, #1
  411b52:	4681      	mov	r9, r0
  411b54:	f340 825b 	ble.w	41200e <_dtoa_r+0x97e>
  411b58:	f04f 0800 	mov.w	r8, #0
  411b5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
  411b60:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  411b64:	6918      	ldr	r0, [r3, #16]
  411b66:	f000 fe87 	bl	412878 <__hi0bits>
  411b6a:	f1c0 0020 	rsb	r0, r0, #32
  411b6e:	e013      	b.n	411b98 <_dtoa_r+0x508>
  411b70:	f1c3 0920 	rsb	r9, r3, #32
  411b74:	9b00      	ldr	r3, [sp, #0]
  411b76:	fa03 f009 	lsl.w	r0, r3, r9
  411b7a:	e67a      	b.n	411872 <_dtoa_r+0x1e2>
  411b7c:	900c      	str	r0, [sp, #48]	; 0x30
  411b7e:	e63d      	b.n	4117fc <_dtoa_r+0x16c>
  411b80:	40240000 	.word	0x40240000
  411b84:	9b02      	ldr	r3, [sp, #8]
  411b86:	2b01      	cmp	r3, #1
  411b88:	f340 828d 	ble.w	4120a6 <_dtoa_r+0xa16>
  411b8c:	f04f 0800 	mov.w	r8, #0
  411b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  411b92:	2001      	movs	r0, #1
  411b94:	2b00      	cmp	r3, #0
  411b96:	d1e1      	bne.n	411b5c <_dtoa_r+0x4cc>
  411b98:	9a05      	ldr	r2, [sp, #20]
  411b9a:	4410      	add	r0, r2
  411b9c:	f010 001f 	ands.w	r0, r0, #31
  411ba0:	f000 80a1 	beq.w	411ce6 <_dtoa_r+0x656>
  411ba4:	f1c0 0320 	rsb	r3, r0, #32
  411ba8:	2b04      	cmp	r3, #4
  411baa:	f340 848c 	ble.w	4124c6 <_dtoa_r+0xe36>
  411bae:	9b06      	ldr	r3, [sp, #24]
  411bb0:	f1c0 001c 	rsb	r0, r0, #28
  411bb4:	4403      	add	r3, r0
  411bb6:	9306      	str	r3, [sp, #24]
  411bb8:	4613      	mov	r3, r2
  411bba:	4403      	add	r3, r0
  411bbc:	4405      	add	r5, r0
  411bbe:	9305      	str	r3, [sp, #20]
  411bc0:	9b06      	ldr	r3, [sp, #24]
  411bc2:	2b00      	cmp	r3, #0
  411bc4:	dd05      	ble.n	411bd2 <_dtoa_r+0x542>
  411bc6:	4651      	mov	r1, sl
  411bc8:	461a      	mov	r2, r3
  411bca:	4620      	mov	r0, r4
  411bcc:	f000 ff90 	bl	412af0 <__lshift>
  411bd0:	4682      	mov	sl, r0
  411bd2:	9b05      	ldr	r3, [sp, #20]
  411bd4:	2b00      	cmp	r3, #0
  411bd6:	dd05      	ble.n	411be4 <_dtoa_r+0x554>
  411bd8:	4649      	mov	r1, r9
  411bda:	461a      	mov	r2, r3
  411bdc:	4620      	mov	r0, r4
  411bde:	f000 ff87 	bl	412af0 <__lshift>
  411be2:	4681      	mov	r9, r0
  411be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  411be6:	2b00      	cmp	r3, #0
  411be8:	f040 8086 	bne.w	411cf8 <_dtoa_r+0x668>
  411bec:	9b08      	ldr	r3, [sp, #32]
  411bee:	2b00      	cmp	r3, #0
  411bf0:	f340 8269 	ble.w	4120c6 <_dtoa_r+0xa36>
  411bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411bf6:	2b00      	cmp	r3, #0
  411bf8:	f000 8098 	beq.w	411d2c <_dtoa_r+0x69c>
  411bfc:	2d00      	cmp	r5, #0
  411bfe:	dd05      	ble.n	411c0c <_dtoa_r+0x57c>
  411c00:	4631      	mov	r1, r6
  411c02:	462a      	mov	r2, r5
  411c04:	4620      	mov	r0, r4
  411c06:	f000 ff73 	bl	412af0 <__lshift>
  411c0a:	4606      	mov	r6, r0
  411c0c:	f1b8 0f00 	cmp.w	r8, #0
  411c10:	f040 8336 	bne.w	412280 <_dtoa_r+0xbf0>
  411c14:	46b0      	mov	r8, r6
  411c16:	9b08      	ldr	r3, [sp, #32]
  411c18:	9a07      	ldr	r2, [sp, #28]
  411c1a:	3b01      	subs	r3, #1
  411c1c:	18d3      	adds	r3, r2, r3
  411c1e:	9308      	str	r3, [sp, #32]
  411c20:	9b00      	ldr	r3, [sp, #0]
  411c22:	f003 0301 	and.w	r3, r3, #1
  411c26:	9309      	str	r3, [sp, #36]	; 0x24
  411c28:	4617      	mov	r7, r2
  411c2a:	4649      	mov	r1, r9
  411c2c:	4650      	mov	r0, sl
  411c2e:	f7ff fc9b 	bl	411568 <quorem>
  411c32:	4631      	mov	r1, r6
  411c34:	4605      	mov	r5, r0
  411c36:	4650      	mov	r0, sl
  411c38:	f000 ffac 	bl	412b94 <__mcmp>
  411c3c:	4642      	mov	r2, r8
  411c3e:	4649      	mov	r1, r9
  411c40:	4683      	mov	fp, r0
  411c42:	4620      	mov	r0, r4
  411c44:	f000 ffc2 	bl	412bcc <__mdiff>
  411c48:	f105 0230 	add.w	r2, r5, #48	; 0x30
  411c4c:	9200      	str	r2, [sp, #0]
  411c4e:	68c2      	ldr	r2, [r0, #12]
  411c50:	4601      	mov	r1, r0
  411c52:	2a00      	cmp	r2, #0
  411c54:	f040 8232 	bne.w	4120bc <_dtoa_r+0xa2c>
  411c58:	9006      	str	r0, [sp, #24]
  411c5a:	4650      	mov	r0, sl
  411c5c:	f000 ff9a 	bl	412b94 <__mcmp>
  411c60:	9b06      	ldr	r3, [sp, #24]
  411c62:	9005      	str	r0, [sp, #20]
  411c64:	4619      	mov	r1, r3
  411c66:	4620      	mov	r0, r4
  411c68:	f000 fdbc 	bl	4127e4 <_Bfree>
  411c6c:	9a05      	ldr	r2, [sp, #20]
  411c6e:	b932      	cbnz	r2, 411c7e <_dtoa_r+0x5ee>
  411c70:	9b02      	ldr	r3, [sp, #8]
  411c72:	b923      	cbnz	r3, 411c7e <_dtoa_r+0x5ee>
  411c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411c76:	2b00      	cmp	r3, #0
  411c78:	f000 83de 	beq.w	412438 <_dtoa_r+0xda8>
  411c7c:	9a02      	ldr	r2, [sp, #8]
  411c7e:	f1bb 0f00 	cmp.w	fp, #0
  411c82:	f2c0 82a2 	blt.w	4121ca <_dtoa_r+0xb3a>
  411c86:	d105      	bne.n	411c94 <_dtoa_r+0x604>
  411c88:	9b02      	ldr	r3, [sp, #8]
  411c8a:	b91b      	cbnz	r3, 411c94 <_dtoa_r+0x604>
  411c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411c8e:	2b00      	cmp	r3, #0
  411c90:	f000 829b 	beq.w	4121ca <_dtoa_r+0xb3a>
  411c94:	2a00      	cmp	r2, #0
  411c96:	f300 8307 	bgt.w	4122a8 <_dtoa_r+0xc18>
  411c9a:	f89d 3000 	ldrb.w	r3, [sp]
  411c9e:	703b      	strb	r3, [r7, #0]
  411ca0:	9b08      	ldr	r3, [sp, #32]
  411ca2:	f107 0b01 	add.w	fp, r7, #1
  411ca6:	429f      	cmp	r7, r3
  411ca8:	465d      	mov	r5, fp
  411caa:	f000 8308 	beq.w	4122be <_dtoa_r+0xc2e>
  411cae:	4651      	mov	r1, sl
  411cb0:	2300      	movs	r3, #0
  411cb2:	220a      	movs	r2, #10
  411cb4:	4620      	mov	r0, r4
  411cb6:	f000 fd9f 	bl	4127f8 <__multadd>
  411cba:	4546      	cmp	r6, r8
  411cbc:	4682      	mov	sl, r0
  411cbe:	4631      	mov	r1, r6
  411cc0:	f04f 0300 	mov.w	r3, #0
  411cc4:	f04f 020a 	mov.w	r2, #10
  411cc8:	4620      	mov	r0, r4
  411cca:	f000 81f1 	beq.w	4120b0 <_dtoa_r+0xa20>
  411cce:	f000 fd93 	bl	4127f8 <__multadd>
  411cd2:	4641      	mov	r1, r8
  411cd4:	4606      	mov	r6, r0
  411cd6:	2300      	movs	r3, #0
  411cd8:	220a      	movs	r2, #10
  411cda:	4620      	mov	r0, r4
  411cdc:	f000 fd8c 	bl	4127f8 <__multadd>
  411ce0:	465f      	mov	r7, fp
  411ce2:	4680      	mov	r8, r0
  411ce4:	e7a1      	b.n	411c2a <_dtoa_r+0x59a>
  411ce6:	201c      	movs	r0, #28
  411ce8:	9b06      	ldr	r3, [sp, #24]
  411cea:	4403      	add	r3, r0
  411cec:	9306      	str	r3, [sp, #24]
  411cee:	9b05      	ldr	r3, [sp, #20]
  411cf0:	4403      	add	r3, r0
  411cf2:	4405      	add	r5, r0
  411cf4:	9305      	str	r3, [sp, #20]
  411cf6:	e763      	b.n	411bc0 <_dtoa_r+0x530>
  411cf8:	4649      	mov	r1, r9
  411cfa:	4650      	mov	r0, sl
  411cfc:	f000 ff4a 	bl	412b94 <__mcmp>
  411d00:	2800      	cmp	r0, #0
  411d02:	f6bf af73 	bge.w	411bec <_dtoa_r+0x55c>
  411d06:	9f04      	ldr	r7, [sp, #16]
  411d08:	4651      	mov	r1, sl
  411d0a:	2300      	movs	r3, #0
  411d0c:	220a      	movs	r2, #10
  411d0e:	4620      	mov	r0, r4
  411d10:	3f01      	subs	r7, #1
  411d12:	9704      	str	r7, [sp, #16]
  411d14:	f000 fd70 	bl	4127f8 <__multadd>
  411d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411d1a:	4682      	mov	sl, r0
  411d1c:	2b00      	cmp	r3, #0
  411d1e:	f040 83a7 	bne.w	412470 <_dtoa_r+0xde0>
  411d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411d24:	2b00      	cmp	r3, #0
  411d26:	f340 83b0 	ble.w	41248a <_dtoa_r+0xdfa>
  411d2a:	9308      	str	r3, [sp, #32]
  411d2c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  411d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
  411d34:	465d      	mov	r5, fp
  411d36:	e002      	b.n	411d3e <_dtoa_r+0x6ae>
  411d38:	f000 fd5e 	bl	4127f8 <__multadd>
  411d3c:	4682      	mov	sl, r0
  411d3e:	4649      	mov	r1, r9
  411d40:	4650      	mov	r0, sl
  411d42:	f7ff fc11 	bl	411568 <quorem>
  411d46:	f100 0730 	add.w	r7, r0, #48	; 0x30
  411d4a:	f805 7b01 	strb.w	r7, [r5], #1
  411d4e:	eba5 030b 	sub.w	r3, r5, fp
  411d52:	4543      	cmp	r3, r8
  411d54:	f04f 020a 	mov.w	r2, #10
  411d58:	f04f 0300 	mov.w	r3, #0
  411d5c:	4651      	mov	r1, sl
  411d5e:	4620      	mov	r0, r4
  411d60:	dbea      	blt.n	411d38 <_dtoa_r+0x6a8>
  411d62:	9b07      	ldr	r3, [sp, #28]
  411d64:	9a08      	ldr	r2, [sp, #32]
  411d66:	9700      	str	r7, [sp, #0]
  411d68:	2a01      	cmp	r2, #1
  411d6a:	bfac      	ite	ge
  411d6c:	189b      	addge	r3, r3, r2
  411d6e:	3301      	addlt	r3, #1
  411d70:	461d      	mov	r5, r3
  411d72:	f04f 0b00 	mov.w	fp, #0
  411d76:	4651      	mov	r1, sl
  411d78:	2201      	movs	r2, #1
  411d7a:	4620      	mov	r0, r4
  411d7c:	f000 feb8 	bl	412af0 <__lshift>
  411d80:	4649      	mov	r1, r9
  411d82:	4682      	mov	sl, r0
  411d84:	f000 ff06 	bl	412b94 <__mcmp>
  411d88:	2800      	cmp	r0, #0
  411d8a:	f340 823a 	ble.w	412202 <_dtoa_r+0xb72>
  411d8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  411d92:	9907      	ldr	r1, [sp, #28]
  411d94:	1e6b      	subs	r3, r5, #1
  411d96:	e004      	b.n	411da2 <_dtoa_r+0x712>
  411d98:	428b      	cmp	r3, r1
  411d9a:	f000 81af 	beq.w	4120fc <_dtoa_r+0xa6c>
  411d9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  411da2:	2a39      	cmp	r2, #57	; 0x39
  411da4:	f103 0501 	add.w	r5, r3, #1
  411da8:	d0f6      	beq.n	411d98 <_dtoa_r+0x708>
  411daa:	3201      	adds	r2, #1
  411dac:	701a      	strb	r2, [r3, #0]
  411dae:	4649      	mov	r1, r9
  411db0:	4620      	mov	r0, r4
  411db2:	f000 fd17 	bl	4127e4 <_Bfree>
  411db6:	2e00      	cmp	r6, #0
  411db8:	f43f ae36 	beq.w	411a28 <_dtoa_r+0x398>
  411dbc:	f1bb 0f00 	cmp.w	fp, #0
  411dc0:	d005      	beq.n	411dce <_dtoa_r+0x73e>
  411dc2:	45b3      	cmp	fp, r6
  411dc4:	d003      	beq.n	411dce <_dtoa_r+0x73e>
  411dc6:	4659      	mov	r1, fp
  411dc8:	4620      	mov	r0, r4
  411dca:	f000 fd0b 	bl	4127e4 <_Bfree>
  411dce:	4631      	mov	r1, r6
  411dd0:	4620      	mov	r0, r4
  411dd2:	f000 fd07 	bl	4127e4 <_Bfree>
  411dd6:	e627      	b.n	411a28 <_dtoa_r+0x398>
  411dd8:	2300      	movs	r3, #0
  411dda:	9309      	str	r3, [sp, #36]	; 0x24
  411ddc:	9b04      	ldr	r3, [sp, #16]
  411dde:	445b      	add	r3, fp
  411de0:	930d      	str	r3, [sp, #52]	; 0x34
  411de2:	3301      	adds	r3, #1
  411de4:	2b01      	cmp	r3, #1
  411de6:	461e      	mov	r6, r3
  411de8:	461d      	mov	r5, r3
  411dea:	9308      	str	r3, [sp, #32]
  411dec:	bfb8      	it	lt
  411dee:	2601      	movlt	r6, #1
  411df0:	2100      	movs	r1, #0
  411df2:	2e17      	cmp	r6, #23
  411df4:	6461      	str	r1, [r4, #68]	; 0x44
  411df6:	d90a      	bls.n	411e0e <_dtoa_r+0x77e>
  411df8:	2201      	movs	r2, #1
  411dfa:	2304      	movs	r3, #4
  411dfc:	005b      	lsls	r3, r3, #1
  411dfe:	f103 0014 	add.w	r0, r3, #20
  411e02:	4286      	cmp	r6, r0
  411e04:	4611      	mov	r1, r2
  411e06:	f102 0201 	add.w	r2, r2, #1
  411e0a:	d2f7      	bcs.n	411dfc <_dtoa_r+0x76c>
  411e0c:	6461      	str	r1, [r4, #68]	; 0x44
  411e0e:	4620      	mov	r0, r4
  411e10:	f000 fcc2 	bl	412798 <_Balloc>
  411e14:	2d0e      	cmp	r5, #14
  411e16:	9007      	str	r0, [sp, #28]
  411e18:	6420      	str	r0, [r4, #64]	; 0x40
  411e1a:	f63f ad44 	bhi.w	4118a6 <_dtoa_r+0x216>
  411e1e:	2f00      	cmp	r7, #0
  411e20:	f43f ad41 	beq.w	4118a6 <_dtoa_r+0x216>
  411e24:	9904      	ldr	r1, [sp, #16]
  411e26:	2900      	cmp	r1, #0
  411e28:	ed9d 7b00 	vldr	d7, [sp]
  411e2c:	f340 81f6 	ble.w	41221c <_dtoa_r+0xb8c>
  411e30:	4bb9      	ldr	r3, [pc, #740]	; (412118 <_dtoa_r+0xa88>)
  411e32:	f001 020f 	and.w	r2, r1, #15
  411e36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  411e3a:	110d      	asrs	r5, r1, #4
  411e3c:	e9d3 6700 	ldrd	r6, r7, [r3]
  411e40:	06eb      	lsls	r3, r5, #27
  411e42:	f140 81ad 	bpl.w	4121a0 <_dtoa_r+0xb10>
  411e46:	4bb5      	ldr	r3, [pc, #724]	; (41211c <_dtoa_r+0xa8c>)
  411e48:	ec51 0b17 	vmov	r0, r1, d7
  411e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  411e50:	f7fc fcfc 	bl	40e84c <__aeabi_ddiv>
  411e54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  411e58:	f005 050f 	and.w	r5, r5, #15
  411e5c:	f04f 0903 	mov.w	r9, #3
  411e60:	b18d      	cbz	r5, 411e86 <_dtoa_r+0x7f6>
  411e62:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 41211c <_dtoa_r+0xa8c>
  411e66:	07e8      	lsls	r0, r5, #31
  411e68:	d509      	bpl.n	411e7e <_dtoa_r+0x7ee>
  411e6a:	4630      	mov	r0, r6
  411e6c:	4639      	mov	r1, r7
  411e6e:	e9d8 2300 	ldrd	r2, r3, [r8]
  411e72:	f7fc fbc1 	bl	40e5f8 <__aeabi_dmul>
  411e76:	f109 0901 	add.w	r9, r9, #1
  411e7a:	4606      	mov	r6, r0
  411e7c:	460f      	mov	r7, r1
  411e7e:	106d      	asrs	r5, r5, #1
  411e80:	f108 0808 	add.w	r8, r8, #8
  411e84:	d1ef      	bne.n	411e66 <_dtoa_r+0x7d6>
  411e86:	463b      	mov	r3, r7
  411e88:	4632      	mov	r2, r6
  411e8a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  411e8e:	f7fc fcdd 	bl	40e84c <__aeabi_ddiv>
  411e92:	4607      	mov	r7, r0
  411e94:	4688      	mov	r8, r1
  411e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  411e98:	b143      	cbz	r3, 411eac <_dtoa_r+0x81c>
  411e9a:	2200      	movs	r2, #0
  411e9c:	4ba0      	ldr	r3, [pc, #640]	; (412120 <_dtoa_r+0xa90>)
  411e9e:	4638      	mov	r0, r7
  411ea0:	4641      	mov	r1, r8
  411ea2:	f7fc fe1b 	bl	40eadc <__aeabi_dcmplt>
  411ea6:	2800      	cmp	r0, #0
  411ea8:	f040 8273 	bne.w	412392 <_dtoa_r+0xd02>
  411eac:	4648      	mov	r0, r9
  411eae:	f7fc fb3d 	bl	40e52c <__aeabi_i2d>
  411eb2:	463a      	mov	r2, r7
  411eb4:	4643      	mov	r3, r8
  411eb6:	f7fc fb9f 	bl	40e5f8 <__aeabi_dmul>
  411eba:	4b9a      	ldr	r3, [pc, #616]	; (412124 <_dtoa_r+0xa94>)
  411ebc:	2200      	movs	r2, #0
  411ebe:	f7fc f9e9 	bl	40e294 <__adddf3>
  411ec2:	9b08      	ldr	r3, [sp, #32]
  411ec4:	4605      	mov	r5, r0
  411ec6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  411eca:	2b00      	cmp	r3, #0
  411ecc:	f000 8140 	beq.w	412150 <_dtoa_r+0xac0>
  411ed0:	9b04      	ldr	r3, [sp, #16]
  411ed2:	f8dd 9020 	ldr.w	r9, [sp, #32]
  411ed6:	9311      	str	r3, [sp, #68]	; 0x44
  411ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411eda:	2b00      	cmp	r3, #0
  411edc:	f000 81f6 	beq.w	4122cc <_dtoa_r+0xc3c>
  411ee0:	4b8d      	ldr	r3, [pc, #564]	; (412118 <_dtoa_r+0xa88>)
  411ee2:	4991      	ldr	r1, [pc, #580]	; (412128 <_dtoa_r+0xa98>)
  411ee4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  411ee8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  411eec:	2000      	movs	r0, #0
  411eee:	f7fc fcad 	bl	40e84c <__aeabi_ddiv>
  411ef2:	462a      	mov	r2, r5
  411ef4:	4633      	mov	r3, r6
  411ef6:	f7fc f9cb 	bl	40e290 <__aeabi_dsub>
  411efa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  411efe:	4641      	mov	r1, r8
  411f00:	4638      	mov	r0, r7
  411f02:	f7fc fe29 	bl	40eb58 <__aeabi_d2iz>
  411f06:	4605      	mov	r5, r0
  411f08:	f7fc fb10 	bl	40e52c <__aeabi_i2d>
  411f0c:	4602      	mov	r2, r0
  411f0e:	460b      	mov	r3, r1
  411f10:	4638      	mov	r0, r7
  411f12:	4641      	mov	r1, r8
  411f14:	f7fc f9bc 	bl	40e290 <__aeabi_dsub>
  411f18:	3530      	adds	r5, #48	; 0x30
  411f1a:	fa5f f885 	uxtb.w	r8, r5
  411f1e:	9d07      	ldr	r5, [sp, #28]
  411f20:	4606      	mov	r6, r0
  411f22:	460f      	mov	r7, r1
  411f24:	f885 8000 	strb.w	r8, [r5]
  411f28:	4602      	mov	r2, r0
  411f2a:	460b      	mov	r3, r1
  411f2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  411f30:	3501      	adds	r5, #1
  411f32:	f7fc fdf1 	bl	40eb18 <__aeabi_dcmpgt>
  411f36:	2800      	cmp	r0, #0
  411f38:	d156      	bne.n	411fe8 <_dtoa_r+0x958>
  411f3a:	4632      	mov	r2, r6
  411f3c:	463b      	mov	r3, r7
  411f3e:	2000      	movs	r0, #0
  411f40:	4977      	ldr	r1, [pc, #476]	; (412120 <_dtoa_r+0xa90>)
  411f42:	f7fc f9a5 	bl	40e290 <__aeabi_dsub>
  411f46:	4602      	mov	r2, r0
  411f48:	460b      	mov	r3, r1
  411f4a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  411f4e:	f7fc fde3 	bl	40eb18 <__aeabi_dcmpgt>
  411f52:	2800      	cmp	r0, #0
  411f54:	f040 8262 	bne.w	41241c <_dtoa_r+0xd8c>
  411f58:	f1b9 0f01 	cmp.w	r9, #1
  411f5c:	f43f aca3 	beq.w	4118a6 <_dtoa_r+0x216>
  411f60:	9b07      	ldr	r3, [sp, #28]
  411f62:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  411f66:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  411f6a:	4499      	add	r9, r3
  411f6c:	46a0      	mov	r8, r4
  411f6e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  411f72:	e00d      	b.n	411f90 <_dtoa_r+0x900>
  411f74:	2000      	movs	r0, #0
  411f76:	496a      	ldr	r1, [pc, #424]	; (412120 <_dtoa_r+0xa90>)
  411f78:	f7fc f98a 	bl	40e290 <__aeabi_dsub>
  411f7c:	4652      	mov	r2, sl
  411f7e:	465b      	mov	r3, fp
  411f80:	f7fc fdac 	bl	40eadc <__aeabi_dcmplt>
  411f84:	2800      	cmp	r0, #0
  411f86:	f040 8244 	bne.w	412412 <_dtoa_r+0xd82>
  411f8a:	454d      	cmp	r5, r9
  411f8c:	f000 824a 	beq.w	412424 <_dtoa_r+0xd94>
  411f90:	4650      	mov	r0, sl
  411f92:	4659      	mov	r1, fp
  411f94:	2200      	movs	r2, #0
  411f96:	4b65      	ldr	r3, [pc, #404]	; (41212c <_dtoa_r+0xa9c>)
  411f98:	f7fc fb2e 	bl	40e5f8 <__aeabi_dmul>
  411f9c:	2200      	movs	r2, #0
  411f9e:	4b63      	ldr	r3, [pc, #396]	; (41212c <_dtoa_r+0xa9c>)
  411fa0:	4682      	mov	sl, r0
  411fa2:	468b      	mov	fp, r1
  411fa4:	4630      	mov	r0, r6
  411fa6:	4639      	mov	r1, r7
  411fa8:	f7fc fb26 	bl	40e5f8 <__aeabi_dmul>
  411fac:	460f      	mov	r7, r1
  411fae:	4606      	mov	r6, r0
  411fb0:	f7fc fdd2 	bl	40eb58 <__aeabi_d2iz>
  411fb4:	4604      	mov	r4, r0
  411fb6:	f7fc fab9 	bl	40e52c <__aeabi_i2d>
  411fba:	4602      	mov	r2, r0
  411fbc:	460b      	mov	r3, r1
  411fbe:	4630      	mov	r0, r6
  411fc0:	4639      	mov	r1, r7
  411fc2:	f7fc f965 	bl	40e290 <__aeabi_dsub>
  411fc6:	3430      	adds	r4, #48	; 0x30
  411fc8:	b2e4      	uxtb	r4, r4
  411fca:	4652      	mov	r2, sl
  411fcc:	465b      	mov	r3, fp
  411fce:	f805 4b01 	strb.w	r4, [r5], #1
  411fd2:	4606      	mov	r6, r0
  411fd4:	460f      	mov	r7, r1
  411fd6:	f7fc fd81 	bl	40eadc <__aeabi_dcmplt>
  411fda:	4632      	mov	r2, r6
  411fdc:	463b      	mov	r3, r7
  411fde:	2800      	cmp	r0, #0
  411fe0:	d0c8      	beq.n	411f74 <_dtoa_r+0x8e4>
  411fe2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
  411fe6:	4644      	mov	r4, r8
  411fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  411fea:	9304      	str	r3, [sp, #16]
  411fec:	e51c      	b.n	411a28 <_dtoa_r+0x398>
  411fee:	2300      	movs	r3, #0
  411ff0:	9309      	str	r3, [sp, #36]	; 0x24
  411ff2:	f1bb 0f00 	cmp.w	fp, #0
  411ff6:	f340 80da 	ble.w	4121ae <_dtoa_r+0xb1e>
  411ffa:	465e      	mov	r6, fp
  411ffc:	465d      	mov	r5, fp
  411ffe:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  412002:	f8cd b020 	str.w	fp, [sp, #32]
  412006:	e6f3      	b.n	411df0 <_dtoa_r+0x760>
  412008:	2301      	movs	r3, #1
  41200a:	9309      	str	r3, [sp, #36]	; 0x24
  41200c:	e7f1      	b.n	411ff2 <_dtoa_r+0x962>
  41200e:	9b00      	ldr	r3, [sp, #0]
  412010:	2b00      	cmp	r3, #0
  412012:	f47f ada1 	bne.w	411b58 <_dtoa_r+0x4c8>
  412016:	e9dd 1200 	ldrd	r1, r2, [sp]
  41201a:	f3c2 0313 	ubfx	r3, r2, #0, #20
  41201e:	2b00      	cmp	r3, #0
  412020:	f47f adb4 	bne.w	411b8c <_dtoa_r+0x4fc>
  412024:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
  412028:	0d3f      	lsrs	r7, r7, #20
  41202a:	053f      	lsls	r7, r7, #20
  41202c:	2f00      	cmp	r7, #0
  41202e:	f000 8200 	beq.w	412432 <_dtoa_r+0xda2>
  412032:	9b06      	ldr	r3, [sp, #24]
  412034:	3301      	adds	r3, #1
  412036:	9306      	str	r3, [sp, #24]
  412038:	9b05      	ldr	r3, [sp, #20]
  41203a:	3301      	adds	r3, #1
  41203c:	9305      	str	r3, [sp, #20]
  41203e:	f04f 0801 	mov.w	r8, #1
  412042:	e5a5      	b.n	411b90 <_dtoa_r+0x500>
  412044:	9b08      	ldr	r3, [sp, #32]
  412046:	2b00      	cmp	r3, #0
  412048:	f73f ac3e 	bgt.w	4118c8 <_dtoa_r+0x238>
  41204c:	f040 8099 	bne.w	412182 <_dtoa_r+0xaf2>
  412050:	4649      	mov	r1, r9
  412052:	2200      	movs	r2, #0
  412054:	4b36      	ldr	r3, [pc, #216]	; (412130 <_dtoa_r+0xaa0>)
  412056:	4640      	mov	r0, r8
  412058:	f7fc face 	bl	40e5f8 <__aeabi_dmul>
  41205c:	e9dd 2300 	ldrd	r2, r3, [sp]
  412060:	f7fc fd50 	bl	40eb04 <__aeabi_dcmpge>
  412064:	f8dd 9020 	ldr.w	r9, [sp, #32]
  412068:	464e      	mov	r6, r9
  41206a:	2800      	cmp	r0, #0
  41206c:	d03e      	beq.n	4120ec <_dtoa_r+0xa5c>
  41206e:	ea6f 030b 	mvn.w	r3, fp
  412072:	9d07      	ldr	r5, [sp, #28]
  412074:	9304      	str	r3, [sp, #16]
  412076:	4649      	mov	r1, r9
  412078:	4620      	mov	r0, r4
  41207a:	f000 fbb3 	bl	4127e4 <_Bfree>
  41207e:	2e00      	cmp	r6, #0
  412080:	f43f acd2 	beq.w	411a28 <_dtoa_r+0x398>
  412084:	e6a3      	b.n	411dce <_dtoa_r+0x73e>
  412086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  412088:	4651      	mov	r1, sl
  41208a:	4620      	mov	r0, r4
  41208c:	f000 fce0 	bl	412a50 <__pow5mult>
  412090:	4682      	mov	sl, r0
  412092:	e54f      	b.n	411b34 <_dtoa_r+0x4a4>
  412094:	9a10      	ldr	r2, [sp, #64]	; 0x40
  412096:	2a00      	cmp	r2, #0
  412098:	f000 816f 	beq.w	41237a <_dtoa_r+0xcea>
  41209c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4120a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4120a2:	9d06      	ldr	r5, [sp, #24]
  4120a4:	e4e7      	b.n	411a76 <_dtoa_r+0x3e6>
  4120a6:	9b00      	ldr	r3, [sp, #0]
  4120a8:	2b00      	cmp	r3, #0
  4120aa:	f47f ad6f 	bne.w	411b8c <_dtoa_r+0x4fc>
  4120ae:	e7b2      	b.n	412016 <_dtoa_r+0x986>
  4120b0:	f000 fba2 	bl	4127f8 <__multadd>
  4120b4:	465f      	mov	r7, fp
  4120b6:	4606      	mov	r6, r0
  4120b8:	4680      	mov	r8, r0
  4120ba:	e5b6      	b.n	411c2a <_dtoa_r+0x59a>
  4120bc:	4620      	mov	r0, r4
  4120be:	f000 fb91 	bl	4127e4 <_Bfree>
  4120c2:	2201      	movs	r2, #1
  4120c4:	e5db      	b.n	411c7e <_dtoa_r+0x5ee>
  4120c6:	9b02      	ldr	r3, [sp, #8]
  4120c8:	2b02      	cmp	r3, #2
  4120ca:	f77f ad93 	ble.w	411bf4 <_dtoa_r+0x564>
  4120ce:	9b08      	ldr	r3, [sp, #32]
  4120d0:	2b00      	cmp	r3, #0
  4120d2:	d1cc      	bne.n	41206e <_dtoa_r+0x9de>
  4120d4:	4649      	mov	r1, r9
  4120d6:	2205      	movs	r2, #5
  4120d8:	4620      	mov	r0, r4
  4120da:	f000 fb8d 	bl	4127f8 <__multadd>
  4120de:	4601      	mov	r1, r0
  4120e0:	4681      	mov	r9, r0
  4120e2:	4650      	mov	r0, sl
  4120e4:	f000 fd56 	bl	412b94 <__mcmp>
  4120e8:	2800      	cmp	r0, #0
  4120ea:	ddc0      	ble.n	41206e <_dtoa_r+0x9de>
  4120ec:	9a04      	ldr	r2, [sp, #16]
  4120ee:	9907      	ldr	r1, [sp, #28]
  4120f0:	2331      	movs	r3, #49	; 0x31
  4120f2:	3201      	adds	r2, #1
  4120f4:	9204      	str	r2, [sp, #16]
  4120f6:	700b      	strb	r3, [r1, #0]
  4120f8:	1c4d      	adds	r5, r1, #1
  4120fa:	e7bc      	b.n	412076 <_dtoa_r+0x9e6>
  4120fc:	9a04      	ldr	r2, [sp, #16]
  4120fe:	3201      	adds	r2, #1
  412100:	9204      	str	r2, [sp, #16]
  412102:	9a07      	ldr	r2, [sp, #28]
  412104:	2331      	movs	r3, #49	; 0x31
  412106:	7013      	strb	r3, [r2, #0]
  412108:	e651      	b.n	411dae <_dtoa_r+0x71e>
  41210a:	2301      	movs	r3, #1
  41210c:	9309      	str	r3, [sp, #36]	; 0x24
  41210e:	e665      	b.n	411ddc <_dtoa_r+0x74c>
  412110:	f8dd a000 	ldr.w	sl, [sp]
  412114:	9c02      	ldr	r4, [sp, #8]
  412116:	e487      	b.n	411a28 <_dtoa_r+0x398>
  412118:	004139d8 	.word	0x004139d8
  41211c:	004139b0 	.word	0x004139b0
  412120:	3ff00000 	.word	0x3ff00000
  412124:	401c0000 	.word	0x401c0000
  412128:	3fe00000 	.word	0x3fe00000
  41212c:	40240000 	.word	0x40240000
  412130:	40140000 	.word	0x40140000
  412134:	4648      	mov	r0, r9
  412136:	f7fc f9f9 	bl	40e52c <__aeabi_i2d>
  41213a:	463a      	mov	r2, r7
  41213c:	4643      	mov	r3, r8
  41213e:	f7fc fa5b 	bl	40e5f8 <__aeabi_dmul>
  412142:	2200      	movs	r2, #0
  412144:	4bc4      	ldr	r3, [pc, #784]	; (412458 <_dtoa_r+0xdc8>)
  412146:	f7fc f8a5 	bl	40e294 <__adddf3>
  41214a:	4605      	mov	r5, r0
  41214c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  412150:	4641      	mov	r1, r8
  412152:	2200      	movs	r2, #0
  412154:	4bc1      	ldr	r3, [pc, #772]	; (41245c <_dtoa_r+0xdcc>)
  412156:	4638      	mov	r0, r7
  412158:	f7fc f89a 	bl	40e290 <__aeabi_dsub>
  41215c:	462a      	mov	r2, r5
  41215e:	4633      	mov	r3, r6
  412160:	4680      	mov	r8, r0
  412162:	4689      	mov	r9, r1
  412164:	f7fc fcd8 	bl	40eb18 <__aeabi_dcmpgt>
  412168:	2800      	cmp	r0, #0
  41216a:	f040 80ab 	bne.w	4122c4 <_dtoa_r+0xc34>
  41216e:	462a      	mov	r2, r5
  412170:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  412174:	4640      	mov	r0, r8
  412176:	4649      	mov	r1, r9
  412178:	f7fc fcb0 	bl	40eadc <__aeabi_dcmplt>
  41217c:	2800      	cmp	r0, #0
  41217e:	f43f ab92 	beq.w	4118a6 <_dtoa_r+0x216>
  412182:	f04f 0900 	mov.w	r9, #0
  412186:	464e      	mov	r6, r9
  412188:	e771      	b.n	41206e <_dtoa_r+0x9de>
  41218a:	9807      	ldr	r0, [sp, #28]
  41218c:	f7ff bab8 	b.w	411700 <_dtoa_r+0x70>
  412190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  412192:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  412194:	970a      	str	r7, [sp, #40]	; 0x28
  412196:	1afb      	subs	r3, r7, r3
  412198:	441a      	add	r2, r3
  41219a:	920b      	str	r2, [sp, #44]	; 0x2c
  41219c:	2700      	movs	r7, #0
  41219e:	e464      	b.n	411a6a <_dtoa_r+0x3da>
  4121a0:	ed9d 7b00 	vldr	d7, [sp]
  4121a4:	f04f 0902 	mov.w	r9, #2
  4121a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  4121ac:	e658      	b.n	411e60 <_dtoa_r+0x7d0>
  4121ae:	2100      	movs	r1, #0
  4121b0:	6461      	str	r1, [r4, #68]	; 0x44
  4121b2:	4620      	mov	r0, r4
  4121b4:	f000 faf0 	bl	412798 <_Balloc>
  4121b8:	f04f 0b01 	mov.w	fp, #1
  4121bc:	9007      	str	r0, [sp, #28]
  4121be:	6420      	str	r0, [r4, #64]	; 0x40
  4121c0:	f8cd b020 	str.w	fp, [sp, #32]
  4121c4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4121c8:	e629      	b.n	411e1e <_dtoa_r+0x78e>
  4121ca:	2a00      	cmp	r2, #0
  4121cc:	dd12      	ble.n	4121f4 <_dtoa_r+0xb64>
  4121ce:	4651      	mov	r1, sl
  4121d0:	2201      	movs	r2, #1
  4121d2:	4620      	mov	r0, r4
  4121d4:	f000 fc8c 	bl	412af0 <__lshift>
  4121d8:	4649      	mov	r1, r9
  4121da:	4682      	mov	sl, r0
  4121dc:	f000 fcda 	bl	412b94 <__mcmp>
  4121e0:	2800      	cmp	r0, #0
  4121e2:	f340 8131 	ble.w	412448 <_dtoa_r+0xdb8>
  4121e6:	9b00      	ldr	r3, [sp, #0]
  4121e8:	2b39      	cmp	r3, #57	; 0x39
  4121ea:	f000 80f7 	beq.w	4123dc <_dtoa_r+0xd4c>
  4121ee:	f105 0331 	add.w	r3, r5, #49	; 0x31
  4121f2:	9300      	str	r3, [sp, #0]
  4121f4:	f89d 3000 	ldrb.w	r3, [sp]
  4121f8:	703b      	strb	r3, [r7, #0]
  4121fa:	46b3      	mov	fp, r6
  4121fc:	1c7d      	adds	r5, r7, #1
  4121fe:	4646      	mov	r6, r8
  412200:	e5d5      	b.n	411dae <_dtoa_r+0x71e>
  412202:	d104      	bne.n	41220e <_dtoa_r+0xb7e>
  412204:	9b00      	ldr	r3, [sp, #0]
  412206:	07db      	lsls	r3, r3, #31
  412208:	d501      	bpl.n	41220e <_dtoa_r+0xb7e>
  41220a:	e5c0      	b.n	411d8e <_dtoa_r+0x6fe>
  41220c:	4615      	mov	r5, r2
  41220e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  412212:	2b30      	cmp	r3, #48	; 0x30
  412214:	f105 32ff 	add.w	r2, r5, #4294967295
  412218:	d0f8      	beq.n	41220c <_dtoa_r+0xb7c>
  41221a:	e5c8      	b.n	411dae <_dtoa_r+0x71e>
  41221c:	f000 80b4 	beq.w	412388 <_dtoa_r+0xcf8>
  412220:	9b04      	ldr	r3, [sp, #16]
  412222:	425d      	negs	r5, r3
  412224:	4b8e      	ldr	r3, [pc, #568]	; (412460 <_dtoa_r+0xdd0>)
  412226:	f005 020f 	and.w	r2, r5, #15
  41222a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  41222e:	e9d3 2300 	ldrd	r2, r3, [r3]
  412232:	e9dd 0100 	ldrd	r0, r1, [sp]
  412236:	f7fc f9df 	bl	40e5f8 <__aeabi_dmul>
  41223a:	112d      	asrs	r5, r5, #4
  41223c:	4607      	mov	r7, r0
  41223e:	4688      	mov	r8, r1
  412240:	f000 8128 	beq.w	412494 <_dtoa_r+0xe04>
  412244:	4e87      	ldr	r6, [pc, #540]	; (412464 <_dtoa_r+0xdd4>)
  412246:	f04f 0902 	mov.w	r9, #2
  41224a:	07e9      	lsls	r1, r5, #31
  41224c:	d509      	bpl.n	412262 <_dtoa_r+0xbd2>
  41224e:	4638      	mov	r0, r7
  412250:	4641      	mov	r1, r8
  412252:	e9d6 2300 	ldrd	r2, r3, [r6]
  412256:	f7fc f9cf 	bl	40e5f8 <__aeabi_dmul>
  41225a:	f109 0901 	add.w	r9, r9, #1
  41225e:	4607      	mov	r7, r0
  412260:	4688      	mov	r8, r1
  412262:	106d      	asrs	r5, r5, #1
  412264:	f106 0608 	add.w	r6, r6, #8
  412268:	d1ef      	bne.n	41224a <_dtoa_r+0xbba>
  41226a:	e614      	b.n	411e96 <_dtoa_r+0x806>
  41226c:	9907      	ldr	r1, [sp, #28]
  41226e:	2230      	movs	r2, #48	; 0x30
  412270:	700a      	strb	r2, [r1, #0]
  412272:	9a04      	ldr	r2, [sp, #16]
  412274:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  412278:	3201      	adds	r2, #1
  41227a:	9204      	str	r2, [sp, #16]
  41227c:	f7ff bbd0 	b.w	411a20 <_dtoa_r+0x390>
  412280:	6871      	ldr	r1, [r6, #4]
  412282:	4620      	mov	r0, r4
  412284:	f000 fa88 	bl	412798 <_Balloc>
  412288:	6933      	ldr	r3, [r6, #16]
  41228a:	3302      	adds	r3, #2
  41228c:	009a      	lsls	r2, r3, #2
  41228e:	4605      	mov	r5, r0
  412290:	f106 010c 	add.w	r1, r6, #12
  412294:	300c      	adds	r0, #12
  412296:	f7fd fae3 	bl	40f860 <memcpy>
  41229a:	4629      	mov	r1, r5
  41229c:	2201      	movs	r2, #1
  41229e:	4620      	mov	r0, r4
  4122a0:	f000 fc26 	bl	412af0 <__lshift>
  4122a4:	4680      	mov	r8, r0
  4122a6:	e4b6      	b.n	411c16 <_dtoa_r+0x586>
  4122a8:	9b00      	ldr	r3, [sp, #0]
  4122aa:	2b39      	cmp	r3, #57	; 0x39
  4122ac:	f000 8096 	beq.w	4123dc <_dtoa_r+0xd4c>
  4122b0:	9b00      	ldr	r3, [sp, #0]
  4122b2:	3301      	adds	r3, #1
  4122b4:	46b3      	mov	fp, r6
  4122b6:	703b      	strb	r3, [r7, #0]
  4122b8:	1c7d      	adds	r5, r7, #1
  4122ba:	4646      	mov	r6, r8
  4122bc:	e577      	b.n	411dae <_dtoa_r+0x71e>
  4122be:	46b3      	mov	fp, r6
  4122c0:	4646      	mov	r6, r8
  4122c2:	e558      	b.n	411d76 <_dtoa_r+0x6e6>
  4122c4:	f04f 0900 	mov.w	r9, #0
  4122c8:	464e      	mov	r6, r9
  4122ca:	e70f      	b.n	4120ec <_dtoa_r+0xa5c>
  4122cc:	4964      	ldr	r1, [pc, #400]	; (412460 <_dtoa_r+0xdd0>)
  4122ce:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
  4122d2:	462a      	mov	r2, r5
  4122d4:	4633      	mov	r3, r6
  4122d6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4122da:	f7fc f98d 	bl	40e5f8 <__aeabi_dmul>
  4122de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  4122e2:	4638      	mov	r0, r7
  4122e4:	4641      	mov	r1, r8
  4122e6:	f7fc fc37 	bl	40eb58 <__aeabi_d2iz>
  4122ea:	4605      	mov	r5, r0
  4122ec:	f7fc f91e 	bl	40e52c <__aeabi_i2d>
  4122f0:	4602      	mov	r2, r0
  4122f2:	460b      	mov	r3, r1
  4122f4:	4638      	mov	r0, r7
  4122f6:	4641      	mov	r1, r8
  4122f8:	f7fb ffca 	bl	40e290 <__aeabi_dsub>
  4122fc:	9a07      	ldr	r2, [sp, #28]
  4122fe:	3530      	adds	r5, #48	; 0x30
  412300:	f1b9 0f01 	cmp.w	r9, #1
  412304:	7015      	strb	r5, [r2, #0]
  412306:	4606      	mov	r6, r0
  412308:	460f      	mov	r7, r1
  41230a:	f102 0501 	add.w	r5, r2, #1
  41230e:	d01c      	beq.n	41234a <_dtoa_r+0xcba>
  412310:	9b07      	ldr	r3, [sp, #28]
  412312:	4499      	add	r9, r3
  412314:	2200      	movs	r2, #0
  412316:	4b54      	ldr	r3, [pc, #336]	; (412468 <_dtoa_r+0xdd8>)
  412318:	4630      	mov	r0, r6
  41231a:	4639      	mov	r1, r7
  41231c:	f7fc f96c 	bl	40e5f8 <__aeabi_dmul>
  412320:	460f      	mov	r7, r1
  412322:	4606      	mov	r6, r0
  412324:	f7fc fc18 	bl	40eb58 <__aeabi_d2iz>
  412328:	4680      	mov	r8, r0
  41232a:	f7fc f8ff 	bl	40e52c <__aeabi_i2d>
  41232e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  412332:	4602      	mov	r2, r0
  412334:	460b      	mov	r3, r1
  412336:	4630      	mov	r0, r6
  412338:	4639      	mov	r1, r7
  41233a:	f7fb ffa9 	bl	40e290 <__aeabi_dsub>
  41233e:	f805 8b01 	strb.w	r8, [r5], #1
  412342:	454d      	cmp	r5, r9
  412344:	4606      	mov	r6, r0
  412346:	460f      	mov	r7, r1
  412348:	d1e4      	bne.n	412314 <_dtoa_r+0xc84>
  41234a:	2200      	movs	r2, #0
  41234c:	4b47      	ldr	r3, [pc, #284]	; (41246c <_dtoa_r+0xddc>)
  41234e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  412352:	f7fb ff9f 	bl	40e294 <__adddf3>
  412356:	4632      	mov	r2, r6
  412358:	463b      	mov	r3, r7
  41235a:	f7fc fbbf 	bl	40eadc <__aeabi_dcmplt>
  41235e:	2800      	cmp	r0, #0
  412360:	d042      	beq.n	4123e8 <_dtoa_r+0xd58>
  412362:	9b11      	ldr	r3, [sp, #68]	; 0x44
  412364:	9304      	str	r3, [sp, #16]
  412366:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  41236a:	f7ff bb4c 	b.w	411a06 <_dtoa_r+0x376>
  41236e:	9b06      	ldr	r3, [sp, #24]
  412370:	9a08      	ldr	r2, [sp, #32]
  412372:	1a9d      	subs	r5, r3, r2
  412374:	2300      	movs	r3, #0
  412376:	f7ff bb7e 	b.w	411a76 <_dtoa_r+0x3e6>
  41237a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  41237c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  41237e:	9d06      	ldr	r5, [sp, #24]
  412380:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  412384:	f7ff bb77 	b.w	411a76 <_dtoa_r+0x3e6>
  412388:	e9dd 7800 	ldrd	r7, r8, [sp]
  41238c:	f04f 0902 	mov.w	r9, #2
  412390:	e581      	b.n	411e96 <_dtoa_r+0x806>
  412392:	9b08      	ldr	r3, [sp, #32]
  412394:	2b00      	cmp	r3, #0
  412396:	f43f aecd 	beq.w	412134 <_dtoa_r+0xaa4>
  41239a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41239c:	2b00      	cmp	r3, #0
  41239e:	f77f aa82 	ble.w	4118a6 <_dtoa_r+0x216>
  4123a2:	2200      	movs	r2, #0
  4123a4:	4b30      	ldr	r3, [pc, #192]	; (412468 <_dtoa_r+0xdd8>)
  4123a6:	4638      	mov	r0, r7
  4123a8:	4641      	mov	r1, r8
  4123aa:	f7fc f925 	bl	40e5f8 <__aeabi_dmul>
  4123ae:	4607      	mov	r7, r0
  4123b0:	4688      	mov	r8, r1
  4123b2:	f109 0001 	add.w	r0, r9, #1
  4123b6:	f7fc f8b9 	bl	40e52c <__aeabi_i2d>
  4123ba:	463a      	mov	r2, r7
  4123bc:	4643      	mov	r3, r8
  4123be:	f7fc f91b 	bl	40e5f8 <__aeabi_dmul>
  4123c2:	2200      	movs	r2, #0
  4123c4:	4b24      	ldr	r3, [pc, #144]	; (412458 <_dtoa_r+0xdc8>)
  4123c6:	f7fb ff65 	bl	40e294 <__adddf3>
  4123ca:	9a04      	ldr	r2, [sp, #16]
  4123cc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  4123d0:	3a01      	subs	r2, #1
  4123d2:	4605      	mov	r5, r0
  4123d4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4123d8:	9211      	str	r2, [sp, #68]	; 0x44
  4123da:	e57d      	b.n	411ed8 <_dtoa_r+0x848>
  4123dc:	2239      	movs	r2, #57	; 0x39
  4123de:	46b3      	mov	fp, r6
  4123e0:	703a      	strb	r2, [r7, #0]
  4123e2:	4646      	mov	r6, r8
  4123e4:	1c7d      	adds	r5, r7, #1
  4123e6:	e4d4      	b.n	411d92 <_dtoa_r+0x702>
  4123e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  4123ec:	2000      	movs	r0, #0
  4123ee:	491f      	ldr	r1, [pc, #124]	; (41246c <_dtoa_r+0xddc>)
  4123f0:	f7fb ff4e 	bl	40e290 <__aeabi_dsub>
  4123f4:	4632      	mov	r2, r6
  4123f6:	463b      	mov	r3, r7
  4123f8:	f7fc fb8e 	bl	40eb18 <__aeabi_dcmpgt>
  4123fc:	b910      	cbnz	r0, 412404 <_dtoa_r+0xd74>
  4123fe:	f7ff ba52 	b.w	4118a6 <_dtoa_r+0x216>
  412402:	4615      	mov	r5, r2
  412404:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  412408:	2b30      	cmp	r3, #48	; 0x30
  41240a:	f105 32ff 	add.w	r2, r5, #4294967295
  41240e:	d0f8      	beq.n	412402 <_dtoa_r+0xd72>
  412410:	e5ea      	b.n	411fe8 <_dtoa_r+0x958>
  412412:	4643      	mov	r3, r8
  412414:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
  412418:	46a0      	mov	r8, r4
  41241a:	461c      	mov	r4, r3
  41241c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  41241e:	9304      	str	r3, [sp, #16]
  412420:	f7ff baf1 	b.w	411a06 <_dtoa_r+0x376>
  412424:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
  412428:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
  41242c:	4644      	mov	r4, r8
  41242e:	f7ff ba3a 	b.w	4118a6 <_dtoa_r+0x216>
  412432:	46b8      	mov	r8, r7
  412434:	f7ff bbac 	b.w	411b90 <_dtoa_r+0x500>
  412438:	9b00      	ldr	r3, [sp, #0]
  41243a:	2b39      	cmp	r3, #57	; 0x39
  41243c:	d0ce      	beq.n	4123dc <_dtoa_r+0xd4c>
  41243e:	f1bb 0f00 	cmp.w	fp, #0
  412442:	f73f aed4 	bgt.w	4121ee <_dtoa_r+0xb5e>
  412446:	e6d5      	b.n	4121f4 <_dtoa_r+0xb64>
  412448:	f47f aed4 	bne.w	4121f4 <_dtoa_r+0xb64>
  41244c:	9b00      	ldr	r3, [sp, #0]
  41244e:	07da      	lsls	r2, r3, #31
  412450:	f57f aed0 	bpl.w	4121f4 <_dtoa_r+0xb64>
  412454:	e6c7      	b.n	4121e6 <_dtoa_r+0xb56>
  412456:	bf00      	nop
  412458:	401c0000 	.word	0x401c0000
  41245c:	40140000 	.word	0x40140000
  412460:	004139d8 	.word	0x004139d8
  412464:	004139b0 	.word	0x004139b0
  412468:	40240000 	.word	0x40240000
  41246c:	3fe00000 	.word	0x3fe00000
  412470:	4631      	mov	r1, r6
  412472:	2300      	movs	r3, #0
  412474:	220a      	movs	r2, #10
  412476:	4620      	mov	r0, r4
  412478:	f000 f9be 	bl	4127f8 <__multadd>
  41247c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41247e:	2b00      	cmp	r3, #0
  412480:	4606      	mov	r6, r0
  412482:	dd0a      	ble.n	41249a <_dtoa_r+0xe0a>
  412484:	9308      	str	r3, [sp, #32]
  412486:	f7ff bbb9 	b.w	411bfc <_dtoa_r+0x56c>
  41248a:	9b02      	ldr	r3, [sp, #8]
  41248c:	2b02      	cmp	r3, #2
  41248e:	dc22      	bgt.n	4124d6 <_dtoa_r+0xe46>
  412490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  412492:	e44a      	b.n	411d2a <_dtoa_r+0x69a>
  412494:	f04f 0902 	mov.w	r9, #2
  412498:	e4fd      	b.n	411e96 <_dtoa_r+0x806>
  41249a:	9b02      	ldr	r3, [sp, #8]
  41249c:	2b02      	cmp	r3, #2
  41249e:	dc1a      	bgt.n	4124d6 <_dtoa_r+0xe46>
  4124a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4124a2:	e7ef      	b.n	412484 <_dtoa_r+0xdf4>
  4124a4:	2500      	movs	r5, #0
  4124a6:	6465      	str	r5, [r4, #68]	; 0x44
  4124a8:	4629      	mov	r1, r5
  4124aa:	4620      	mov	r0, r4
  4124ac:	f000 f974 	bl	412798 <_Balloc>
  4124b0:	f04f 33ff 	mov.w	r3, #4294967295
  4124b4:	9308      	str	r3, [sp, #32]
  4124b6:	930d      	str	r3, [sp, #52]	; 0x34
  4124b8:	2301      	movs	r3, #1
  4124ba:	9007      	str	r0, [sp, #28]
  4124bc:	46ab      	mov	fp, r5
  4124be:	6420      	str	r0, [r4, #64]	; 0x40
  4124c0:	9309      	str	r3, [sp, #36]	; 0x24
  4124c2:	f7ff b9f0 	b.w	4118a6 <_dtoa_r+0x216>
  4124c6:	f43f ab7b 	beq.w	411bc0 <_dtoa_r+0x530>
  4124ca:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4124ce:	e40b      	b.n	411ce8 <_dtoa_r+0x658>
  4124d0:	2701      	movs	r7, #1
  4124d2:	f7ff b9af 	b.w	411834 <_dtoa_r+0x1a4>
  4124d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4124d8:	9308      	str	r3, [sp, #32]
  4124da:	e5f8      	b.n	4120ce <_dtoa_r+0xa3e>

004124dc <__libc_fini_array>:
  4124dc:	b538      	push	{r3, r4, r5, lr}
  4124de:	4c0a      	ldr	r4, [pc, #40]	; (412508 <__libc_fini_array+0x2c>)
  4124e0:	4d0a      	ldr	r5, [pc, #40]	; (41250c <__libc_fini_array+0x30>)
  4124e2:	1b64      	subs	r4, r4, r5
  4124e4:	10a4      	asrs	r4, r4, #2
  4124e6:	d00a      	beq.n	4124fe <__libc_fini_array+0x22>
  4124e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4124ec:	3b01      	subs	r3, #1
  4124ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4124f2:	3c01      	subs	r4, #1
  4124f4:	f855 3904 	ldr.w	r3, [r5], #-4
  4124f8:	4798      	blx	r3
  4124fa:	2c00      	cmp	r4, #0
  4124fc:	d1f9      	bne.n	4124f2 <__libc_fini_array+0x16>
  4124fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  412502:	f001 bb67 	b.w	413bd4 <_fini>
  412506:	bf00      	nop
  412508:	00413be4 	.word	0x00413be4
  41250c:	00413be0 	.word	0x00413be0

00412510 <_malloc_trim_r>:
  412510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  412512:	4f24      	ldr	r7, [pc, #144]	; (4125a4 <_malloc_trim_r+0x94>)
  412514:	460c      	mov	r4, r1
  412516:	4606      	mov	r6, r0
  412518:	f7fd faee 	bl	40faf8 <__malloc_lock>
  41251c:	68bb      	ldr	r3, [r7, #8]
  41251e:	685d      	ldr	r5, [r3, #4]
  412520:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  412524:	310f      	adds	r1, #15
  412526:	f025 0503 	bic.w	r5, r5, #3
  41252a:	4429      	add	r1, r5
  41252c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  412530:	f021 010f 	bic.w	r1, r1, #15
  412534:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  412538:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  41253c:	db07      	blt.n	41254e <_malloc_trim_r+0x3e>
  41253e:	2100      	movs	r1, #0
  412540:	4630      	mov	r0, r6
  412542:	f7fd fc8b 	bl	40fe5c <_sbrk_r>
  412546:	68bb      	ldr	r3, [r7, #8]
  412548:	442b      	add	r3, r5
  41254a:	4298      	cmp	r0, r3
  41254c:	d004      	beq.n	412558 <_malloc_trim_r+0x48>
  41254e:	4630      	mov	r0, r6
  412550:	f7fd fad8 	bl	40fb04 <__malloc_unlock>
  412554:	2000      	movs	r0, #0
  412556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412558:	4261      	negs	r1, r4
  41255a:	4630      	mov	r0, r6
  41255c:	f7fd fc7e 	bl	40fe5c <_sbrk_r>
  412560:	3001      	adds	r0, #1
  412562:	d00d      	beq.n	412580 <_malloc_trim_r+0x70>
  412564:	4b10      	ldr	r3, [pc, #64]	; (4125a8 <_malloc_trim_r+0x98>)
  412566:	68ba      	ldr	r2, [r7, #8]
  412568:	6819      	ldr	r1, [r3, #0]
  41256a:	1b2d      	subs	r5, r5, r4
  41256c:	f045 0501 	orr.w	r5, r5, #1
  412570:	4630      	mov	r0, r6
  412572:	1b09      	subs	r1, r1, r4
  412574:	6055      	str	r5, [r2, #4]
  412576:	6019      	str	r1, [r3, #0]
  412578:	f7fd fac4 	bl	40fb04 <__malloc_unlock>
  41257c:	2001      	movs	r0, #1
  41257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412580:	2100      	movs	r1, #0
  412582:	4630      	mov	r0, r6
  412584:	f7fd fc6a 	bl	40fe5c <_sbrk_r>
  412588:	68ba      	ldr	r2, [r7, #8]
  41258a:	1a83      	subs	r3, r0, r2
  41258c:	2b0f      	cmp	r3, #15
  41258e:	ddde      	ble.n	41254e <_malloc_trim_r+0x3e>
  412590:	4c06      	ldr	r4, [pc, #24]	; (4125ac <_malloc_trim_r+0x9c>)
  412592:	4905      	ldr	r1, [pc, #20]	; (4125a8 <_malloc_trim_r+0x98>)
  412594:	6824      	ldr	r4, [r4, #0]
  412596:	f043 0301 	orr.w	r3, r3, #1
  41259a:	1b00      	subs	r0, r0, r4
  41259c:	6053      	str	r3, [r2, #4]
  41259e:	6008      	str	r0, [r1, #0]
  4125a0:	e7d5      	b.n	41254e <_malloc_trim_r+0x3e>
  4125a2:	bf00      	nop
  4125a4:	20002948 	.word	0x20002948
  4125a8:	2000489c 	.word	0x2000489c
  4125ac:	20002d50 	.word	0x20002d50

004125b0 <_free_r>:
  4125b0:	2900      	cmp	r1, #0
  4125b2:	d044      	beq.n	41263e <_free_r+0x8e>
  4125b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4125b8:	460d      	mov	r5, r1
  4125ba:	4680      	mov	r8, r0
  4125bc:	f7fd fa9c 	bl	40faf8 <__malloc_lock>
  4125c0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4125c4:	4969      	ldr	r1, [pc, #420]	; (41276c <_free_r+0x1bc>)
  4125c6:	f027 0301 	bic.w	r3, r7, #1
  4125ca:	f1a5 0408 	sub.w	r4, r5, #8
  4125ce:	18e2      	adds	r2, r4, r3
  4125d0:	688e      	ldr	r6, [r1, #8]
  4125d2:	6850      	ldr	r0, [r2, #4]
  4125d4:	42b2      	cmp	r2, r6
  4125d6:	f020 0003 	bic.w	r0, r0, #3
  4125da:	d05e      	beq.n	41269a <_free_r+0xea>
  4125dc:	07fe      	lsls	r6, r7, #31
  4125de:	6050      	str	r0, [r2, #4]
  4125e0:	d40b      	bmi.n	4125fa <_free_r+0x4a>
  4125e2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4125e6:	1be4      	subs	r4, r4, r7
  4125e8:	f101 0e08 	add.w	lr, r1, #8
  4125ec:	68a5      	ldr	r5, [r4, #8]
  4125ee:	4575      	cmp	r5, lr
  4125f0:	443b      	add	r3, r7
  4125f2:	d06d      	beq.n	4126d0 <_free_r+0x120>
  4125f4:	68e7      	ldr	r7, [r4, #12]
  4125f6:	60ef      	str	r7, [r5, #12]
  4125f8:	60bd      	str	r5, [r7, #8]
  4125fa:	1815      	adds	r5, r2, r0
  4125fc:	686d      	ldr	r5, [r5, #4]
  4125fe:	07ed      	lsls	r5, r5, #31
  412600:	d53e      	bpl.n	412680 <_free_r+0xd0>
  412602:	f043 0201 	orr.w	r2, r3, #1
  412606:	6062      	str	r2, [r4, #4]
  412608:	50e3      	str	r3, [r4, r3]
  41260a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  41260e:	d217      	bcs.n	412640 <_free_r+0x90>
  412610:	08db      	lsrs	r3, r3, #3
  412612:	1c58      	adds	r0, r3, #1
  412614:	109a      	asrs	r2, r3, #2
  412616:	684d      	ldr	r5, [r1, #4]
  412618:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  41261c:	60a7      	str	r7, [r4, #8]
  41261e:	2301      	movs	r3, #1
  412620:	4093      	lsls	r3, r2
  412622:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  412626:	432b      	orrs	r3, r5
  412628:	3a08      	subs	r2, #8
  41262a:	60e2      	str	r2, [r4, #12]
  41262c:	604b      	str	r3, [r1, #4]
  41262e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  412632:	60fc      	str	r4, [r7, #12]
  412634:	4640      	mov	r0, r8
  412636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41263a:	f7fd ba63 	b.w	40fb04 <__malloc_unlock>
  41263e:	4770      	bx	lr
  412640:	0a5a      	lsrs	r2, r3, #9
  412642:	2a04      	cmp	r2, #4
  412644:	d852      	bhi.n	4126ec <_free_r+0x13c>
  412646:	099a      	lsrs	r2, r3, #6
  412648:	f102 0739 	add.w	r7, r2, #57	; 0x39
  41264c:	00ff      	lsls	r7, r7, #3
  41264e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  412652:	19c8      	adds	r0, r1, r7
  412654:	59ca      	ldr	r2, [r1, r7]
  412656:	3808      	subs	r0, #8
  412658:	4290      	cmp	r0, r2
  41265a:	d04f      	beq.n	4126fc <_free_r+0x14c>
  41265c:	6851      	ldr	r1, [r2, #4]
  41265e:	f021 0103 	bic.w	r1, r1, #3
  412662:	428b      	cmp	r3, r1
  412664:	d232      	bcs.n	4126cc <_free_r+0x11c>
  412666:	6892      	ldr	r2, [r2, #8]
  412668:	4290      	cmp	r0, r2
  41266a:	d1f7      	bne.n	41265c <_free_r+0xac>
  41266c:	68c3      	ldr	r3, [r0, #12]
  41266e:	60a0      	str	r0, [r4, #8]
  412670:	60e3      	str	r3, [r4, #12]
  412672:	609c      	str	r4, [r3, #8]
  412674:	60c4      	str	r4, [r0, #12]
  412676:	4640      	mov	r0, r8
  412678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  41267c:	f7fd ba42 	b.w	40fb04 <__malloc_unlock>
  412680:	6895      	ldr	r5, [r2, #8]
  412682:	4f3b      	ldr	r7, [pc, #236]	; (412770 <_free_r+0x1c0>)
  412684:	42bd      	cmp	r5, r7
  412686:	4403      	add	r3, r0
  412688:	d040      	beq.n	41270c <_free_r+0x15c>
  41268a:	68d0      	ldr	r0, [r2, #12]
  41268c:	60e8      	str	r0, [r5, #12]
  41268e:	f043 0201 	orr.w	r2, r3, #1
  412692:	6085      	str	r5, [r0, #8]
  412694:	6062      	str	r2, [r4, #4]
  412696:	50e3      	str	r3, [r4, r3]
  412698:	e7b7      	b.n	41260a <_free_r+0x5a>
  41269a:	07ff      	lsls	r7, r7, #31
  41269c:	4403      	add	r3, r0
  41269e:	d407      	bmi.n	4126b0 <_free_r+0x100>
  4126a0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4126a4:	1aa4      	subs	r4, r4, r2
  4126a6:	4413      	add	r3, r2
  4126a8:	68a0      	ldr	r0, [r4, #8]
  4126aa:	68e2      	ldr	r2, [r4, #12]
  4126ac:	60c2      	str	r2, [r0, #12]
  4126ae:	6090      	str	r0, [r2, #8]
  4126b0:	4a30      	ldr	r2, [pc, #192]	; (412774 <_free_r+0x1c4>)
  4126b2:	6812      	ldr	r2, [r2, #0]
  4126b4:	f043 0001 	orr.w	r0, r3, #1
  4126b8:	4293      	cmp	r3, r2
  4126ba:	6060      	str	r0, [r4, #4]
  4126bc:	608c      	str	r4, [r1, #8]
  4126be:	d3b9      	bcc.n	412634 <_free_r+0x84>
  4126c0:	4b2d      	ldr	r3, [pc, #180]	; (412778 <_free_r+0x1c8>)
  4126c2:	4640      	mov	r0, r8
  4126c4:	6819      	ldr	r1, [r3, #0]
  4126c6:	f7ff ff23 	bl	412510 <_malloc_trim_r>
  4126ca:	e7b3      	b.n	412634 <_free_r+0x84>
  4126cc:	4610      	mov	r0, r2
  4126ce:	e7cd      	b.n	41266c <_free_r+0xbc>
  4126d0:	1811      	adds	r1, r2, r0
  4126d2:	6849      	ldr	r1, [r1, #4]
  4126d4:	07c9      	lsls	r1, r1, #31
  4126d6:	d444      	bmi.n	412762 <_free_r+0x1b2>
  4126d8:	6891      	ldr	r1, [r2, #8]
  4126da:	68d2      	ldr	r2, [r2, #12]
  4126dc:	60ca      	str	r2, [r1, #12]
  4126de:	4403      	add	r3, r0
  4126e0:	f043 0001 	orr.w	r0, r3, #1
  4126e4:	6091      	str	r1, [r2, #8]
  4126e6:	6060      	str	r0, [r4, #4]
  4126e8:	50e3      	str	r3, [r4, r3]
  4126ea:	e7a3      	b.n	412634 <_free_r+0x84>
  4126ec:	2a14      	cmp	r2, #20
  4126ee:	d816      	bhi.n	41271e <_free_r+0x16e>
  4126f0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4126f4:	00ff      	lsls	r7, r7, #3
  4126f6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4126fa:	e7aa      	b.n	412652 <_free_r+0xa2>
  4126fc:	10aa      	asrs	r2, r5, #2
  4126fe:	2301      	movs	r3, #1
  412700:	684d      	ldr	r5, [r1, #4]
  412702:	4093      	lsls	r3, r2
  412704:	432b      	orrs	r3, r5
  412706:	604b      	str	r3, [r1, #4]
  412708:	4603      	mov	r3, r0
  41270a:	e7b0      	b.n	41266e <_free_r+0xbe>
  41270c:	f043 0201 	orr.w	r2, r3, #1
  412710:	614c      	str	r4, [r1, #20]
  412712:	610c      	str	r4, [r1, #16]
  412714:	60e5      	str	r5, [r4, #12]
  412716:	60a5      	str	r5, [r4, #8]
  412718:	6062      	str	r2, [r4, #4]
  41271a:	50e3      	str	r3, [r4, r3]
  41271c:	e78a      	b.n	412634 <_free_r+0x84>
  41271e:	2a54      	cmp	r2, #84	; 0x54
  412720:	d806      	bhi.n	412730 <_free_r+0x180>
  412722:	0b1a      	lsrs	r2, r3, #12
  412724:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  412728:	00ff      	lsls	r7, r7, #3
  41272a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  41272e:	e790      	b.n	412652 <_free_r+0xa2>
  412730:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  412734:	d806      	bhi.n	412744 <_free_r+0x194>
  412736:	0bda      	lsrs	r2, r3, #15
  412738:	f102 0778 	add.w	r7, r2, #120	; 0x78
  41273c:	00ff      	lsls	r7, r7, #3
  41273e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  412742:	e786      	b.n	412652 <_free_r+0xa2>
  412744:	f240 5054 	movw	r0, #1364	; 0x554
  412748:	4282      	cmp	r2, r0
  41274a:	d806      	bhi.n	41275a <_free_r+0x1aa>
  41274c:	0c9a      	lsrs	r2, r3, #18
  41274e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  412752:	00ff      	lsls	r7, r7, #3
  412754:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  412758:	e77b      	b.n	412652 <_free_r+0xa2>
  41275a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  41275e:	257e      	movs	r5, #126	; 0x7e
  412760:	e777      	b.n	412652 <_free_r+0xa2>
  412762:	f043 0101 	orr.w	r1, r3, #1
  412766:	6061      	str	r1, [r4, #4]
  412768:	6013      	str	r3, [r2, #0]
  41276a:	e763      	b.n	412634 <_free_r+0x84>
  41276c:	20002948 	.word	0x20002948
  412770:	20002950 	.word	0x20002950
  412774:	20002d54 	.word	0x20002d54
  412778:	200048cc 	.word	0x200048cc

0041277c <_localeconv_r>:
  41277c:	4a04      	ldr	r2, [pc, #16]	; (412790 <_localeconv_r+0x14>)
  41277e:	4b05      	ldr	r3, [pc, #20]	; (412794 <_localeconv_r+0x18>)
  412780:	6812      	ldr	r2, [r2, #0]
  412782:	6b50      	ldr	r0, [r2, #52]	; 0x34
  412784:	2800      	cmp	r0, #0
  412786:	bf08      	it	eq
  412788:	4618      	moveq	r0, r3
  41278a:	30f0      	adds	r0, #240	; 0xf0
  41278c:	4770      	bx	lr
  41278e:	bf00      	nop
  412790:	2000251c 	.word	0x2000251c
  412794:	20002d5c 	.word	0x20002d5c

00412798 <_Balloc>:
  412798:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  41279a:	b570      	push	{r4, r5, r6, lr}
  41279c:	4605      	mov	r5, r0
  41279e:	460c      	mov	r4, r1
  4127a0:	b14b      	cbz	r3, 4127b6 <_Balloc+0x1e>
  4127a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4127a6:	b180      	cbz	r0, 4127ca <_Balloc+0x32>
  4127a8:	6802      	ldr	r2, [r0, #0]
  4127aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4127ae:	2300      	movs	r3, #0
  4127b0:	6103      	str	r3, [r0, #16]
  4127b2:	60c3      	str	r3, [r0, #12]
  4127b4:	bd70      	pop	{r4, r5, r6, pc}
  4127b6:	2221      	movs	r2, #33	; 0x21
  4127b8:	2104      	movs	r1, #4
  4127ba:	f000 fbc9 	bl	412f50 <_calloc_r>
  4127be:	64e8      	str	r0, [r5, #76]	; 0x4c
  4127c0:	4603      	mov	r3, r0
  4127c2:	2800      	cmp	r0, #0
  4127c4:	d1ed      	bne.n	4127a2 <_Balloc+0xa>
  4127c6:	2000      	movs	r0, #0
  4127c8:	bd70      	pop	{r4, r5, r6, pc}
  4127ca:	2101      	movs	r1, #1
  4127cc:	fa01 f604 	lsl.w	r6, r1, r4
  4127d0:	1d72      	adds	r2, r6, #5
  4127d2:	4628      	mov	r0, r5
  4127d4:	0092      	lsls	r2, r2, #2
  4127d6:	f000 fbbb 	bl	412f50 <_calloc_r>
  4127da:	2800      	cmp	r0, #0
  4127dc:	d0f3      	beq.n	4127c6 <_Balloc+0x2e>
  4127de:	6044      	str	r4, [r0, #4]
  4127e0:	6086      	str	r6, [r0, #8]
  4127e2:	e7e4      	b.n	4127ae <_Balloc+0x16>

004127e4 <_Bfree>:
  4127e4:	b131      	cbz	r1, 4127f4 <_Bfree+0x10>
  4127e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4127e8:	684a      	ldr	r2, [r1, #4]
  4127ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4127ee:	6008      	str	r0, [r1, #0]
  4127f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4127f4:	4770      	bx	lr
  4127f6:	bf00      	nop

004127f8 <__multadd>:
  4127f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4127fa:	690c      	ldr	r4, [r1, #16]
  4127fc:	b083      	sub	sp, #12
  4127fe:	460d      	mov	r5, r1
  412800:	4606      	mov	r6, r0
  412802:	f101 0e14 	add.w	lr, r1, #20
  412806:	2700      	movs	r7, #0
  412808:	f8de 0000 	ldr.w	r0, [lr]
  41280c:	b281      	uxth	r1, r0
  41280e:	fb02 3301 	mla	r3, r2, r1, r3
  412812:	0c01      	lsrs	r1, r0, #16
  412814:	0c18      	lsrs	r0, r3, #16
  412816:	fb02 0101 	mla	r1, r2, r1, r0
  41281a:	b29b      	uxth	r3, r3
  41281c:	3701      	adds	r7, #1
  41281e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  412822:	42bc      	cmp	r4, r7
  412824:	f84e 3b04 	str.w	r3, [lr], #4
  412828:	ea4f 4311 	mov.w	r3, r1, lsr #16
  41282c:	dcec      	bgt.n	412808 <__multadd+0x10>
  41282e:	b13b      	cbz	r3, 412840 <__multadd+0x48>
  412830:	68aa      	ldr	r2, [r5, #8]
  412832:	4294      	cmp	r4, r2
  412834:	da07      	bge.n	412846 <__multadd+0x4e>
  412836:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  41283a:	3401      	adds	r4, #1
  41283c:	6153      	str	r3, [r2, #20]
  41283e:	612c      	str	r4, [r5, #16]
  412840:	4628      	mov	r0, r5
  412842:	b003      	add	sp, #12
  412844:	bdf0      	pop	{r4, r5, r6, r7, pc}
  412846:	6869      	ldr	r1, [r5, #4]
  412848:	9301      	str	r3, [sp, #4]
  41284a:	3101      	adds	r1, #1
  41284c:	4630      	mov	r0, r6
  41284e:	f7ff ffa3 	bl	412798 <_Balloc>
  412852:	692a      	ldr	r2, [r5, #16]
  412854:	3202      	adds	r2, #2
  412856:	f105 010c 	add.w	r1, r5, #12
  41285a:	4607      	mov	r7, r0
  41285c:	0092      	lsls	r2, r2, #2
  41285e:	300c      	adds	r0, #12
  412860:	f7fc fffe 	bl	40f860 <memcpy>
  412864:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  412866:	6869      	ldr	r1, [r5, #4]
  412868:	9b01      	ldr	r3, [sp, #4]
  41286a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  41286e:	6028      	str	r0, [r5, #0]
  412870:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  412874:	463d      	mov	r5, r7
  412876:	e7de      	b.n	412836 <__multadd+0x3e>

00412878 <__hi0bits>:
  412878:	0c02      	lsrs	r2, r0, #16
  41287a:	0412      	lsls	r2, r2, #16
  41287c:	4603      	mov	r3, r0
  41287e:	b9b2      	cbnz	r2, 4128ae <__hi0bits+0x36>
  412880:	0403      	lsls	r3, r0, #16
  412882:	2010      	movs	r0, #16
  412884:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  412888:	bf04      	itt	eq
  41288a:	021b      	lsleq	r3, r3, #8
  41288c:	3008      	addeq	r0, #8
  41288e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  412892:	bf04      	itt	eq
  412894:	011b      	lsleq	r3, r3, #4
  412896:	3004      	addeq	r0, #4
  412898:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  41289c:	bf04      	itt	eq
  41289e:	009b      	lsleq	r3, r3, #2
  4128a0:	3002      	addeq	r0, #2
  4128a2:	2b00      	cmp	r3, #0
  4128a4:	db02      	blt.n	4128ac <__hi0bits+0x34>
  4128a6:	005b      	lsls	r3, r3, #1
  4128a8:	d403      	bmi.n	4128b2 <__hi0bits+0x3a>
  4128aa:	2020      	movs	r0, #32
  4128ac:	4770      	bx	lr
  4128ae:	2000      	movs	r0, #0
  4128b0:	e7e8      	b.n	412884 <__hi0bits+0xc>
  4128b2:	3001      	adds	r0, #1
  4128b4:	4770      	bx	lr
  4128b6:	bf00      	nop

004128b8 <__lo0bits>:
  4128b8:	6803      	ldr	r3, [r0, #0]
  4128ba:	f013 0207 	ands.w	r2, r3, #7
  4128be:	4601      	mov	r1, r0
  4128c0:	d007      	beq.n	4128d2 <__lo0bits+0x1a>
  4128c2:	07da      	lsls	r2, r3, #31
  4128c4:	d421      	bmi.n	41290a <__lo0bits+0x52>
  4128c6:	0798      	lsls	r0, r3, #30
  4128c8:	d421      	bmi.n	41290e <__lo0bits+0x56>
  4128ca:	089b      	lsrs	r3, r3, #2
  4128cc:	600b      	str	r3, [r1, #0]
  4128ce:	2002      	movs	r0, #2
  4128d0:	4770      	bx	lr
  4128d2:	b298      	uxth	r0, r3
  4128d4:	b198      	cbz	r0, 4128fe <__lo0bits+0x46>
  4128d6:	4610      	mov	r0, r2
  4128d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4128dc:	bf04      	itt	eq
  4128de:	0a1b      	lsreq	r3, r3, #8
  4128e0:	3008      	addeq	r0, #8
  4128e2:	071a      	lsls	r2, r3, #28
  4128e4:	bf04      	itt	eq
  4128e6:	091b      	lsreq	r3, r3, #4
  4128e8:	3004      	addeq	r0, #4
  4128ea:	079a      	lsls	r2, r3, #30
  4128ec:	bf04      	itt	eq
  4128ee:	089b      	lsreq	r3, r3, #2
  4128f0:	3002      	addeq	r0, #2
  4128f2:	07da      	lsls	r2, r3, #31
  4128f4:	d407      	bmi.n	412906 <__lo0bits+0x4e>
  4128f6:	085b      	lsrs	r3, r3, #1
  4128f8:	d104      	bne.n	412904 <__lo0bits+0x4c>
  4128fa:	2020      	movs	r0, #32
  4128fc:	4770      	bx	lr
  4128fe:	0c1b      	lsrs	r3, r3, #16
  412900:	2010      	movs	r0, #16
  412902:	e7e9      	b.n	4128d8 <__lo0bits+0x20>
  412904:	3001      	adds	r0, #1
  412906:	600b      	str	r3, [r1, #0]
  412908:	4770      	bx	lr
  41290a:	2000      	movs	r0, #0
  41290c:	4770      	bx	lr
  41290e:	085b      	lsrs	r3, r3, #1
  412910:	600b      	str	r3, [r1, #0]
  412912:	2001      	movs	r0, #1
  412914:	4770      	bx	lr
  412916:	bf00      	nop

00412918 <__i2b>:
  412918:	b510      	push	{r4, lr}
  41291a:	460c      	mov	r4, r1
  41291c:	2101      	movs	r1, #1
  41291e:	f7ff ff3b 	bl	412798 <_Balloc>
  412922:	2201      	movs	r2, #1
  412924:	6144      	str	r4, [r0, #20]
  412926:	6102      	str	r2, [r0, #16]
  412928:	bd10      	pop	{r4, pc}
  41292a:	bf00      	nop

0041292c <__multiply>:
  41292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412930:	690c      	ldr	r4, [r1, #16]
  412932:	6915      	ldr	r5, [r2, #16]
  412934:	42ac      	cmp	r4, r5
  412936:	b083      	sub	sp, #12
  412938:	468b      	mov	fp, r1
  41293a:	4616      	mov	r6, r2
  41293c:	da04      	bge.n	412948 <__multiply+0x1c>
  41293e:	4622      	mov	r2, r4
  412940:	46b3      	mov	fp, r6
  412942:	462c      	mov	r4, r5
  412944:	460e      	mov	r6, r1
  412946:	4615      	mov	r5, r2
  412948:	f8db 3008 	ldr.w	r3, [fp, #8]
  41294c:	f8db 1004 	ldr.w	r1, [fp, #4]
  412950:	eb04 0805 	add.w	r8, r4, r5
  412954:	4598      	cmp	r8, r3
  412956:	bfc8      	it	gt
  412958:	3101      	addgt	r1, #1
  41295a:	f7ff ff1d 	bl	412798 <_Balloc>
  41295e:	f100 0914 	add.w	r9, r0, #20
  412962:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  412966:	45d1      	cmp	r9, sl
  412968:	9000      	str	r0, [sp, #0]
  41296a:	d205      	bcs.n	412978 <__multiply+0x4c>
  41296c:	464b      	mov	r3, r9
  41296e:	2100      	movs	r1, #0
  412970:	f843 1b04 	str.w	r1, [r3], #4
  412974:	459a      	cmp	sl, r3
  412976:	d8fb      	bhi.n	412970 <__multiply+0x44>
  412978:	f106 0c14 	add.w	ip, r6, #20
  41297c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  412980:	f10b 0b14 	add.w	fp, fp, #20
  412984:	459c      	cmp	ip, r3
  412986:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  41298a:	d24c      	bcs.n	412a26 <__multiply+0xfa>
  41298c:	f8cd a004 	str.w	sl, [sp, #4]
  412990:	469a      	mov	sl, r3
  412992:	f8dc 5000 	ldr.w	r5, [ip]
  412996:	b2af      	uxth	r7, r5
  412998:	b1ef      	cbz	r7, 4129d6 <__multiply+0xaa>
  41299a:	2100      	movs	r1, #0
  41299c:	464d      	mov	r5, r9
  41299e:	465e      	mov	r6, fp
  4129a0:	460c      	mov	r4, r1
  4129a2:	f856 2b04 	ldr.w	r2, [r6], #4
  4129a6:	6828      	ldr	r0, [r5, #0]
  4129a8:	b293      	uxth	r3, r2
  4129aa:	b281      	uxth	r1, r0
  4129ac:	fb07 1303 	mla	r3, r7, r3, r1
  4129b0:	0c12      	lsrs	r2, r2, #16
  4129b2:	0c01      	lsrs	r1, r0, #16
  4129b4:	4423      	add	r3, r4
  4129b6:	fb07 1102 	mla	r1, r7, r2, r1
  4129ba:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4129be:	b29b      	uxth	r3, r3
  4129c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4129c4:	45b6      	cmp	lr, r6
  4129c6:	f845 3b04 	str.w	r3, [r5], #4
  4129ca:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4129ce:	d8e8      	bhi.n	4129a2 <__multiply+0x76>
  4129d0:	602c      	str	r4, [r5, #0]
  4129d2:	f8dc 5000 	ldr.w	r5, [ip]
  4129d6:	0c2d      	lsrs	r5, r5, #16
  4129d8:	d01d      	beq.n	412a16 <__multiply+0xea>
  4129da:	f8d9 3000 	ldr.w	r3, [r9]
  4129de:	4648      	mov	r0, r9
  4129e0:	461c      	mov	r4, r3
  4129e2:	4659      	mov	r1, fp
  4129e4:	2200      	movs	r2, #0
  4129e6:	880e      	ldrh	r6, [r1, #0]
  4129e8:	0c24      	lsrs	r4, r4, #16
  4129ea:	fb05 4406 	mla	r4, r5, r6, r4
  4129ee:	4422      	add	r2, r4
  4129f0:	b29b      	uxth	r3, r3
  4129f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4129f6:	f840 3b04 	str.w	r3, [r0], #4
  4129fa:	f851 3b04 	ldr.w	r3, [r1], #4
  4129fe:	6804      	ldr	r4, [r0, #0]
  412a00:	0c1b      	lsrs	r3, r3, #16
  412a02:	b2a6      	uxth	r6, r4
  412a04:	fb05 6303 	mla	r3, r5, r3, r6
  412a08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  412a0c:	458e      	cmp	lr, r1
  412a0e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  412a12:	d8e8      	bhi.n	4129e6 <__multiply+0xba>
  412a14:	6003      	str	r3, [r0, #0]
  412a16:	f10c 0c04 	add.w	ip, ip, #4
  412a1a:	45e2      	cmp	sl, ip
  412a1c:	f109 0904 	add.w	r9, r9, #4
  412a20:	d8b7      	bhi.n	412992 <__multiply+0x66>
  412a22:	f8dd a004 	ldr.w	sl, [sp, #4]
  412a26:	f1b8 0f00 	cmp.w	r8, #0
  412a2a:	dd0b      	ble.n	412a44 <__multiply+0x118>
  412a2c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  412a30:	f1aa 0a04 	sub.w	sl, sl, #4
  412a34:	b11b      	cbz	r3, 412a3e <__multiply+0x112>
  412a36:	e005      	b.n	412a44 <__multiply+0x118>
  412a38:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  412a3c:	b913      	cbnz	r3, 412a44 <__multiply+0x118>
  412a3e:	f1b8 0801 	subs.w	r8, r8, #1
  412a42:	d1f9      	bne.n	412a38 <__multiply+0x10c>
  412a44:	9800      	ldr	r0, [sp, #0]
  412a46:	f8c0 8010 	str.w	r8, [r0, #16]
  412a4a:	b003      	add	sp, #12
  412a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412a50 <__pow5mult>:
  412a50:	f012 0303 	ands.w	r3, r2, #3
  412a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412a58:	4614      	mov	r4, r2
  412a5a:	4607      	mov	r7, r0
  412a5c:	d12e      	bne.n	412abc <__pow5mult+0x6c>
  412a5e:	460d      	mov	r5, r1
  412a60:	10a4      	asrs	r4, r4, #2
  412a62:	d01c      	beq.n	412a9e <__pow5mult+0x4e>
  412a64:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  412a66:	b396      	cbz	r6, 412ace <__pow5mult+0x7e>
  412a68:	07e3      	lsls	r3, r4, #31
  412a6a:	f04f 0800 	mov.w	r8, #0
  412a6e:	d406      	bmi.n	412a7e <__pow5mult+0x2e>
  412a70:	1064      	asrs	r4, r4, #1
  412a72:	d014      	beq.n	412a9e <__pow5mult+0x4e>
  412a74:	6830      	ldr	r0, [r6, #0]
  412a76:	b1a8      	cbz	r0, 412aa4 <__pow5mult+0x54>
  412a78:	4606      	mov	r6, r0
  412a7a:	07e3      	lsls	r3, r4, #31
  412a7c:	d5f8      	bpl.n	412a70 <__pow5mult+0x20>
  412a7e:	4632      	mov	r2, r6
  412a80:	4629      	mov	r1, r5
  412a82:	4638      	mov	r0, r7
  412a84:	f7ff ff52 	bl	41292c <__multiply>
  412a88:	b1b5      	cbz	r5, 412ab8 <__pow5mult+0x68>
  412a8a:	686a      	ldr	r2, [r5, #4]
  412a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  412a8e:	1064      	asrs	r4, r4, #1
  412a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  412a94:	6029      	str	r1, [r5, #0]
  412a96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  412a9a:	4605      	mov	r5, r0
  412a9c:	d1ea      	bne.n	412a74 <__pow5mult+0x24>
  412a9e:	4628      	mov	r0, r5
  412aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412aa4:	4632      	mov	r2, r6
  412aa6:	4631      	mov	r1, r6
  412aa8:	4638      	mov	r0, r7
  412aaa:	f7ff ff3f 	bl	41292c <__multiply>
  412aae:	6030      	str	r0, [r6, #0]
  412ab0:	f8c0 8000 	str.w	r8, [r0]
  412ab4:	4606      	mov	r6, r0
  412ab6:	e7e0      	b.n	412a7a <__pow5mult+0x2a>
  412ab8:	4605      	mov	r5, r0
  412aba:	e7d9      	b.n	412a70 <__pow5mult+0x20>
  412abc:	1e5a      	subs	r2, r3, #1
  412abe:	4d0b      	ldr	r5, [pc, #44]	; (412aec <__pow5mult+0x9c>)
  412ac0:	2300      	movs	r3, #0
  412ac2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  412ac6:	f7ff fe97 	bl	4127f8 <__multadd>
  412aca:	4605      	mov	r5, r0
  412acc:	e7c8      	b.n	412a60 <__pow5mult+0x10>
  412ace:	2101      	movs	r1, #1
  412ad0:	4638      	mov	r0, r7
  412ad2:	f7ff fe61 	bl	412798 <_Balloc>
  412ad6:	f240 2171 	movw	r1, #625	; 0x271
  412ada:	2201      	movs	r2, #1
  412adc:	2300      	movs	r3, #0
  412ade:	6141      	str	r1, [r0, #20]
  412ae0:	6102      	str	r2, [r0, #16]
  412ae2:	4606      	mov	r6, r0
  412ae4:	64b8      	str	r0, [r7, #72]	; 0x48
  412ae6:	6003      	str	r3, [r0, #0]
  412ae8:	e7be      	b.n	412a68 <__pow5mult+0x18>
  412aea:	bf00      	nop
  412aec:	00413aa0 	.word	0x00413aa0

00412af0 <__lshift>:
  412af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  412af4:	4691      	mov	r9, r2
  412af6:	690a      	ldr	r2, [r1, #16]
  412af8:	688b      	ldr	r3, [r1, #8]
  412afa:	ea4f 1469 	mov.w	r4, r9, asr #5
  412afe:	eb04 0802 	add.w	r8, r4, r2
  412b02:	f108 0501 	add.w	r5, r8, #1
  412b06:	429d      	cmp	r5, r3
  412b08:	460e      	mov	r6, r1
  412b0a:	4607      	mov	r7, r0
  412b0c:	6849      	ldr	r1, [r1, #4]
  412b0e:	dd04      	ble.n	412b1a <__lshift+0x2a>
  412b10:	005b      	lsls	r3, r3, #1
  412b12:	429d      	cmp	r5, r3
  412b14:	f101 0101 	add.w	r1, r1, #1
  412b18:	dcfa      	bgt.n	412b10 <__lshift+0x20>
  412b1a:	4638      	mov	r0, r7
  412b1c:	f7ff fe3c 	bl	412798 <_Balloc>
  412b20:	2c00      	cmp	r4, #0
  412b22:	f100 0314 	add.w	r3, r0, #20
  412b26:	dd06      	ble.n	412b36 <__lshift+0x46>
  412b28:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  412b2c:	2100      	movs	r1, #0
  412b2e:	f843 1b04 	str.w	r1, [r3], #4
  412b32:	429a      	cmp	r2, r3
  412b34:	d1fb      	bne.n	412b2e <__lshift+0x3e>
  412b36:	6934      	ldr	r4, [r6, #16]
  412b38:	f106 0114 	add.w	r1, r6, #20
  412b3c:	f019 091f 	ands.w	r9, r9, #31
  412b40:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  412b44:	d01d      	beq.n	412b82 <__lshift+0x92>
  412b46:	f1c9 0c20 	rsb	ip, r9, #32
  412b4a:	2200      	movs	r2, #0
  412b4c:	680c      	ldr	r4, [r1, #0]
  412b4e:	fa04 f409 	lsl.w	r4, r4, r9
  412b52:	4314      	orrs	r4, r2
  412b54:	f843 4b04 	str.w	r4, [r3], #4
  412b58:	f851 2b04 	ldr.w	r2, [r1], #4
  412b5c:	458e      	cmp	lr, r1
  412b5e:	fa22 f20c 	lsr.w	r2, r2, ip
  412b62:	d8f3      	bhi.n	412b4c <__lshift+0x5c>
  412b64:	601a      	str	r2, [r3, #0]
  412b66:	b10a      	cbz	r2, 412b6c <__lshift+0x7c>
  412b68:	f108 0502 	add.w	r5, r8, #2
  412b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  412b6e:	6872      	ldr	r2, [r6, #4]
  412b70:	3d01      	subs	r5, #1
  412b72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  412b76:	6105      	str	r5, [r0, #16]
  412b78:	6031      	str	r1, [r6, #0]
  412b7a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  412b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  412b82:	3b04      	subs	r3, #4
  412b84:	f851 2b04 	ldr.w	r2, [r1], #4
  412b88:	f843 2f04 	str.w	r2, [r3, #4]!
  412b8c:	458e      	cmp	lr, r1
  412b8e:	d8f9      	bhi.n	412b84 <__lshift+0x94>
  412b90:	e7ec      	b.n	412b6c <__lshift+0x7c>
  412b92:	bf00      	nop

00412b94 <__mcmp>:
  412b94:	b430      	push	{r4, r5}
  412b96:	690b      	ldr	r3, [r1, #16]
  412b98:	4605      	mov	r5, r0
  412b9a:	6900      	ldr	r0, [r0, #16]
  412b9c:	1ac0      	subs	r0, r0, r3
  412b9e:	d10f      	bne.n	412bc0 <__mcmp+0x2c>
  412ba0:	009b      	lsls	r3, r3, #2
  412ba2:	3514      	adds	r5, #20
  412ba4:	3114      	adds	r1, #20
  412ba6:	4419      	add	r1, r3
  412ba8:	442b      	add	r3, r5
  412baa:	e001      	b.n	412bb0 <__mcmp+0x1c>
  412bac:	429d      	cmp	r5, r3
  412bae:	d207      	bcs.n	412bc0 <__mcmp+0x2c>
  412bb0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  412bb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  412bb8:	4294      	cmp	r4, r2
  412bba:	d0f7      	beq.n	412bac <__mcmp+0x18>
  412bbc:	d302      	bcc.n	412bc4 <__mcmp+0x30>
  412bbe:	2001      	movs	r0, #1
  412bc0:	bc30      	pop	{r4, r5}
  412bc2:	4770      	bx	lr
  412bc4:	f04f 30ff 	mov.w	r0, #4294967295
  412bc8:	e7fa      	b.n	412bc0 <__mcmp+0x2c>
  412bca:	bf00      	nop

00412bcc <__mdiff>:
  412bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412bd0:	690f      	ldr	r7, [r1, #16]
  412bd2:	460e      	mov	r6, r1
  412bd4:	6911      	ldr	r1, [r2, #16]
  412bd6:	1a7f      	subs	r7, r7, r1
  412bd8:	2f00      	cmp	r7, #0
  412bda:	4690      	mov	r8, r2
  412bdc:	d117      	bne.n	412c0e <__mdiff+0x42>
  412bde:	0089      	lsls	r1, r1, #2
  412be0:	f106 0514 	add.w	r5, r6, #20
  412be4:	f102 0e14 	add.w	lr, r2, #20
  412be8:	186b      	adds	r3, r5, r1
  412bea:	4471      	add	r1, lr
  412bec:	e001      	b.n	412bf2 <__mdiff+0x26>
  412bee:	429d      	cmp	r5, r3
  412bf0:	d25c      	bcs.n	412cac <__mdiff+0xe0>
  412bf2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  412bf6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  412bfa:	42a2      	cmp	r2, r4
  412bfc:	d0f7      	beq.n	412bee <__mdiff+0x22>
  412bfe:	d25e      	bcs.n	412cbe <__mdiff+0xf2>
  412c00:	4633      	mov	r3, r6
  412c02:	462c      	mov	r4, r5
  412c04:	4646      	mov	r6, r8
  412c06:	4675      	mov	r5, lr
  412c08:	4698      	mov	r8, r3
  412c0a:	2701      	movs	r7, #1
  412c0c:	e005      	b.n	412c1a <__mdiff+0x4e>
  412c0e:	db58      	blt.n	412cc2 <__mdiff+0xf6>
  412c10:	f106 0514 	add.w	r5, r6, #20
  412c14:	f108 0414 	add.w	r4, r8, #20
  412c18:	2700      	movs	r7, #0
  412c1a:	6871      	ldr	r1, [r6, #4]
  412c1c:	f7ff fdbc 	bl	412798 <_Balloc>
  412c20:	f8d8 3010 	ldr.w	r3, [r8, #16]
  412c24:	6936      	ldr	r6, [r6, #16]
  412c26:	60c7      	str	r7, [r0, #12]
  412c28:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  412c2c:	46a6      	mov	lr, r4
  412c2e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  412c32:	f100 0414 	add.w	r4, r0, #20
  412c36:	2300      	movs	r3, #0
  412c38:	f85e 1b04 	ldr.w	r1, [lr], #4
  412c3c:	f855 8b04 	ldr.w	r8, [r5], #4
  412c40:	b28a      	uxth	r2, r1
  412c42:	fa13 f388 	uxtah	r3, r3, r8
  412c46:	0c09      	lsrs	r1, r1, #16
  412c48:	1a9a      	subs	r2, r3, r2
  412c4a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  412c4e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  412c52:	b292      	uxth	r2, r2
  412c54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  412c58:	45f4      	cmp	ip, lr
  412c5a:	f844 2b04 	str.w	r2, [r4], #4
  412c5e:	ea4f 4323 	mov.w	r3, r3, asr #16
  412c62:	d8e9      	bhi.n	412c38 <__mdiff+0x6c>
  412c64:	42af      	cmp	r7, r5
  412c66:	d917      	bls.n	412c98 <__mdiff+0xcc>
  412c68:	46a4      	mov	ip, r4
  412c6a:	46ae      	mov	lr, r5
  412c6c:	f85e 2b04 	ldr.w	r2, [lr], #4
  412c70:	fa13 f382 	uxtah	r3, r3, r2
  412c74:	1419      	asrs	r1, r3, #16
  412c76:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  412c7a:	b29b      	uxth	r3, r3
  412c7c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  412c80:	4577      	cmp	r7, lr
  412c82:	f84c 2b04 	str.w	r2, [ip], #4
  412c86:	ea4f 4321 	mov.w	r3, r1, asr #16
  412c8a:	d8ef      	bhi.n	412c6c <__mdiff+0xa0>
  412c8c:	43ed      	mvns	r5, r5
  412c8e:	442f      	add	r7, r5
  412c90:	f027 0703 	bic.w	r7, r7, #3
  412c94:	3704      	adds	r7, #4
  412c96:	443c      	add	r4, r7
  412c98:	3c04      	subs	r4, #4
  412c9a:	b922      	cbnz	r2, 412ca6 <__mdiff+0xda>
  412c9c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  412ca0:	3e01      	subs	r6, #1
  412ca2:	2b00      	cmp	r3, #0
  412ca4:	d0fa      	beq.n	412c9c <__mdiff+0xd0>
  412ca6:	6106      	str	r6, [r0, #16]
  412ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412cac:	2100      	movs	r1, #0
  412cae:	f7ff fd73 	bl	412798 <_Balloc>
  412cb2:	2201      	movs	r2, #1
  412cb4:	2300      	movs	r3, #0
  412cb6:	6102      	str	r2, [r0, #16]
  412cb8:	6143      	str	r3, [r0, #20]
  412cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  412cbe:	4674      	mov	r4, lr
  412cc0:	e7ab      	b.n	412c1a <__mdiff+0x4e>
  412cc2:	4633      	mov	r3, r6
  412cc4:	f106 0414 	add.w	r4, r6, #20
  412cc8:	f102 0514 	add.w	r5, r2, #20
  412ccc:	4616      	mov	r6, r2
  412cce:	2701      	movs	r7, #1
  412cd0:	4698      	mov	r8, r3
  412cd2:	e7a2      	b.n	412c1a <__mdiff+0x4e>

00412cd4 <__d2b>:
  412cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412cd8:	ec57 6b10 	vmov	r6, r7, d0
  412cdc:	b083      	sub	sp, #12
  412cde:	4688      	mov	r8, r1
  412ce0:	2101      	movs	r1, #1
  412ce2:	463c      	mov	r4, r7
  412ce4:	f3c7 550a 	ubfx	r5, r7, #20, #11
  412ce8:	4617      	mov	r7, r2
  412cea:	f7ff fd55 	bl	412798 <_Balloc>
  412cee:	f3c4 0413 	ubfx	r4, r4, #0, #20
  412cf2:	4681      	mov	r9, r0
  412cf4:	b10d      	cbz	r5, 412cfa <__d2b+0x26>
  412cf6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  412cfa:	9401      	str	r4, [sp, #4]
  412cfc:	b31e      	cbz	r6, 412d46 <__d2b+0x72>
  412cfe:	a802      	add	r0, sp, #8
  412d00:	f840 6d08 	str.w	r6, [r0, #-8]!
  412d04:	f7ff fdd8 	bl	4128b8 <__lo0bits>
  412d08:	2800      	cmp	r0, #0
  412d0a:	d134      	bne.n	412d76 <__d2b+0xa2>
  412d0c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  412d10:	f8c9 2014 	str.w	r2, [r9, #20]
  412d14:	2b00      	cmp	r3, #0
  412d16:	bf0c      	ite	eq
  412d18:	2101      	moveq	r1, #1
  412d1a:	2102      	movne	r1, #2
  412d1c:	f8c9 3018 	str.w	r3, [r9, #24]
  412d20:	f8c9 1010 	str.w	r1, [r9, #16]
  412d24:	b9dd      	cbnz	r5, 412d5e <__d2b+0x8a>
  412d26:	eb09 0381 	add.w	r3, r9, r1, lsl #2
  412d2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  412d2e:	f8c8 0000 	str.w	r0, [r8]
  412d32:	6918      	ldr	r0, [r3, #16]
  412d34:	f7ff fda0 	bl	412878 <__hi0bits>
  412d38:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  412d3c:	6038      	str	r0, [r7, #0]
  412d3e:	4648      	mov	r0, r9
  412d40:	b003      	add	sp, #12
  412d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412d46:	a801      	add	r0, sp, #4
  412d48:	f7ff fdb6 	bl	4128b8 <__lo0bits>
  412d4c:	9b01      	ldr	r3, [sp, #4]
  412d4e:	f8c9 3014 	str.w	r3, [r9, #20]
  412d52:	2101      	movs	r1, #1
  412d54:	3020      	adds	r0, #32
  412d56:	f8c9 1010 	str.w	r1, [r9, #16]
  412d5a:	2d00      	cmp	r5, #0
  412d5c:	d0e3      	beq.n	412d26 <__d2b+0x52>
  412d5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
  412d62:	4405      	add	r5, r0
  412d64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  412d68:	f8c8 5000 	str.w	r5, [r8]
  412d6c:	6038      	str	r0, [r7, #0]
  412d6e:	4648      	mov	r0, r9
  412d70:	b003      	add	sp, #12
  412d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  412d76:	e89d 000a 	ldmia.w	sp, {r1, r3}
  412d7a:	f1c0 0220 	rsb	r2, r0, #32
  412d7e:	fa03 f202 	lsl.w	r2, r3, r2
  412d82:	430a      	orrs	r2, r1
  412d84:	40c3      	lsrs	r3, r0
  412d86:	9301      	str	r3, [sp, #4]
  412d88:	f8c9 2014 	str.w	r2, [r9, #20]
  412d8c:	e7c2      	b.n	412d14 <__d2b+0x40>
  412d8e:	bf00      	nop

00412d90 <__ssprint_r>:
  412d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412d94:	6893      	ldr	r3, [r2, #8]
  412d96:	b083      	sub	sp, #12
  412d98:	4690      	mov	r8, r2
  412d9a:	2b00      	cmp	r3, #0
  412d9c:	d070      	beq.n	412e80 <__ssprint_r+0xf0>
  412d9e:	4682      	mov	sl, r0
  412da0:	460c      	mov	r4, r1
  412da2:	6817      	ldr	r7, [r2, #0]
  412da4:	688d      	ldr	r5, [r1, #8]
  412da6:	6808      	ldr	r0, [r1, #0]
  412da8:	e042      	b.n	412e30 <__ssprint_r+0xa0>
  412daa:	89a3      	ldrh	r3, [r4, #12]
  412dac:	f413 6f90 	tst.w	r3, #1152	; 0x480
  412db0:	d02e      	beq.n	412e10 <__ssprint_r+0x80>
  412db2:	6965      	ldr	r5, [r4, #20]
  412db4:	6921      	ldr	r1, [r4, #16]
  412db6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  412dba:	eba0 0b01 	sub.w	fp, r0, r1
  412dbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  412dc2:	f10b 0001 	add.w	r0, fp, #1
  412dc6:	106d      	asrs	r5, r5, #1
  412dc8:	4430      	add	r0, r6
  412dca:	42a8      	cmp	r0, r5
  412dcc:	462a      	mov	r2, r5
  412dce:	bf84      	itt	hi
  412dd0:	4605      	movhi	r5, r0
  412dd2:	462a      	movhi	r2, r5
  412dd4:	055b      	lsls	r3, r3, #21
  412dd6:	d538      	bpl.n	412e4a <__ssprint_r+0xba>
  412dd8:	4611      	mov	r1, r2
  412dda:	4650      	mov	r0, sl
  412ddc:	f7fc fa3c 	bl	40f258 <_malloc_r>
  412de0:	2800      	cmp	r0, #0
  412de2:	d03c      	beq.n	412e5e <__ssprint_r+0xce>
  412de4:	465a      	mov	r2, fp
  412de6:	6921      	ldr	r1, [r4, #16]
  412de8:	9001      	str	r0, [sp, #4]
  412dea:	f7fc fd39 	bl	40f860 <memcpy>
  412dee:	89a2      	ldrh	r2, [r4, #12]
  412df0:	9b01      	ldr	r3, [sp, #4]
  412df2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  412df6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  412dfa:	81a2      	strh	r2, [r4, #12]
  412dfc:	eba5 020b 	sub.w	r2, r5, fp
  412e00:	eb03 000b 	add.w	r0, r3, fp
  412e04:	6165      	str	r5, [r4, #20]
  412e06:	6123      	str	r3, [r4, #16]
  412e08:	6020      	str	r0, [r4, #0]
  412e0a:	60a2      	str	r2, [r4, #8]
  412e0c:	4635      	mov	r5, r6
  412e0e:	46b3      	mov	fp, r6
  412e10:	465a      	mov	r2, fp
  412e12:	4649      	mov	r1, r9
  412e14:	f7fc fdbe 	bl	40f994 <memmove>
  412e18:	f8d8 3008 	ldr.w	r3, [r8, #8]
  412e1c:	68a2      	ldr	r2, [r4, #8]
  412e1e:	6820      	ldr	r0, [r4, #0]
  412e20:	1b55      	subs	r5, r2, r5
  412e22:	4458      	add	r0, fp
  412e24:	1b9e      	subs	r6, r3, r6
  412e26:	60a5      	str	r5, [r4, #8]
  412e28:	6020      	str	r0, [r4, #0]
  412e2a:	f8c8 6008 	str.w	r6, [r8, #8]
  412e2e:	b33e      	cbz	r6, 412e80 <__ssprint_r+0xf0>
  412e30:	687e      	ldr	r6, [r7, #4]
  412e32:	463b      	mov	r3, r7
  412e34:	3708      	adds	r7, #8
  412e36:	2e00      	cmp	r6, #0
  412e38:	d0fa      	beq.n	412e30 <__ssprint_r+0xa0>
  412e3a:	42ae      	cmp	r6, r5
  412e3c:	f8d3 9000 	ldr.w	r9, [r3]
  412e40:	46ab      	mov	fp, r5
  412e42:	d2b2      	bcs.n	412daa <__ssprint_r+0x1a>
  412e44:	4635      	mov	r5, r6
  412e46:	46b3      	mov	fp, r6
  412e48:	e7e2      	b.n	412e10 <__ssprint_r+0x80>
  412e4a:	4650      	mov	r0, sl
  412e4c:	f7fc fe60 	bl	40fb10 <_realloc_r>
  412e50:	4603      	mov	r3, r0
  412e52:	2800      	cmp	r0, #0
  412e54:	d1d2      	bne.n	412dfc <__ssprint_r+0x6c>
  412e56:	6921      	ldr	r1, [r4, #16]
  412e58:	4650      	mov	r0, sl
  412e5a:	f7ff fba9 	bl	4125b0 <_free_r>
  412e5e:	230c      	movs	r3, #12
  412e60:	f8ca 3000 	str.w	r3, [sl]
  412e64:	89a3      	ldrh	r3, [r4, #12]
  412e66:	2200      	movs	r2, #0
  412e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  412e6c:	f04f 30ff 	mov.w	r0, #4294967295
  412e70:	81a3      	strh	r3, [r4, #12]
  412e72:	f8c8 2008 	str.w	r2, [r8, #8]
  412e76:	f8c8 2004 	str.w	r2, [r8, #4]
  412e7a:	b003      	add	sp, #12
  412e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412e80:	2000      	movs	r0, #0
  412e82:	f8c8 0004 	str.w	r0, [r8, #4]
  412e86:	b003      	add	sp, #12
  412e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00412e8c <__register_exitproc>:
  412e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  412e90:	4d2c      	ldr	r5, [pc, #176]	; (412f44 <__register_exitproc+0xb8>)
  412e92:	4606      	mov	r6, r0
  412e94:	6828      	ldr	r0, [r5, #0]
  412e96:	4698      	mov	r8, r3
  412e98:	460f      	mov	r7, r1
  412e9a:	4691      	mov	r9, r2
  412e9c:	f7fc f9d8 	bl	40f250 <__retarget_lock_acquire_recursive>
  412ea0:	4b29      	ldr	r3, [pc, #164]	; (412f48 <__register_exitproc+0xbc>)
  412ea2:	681c      	ldr	r4, [r3, #0]
  412ea4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  412ea8:	2b00      	cmp	r3, #0
  412eaa:	d03e      	beq.n	412f2a <__register_exitproc+0x9e>
  412eac:	685a      	ldr	r2, [r3, #4]
  412eae:	2a1f      	cmp	r2, #31
  412eb0:	dc1c      	bgt.n	412eec <__register_exitproc+0x60>
  412eb2:	f102 0e01 	add.w	lr, r2, #1
  412eb6:	b176      	cbz	r6, 412ed6 <__register_exitproc+0x4a>
  412eb8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  412ebc:	2401      	movs	r4, #1
  412ebe:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  412ec2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  412ec6:	4094      	lsls	r4, r2
  412ec8:	4320      	orrs	r0, r4
  412eca:	2e02      	cmp	r6, #2
  412ecc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  412ed0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  412ed4:	d023      	beq.n	412f1e <__register_exitproc+0x92>
  412ed6:	3202      	adds	r2, #2
  412ed8:	f8c3 e004 	str.w	lr, [r3, #4]
  412edc:	6828      	ldr	r0, [r5, #0]
  412ede:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  412ee2:	f7fc f9b7 	bl	40f254 <__retarget_lock_release_recursive>
  412ee6:	2000      	movs	r0, #0
  412ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  412eec:	4b17      	ldr	r3, [pc, #92]	; (412f4c <__register_exitproc+0xc0>)
  412eee:	b30b      	cbz	r3, 412f34 <__register_exitproc+0xa8>
  412ef0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  412ef4:	f3af 8000 	nop.w
  412ef8:	4603      	mov	r3, r0
  412efa:	b1d8      	cbz	r0, 412f34 <__register_exitproc+0xa8>
  412efc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  412f00:	6002      	str	r2, [r0, #0]
  412f02:	2100      	movs	r1, #0
  412f04:	6041      	str	r1, [r0, #4]
  412f06:	460a      	mov	r2, r1
  412f08:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  412f0c:	f04f 0e01 	mov.w	lr, #1
  412f10:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  412f14:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  412f18:	2e00      	cmp	r6, #0
  412f1a:	d0dc      	beq.n	412ed6 <__register_exitproc+0x4a>
  412f1c:	e7cc      	b.n	412eb8 <__register_exitproc+0x2c>
  412f1e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  412f22:	430c      	orrs	r4, r1
  412f24:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  412f28:	e7d5      	b.n	412ed6 <__register_exitproc+0x4a>
  412f2a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  412f2e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  412f32:	e7bb      	b.n	412eac <__register_exitproc+0x20>
  412f34:	6828      	ldr	r0, [r5, #0]
  412f36:	f7fc f98d 	bl	40f254 <__retarget_lock_release_recursive>
  412f3a:	f04f 30ff 	mov.w	r0, #4294967295
  412f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  412f42:	bf00      	nop
  412f44:	20002d58 	.word	0x20002d58
  412f48:	00413938 	.word	0x00413938
  412f4c:	00000000 	.word	0x00000000

00412f50 <_calloc_r>:
  412f50:	b510      	push	{r4, lr}
  412f52:	fb02 f101 	mul.w	r1, r2, r1
  412f56:	f7fc f97f 	bl	40f258 <_malloc_r>
  412f5a:	4604      	mov	r4, r0
  412f5c:	b1d8      	cbz	r0, 412f96 <_calloc_r+0x46>
  412f5e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  412f62:	f022 0203 	bic.w	r2, r2, #3
  412f66:	3a04      	subs	r2, #4
  412f68:	2a24      	cmp	r2, #36	; 0x24
  412f6a:	d818      	bhi.n	412f9e <_calloc_r+0x4e>
  412f6c:	2a13      	cmp	r2, #19
  412f6e:	d914      	bls.n	412f9a <_calloc_r+0x4a>
  412f70:	2300      	movs	r3, #0
  412f72:	2a1b      	cmp	r2, #27
  412f74:	6003      	str	r3, [r0, #0]
  412f76:	6043      	str	r3, [r0, #4]
  412f78:	d916      	bls.n	412fa8 <_calloc_r+0x58>
  412f7a:	2a24      	cmp	r2, #36	; 0x24
  412f7c:	6083      	str	r3, [r0, #8]
  412f7e:	60c3      	str	r3, [r0, #12]
  412f80:	bf11      	iteee	ne
  412f82:	f100 0210 	addne.w	r2, r0, #16
  412f86:	6103      	streq	r3, [r0, #16]
  412f88:	6143      	streq	r3, [r0, #20]
  412f8a:	f100 0218 	addeq.w	r2, r0, #24
  412f8e:	2300      	movs	r3, #0
  412f90:	6013      	str	r3, [r2, #0]
  412f92:	6053      	str	r3, [r2, #4]
  412f94:	6093      	str	r3, [r2, #8]
  412f96:	4620      	mov	r0, r4
  412f98:	bd10      	pop	{r4, pc}
  412f9a:	4602      	mov	r2, r0
  412f9c:	e7f7      	b.n	412f8e <_calloc_r+0x3e>
  412f9e:	2100      	movs	r1, #0
  412fa0:	f7fc fd5c 	bl	40fa5c <memset>
  412fa4:	4620      	mov	r0, r4
  412fa6:	bd10      	pop	{r4, pc}
  412fa8:	f100 0208 	add.w	r2, r0, #8
  412fac:	e7ef      	b.n	412f8e <_calloc_r+0x3e>
  412fae:	bf00      	nop

00412fb0 <__ascii_mbtowc>:
  412fb0:	b082      	sub	sp, #8
  412fb2:	b149      	cbz	r1, 412fc8 <__ascii_mbtowc+0x18>
  412fb4:	b15a      	cbz	r2, 412fce <__ascii_mbtowc+0x1e>
  412fb6:	b16b      	cbz	r3, 412fd4 <__ascii_mbtowc+0x24>
  412fb8:	7813      	ldrb	r3, [r2, #0]
  412fba:	600b      	str	r3, [r1, #0]
  412fbc:	7812      	ldrb	r2, [r2, #0]
  412fbe:	1c10      	adds	r0, r2, #0
  412fc0:	bf18      	it	ne
  412fc2:	2001      	movne	r0, #1
  412fc4:	b002      	add	sp, #8
  412fc6:	4770      	bx	lr
  412fc8:	a901      	add	r1, sp, #4
  412fca:	2a00      	cmp	r2, #0
  412fcc:	d1f3      	bne.n	412fb6 <__ascii_mbtowc+0x6>
  412fce:	4610      	mov	r0, r2
  412fd0:	b002      	add	sp, #8
  412fd2:	4770      	bx	lr
  412fd4:	f06f 0001 	mvn.w	r0, #1
  412fd8:	e7f4      	b.n	412fc4 <__ascii_mbtowc+0x14>
  412fda:	bf00      	nop

00412fdc <__ascii_wctomb>:
  412fdc:	b121      	cbz	r1, 412fe8 <__ascii_wctomb+0xc>
  412fde:	2aff      	cmp	r2, #255	; 0xff
  412fe0:	d804      	bhi.n	412fec <__ascii_wctomb+0x10>
  412fe2:	700a      	strb	r2, [r1, #0]
  412fe4:	2001      	movs	r0, #1
  412fe6:	4770      	bx	lr
  412fe8:	4608      	mov	r0, r1
  412fea:	4770      	bx	lr
  412fec:	238a      	movs	r3, #138	; 0x8a
  412fee:	6003      	str	r3, [r0, #0]
  412ff0:	f04f 30ff 	mov.w	r0, #4294967295
  412ff4:	4770      	bx	lr
  412ff6:	bf00      	nop

00412ff8 <__aeabi_uldivmod>:
  412ff8:	b953      	cbnz	r3, 413010 <__aeabi_uldivmod+0x18>
  412ffa:	b94a      	cbnz	r2, 413010 <__aeabi_uldivmod+0x18>
  412ffc:	2900      	cmp	r1, #0
  412ffe:	bf08      	it	eq
  413000:	2800      	cmpeq	r0, #0
  413002:	bf1c      	itt	ne
  413004:	f04f 31ff 	movne.w	r1, #4294967295
  413008:	f04f 30ff 	movne.w	r0, #4294967295
  41300c:	f7fc b8f0 	b.w	40f1f0 <__aeabi_idiv0>
  413010:	f1ad 0c08 	sub.w	ip, sp, #8
  413014:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  413018:	f7fb ff7c 	bl	40ef14 <__udivmoddi4>
  41301c:	f8dd e004 	ldr.w	lr, [sp, #4]
  413020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  413024:	b004      	add	sp, #16
  413026:	4770      	bx	lr
  413028:	74696e49 	.word	0x74696e49
  41302c:	696c6169 	.word	0x696c6169
  413030:	4920657a 	.word	0x4920657a
  413034:	00004d43 	.word	0x00004d43
  413038:	20212121 	.word	0x20212121
  41303c:	4f525245 	.word	0x4f525245
  413040:	203a2052 	.word	0x203a2052
  413044:	6c696166 	.word	0x6c696166
  413048:	74206465 	.word	0x74206465
  41304c:	6e69206f 	.word	0x6e69206f
  413050:	61697469 	.word	0x61697469
  413054:	657a696c 	.word	0x657a696c
  413058:	6d634920 	.word	0x6d634920
  41305c:	78363234 	.word	0x78363234
  413060:	00002e78 	.word	0x00002e78
  413064:	63656843 	.word	0x63656843
  413068:	4349206b 	.word	0x4349206b
  41306c:	6877204d 	.word	0x6877204d
  413070:	696d616f 	.word	0x696d616f
  413074:	6c617620 	.word	0x6c617620
  413078:	00006575 	.word	0x00006575
  41307c:	20212121 	.word	0x20212121
  413080:	4f525245 	.word	0x4f525245
  413084:	203a2052 	.word	0x203a2052
  413088:	6c696166 	.word	0x6c696166
  41308c:	74206465 	.word	0x74206465
  413090:	6572206f 	.word	0x6572206f
  413094:	49206461 	.word	0x49206461
  413098:	32346d63 	.word	0x32346d63
  41309c:	20787836 	.word	0x20787836
  4130a0:	616f6877 	.word	0x616f6877
  4130a4:	7620696d 	.word	0x7620696d
  4130a8:	65756c61 	.word	0x65756c61
  4130ac:	0000002e 	.word	0x0000002e
  4130b0:	20212121 	.word	0x20212121
  4130b4:	4f525245 	.word	0x4f525245
  4130b8:	203a2052 	.word	0x203a2052
  4130bc:	64616220 	.word	0x64616220
  4130c0:	4f485720 	.word	0x4f485720
  4130c4:	20494d41 	.word	0x20494d41
  4130c8:	756c6176 	.word	0x756c6176
  4130cc:	47202e65 	.word	0x47202e65
  4130d0:	3020746f 	.word	0x3020746f
  4130d4:	32302578 	.word	0x32302578
  4130d8:	65282078 	.word	0x65282078
  4130dc:	63657078 	.word	0x63657078
  4130e0:	3a646574 	.word	0x3a646574
  4130e4:	25783020 	.word	0x25783020
  4130e8:	29783230 	.word	0x29783230
  4130ec:	00000000 	.word	0x00000000
  4130f0:	42202020 	.word	0x42202020
  4130f4:	65736169 	.word	0x65736169
  4130f8:	6f6c2073 	.word	0x6f6c2073
  4130fc:	64656461 	.word	0x64656461
  413100:	6f726620 	.word	0x6f726620
  413104:	6c66206d 	.word	0x6c66206d
  413108:	3a687361 	.word	0x3a687361
  41310c:	00000000 	.word	0x00000000
  413110:	20202020 	.word	0x20202020
  413114:	6341202d 	.word	0x6341202d
  413118:	3a6c6563 	.word	0x3a6c6563
  41311c:	66255b20 	.word	0x66255b20
  413120:	20662520 	.word	0x20662520
  413124:	675d6625 	.word	0x675d6625
  413128:	00000000 	.word	0x00000000
  41312c:	20202020 	.word	0x20202020
  413130:	7947202d 	.word	0x7947202d
  413134:	203a6f72 	.word	0x203a6f72
  413138:	66255b20 	.word	0x66255b20
  41313c:	20662520 	.word	0x20662520
  413140:	645d6625 	.word	0x645d6625
  413144:	00007370 	.word	0x00007370
  413148:	20202020 	.word	0x20202020
  41314c:	614d202d 	.word	0x614d202d
  413150:	20203a67 	.word	0x20203a67
  413154:	66255b20 	.word	0x66255b20
  413158:	20662520 	.word	0x20662520
  41315c:	755d6625 	.word	0x755d6625
  413160:	00000054 	.word	0x00000054
  413164:	4e202020 	.word	0x4e202020
  413168:	6962206f 	.word	0x6962206f
  41316c:	76207361 	.word	0x76207361
  413170:	65756c61 	.word	0x65756c61
  413174:	65722073 	.word	0x65722073
  413178:	65697274 	.word	0x65697274
  41317c:	00646576 	.word	0x00646576
  413180:	25207525 	.word	0x25207525
  413184:	66252066 	.word	0x66252066
  413188:	20662520 	.word	0x20662520
  41318c:	25206625 	.word	0x25206625
  413190:	66252066 	.word	0x66252066
  413194:	00662520 	.word	0x00662520
  413198:	6f727245 	.word	0x6f727245
  41319c:	68772072 	.word	0x68772072
  4131a0:	20656c69 	.word	0x20656c69
  4131a4:	74746573 	.word	0x74746573
  4131a8:	20676e69 	.word	0x20676e69
  4131ac:	4d207075 	.word	0x4d207075
  4131b0:	00005543 	.word	0x00005543
  4131b4:	74696e49 	.word	0x74696e49
  4131b8:	696c6169 	.word	0x696c6169
  4131bc:	676e697a 	.word	0x676e697a
  4131c0:	4d434920 	.word	0x4d434920
  4131c4:	76656420 	.word	0x76656420
  4131c8:	2e656369 	.word	0x2e656369
  4131cc:	00002e2e 	.word	0x00002e2e
  4131d0:	6f727245 	.word	0x6f727245
  4131d4:	68772072 	.word	0x68772072
  4131d8:	20656c69 	.word	0x20656c69
  4131dc:	74746573 	.word	0x74746573
  4131e0:	20676e69 	.word	0x20676e69
  4131e4:	49207075 	.word	0x49207075
  4131e8:	64204d43 	.word	0x64204d43
  4131ec:	63697665 	.word	0x63697665
  4131f0:	00000065 	.word	0x00000065
  4131f4:	00004b4f 	.word	0x00004b4f
  4131f8:	74696e49 	.word	0x74696e49
  4131fc:	696c6169 	.word	0x696c6169
  413200:	676e697a 	.word	0x676e697a
  413204:	676c6120 	.word	0x676c6120
  413208:	7469726f 	.word	0x7469726f
  41320c:	2e2e6d68 	.word	0x2e2e6d68
  413210:	0000002e 	.word	0x0000002e
  413214:	6f727245 	.word	0x6f727245
  413218:	68772072 	.word	0x68772072
  41321c:	20656c69 	.word	0x20656c69
  413220:	74696e69 	.word	0x74696e69
  413224:	696c6169 	.word	0x696c6169
  413228:	676e697a 	.word	0x676e697a
  41322c:	4d474120 	.word	0x4d474120
  413230:	676c6120 	.word	0x676c6120
  413234:	7469726f 	.word	0x7469726f
  413238:	00006d68 	.word	0x00006d68
  41323c:	666e6f43 	.word	0x666e6f43
  413240:	72756769 	.word	0x72756769
  413244:	20676e69 	.word	0x20676e69
  413248:	204d4349 	.word	0x204d4349
  41324c:	69766564 	.word	0x69766564
  413250:	2e2e6563 	.word	0x2e2e6563
  413254:	0000002e 	.word	0x0000002e
  413258:	6f727245 	.word	0x6f727245
  41325c:	68772072 	.word	0x68772072
  413260:	20656c69 	.word	0x20656c69
  413264:	666e6f63 	.word	0x666e6f63
  413268:	72756769 	.word	0x72756769
  41326c:	20676e69 	.word	0x20676e69
  413270:	204d4349 	.word	0x204d4349
  413274:	69766564 	.word	0x69766564
  413278:	00006563 	.word	0x00006563
  41327c:	23232323 	.word	0x23232323
  413280:	23232323 	.word	0x23232323
  413284:	23232323 	.word	0x23232323
  413288:	23232323 	.word	0x23232323
  41328c:	23232323 	.word	0x23232323
  413290:	23232323 	.word	0x23232323
  413294:	23232323 	.word	0x23232323
  413298:	23232323 	.word	0x23232323
  41329c:	23232323 	.word	0x23232323
  4132a0:	23232323 	.word	0x23232323
  4132a4:	23232323 	.word	0x23232323
  4132a8:	23232323 	.word	0x23232323
  4132ac:	00002323 	.word	0x00002323
  4132b0:	342d4b44 	.word	0x342d4b44
  4132b4:	35303632 	.word	0x35303632
  4132b8:	74616420 	.word	0x74616420
  4132bc:	74732061 	.word	0x74732061
  4132c0:	6d616572 	.word	0x6d616572
  4132c4:	20676e69 	.word	0x20676e69
  4132c8:	6c707061 	.word	0x6c707061
  4132cc:	74616369 	.word	0x74616369
  4132d0:	006e6f69 	.word	0x006e6f69
  4132d4:	67696c53 	.word	0x67696c53
  4132d8:	796c7468 	.word	0x796c7468
  4132dc:	646f6d20 	.word	0x646f6d20
  4132e0:	65696669 	.word	0x65696669
  4132e4:	72662064 	.word	0x72662064
  4132e8:	74206d6f 	.word	0x74206d6f
  4132ec:	6f206568 	.word	0x6f206568
  4132f0:	63696666 	.word	0x63696666
  4132f4:	206c6169 	.word	0x206c6169
  4132f8:	6d617865 	.word	0x6d617865
  4132fc:	20656c70 	.word	0x20656c70
  413300:	61786528 	.word	0x61786528
  413304:	656c706d 	.word	0x656c706d
  413308:	676c612d 	.word	0x676c612d
  41330c:	0000296f 	.word	0x0000296f
  413310:	736e694a 	.word	0x736e694a
  413314:	50206e75 	.word	0x50206e75
  413318:	206b7261 	.word	0x206b7261
  41331c:	617a7a28 	.word	0x617a7a28
  413320:	696a676e 	.word	0x696a676e
  413324:	6e75736e 	.word	0x6e75736e
  413328:	65733340 	.word	0x65733340
  41332c:	646e6f63 	.word	0x646e6f63
  413330:	6f632e7a 	.word	0x6f632e7a
  413334:	0000296d 	.word	0x0000296d
  413338:	00000020 	.word	0x00000020
  41333c:	72727543 	.word	0x72727543
  413340:	20746e65 	.word	0x20746e65
  413344:	75746573 	.word	0x75746573
  413348:	203a2070 	.word	0x203a2070
  41334c:	00000000 	.word	0x00000000
  413350:	63634120 	.word	0x63634120
  413354:	52534620 	.word	0x52534620
  413358:	34203a20 	.word	0x34203a20
  41335c:	00000067 	.word	0x00000067
  413360:	63634120 	.word	0x63634120
  413364:	52444f20 	.word	0x52444f20
  413368:	31203a20 	.word	0x31203a20
  41336c:	007a486b 	.word	0x007a486b
  413370:	72794720 	.word	0x72794720
  413374:	52534620 	.word	0x52534620
  413378:	32203a20 	.word	0x32203a20
  41337c:	64303030 	.word	0x64303030
  413380:	00007370 	.word	0x00007370
  413384:	72794720 	.word	0x72794720
  413388:	52444f20 	.word	0x52444f20
  41338c:	31203a20 	.word	0x31203a20
  413390:	007a486b 	.word	0x007a486b
  413394:	7074754f 	.word	0x7074754f
  413398:	66207475 	.word	0x66207475
  41339c:	616d726f 	.word	0x616d726f
  4133a0:	203a2074 	.word	0x203a2074
  4133a4:	6d69745b 	.word	0x6d69745b
  4133a8:	61747365 	.word	0x61747365
  4133ac:	4120706d 	.word	0x4120706d
  4133b0:	20586363 	.word	0x20586363
  4133b4:	59636341 	.word	0x59636341
  4133b8:	63634120 	.word	0x63634120
  4133bc:	6554205a 	.word	0x6554205a
  4133c0:	4720706d 	.word	0x4720706d
  4133c4:	20587279 	.word	0x20587279
  4133c8:	59727947 	.word	0x59727947
  4133cc:	72794720 	.word	0x72794720
  4133d0:	0000005a 	.word	0x0000005a
  4133d4:	72617453 	.word	0x72617453
  4133d8:	72702074 	.word	0x72702074
  4133dc:	7365636f 	.word	0x7365636f
  4133e0:	676e6973 	.word	0x676e6973
  4133e4:	00000000 	.word	0x00000000
  4133e8:	6f727265 	.word	0x6f727265
  4133ec:	68772072 	.word	0x68772072
  4133f0:	20656c69 	.word	0x20656c69
  4133f4:	74746567 	.word	0x74746567
  4133f8:	20676e69 	.word	0x20676e69
  4133fc:	61746164 	.word	0x61746164
  413400:	6f726620 	.word	0x6f726620
  413404:	6349206d 	.word	0x6349206d
  413408:	3632346d 	.word	0x3632346d
  41340c:	00007878 	.word	0x00007878
  413410:	6f727245 	.word	0x6f727245
  413414:	68772072 	.word	0x68772072
  413418:	20656c69 	.word	0x20656c69
  41341c:	74696e69 	.word	0x74696e69
  413420:	696c6169 	.word	0x696c6169
  413424:	676e697a 	.word	0x676e697a
  413428:	20525620 	.word	0x20525620
  41342c:	65726854 	.word	0x65726854
  413430:	666f6465 	.word	0x666f6465
  413434:	676c6120 	.word	0x676c6120
  413438:	7469726f 	.word	0x7469726f
  41343c:	00736d68 	.word	0x00736d68
  413440:	6e6b6e55 	.word	0x6e6b6e55
  413444:	206e776f 	.word	0x206e776f
  413448:	6d6d6f63 	.word	0x6d6d6f63
  41344c:	20646e61 	.word	0x20646e61
  413450:	6325203a 	.word	0x6325203a
  413454:	00000000 	.word	0x00000000
  413458:	23232323 	.word	0x23232323
  41345c:	23232323 	.word	0x23232323
  413460:	23232323 	.word	0x23232323
  413464:	23232323 	.word	0x23232323
  413468:	23232323 	.word	0x23232323
  41346c:	23232323 	.word	0x23232323
  413470:	00002323 	.word	0x00002323
  413474:	20202023 	.word	0x20202023
  413478:	706c6548 	.word	0x706c6548
  41347c:	45202d20 	.word	0x45202d20
  413480:	706d6178 	.word	0x706d6178
  413484:	4120656c 	.word	0x4120656c
  413488:	206f676c 	.word	0x206f676c
  41348c:	00002320 	.word	0x00002320
  413490:	27692709 	.word	0x27692709
  413494:	70203a20 	.word	0x70203a20
  413498:	746e6972 	.word	0x746e6972
  41349c:	706e6920 	.word	0x706e6920
  4134a0:	64207475 	.word	0x64207475
  4134a4:	20617461 	.word	0x20617461
  4134a8:	77617228 	.word	0x77617228
  4134ac:	63636120 	.word	0x63636120
  4134b0:	202c6c65 	.word	0x202c6c65
  4134b4:	20776172 	.word	0x20776172
  4134b8:	6f727967 	.word	0x6f727967
  4134bc:	646e6120 	.word	0x646e6120
  4134c0:	77617220 	.word	0x77617220
  4134c4:	67616d20 	.word	0x67616d20
  4134c8:	00000029 	.word	0x00000029
  4134cc:	27612709 	.word	0x27612709
  4134d0:	70203a20 	.word	0x70203a20
  4134d4:	746e6972 	.word	0x746e6972
  4134d8:	63636120 	.word	0x63636120
  4134dc:	64206c65 	.word	0x64206c65
  4134e0:	00617461 	.word	0x00617461
  4134e4:	27672709 	.word	0x27672709
  4134e8:	70203a20 	.word	0x70203a20
  4134ec:	746e6972 	.word	0x746e6972
  4134f0:	72796720 	.word	0x72796720
  4134f4:	6164206f 	.word	0x6164206f
  4134f8:	00006174 	.word	0x00006174
  4134fc:	27362709 	.word	0x27362709
  413500:	70203a20 	.word	0x70203a20
  413504:	746e6972 	.word	0x746e6972
  413508:	76726720 	.word	0x76726720
  41350c:	61757120 	.word	0x61757120
  413510:	6e726574 	.word	0x6e726574
  413514:	206e6f69 	.word	0x206e6f69
  413518:	61746164 	.word	0x61746164
  41351c:	646e6120 	.word	0x646e6120
  413520:	6c756520 	.word	0x6c756520
  413524:	20737265 	.word	0x20737265
  413528:	6c676e61 	.word	0x6c676e61
  41352c:	28207365 	.word	0x28207365
  413530:	69786136 	.word	0x69786136
  413534:	75662073 	.word	0x75662073
  413538:	6e6f6973 	.word	0x6e6f6973
  41353c:	00000029 	.word	0x00000029
  413540:	27472709 	.word	0x27472709
  413544:	70203a20 	.word	0x70203a20
  413548:	746e6972 	.word	0x746e6972
  41354c:	61726720 	.word	0x61726720
  413550:	79746976 	.word	0x79746976
  413554:	74736520 	.word	0x74736520
  413558:	74616d69 	.word	0x74616d69
  41355c:	206e6f69 	.word	0x206e6f69
  413560:	73206e69 	.word	0x73206e69
  413564:	6f736e65 	.word	0x6f736e65
  413568:	72662072 	.word	0x72662072
  41356c:	00656d61 	.word	0x00656d61
  413570:	276c2709 	.word	0x276c2709
  413574:	70203a20 	.word	0x70203a20
  413578:	746e6972 	.word	0x746e6972
  41357c:	6e696c20 	.word	0x6e696c20
  413580:	20726165 	.word	0x20726165
  413584:	65636361 	.word	0x65636361
  413588:	6172656c 	.word	0x6172656c
  41358c:	6e6f6974 	.word	0x6e6f6974
  413590:	74736520 	.word	0x74736520
  413594:	74616d69 	.word	0x74616d69
  413598:	206e6f69 	.word	0x206e6f69
  41359c:	73206e69 	.word	0x73206e69
  4135a0:	6f736e65 	.word	0x6f736e65
  4135a4:	72662072 	.word	0x72662072
  4135a8:	00656d61 	.word	0x00656d61
  4135ac:	27722709 	.word	0x27722709
  4135b0:	72203a20 	.word	0x72203a20
  4135b4:	74657365 	.word	0x74657365
  4135b8:	61696220 	.word	0x61696220
  4135bc:	20736573 	.word	0x20736573
  4135c0:	20646e61 	.word	0x20646e61
  4135c4:	75636361 	.word	0x75636361
  4135c8:	69636172 	.word	0x69636172
  4135cc:	28207365 	.word	0x28207365
  4135d0:	6c6c6977 	.word	0x6c6c6977
  4135d4:	736c6120 	.word	0x736c6120
  4135d8:	6572206f 	.word	0x6572206f
  4135dc:	74696e69 	.word	0x74696e69
  4135e0:	676c6120 	.word	0x676c6120
  4135e4:	7469726f 	.word	0x7469726f
  4135e8:	00296d68 	.word	0x00296d68
  4135ec:	27662709 	.word	0x27662709
  4135f0:	74203a20 	.word	0x74203a20
  4135f4:	6c67676f 	.word	0x6c67676f
  4135f8:	61662065 	.word	0x61662065
  4135fc:	6d2d7473 	.word	0x6d2d7473
  413600:	2065646f 	.word	0x2065646f
  413604:	74616428 	.word	0x74616428
  413608:	72702061 	.word	0x72702061
  41360c:	65746e69 	.word	0x65746e69
  413610:	76652064 	.word	0x76652064
  413614:	20797265 	.word	0x20797265
  413618:	6d203032 	.word	0x6d203032
  41361c:	726f2073 	.word	0x726f2073
  413620:	65766520 	.word	0x65766520
  413624:	31207972 	.word	0x31207972
  413628:	00297320 	.word	0x00297320
  41362c:	27682709 	.word	0x27682709
  413630:	70203a20 	.word	0x70203a20
  413634:	746e6972 	.word	0x746e6972
  413638:	69687420 	.word	0x69687420
  41363c:	65682073 	.word	0x65682073
  413640:	7265706c 	.word	0x7265706c
  413644:	00000000 	.word	0x00000000
  413648:	203a7325 	.word	0x203a7325
  41364c:	6f727265 	.word	0x6f727265
  413650:	64252072 	.word	0x64252072
  413654:	73252820 	.word	0x73252820
  413658:	000a0d29 	.word	0x000a0d29
  41365c:	00000a0d 	.word	0x00000a0d
  413660:	2e302e32 	.word	0x2e302e32
  413664:	00000031 	.word	0x00000031
  413668:	00010000 	.word	0x00010000
  41366c:	01010101 	.word	0x01010101
  413670:	01010101 	.word	0x01010101
  413674:	00000101 	.word	0x00000101
  413678:	004c4c50 	.word	0x004c4c50
  41367c:	4f5f4352 	.word	0x4f5f4352
  413680:	00004353 	.word	0x00004353
  413684:	4f5f5557 	.word	0x4f5f5557
  413688:	00004353 	.word	0x00004353
  41368c:	73206f4e 	.word	0x73206f4e
  413690:	6372756f 	.word	0x6372756f
  413694:	00000065 	.word	0x00000065
  413698:	706c6548 	.word	0x706c6548
  41369c:	6c437265 	.word	0x6c437265
  4136a0:	436b636f 	.word	0x436b636f
  4136a4:	62696c61 	.word	0x62696c61
  4136a8:	6e49203a 	.word	0x6e49203a
  4136ac:	61697469 	.word	0x61697469
  4136b0:	6f63206c 	.word	0x6f63206c
  4136b4:	69666665 	.word	0x69666665
  4136b8:	6e656963 	.word	0x6e656963
  4136bc:	6f632074 	.word	0x6f632074
  4136c0:	7475706d 	.word	0x7475706d
  4136c4:	003a6465 	.word	0x003a6465
  4136c8:	706c6548 	.word	0x706c6548
  4136cc:	6c437265 	.word	0x6c437265
  4136d0:	436b636f 	.word	0x436b636f
  4136d4:	62696c61 	.word	0x62696c61
  4136d8:	2020203a 	.word	0x2020203a
  4136dc:	50202d20 	.word	0x50202d20
  4136e0:	203a4c4c 	.word	0x203a4c4c
  4136e4:	25202020 	.word	0x25202020
  4136e8:	00000066 	.word	0x00000066
  4136ec:	706c6548 	.word	0x706c6548
  4136f0:	6c437265 	.word	0x6c437265
  4136f4:	436b636f 	.word	0x436b636f
  4136f8:	62696c61 	.word	0x62696c61
  4136fc:	2020203a 	.word	0x2020203a
  413700:	52202d20 	.word	0x52202d20
  413704:	534f5f43 	.word	0x534f5f43
  413708:	25203a43 	.word	0x25203a43
  41370c:	00000066 	.word	0x00000066
  413710:	706c6548 	.word	0x706c6548
  413714:	6c437265 	.word	0x6c437265
  413718:	436b636f 	.word	0x436b636f
  41371c:	62696c61 	.word	0x62696c61
  413720:	2020203a 	.word	0x2020203a
  413724:	57202d20 	.word	0x57202d20
  413728:	534f5f55 	.word	0x534f5f55
  41372c:	25203a43 	.word	0x25203a43
  413730:	00000066 	.word	0x00000066
  413734:	706c6568 	.word	0x706c6568
  413738:	6c437265 	.word	0x6c437265
  41373c:	436b636f 	.word	0x436b636f
  413740:	62696c61 	.word	0x62696c61
  413744:	654e203a 	.word	0x654e203a
  413748:	6f632077 	.word	0x6f632077
  41374c:	69666665 	.word	0x69666665
  413750:	6e656963 	.word	0x6e656963
  413754:	6f632074 	.word	0x6f632074
  413758:	7475706d 	.word	0x7475706d
  41375c:	66206465 	.word	0x66206465
  413760:	2520726f 	.word	0x2520726f
  413764:	25203a73 	.word	0x25203a73
  413768:	00000066 	.word	0x00000066
  41376c:	706c6568 	.word	0x706c6568
  413770:	6c437265 	.word	0x6c437265
  413774:	436b636f 	.word	0x436b636f
  413778:	62696c61 	.word	0x62696c61
  41377c:	6142203a 	.word	0x6142203a
  413780:	6f632064 	.word	0x6f632064
  413784:	69666665 	.word	0x69666665
  413788:	6e656963 	.word	0x6e656963
  41378c:	6f632074 	.word	0x6f632074
  413790:	7475706d 	.word	0x7475706d
  413794:	66206465 	.word	0x66206465
  413798:	2520726f 	.word	0x2520726f
  41379c:	25203a73 	.word	0x25203a73
  4137a0:	73202c66 	.word	0x73202c66
  4137a4:	7070696b 	.word	0x7070696b
  4137a8:	20676e69 	.word	0x20676e69
  4137ac:	61207469 	.word	0x61207469
  4137b0:	6b20646e 	.word	0x6b20646e
  4137b4:	69706565 	.word	0x69706565
  4137b8:	2520676e 	.word	0x2520676e
  4137bc:	00000066 	.word	0x00000066
  4137c0:	63637553 	.word	0x63637553
  4137c4:	00737365 	.word	0x00737365
  4137c8:	70736e55 	.word	0x70736e55
  4137cc:	66696365 	.word	0x66696365
  4137d0:	20646569 	.word	0x20646569
  4137d4:	6f727265 	.word	0x6f727265
  4137d8:	00000072 	.word	0x00000072
  4137dc:	20746f4e 	.word	0x20746f4e
  4137e0:	6c706d69 	.word	0x6c706d69
  4137e4:	6e656d65 	.word	0x6e656d65
  4137e8:	00646574 	.word	0x00646574
  4137ec:	6e617254 	.word	0x6e617254
  4137f0:	726f7073 	.word	0x726f7073
  4137f4:	72652074 	.word	0x72652074
  4137f8:	00726f72 	.word	0x00726f72
  4137fc:	656d6954 	.word	0x656d6954
  413800:	2c74756f 	.word	0x2c74756f
  413804:	74636120 	.word	0x74636120
  413808:	206e6f69 	.word	0x206e6f69
  41380c:	20646964 	.word	0x20646964
  413810:	20746f6e 	.word	0x20746f6e
  413814:	706d6f63 	.word	0x706d6f63
  413818:	6574656c 	.word	0x6574656c
  41381c:	206e6920 	.word	0x206e6920
  413820:	656d6974 	.word	0x656d6974
  413824:	00000000 	.word	0x00000000
  413828:	6e6f7257 	.word	0x6e6f7257
  41382c:	69732067 	.word	0x69732067
  413830:	6520657a 	.word	0x6520657a
  413834:	726f7272 	.word	0x726f7272
  413838:	00000000 	.word	0x00000000
  41383c:	7265704f 	.word	0x7265704f
  413840:	6e697461 	.word	0x6e697461
  413844:	79732067 	.word	0x79732067
  413848:	6d657473 	.word	0x6d657473
  41384c:	69616620 	.word	0x69616620
  413850:	6572756c 	.word	0x6572756c
  413854:	00000000 	.word	0x00000000
  413858:	75706e49 	.word	0x75706e49
  41385c:	754f2f74 	.word	0x754f2f74
  413860:	74757074 	.word	0x74757074
  413864:	72726520 	.word	0x72726520
  413868:	0000726f 	.word	0x0000726f
  41386c:	20646142 	.word	0x20646142
  413870:	6f6c6c61 	.word	0x6f6c6c61
  413874:	69746163 	.word	0x69746163
  413878:	00006e6f 	.word	0x00006e6f
  41387c:	64726148 	.word	0x64726148
  413880:	65726177 	.word	0x65726177
  413884:	72726520 	.word	0x72726520
  413888:	0000726f 	.word	0x0000726f
  41388c:	61766e49 	.word	0x61766e49
  413890:	2064696c 	.word	0x2064696c
  413894:	75677261 	.word	0x75677261
  413898:	746e656d 	.word	0x746e656d
  41389c:	00000073 	.word	0x00000073
  4138a0:	78656e55 	.word	0x78656e55
  4138a4:	74636570 	.word	0x74636570
  4138a8:	65206465 	.word	0x65206465
  4138ac:	726f7272 	.word	0x726f7272
  4138b0:	00000000 	.word	0x00000000
  4138b4:	61766e49 	.word	0x61766e49
  4138b8:	2064696c 	.word	0x2064696c
  4138bc:	656c6966 	.word	0x656c6966
  4138c0:	726f6620 	.word	0x726f6620
  4138c4:	0074616d 	.word	0x0074616d
  4138c8:	61766e49 	.word	0x61766e49
  4138cc:	2064696c 	.word	0x2064696c
  4138d0:	656c6966 	.word	0x656c6966
  4138d4:	74617020 	.word	0x74617020
  4138d8:	00000068 	.word	0x00000068
  4138dc:	6e6b6e55 	.word	0x6e6b6e55
  4138e0:	206e776f 	.word	0x206e776f
  4138e4:	67616d69 	.word	0x67616d69
  4138e8:	79742065 	.word	0x79742065
  4138ec:	00006570 	.word	0x00006570
  4138f0:	63746157 	.word	0x63746157
  4138f4:	676f6468 	.word	0x676f6468
  4138f8:	72726520 	.word	0x72726520
  4138fc:	0000726f 	.word	0x0000726f
  413900:	6e6b6e55 	.word	0x6e6b6e55
  413904:	206e776f 	.word	0x206e776f
  413908:	6f727265 	.word	0x6f727265
  41390c:	00000072 	.word	0x00000072
  413910:	6e697361 	.word	0x6e697361
  413914:	00000066 	.word	0x00000066

00413918 <atanhi>:
  413918:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

00413928 <atanlo>:
  413928:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

00413938 <_global_impure_ptr>:
  413938:	20002520 00464e49 00666e69 004e414e      %. INF.inf.NAN.
  413948:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  413958:	46454443 00000000 33323130 37363534     CDEF....01234567
  413968:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  413978:	0000296c 00000030                       l)..0...

00413980 <blanks.8346>:
  413980:	20202020 20202020 20202020 20202020                     

00413990 <zeroes.8347>:
  413990:	30303030 30303030 30303030 30303030     0000000000000000
  4139a0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

004139b0 <__mprec_bigtens>:
  4139b0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4139c0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4139d0:	7f73bf3c 75154fdd                       <.s..O.u

004139d8 <__mprec_tens>:
  4139d8:	00000000 3ff00000 00000000 40240000     .......?......$@
  4139e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4139f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  413a08:	00000000 412e8480 00000000 416312d0     .......A......cA
  413a18:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  413a28:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  413a38:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  413a48:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  413a58:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  413a68:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  413a78:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  413a88:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  413a98:	79d99db4 44ea7843                       ...yCx.D

00413aa0 <p05.7178>:
  413aa0:	00000005 00000019 0000007d 00000043     ........}...C...
  413ab0:	49534f50 00000058 0000002e              POSIX.......

00413abc <_ctype_>:
  413abc:	20202000 20202020 28282020 20282828     .         ((((( 
  413acc:	20202020 20202020 20202020 20202020                     
  413adc:	10108820 10101010 10101010 10101010      ...............
  413aec:	04040410 04040404 10040404 10101010     ................
  413afc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  413b0c:	01010101 01010101 01010101 10101010     ................
  413b1c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  413b2c:	02020202 02020202 02020202 10101010     ................
  413b3c:	00000020 00000000 00000000 00000000      ...............
	...

00413bc0 <_init>:
  413bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413bc2:	bf00      	nop
  413bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413bc6:	bc08      	pop	{r3}
  413bc8:	469e      	mov	lr, r3
  413bca:	4770      	bx	lr

00413bcc <__init_array_start>:
  413bcc:	00411549 	.word	0x00411549

00413bd0 <__frame_dummy_init_array_entry>:
  413bd0:	0040016d                                m.@.

00413bd4 <_fini>:
  413bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  413bd6:	bf00      	nop
  413bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  413bda:	bc08      	pop	{r3}
  413bdc:	469e      	mov	lr, r3
  413bde:	4770      	bx	lr

00413be0 <__fini_array_start>:
  413be0:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || \
	   SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAMS70 || SAME70)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	683a      	ldr	r2, [r7, #0]
20000052:	4413      	add	r3, r2
20000054:	69fa      	ldr	r2, [r7, #28]
20000056:	0092      	lsls	r2, r2, #2
20000058:	69b9      	ldr	r1, [r7, #24]
2000005a:	440a      	add	r2, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	f85d 7b04 	ldr.w	r7, [sp], #4
200000a2:	4770      	bx	lr

200000a4 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a4:	b480      	push	{r7}
200000a6:	b083      	sub	sp, #12
200000a8:	af00      	add	r7, sp, #0
200000aa:	6078      	str	r0, [r7, #4]
200000ac:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ae:	687b      	ldr	r3, [r7, #4]
200000b0:	683a      	ldr	r2, [r7, #0]
200000b2:	601a      	str	r2, [r3, #0]
}
200000b4:	bf00      	nop
200000b6:	370c      	adds	r7, #12
200000b8:	46bd      	mov	sp, r7
200000ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200000be:	4770      	bx	lr

200000c0 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000c0:	b480      	push	{r7}
200000c2:	b085      	sub	sp, #20
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	683a      	ldr	r2, [r7, #0]
200000ce:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000d0:	687b      	ldr	r3, [r7, #4]
200000d2:	689b      	ldr	r3, [r3, #8]
200000d4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d6:	68fb      	ldr	r3, [r7, #12]
200000d8:	f003 0301 	and.w	r3, r3, #1
200000dc:	2b01      	cmp	r3, #1
200000de:	d1f7      	bne.n	200000d0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	f003 030e 	and.w	r3, r3, #14
}
200000e6:	4618      	mov	r0, r3
200000e8:	3714      	adds	r7, #20
200000ea:	46bd      	mov	sp, r7
200000ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200000f0:	4770      	bx	lr
	...

200000f4 <icm_mounting_matrix>:
200000f4:	0000 4000 0000 0000 0000 0000 0000 0000     ...@............
20000104:	0000 4000 0000 0000 0000 0000 0000 0000     ...@............
20000114:	0000 4000                                   ...@

20000118 <print_period_us>:
20000118:	07d0 0000                                   ....

2000011c <ul_test_page_addr>:
2000011c:	fe00 0047                                   ..G.

20000120 <gm>:
20000120:	1000 400e 000c 0000 0023 0000 0008 0000     ...@....#.......
20000130:	0000 2800 0070 0000 000c 0000 0000 0000     ...(p...........
20000140:	0000 0000 1000 400e 000c 0000 002f 0000     .......@..../...
20000150:	8000 0000 0000 2800 0070 0000 000c 0000     .......(p.......
	...
20000168:	0e00 400e 000b 0000 001d 0000 0000 2000     ...@........... 
20000178:	0000 2800 0070 0000 000b 0000 0000 0000     ...(p...........
20000188:	0000 0000 0e00 400e 000b 0000 000f 0000     .......@........
20000198:	8000 0000 0000 2800 0070 0000 000b 0000     .......(p.......
	...
200001b0:	0e00 400e 000b 0000 0002 0000 0004 0000     ...@............
200001c0:	0000 2800 0059 0000 000b 0000 0000 0000     ...(Y...........
200001d0:	0000 0000 0e00 400e 000b 0000 0011 0000     .......@........
200001e0:	0000 0002 0000 3000 0000 0000 000b 0000     .......0........
	...

200001f8 <i2cm>:
200001f8:	0000 0000 c600 4001 c000 4001 0029 0000     .......@...@)...
20000208:	0000 0000 0028 0000 0000 0000 1a80 0006     ....(...........

20000218 <sm>:
20000218:	8400 4000 0000 0000 8000 4000 0000 0000     ...@.......@....
20000228:	0001 0000 0000 0000 0140 0000 000e 0000     ........@.......
20000238:	0000 0000 000d 0000 0000 0000 000c 0000     ................
20000248:	0000 0000 000b 0000 0000 0000 0000 0000     ................
	...
20001294:	0015 0000 0000 0000 0000 0000 0000 0000     ................
200012a4:	8400 4000 0000 0000 8000 4000 0001 0000     ...@.......@....
200012b4:	0001 0000 0000 0000 0140 0000 000e 0000     ........@.......
200012c4:	0000 0000 000d 0000 0000 0000 000c 0000     ................
200012d4:	0000 0000 0005 0000 0001 0000 0000 0000     ................
	...
20002320:	0015 0000 0000 0000 0000 0000 0000 0000     ................

20002330 <tm>:
20002330:	0000 4001 0001 0000 0018 0000 8004 0046     ...@..........F.
20002340:	7fff 0000 0000 0000 0000 0000 0000 0000     ................
20002350:	0018 0000 66e9 0040 0000 4001 0002 0000     .....f@....@....
20002360:	0019 0000 8004 0000 0000 0000 0000 0000     ................
	...
20002378:	0019 0000 6701 0040 4000 4001 0000 0000     .....g@..@.@....
20002388:	001a 0000 8004 0000 0000 0000 0000 0000     ................
	...
200023a0:	001a 0000 6719 0040 4000 4001 0001 0000     .....g@..@.@....
200023b0:	001b 0000 8004 0000 0000 0000 0000 0000     ................
	...
200023c8:	001b 0000 6731 0040 4000 4001 0002 0000     ....1g@..@.@....
200023d8:	001c 0000 8004 0000 0000 0000 0000 0000     ................
	...
200023f0:	001c 0000 6749 0040 0000 4001 0000 0000     ....Ig@....@....
20002400:	0017 0000 8005 0000 0000 0000 0000 0000     ................
	...
20002418:	0017 0000 66c5 0040                         .....f@.

20002420 <um>:
20002420:	c200 4000 0000 0000 0008 0000 0008 0000     ...@............
20002430:	0000 0000 0200 0000 0000 0000 0000 0000     ................
20002440:	0400 0000 0000 0000 0000 0000 0000 0400     ................
	...
20002458:	0000 0200 0000 0000 0000 0000 0000 0000     ................
	...
2000247c:	4200 4003 0000 0000 0007 0000 0007 0000     .B.@............
2000248c:	0000 0000 0000 0800 0001 0000 0000 0000     ................
2000249c:	0000 1000 0001 0000 ffff ffff 0000 0000     ................
200024ac:	0000 0000 ffff ffff 0000 0000 0000 0000     ................
	...

200024d8 <um>:
200024d8:	0000 0000 4298 2000 0100 0000 0000 0000     .....B. ........
200024e8:	3a98 2000 0040 07c0 0000 0000 0001 0000     .:. @...........
200024f8:	4598 2000 0040 0000 0000 0000 4398 2000     .E. @........C. 
20002508:	0040 01c0 0000 0000                         @.......

20002510 <g_interrupt_enabled>:
20002510:	0001 0000                                   ....

20002514 <SystemCoreClock>:
20002514:	1200 007a                                   ..z.

20002518 <__fdlib_version>:
20002518:	0001 0000                                   ....

2000251c <_impure_ptr>:
2000251c:	2520 2000                                    %. 

20002520 <impure_data>:
20002520:	0000 0000 280c 2000 2874 2000 28dc 2000     .....(. t(. .(. 
	...
200025c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200025d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20002948 <__malloc_av_>:
	...
20002950:	2948 2000 2948 2000 2950 2000 2950 2000     H). H). P). P). 
20002960:	2958 2000 2958 2000 2960 2000 2960 2000     X). X). `). `). 
20002970:	2968 2000 2968 2000 2970 2000 2970 2000     h). h). p). p). 
20002980:	2978 2000 2978 2000 2980 2000 2980 2000     x). x). .). .). 
20002990:	2988 2000 2988 2000 2990 2000 2990 2000     .). .). .). .). 
200029a0:	2998 2000 2998 2000 29a0 2000 29a0 2000     .). .). .). .). 
200029b0:	29a8 2000 29a8 2000 29b0 2000 29b0 2000     .). .). .). .). 
200029c0:	29b8 2000 29b8 2000 29c0 2000 29c0 2000     .). .). .). .). 
200029d0:	29c8 2000 29c8 2000 29d0 2000 29d0 2000     .). .). .). .). 
200029e0:	29d8 2000 29d8 2000 29e0 2000 29e0 2000     .). .). .). .). 
200029f0:	29e8 2000 29e8 2000 29f0 2000 29f0 2000     .). .). .). .). 
20002a00:	29f8 2000 29f8 2000 2a00 2000 2a00 2000     .). .). .*. .*. 
20002a10:	2a08 2000 2a08 2000 2a10 2000 2a10 2000     .*. .*. .*. .*. 
20002a20:	2a18 2000 2a18 2000 2a20 2000 2a20 2000     .*. .*.  *.  *. 
20002a30:	2a28 2000 2a28 2000 2a30 2000 2a30 2000     (*. (*. 0*. 0*. 
20002a40:	2a38 2000 2a38 2000 2a40 2000 2a40 2000     8*. 8*. @*. @*. 
20002a50:	2a48 2000 2a48 2000 2a50 2000 2a50 2000     H*. H*. P*. P*. 
20002a60:	2a58 2000 2a58 2000 2a60 2000 2a60 2000     X*. X*. `*. `*. 
20002a70:	2a68 2000 2a68 2000 2a70 2000 2a70 2000     h*. h*. p*. p*. 
20002a80:	2a78 2000 2a78 2000 2a80 2000 2a80 2000     x*. x*. .*. .*. 
20002a90:	2a88 2000 2a88 2000 2a90 2000 2a90 2000     .*. .*. .*. .*. 
20002aa0:	2a98 2000 2a98 2000 2aa0 2000 2aa0 2000     .*. .*. .*. .*. 
20002ab0:	2aa8 2000 2aa8 2000 2ab0 2000 2ab0 2000     .*. .*. .*. .*. 
20002ac0:	2ab8 2000 2ab8 2000 2ac0 2000 2ac0 2000     .*. .*. .*. .*. 
20002ad0:	2ac8 2000 2ac8 2000 2ad0 2000 2ad0 2000     .*. .*. .*. .*. 
20002ae0:	2ad8 2000 2ad8 2000 2ae0 2000 2ae0 2000     .*. .*. .*. .*. 
20002af0:	2ae8 2000 2ae8 2000 2af0 2000 2af0 2000     .*. .*. .*. .*. 
20002b00:	2af8 2000 2af8 2000 2b00 2000 2b00 2000     .*. .*. .+. .+. 
20002b10:	2b08 2000 2b08 2000 2b10 2000 2b10 2000     .+. .+. .+. .+. 
20002b20:	2b18 2000 2b18 2000 2b20 2000 2b20 2000     .+. .+.  +.  +. 
20002b30:	2b28 2000 2b28 2000 2b30 2000 2b30 2000     (+. (+. 0+. 0+. 
20002b40:	2b38 2000 2b38 2000 2b40 2000 2b40 2000     8+. 8+. @+. @+. 
20002b50:	2b48 2000 2b48 2000 2b50 2000 2b50 2000     H+. H+. P+. P+. 
20002b60:	2b58 2000 2b58 2000 2b60 2000 2b60 2000     X+. X+. `+. `+. 
20002b70:	2b68 2000 2b68 2000 2b70 2000 2b70 2000     h+. h+. p+. p+. 
20002b80:	2b78 2000 2b78 2000 2b80 2000 2b80 2000     x+. x+. .+. .+. 
20002b90:	2b88 2000 2b88 2000 2b90 2000 2b90 2000     .+. .+. .+. .+. 
20002ba0:	2b98 2000 2b98 2000 2ba0 2000 2ba0 2000     .+. .+. .+. .+. 
20002bb0:	2ba8 2000 2ba8 2000 2bb0 2000 2bb0 2000     .+. .+. .+. .+. 
20002bc0:	2bb8 2000 2bb8 2000 2bc0 2000 2bc0 2000     .+. .+. .+. .+. 
20002bd0:	2bc8 2000 2bc8 2000 2bd0 2000 2bd0 2000     .+. .+. .+. .+. 
20002be0:	2bd8 2000 2bd8 2000 2be0 2000 2be0 2000     .+. .+. .+. .+. 
20002bf0:	2be8 2000 2be8 2000 2bf0 2000 2bf0 2000     .+. .+. .+. .+. 
20002c00:	2bf8 2000 2bf8 2000 2c00 2000 2c00 2000     .+. .+. .,. .,. 
20002c10:	2c08 2000 2c08 2000 2c10 2000 2c10 2000     .,. .,. .,. .,. 
20002c20:	2c18 2000 2c18 2000 2c20 2000 2c20 2000     .,. .,.  ,.  ,. 
20002c30:	2c28 2000 2c28 2000 2c30 2000 2c30 2000     (,. (,. 0,. 0,. 
20002c40:	2c38 2000 2c38 2000 2c40 2000 2c40 2000     8,. 8,. @,. @,. 
20002c50:	2c48 2000 2c48 2000 2c50 2000 2c50 2000     H,. H,. P,. P,. 
20002c60:	2c58 2000 2c58 2000 2c60 2000 2c60 2000     X,. X,. `,. `,. 
20002c70:	2c68 2000 2c68 2000 2c70 2000 2c70 2000     h,. h,. p,. p,. 
20002c80:	2c78 2000 2c78 2000 2c80 2000 2c80 2000     x,. x,. .,. .,. 
20002c90:	2c88 2000 2c88 2000 2c90 2000 2c90 2000     .,. .,. .,. .,. 
20002ca0:	2c98 2000 2c98 2000 2ca0 2000 2ca0 2000     .,. .,. .,. .,. 
20002cb0:	2ca8 2000 2ca8 2000 2cb0 2000 2cb0 2000     .,. .,. .,. .,. 
20002cc0:	2cb8 2000 2cb8 2000 2cc0 2000 2cc0 2000     .,. .,. .,. .,. 
20002cd0:	2cc8 2000 2cc8 2000 2cd0 2000 2cd0 2000     .,. .,. .,. .,. 
20002ce0:	2cd8 2000 2cd8 2000 2ce0 2000 2ce0 2000     .,. .,. .,. .,. 
20002cf0:	2ce8 2000 2ce8 2000 2cf0 2000 2cf0 2000     .,. .,. .,. .,. 
20002d00:	2cf8 2000 2cf8 2000 2d00 2000 2d00 2000     .,. .,. .-. .-. 
20002d10:	2d08 2000 2d08 2000 2d10 2000 2d10 2000     .-. .-. .-. .-. 
20002d20:	2d18 2000 2d18 2000 2d20 2000 2d20 2000     .-. .-.  -.  -. 
20002d30:	2d28 2000 2d28 2000 2d30 2000 2d30 2000     (-. (-. 0-. 0-. 
20002d40:	2d38 2000 2d38 2000 2d40 2000 2d40 2000     8-. 8-. @-. @-. 

20002d50 <__malloc_sbrk_base>:
20002d50:	ffff ffff                                   ....

20002d54 <__malloc_trim_threshold>:
20002d54:	0000 0002                                   ....

20002d58 <__atexit_recursive_mutex>:
20002d58:	52c0 2000                                   .R. 

20002d5c <__global_locale>:
20002d5c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002d7c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002d9c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002dbc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002ddc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002dfc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002e1c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002e3c:	2fdd 0041 2fb1 0041 0000 0000 3abc 0041     ./A../A......:A.
20002e4c:	3ab8 0041 395c 0041 395c 0041 395c 0041     .:A.\9A.\9A.\9A.
20002e5c:	395c 0041 395c 0041 395c 0041 395c 0041     \9A.\9A.\9A.\9A.
20002e6c:	395c 0041 395c 0041 ffff ffff ffff ffff     \9A.\9A.........
20002e7c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20002ea4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
