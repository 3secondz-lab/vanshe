
example-raw-data-registers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c88c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040c88c  0040c88c  0001c88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00002e98  20000000  0040c894  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001828  20002e98  0040f730  00022e98  2**3
                  ALLOC
  4 .stack        00003000  200046c0  00410f58  00022e98  2**0
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00022e98  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00022ec8  2**0
                  CONTENTS, READONLY
  7 .debug_info   000293a9  00000000  00000000  00022f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000057be  00000000  00000000  0004c2ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000c267  00000000  00000000  00051a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000015d0  00000000  00000000  0005dcef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014e8  00000000  00000000  0005f2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ae08  00000000  00000000  000607a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017b6c  00000000  00000000  0007b5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005c80b  00000000  00000000  0009311b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000671c  00000000  00000000  000ef928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 76 00 20 45 74 40 00 15 75 40 00 15 75 40 00     .v. Et@..u@..u@.
  400010:	15 75 40 00 15 75 40 00 15 75 40 00 00 00 00 00     .u@..u@..u@.....
	...
  40002c:	15 75 40 00 15 75 40 00 00 00 00 00 15 75 40 00     .u@..u@......u@.
  40003c:	95 3c 40 00 15 75 40 00 15 75 40 00 3d 30 40 00     .<@..u@..u@.=0@.
  40004c:	15 75 40 00 15 75 40 00 15 75 40 00 15 75 40 00     .u@..u@..u@..u@.
  40005c:	2d 51 40 00 19 51 40 00 15 75 40 00 00 00 00 00     -Q@..Q@..u@.....
  40006c:	d9 63 40 00 f1 63 40 00 15 75 40 00 15 75 40 00     .c@..c@..u@..u@.
  40007c:	15 75 40 00 15 75 40 00 15 75 40 00 15 75 40 00     .u@..u@..u@..u@.
  40008c:	15 75 40 00 15 75 40 00 81 3c 40 00 15 75 40 00     .u@..u@..<@..u@.
  40009c:	2d 44 40 00 51 44 40 00 69 44 40 00 81 44 40 00     -D@.QD@.iD@..D@.
  4000ac:	99 44 40 00 b1 44 40 00 15 75 40 00 15 75 40 00     .D@..D@..u@..u@.
	...
  4000fc:	15 75 40 00 15 75 40 00 15 75 40 00 00 00 00 00     .u@..u@..u@.....
	...

00400148 <__do_global_dtors_aux>:
  400148:	b510      	push	{r4, lr}
  40014a:	4c05      	ldr	r4, [pc, #20]	; (400160 <__do_global_dtors_aux+0x18>)
  40014c:	7823      	ldrb	r3, [r4, #0]
  40014e:	b933      	cbnz	r3, 40015e <__do_global_dtors_aux+0x16>
  400150:	4b04      	ldr	r3, [pc, #16]	; (400164 <__do_global_dtors_aux+0x1c>)
  400152:	b113      	cbz	r3, 40015a <__do_global_dtors_aux+0x12>
  400154:	4804      	ldr	r0, [pc, #16]	; (400168 <__do_global_dtors_aux+0x20>)
  400156:	f3af 8000 	nop.w
  40015a:	2301      	movs	r3, #1
  40015c:	7023      	strb	r3, [r4, #0]
  40015e:	bd10      	pop	{r4, pc}
  400160:	20002e98 	.word	0x20002e98
  400164:	00000000 	.word	0x00000000
  400168:	0040c894 	.word	0x0040c894

0040016c <frame_dummy>:
  40016c:	4b0c      	ldr	r3, [pc, #48]	; (4001a0 <frame_dummy+0x34>)
  40016e:	b143      	cbz	r3, 400182 <frame_dummy+0x16>
  400170:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x38>)
  400172:	490d      	ldr	r1, [pc, #52]	; (4001a8 <frame_dummy+0x3c>)
  400174:	b510      	push	{r4, lr}
  400176:	f3af 8000 	nop.w
  40017a:	480c      	ldr	r0, [pc, #48]	; (4001ac <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b923      	cbnz	r3, 40018a <frame_dummy+0x1e>
  400180:	bd10      	pop	{r4, pc}
  400182:	480a      	ldr	r0, [pc, #40]	; (4001ac <frame_dummy+0x40>)
  400184:	6803      	ldr	r3, [r0, #0]
  400186:	b933      	cbnz	r3, 400196 <frame_dummy+0x2a>
  400188:	4770      	bx	lr
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <frame_dummy+0x44>)
  40018c:	2b00      	cmp	r3, #0
  40018e:	d0f7      	beq.n	400180 <frame_dummy+0x14>
  400190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400194:	4718      	bx	r3
  400196:	4b06      	ldr	r3, [pc, #24]	; (4001b0 <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f5      	beq.n	400188 <frame_dummy+0x1c>
  40019c:	4718      	bx	r3
  40019e:	bf00      	nop
  4001a0:	00000000 	.word	0x00000000
  4001a4:	0040c894 	.word	0x0040c894
  4001a8:	20002e9c 	.word	0x20002e9c
  4001ac:	0040c894 	.word	0x0040c894
  4001b0:	00000000 	.word	0x00000000

004001b4 <main>:
/* --------------------------------------------------------------------------------------
 *  Main
 * -------------------------------------------------------------------------------------- */

int main(void)
{
  4001b4:	b590      	push	{r4, r7, lr}
  4001b6:	b08b      	sub	sp, #44	; 0x2c
  4001b8:	af02      	add	r7, sp, #8
	int rc = 0;
  4001ba:	2300      	movs	r3, #0
  4001bc:	61fb      	str	r3, [r7, #28]
	struct inv_icm426xx_serif icm426xx_serif;
	
	/* Initialize MCU hardware */
	SetupMCUHardware(&icm426xx_serif);
  4001be:	463b      	mov	r3, r7
  4001c0:	4618      	mov	r0, r3
  4001c2:	4b35      	ldr	r3, [pc, #212]	; (400298 <main+0xe4>)
  4001c4:	4798      	blx	r3

	/* Welcome message*/
	INV_MSG(INV_MSG_LEVEL_INFO, "##################################################");
  4001c6:	4935      	ldr	r1, [pc, #212]	; (40029c <main+0xe8>)
  4001c8:	2003      	movs	r0, #3
  4001ca:	4b35      	ldr	r3, [pc, #212]	; (4002a0 <main+0xec>)
  4001cc:	4798      	blx	r3

	INV_MSG(INV_MSG_LEVEL_INFO, "DK-42605 data streaming application");
  4001ce:	4935      	ldr	r1, [pc, #212]	; (4002a4 <main+0xf0>)
  4001d0:	2003      	movs	r0, #3
  4001d2:	4b33      	ldr	r3, [pc, #204]	; (4002a0 <main+0xec>)
  4001d4:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Slightly modified from the official example (example-raw-data-registers)");
  4001d6:	4934      	ldr	r1, [pc, #208]	; (4002a8 <main+0xf4>)
  4001d8:	2003      	movs	r0, #3
  4001da:	4b31      	ldr	r3, [pc, #196]	; (4002a0 <main+0xec>)
  4001dc:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Jinsun Park (zzangjinsun@3secondz.com)");
  4001de:	4933      	ldr	r1, [pc, #204]	; (4002ac <main+0xf8>)
  4001e0:	2003      	movs	r0, #3
  4001e2:	4b2f      	ldr	r3, [pc, #188]	; (4002a0 <main+0xec>)
  4001e4:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  4001e6:	4932      	ldr	r1, [pc, #200]	; (4002b0 <main+0xfc>)
  4001e8:	2003      	movs	r0, #3
  4001ea:	4b2d      	ldr	r3, [pc, #180]	; (4002a0 <main+0xec>)
  4001ec:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Current setup : ");
  4001ee:	4931      	ldr	r1, [pc, #196]	; (4002b4 <main+0x100>)
  4001f0:	2003      	movs	r0, #3
  4001f2:	4b2b      	ldr	r3, [pc, #172]	; (4002a0 <main+0xec>)
  4001f4:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Acc FSR : 2g");
  4001f6:	4930      	ldr	r1, [pc, #192]	; (4002b8 <main+0x104>)
  4001f8:	2003      	movs	r0, #3
  4001fa:	4b29      	ldr	r3, [pc, #164]	; (4002a0 <main+0xec>)
  4001fc:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Acc ODR : 200Hz");
  4001fe:	492f      	ldr	r1, [pc, #188]	; (4002bc <main+0x108>)
  400200:	2003      	movs	r0, #3
  400202:	4b27      	ldr	r3, [pc, #156]	; (4002a0 <main+0xec>)
  400204:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Gyr FSR : 125dps");
  400206:	492e      	ldr	r1, [pc, #184]	; (4002c0 <main+0x10c>)
  400208:	2003      	movs	r0, #3
  40020a:	4b25      	ldr	r3, [pc, #148]	; (4002a0 <main+0xec>)
  40020c:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " Gyr ODR : 200Hz");
  40020e:	492d      	ldr	r1, [pc, #180]	; (4002c4 <main+0x110>)
  400210:	2003      	movs	r0, #3
  400212:	4b23      	ldr	r3, [pc, #140]	; (4002a0 <main+0xec>)
  400214:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  400216:	4926      	ldr	r1, [pc, #152]	; (4002b0 <main+0xfc>)
  400218:	2003      	movs	r0, #3
  40021a:	4b21      	ldr	r3, [pc, #132]	; (4002a0 <main+0xec>)
  40021c:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, "Output format : [timestamp AccX AccY AccZ Temp GyrX GyrY GyrZ");
  40021e:	492a      	ldr	r1, [pc, #168]	; (4002c8 <main+0x114>)
  400220:	2003      	movs	r0, #3
  400222:	4b1f      	ldr	r3, [pc, #124]	; (4002a0 <main+0xec>)
  400224:	4798      	blx	r3
	INV_MSG(INV_MSG_LEVEL_INFO, " ");
  400226:	4922      	ldr	r1, [pc, #136]	; (4002b0 <main+0xfc>)
  400228:	2003      	movs	r0, #3
  40022a:	4b1d      	ldr	r3, [pc, #116]	; (4002a0 <main+0xec>)
  40022c:	4798      	blx	r3
	
	/* Initialize Icm426xx */
	rc = SetupInvDevice(&icm426xx_serif);
  40022e:	463b      	mov	r3, r7
  400230:	4618      	mov	r0, r3
  400232:	4b26      	ldr	r3, [pc, #152]	; (4002cc <main+0x118>)
  400234:	4798      	blx	r3
  400236:	61f8      	str	r0, [r7, #28]
	check_rc(rc, "error while setting up INV device");
  400238:	4925      	ldr	r1, [pc, #148]	; (4002d0 <main+0x11c>)
  40023a:	69f8      	ldr	r0, [r7, #28]
  40023c:	4b25      	ldr	r3, [pc, #148]	; (4002d4 <main+0x120>)
  40023e:	4798      	blx	r3

	/* Configure Icm426xx */
	/* /!\ In this example, the data output frequency will be the faster  between Accel and Gyro odr */
	rc = ConfigureInvDevice((uint8_t )IS_LOW_NOISE_MODE,
  400240:	2300      	movs	r3, #0
  400242:	9301      	str	r3, [sp, #4]
  400244:	2307      	movs	r3, #7
  400246:	9300      	str	r3, [sp, #0]
  400248:	2307      	movs	r3, #7
  40024a:	2280      	movs	r2, #128	; 0x80
  40024c:	2160      	movs	r1, #96	; 0x60
  40024e:	2001      	movs	r0, #1
  400250:	4c21      	ldr	r4, [pc, #132]	; (4002d8 <main+0x124>)
  400252:	47a0      	blx	r4
  400254:	61f8      	str	r0, [r7, #28]
	                                  ICM426XX_GYRO_CONFIG0_FS_SEL_125dps,
	                                  ICM426XX_ACCEL_CONFIG0_ODR_200_HZ,
	                                  ICM426XX_GYRO_CONFIG0_ODR_200_HZ,
	                        (uint8_t )USE_CLK_IN);
	
	check_rc(rc, "error while configuring INV device");
  400256:	4921      	ldr	r1, [pc, #132]	; (4002dc <main+0x128>)
  400258:	69f8      	ldr	r0, [r7, #28]
  40025a:	4b1e      	ldr	r3, [pc, #120]	; (4002d4 <main+0x120>)
  40025c:	4798      	blx	r3

	INV_MSG(INV_MSG_LEVEL_INFO, "##################################################");
  40025e:	490f      	ldr	r1, [pc, #60]	; (40029c <main+0xe8>)
  400260:	2003      	movs	r0, #3
  400262:	4b0f      	ldr	r3, [pc, #60]	; (4002a0 <main+0xec>)
  400264:	4798      	blx	r3
	
	do {
		/* Poll device for data */		
		if (irq_from_device & TO_MASK(INV_GPIO_INT1)) {
  400266:	4b1e      	ldr	r3, [pc, #120]	; (4002e0 <main+0x12c>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	f003 0301 	and.w	r3, r3, #1
  40026e:	2b00      	cmp	r3, #0
  400270:	d0f9      	beq.n	400266 <main+0xb2>
			rc = GetDataFromInvDevice();
  400272:	4b1c      	ldr	r3, [pc, #112]	; (4002e4 <main+0x130>)
  400274:	4798      	blx	r3
  400276:	61f8      	str	r0, [r7, #28]
			check_rc(rc, "error while processing FIFO");
  400278:	491b      	ldr	r1, [pc, #108]	; (4002e8 <main+0x134>)
  40027a:	69f8      	ldr	r0, [r7, #28]
  40027c:	4b15      	ldr	r3, [pc, #84]	; (4002d4 <main+0x120>)
  40027e:	4798      	blx	r3

			inv_disable_irq();
  400280:	4b1a      	ldr	r3, [pc, #104]	; (4002ec <main+0x138>)
  400282:	4798      	blx	r3
			irq_from_device &= ~TO_MASK(INV_GPIO_INT1);
  400284:	4b16      	ldr	r3, [pc, #88]	; (4002e0 <main+0x12c>)
  400286:	681b      	ldr	r3, [r3, #0]
  400288:	f023 0301 	bic.w	r3, r3, #1
  40028c:	4a14      	ldr	r2, [pc, #80]	; (4002e0 <main+0x12c>)
  40028e:	6013      	str	r3, [r2, #0]
			inv_enable_irq();
  400290:	4b17      	ldr	r3, [pc, #92]	; (4002f0 <main+0x13c>)
  400292:	4798      	blx	r3
		if (irq_from_device & TO_MASK(INV_GPIO_INT1)) {
  400294:	e7e7      	b.n	400266 <main+0xb2>
  400296:	bf00      	nop
  400298:	004002f5 	.word	0x004002f5
  40029c:	0040c15c 	.word	0x0040c15c
  4002a0:	004056ad 	.word	0x004056ad
  4002a4:	0040c190 	.word	0x0040c190
  4002a8:	0040c1b4 	.word	0x0040c1b4
  4002ac:	0040c200 	.word	0x0040c200
  4002b0:	0040c228 	.word	0x0040c228
  4002b4:	0040c22c 	.word	0x0040c22c
  4002b8:	0040c240 	.word	0x0040c240
  4002bc:	0040c250 	.word	0x0040c250
  4002c0:	0040c264 	.word	0x0040c264
  4002c4:	0040c278 	.word	0x0040c278
  4002c8:	0040c28c 	.word	0x0040c28c
  4002cc:	00400675 	.word	0x00400675
  4002d0:	0040c2cc 	.word	0x0040c2cc
  4002d4:	00400411 	.word	0x00400411
  4002d8:	00400741 	.word	0x00400741
  4002dc:	0040c2f0 	.word	0x0040c2f0
  4002e0:	20002eb4 	.word	0x20002eb4
  4002e4:	0040082d 	.word	0x0040082d
  4002e8:	0040c314 	.word	0x0040c314
  4002ec:	00402911 	.word	0x00402911
  4002f0:	00402939 	.word	0x00402939

004002f4 <SetupMCUHardware>:
 *   - a microsecond timer requested by Icm426xx driver to compute some delay
 *   - a microsecond timer used to get some timestamps
 *   - a serial link to communicate from MCU to Icm426xx
 */
static void SetupMCUHardware(struct inv_icm426xx_serif * icm_serif)
{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b082      	sub	sp, #8
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
	inv_board_hal_init();
  4002fc:	4b18      	ldr	r3, [pc, #96]	; (400360 <SetupMCUHardware+0x6c>)
  4002fe:	4798      	blx	r3
	
	/* configure UART */
	config_uart(LOG_UART_ID);
  400300:	2000      	movs	r0, #0
  400302:	4b18      	ldr	r3, [pc, #96]	; (400364 <SetupMCUHardware+0x70>)
  400304:	4798      	blx	r3

	/* Setup message facility to see internal traces from FW */
	INV_MSG_SETUP(MSG_LEVEL, msg_printer);
  400306:	4918      	ldr	r1, [pc, #96]	; (400368 <SetupMCUHardware+0x74>)
  400308:	2005      	movs	r0, #5
  40030a:	4b18      	ldr	r3, [pc, #96]	; (40036c <SetupMCUHardware+0x78>)
  40030c:	4798      	blx	r3
	 * This pin is connected to Icm426xx INT1 output and thus will receive interrupts 
	 * enabled on INT1 from the device.
	 * A callback function is also passed that will be executed each time an interrupt
	 * fires.
	*/
	inv_gpio_sensor_irq_init(INV_GPIO_INT1, ext_interrupt_cb, 0);
  40030e:	2200      	movs	r2, #0
  400310:	4917      	ldr	r1, [pc, #92]	; (400370 <SetupMCUHardware+0x7c>)
  400312:	2000      	movs	r0, #0
  400314:	4b17      	ldr	r3, [pc, #92]	; (400374 <SetupMCUHardware+0x80>)
  400316:	4798      	blx	r3

	/* Init timer peripheral for delay */
	inv_delay_init(DELAY_TIMER);
  400318:	2001      	movs	r0, #1
  40031a:	4b17      	ldr	r3, [pc, #92]	; (400378 <SetupMCUHardware+0x84>)
  40031c:	4798      	blx	r3

	/*
	 * Configure the timer for the timebase
	 */
	inv_timer_configure_timebase(1000000);
  40031e:	4817      	ldr	r0, [pc, #92]	; (40037c <SetupMCUHardware+0x88>)
  400320:	4b17      	ldr	r3, [pc, #92]	; (400380 <SetupMCUHardware+0x8c>)
  400322:	4798      	blx	r3
	inv_timer_enable(TIMEBASE_TIMER);
  400324:	2000      	movs	r0, #0
  400326:	4b17      	ldr	r3, [pc, #92]	; (400384 <SetupMCUHardware+0x90>)
  400328:	4798      	blx	r3
	/* Output 32kHz SLCK to PA17, it is up to user to connect it or not at board level to have CLKIN capability */
	rc |= inv_gpio_output_clk_on_pin(INV_GPIO_CLKIN);
#endif

	/* Initialize serial inteface between MCU and Icm426xx */
	icm_serif->context   = 0;        /* no need */
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	2200      	movs	r2, #0
  40032e:	601a      	str	r2, [r3, #0]
	icm_serif->read_reg  = inv_io_hal_read_reg;
  400330:	687b      	ldr	r3, [r7, #4]
  400332:	4a15      	ldr	r2, [pc, #84]	; (400388 <SetupMCUHardware+0x94>)
  400334:	605a      	str	r2, [r3, #4]
	icm_serif->write_reg = inv_io_hal_write_reg;
  400336:	687b      	ldr	r3, [r7, #4]
  400338:	4a14      	ldr	r2, [pc, #80]	; (40038c <SetupMCUHardware+0x98>)
  40033a:	609a      	str	r2, [r3, #8]
	icm_serif->max_read  = 1024*32;  /* maximum number of bytes allowed per serial read */
  40033c:	687b      	ldr	r3, [r7, #4]
  40033e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400342:	611a      	str	r2, [r3, #16]
	icm_serif->max_write = 1024*32;  /* maximum number of bytes allowed per serial write */
  400344:	687b      	ldr	r3, [r7, #4]
  400346:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40034a:	615a      	str	r2, [r3, #20]
	icm_serif->serif_type = SERIF_TYPE;
  40034c:	687b      	ldr	r3, [r7, #4]
  40034e:	2201      	movs	r2, #1
  400350:	761a      	strb	r2, [r3, #24]
	inv_io_hal_init(icm_serif);
  400352:	6878      	ldr	r0, [r7, #4]
  400354:	4b0e      	ldr	r3, [pc, #56]	; (400390 <SetupMCUHardware+0x9c>)
  400356:	4798      	blx	r3
}
  400358:	bf00      	nop
  40035a:	3708      	adds	r7, #8
  40035c:	46bd      	mov	sp, r7
  40035e:	bd80      	pop	{r7, pc}
  400360:	004028d5 	.word	0x004028d5
  400364:	00400509 	.word	0x00400509
  400368:	0040044d 	.word	0x0040044d
  40036c:	00405669 	.word	0x00405669
  400370:	00400395 	.word	0x00400395
  400374:	00402aa1 	.word	0x00402aa1
  400378:	004029f9 	.word	0x004029f9
  40037c:	000f4240 	.word	0x000f4240
  400380:	00403f4d 	.word	0x00403f4d
  400384:	00403ecd 	.word	0x00403ecd
  400388:	00400579 	.word	0x00400579
  40038c:	004005e1 	.word	0x004005e1
  400390:	00400539 	.word	0x00400539

00400394 <ext_interrupt_cb>:
 * This function get a timestamp and store it in the timestamp buffer.
 * Note that this function is executed in an interrupt handler and thus no protection
 * are implemented for shared variable timestamp_buffer.
 */
static void ext_interrupt_cb(void * context, unsigned int int_num)
{
  400394:	b590      	push	{r4, r7, lr}
  400396:	b085      	sub	sp, #20
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
  40039c:	6039      	str	r1, [r7, #0]
	uint64_t timestamp = rtc_timer_get_time_us();
#else
	/* 
	 * Read timestamp from the timer dedicated to timestamping 
	 */
	uint64_t timestamp = inv_timer_get_counter(TIMEBASE_TIMER);
  40039e:	2000      	movs	r0, #0
  4003a0:	4b18      	ldr	r3, [pc, #96]	; (400404 <ext_interrupt_cb+0x70>)
  4003a2:	4798      	blx	r3
  4003a4:	4603      	mov	r3, r0
  4003a6:	460c      	mov	r4, r1
  4003a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
#endif

	if(int_num == INV_GPIO_INT1) {
  4003ac:	683b      	ldr	r3, [r7, #0]
  4003ae:	2b00      	cmp	r3, #0
  4003b0:	d119      	bne.n	4003e6 <ext_interrupt_cb+0x52>
		if (!RINGBUFFER_FULL(&timestamp_buffer))
  4003b2:	4b15      	ldr	r3, [pc, #84]	; (400408 <ext_interrupt_cb+0x74>)
  4003b4:	885a      	ldrh	r2, [r3, #2]
  4003b6:	4b14      	ldr	r3, [pc, #80]	; (400408 <ext_interrupt_cb+0x74>)
  4003b8:	881b      	ldrh	r3, [r3, #0]
  4003ba:	1ad3      	subs	r3, r2, r3
  4003bc:	b29b      	uxth	r3, r3
  4003be:	2b40      	cmp	r3, #64	; 0x40
  4003c0:	d011      	beq.n	4003e6 <ext_interrupt_cb+0x52>
			RINGBUFFER_PUSH(&timestamp_buffer, &timestamp);
  4003c2:	4b11      	ldr	r3, [pc, #68]	; (400408 <ext_interrupt_cb+0x74>)
  4003c4:	885b      	ldrh	r3, [r3, #2]
  4003c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  4003ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4003ce:	490e      	ldr	r1, [pc, #56]	; (400408 <ext_interrupt_cb+0x74>)
  4003d0:	3201      	adds	r2, #1
  4003d2:	00d2      	lsls	r2, r2, #3
  4003d4:	440a      	add	r2, r1
  4003d6:	e9c2 3400 	strd	r3, r4, [r2]
  4003da:	4b0b      	ldr	r3, [pc, #44]	; (400408 <ext_interrupt_cb+0x74>)
  4003dc:	885b      	ldrh	r3, [r3, #2]
  4003de:	3301      	adds	r3, #1
  4003e0:	b29a      	uxth	r2, r3
  4003e2:	4b09      	ldr	r3, [pc, #36]	; (400408 <ext_interrupt_cb+0x74>)
  4003e4:	805a      	strh	r2, [r3, #2]
	}

	irq_from_device |= TO_MASK(int_num);
  4003e6:	2201      	movs	r2, #1
  4003e8:	683b      	ldr	r3, [r7, #0]
  4003ea:	fa02 f303 	lsl.w	r3, r2, r3
  4003ee:	4a07      	ldr	r2, [pc, #28]	; (40040c <ext_interrupt_cb+0x78>)
  4003f0:	6812      	ldr	r2, [r2, #0]
  4003f2:	4313      	orrs	r3, r2
  4003f4:	461a      	mov	r2, r3
  4003f6:	4b05      	ldr	r3, [pc, #20]	; (40040c <ext_interrupt_cb+0x78>)
  4003f8:	601a      	str	r2, [r3, #0]
}
  4003fa:	bf00      	nop
  4003fc:	3714      	adds	r7, #20
  4003fe:	46bd      	mov	sp, r7
  400400:	bd90      	pop	{r4, r7, pc}
  400402:	bf00      	nop
  400404:	00404159 	.word	0x00404159
  400408:	20004488 	.word	0x20004488
  40040c:	20002eb4 	.word	0x20002eb4

00400410 <check_rc>:

/*
 * Helper function to check RC value and block programm exectution
 */
static void check_rc(int rc, const char * msg_context)
{
  400410:	b590      	push	{r4, r7, lr}
  400412:	b085      	sub	sp, #20
  400414:	af02      	add	r7, sp, #8
  400416:	6078      	str	r0, [r7, #4]
  400418:	6039      	str	r1, [r7, #0]
	if(rc < 0) {
  40041a:	687b      	ldr	r3, [r7, #4]
  40041c:	2b00      	cmp	r3, #0
  40041e:	da0b      	bge.n	400438 <check_rc+0x28>
		INV_MSG(INV_MSG_LEVEL_ERROR, "%s: error %d (%s)\r\n", msg_context, rc, inv_error_str(rc));
  400420:	6878      	ldr	r0, [r7, #4]
  400422:	4b07      	ldr	r3, [pc, #28]	; (400440 <check_rc+0x30>)
  400424:	4798      	blx	r3
  400426:	4603      	mov	r3, r0
  400428:	9300      	str	r3, [sp, #0]
  40042a:	687b      	ldr	r3, [r7, #4]
  40042c:	683a      	ldr	r2, [r7, #0]
  40042e:	4905      	ldr	r1, [pc, #20]	; (400444 <check_rc+0x34>)
  400430:	2001      	movs	r0, #1
  400432:	4c05      	ldr	r4, [pc, #20]	; (400448 <check_rc+0x38>)
  400434:	47a0      	blx	r4
		while(1);
  400436:	e7fe      	b.n	400436 <check_rc+0x26>
	}
}
  400438:	bf00      	nop
  40043a:	370c      	adds	r7, #12
  40043c:	46bd      	mov	sp, r7
  40043e:	bd90      	pop	{r4, r7, pc}
  400440:	00405579 	.word	0x00405579
  400444:	0040c330 	.word	0x0040c330
  400448:	004056ad 	.word	0x004056ad

0040044c <msg_printer>:

/*
 * Printer function for message facility
 */
void msg_printer(int level, const char * str, va_list ap)
{
  40044c:	b590      	push	{r4, r7, lr}
  40044e:	b087      	sub	sp, #28
  400450:	af00      	add	r7, sp, #0
  400452:	60f8      	str	r0, [r7, #12]
  400454:	60b9      	str	r1, [r7, #8]
  400456:	607a      	str	r2, [r7, #4]
	static char out_str[256]; /* static to limit stack usage */
	unsigned idx = 0;
  400458:	2300      	movs	r3, #0
  40045a:	617b      	str	r3, [r7, #20]
	idx += snprintf(&out_str[idx], sizeof(out_str) - idx, "%s", s[level]);
	if(idx >= (sizeof(out_str)))
		return;
	*/

	idx += vsnprintf(&out_str[idx], sizeof(out_str) - idx, str, ap);
  40045c:	697b      	ldr	r3, [r7, #20]
  40045e:	4a18      	ldr	r2, [pc, #96]	; (4004c0 <msg_printer+0x74>)
  400460:	1898      	adds	r0, r3, r2
  400462:	697b      	ldr	r3, [r7, #20]
  400464:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
  400468:	687b      	ldr	r3, [r7, #4]
  40046a:	68ba      	ldr	r2, [r7, #8]
  40046c:	4c15      	ldr	r4, [pc, #84]	; (4004c4 <msg_printer+0x78>)
  40046e:	47a0      	blx	r4
  400470:	4603      	mov	r3, r0
  400472:	461a      	mov	r2, r3
  400474:	697b      	ldr	r3, [r7, #20]
  400476:	4413      	add	r3, r2
  400478:	617b      	str	r3, [r7, #20]
	if(idx >= (sizeof(out_str)))
  40047a:	697b      	ldr	r3, [r7, #20]
  40047c:	2bff      	cmp	r3, #255	; 0xff
  40047e:	d819      	bhi.n	4004b4 <msg_printer+0x68>
		return;
	idx += snprintf(&out_str[idx], sizeof(out_str) - idx, "\r\n");
  400480:	697b      	ldr	r3, [r7, #20]
  400482:	4a0f      	ldr	r2, [pc, #60]	; (4004c0 <msg_printer+0x74>)
  400484:	1898      	adds	r0, r3, r2
  400486:	697b      	ldr	r3, [r7, #20]
  400488:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
  40048c:	4a0e      	ldr	r2, [pc, #56]	; (4004c8 <msg_printer+0x7c>)
  40048e:	4619      	mov	r1, r3
  400490:	4b0e      	ldr	r3, [pc, #56]	; (4004cc <msg_printer+0x80>)
  400492:	4798      	blx	r3
  400494:	4603      	mov	r3, r0
  400496:	461a      	mov	r2, r3
  400498:	697b      	ldr	r3, [r7, #20]
  40049a:	4413      	add	r3, r2
  40049c:	617b      	str	r3, [r7, #20]
	if(idx >= (sizeof(out_str)))
  40049e:	697b      	ldr	r3, [r7, #20]
  4004a0:	2bff      	cmp	r3, #255	; 0xff
  4004a2:	d809      	bhi.n	4004b8 <msg_printer+0x6c>
		return;

	inv_uart_mngr_puts(LOG_UART_ID, out_str, idx);
  4004a4:	697b      	ldr	r3, [r7, #20]
  4004a6:	b29b      	uxth	r3, r3
  4004a8:	461a      	mov	r2, r3
  4004aa:	4905      	ldr	r1, [pc, #20]	; (4004c0 <msg_printer+0x74>)
  4004ac:	2000      	movs	r0, #0
  4004ae:	4b08      	ldr	r3, [pc, #32]	; (4004d0 <msg_printer+0x84>)
  4004b0:	4798      	blx	r3
  4004b2:	e002      	b.n	4004ba <msg_printer+0x6e>
		return;
  4004b4:	bf00      	nop
  4004b6:	e000      	b.n	4004ba <msg_printer+0x6e>
		return;
  4004b8:	bf00      	nop
}
  4004ba:	371c      	adds	r7, #28
  4004bc:	46bd      	mov	sp, r7
  4004be:	bd90      	pop	{r4, r7, pc}
  4004c0:	20002eb8 	.word	0x20002eb8
  4004c4:	0040a329 	.word	0x0040a329
  4004c8:	0040c344 	.word	0x0040c344
  4004cc:	00408c81 	.word	0x00408c81
  4004d0:	0040544d 	.word	0x0040544d

004004d4 <inv_icm426xx_get_time_us>:

/*
 * Icm426xx driver needs to get time in us. Let's give its implementation here.
 */
uint64_t inv_icm426xx_get_time_us(void)
{
  4004d4:	b598      	push	{r3, r4, r7, lr}
  4004d6:	af00      	add	r7, sp, #0
#if USE_CLK_IN
	return rtc_timer_get_time_us();
#else
	return inv_timer_get_counter(TIMEBASE_TIMER);
  4004d8:	2000      	movs	r0, #0
  4004da:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <inv_icm426xx_get_time_us+0x14>)
  4004dc:	4798      	blx	r3
  4004de:	4603      	mov	r3, r0
  4004e0:	460c      	mov	r4, r1
#endif
}
  4004e2:	4618      	mov	r0, r3
  4004e4:	4621      	mov	r1, r4
  4004e6:	bd98      	pop	{r3, r4, r7, pc}
  4004e8:	00404159 	.word	0x00404159

004004ec <inv_icm426xx_sleep_us>:
/*
 * Icm426xx driver needs a sleep feature from external device. Thus inv_icm426xx_sleep_us
 * is defined as extern symbol in driver. Let's give its implementation here.
 */
void inv_icm426xx_sleep_us(uint32_t us)
{
  4004ec:	b580      	push	{r7, lr}
  4004ee:	b082      	sub	sp, #8
  4004f0:	af00      	add	r7, sp, #0
  4004f2:	6078      	str	r0, [r7, #4]
	inv_delay_us(us);
  4004f4:	6878      	ldr	r0, [r7, #4]
  4004f6:	4b03      	ldr	r3, [pc, #12]	; (400504 <inv_icm426xx_sleep_us+0x18>)
  4004f8:	4798      	blx	r3
}
  4004fa:	bf00      	nop
  4004fc:	3708      	adds	r7, #8
  4004fe:	46bd      	mov	sp, r7
  400500:	bd80      	pop	{r7, pc}
  400502:	bf00      	nop
  400504:	00402a25 	.word	0x00402a25

00400508 <config_uart>:
/* I2C address for Ak09915 */
#define AK_I2C_ADDR      0x0E


void config_uart(inv_uart_num_t log_uart_id)
{
  400508:	b580      	push	{r7, lr}
  40050a:	b086      	sub	sp, #24
  40050c:	af00      	add	r7, sp, #0
  40050e:	4603      	mov	r3, r0
  400510:	71fb      	strb	r3, [r7, #7]
	inv_uart_mngr_init_struct_t uart_mngr_config;
	
	uart_mngr_config.uart_num = log_uart_id;
  400512:	79fb      	ldrb	r3, [r7, #7]
  400514:	733b      	strb	r3, [r7, #12]
	uart_mngr_config.baudrate = 921600;
  400516:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
  40051a:	613b      	str	r3, [r7, #16]
	uart_mngr_config.flow_ctrl = INV_UART_FLOW_CONTROL_NONE;
  40051c:	2300      	movs	r3, #0
  40051e:	753b      	strb	r3, [r7, #20]
	inv_uart_mngr_init(&uart_mngr_config);
  400520:	f107 030c 	add.w	r3, r7, #12
  400524:	4618      	mov	r0, r3
  400526:	4b03      	ldr	r3, [pc, #12]	; (400534 <config_uart+0x2c>)
  400528:	4798      	blx	r3
}
  40052a:	bf00      	nop
  40052c:	3718      	adds	r7, #24
  40052e:	46bd      	mov	sp, r7
  400530:	bd80      	pop	{r7, pc}
  400532:	bf00      	nop
  400534:	00405399 	.word	0x00405399

00400538 <inv_io_hal_init>:
/******************************************************/
/* Low-level serial interface function implementation */
/******************************************************/

int inv_io_hal_init(struct inv_icm426xx_serif * serif)
{
  400538:	b580      	push	{r7, lr}
  40053a:	b082      	sub	sp, #8
  40053c:	af00      	add	r7, sp, #0
  40053e:	6078      	str	r0, [r7, #4]
	switch (serif->serif_type) {
  400540:	687b      	ldr	r3, [r7, #4]
  400542:	7e1b      	ldrb	r3, [r3, #24]
  400544:	2b00      	cmp	r3, #0
  400546:	d006      	beq.n	400556 <inv_io_hal_init+0x1e>
  400548:	2b01      	cmp	r3, #1
  40054a:	d107      	bne.n	40055c <inv_io_hal_init+0x24>
			/* To avoid SPI disturbance on ICM DB, on-chip ICM is forced to SPI by doing a dummy-write*/
			inv_spi_master_init(INV_SPI_ONBOARD, 6*1000*1000);
			/* Write to register MPUREG_WHO_AM_I */
			inv_spi_master_write_register(INV_SPI_ONBOARD, 0x76, 1, &dummy);
#endif
			inv_spi_master_init(INV_SPI_AP, 6*1000*1000);
  40054c:	4907      	ldr	r1, [pc, #28]	; (40056c <inv_io_hal_init+0x34>)
  40054e:	2001      	movs	r0, #1
  400550:	4b07      	ldr	r3, [pc, #28]	; (400570 <inv_io_hal_init+0x38>)
  400552:	4798      	blx	r3
			break;
  400554:	e005      	b.n	400562 <inv_io_hal_init+0x2a>
		}

		case ICM426XX_UI_I2C:
			/* Set I2C clock is 400kHz by default */
			inv_i2c_master_init();
  400556:	4b07      	ldr	r3, [pc, #28]	; (400574 <inv_io_hal_init+0x3c>)
  400558:	4798      	blx	r3
			break;
  40055a:	e002      	b.n	400562 <inv_io_hal_init+0x2a>
		default:
			return -1;
  40055c:	f04f 33ff 	mov.w	r3, #4294967295
  400560:	e000      	b.n	400564 <inv_io_hal_init+0x2c>
	}

	return 0;
  400562:	2300      	movs	r3, #0
}
  400564:	4618      	mov	r0, r3
  400566:	3708      	adds	r7, #8
  400568:	46bd      	mov	sp, r7
  40056a:	bd80      	pop	{r7, pc}
  40056c:	005b8d80 	.word	0x005b8d80
  400570:	004034f9 	.word	0x004034f9
  400574:	00402ebd 	.word	0x00402ebd

00400578 <inv_io_hal_read_reg>:
			return -1;
	}
}

int inv_io_hal_read_reg(struct inv_icm426xx_serif * serif, uint8_t reg, uint8_t * rbuffer, uint32_t rlen)
{
  400578:	b590      	push	{r4, r7, lr}
  40057a:	b085      	sub	sp, #20
  40057c:	af00      	add	r7, sp, #0
  40057e:	60f8      	str	r0, [r7, #12]
  400580:	607a      	str	r2, [r7, #4]
  400582:	603b      	str	r3, [r7, #0]
  400584:	460b      	mov	r3, r1
  400586:	72fb      	strb	r3, [r7, #11]
	switch (serif->serif_type) {
  400588:	68fb      	ldr	r3, [r7, #12]
  40058a:	7e1b      	ldrb	r3, [r3, #24]
  40058c:	2b00      	cmp	r3, #0
  40058e:	d00e      	beq.n	4005ae <inv_io_hal_read_reg+0x36>
  400590:	2b01      	cmp	r3, #1
  400592:	d118      	bne.n	4005c6 <inv_io_hal_read_reg+0x4e>
		case ICM426XX_UI_SPI4:
			return inv_spi_master_read_register(INV_SPI_AP, reg, rlen, rbuffer);
  400594:	683b      	ldr	r3, [r7, #0]
  400596:	b29a      	uxth	r2, r3
  400598:	7af9      	ldrb	r1, [r7, #11]
  40059a:	687b      	ldr	r3, [r7, #4]
  40059c:	2001      	movs	r0, #1
  40059e:	4c0d      	ldr	r4, [pc, #52]	; (4005d4 <inv_io_hal_read_reg+0x5c>)
  4005a0:	47a0      	blx	r4
  4005a2:	4603      	mov	r3, r0
  4005a4:	e011      	b.n	4005ca <inv_io_hal_read_reg+0x52>
		case ICM426XX_UI_I2C:
			while(inv_i2c_master_read_register(ICM_I2C_ADDR, reg, rlen, rbuffer)) {
				inv_delay_us(32000); // Loop in case of I2C timeout
  4005a6:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
  4005aa:	4b0b      	ldr	r3, [pc, #44]	; (4005d8 <inv_io_hal_read_reg+0x60>)
  4005ac:	4798      	blx	r3
			while(inv_i2c_master_read_register(ICM_I2C_ADDR, reg, rlen, rbuffer)) {
  4005ae:	683b      	ldr	r3, [r7, #0]
  4005b0:	b29a      	uxth	r2, r3
  4005b2:	7af9      	ldrb	r1, [r7, #11]
  4005b4:	687b      	ldr	r3, [r7, #4]
  4005b6:	2069      	movs	r0, #105	; 0x69
  4005b8:	4c08      	ldr	r4, [pc, #32]	; (4005dc <inv_io_hal_read_reg+0x64>)
  4005ba:	47a0      	blx	r4
  4005bc:	4603      	mov	r3, r0
  4005be:	2b00      	cmp	r3, #0
  4005c0:	d1f1      	bne.n	4005a6 <inv_io_hal_read_reg+0x2e>
			}
			return 0;
  4005c2:	2300      	movs	r3, #0
  4005c4:	e001      	b.n	4005ca <inv_io_hal_read_reg+0x52>
		default:
			return -1;
  4005c6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  4005ca:	4618      	mov	r0, r3
  4005cc:	3714      	adds	r7, #20
  4005ce:	46bd      	mov	sp, r7
  4005d0:	bd90      	pop	{r4, r7, pc}
  4005d2:	bf00      	nop
  4005d4:	00403a4d 	.word	0x00403a4d
  4005d8:	00402a25 	.word	0x00402a25
  4005dc:	00402fe5 	.word	0x00402fe5

004005e0 <inv_io_hal_write_reg>:

int inv_io_hal_write_reg(struct inv_icm426xx_serif * serif, uint8_t reg, const uint8_t * wbuffer, uint32_t wlen)
{
  4005e0:	b590      	push	{r4, r7, lr}
  4005e2:	b087      	sub	sp, #28
  4005e4:	af00      	add	r7, sp, #0
  4005e6:	60f8      	str	r0, [r7, #12]
  4005e8:	607a      	str	r2, [r7, #4]
  4005ea:	603b      	str	r3, [r7, #0]
  4005ec:	460b      	mov	r3, r1
  4005ee:	72fb      	strb	r3, [r7, #11]
	int rc;

	switch (serif->serif_type) {
  4005f0:	68fb      	ldr	r3, [r7, #12]
  4005f2:	7e1b      	ldrb	r3, [r3, #24]
  4005f4:	2b00      	cmp	r3, #0
  4005f6:	d024      	beq.n	400642 <inv_io_hal_write_reg+0x62>
  4005f8:	2b01      	cmp	r3, #1
  4005fa:	d12e      	bne.n	40065a <inv_io_hal_write_reg+0x7a>
		case ICM426XX_UI_SPI4:
			for(uint32_t i=0; i<wlen; i++) {
  4005fc:	2300      	movs	r3, #0
  4005fe:	617b      	str	r3, [r7, #20]
  400600:	e015      	b.n	40062e <inv_io_hal_write_reg+0x4e>
				rc = inv_spi_master_write_register(INV_SPI_AP, reg+i, 1, &wbuffer[i]);
  400602:	697b      	ldr	r3, [r7, #20]
  400604:	b2da      	uxtb	r2, r3
  400606:	7afb      	ldrb	r3, [r7, #11]
  400608:	4413      	add	r3, r2
  40060a:	b2d9      	uxtb	r1, r3
  40060c:	687a      	ldr	r2, [r7, #4]
  40060e:	697b      	ldr	r3, [r7, #20]
  400610:	4413      	add	r3, r2
  400612:	2201      	movs	r2, #1
  400614:	2001      	movs	r0, #1
  400616:	4c14      	ldr	r4, [pc, #80]	; (400668 <inv_io_hal_write_reg+0x88>)
  400618:	47a0      	blx	r4
  40061a:	4603      	mov	r3, r0
  40061c:	613b      	str	r3, [r7, #16]
				if(rc)
  40061e:	693b      	ldr	r3, [r7, #16]
  400620:	2b00      	cmp	r3, #0
  400622:	d001      	beq.n	400628 <inv_io_hal_write_reg+0x48>
					return rc;
  400624:	693b      	ldr	r3, [r7, #16]
  400626:	e01a      	b.n	40065e <inv_io_hal_write_reg+0x7e>
			for(uint32_t i=0; i<wlen; i++) {
  400628:	697b      	ldr	r3, [r7, #20]
  40062a:	3301      	adds	r3, #1
  40062c:	617b      	str	r3, [r7, #20]
  40062e:	697a      	ldr	r2, [r7, #20]
  400630:	683b      	ldr	r3, [r7, #0]
  400632:	429a      	cmp	r2, r3
  400634:	d3e5      	bcc.n	400602 <inv_io_hal_write_reg+0x22>
			}
			return 0;
  400636:	2300      	movs	r3, #0
  400638:	e011      	b.n	40065e <inv_io_hal_write_reg+0x7e>
		case ICM426XX_UI_I2C:
			while(inv_i2c_master_write_register(ICM_I2C_ADDR, reg, wlen, wbuffer)) {
				inv_delay_us(32000); // Loop in case of I2C timeout
  40063a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
  40063e:	4b0b      	ldr	r3, [pc, #44]	; (40066c <inv_io_hal_write_reg+0x8c>)
  400640:	4798      	blx	r3
			while(inv_i2c_master_write_register(ICM_I2C_ADDR, reg, wlen, wbuffer)) {
  400642:	683b      	ldr	r3, [r7, #0]
  400644:	b29a      	uxth	r2, r3
  400646:	7af9      	ldrb	r1, [r7, #11]
  400648:	687b      	ldr	r3, [r7, #4]
  40064a:	2069      	movs	r0, #105	; 0x69
  40064c:	4c08      	ldr	r4, [pc, #32]	; (400670 <inv_io_hal_write_reg+0x90>)
  40064e:	47a0      	blx	r4
  400650:	4603      	mov	r3, r0
  400652:	2b00      	cmp	r3, #0
  400654:	d1f1      	bne.n	40063a <inv_io_hal_write_reg+0x5a>
			}
			return 0;
  400656:	2300      	movs	r3, #0
  400658:	e001      	b.n	40065e <inv_io_hal_write_reg+0x7e>
		default:
			return -1;
  40065a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
  40065e:	4618      	mov	r0, r3
  400660:	371c      	adds	r7, #28
  400662:	46bd      	mov	sp, r7
  400664:	bd90      	pop	{r4, r7, pc}
  400666:	bf00      	nop
  400668:	004038f9 	.word	0x004038f9
  40066c:	00402a25 	.word	0x00402a25
  400670:	00402f79 	.word	0x00402f79

00400674 <SetupInvDevice>:
/* --------------------------------------------------------------------------------------
 *  Functions definition
 * -------------------------------------------------------------------------------------- */

int SetupInvDevice(struct inv_icm426xx_serif * icm_serif)
{
  400674:	b590      	push	{r4, r7, lr}
  400676:	b085      	sub	sp, #20
  400678:	af00      	add	r7, sp, #0
  40067a:	6078      	str	r0, [r7, #4]
	int rc = 0;
  40067c:	2300      	movs	r3, #0
  40067e:	60fb      	str	r3, [r7, #12]
	uint8_t who_am_i;

	/* Initialize device */
	INV_MSG(INV_MSG_LEVEL_INFO, "Initialize Icm426xx");
  400680:	4923      	ldr	r1, [pc, #140]	; (400710 <SetupInvDevice+0x9c>)
  400682:	2003      	movs	r0, #3
  400684:	4b23      	ldr	r3, [pc, #140]	; (400714 <SetupInvDevice+0xa0>)
  400686:	4798      	blx	r3
	
	rc = inv_icm426xx_init(&icm_driver, icm_serif, HandleInvDeviceDataRegisters);
  400688:	4a23      	ldr	r2, [pc, #140]	; (400718 <SetupInvDevice+0xa4>)
  40068a:	6879      	ldr	r1, [r7, #4]
  40068c:	4823      	ldr	r0, [pc, #140]	; (40071c <SetupInvDevice+0xa8>)
  40068e:	4b24      	ldr	r3, [pc, #144]	; (400720 <SetupInvDevice+0xac>)
  400690:	4798      	blx	r3
  400692:	60f8      	str	r0, [r7, #12]
	/* Disable fifo usage, data will be read from sensors registers*/
	rc |= inv_icm426xx_configure_fifo(&icm_driver, INV_ICM426XX_FIFO_DISABLED);
  400694:	2100      	movs	r1, #0
  400696:	4821      	ldr	r0, [pc, #132]	; (40071c <SetupInvDevice+0xa8>)
  400698:	4b22      	ldr	r3, [pc, #136]	; (400724 <SetupInvDevice+0xb0>)
  40069a:	4798      	blx	r3
  40069c:	4602      	mov	r2, r0
  40069e:	68fb      	ldr	r3, [r7, #12]
  4006a0:	4313      	orrs	r3, r2
  4006a2:	60fb      	str	r3, [r7, #12]
	if(rc != INV_ERROR_SUCCESS) {
  4006a4:	68fb      	ldr	r3, [r7, #12]
  4006a6:	2b00      	cmp	r3, #0
  4006a8:	d005      	beq.n	4006b6 <SetupInvDevice+0x42>
		INV_MSG(INV_MSG_LEVEL_ERROR, "!!! ERROR : failed to initialize Icm426xx.");
  4006aa:	491f      	ldr	r1, [pc, #124]	; (400728 <SetupInvDevice+0xb4>)
  4006ac:	2001      	movs	r0, #1
  4006ae:	4b19      	ldr	r3, [pc, #100]	; (400714 <SetupInvDevice+0xa0>)
  4006b0:	4798      	blx	r3
		return rc;
  4006b2:	68fb      	ldr	r3, [r7, #12]
  4006b4:	e027      	b.n	400706 <SetupInvDevice+0x92>
	}	
	
	/* Check WHOAMI */
	INV_MSG(INV_MSG_LEVEL_INFO, "Check Icm426xx whoami value");
  4006b6:	491d      	ldr	r1, [pc, #116]	; (40072c <SetupInvDevice+0xb8>)
  4006b8:	2003      	movs	r0, #3
  4006ba:	4b16      	ldr	r3, [pc, #88]	; (400714 <SetupInvDevice+0xa0>)
  4006bc:	4798      	blx	r3
	
	rc = inv_icm426xx_get_who_am_i(&icm_driver, &who_am_i);
  4006be:	f107 030b 	add.w	r3, r7, #11
  4006c2:	4619      	mov	r1, r3
  4006c4:	4815      	ldr	r0, [pc, #84]	; (40071c <SetupInvDevice+0xa8>)
  4006c6:	4b1a      	ldr	r3, [pc, #104]	; (400730 <SetupInvDevice+0xbc>)
  4006c8:	4798      	blx	r3
  4006ca:	60f8      	str	r0, [r7, #12]
	if(rc != INV_ERROR_SUCCESS) {
  4006cc:	68fb      	ldr	r3, [r7, #12]
  4006ce:	2b00      	cmp	r3, #0
  4006d0:	d005      	beq.n	4006de <SetupInvDevice+0x6a>
		INV_MSG(INV_MSG_LEVEL_ERROR, "!!! ERROR : failed to read Icm426xx whoami value.");
  4006d2:	4918      	ldr	r1, [pc, #96]	; (400734 <SetupInvDevice+0xc0>)
  4006d4:	2001      	movs	r0, #1
  4006d6:	4b0f      	ldr	r3, [pc, #60]	; (400714 <SetupInvDevice+0xa0>)
  4006d8:	4798      	blx	r3
		return rc;
  4006da:	68fb      	ldr	r3, [r7, #12]
  4006dc:	e013      	b.n	400706 <SetupInvDevice+0x92>
	}
	
	if(who_am_i != ICM_WHOAMI) {
  4006de:	7afb      	ldrb	r3, [r7, #11]
  4006e0:	2b42      	cmp	r3, #66	; 0x42
  4006e2:	d009      	beq.n	4006f8 <SetupInvDevice+0x84>
		INV_MSG(INV_MSG_LEVEL_ERROR, "!!! ERROR :  bad WHOAMI value. Got 0x%02x (expected: 0x%02x)", who_am_i, ICM_WHOAMI);
  4006e4:	7afb      	ldrb	r3, [r7, #11]
  4006e6:	461a      	mov	r2, r3
  4006e8:	2342      	movs	r3, #66	; 0x42
  4006ea:	4913      	ldr	r1, [pc, #76]	; (400738 <SetupInvDevice+0xc4>)
  4006ec:	2001      	movs	r0, #1
  4006ee:	4c09      	ldr	r4, [pc, #36]	; (400714 <SetupInvDevice+0xa0>)
  4006f0:	47a0      	blx	r4
		return INV_ERROR;
  4006f2:	f04f 33ff 	mov.w	r3, #4294967295
  4006f6:	e006      	b.n	400706 <SetupInvDevice+0x92>
	}

	RINGBUFFER_CLEAR(&timestamp_buffer);
  4006f8:	4b10      	ldr	r3, [pc, #64]	; (40073c <SetupInvDevice+0xc8>)
  4006fa:	2200      	movs	r2, #0
  4006fc:	801a      	strh	r2, [r3, #0]
  4006fe:	4b0f      	ldr	r3, [pc, #60]	; (40073c <SetupInvDevice+0xc8>)
  400700:	2200      	movs	r2, #0
  400702:	805a      	strh	r2, [r3, #2]
	return rc;
  400704:	68fb      	ldr	r3, [r7, #12]
}
  400706:	4618      	mov	r0, r3
  400708:	3714      	adds	r7, #20
  40070a:	46bd      	mov	sp, r7
  40070c:	bd90      	pop	{r4, r7, pc}
  40070e:	bf00      	nop
  400710:	0040c348 	.word	0x0040c348
  400714:	004056ad 	.word	0x004056ad
  400718:	00400845 	.word	0x00400845
  40071c:	20002fb8 	.word	0x20002fb8
  400720:	00400a01 	.word	0x00400a01
  400724:	00401e0d 	.word	0x00401e0d
  400728:	0040c35c 	.word	0x0040c35c
  40072c:	0040c388 	.word	0x0040c388
  400730:	00400c6d 	.word	0x00400c6d
  400734:	0040c3a4 	.word	0x0040c3a4
  400738:	0040c3d8 	.word	0x0040c3d8
  40073c:	20004488 	.word	0x20004488

00400740 <ConfigureInvDevice>:
                       ICM426XX_ACCEL_CONFIG0_FS_SEL_t acc_fsr_g,
                       ICM426XX_GYRO_CONFIG0_FS_SEL_t gyr_fsr_dps,
                       ICM426XX_ACCEL_CONFIG0_ODR_t acc_freq,
                       ICM426XX_GYRO_CONFIG0_ODR_t gyr_freq,
                       uint8_t is_rtc_mode)
{
  400740:	b590      	push	{r4, r7, lr}
  400742:	b085      	sub	sp, #20
  400744:	af00      	add	r7, sp, #0
  400746:	4604      	mov	r4, r0
  400748:	4608      	mov	r0, r1
  40074a:	4611      	mov	r1, r2
  40074c:	461a      	mov	r2, r3
  40074e:	4623      	mov	r3, r4
  400750:	71fb      	strb	r3, [r7, #7]
  400752:	4603      	mov	r3, r0
  400754:	71bb      	strb	r3, [r7, #6]
  400756:	460b      	mov	r3, r1
  400758:	717b      	strb	r3, [r7, #5]
  40075a:	4613      	mov	r3, r2
  40075c:	713b      	strb	r3, [r7, #4]
	int rc = 0;
  40075e:	2300      	movs	r3, #0
  400760:	60fb      	str	r3, [r7, #12]
	
	rc |= inv_icm426xx_enable_clkin_rtc(&icm_driver, is_rtc_mode);
  400762:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  400766:	4619      	mov	r1, r3
  400768:	4826      	ldr	r0, [pc, #152]	; (400804 <ConfigureInvDevice+0xc4>)
  40076a:	4b27      	ldr	r3, [pc, #156]	; (400808 <ConfigureInvDevice+0xc8>)
  40076c:	4798      	blx	r3
  40076e:	4602      	mov	r2, r0
  400770:	68fb      	ldr	r3, [r7, #12]
  400772:	4313      	orrs	r3, r2
  400774:	60fb      	str	r3, [r7, #12]

	rc |= inv_icm426xx_set_accel_fsr(&icm_driver, acc_fsr_g);
  400776:	79bb      	ldrb	r3, [r7, #6]
  400778:	4619      	mov	r1, r3
  40077a:	4822      	ldr	r0, [pc, #136]	; (400804 <ConfigureInvDevice+0xc4>)
  40077c:	4b23      	ldr	r3, [pc, #140]	; (40080c <ConfigureInvDevice+0xcc>)
  40077e:	4798      	blx	r3
  400780:	4602      	mov	r2, r0
  400782:	68fb      	ldr	r3, [r7, #12]
  400784:	4313      	orrs	r3, r2
  400786:	60fb      	str	r3, [r7, #12]
	rc |= inv_icm426xx_set_gyro_fsr(&icm_driver, gyr_fsr_dps);
  400788:	797b      	ldrb	r3, [r7, #5]
  40078a:	4619      	mov	r1, r3
  40078c:	481d      	ldr	r0, [pc, #116]	; (400804 <ConfigureInvDevice+0xc4>)
  40078e:	4b20      	ldr	r3, [pc, #128]	; (400810 <ConfigureInvDevice+0xd0>)
  400790:	4798      	blx	r3
  400792:	4602      	mov	r2, r0
  400794:	68fb      	ldr	r3, [r7, #12]
  400796:	4313      	orrs	r3, r2
  400798:	60fb      	str	r3, [r7, #12]
	
	rc |= inv_icm426xx_set_accel_frequency(&icm_driver, acc_freq);
  40079a:	793b      	ldrb	r3, [r7, #4]
  40079c:	4619      	mov	r1, r3
  40079e:	4819      	ldr	r0, [pc, #100]	; (400804 <ConfigureInvDevice+0xc4>)
  4007a0:	4b1c      	ldr	r3, [pc, #112]	; (400814 <ConfigureInvDevice+0xd4>)
  4007a2:	4798      	blx	r3
  4007a4:	4602      	mov	r2, r0
  4007a6:	68fb      	ldr	r3, [r7, #12]
  4007a8:	4313      	orrs	r3, r2
  4007aa:	60fb      	str	r3, [r7, #12]
	rc |= inv_icm426xx_set_gyro_frequency(&icm_driver, gyr_freq);
  4007ac:	f897 3020 	ldrb.w	r3, [r7, #32]
  4007b0:	4619      	mov	r1, r3
  4007b2:	4814      	ldr	r0, [pc, #80]	; (400804 <ConfigureInvDevice+0xc4>)
  4007b4:	4b18      	ldr	r3, [pc, #96]	; (400818 <ConfigureInvDevice+0xd8>)
  4007b6:	4798      	blx	r3
  4007b8:	4602      	mov	r2, r0
  4007ba:	68fb      	ldr	r3, [r7, #12]
  4007bc:	4313      	orrs	r3, r2
  4007be:	60fb      	str	r3, [r7, #12]
	
	if (is_low_noise_mode)
  4007c0:	79fb      	ldrb	r3, [r7, #7]
  4007c2:	2b00      	cmp	r3, #0
  4007c4:	d007      	beq.n	4007d6 <ConfigureInvDevice+0x96>
		rc |= inv_icm426xx_enable_accel_low_noise_mode(&icm_driver);
  4007c6:	480f      	ldr	r0, [pc, #60]	; (400804 <ConfigureInvDevice+0xc4>)
  4007c8:	4b14      	ldr	r3, [pc, #80]	; (40081c <ConfigureInvDevice+0xdc>)
  4007ca:	4798      	blx	r3
  4007cc:	4602      	mov	r2, r0
  4007ce:	68fb      	ldr	r3, [r7, #12]
  4007d0:	4313      	orrs	r3, r2
  4007d2:	60fb      	str	r3, [r7, #12]
  4007d4:	e006      	b.n	4007e4 <ConfigureInvDevice+0xa4>
	else
		rc |= inv_icm426xx_enable_accel_low_power_mode(&icm_driver);
  4007d6:	480b      	ldr	r0, [pc, #44]	; (400804 <ConfigureInvDevice+0xc4>)
  4007d8:	4b11      	ldr	r3, [pc, #68]	; (400820 <ConfigureInvDevice+0xe0>)
  4007da:	4798      	blx	r3
  4007dc:	4602      	mov	r2, r0
  4007de:	68fb      	ldr	r3, [r7, #12]
  4007e0:	4313      	orrs	r3, r2
  4007e2:	60fb      	str	r3, [r7, #12]
	
	rc |= inv_icm426xx_enable_gyro_low_noise_mode(&icm_driver);
  4007e4:	4807      	ldr	r0, [pc, #28]	; (400804 <ConfigureInvDevice+0xc4>)
  4007e6:	4b0f      	ldr	r3, [pc, #60]	; (400824 <ConfigureInvDevice+0xe4>)
  4007e8:	4798      	blx	r3
  4007ea:	4602      	mov	r2, r0
  4007ec:	68fb      	ldr	r3, [r7, #12]
  4007ee:	4313      	orrs	r3, r2
  4007f0:	60fb      	str	r3, [r7, #12]

	/* Wait Max of ICM426XX_GYR_STARTUP_TIME_US and ICM426XX_ACC_STARTUP_TIME_US*/
	(ICM426XX_GYR_STARTUP_TIME_US > ICM426XX_ACC_STARTUP_TIME_US) ? inv_icm426xx_sleep_us(ICM426XX_GYR_STARTUP_TIME_US) : inv_icm426xx_sleep_us(ICM426XX_ACC_STARTUP_TIME_US);
  4007f2:	f64e 2060 	movw	r0, #60000	; 0xea60
  4007f6:	4b0c      	ldr	r3, [pc, #48]	; (400828 <ConfigureInvDevice+0xe8>)
  4007f8:	4798      	blx	r3
		
	return rc;
  4007fa:	68fb      	ldr	r3, [r7, #12]
}
  4007fc:	4618      	mov	r0, r3
  4007fe:	3714      	adds	r7, #20
  400800:	46bd      	mov	sp, r7
  400802:	bd90      	pop	{r4, r7, pc}
  400804:	20002fb8 	.word	0x20002fb8
  400808:	00401d85 	.word	0x00401d85
  40080c:	00401cbd 	.word	0x00401cbd
  400810:	00401d21 	.word	0x00401d21
  400814:	00401bb9 	.word	0x00401bb9
  400818:	00401c59 	.word	0x00401c59
  40081c:	00400fa9 	.word	0x00400fa9
  400820:	00400cfd 	.word	0x00400cfd
  400824:	00401189 	.word	0x00401189
  400828:	004004ed 	.word	0x004004ed

0040082c <GetDataFromInvDevice>:

int GetDataFromInvDevice(void)
{
  40082c:	b580      	push	{r7, lr}
  40082e:	af00      	add	r7, sp, #0
	/*
	 * Read data from registers. Callback defined at init time (i.e. 
	 * HandleInvDeviceDataRegisters) will be called for each valid packet extracted from 
	 * FIFO.
	 */
	return inv_icm426xx_get_data_from_registers(&icm_driver);
  400830:	4802      	ldr	r0, [pc, #8]	; (40083c <GetDataFromInvDevice+0x10>)
  400832:	4b03      	ldr	r3, [pc, #12]	; (400840 <GetDataFromInvDevice+0x14>)
  400834:	4798      	blx	r3
  400836:	4603      	mov	r3, r0
}
  400838:	4618      	mov	r0, r3
  40083a:	bd80      	pop	{r7, pc}
  40083c:	20002fb8 	.word	0x20002fb8
  400840:	00401989 	.word	0x00401989

00400844 <HandleInvDeviceDataRegisters>:

void HandleInvDeviceDataRegisters(inv_icm426xx_sensor_event_t * event)
{
  400844:	b5f0      	push	{r4, r5, r6, r7, lr}
  400846:	b08d      	sub	sp, #52	; 0x34
  400848:	af06      	add	r7, sp, #24
  40084a:	6078      	str	r0, [r7, #4]
	char rchar = inv_uart_mngr_getc(INV_UART_SENSOR_CTRL);
  40084c:	2000      	movs	r0, #0
  40084e:	4b59      	ldr	r3, [pc, #356]	; (4009b4 <HandleInvDeviceDataRegisters+0x170>)
  400850:	4798      	blx	r3
  400852:	4603      	mov	r3, r0
  400854:	75fb      	strb	r3, [r7, #23]
	// INV_MSG(INV_MSG_LEVEL_INFO, "Input : %c\n", rchar);
	if(rchar != 's')
  400856:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40085a:	2b73      	cmp	r3, #115	; 0x73
  40085c:	f040 80a5 	bne.w	4009aa <HandleInvDeviceDataRegisters+0x166>
		return;

	uint64_t irq_timestamp = 0;	
  400860:	f04f 0300 	mov.w	r3, #0
  400864:	f04f 0400 	mov.w	r4, #0
  400868:	e9c7 3402 	strd	r3, r4, [r7, #8]
	 * Extract the timestamp that was buffered when current packet IRQ fired. See 
	 * ext_interrupt_cb() in main.c for more details.
	 * As timestamp buffer is filled in interrupt handler, we should pop it with
	 * interrupts disabled to avoid any concurrent access.
	 */
	inv_disable_irq();
  40086c:	4b52      	ldr	r3, [pc, #328]	; (4009b8 <HandleInvDeviceDataRegisters+0x174>)
  40086e:	4798      	blx	r3
	if (!RINGBUFFER_EMPTY(&timestamp_buffer))
  400870:	4b52      	ldr	r3, [pc, #328]	; (4009bc <HandleInvDeviceDataRegisters+0x178>)
  400872:	885a      	ldrh	r2, [r3, #2]
  400874:	4b51      	ldr	r3, [pc, #324]	; (4009bc <HandleInvDeviceDataRegisters+0x178>)
  400876:	881b      	ldrh	r3, [r3, #0]
  400878:	429a      	cmp	r2, r3
  40087a:	d011      	beq.n	4008a0 <HandleInvDeviceDataRegisters+0x5c>
		RINGBUFFER_POP(&timestamp_buffer, &irq_timestamp);
  40087c:	4b4f      	ldr	r3, [pc, #316]	; (4009bc <HandleInvDeviceDataRegisters+0x178>)
  40087e:	881b      	ldrh	r3, [r3, #0]
  400880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400884:	4a4d      	ldr	r2, [pc, #308]	; (4009bc <HandleInvDeviceDataRegisters+0x178>)
  400886:	3301      	adds	r3, #1
  400888:	00db      	lsls	r3, r3, #3
  40088a:	4413      	add	r3, r2
  40088c:	e9d3 3400 	ldrd	r3, r4, [r3]
  400890:	e9c7 3402 	strd	r3, r4, [r7, #8]
  400894:	4b49      	ldr	r3, [pc, #292]	; (4009bc <HandleInvDeviceDataRegisters+0x178>)
  400896:	881b      	ldrh	r3, [r3, #0]
  400898:	3301      	adds	r3, #1
  40089a:	b29a      	uxth	r2, r3
  40089c:	4b47      	ldr	r3, [pc, #284]	; (4009bc <HandleInvDeviceDataRegisters+0x178>)
  40089e:	801a      	strh	r2, [r3, #0]
	inv_enable_irq();
  4008a0:	4b47      	ldr	r3, [pc, #284]	; (4009c0 <HandleInvDeviceDataRegisters+0x17c>)
  4008a2:	4798      	blx	r3
		INV_MSG(INV_MSG_LEVEL_INFO, "%u: %d, %d, %d, %d, NA, NA, NA", (uint32_t)irq_timestamp,
			event->accel[0], event->accel[1], event->accel[2], 
			event->temperature);
	*/

	if((event->accel[0] != INVALID_VALUE_FIFO) && (event->gyro[0] != INVALID_VALUE_FIFO)){
  4008a4:	687b      	ldr	r3, [r7, #4]
  4008a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  4008aa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  4008ae:	d030      	beq.n	400912 <HandleInvDeviceDataRegisters+0xce>
  4008b0:	687b      	ldr	r3, [r7, #4]
  4008b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  4008b6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  4008ba:	d02a      	beq.n	400912 <HandleInvDeviceDataRegisters+0xce>
		INV_MSG(INV_MSG_LEVEL_INFO, "%u %d %d %d %d %d %d %d", (uint32_t)irq_timestamp,
  4008bc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  4008c0:	461e      	mov	r6, r3
  4008c2:	687b      	ldr	r3, [r7, #4]
  4008c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  4008c8:	469e      	mov	lr, r3
  4008ca:	687b      	ldr	r3, [r7, #4]
  4008cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  4008d0:	461a      	mov	r2, r3
  4008d2:	687b      	ldr	r3, [r7, #4]
  4008d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
  4008d8:	4619      	mov	r1, r3
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  4008e0:	4618      	mov	r0, r3
  4008e2:	687b      	ldr	r3, [r7, #4]
  4008e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  4008e8:	461c      	mov	r4, r3
  4008ea:	687b      	ldr	r3, [r7, #4]
  4008ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  4008f0:	461d      	mov	r5, r3
  4008f2:	687b      	ldr	r3, [r7, #4]
  4008f4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  4008f8:	9305      	str	r3, [sp, #20]
  4008fa:	9504      	str	r5, [sp, #16]
  4008fc:	9403      	str	r4, [sp, #12]
  4008fe:	9002      	str	r0, [sp, #8]
  400900:	9101      	str	r1, [sp, #4]
  400902:	9200      	str	r2, [sp, #0]
  400904:	4673      	mov	r3, lr
  400906:	4632      	mov	r2, r6
  400908:	492e      	ldr	r1, [pc, #184]	; (4009c4 <HandleInvDeviceDataRegisters+0x180>)
  40090a:	2003      	movs	r0, #3
  40090c:	4c2e      	ldr	r4, [pc, #184]	; (4009c8 <HandleInvDeviceDataRegisters+0x184>)
  40090e:	47a0      	blx	r4
  400910:	e04c      	b.n	4009ac <HandleInvDeviceDataRegisters+0x168>
			event->accel[0], event->accel[1], event->accel[2], 
			event->temperature,
			event->gyro[0], event->gyro[1], event->gyro[2]);
	}else if(event->gyro[0] != INVALID_VALUE_FIFO){
  400912:	687b      	ldr	r3, [r7, #4]
  400914:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  400918:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  40091c:	d01b      	beq.n	400956 <HandleInvDeviceDataRegisters+0x112>
		INV_MSG(INV_MSG_LEVEL_INFO, "%u NA NA NA %d %d %d %d", (uint32_t)irq_timestamp, 
  40091e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  400922:	4618      	mov	r0, r3
  400924:	687b      	ldr	r3, [r7, #4]
  400926:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  40092a:	461c      	mov	r4, r3
  40092c:	687b      	ldr	r3, [r7, #4]
  40092e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  400932:	461a      	mov	r2, r3
  400934:	687b      	ldr	r3, [r7, #4]
  400936:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
  40093a:	4619      	mov	r1, r3
  40093c:	687b      	ldr	r3, [r7, #4]
  40093e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  400942:	9302      	str	r3, [sp, #8]
  400944:	9101      	str	r1, [sp, #4]
  400946:	9200      	str	r2, [sp, #0]
  400948:	4623      	mov	r3, r4
  40094a:	4602      	mov	r2, r0
  40094c:	491f      	ldr	r1, [pc, #124]	; (4009cc <HandleInvDeviceDataRegisters+0x188>)
  40094e:	2003      	movs	r0, #3
  400950:	4c1d      	ldr	r4, [pc, #116]	; (4009c8 <HandleInvDeviceDataRegisters+0x184>)
  400952:	47a0      	blx	r4
  400954:	e02a      	b.n	4009ac <HandleInvDeviceDataRegisters+0x168>
			event->temperature,
			event->gyro[0], event->gyro[1], event->gyro[2]);
	}else if (event->accel[0] != INVALID_VALUE_FIFO){
  400956:	687b      	ldr	r3, [r7, #4]
  400958:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  40095c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  400960:	d01b      	beq.n	40099a <HandleInvDeviceDataRegisters+0x156>
		INV_MSG(INV_MSG_LEVEL_INFO, "%u %d %d %d %d NA NA NA", (uint32_t)irq_timestamp,
  400962:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  400966:	4618      	mov	r0, r3
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  40096e:	461c      	mov	r4, r3
  400970:	687b      	ldr	r3, [r7, #4]
  400972:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  400976:	461a      	mov	r2, r3
  400978:	687b      	ldr	r3, [r7, #4]
  40097a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
  40097e:	4619      	mov	r1, r3
  400980:	687b      	ldr	r3, [r7, #4]
  400982:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  400986:	9302      	str	r3, [sp, #8]
  400988:	9101      	str	r1, [sp, #4]
  40098a:	9200      	str	r2, [sp, #0]
  40098c:	4623      	mov	r3, r4
  40098e:	4602      	mov	r2, r0
  400990:	490f      	ldr	r1, [pc, #60]	; (4009d0 <HandleInvDeviceDataRegisters+0x18c>)
  400992:	2003      	movs	r0, #3
  400994:	4c0c      	ldr	r4, [pc, #48]	; (4009c8 <HandleInvDeviceDataRegisters+0x184>)
  400996:	47a0      	blx	r4
  400998:	e008      	b.n	4009ac <HandleInvDeviceDataRegisters+0x168>
			event->accel[0], event->accel[1], event->accel[2], 
			event->temperature);
	}else{
		INV_MSG(INV_MSG_LEVEL_INFO, "%u NA NA NA NA NA NA NA", (uint32_t)irq_timestamp);
  40099a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  40099e:	461a      	mov	r2, r3
  4009a0:	490c      	ldr	r1, [pc, #48]	; (4009d4 <HandleInvDeviceDataRegisters+0x190>)
  4009a2:	2003      	movs	r0, #3
  4009a4:	4b08      	ldr	r3, [pc, #32]	; (4009c8 <HandleInvDeviceDataRegisters+0x184>)
  4009a6:	4798      	blx	r3
  4009a8:	e000      	b.n	4009ac <HandleInvDeviceDataRegisters+0x168>
		return;
  4009aa:	bf00      	nop
	}

  4009ac:	371c      	adds	r7, #28
  4009ae:	46bd      	mov	sp, r7
  4009b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4009b2:	bf00      	nop
  4009b4:	00405559 	.word	0x00405559
  4009b8:	00402911 	.word	0x00402911
  4009bc:	20004488 	.word	0x20004488
  4009c0:	00402939 	.word	0x00402939
  4009c4:	0040c418 	.word	0x0040c418
  4009c8:	004056ad 	.word	0x004056ad
  4009cc:	0040c430 	.word	0x0040c430
  4009d0:	0040c448 	.word	0x0040c448
  4009d4:	0040c460 	.word	0x0040c460

004009d8 <inv_icm426xx_set_reg_bank>:
static int inv_icm426xx_init_hardware_from_ui(struct inv_icm426xx * s);
static int inv_icm426xx_is_wu_osc_active(struct inv_icm426xx * s);
static void inv_icm426xx_format_data(const uint8_t endian, const uint8_t *in, uint16_t *out);

int inv_icm426xx_set_reg_bank(struct inv_icm426xx * s, uint8_t bank)
{
  4009d8:	b590      	push	{r4, r7, lr}
  4009da:	b083      	sub	sp, #12
  4009dc:	af00      	add	r7, sp, #0
  4009de:	6078      	str	r0, [r7, #4]
  4009e0:	460b      	mov	r3, r1
  4009e2:	70fb      	strb	r3, [r7, #3]
	return inv_icm426xx_write_reg(s, MPUREG_REG_BANK_SEL, 1, &bank);
  4009e4:	1cfb      	adds	r3, r7, #3
  4009e6:	2201      	movs	r2, #1
  4009e8:	2176      	movs	r1, #118	; 0x76
  4009ea:	6878      	ldr	r0, [r7, #4]
  4009ec:	4c03      	ldr	r4, [pc, #12]	; (4009fc <inv_icm426xx_set_reg_bank+0x24>)
  4009ee:	47a0      	blx	r4
  4009f0:	4603      	mov	r3, r0
}
  4009f2:	4618      	mov	r0, r3
  4009f4:	370c      	adds	r7, #12
  4009f6:	46bd      	mov	sp, r7
  4009f8:	bd90      	pop	{r4, r7, pc}
  4009fa:	bf00      	nop
  4009fc:	00402655 	.word	0x00402655

00400a00 <inv_icm426xx_init>:

int inv_icm426xx_init(struct inv_icm426xx * s, struct inv_icm426xx_serif * serif, void (*sensor_event_cb)(inv_icm426xx_sensor_event_t * event))
{
  400a00:	b5b0      	push	{r4, r5, r7, lr}
  400a02:	b086      	sub	sp, #24
  400a04:	af00      	add	r7, sp, #0
  400a06:	60f8      	str	r0, [r7, #12]
  400a08:	60b9      	str	r1, [r7, #8]
  400a0a:	607a      	str	r2, [r7, #4]
	int status = 0;
  400a0c:	2300      	movs	r3, #0
  400a0e:	617b      	str	r3, [r7, #20]

	memset(s, 0, sizeof(*s));
  400a10:	f44f 6208 	mov.w	r2, #2176	; 0x880
  400a14:	2100      	movs	r1, #0
  400a16:	68f8      	ldr	r0, [r7, #12]
  400a18:	4b22      	ldr	r3, [pc, #136]	; (400aa4 <inv_icm426xx_init+0xa4>)
  400a1a:	4798      	blx	r3
	
	s->transport.serif = *serif;
  400a1c:	68fa      	ldr	r2, [r7, #12]
  400a1e:	68bb      	ldr	r3, [r7, #8]
  400a20:	4614      	mov	r4, r2
  400a22:	461d      	mov	r5, r3
  400a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	/* Wait some time for ICM to be properly supplied */
	inv_icm426xx_sleep_us(3000);
  400a30:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400a34:	4b1c      	ldr	r3, [pc, #112]	; (400aa8 <inv_icm426xx_init+0xa8>)
  400a36:	4798      	blx	r3
	
	if((status |= inv_icm426xx_configure_serial_interface(s)) != 0 )
  400a38:	68f8      	ldr	r0, [r7, #12]
  400a3a:	4b1c      	ldr	r3, [pc, #112]	; (400aac <inv_icm426xx_init+0xac>)
  400a3c:	4798      	blx	r3
  400a3e:	4602      	mov	r2, r0
  400a40:	697b      	ldr	r3, [r7, #20]
  400a42:	4313      	orrs	r3, r2
  400a44:	617b      	str	r3, [r7, #20]
  400a46:	697b      	ldr	r3, [r7, #20]
  400a48:	2b00      	cmp	r3, #0
  400a4a:	d001      	beq.n	400a50 <inv_icm426xx_init+0x50>
		return status;
  400a4c:	697b      	ldr	r3, [r7, #20]
  400a4e:	e025      	b.n	400a9c <inv_icm426xx_init+0x9c>

	/* Register the callback to be executed each time inv_icm426xx_get_data_from_fifo extracts 
	 * a packet from fifo or inv_icm426xx_get_data_from_registers read data 
	 */
	s->sensor_event_cb = sensor_event_cb;
  400a50:	68fb      	ldr	r3, [r7, #12]
  400a52:	687a      	ldr	r2, [r7, #4]
  400a54:	625a      	str	r2, [r3, #36]	; 0x24
	
	/* initialize hardware */
	status |= inv_icm426xx_init_hardware_from_ui(s);
  400a56:	68f8      	ldr	r0, [r7, #12]
  400a58:	4b15      	ldr	r3, [pc, #84]	; (400ab0 <inv_icm426xx_init+0xb0>)
  400a5a:	4798      	blx	r3
  400a5c:	4602      	mov	r2, r0
  400a5e:	697b      	ldr	r3, [r7, #20]
  400a60:	4313      	orrs	r3, r2
  400a62:	617b      	str	r3, [r7, #20]
		
	/* First data are noisy after enabling sensor
	 * This variable keeps track of gyro start time. Set to UINT32_MAX at init 
	 */
	s->gyro_start_time_us = UINT32_MAX;
  400a64:	68fb      	ldr	r3, [r7, #12]
  400a66:	f603 0258 	addw	r2, r3, #2136	; 0x858
  400a6a:	f04f 33ff 	mov.w	r3, #4294967295
  400a6e:	f04f 0400 	mov.w	r4, #0
  400a72:	e9c2 3400 	strd	r3, r4, [r2]
	/* First data are noisy after enabling sensor
	 * This variable keeps track of accel start time. Set to UINT32_MAX at init 
	 */
	s->accel_start_time_us = UINT32_MAX;
  400a76:	68fb      	ldr	r3, [r7, #12]
  400a78:	f503 6206 	add.w	r2, r3, #2144	; 0x860
  400a7c:	f04f 33ff 	mov.w	r3, #4294967295
  400a80:	f04f 0400 	mov.w	r4, #0
  400a84:	e9c2 3400 	strd	r3, r4, [r2]

	/* Gyro power-off to power-on transition can cause ring down issue
	 * This variable keeps track of timestamp when gyro is power off. Set to UINT32_MAX at init
	 */
	s->gyro_power_off_tmst = UINT32_MAX;
  400a88:	68fb      	ldr	r3, [r7, #12]
  400a8a:	f603 0278 	addw	r2, r3, #2168	; 0x878
  400a8e:	f04f 33ff 	mov.w	r3, #4294967295
  400a92:	f04f 0400 	mov.w	r4, #0
  400a96:	e9c2 3400 	strd	r3, r4, [r2]

	return status;
  400a9a:	697b      	ldr	r3, [r7, #20]
}
  400a9c:	4618      	mov	r0, r3
  400a9e:	3718      	adds	r7, #24
  400aa0:	46bd      	mov	sp, r7
  400aa2:	bdb0      	pop	{r4, r5, r7, pc}
  400aa4:	0040885d 	.word	0x0040885d
  400aa8:	004004ed 	.word	0x004004ed
  400aac:	0040200d 	.word	0x0040200d
  400ab0:	00402105 	.word	0x00402105

00400ab4 <inv_icm426xx_device_reset>:

int inv_icm426xx_device_reset(struct inv_icm426xx * s)
{
  400ab4:	b590      	push	{r4, r7, lr}
  400ab6:	b085      	sub	sp, #20
  400ab8:	af00      	add	r7, sp, #0
  400aba:	6078      	str	r0, [r7, #4]
	int status = INV_ERROR_SUCCESS;
  400abc:	2300      	movs	r3, #0
  400abe:	60fb      	str	r3, [r7, #12]
	uint8_t data;
	uint8_t intf_cfg4_reg, intf_cfg6_reg;

	/* Set memory bank 1 */
	status |= inv_icm426xx_set_reg_bank(s, 1);
  400ac0:	2101      	movs	r1, #1
  400ac2:	6878      	ldr	r0, [r7, #4]
  400ac4:	4b64      	ldr	r3, [pc, #400]	; (400c58 <inv_icm426xx_device_reset+0x1a4>)
  400ac6:	4798      	blx	r3
  400ac8:	4602      	mov	r2, r0
  400aca:	68fb      	ldr	r3, [r7, #12]
  400acc:	4313      	orrs	r3, r2
  400ace:	60fb      	str	r3, [r7, #12]
	/* save registers necessary to perform soft reset while still keeping communication link alive */
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG4_B1, 1, &intf_cfg4_reg); // AUX SPI and AP SPI fields
  400ad0:	f107 030a 	add.w	r3, r7, #10
  400ad4:	2201      	movs	r2, #1
  400ad6:	217a      	movs	r1, #122	; 0x7a
  400ad8:	6878      	ldr	r0, [r7, #4]
  400ada:	4c60      	ldr	r4, [pc, #384]	; (400c5c <inv_icm426xx_device_reset+0x1a8>)
  400adc:	47a0      	blx	r4
  400ade:	4602      	mov	r2, r0
  400ae0:	68fb      	ldr	r3, [r7, #12]
  400ae2:	4313      	orrs	r3, r2
  400ae4:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &intf_cfg6_reg);
  400ae6:	f107 0309 	add.w	r3, r7, #9
  400aea:	2201      	movs	r2, #1
  400aec:	217c      	movs	r1, #124	; 0x7c
  400aee:	6878      	ldr	r0, [r7, #4]
  400af0:	4c5a      	ldr	r4, [pc, #360]	; (400c5c <inv_icm426xx_device_reset+0x1a8>)
  400af2:	47a0      	blx	r4
  400af4:	4602      	mov	r2, r0
  400af6:	68fb      	ldr	r3, [r7, #12]
  400af8:	4313      	orrs	r3, r2
  400afa:	60fb      	str	r3, [r7, #12]
	/* Set memory bank 0 */
	status |= inv_icm426xx_set_reg_bank(s, 0);
  400afc:	2100      	movs	r1, #0
  400afe:	6878      	ldr	r0, [r7, #4]
  400b00:	4b55      	ldr	r3, [pc, #340]	; (400c58 <inv_icm426xx_device_reset+0x1a4>)
  400b02:	4798      	blx	r3
  400b04:	4602      	mov	r2, r0
  400b06:	68fb      	ldr	r3, [r7, #12]
  400b08:	4313      	orrs	r3, r2
  400b0a:	60fb      	str	r3, [r7, #12]
	
	/* Reset the internal registers and restores the default settings.
	 * The bit automatically clears to 0 once the reset is done.
	 * Since soft-reset will trigger OTP reload, SPI mode (bit4) does not need saving
	 */
	data = ICM426XX_DEVICE_CONFIG_RESET_EN;
  400b0c:	2301      	movs	r3, #1
  400b0e:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_DEVICE_CONFIG, 1, &data);
  400b10:	f107 030b 	add.w	r3, r7, #11
  400b14:	2201      	movs	r2, #1
  400b16:	2111      	movs	r1, #17
  400b18:	6878      	ldr	r0, [r7, #4]
  400b1a:	4c51      	ldr	r4, [pc, #324]	; (400c60 <inv_icm426xx_device_reset+0x1ac>)
  400b1c:	47a0      	blx	r4
  400b1e:	4602      	mov	r2, r0
  400b20:	68fb      	ldr	r3, [r7, #12]
  400b22:	4313      	orrs	r3, r2
  400b24:	60fb      	str	r3, [r7, #12]
	if(status)
  400b26:	68fb      	ldr	r3, [r7, #12]
  400b28:	2b00      	cmp	r3, #0
  400b2a:	d001      	beq.n	400b30 <inv_icm426xx_device_reset+0x7c>
		return status;
  400b2c:	68fb      	ldr	r3, [r7, #12]
  400b2e:	e08e      	b.n	400c4e <inv_icm426xx_device_reset+0x19a>

	/* Wait 1000us for soft reset to be effective before trying to perform any further read */
	inv_icm426xx_sleep_us(1000);
  400b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  400b34:	4b4b      	ldr	r3, [pc, #300]	; (400c64 <inv_icm426xx_device_reset+0x1b0>)
  400b36:	4798      	blx	r3

	status |= inv_icm426xx_set_reg_bank(s, 1);
  400b38:	2101      	movs	r1, #1
  400b3a:	6878      	ldr	r0, [r7, #4]
  400b3c:	4b46      	ldr	r3, [pc, #280]	; (400c58 <inv_icm426xx_device_reset+0x1a4>)
  400b3e:	4798      	blx	r3
  400b40:	4602      	mov	r2, r0
  400b42:	68fb      	ldr	r3, [r7, #12]
  400b44:	4313      	orrs	r3, r2
  400b46:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG4_B1, 1, &intf_cfg4_reg);
  400b48:	f107 030a 	add.w	r3, r7, #10
  400b4c:	2201      	movs	r2, #1
  400b4e:	217a      	movs	r1, #122	; 0x7a
  400b50:	6878      	ldr	r0, [r7, #4]
  400b52:	4c43      	ldr	r4, [pc, #268]	; (400c60 <inv_icm426xx_device_reset+0x1ac>)
  400b54:	47a0      	blx	r4
  400b56:	4602      	mov	r2, r0
  400b58:	68fb      	ldr	r3, [r7, #12]
  400b5a:	4313      	orrs	r3, r2
  400b5c:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  400b5e:	2100      	movs	r1, #0
  400b60:	6878      	ldr	r0, [r7, #4]
  400b62:	4b3d      	ldr	r3, [pc, #244]	; (400c58 <inv_icm426xx_device_reset+0x1a4>)
  400b64:	4798      	blx	r3
  400b66:	4602      	mov	r2, r0
  400b68:	68fb      	ldr	r3, [r7, #12]
  400b6a:	4313      	orrs	r3, r2
  400b6c:	60fb      	str	r3, [r7, #12]

	/* Check the Int Reset Done bit */
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_STATUS, 1, &data);
  400b6e:	f107 030b 	add.w	r3, r7, #11
  400b72:	2201      	movs	r2, #1
  400b74:	212d      	movs	r1, #45	; 0x2d
  400b76:	6878      	ldr	r0, [r7, #4]
  400b78:	4c38      	ldr	r4, [pc, #224]	; (400c5c <inv_icm426xx_device_reset+0x1a8>)
  400b7a:	47a0      	blx	r4
  400b7c:	4602      	mov	r2, r0
  400b7e:	68fb      	ldr	r3, [r7, #12]
  400b80:	4313      	orrs	r3, r2
  400b82:	60fb      	str	r3, [r7, #12]
	if (0 == (data & BIT_INT_STATUS_RESET_DONE)) {
  400b84:	7afb      	ldrb	r3, [r7, #11]
  400b86:	f003 0310 	and.w	r3, r3, #16
  400b8a:	2b00      	cmp	r3, #0
  400b8c:	d102      	bne.n	400b94 <inv_icm426xx_device_reset+0xe0>
		return INV_ERROR_UNEXPECTED;
  400b8e:	f06f 030b 	mvn.w	r3, #11
  400b92:	e05c      	b.n	400c4e <inv_icm426xx_device_reset+0x19a>
	}

	/* Init transport layer */
	inv_icm426xx_init_transport(s);
  400b94:	6878      	ldr	r0, [r7, #4]
  400b96:	4b34      	ldr	r3, [pc, #208]	; (400c68 <inv_icm426xx_device_reset+0x1b4>)
  400b98:	4798      	blx	r3
	
	status |= inv_icm426xx_set_reg_bank(s, 1);
  400b9a:	2101      	movs	r1, #1
  400b9c:	6878      	ldr	r0, [r7, #4]
  400b9e:	4b2e      	ldr	r3, [pc, #184]	; (400c58 <inv_icm426xx_device_reset+0x1a4>)
  400ba0:	4798      	blx	r3
  400ba2:	4602      	mov	r2, r0
  400ba4:	68fb      	ldr	r3, [r7, #12]
  400ba6:	4313      	orrs	r3, r2
  400ba8:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &intf_cfg6_reg);
  400baa:	f107 0309 	add.w	r3, r7, #9
  400bae:	2201      	movs	r2, #1
  400bb0:	217c      	movs	r1, #124	; 0x7c
  400bb2:	6878      	ldr	r0, [r7, #4]
  400bb4:	4c2a      	ldr	r4, [pc, #168]	; (400c60 <inv_icm426xx_device_reset+0x1ac>)
  400bb6:	47a0      	blx	r4
  400bb8:	4602      	mov	r2, r0
  400bba:	68fb      	ldr	r3, [r7, #12]
  400bbc:	4313      	orrs	r3, r2
  400bbe:	60fb      	str	r3, [r7, #12]
	/* Configure FSYNC on INT2=pin 9 */
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG5_B1, 1, &data);
  400bc0:	f107 030b 	add.w	r3, r7, #11
  400bc4:	2201      	movs	r2, #1
  400bc6:	217b      	movs	r1, #123	; 0x7b
  400bc8:	6878      	ldr	r0, [r7, #4]
  400bca:	4c24      	ldr	r4, [pc, #144]	; (400c5c <inv_icm426xx_device_reset+0x1a8>)
  400bcc:	47a0      	blx	r4
  400bce:	4602      	mov	r2, r0
  400bd0:	68fb      	ldr	r3, [r7, #12]
  400bd2:	4313      	orrs	r3, r2
  400bd4:	60fb      	str	r3, [r7, #12]
	data &= (uint8_t)~BIT_INTF_CONFIG5_GPIO_PAD_SEL_MASK;
  400bd6:	7afb      	ldrb	r3, [r7, #11]
  400bd8:	f023 0306 	bic.w	r3, r3, #6
  400bdc:	b2db      	uxtb	r3, r3
  400bde:	72fb      	strb	r3, [r7, #11]
	data |= (1 << BIT_INTF_CONFIG5_GPIO_PAD_SEL_POS);
  400be0:	7afb      	ldrb	r3, [r7, #11]
  400be2:	f043 0302 	orr.w	r3, r3, #2
  400be6:	b2db      	uxtb	r3, r3
  400be8:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG5_B1, 1, &data);
  400bea:	f107 030b 	add.w	r3, r7, #11
  400bee:	2201      	movs	r2, #1
  400bf0:	217b      	movs	r1, #123	; 0x7b
  400bf2:	6878      	ldr	r0, [r7, #4]
  400bf4:	4c1a      	ldr	r4, [pc, #104]	; (400c60 <inv_icm426xx_device_reset+0x1ac>)
  400bf6:	47a0      	blx	r4
  400bf8:	4602      	mov	r2, r0
  400bfa:	68fb      	ldr	r3, [r7, #12]
  400bfc:	4313      	orrs	r3, r2
  400bfe:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  400c00:	2100      	movs	r1, #0
  400c02:	6878      	ldr	r0, [r7, #4]
  400c04:	4b14      	ldr	r3, [pc, #80]	; (400c58 <inv_icm426xx_device_reset+0x1a4>)
  400c06:	4798      	blx	r3
  400c08:	4602      	mov	r2, r0
  400c0a:	68fb      	ldr	r3, [r7, #12]
  400c0c:	4313      	orrs	r3, r2
  400c0e:	60fb      	str	r3, [r7, #12]

	/* Read and set endianess for further processing */
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data);
  400c10:	f107 030b 	add.w	r3, r7, #11
  400c14:	2201      	movs	r2, #1
  400c16:	214c      	movs	r1, #76	; 0x4c
  400c18:	6878      	ldr	r0, [r7, #4]
  400c1a:	4c10      	ldr	r4, [pc, #64]	; (400c5c <inv_icm426xx_device_reset+0x1a8>)
  400c1c:	47a0      	blx	r4
  400c1e:	4602      	mov	r2, r0
  400c20:	68fb      	ldr	r3, [r7, #12]
  400c22:	4313      	orrs	r3, r2
  400c24:	60fb      	str	r3, [r7, #12]
	s->endianess_data = data & BIT_DATA_ENDIAN_MASK;
  400c26:	7afb      	ldrb	r3, [r7, #11]
  400c28:	f003 0310 	and.w	r3, r3, #16
  400c2c:	b2da      	uxtb	r2, r3
  400c2e:	687b      	ldr	r3, [r7, #4]
  400c30:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868

	if(s->transport.serif.serif_type == ICM426XX_UI_I3C){
  400c34:	687b      	ldr	r3, [r7, #4]
  400c36:	7e1b      	ldrb	r3, [r3, #24]
  400c38:	2b02      	cmp	r3, #2
  400c3a:	d107      	bne.n	400c4c <inv_icm426xx_device_reset+0x198>
		status |= s->transport.serif.configure((struct inv_icm426xx_serif *)s);
  400c3c:	687b      	ldr	r3, [r7, #4]
  400c3e:	68db      	ldr	r3, [r3, #12]
  400c40:	6878      	ldr	r0, [r7, #4]
  400c42:	4798      	blx	r3
  400c44:	4602      	mov	r2, r0
  400c46:	68fb      	ldr	r3, [r7, #12]
  400c48:	4313      	orrs	r3, r2
  400c4a:	60fb      	str	r3, [r7, #12]
	}

	return status;
  400c4c:	68fb      	ldr	r3, [r7, #12]
}
  400c4e:	4618      	mov	r0, r3
  400c50:	3714      	adds	r7, #20
  400c52:	46bd      	mov	sp, r7
  400c54:	bd90      	pop	{r4, r7, pc}
  400c56:	bf00      	nop
  400c58:	004009d9 	.word	0x004009d9
  400c5c:	00402589 	.word	0x00402589
  400c60:	00402655 	.word	0x00402655
  400c64:	004004ed 	.word	0x004004ed
  400c68:	004024c1 	.word	0x004024c1

00400c6c <inv_icm426xx_get_who_am_i>:

int inv_icm426xx_get_who_am_i(struct inv_icm426xx * s, uint8_t * who_am_i)
{
  400c6c:	b590      	push	{r4, r7, lr}
  400c6e:	b083      	sub	sp, #12
  400c70:	af00      	add	r7, sp, #0
  400c72:	6078      	str	r0, [r7, #4]
  400c74:	6039      	str	r1, [r7, #0]
	return inv_icm426xx_read_reg(s, MPUREG_WHO_AM_I, 1, who_am_i);
  400c76:	683b      	ldr	r3, [r7, #0]
  400c78:	2201      	movs	r2, #1
  400c7a:	2175      	movs	r1, #117	; 0x75
  400c7c:	6878      	ldr	r0, [r7, #4]
  400c7e:	4c03      	ldr	r4, [pc, #12]	; (400c8c <inv_icm426xx_get_who_am_i+0x20>)
  400c80:	47a0      	blx	r4
  400c82:	4603      	mov	r3, r0
}
  400c84:	4618      	mov	r0, r3
  400c86:	370c      	adds	r7, #12
  400c88:	46bd      	mov	sp, r7
  400c8a:	bd90      	pop	{r4, r7, pc}
  400c8c:	00402589 	.word	0x00402589

00400c90 <inv_icm426xx_force_clock_source>:

int inv_icm426xx_force_clock_source(struct inv_icm426xx * s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_t clk_src)
{
  400c90:	b590      	push	{r4, r7, lr}
  400c92:	b085      	sub	sp, #20
  400c94:	af00      	add	r7, sp, #0
  400c96:	6078      	str	r0, [r7, #4]
  400c98:	460b      	mov	r3, r1
  400c9a:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  400c9c:	2300      	movs	r3, #0
  400c9e:	60fb      	str	r3, [r7, #12]
	uint8_t data;
	status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  400ca0:	f107 030b 	add.w	r3, r7, #11
  400ca4:	2201      	movs	r2, #1
  400ca6:	214d      	movs	r1, #77	; 0x4d
  400ca8:	6878      	ldr	r0, [r7, #4]
  400caa:	4c12      	ldr	r4, [pc, #72]	; (400cf4 <inv_icm426xx_force_clock_source+0x64>)
  400cac:	47a0      	blx	r4
  400cae:	4602      	mov	r2, r0
  400cb0:	68fb      	ldr	r3, [r7, #12]
  400cb2:	4313      	orrs	r3, r2
  400cb4:	60fb      	str	r3, [r7, #12]
	if(clk_src == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC)
  400cb6:	78fb      	ldrb	r3, [r7, #3]
  400cb8:	2b00      	cmp	r3, #0
  400cba:	d105      	bne.n	400cc8 <inv_icm426xx_force_clock_source+0x38>
		data &= (uint8_t)~BIT_ACCEL_LP_CLK_SEL_MASK;
  400cbc:	7afb      	ldrb	r3, [r7, #11]
  400cbe:	f023 0308 	bic.w	r3, r3, #8
  400cc2:	b2db      	uxtb	r3, r3
  400cc4:	72fb      	strb	r3, [r7, #11]
  400cc6:	e004      	b.n	400cd2 <inv_icm426xx_force_clock_source+0x42>
	else
		data |= (uint8_t)ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC;
  400cc8:	7afb      	ldrb	r3, [r7, #11]
  400cca:	f043 0308 	orr.w	r3, r3, #8
  400cce:	b2db      	uxtb	r3, r3
  400cd0:	72fb      	strb	r3, [r7, #11]

	status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  400cd2:	f107 030b 	add.w	r3, r7, #11
  400cd6:	2201      	movs	r2, #1
  400cd8:	214d      	movs	r1, #77	; 0x4d
  400cda:	6878      	ldr	r0, [r7, #4]
  400cdc:	4c06      	ldr	r4, [pc, #24]	; (400cf8 <inv_icm426xx_force_clock_source+0x68>)
  400cde:	47a0      	blx	r4
  400ce0:	4602      	mov	r2, r0
  400ce2:	68fb      	ldr	r3, [r7, #12]
  400ce4:	4313      	orrs	r3, r2
  400ce6:	60fb      	str	r3, [r7, #12]
	
	return status;
  400ce8:	68fb      	ldr	r3, [r7, #12]
}
  400cea:	4618      	mov	r0, r3
  400cec:	3714      	adds	r7, #20
  400cee:	46bd      	mov	sp, r7
  400cf0:	bd90      	pop	{r4, r7, pc}
  400cf2:	bf00      	nop
  400cf4:	00402589 	.word	0x00402589
  400cf8:	00402655 	.word	0x00402655

00400cfc <inv_icm426xx_enable_accel_low_power_mode>:

int inv_icm426xx_enable_accel_low_power_mode(struct inv_icm426xx * s)
{
  400cfc:	b590      	push	{r4, r7, lr}
  400cfe:	b089      	sub	sp, #36	; 0x24
  400d00:	af00      	add	r7, sp, #0
  400d02:	6078      	str	r0, [r7, #4]
	int status = 0;
  400d04:	2300      	movs	r3, #0
  400d06:	61fb      	str	r3, [r7, #28]
	uint8_t pwr_mgmt0_reg;
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t accel_mode;
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t  gyro_mode;
	ICM426XX_ACCEL_CONFIG0_ODR_t acc_odr_bitfield;
	uint32_t accel_odr_us = 0;	
  400d08:	2300      	movs	r3, #0
  400d0a:	61bb      	str	r3, [r7, #24]
	uint8_t accel_cfg_0_reg;

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  400d0c:	f107 0311 	add.w	r3, r7, #17
  400d10:	2201      	movs	r2, #1
  400d12:	214e      	movs	r1, #78	; 0x4e
  400d14:	6878      	ldr	r0, [r7, #4]
  400d16:	4c9e      	ldr	r4, [pc, #632]	; (400f90 <inv_icm426xx_enable_accel_low_power_mode+0x294>)
  400d18:	47a0      	blx	r4
  400d1a:	4602      	mov	r2, r0
  400d1c:	69fb      	ldr	r3, [r7, #28]
  400d1e:	4313      	orrs	r3, r2
  400d20:	61fb      	str	r3, [r7, #28]
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mgmt0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  400d22:	7c7b      	ldrb	r3, [r7, #17]
  400d24:	f003 0303 	and.w	r3, r3, #3
  400d28:	75fb      	strb	r3, [r7, #23]
	gyro_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mgmt0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  400d2a:	7c7b      	ldrb	r3, [r7, #17]
  400d2c:	f003 030c 	and.w	r3, r3, #12
  400d30:	75bb      	strb	r3, [r7, #22]

	/* Subroutines need to be followed when enabling or disabling sensor to ensure ODR regularity
	 * Check if the accelerometer is the only one enabled 
	 */
	if ((accel_mode != ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) && 
  400d32:	7dfb      	ldrb	r3, [r7, #23]
  400d34:	2b02      	cmp	r3, #2
  400d36:	d021      	beq.n	400d7c <inv_icm426xx_enable_accel_low_power_mode+0x80>
  400d38:	7dbb      	ldrb	r3, [r7, #22]
  400d3a:	2b00      	cmp	r3, #0
  400d3c:	d002      	beq.n	400d44 <inv_icm426xx_enable_accel_low_power_mode+0x48>
	    ((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY))){
  400d3e:	7dbb      	ldrb	r3, [r7, #22]
  400d40:	2b04      	cmp	r3, #4
  400d42:	d11b      	bne.n	400d7c <inv_icm426xx_enable_accel_low_power_mode+0x80>
		/* Get accelerometer's ODR for next required wait */
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  400d44:	f107 0310 	add.w	r3, r7, #16
  400d48:	2201      	movs	r2, #1
  400d4a:	2150      	movs	r1, #80	; 0x50
  400d4c:	6878      	ldr	r0, [r7, #4]
  400d4e:	4c90      	ldr	r4, [pc, #576]	; (400f90 <inv_icm426xx_enable_accel_low_power_mode+0x294>)
  400d50:	47a0      	blx	r4
  400d52:	4602      	mov	r2, r0
  400d54:	69fb      	ldr	r3, [r7, #28]
  400d56:	4313      	orrs	r3, r2
  400d58:	61fb      	str	r3, [r7, #28]
		acc_odr_bitfield = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  400d5a:	7c3b      	ldrb	r3, [r7, #16]
  400d5c:	f003 030f 	and.w	r3, r3, #15
  400d60:	757b      	strb	r3, [r7, #21]
		accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(acc_odr_bitfield);
  400d62:	7d7b      	ldrb	r3, [r7, #21]
  400d64:	4618      	mov	r0, r3
  400d66:	4b8b      	ldr	r3, [pc, #556]	; (400f94 <inv_icm426xx_enable_accel_low_power_mode+0x298>)
  400d68:	4798      	blx	r3
  400d6a:	61b8      	str	r0, [r7, #24]
		// Select the RC OSC as clock source for the accelerometer
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC);
  400d6c:	2108      	movs	r1, #8
  400d6e:	6878      	ldr	r0, [r7, #4]
  400d70:	4b89      	ldr	r3, [pc, #548]	; (400f98 <inv_icm426xx_enable_accel_low_power_mode+0x29c>)
  400d72:	4798      	blx	r3
  400d74:	4602      	mov	r2, r0
  400d76:	69fb      	ldr	r3, [r7, #28]
  400d78:	4313      	orrs	r3, r2
  400d7a:	61fb      	str	r3, [r7, #28]
	}

	/* FIFO contains Gyro and Accel data if enabled on the OIS path
	 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
	 */
	if(accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF && gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  400d7c:	7dfb      	ldrb	r3, [r7, #23]
  400d7e:	2b00      	cmp	r3, #0
  400d80:	d143      	bne.n	400e0a <inv_icm426xx_enable_accel_low_power_mode+0x10e>
  400d82:	7dbb      	ldrb	r3, [r7, #22]
  400d84:	2b00      	cmp	r3, #0
  400d86:	d140      	bne.n	400e0a <inv_icm426xx_enable_accel_low_power_mode+0x10e>
		uint8_t data_endianess;
		if(s->fifo_is_used) {
  400d88:	687b      	ldr	r3, [r7, #4]
  400d8a:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  400d8e:	2b00      	cmp	r3, #0
  400d90:	d029      	beq.n	400de6 <inv_icm426xx_enable_accel_low_power_mode+0xea>
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  400d92:	f107 0312 	add.w	r3, r7, #18
  400d96:	2201      	movs	r2, #1
  400d98:	215f      	movs	r1, #95	; 0x5f
  400d9a:	6878      	ldr	r0, [r7, #4]
  400d9c:	4c7c      	ldr	r4, [pc, #496]	; (400f90 <inv_icm426xx_enable_accel_low_power_mode+0x294>)
  400d9e:	47a0      	blx	r4
  400da0:	4602      	mov	r2, r0
  400da2:	69fb      	ldr	r3, [r7, #28]
  400da4:	4313      	orrs	r3, r2
  400da6:	61fb      	str	r3, [r7, #28]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_ACCEL_EN;
  400da8:	7cbb      	ldrb	r3, [r7, #18]
  400daa:	f043 0301 	orr.w	r3, r3, #1
  400dae:	b2db      	uxtb	r3, r3
  400db0:	74bb      	strb	r3, [r7, #18]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_GYRO_EN;
  400db2:	7cbb      	ldrb	r3, [r7, #18]
  400db4:	f043 0302 	orr.w	r3, r3, #2
  400db8:	b2db      	uxtb	r3, r3
  400dba:	74bb      	strb	r3, [r7, #18]
			if(s->fifo_highres_enabled)
  400dbc:	687b      	ldr	r3, [r7, #4]
  400dbe:	f893 3869 	ldrb.w	r3, [r3, #2153]	; 0x869
  400dc2:	2b00      	cmp	r3, #0
  400dc4:	d004      	beq.n	400dd0 <inv_icm426xx_enable_accel_low_power_mode+0xd4>
				data |= (uint8_t)ICM426XX_FIFO_CONFIG1_HIRES_EN;
  400dc6:	7cbb      	ldrb	r3, [r7, #18]
  400dc8:	f043 0310 	orr.w	r3, r3, #16
  400dcc:	b2db      	uxtb	r3, r3
  400dce:	74bb      	strb	r3, [r7, #18]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  400dd0:	f107 0312 	add.w	r3, r7, #18
  400dd4:	2201      	movs	r2, #1
  400dd6:	215f      	movs	r1, #95	; 0x5f
  400dd8:	6878      	ldr	r0, [r7, #4]
  400dda:	4c70      	ldr	r4, [pc, #448]	; (400f9c <inv_icm426xx_enable_accel_low_power_mode+0x2a0>)
  400ddc:	47a0      	blx	r4
  400dde:	4602      	mov	r2, r0
  400de0:	69fb      	ldr	r3, [r7, #28]
  400de2:	4313      	orrs	r3, r2
  400de4:	61fb      	str	r3, [r7, #28]
		}

		/* Read data endianess in order to process correctly data*/
		status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data_endianess);
  400de6:	f107 030f 	add.w	r3, r7, #15
  400dea:	2201      	movs	r2, #1
  400dec:	214c      	movs	r1, #76	; 0x4c
  400dee:	6878      	ldr	r0, [r7, #4]
  400df0:	4c67      	ldr	r4, [pc, #412]	; (400f90 <inv_icm426xx_enable_accel_low_power_mode+0x294>)
  400df2:	47a0      	blx	r4
  400df4:	4602      	mov	r2, r0
  400df6:	69fb      	ldr	r3, [r7, #28]
  400df8:	4313      	orrs	r3, r2
  400dfa:	61fb      	str	r3, [r7, #28]
		s->endianess_data = data_endianess & BIT_DATA_ENDIAN_MASK;
  400dfc:	7bfb      	ldrb	r3, [r7, #15]
  400dfe:	f003 0310 	and.w	r3, r3, #16
  400e02:	b2da      	uxtb	r2, r3
  400e04:	687b      	ldr	r3, [r7, #4]
  400e06:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
	}
#endif

	/* Restore filter averaging settings */
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  400e0a:	f107 0312 	add.w	r3, r7, #18
  400e0e:	2201      	movs	r2, #1
  400e10:	2152      	movs	r1, #82	; 0x52
  400e12:	6878      	ldr	r0, [r7, #4]
  400e14:	4c5e      	ldr	r4, [pc, #376]	; (400f90 <inv_icm426xx_enable_accel_low_power_mode+0x294>)
  400e16:	47a0      	blx	r4
  400e18:	4602      	mov	r2, r0
  400e1a:	69fb      	ldr	r3, [r7, #28]
  400e1c:	4313      	orrs	r3, r2
  400e1e:	61fb      	str	r3, [r7, #28]
	data &= (uint8_t)~BIT_GYRO_ACCEL_CONFIG0_ACCEL_FILT_MASK;
  400e20:	7cbb      	ldrb	r3, [r7, #18]
  400e22:	f003 030f 	and.w	r3, r3, #15
  400e26:	b2db      	uxtb	r3, r3
  400e28:	74bb      	strb	r3, [r7, #18]
	data |= s->avg_bw_setting.acc_lp_avg;
  400e2a:	687b      	ldr	r3, [r7, #4]
  400e2c:	f893 2872 	ldrb.w	r2, [r3, #2162]	; 0x872
  400e30:	7cbb      	ldrb	r3, [r7, #18]
  400e32:	4313      	orrs	r3, r2
  400e34:	b2db      	uxtb	r3, r3
  400e36:	74bb      	strb	r3, [r7, #18]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  400e38:	f107 0312 	add.w	r3, r7, #18
  400e3c:	2201      	movs	r2, #1
  400e3e:	2152      	movs	r1, #82	; 0x52
  400e40:	6878      	ldr	r0, [r7, #4]
  400e42:	4c56      	ldr	r4, [pc, #344]	; (400f9c <inv_icm426xx_enable_accel_low_power_mode+0x2a0>)
  400e44:	47a0      	blx	r4
  400e46:	4602      	mov	r2, r0
  400e48:	69fb      	ldr	r3, [r7, #28]
  400e4a:	4313      	orrs	r3, r2
  400e4c:	61fb      	str	r3, [r7, #28]
	
	/* Enable/Switch the accelerometer in/to low power mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  400e4e:	f107 0311 	add.w	r3, r7, #17
  400e52:	2201      	movs	r2, #1
  400e54:	214e      	movs	r1, #78	; 0x4e
  400e56:	6878      	ldr	r0, [r7, #4]
  400e58:	4c4d      	ldr	r4, [pc, #308]	; (400f90 <inv_icm426xx_enable_accel_low_power_mode+0x294>)
  400e5a:	47a0      	blx	r4
  400e5c:	4602      	mov	r2, r0
  400e5e:	69fb      	ldr	r3, [r7, #28]
  400e60:	4313      	orrs	r3, r2
  400e62:	61fb      	str	r3, [r7, #28]
	pwr_mgmt0_reg &= ~BIT_PWR_MGMT_0_ACCEL_MODE_MASK;
  400e64:	7c7b      	ldrb	r3, [r7, #17]
  400e66:	f023 0303 	bic.w	r3, r3, #3
  400e6a:	b2db      	uxtb	r3, r3
  400e6c:	747b      	strb	r3, [r7, #17]
	pwr_mgmt0_reg |= ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP;
  400e6e:	7c7b      	ldrb	r3, [r7, #17]
  400e70:	f043 0302 	orr.w	r3, r3, #2
  400e74:	b2db      	uxtb	r3, r3
  400e76:	747b      	strb	r3, [r7, #17]
	status |= inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  400e78:	f107 0311 	add.w	r3, r7, #17
  400e7c:	2201      	movs	r2, #1
  400e7e:	214e      	movs	r1, #78	; 0x4e
  400e80:	6878      	ldr	r0, [r7, #4]
  400e82:	4c46      	ldr	r4, [pc, #280]	; (400f9c <inv_icm426xx_enable_accel_low_power_mode+0x2a0>)
  400e84:	47a0      	blx	r4
  400e86:	4602      	mov	r2, r0
  400e88:	69fb      	ldr	r3, [r7, #28]
  400e8a:	4313      	orrs	r3, r2
  400e8c:	61fb      	str	r3, [r7, #28]
	inv_icm426xx_sleep_us(200);
  400e8e:	20c8      	movs	r0, #200	; 0xc8
  400e90:	4b43      	ldr	r3, [pc, #268]	; (400fa0 <inv_icm426xx_enable_accel_low_power_mode+0x2a4>)
  400e92:	4798      	blx	r3
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	/* Subroutines need to be followed when enabling or disabling sensor to ensure ODR regularity */
	if ((accel_mode != ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) && 
  400e94:	7dfb      	ldrb	r3, [r7, #23]
  400e96:	2b02      	cmp	r3, #2
  400e98:	d015      	beq.n	400ec6 <inv_icm426xx_enable_accel_low_power_mode+0x1ca>
  400e9a:	7dbb      	ldrb	r3, [r7, #22]
  400e9c:	2b00      	cmp	r3, #0
  400e9e:	d002      	beq.n	400ea6 <inv_icm426xx_enable_accel_low_power_mode+0x1aa>
	    ((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY))){
  400ea0:	7dbb      	ldrb	r3, [r7, #22]
  400ea2:	2b04      	cmp	r3, #4
  400ea4:	d10f      	bne.n	400ec6 <inv_icm426xx_enable_accel_low_power_mode+0x1ca>
		/* Wait one accelerometer ODR before switching to the WU OSC */
		if (accel_odr_us > 200) /* if ODR is smaller than 200 us, we already waited for one ODR above */
  400ea6:	69bb      	ldr	r3, [r7, #24]
  400ea8:	2bc8      	cmp	r3, #200	; 0xc8
  400eaa:	d904      	bls.n	400eb6 <inv_icm426xx_enable_accel_low_power_mode+0x1ba>
			inv_icm426xx_sleep_us(accel_odr_us - 200);
  400eac:	69bb      	ldr	r3, [r7, #24]
  400eae:	3bc8      	subs	r3, #200	; 0xc8
  400eb0:	4618      	mov	r0, r3
  400eb2:	4b3b      	ldr	r3, [pc, #236]	; (400fa0 <inv_icm426xx_enable_accel_low_power_mode+0x2a4>)
  400eb4:	4798      	blx	r3
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC);
  400eb6:	2100      	movs	r1, #0
  400eb8:	6878      	ldr	r0, [r7, #4]
  400eba:	4b37      	ldr	r3, [pc, #220]	; (400f98 <inv_icm426xx_enable_accel_low_power_mode+0x29c>)
  400ebc:	4798      	blx	r3
  400ebe:	4602      	mov	r2, r0
  400ec0:	69fb      	ldr	r3, [r7, #28]
  400ec2:	4313      	orrs	r3, r2
  400ec4:	61fb      	str	r3, [r7, #28]
	}
	
	/* Accel Low Power could report with wrong ODR if internal counter for ODR changed overflowed */
	if (ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP != accel_mode) {
  400ec6:	7dfb      	ldrb	r3, [r7, #23]
  400ec8:	2b02      	cmp	r3, #2
  400eca:	d047      	beq.n	400f5c <inv_icm426xx_enable_accel_low_power_mode+0x260>
		/* Check whether counter has overflowed */
		if(s->wu_off_acc_odr_changes >= 8) {
  400ecc:	687b      	ldr	r3, [r7, #4]
  400ece:	f8d3 386c 	ldr.w	r3, [r3, #2156]	; 0x86c
  400ed2:	2b07      	cmp	r3, #7
  400ed4:	d942      	bls.n	400f5c <inv_icm426xx_enable_accel_low_power_mode+0x260>
			ICM426XX_ACCEL_CONFIG0_ODR_t cur_freq, new_freq;
			/* Dummy transition to ODR valid for both ALN/ALP */
			status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  400ed6:	f107 0310 	add.w	r3, r7, #16
  400eda:	2201      	movs	r2, #1
  400edc:	2150      	movs	r1, #80	; 0x50
  400ede:	6878      	ldr	r0, [r7, #4]
  400ee0:	4c2b      	ldr	r4, [pc, #172]	; (400f90 <inv_icm426xx_enable_accel_low_power_mode+0x294>)
  400ee2:	47a0      	blx	r4
  400ee4:	4602      	mov	r2, r0
  400ee6:	69fb      	ldr	r3, [r7, #28]
  400ee8:	4313      	orrs	r3, r2
  400eea:	61fb      	str	r3, [r7, #28]
			cur_freq = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  400eec:	7c3b      	ldrb	r3, [r7, #16]
  400eee:	f003 030f 	and.w	r3, r3, #15
  400ef2:	753b      	strb	r3, [r7, #20]
			new_freq = (cur_freq != ICM426XX_ACCEL_CONFIG0_ODR_1_5625_HZ) ? 
				ICM426XX_ACCEL_CONFIG0_ODR_1_5625_HZ : ICM426XX_ACCEL_CONFIG0_ODR_3_125_HZ;
  400ef4:	7d3b      	ldrb	r3, [r7, #20]
  400ef6:	2b0e      	cmp	r3, #14
  400ef8:	d001      	beq.n	400efe <inv_icm426xx_enable_accel_low_power_mode+0x202>
  400efa:	230e      	movs	r3, #14
  400efc:	e000      	b.n	400f00 <inv_icm426xx_enable_accel_low_power_mode+0x204>
  400efe:	230d      	movs	r3, #13
			new_freq = (cur_freq != ICM426XX_ACCEL_CONFIG0_ODR_1_5625_HZ) ? 
  400f00:	74fb      	strb	r3, [r7, #19]
			accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_ODR_MASK;
  400f02:	7c3b      	ldrb	r3, [r7, #16]
  400f04:	f023 030f 	bic.w	r3, r3, #15
  400f08:	b2db      	uxtb	r3, r3
  400f0a:	743b      	strb	r3, [r7, #16]
			accel_cfg_0_reg |= (uint8_t)new_freq;
  400f0c:	7c3a      	ldrb	r2, [r7, #16]
  400f0e:	7cfb      	ldrb	r3, [r7, #19]
  400f10:	4313      	orrs	r3, r2
  400f12:	b2db      	uxtb	r3, r3
  400f14:	743b      	strb	r3, [r7, #16]
			status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  400f16:	f107 0310 	add.w	r3, r7, #16
  400f1a:	2201      	movs	r2, #1
  400f1c:	2150      	movs	r1, #80	; 0x50
  400f1e:	6878      	ldr	r0, [r7, #4]
  400f20:	4c1e      	ldr	r4, [pc, #120]	; (400f9c <inv_icm426xx_enable_accel_low_power_mode+0x2a0>)
  400f22:	47a0      	blx	r4
  400f24:	4602      	mov	r2, r0
  400f26:	69fb      	ldr	r3, [r7, #28]
  400f28:	4313      	orrs	r3, r2
  400f2a:	61fb      	str	r3, [r7, #28]
			inv_icm426xx_sleep_us(200);
  400f2c:	20c8      	movs	r0, #200	; 0xc8
  400f2e:	4b1c      	ldr	r3, [pc, #112]	; (400fa0 <inv_icm426xx_enable_accel_low_power_mode+0x2a4>)
  400f30:	4798      	blx	r3
			accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_ODR_MASK;
  400f32:	7c3b      	ldrb	r3, [r7, #16]
  400f34:	f023 030f 	bic.w	r3, r3, #15
  400f38:	b2db      	uxtb	r3, r3
  400f3a:	743b      	strb	r3, [r7, #16]
			accel_cfg_0_reg |= (uint8_t)cur_freq;
  400f3c:	7c3a      	ldrb	r2, [r7, #16]
  400f3e:	7d3b      	ldrb	r3, [r7, #20]
  400f40:	4313      	orrs	r3, r2
  400f42:	b2db      	uxtb	r3, r3
  400f44:	743b      	strb	r3, [r7, #16]
			status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  400f46:	f107 0310 	add.w	r3, r7, #16
  400f4a:	2201      	movs	r2, #1
  400f4c:	2150      	movs	r1, #80	; 0x50
  400f4e:	6878      	ldr	r0, [r7, #4]
  400f50:	4c12      	ldr	r4, [pc, #72]	; (400f9c <inv_icm426xx_enable_accel_low_power_mode+0x2a0>)
  400f52:	47a0      	blx	r4
  400f54:	4602      	mov	r2, r0
  400f56:	69fb      	ldr	r3, [r7, #28]
  400f58:	4313      	orrs	r3, r2
  400f5a:	61fb      	str	r3, [r7, #28]
		}
	}
	/* Even though transition was a dummy and controller received two ODR updates,
	 * it was enabled. Therefore they were not missed, so it is safe to reset counter.
	 */
	s->wu_off_acc_odr_changes = 0;
  400f5c:	687b      	ldr	r3, [r7, #4]
  400f5e:	2200      	movs	r2, #0
  400f60:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

	if (accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF) {
  400f64:	7dfb      	ldrb	r3, [r7, #23]
  400f66:	2b00      	cmp	r3, #0
  400f68:	d10d      	bne.n	400f86 <inv_icm426xx_enable_accel_low_power_mode+0x28a>
		/* First data are noisy after enabling sensor 
		 * Keeps track of the start time to discard first sample
		 */
		if(s->fifo_is_used) {
  400f6a:	687b      	ldr	r3, [r7, #4]
  400f6c:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  400f70:	2b00      	cmp	r3, #0
  400f72:	d008      	beq.n	400f86 <inv_icm426xx_enable_accel_low_power_mode+0x28a>
			s->accel_start_time_us = inv_icm426xx_get_time_us();
  400f74:	4b0b      	ldr	r3, [pc, #44]	; (400fa4 <inv_icm426xx_enable_accel_low_power_mode+0x2a8>)
  400f76:	4798      	blx	r3
  400f78:	4603      	mov	r3, r0
  400f7a:	460c      	mov	r4, r1
  400f7c:	687a      	ldr	r2, [r7, #4]
  400f7e:	f502 6206 	add.w	r2, r2, #2144	; 0x860
  400f82:	e9c2 3400 	strd	r3, r4, [r2]
		}
	}
#endif

	return status;
  400f86:	69fb      	ldr	r3, [r7, #28]
}
  400f88:	4618      	mov	r0, r3
  400f8a:	3724      	adds	r7, #36	; 0x24
  400f8c:	46bd      	mov	sp, r7
  400f8e:	bd90      	pop	{r4, r7, pc}
  400f90:	00402589 	.word	0x00402589
  400f94:	00401b01 	.word	0x00401b01
  400f98:	00400c91 	.word	0x00400c91
  400f9c:	00402655 	.word	0x00402655
  400fa0:	004004ed 	.word	0x004004ed
  400fa4:	004004d5 	.word	0x004004d5

00400fa8 <inv_icm426xx_enable_accel_low_noise_mode>:

int inv_icm426xx_enable_accel_low_noise_mode(struct inv_icm426xx * s)
{
  400fa8:	b590      	push	{r4, r7, lr}
  400faa:	b087      	sub	sp, #28
  400fac:	af00      	add	r7, sp, #0
  400fae:	6078      	str	r0, [r7, #4]
	int status = 0;
  400fb0:	2300      	movs	r3, #0
  400fb2:	617b      	str	r3, [r7, #20]
	ICM426XX_PWR_MGMT_0_GYRO_MODE_t  gyro_mode;
	ICM426XX_ACCEL_CONFIG0_ODR_t acc_odr_bitfield;
	uint32_t accel_odr_us;
	uint8_t accel_cfg_0_reg;

	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  400fb4:	f107 030a 	add.w	r3, r7, #10
  400fb8:	2201      	movs	r2, #1
  400fba:	214e      	movs	r1, #78	; 0x4e
  400fbc:	6878      	ldr	r0, [r7, #4]
  400fbe:	4c6c      	ldr	r4, [pc, #432]	; (401170 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  400fc0:	47a0      	blx	r4
  400fc2:	4602      	mov	r2, r0
  400fc4:	697b      	ldr	r3, [r7, #20]
  400fc6:	4313      	orrs	r3, r2
  400fc8:	617b      	str	r3, [r7, #20]
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mgmt0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  400fca:	7abb      	ldrb	r3, [r7, #10]
  400fcc:	f003 0303 	and.w	r3, r3, #3
  400fd0:	74fb      	strb	r3, [r7, #19]
	gyro_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mgmt0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  400fd2:	7abb      	ldrb	r3, [r7, #10]
  400fd4:	f003 030c 	and.w	r3, r3, #12
  400fd8:	74bb      	strb	r3, [r7, #18]

	/* Subroutines need to be followed when enabling or disabling sensor to ensure ODR regularity
	 * Check if the accelerometer is the only one enabled 
	 */
	if ((accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) && 
  400fda:	7cfb      	ldrb	r3, [r7, #19]
  400fdc:	2b02      	cmp	r3, #2
  400fde:	d124      	bne.n	40102a <inv_icm426xx_enable_accel_low_noise_mode+0x82>
  400fe0:	7cbb      	ldrb	r3, [r7, #18]
  400fe2:	2b00      	cmp	r3, #0
  400fe4:	d002      	beq.n	400fec <inv_icm426xx_enable_accel_low_noise_mode+0x44>
	    ((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY))){
  400fe6:	7cbb      	ldrb	r3, [r7, #18]
  400fe8:	2b04      	cmp	r3, #4
  400fea:	d11e      	bne.n	40102a <inv_icm426xx_enable_accel_low_noise_mode+0x82>
		/* Get accelerometer's ODR for next required wait */
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  400fec:	f107 0309 	add.w	r3, r7, #9
  400ff0:	2201      	movs	r2, #1
  400ff2:	2150      	movs	r1, #80	; 0x50
  400ff4:	6878      	ldr	r0, [r7, #4]
  400ff6:	4c5e      	ldr	r4, [pc, #376]	; (401170 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  400ff8:	47a0      	blx	r4
  400ffa:	4602      	mov	r2, r0
  400ffc:	697b      	ldr	r3, [r7, #20]
  400ffe:	4313      	orrs	r3, r2
  401000:	617b      	str	r3, [r7, #20]
		acc_odr_bitfield = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  401002:	7a7b      	ldrb	r3, [r7, #9]
  401004:	f003 030f 	and.w	r3, r3, #15
  401008:	747b      	strb	r3, [r7, #17]
		accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(acc_odr_bitfield);
  40100a:	7c7b      	ldrb	r3, [r7, #17]
  40100c:	4618      	mov	r0, r3
  40100e:	4b59      	ldr	r3, [pc, #356]	; (401174 <inv_icm426xx_enable_accel_low_noise_mode+0x1cc>)
  401010:	4798      	blx	r3
  401012:	60f8      	str	r0, [r7, #12]
		/* Select the RC OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC);
  401014:	2108      	movs	r1, #8
  401016:	6878      	ldr	r0, [r7, #4]
  401018:	4b57      	ldr	r3, [pc, #348]	; (401178 <inv_icm426xx_enable_accel_low_noise_mode+0x1d0>)
  40101a:	4798      	blx	r3
  40101c:	4602      	mov	r2, r0
  40101e:	697b      	ldr	r3, [r7, #20]
  401020:	4313      	orrs	r3, r2
  401022:	617b      	str	r3, [r7, #20]
		/* Wait one accel ODR before switching to low noise mode */
		inv_icm426xx_sleep_us(accel_odr_us);
  401024:	68f8      	ldr	r0, [r7, #12]
  401026:	4b55      	ldr	r3, [pc, #340]	; (40117c <inv_icm426xx_enable_accel_low_noise_mode+0x1d4>)
  401028:	4798      	blx	r3
	}

	/* FIFO contains Gyro and Accel data if enabled on the OIS path
	 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
	 */
	if(accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF && gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  40102a:	7cfb      	ldrb	r3, [r7, #19]
  40102c:	2b00      	cmp	r3, #0
  40102e:	d143      	bne.n	4010b8 <inv_icm426xx_enable_accel_low_noise_mode+0x110>
  401030:	7cbb      	ldrb	r3, [r7, #18]
  401032:	2b00      	cmp	r3, #0
  401034:	d140      	bne.n	4010b8 <inv_icm426xx_enable_accel_low_noise_mode+0x110>
		uint8_t data_endianess;
		
		if(s->fifo_is_used) {
  401036:	687b      	ldr	r3, [r7, #4]
  401038:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  40103c:	2b00      	cmp	r3, #0
  40103e:	d029      	beq.n	401094 <inv_icm426xx_enable_accel_low_noise_mode+0xec>
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401040:	f107 030b 	add.w	r3, r7, #11
  401044:	2201      	movs	r2, #1
  401046:	215f      	movs	r1, #95	; 0x5f
  401048:	6878      	ldr	r0, [r7, #4]
  40104a:	4c49      	ldr	r4, [pc, #292]	; (401170 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  40104c:	47a0      	blx	r4
  40104e:	4602      	mov	r2, r0
  401050:	697b      	ldr	r3, [r7, #20]
  401052:	4313      	orrs	r3, r2
  401054:	617b      	str	r3, [r7, #20]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_ACCEL_EN;
  401056:	7afb      	ldrb	r3, [r7, #11]
  401058:	f043 0301 	orr.w	r3, r3, #1
  40105c:	b2db      	uxtb	r3, r3
  40105e:	72fb      	strb	r3, [r7, #11]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_GYRO_EN;
  401060:	7afb      	ldrb	r3, [r7, #11]
  401062:	f043 0302 	orr.w	r3, r3, #2
  401066:	b2db      	uxtb	r3, r3
  401068:	72fb      	strb	r3, [r7, #11]
			if(s->fifo_highres_enabled)
  40106a:	687b      	ldr	r3, [r7, #4]
  40106c:	f893 3869 	ldrb.w	r3, [r3, #2153]	; 0x869
  401070:	2b00      	cmp	r3, #0
  401072:	d004      	beq.n	40107e <inv_icm426xx_enable_accel_low_noise_mode+0xd6>
				data |= (uint8_t)ICM426XX_FIFO_CONFIG1_HIRES_EN;
  401074:	7afb      	ldrb	r3, [r7, #11]
  401076:	f043 0310 	orr.w	r3, r3, #16
  40107a:	b2db      	uxtb	r3, r3
  40107c:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  40107e:	f107 030b 	add.w	r3, r7, #11
  401082:	2201      	movs	r2, #1
  401084:	215f      	movs	r1, #95	; 0x5f
  401086:	6878      	ldr	r0, [r7, #4]
  401088:	4c3d      	ldr	r4, [pc, #244]	; (401180 <inv_icm426xx_enable_accel_low_noise_mode+0x1d8>)
  40108a:	47a0      	blx	r4
  40108c:	4602      	mov	r2, r0
  40108e:	697b      	ldr	r3, [r7, #20]
  401090:	4313      	orrs	r3, r2
  401092:	617b      	str	r3, [r7, #20]
		}
		/* Read data endianess in order to process correctly data */
		status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data_endianess);
  401094:	f107 0308 	add.w	r3, r7, #8
  401098:	2201      	movs	r2, #1
  40109a:	214c      	movs	r1, #76	; 0x4c
  40109c:	6878      	ldr	r0, [r7, #4]
  40109e:	4c34      	ldr	r4, [pc, #208]	; (401170 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  4010a0:	47a0      	blx	r4
  4010a2:	4602      	mov	r2, r0
  4010a4:	697b      	ldr	r3, [r7, #20]
  4010a6:	4313      	orrs	r3, r2
  4010a8:	617b      	str	r3, [r7, #20]
		s->endianess_data = data_endianess & BIT_DATA_ENDIAN_MASK;
  4010aa:	7a3b      	ldrb	r3, [r7, #8]
  4010ac:	f003 0310 	and.w	r3, r3, #16
  4010b0:	b2da      	uxtb	r2, r3
  4010b2:	687b      	ldr	r3, [r7, #4]
  4010b4:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
	}
#endif
	
	/* Restore filter BW settings */
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  4010b8:	f107 030b 	add.w	r3, r7, #11
  4010bc:	2201      	movs	r2, #1
  4010be:	2152      	movs	r1, #82	; 0x52
  4010c0:	6878      	ldr	r0, [r7, #4]
  4010c2:	4c2b      	ldr	r4, [pc, #172]	; (401170 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  4010c4:	47a0      	blx	r4
  4010c6:	4602      	mov	r2, r0
  4010c8:	697b      	ldr	r3, [r7, #20]
  4010ca:	4313      	orrs	r3, r2
  4010cc:	617b      	str	r3, [r7, #20]
	data &= (uint8_t)~BIT_GYRO_ACCEL_CONFIG0_ACCEL_FILT_MASK;
  4010ce:	7afb      	ldrb	r3, [r7, #11]
  4010d0:	f003 030f 	and.w	r3, r3, #15
  4010d4:	b2db      	uxtb	r3, r3
  4010d6:	72fb      	strb	r3, [r7, #11]
	data |= s->avg_bw_setting.acc_ln_bw;
  4010d8:	687b      	ldr	r3, [r7, #4]
  4010da:	f893 2874 	ldrb.w	r2, [r3, #2164]	; 0x874
  4010de:	7afb      	ldrb	r3, [r7, #11]
  4010e0:	4313      	orrs	r3, r2
  4010e2:	b2db      	uxtb	r3, r3
  4010e4:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  4010e6:	f107 030b 	add.w	r3, r7, #11
  4010ea:	2201      	movs	r2, #1
  4010ec:	2152      	movs	r1, #82	; 0x52
  4010ee:	6878      	ldr	r0, [r7, #4]
  4010f0:	4c23      	ldr	r4, [pc, #140]	; (401180 <inv_icm426xx_enable_accel_low_noise_mode+0x1d8>)
  4010f2:	47a0      	blx	r4
  4010f4:	4602      	mov	r2, r0
  4010f6:	697b      	ldr	r3, [r7, #20]
  4010f8:	4313      	orrs	r3, r2
  4010fa:	617b      	str	r3, [r7, #20]
	
	/* Enable/Switch the accelerometer in/to low noise mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  4010fc:	f107 030a 	add.w	r3, r7, #10
  401100:	2201      	movs	r2, #1
  401102:	214e      	movs	r1, #78	; 0x4e
  401104:	6878      	ldr	r0, [r7, #4]
  401106:	4c1a      	ldr	r4, [pc, #104]	; (401170 <inv_icm426xx_enable_accel_low_noise_mode+0x1c8>)
  401108:	47a0      	blx	r4
  40110a:	4602      	mov	r2, r0
  40110c:	697b      	ldr	r3, [r7, #20]
  40110e:	4313      	orrs	r3, r2
  401110:	617b      	str	r3, [r7, #20]
	pwr_mgmt0_reg &= (uint8_t)~BIT_PWR_MGMT_0_ACCEL_MODE_MASK;
  401112:	7abb      	ldrb	r3, [r7, #10]
  401114:	f023 0303 	bic.w	r3, r3, #3
  401118:	b2db      	uxtb	r3, r3
  40111a:	72bb      	strb	r3, [r7, #10]
	pwr_mgmt0_reg |= (uint8_t)ICM426XX_PWR_MGMT_0_ACCEL_MODE_LN;
  40111c:	7abb      	ldrb	r3, [r7, #10]
  40111e:	f043 0303 	orr.w	r3, r3, #3
  401122:	b2db      	uxtb	r3, r3
  401124:	72bb      	strb	r3, [r7, #10]
	status |= inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mgmt0_reg);
  401126:	f107 030a 	add.w	r3, r7, #10
  40112a:	2201      	movs	r2, #1
  40112c:	214e      	movs	r1, #78	; 0x4e
  40112e:	6878      	ldr	r0, [r7, #4]
  401130:	4c13      	ldr	r4, [pc, #76]	; (401180 <inv_icm426xx_enable_accel_low_noise_mode+0x1d8>)
  401132:	47a0      	blx	r4
  401134:	4602      	mov	r2, r0
  401136:	697b      	ldr	r3, [r7, #20]
  401138:	4313      	orrs	r3, r2
  40113a:	617b      	str	r3, [r7, #20]
	inv_icm426xx_sleep_us(200);
  40113c:	20c8      	movs	r0, #200	; 0xc8
  40113e:	4b0f      	ldr	r3, [pc, #60]	; (40117c <inv_icm426xx_enable_accel_low_noise_mode+0x1d4>)
  401140:	4798      	blx	r3

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if (accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF) {
  401142:	7cfb      	ldrb	r3, [r7, #19]
  401144:	2b00      	cmp	r3, #0
  401146:	d10d      	bne.n	401164 <inv_icm426xx_enable_accel_low_noise_mode+0x1bc>
		/* First data are noisy after enabling sensor 
		 * Keeps track of the start time to discard first sample
		 */
		if(s->fifo_is_used) {
  401148:	687b      	ldr	r3, [r7, #4]
  40114a:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  40114e:	2b00      	cmp	r3, #0
  401150:	d008      	beq.n	401164 <inv_icm426xx_enable_accel_low_noise_mode+0x1bc>
			s->accel_start_time_us = inv_icm426xx_get_time_us();
  401152:	4b0c      	ldr	r3, [pc, #48]	; (401184 <inv_icm426xx_enable_accel_low_noise_mode+0x1dc>)
  401154:	4798      	blx	r3
  401156:	4603      	mov	r3, r0
  401158:	460c      	mov	r4, r1
  40115a:	687a      	ldr	r2, [r7, #4]
  40115c:	f502 6206 	add.w	r2, r2, #2144	; 0x860
  401160:	e9c2 3400 	strd	r3, r4, [r2]
		}
	}
#endif

	return status;
  401164:	697b      	ldr	r3, [r7, #20]
}
  401166:	4618      	mov	r0, r3
  401168:	371c      	adds	r7, #28
  40116a:	46bd      	mov	sp, r7
  40116c:	bd90      	pop	{r4, r7, pc}
  40116e:	bf00      	nop
  401170:	00402589 	.word	0x00402589
  401174:	00401b01 	.word	0x00401b01
  401178:	00400c91 	.word	0x00400c91
  40117c:	004004ed 	.word	0x004004ed
  401180:	00402655 	.word	0x00402655
  401184:	004004d5 	.word	0x004004d5

00401188 <inv_icm426xx_enable_gyro_low_noise_mode>:
	
	return status;
}

int inv_icm426xx_enable_gyro_low_noise_mode(struct inv_icm426xx * s)
{
  401188:	b590      	push	{r4, r7, lr}
  40118a:	b08b      	sub	sp, #44	; 0x2c
  40118c:	af00      	add	r7, sp, #0
  40118e:	6078      	str	r0, [r7, #4]
	int status = 0;
  401190:	2300      	movs	r3, #0
  401192:	627b      	str	r3, [r7, #36]	; 0x24

	/* Powering the gyroscope on immediately after powering it off can result in device failure. 
	 * The gyroscope proof mass can continue vibrating after it has been powered off, 
	 * and powering it back on immediately can result in unpredictable proof mass movement.
	 * After powering the gyroscope off, a period of > 150ms should be allowed to elapse before it is powered back on. */
	if (s->gyro_power_off_tmst != UINT32_MAX) {
  401194:	687b      	ldr	r3, [r7, #4]
  401196:	f603 0378 	addw	r3, r3, #2168	; 0x878
  40119a:	e9d3 3400 	ldrd	r3, r4, [r3]
  40119e:	2c00      	cmp	r4, #0
  4011a0:	bf08      	it	eq
  4011a2:	f1b3 3fff 	cmpeq.w	r3, #4294967295
  4011a6:	d02a      	beq.n	4011fe <inv_icm426xx_enable_gyro_low_noise_mode+0x76>
		current_time = inv_icm426xx_get_time_us();
  4011a8:	4b83      	ldr	r3, [pc, #524]	; (4013b8 <inv_icm426xx_enable_gyro_low_noise_mode+0x230>)
  4011aa:	4798      	blx	r3
  4011ac:	e9c7 0106 	strd	r0, r1, [r7, #24]
		/* Handle rollover */
		if (current_time <= s->gyro_power_off_tmst)
  4011b0:	687b      	ldr	r3, [r7, #4]
  4011b2:	f603 0378 	addw	r3, r3, #2168	; 0x878
  4011b6:	e9d3 1200 	ldrd	r1, r2, [r3]
  4011ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  4011be:	42a2      	cmp	r2, r4
  4011c0:	bf08      	it	eq
  4011c2:	4299      	cmpeq	r1, r3
  4011c4:	d307      	bcc.n	4011d6 <inv_icm426xx_enable_gyro_low_noise_mode+0x4e>
			current_time += UINT32_MAX;
  4011c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
  4011ca:	f113 33ff 	adds.w	r3, r3, #4294967295
  4011ce:	f144 0400 	adc.w	r4, r4, #0
  4011d2:	e9c7 3406 	strd	r3, r4, [r7, #24]
		/* If 150 ms are not elapsed since power-off error is returned */
		if ((current_time - s->gyro_power_off_tmst) <= (150 * 1000))
  4011d6:	687b      	ldr	r3, [r7, #4]
  4011d8:	f603 0378 	addw	r3, r3, #2168	; 0x878
  4011dc:	e9d3 3400 	ldrd	r3, r4, [r3]
  4011e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
  4011e4:	1acb      	subs	r3, r1, r3
  4011e6:	eb62 0404 	sbc.w	r4, r2, r4
  4011ea:	4974      	ldr	r1, [pc, #464]	; (4013bc <inv_icm426xx_enable_gyro_low_noise_mode+0x234>)
  4011ec:	f04f 0200 	mov.w	r2, #0
  4011f0:	42a2      	cmp	r2, r4
  4011f2:	bf08      	it	eq
  4011f4:	4299      	cmpeq	r1, r3
  4011f6:	d302      	bcc.n	4011fe <inv_icm426xx_enable_gyro_low_noise_mode+0x76>
			return INV_ERROR_HW;
  4011f8:	f06f 0309 	mvn.w	r3, #9
  4011fc:	e0d8      	b.n	4013b0 <inv_icm426xx_enable_gyro_low_noise_mode+0x228>
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t accel_mode;
	ICM426XX_ACCEL_CONFIG0_ODR_t acc_odr_bitfield;
	uint32_t accel_odr_us;
	uint8_t accel_cfg_0_reg;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  4011fe:	f107 030e 	add.w	r3, r7, #14
  401202:	2201      	movs	r2, #1
  401204:	214e      	movs	r1, #78	; 0x4e
  401206:	6878      	ldr	r0, [r7, #4]
  401208:	4c6d      	ldr	r4, [pc, #436]	; (4013c0 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  40120a:	47a0      	blx	r4
  40120c:	4602      	mov	r2, r0
  40120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401210:	4313      	orrs	r3, r2
  401212:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_mode = (ICM426XX_PWR_MGMT_0_GYRO_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_GYRO_MODE_MASK);
  401214:	7bbb      	ldrb	r3, [r7, #14]
  401216:	f003 030c 	and.w	r3, r3, #12
  40121a:	75fb      	strb	r3, [r7, #23]
	accel_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  40121c:	7bbb      	ldrb	r3, [r7, #14]
  40121e:	f003 0303 	and.w	r3, r3, #3
  401222:	75bb      	strb	r3, [r7, #22]

	/* Subroutines need to be followed when enabling or disabling sensor to ensure ODR regularity
	 * Check if the accelerometer is the only one enabled 
	 */	
	if ((accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP) &&
  401224:	7dbb      	ldrb	r3, [r7, #22]
  401226:	2b02      	cmp	r3, #2
  401228:	d124      	bne.n	401274 <inv_icm426xx_enable_gyro_low_noise_mode+0xec>
  40122a:	7dfb      	ldrb	r3, [r7, #23]
  40122c:	2b00      	cmp	r3, #0
  40122e:	d002      	beq.n	401236 <inv_icm426xx_enable_gyro_low_noise_mode+0xae>
	    ((gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) || (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_STANDBY))) {
  401230:	7dfb      	ldrb	r3, [r7, #23]
  401232:	2b04      	cmp	r3, #4
  401234:	d11e      	bne.n	401274 <inv_icm426xx_enable_gyro_low_noise_mode+0xec>
		/* Get accelerometer's ODR for next required wait */
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  401236:	f107 030d 	add.w	r3, r7, #13
  40123a:	2201      	movs	r2, #1
  40123c:	2150      	movs	r1, #80	; 0x50
  40123e:	6878      	ldr	r0, [r7, #4]
  401240:	4c5f      	ldr	r4, [pc, #380]	; (4013c0 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401242:	47a0      	blx	r4
  401244:	4602      	mov	r2, r0
  401246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401248:	4313      	orrs	r3, r2
  40124a:	627b      	str	r3, [r7, #36]	; 0x24
		acc_odr_bitfield = (ICM426XX_ACCEL_CONFIG0_ODR_t)(accel_cfg_0_reg & BIT_ACCEL_CONFIG0_ODR_MASK);
  40124c:	7b7b      	ldrb	r3, [r7, #13]
  40124e:	f003 030f 	and.w	r3, r3, #15
  401252:	757b      	strb	r3, [r7, #21]
		accel_odr_us = inv_icm426xx_convert_odr_bitfield_to_us(acc_odr_bitfield);
  401254:	7d7b      	ldrb	r3, [r7, #21]
  401256:	4618      	mov	r0, r3
  401258:	4b5a      	ldr	r3, [pc, #360]	; (4013c4 <inv_icm426xx_enable_gyro_low_noise_mode+0x23c>)
  40125a:	4798      	blx	r3
  40125c:	6138      	str	r0, [r7, #16]
		/* Select the RC OSC as clock source for the accelerometer */
		status |= inv_icm426xx_force_clock_source(s, ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_RCOSC);
  40125e:	2108      	movs	r1, #8
  401260:	6878      	ldr	r0, [r7, #4]
  401262:	4b59      	ldr	r3, [pc, #356]	; (4013c8 <inv_icm426xx_enable_gyro_low_noise_mode+0x240>)
  401264:	4798      	blx	r3
  401266:	4602      	mov	r2, r0
  401268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40126a:	4313      	orrs	r3, r2
  40126c:	627b      	str	r3, [r7, #36]	; 0x24
		/* Wait one accel ODR before enabling the gyroscope */
		inv_icm426xx_sleep_us(accel_odr_us);
  40126e:	6938      	ldr	r0, [r7, #16]
  401270:	4b56      	ldr	r3, [pc, #344]	; (4013cc <inv_icm426xx_enable_gyro_low_noise_mode+0x244>)
  401272:	4798      	blx	r3
	}

	/* FIFO contains Gyro and Accel data if enabled on the OIS path
	 * Dynamically configure the FIFO to publish data only for sensors explicitely enabled on the UI path 
	 */
	if(accel_mode == ICM426XX_PWR_MGMT_0_ACCEL_MODE_OFF && gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  401274:	7dbb      	ldrb	r3, [r7, #22]
  401276:	2b00      	cmp	r3, #0
  401278:	d143      	bne.n	401302 <inv_icm426xx_enable_gyro_low_noise_mode+0x17a>
  40127a:	7dfb      	ldrb	r3, [r7, #23]
  40127c:	2b00      	cmp	r3, #0
  40127e:	d140      	bne.n	401302 <inv_icm426xx_enable_gyro_low_noise_mode+0x17a>
		uint8_t data_endianess;

		if(s->fifo_is_used) {
  401280:	687b      	ldr	r3, [r7, #4]
  401282:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401286:	2b00      	cmp	r3, #0
  401288:	d029      	beq.n	4012de <inv_icm426xx_enable_gyro_low_noise_mode+0x156>
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  40128a:	f107 030f 	add.w	r3, r7, #15
  40128e:	2201      	movs	r2, #1
  401290:	215f      	movs	r1, #95	; 0x5f
  401292:	6878      	ldr	r0, [r7, #4]
  401294:	4c4a      	ldr	r4, [pc, #296]	; (4013c0 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401296:	47a0      	blx	r4
  401298:	4602      	mov	r2, r0
  40129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40129c:	4313      	orrs	r3, r2
  40129e:	627b      	str	r3, [r7, #36]	; 0x24
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_ACCEL_EN;
  4012a0:	7bfb      	ldrb	r3, [r7, #15]
  4012a2:	f043 0301 	orr.w	r3, r3, #1
  4012a6:	b2db      	uxtb	r3, r3
  4012a8:	73fb      	strb	r3, [r7, #15]
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_GYRO_EN;
  4012aa:	7bfb      	ldrb	r3, [r7, #15]
  4012ac:	f043 0302 	orr.w	r3, r3, #2
  4012b0:	b2db      	uxtb	r3, r3
  4012b2:	73fb      	strb	r3, [r7, #15]
			if(s->fifo_highres_enabled)
  4012b4:	687b      	ldr	r3, [r7, #4]
  4012b6:	f893 3869 	ldrb.w	r3, [r3, #2153]	; 0x869
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	d004      	beq.n	4012c8 <inv_icm426xx_enable_gyro_low_noise_mode+0x140>
				data |= (uint8_t)ICM426XX_FIFO_CONFIG1_HIRES_EN;
  4012be:	7bfb      	ldrb	r3, [r7, #15]
  4012c0:	f043 0310 	orr.w	r3, r3, #16
  4012c4:	b2db      	uxtb	r3, r3
  4012c6:	73fb      	strb	r3, [r7, #15]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  4012c8:	f107 030f 	add.w	r3, r7, #15
  4012cc:	2201      	movs	r2, #1
  4012ce:	215f      	movs	r1, #95	; 0x5f
  4012d0:	6878      	ldr	r0, [r7, #4]
  4012d2:	4c3f      	ldr	r4, [pc, #252]	; (4013d0 <inv_icm426xx_enable_gyro_low_noise_mode+0x248>)
  4012d4:	47a0      	blx	r4
  4012d6:	4602      	mov	r2, r0
  4012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012da:	4313      	orrs	r3, r2
  4012dc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		/* Read data endianess in order to process correctly data */
		status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data_endianess);
  4012de:	f107 030c 	add.w	r3, r7, #12
  4012e2:	2201      	movs	r2, #1
  4012e4:	214c      	movs	r1, #76	; 0x4c
  4012e6:	6878      	ldr	r0, [r7, #4]
  4012e8:	4c35      	ldr	r4, [pc, #212]	; (4013c0 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  4012ea:	47a0      	blx	r4
  4012ec:	4602      	mov	r2, r0
  4012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4012f0:	4313      	orrs	r3, r2
  4012f2:	627b      	str	r3, [r7, #36]	; 0x24
		s->endianess_data = data_endianess & BIT_DATA_ENDIAN_MASK;
  4012f4:	7b3b      	ldrb	r3, [r7, #12]
  4012f6:	f003 0310 	and.w	r3, r3, #16
  4012fa:	b2da      	uxtb	r2, r3
  4012fc:	687b      	ldr	r3, [r7, #4]
  4012fe:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
	}
#endif

	/* Restore filter BW settings */
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401302:	f107 030f 	add.w	r3, r7, #15
  401306:	2201      	movs	r2, #1
  401308:	2152      	movs	r1, #82	; 0x52
  40130a:	6878      	ldr	r0, [r7, #4]
  40130c:	4c2c      	ldr	r4, [pc, #176]	; (4013c0 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  40130e:	47a0      	blx	r4
  401310:	4602      	mov	r2, r0
  401312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401314:	4313      	orrs	r3, r2
  401316:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_GYRO_ACCEL_CONFIG0_GYRO_FILT_MASK;
  401318:	7bfb      	ldrb	r3, [r7, #15]
  40131a:	f023 030f 	bic.w	r3, r3, #15
  40131e:	b2db      	uxtb	r3, r3
  401320:	73fb      	strb	r3, [r7, #15]
	data |= s->avg_bw_setting.gyr_ln_bw;
  401322:	687b      	ldr	r3, [r7, #4]
  401324:	f893 2875 	ldrb.w	r2, [r3, #2165]	; 0x875
  401328:	7bfb      	ldrb	r3, [r7, #15]
  40132a:	4313      	orrs	r3, r2
  40132c:	b2db      	uxtb	r3, r3
  40132e:	73fb      	strb	r3, [r7, #15]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_GYRO_CONFIG0, 1, &data);
  401330:	f107 030f 	add.w	r3, r7, #15
  401334:	2201      	movs	r2, #1
  401336:	2152      	movs	r1, #82	; 0x52
  401338:	6878      	ldr	r0, [r7, #4]
  40133a:	4c25      	ldr	r4, [pc, #148]	; (4013d0 <inv_icm426xx_enable_gyro_low_noise_mode+0x248>)
  40133c:	47a0      	blx	r4
  40133e:	4602      	mov	r2, r0
  401340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401342:	4313      	orrs	r3, r2
  401344:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enable/Switch the gyroscope in/to low noise mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401346:	f107 030e 	add.w	r3, r7, #14
  40134a:	2201      	movs	r2, #1
  40134c:	214e      	movs	r1, #78	; 0x4e
  40134e:	6878      	ldr	r0, [r7, #4]
  401350:	4c1b      	ldr	r4, [pc, #108]	; (4013c0 <inv_icm426xx_enable_gyro_low_noise_mode+0x238>)
  401352:	47a0      	blx	r4
  401354:	4602      	mov	r2, r0
  401356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401358:	4313      	orrs	r3, r2
  40135a:	627b      	str	r3, [r7, #36]	; 0x24
	pwr_mngt_0_reg &= (uint8_t)~BIT_PWR_MGMT_0_GYRO_MODE_MASK;
  40135c:	7bbb      	ldrb	r3, [r7, #14]
  40135e:	f023 030c 	bic.w	r3, r3, #12
  401362:	b2db      	uxtb	r3, r3
  401364:	73bb      	strb	r3, [r7, #14]
	pwr_mngt_0_reg |= (uint8_t)ICM426XX_PWR_MGMT_0_GYRO_MODE_LN;
  401366:	7bbb      	ldrb	r3, [r7, #14]
  401368:	f043 030c 	orr.w	r3, r3, #12
  40136c:	b2db      	uxtb	r3, r3
  40136e:	73bb      	strb	r3, [r7, #14]
	status |= inv_icm426xx_write_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401370:	f107 030e 	add.w	r3, r7, #14
  401374:	2201      	movs	r2, #1
  401376:	214e      	movs	r1, #78	; 0x4e
  401378:	6878      	ldr	r0, [r7, #4]
  40137a:	4c15      	ldr	r4, [pc, #84]	; (4013d0 <inv_icm426xx_enable_gyro_low_noise_mode+0x248>)
  40137c:	47a0      	blx	r4
  40137e:	4602      	mov	r2, r0
  401380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401382:	4313      	orrs	r3, r2
  401384:	627b      	str	r3, [r7, #36]	; 0x24
	inv_icm426xx_sleep_us(200);
  401386:	20c8      	movs	r0, #200	; 0xc8
  401388:	4b10      	ldr	r3, [pc, #64]	; (4013cc <inv_icm426xx_enable_gyro_low_noise_mode+0x244>)
  40138a:	4798      	blx	r3
	
#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
	if (gyro_mode == ICM426XX_PWR_MGMT_0_GYRO_MODE_OFF) {
  40138c:	7dfb      	ldrb	r3, [r7, #23]
  40138e:	2b00      	cmp	r3, #0
  401390:	d10d      	bne.n	4013ae <inv_icm426xx_enable_gyro_low_noise_mode+0x226>
		/* First data are noisy after enabling sensor 
		 * Keeps track of the start time to discard first sample
		 */
		if(s->fifo_is_used) {
  401392:	687b      	ldr	r3, [r7, #4]
  401394:	f893 386a 	ldrb.w	r3, [r3, #2154]	; 0x86a
  401398:	2b00      	cmp	r3, #0
  40139a:	d008      	beq.n	4013ae <inv_icm426xx_enable_gyro_low_noise_mode+0x226>
			s->gyro_start_time_us = inv_icm426xx_get_time_us();
  40139c:	4b06      	ldr	r3, [pc, #24]	; (4013b8 <inv_icm426xx_enable_gyro_low_noise_mode+0x230>)
  40139e:	4798      	blx	r3
  4013a0:	4603      	mov	r3, r0
  4013a2:	460c      	mov	r4, r1
  4013a4:	687a      	ldr	r2, [r7, #4]
  4013a6:	f602 0258 	addw	r2, r2, #2136	; 0x858
  4013aa:	e9c2 3400 	strd	r3, r4, [r2]
		}
	}
#endif
	
	return status;
  4013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  4013b0:	4618      	mov	r0, r3
  4013b2:	372c      	adds	r7, #44	; 0x2c
  4013b4:	46bd      	mov	sp, r7
  4013b6:	bd90      	pop	{r4, r7, pc}
  4013b8:	004004d5 	.word	0x004004d5
  4013bc:	000249f0 	.word	0x000249f0
  4013c0:	00402589 	.word	0x00402589
  4013c4:	00401b01 	.word	0x00401b01
  4013c8:	00400c91 	.word	0x00400c91
  4013cc:	004004ed 	.word	0x004004ed
  4013d0:	00402655 	.word	0x00402655

004013d4 <inv_icm426xx_configure_timestamp_resolution>:

	return status;
}

int inv_icm426xx_configure_timestamp_resolution(struct inv_icm426xx * s, ICM426XX_TMST_CONFIG_RESOL_t resol)
{
  4013d4:	b590      	push	{r4, r7, lr}
  4013d6:	b085      	sub	sp, #20
  4013d8:	af00      	add	r7, sp, #0
  4013da:	6078      	str	r0, [r7, #4]
  4013dc:	460b      	mov	r3, r1
  4013de:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  4013e0:	2300      	movs	r3, #0
  4013e2:	60fb      	str	r3, [r7, #12]
	uint8_t value;

	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &value);
  4013e4:	f107 030b 	add.w	r3, r7, #11
  4013e8:	2201      	movs	r2, #1
  4013ea:	2154      	movs	r1, #84	; 0x54
  4013ec:	6878      	ldr	r0, [r7, #4]
  4013ee:	4c10      	ldr	r4, [pc, #64]	; (401430 <inv_icm426xx_configure_timestamp_resolution+0x5c>)
  4013f0:	47a0      	blx	r4
  4013f2:	4602      	mov	r2, r0
  4013f4:	68fb      	ldr	r3, [r7, #12]
  4013f6:	4313      	orrs	r3, r2
  4013f8:	60fb      	str	r3, [r7, #12]
	value &= (uint8_t)~BIT_TMST_CONFIG_RESOL_MASK;
  4013fa:	7afb      	ldrb	r3, [r7, #11]
  4013fc:	f023 0308 	bic.w	r3, r3, #8
  401400:	b2db      	uxtb	r3, r3
  401402:	72fb      	strb	r3, [r7, #11]
	value |= (uint8_t)resol;
  401404:	7afa      	ldrb	r2, [r7, #11]
  401406:	78fb      	ldrb	r3, [r7, #3]
  401408:	4313      	orrs	r3, r2
  40140a:	b2db      	uxtb	r3, r3
  40140c:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &value);
  40140e:	f107 030b 	add.w	r3, r7, #11
  401412:	2201      	movs	r2, #1
  401414:	2154      	movs	r1, #84	; 0x54
  401416:	6878      	ldr	r0, [r7, #4]
  401418:	4c06      	ldr	r4, [pc, #24]	; (401434 <inv_icm426xx_configure_timestamp_resolution+0x60>)
  40141a:	47a0      	blx	r4
  40141c:	4602      	mov	r2, r0
  40141e:	68fb      	ldr	r3, [r7, #12]
  401420:	4313      	orrs	r3, r2
  401422:	60fb      	str	r3, [r7, #12]

	return status;
  401424:	68fb      	ldr	r3, [r7, #12]
}
  401426:	4618      	mov	r0, r3
  401428:	3714      	adds	r7, #20
  40142a:	46bd      	mov	sp, r7
  40142c:	bd90      	pop	{r4, r7, pc}
  40142e:	bf00      	nop
  401430:	00402589 	.word	0x00402589
  401434:	00402655 	.word	0x00402655

00401438 <inv_icm426xx_get_config_int1>:

	return status;
}

int inv_icm426xx_get_config_int1(struct inv_icm426xx * s, inv_icm426xx_interrupt_parameter_t * interrupt_to_configure)
{
  401438:	b590      	push	{r4, r7, lr}
  40143a:	b085      	sub	sp, #20
  40143c:	af00      	add	r7, sp, #0
  40143e:	6078      	str	r0, [r7, #4]
  401440:	6039      	str	r1, [r7, #0]
	int status = 0;
  401442:	2300      	movs	r3, #0
  401444:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {0};
  401446:	f107 0308 	add.w	r3, r7, #8
  40144a:	2100      	movs	r1, #0
  40144c:	460a      	mov	r2, r1
  40144e:	801a      	strh	r2, [r3, #0]
  401450:	460a      	mov	r2, r1
  401452:	709a      	strb	r2, [r3, #2]

	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE0, 2, data); /* burst read int_source0/int_source1 */
  401454:	f107 0308 	add.w	r3, r7, #8
  401458:	2202      	movs	r2, #2
  40145a:	2165      	movs	r1, #101	; 0x65
  40145c:	6878      	ldr	r0, [r7, #4]
  40145e:	4c43      	ldr	r4, [pc, #268]	; (40156c <inv_icm426xx_get_config_int1+0x134>)
  401460:	47a0      	blx	r4
  401462:	4602      	mov	r2, r0
  401464:	68fb      	ldr	r3, [r7, #12]
  401466:	4313      	orrs	r3, r2
  401468:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  40146a:	2104      	movs	r1, #4
  40146c:	6878      	ldr	r0, [r7, #4]
  40146e:	4b40      	ldr	r3, [pc, #256]	; (401570 <inv_icm426xx_get_config_int1+0x138>)
  401470:	4798      	blx	r3
  401472:	4602      	mov	r2, r0
  401474:	68fb      	ldr	r3, [r7, #12]
  401476:	4313      	orrs	r3, r2
  401478:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE6_B4, 1, &data[2]); /* int_source6 */
  40147a:	f107 0308 	add.w	r3, r7, #8
  40147e:	3302      	adds	r3, #2
  401480:	2201      	movs	r2, #1
  401482:	214d      	movs	r1, #77	; 0x4d
  401484:	6878      	ldr	r0, [r7, #4]
  401486:	4c39      	ldr	r4, [pc, #228]	; (40156c <inv_icm426xx_get_config_int1+0x134>)
  401488:	47a0      	blx	r4
  40148a:	4602      	mov	r2, r0
  40148c:	68fb      	ldr	r3, [r7, #12]
  40148e:	4313      	orrs	r3, r2
  401490:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  401492:	2100      	movs	r1, #0
  401494:	6878      	ldr	r0, [r7, #4]
  401496:	4b36      	ldr	r3, [pc, #216]	; (401570 <inv_icm426xx_get_config_int1+0x138>)
  401498:	4798      	blx	r3
  40149a:	4602      	mov	r2, r0
  40149c:	68fb      	ldr	r3, [r7, #12]
  40149e:	4313      	orrs	r3, r2
  4014a0:	60fb      	str	r3, [r7, #12]

	/* Handles INT_SOURCE0 bits */
	interrupt_to_configure->INV_ICM426XX_UI_FSYNC  = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_UI_FSYNC_INT1_EN)  >> BIT_INT_UI_FSYNC_INT_EN_POS);
  4014a2:	7a3b      	ldrb	r3, [r7, #8]
  4014a4:	119b      	asrs	r3, r3, #6
  4014a6:	f003 0301 	and.w	r3, r3, #1
  4014aa:	b2da      	uxtb	r2, r3
  4014ac:	683b      	ldr	r3, [r7, #0]
  4014ae:	701a      	strb	r2, [r3, #0]
	interrupt_to_configure->INV_ICM426XX_UI_DRDY   = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_UI_DRDY_INT1_EN)   >> BIT_INT_UI_DRDY_INT_EN_POS);
  4014b0:	7a3b      	ldrb	r3, [r7, #8]
  4014b2:	10db      	asrs	r3, r3, #3
  4014b4:	f003 0301 	and.w	r3, r3, #1
  4014b8:	b2da      	uxtb	r2, r3
  4014ba:	683b      	ldr	r3, [r7, #0]
  4014bc:	705a      	strb	r2, [r3, #1]
	interrupt_to_configure->INV_ICM426XX_FIFO_THS  = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_FIFO_THS_INT1_EN)  >> BIT_INT_FIFO_THS_INT_EN_POS);
  4014be:	7a3b      	ldrb	r3, [r7, #8]
  4014c0:	109b      	asrs	r3, r3, #2
  4014c2:	f003 0301 	and.w	r3, r3, #1
  4014c6:	b2da      	uxtb	r2, r3
  4014c8:	683b      	ldr	r3, [r7, #0]
  4014ca:	709a      	strb	r2, [r3, #2]
	interrupt_to_configure->INV_ICM426XX_FIFO_FULL = (inv_icm426xx_interrupt_value) ((data[0] & BIT_INT_SOURCE0_FIFO_FULL_INT1_EN) >> BIT_INT_FIFO_FULL_INT_EN_POS);
  4014cc:	7a3b      	ldrb	r3, [r7, #8]
  4014ce:	105b      	asrs	r3, r3, #1
  4014d0:	f003 0301 	and.w	r3, r3, #1
  4014d4:	b2da      	uxtb	r2, r3
  4014d6:	683b      	ldr	r3, [r7, #0]
  4014d8:	70da      	strb	r2, [r3, #3]

	/* Handles INT_SOURCE1 bits */
	interrupt_to_configure->INV_ICM426XX_SMD   = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_SMD_INT1_EN )   >> BIT_INT_SMD_INT_EN_POS);
  4014da:	7a7b      	ldrb	r3, [r7, #9]
  4014dc:	10db      	asrs	r3, r3, #3
  4014de:	f003 0301 	and.w	r3, r3, #1
  4014e2:	b2da      	uxtb	r2, r3
  4014e4:	683b      	ldr	r3, [r7, #0]
  4014e6:	711a      	strb	r2, [r3, #4]
	interrupt_to_configure->INV_ICM426XX_WOM_X = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_WOM_X_INT1_EN ) >> BIT_INT_WOM_X_INT_EN_POS);
  4014e8:	7a7b      	ldrb	r3, [r7, #9]
  4014ea:	f003 0301 	and.w	r3, r3, #1
  4014ee:	b2da      	uxtb	r2, r3
  4014f0:	683b      	ldr	r3, [r7, #0]
  4014f2:	715a      	strb	r2, [r3, #5]
	interrupt_to_configure->INV_ICM426XX_WOM_Y = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_WOM_Y_INT1_EN ) >> BIT_INT_WOM_Y_INT_EN_POS);
  4014f4:	7a7b      	ldrb	r3, [r7, #9]
  4014f6:	105b      	asrs	r3, r3, #1
  4014f8:	f003 0301 	and.w	r3, r3, #1
  4014fc:	b2da      	uxtb	r2, r3
  4014fe:	683b      	ldr	r3, [r7, #0]
  401500:	719a      	strb	r2, [r3, #6]
	interrupt_to_configure->INV_ICM426XX_WOM_Z = (inv_icm426xx_interrupt_value) ((data[1] & BIT_INT_SOURCE1_WOM_Z_INT1_EN ) >> BIT_INT_WOM_Z_INT_EN_POS);
  401502:	7a7b      	ldrb	r3, [r7, #9]
  401504:	109b      	asrs	r3, r3, #2
  401506:	f003 0301 	and.w	r3, r3, #1
  40150a:	b2da      	uxtb	r2, r3
  40150c:	683b      	ldr	r3, [r7, #0]
  40150e:	71da      	strb	r2, [r3, #7]

	/* Handles INT_SOURCE6 bits */
	interrupt_to_configure->INV_ICM426XX_STEP_DET      = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_STEP_DET_INT1_EN)      >> BIT_INT_STEP_DET_INT_EN_POS);
  401510:	7abb      	ldrb	r3, [r7, #10]
  401512:	115b      	asrs	r3, r3, #5
  401514:	f003 0301 	and.w	r3, r3, #1
  401518:	b2da      	uxtb	r2, r3
  40151a:	683b      	ldr	r3, [r7, #0]
  40151c:	721a      	strb	r2, [r3, #8]
	interrupt_to_configure->INV_ICM426XX_STEP_CNT_OVFL = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_STEP_CNT_OVFL_INT1_EN) >> BIT_INT_STEP_CNT_OVFL_INT_EN_POS);
  40151e:	7abb      	ldrb	r3, [r7, #10]
  401520:	111b      	asrs	r3, r3, #4
  401522:	f003 0301 	and.w	r3, r3, #1
  401526:	b2da      	uxtb	r2, r3
  401528:	683b      	ldr	r3, [r7, #0]
  40152a:	725a      	strb	r2, [r3, #9]
	interrupt_to_configure->INV_ICM426XX_TILT_DET      = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_TILT_DET_INT1_EN)      >> BIT_INT_TILT_DET_INT_EN_POS);
  40152c:	7abb      	ldrb	r3, [r7, #10]
  40152e:	10db      	asrs	r3, r3, #3
  401530:	f003 0301 	and.w	r3, r3, #1
  401534:	b2da      	uxtb	r2, r3
  401536:	683b      	ldr	r3, [r7, #0]
  401538:	729a      	strb	r2, [r3, #10]
	interrupt_to_configure->INV_ICM426XX_SLEEP_DET     = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_SLEEP_DET_INT1_EN)     >> BIT_INT_SLEEP_DET_INT_EN_POS);
  40153a:	7abb      	ldrb	r3, [r7, #10]
  40153c:	105b      	asrs	r3, r3, #1
  40153e:	f003 0301 	and.w	r3, r3, #1
  401542:	b2da      	uxtb	r2, r3
  401544:	683b      	ldr	r3, [r7, #0]
  401546:	72da      	strb	r2, [r3, #11]
	interrupt_to_configure->INV_ICM426XX_WAKE_DET      = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_WAKE_DET_INT1_EN)      >> BIT_INT_WAKE_DET_INT_EN_POS);
  401548:	7abb      	ldrb	r3, [r7, #10]
  40154a:	109b      	asrs	r3, r3, #2
  40154c:	f003 0301 	and.w	r3, r3, #1
  401550:	b2da      	uxtb	r2, r3
  401552:	683b      	ldr	r3, [r7, #0]
  401554:	731a      	strb	r2, [r3, #12]
	interrupt_to_configure->INV_ICM426XX_TAP_DET       = (inv_icm426xx_interrupt_value) ((data[2] & BIT_INT_SOURCE6_TAP_DET_INT1_EN)       >> BIT_INT_TAP_DET_INT_EN_POS);
  401556:	7abb      	ldrb	r3, [r7, #10]
  401558:	f003 0301 	and.w	r3, r3, #1
  40155c:	b2da      	uxtb	r2, r3
  40155e:	683b      	ldr	r3, [r7, #0]
  401560:	735a      	strb	r2, [r3, #13]

	return status;
  401562:	68fb      	ldr	r3, [r7, #12]
}
  401564:	4618      	mov	r0, r3
  401566:	3714      	adds	r7, #20
  401568:	46bd      	mov	sp, r7
  40156a:	bd90      	pop	{r4, r7, pc}
  40156c:	00402589 	.word	0x00402589
  401570:	004009d9 	.word	0x004009d9

00401574 <inv_icm426xx_set_config_ibi>:

	return status;
}

int inv_icm426xx_set_config_ibi(struct inv_icm426xx * s, inv_icm426xx_interrupt_parameter_t * interrupt_to_configure)
{
  401574:	b590      	push	{r4, r7, lr}
  401576:	b085      	sub	sp, #20
  401578:	af00      	add	r7, sp, #0
  40157a:	6078      	str	r0, [r7, #4]
  40157c:	6039      	str	r1, [r7, #0]
	int status = 0;
  40157e:	2300      	movs	r3, #0
  401580:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {0};
  401582:	f107 0308 	add.w	r3, r7, #8
  401586:	2100      	movs	r1, #0
  401588:	460a      	mov	r2, r1
  40158a:	801a      	strh	r2, [r3, #0]
  40158c:	460a      	mov	r2, r1
  40158e:	709a      	strb	r2, [r3, #2]

	status |= inv_icm426xx_set_reg_bank(s, 4);
  401590:	2104      	movs	r1, #4
  401592:	6878      	ldr	r0, [r7, #4]
  401594:	4b6a      	ldr	r3, [pc, #424]	; (401740 <inv_icm426xx_set_config_ibi+0x1cc>)
  401596:	4798      	blx	r3
  401598:	4602      	mov	r2, r0
  40159a:	68fb      	ldr	r3, [r7, #12]
  40159c:	4313      	orrs	r3, r2
  40159e:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE8_B4, 3, data); /* burst read int_source8/int_source9/int_source10 */
  4015a0:	f107 0308 	add.w	r3, r7, #8
  4015a4:	2203      	movs	r2, #3
  4015a6:	214f      	movs	r1, #79	; 0x4f
  4015a8:	6878      	ldr	r0, [r7, #4]
  4015aa:	4c66      	ldr	r4, [pc, #408]	; (401744 <inv_icm426xx_set_config_ibi+0x1d0>)
  4015ac:	47a0      	blx	r4
  4015ae:	4602      	mov	r2, r0
  4015b0:	68fb      	ldr	r3, [r7, #12]
  4015b2:	4313      	orrs	r3, r2
  4015b4:	60fb      	str	r3, [r7, #12]

	/* Set INT_SOURCE8 bits */
	data[0] &= (uint8_t)~(BIT_INT_SOURCE8_UI_FSYNC_IBI_EN 
  4015b6:	7a3b      	ldrb	r3, [r7, #8]
  4015b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
  4015bc:	b2db      	uxtb	r3, r3
  4015be:	723b      	strb	r3, [r7, #8]
			| BIT_INT_SOURCE8_UI_DRDY_IBI_EN 
			| BIT_INT_SOURCE8_FIFO_THS_IBI_EN 
			| BIT_INT_SOURCE8_FIFO_FULL_IBI_EN);
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_FSYNC != 0)  << BIT_INT_UI_FSYNC_IBI_EN_POS);
  4015c0:	7a3b      	ldrb	r3, [r7, #8]
  4015c2:	b25a      	sxtb	r2, r3
  4015c4:	683b      	ldr	r3, [r7, #0]
  4015c6:	781b      	ldrb	r3, [r3, #0]
  4015c8:	2b00      	cmp	r3, #0
  4015ca:	d001      	beq.n	4015d0 <inv_icm426xx_set_config_ibi+0x5c>
  4015cc:	2320      	movs	r3, #32
  4015ce:	e000      	b.n	4015d2 <inv_icm426xx_set_config_ibi+0x5e>
  4015d0:	2300      	movs	r3, #0
  4015d2:	4313      	orrs	r3, r2
  4015d4:	b25b      	sxtb	r3, r3
  4015d6:	b2db      	uxtb	r3, r3
  4015d8:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_DRDY != 0)   << BIT_INT_UI_DRDY_IBI_EN_POS);
  4015da:	7a3b      	ldrb	r3, [r7, #8]
  4015dc:	b25a      	sxtb	r2, r3
  4015de:	683b      	ldr	r3, [r7, #0]
  4015e0:	785b      	ldrb	r3, [r3, #1]
  4015e2:	2b00      	cmp	r3, #0
  4015e4:	d001      	beq.n	4015ea <inv_icm426xx_set_config_ibi+0x76>
  4015e6:	2308      	movs	r3, #8
  4015e8:	e000      	b.n	4015ec <inv_icm426xx_set_config_ibi+0x78>
  4015ea:	2300      	movs	r3, #0
  4015ec:	4313      	orrs	r3, r2
  4015ee:	b25b      	sxtb	r3, r3
  4015f0:	b2db      	uxtb	r3, r3
  4015f2:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_THS != 0)  << BIT_INT_FIFO_THS_IBI_EN_POS);
  4015f4:	7a3b      	ldrb	r3, [r7, #8]
  4015f6:	b25a      	sxtb	r2, r3
  4015f8:	683b      	ldr	r3, [r7, #0]
  4015fa:	789b      	ldrb	r3, [r3, #2]
  4015fc:	2b00      	cmp	r3, #0
  4015fe:	d001      	beq.n	401604 <inv_icm426xx_set_config_ibi+0x90>
  401600:	2304      	movs	r3, #4
  401602:	e000      	b.n	401606 <inv_icm426xx_set_config_ibi+0x92>
  401604:	2300      	movs	r3, #0
  401606:	4313      	orrs	r3, r2
  401608:	b25b      	sxtb	r3, r3
  40160a:	b2db      	uxtb	r3, r3
  40160c:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_FULL != 0) << BIT_INT_FIFO_FULL_IBI_EN_POS);
  40160e:	7a3b      	ldrb	r3, [r7, #8]
  401610:	b25a      	sxtb	r2, r3
  401612:	683b      	ldr	r3, [r7, #0]
  401614:	78db      	ldrb	r3, [r3, #3]
  401616:	2b00      	cmp	r3, #0
  401618:	d001      	beq.n	40161e <inv_icm426xx_set_config_ibi+0xaa>
  40161a:	2302      	movs	r3, #2
  40161c:	e000      	b.n	401620 <inv_icm426xx_set_config_ibi+0xac>
  40161e:	2300      	movs	r3, #0
  401620:	4313      	orrs	r3, r2
  401622:	b25b      	sxtb	r3, r3
  401624:	b2db      	uxtb	r3, r3
  401626:	723b      	strb	r3, [r7, #8]

	/* Set INT_SOURCE9 bits */
	data[1] &= (uint8_t)~(BIT_INT_SOURCE9_SMD_IBI_EN 
  401628:	7a7b      	ldrb	r3, [r7, #9]
  40162a:	f023 031e 	bic.w	r3, r3, #30
  40162e:	b2db      	uxtb	r3, r3
  401630:	727b      	strb	r3, [r7, #9]
			| BIT_INT_SOURCE9_WOM_X_IBI_EN 
			| BIT_INT_SOURCE9_WOM_Y_IBI_EN 
			| BIT_INT_SOURCE9_WOM_Z_IBI_EN);
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_SMD != 0)   << BIT_INT_SMD_IBI_EN_POS);
  401632:	7a7b      	ldrb	r3, [r7, #9]
  401634:	b25a      	sxtb	r2, r3
  401636:	683b      	ldr	r3, [r7, #0]
  401638:	791b      	ldrb	r3, [r3, #4]
  40163a:	2b00      	cmp	r3, #0
  40163c:	d001      	beq.n	401642 <inv_icm426xx_set_config_ibi+0xce>
  40163e:	2310      	movs	r3, #16
  401640:	e000      	b.n	401644 <inv_icm426xx_set_config_ibi+0xd0>
  401642:	2300      	movs	r3, #0
  401644:	4313      	orrs	r3, r2
  401646:	b25b      	sxtb	r3, r3
  401648:	b2db      	uxtb	r3, r3
  40164a:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_X != 0) << BIT_INT_WOM_X_IBI_EN_POS);
  40164c:	7a7b      	ldrb	r3, [r7, #9]
  40164e:	b25a      	sxtb	r2, r3
  401650:	683b      	ldr	r3, [r7, #0]
  401652:	795b      	ldrb	r3, [r3, #5]
  401654:	2b00      	cmp	r3, #0
  401656:	d001      	beq.n	40165c <inv_icm426xx_set_config_ibi+0xe8>
  401658:	2302      	movs	r3, #2
  40165a:	e000      	b.n	40165e <inv_icm426xx_set_config_ibi+0xea>
  40165c:	2300      	movs	r3, #0
  40165e:	4313      	orrs	r3, r2
  401660:	b25b      	sxtb	r3, r3
  401662:	b2db      	uxtb	r3, r3
  401664:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Y != 0) << BIT_INT_WOM_Y_IBI_EN_POS);
  401666:	7a7b      	ldrb	r3, [r7, #9]
  401668:	b25a      	sxtb	r2, r3
  40166a:	683b      	ldr	r3, [r7, #0]
  40166c:	799b      	ldrb	r3, [r3, #6]
  40166e:	2b00      	cmp	r3, #0
  401670:	d001      	beq.n	401676 <inv_icm426xx_set_config_ibi+0x102>
  401672:	2304      	movs	r3, #4
  401674:	e000      	b.n	401678 <inv_icm426xx_set_config_ibi+0x104>
  401676:	2300      	movs	r3, #0
  401678:	4313      	orrs	r3, r2
  40167a:	b25b      	sxtb	r3, r3
  40167c:	b2db      	uxtb	r3, r3
  40167e:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Z != 0) << BIT_INT_WOM_Z_IBI_EN_POS);
  401680:	7a7b      	ldrb	r3, [r7, #9]
  401682:	b25a      	sxtb	r2, r3
  401684:	683b      	ldr	r3, [r7, #0]
  401686:	79db      	ldrb	r3, [r3, #7]
  401688:	2b00      	cmp	r3, #0
  40168a:	d001      	beq.n	401690 <inv_icm426xx_set_config_ibi+0x11c>
  40168c:	2308      	movs	r3, #8
  40168e:	e000      	b.n	401692 <inv_icm426xx_set_config_ibi+0x11e>
  401690:	2300      	movs	r3, #0
  401692:	4313      	orrs	r3, r2
  401694:	b25b      	sxtb	r3, r3
  401696:	b2db      	uxtb	r3, r3
  401698:	727b      	strb	r3, [r7, #9]

	/* Set INT_SOURCE10 bits */
	data[2] &= (uint8_t)~(BIT_INT_SOURCE10_STEP_DET_IBI_EN
  40169a:	7abb      	ldrb	r3, [r7, #10]
  40169c:	f023 0339 	bic.w	r3, r3, #57	; 0x39
  4016a0:	b2db      	uxtb	r3, r3
  4016a2:	72bb      	strb	r3, [r7, #10]
			| BIT_INT_SOURCE10_STEP_CNT_OVFL_IBI_EN
			| BIT_INT_SOURCE10_TILT_DET_IBI_EN
			| BIT_INT_SOURCE10_TAP_DET_IBI_EN);
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_DET != 0)      << BIT_INT_STEP_DET_IBI_EN_POS);
  4016a4:	7abb      	ldrb	r3, [r7, #10]
  4016a6:	b25a      	sxtb	r2, r3
  4016a8:	683b      	ldr	r3, [r7, #0]
  4016aa:	7a1b      	ldrb	r3, [r3, #8]
  4016ac:	2b00      	cmp	r3, #0
  4016ae:	d001      	beq.n	4016b4 <inv_icm426xx_set_config_ibi+0x140>
  4016b0:	2320      	movs	r3, #32
  4016b2:	e000      	b.n	4016b6 <inv_icm426xx_set_config_ibi+0x142>
  4016b4:	2300      	movs	r3, #0
  4016b6:	4313      	orrs	r3, r2
  4016b8:	b25b      	sxtb	r3, r3
  4016ba:	b2db      	uxtb	r3, r3
  4016bc:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_CNT_OVFL != 0) << BIT_INT_STEP_CNT_OVFL_IBI_EN_POS);
  4016be:	7abb      	ldrb	r3, [r7, #10]
  4016c0:	b25a      	sxtb	r2, r3
  4016c2:	683b      	ldr	r3, [r7, #0]
  4016c4:	7a5b      	ldrb	r3, [r3, #9]
  4016c6:	2b00      	cmp	r3, #0
  4016c8:	d001      	beq.n	4016ce <inv_icm426xx_set_config_ibi+0x15a>
  4016ca:	2310      	movs	r3, #16
  4016cc:	e000      	b.n	4016d0 <inv_icm426xx_set_config_ibi+0x15c>
  4016ce:	2300      	movs	r3, #0
  4016d0:	4313      	orrs	r3, r2
  4016d2:	b25b      	sxtb	r3, r3
  4016d4:	b2db      	uxtb	r3, r3
  4016d6:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TILT_DET != 0)      << BIT_INT_TILT_DET_IBI_EN_POS);
  4016d8:	7abb      	ldrb	r3, [r7, #10]
  4016da:	b25a      	sxtb	r2, r3
  4016dc:	683b      	ldr	r3, [r7, #0]
  4016de:	7a9b      	ldrb	r3, [r3, #10]
  4016e0:	2b00      	cmp	r3, #0
  4016e2:	d001      	beq.n	4016e8 <inv_icm426xx_set_config_ibi+0x174>
  4016e4:	2308      	movs	r3, #8
  4016e6:	e000      	b.n	4016ea <inv_icm426xx_set_config_ibi+0x176>
  4016e8:	2300      	movs	r3, #0
  4016ea:	4313      	orrs	r3, r2
  4016ec:	b25b      	sxtb	r3, r3
  4016ee:	b2db      	uxtb	r3, r3
  4016f0:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TAP_DET != 0)       << BIT_INT_TAP_DET_IBI_EN_POS);
  4016f2:	7abb      	ldrb	r3, [r7, #10]
  4016f4:	b25a      	sxtb	r2, r3
  4016f6:	683b      	ldr	r3, [r7, #0]
  4016f8:	7b5b      	ldrb	r3, [r3, #13]
  4016fa:	2b00      	cmp	r3, #0
  4016fc:	bf14      	ite	ne
  4016fe:	2301      	movne	r3, #1
  401700:	2300      	moveq	r3, #0
  401702:	b2db      	uxtb	r3, r3
  401704:	b25b      	sxtb	r3, r3
  401706:	4313      	orrs	r3, r2
  401708:	b25b      	sxtb	r3, r3
  40170a:	b2db      	uxtb	r3, r3
  40170c:	72bb      	strb	r3, [r7, #10]

	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE8_B4, 3, data); /* burst write int_source8/int_source9/int_source10 */
  40170e:	f107 0308 	add.w	r3, r7, #8
  401712:	2203      	movs	r2, #3
  401714:	214f      	movs	r1, #79	; 0x4f
  401716:	6878      	ldr	r0, [r7, #4]
  401718:	4c0b      	ldr	r4, [pc, #44]	; (401748 <inv_icm426xx_set_config_ibi+0x1d4>)
  40171a:	47a0      	blx	r4
  40171c:	4602      	mov	r2, r0
  40171e:	68fb      	ldr	r3, [r7, #12]
  401720:	4313      	orrs	r3, r2
  401722:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  401724:	2100      	movs	r1, #0
  401726:	6878      	ldr	r0, [r7, #4]
  401728:	4b05      	ldr	r3, [pc, #20]	; (401740 <inv_icm426xx_set_config_ibi+0x1cc>)
  40172a:	4798      	blx	r3
  40172c:	4602      	mov	r2, r0
  40172e:	68fb      	ldr	r3, [r7, #12]
  401730:	4313      	orrs	r3, r2
  401732:	60fb      	str	r3, [r7, #12]
	
	return status;
  401734:	68fb      	ldr	r3, [r7, #12]
}
  401736:	4618      	mov	r0, r3
  401738:	3714      	adds	r7, #20
  40173a:	46bd      	mov	sp, r7
  40173c:	bd90      	pop	{r4, r7, pc}
  40173e:	bf00      	nop
  401740:	004009d9 	.word	0x004009d9
  401744:	00402589 	.word	0x00402589
  401748:	00402655 	.word	0x00402655

0040174c <inv_icm426xx_set_config_int1>:

int inv_icm426xx_set_config_int1(struct inv_icm426xx * s, inv_icm426xx_interrupt_parameter_t * interrupt_to_configure)
{
  40174c:	b590      	push	{r4, r7, lr}
  40174e:	b085      	sub	sp, #20
  401750:	af00      	add	r7, sp, #0
  401752:	6078      	str	r0, [r7, #4]
  401754:	6039      	str	r1, [r7, #0]
	int status = 0;
  401756:	2300      	movs	r3, #0
  401758:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = {0};
  40175a:	f107 0308 	add.w	r3, r7, #8
  40175e:	2100      	movs	r1, #0
  401760:	460a      	mov	r2, r1
  401762:	801a      	strh	r2, [r3, #0]
  401764:	460a      	mov	r2, r1
  401766:	709a      	strb	r2, [r3, #2]

	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE0, 2, data); /* burst read int_source0/int_source1 */
  401768:	f107 0308 	add.w	r3, r7, #8
  40176c:	2202      	movs	r2, #2
  40176e:	2165      	movs	r1, #101	; 0x65
  401770:	6878      	ldr	r0, [r7, #4]
  401772:	4c82      	ldr	r4, [pc, #520]	; (40197c <inv_icm426xx_set_config_int1+0x230>)
  401774:	47a0      	blx	r4
  401776:	4602      	mov	r2, r0
  401778:	68fb      	ldr	r3, [r7, #12]
  40177a:	4313      	orrs	r3, r2
  40177c:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 4);
  40177e:	2104      	movs	r1, #4
  401780:	6878      	ldr	r0, [r7, #4]
  401782:	4b7f      	ldr	r3, [pc, #508]	; (401980 <inv_icm426xx_set_config_int1+0x234>)
  401784:	4798      	blx	r3
  401786:	4602      	mov	r2, r0
  401788:	68fb      	ldr	r3, [r7, #12]
  40178a:	4313      	orrs	r3, r2
  40178c:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_SOURCE6_B4, 1, &data[2]); /* switch to bank4 for int_source6 */
  40178e:	f107 0308 	add.w	r3, r7, #8
  401792:	3302      	adds	r3, #2
  401794:	2201      	movs	r2, #1
  401796:	214d      	movs	r1, #77	; 0x4d
  401798:	6878      	ldr	r0, [r7, #4]
  40179a:	4c78      	ldr	r4, [pc, #480]	; (40197c <inv_icm426xx_set_config_int1+0x230>)
  40179c:	47a0      	blx	r4
  40179e:	4602      	mov	r2, r0
  4017a0:	68fb      	ldr	r3, [r7, #12]
  4017a2:	4313      	orrs	r3, r2
  4017a4:	60fb      	str	r3, [r7, #12]

	/* Set INT_SOURCE0 bits */
	data[0] &= (uint8_t)~(BIT_INT_SOURCE0_UI_FSYNC_INT1_EN 
  4017a6:	7a3b      	ldrb	r3, [r7, #8]
  4017a8:	f023 034e 	bic.w	r3, r3, #78	; 0x4e
  4017ac:	b2db      	uxtb	r3, r3
  4017ae:	723b      	strb	r3, [r7, #8]
			| BIT_INT_SOURCE0_UI_DRDY_INT1_EN 
			| BIT_INT_SOURCE0_FIFO_THS_INT1_EN 
			| BIT_INT_SOURCE0_FIFO_FULL_INT1_EN);
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_FSYNC != 0)  << BIT_INT_UI_FSYNC_INT_EN_POS);
  4017b0:	7a3b      	ldrb	r3, [r7, #8]
  4017b2:	b25a      	sxtb	r2, r3
  4017b4:	683b      	ldr	r3, [r7, #0]
  4017b6:	781b      	ldrb	r3, [r3, #0]
  4017b8:	2b00      	cmp	r3, #0
  4017ba:	d001      	beq.n	4017c0 <inv_icm426xx_set_config_int1+0x74>
  4017bc:	2340      	movs	r3, #64	; 0x40
  4017be:	e000      	b.n	4017c2 <inv_icm426xx_set_config_int1+0x76>
  4017c0:	2300      	movs	r3, #0
  4017c2:	4313      	orrs	r3, r2
  4017c4:	b25b      	sxtb	r3, r3
  4017c6:	b2db      	uxtb	r3, r3
  4017c8:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_UI_DRDY != 0)   << BIT_INT_UI_DRDY_INT_EN_POS);
  4017ca:	7a3b      	ldrb	r3, [r7, #8]
  4017cc:	b25a      	sxtb	r2, r3
  4017ce:	683b      	ldr	r3, [r7, #0]
  4017d0:	785b      	ldrb	r3, [r3, #1]
  4017d2:	2b00      	cmp	r3, #0
  4017d4:	d001      	beq.n	4017da <inv_icm426xx_set_config_int1+0x8e>
  4017d6:	2308      	movs	r3, #8
  4017d8:	e000      	b.n	4017dc <inv_icm426xx_set_config_int1+0x90>
  4017da:	2300      	movs	r3, #0
  4017dc:	4313      	orrs	r3, r2
  4017de:	b25b      	sxtb	r3, r3
  4017e0:	b2db      	uxtb	r3, r3
  4017e2:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_THS != 0)  << BIT_INT_FIFO_THS_INT_EN_POS);
  4017e4:	7a3b      	ldrb	r3, [r7, #8]
  4017e6:	b25a      	sxtb	r2, r3
  4017e8:	683b      	ldr	r3, [r7, #0]
  4017ea:	789b      	ldrb	r3, [r3, #2]
  4017ec:	2b00      	cmp	r3, #0
  4017ee:	d001      	beq.n	4017f4 <inv_icm426xx_set_config_int1+0xa8>
  4017f0:	2304      	movs	r3, #4
  4017f2:	e000      	b.n	4017f6 <inv_icm426xx_set_config_int1+0xaa>
  4017f4:	2300      	movs	r3, #0
  4017f6:	4313      	orrs	r3, r2
  4017f8:	b25b      	sxtb	r3, r3
  4017fa:	b2db      	uxtb	r3, r3
  4017fc:	723b      	strb	r3, [r7, #8]
	data[0] |= ((interrupt_to_configure->INV_ICM426XX_FIFO_FULL != 0) << BIT_INT_FIFO_FULL_INT_EN_POS);
  4017fe:	7a3b      	ldrb	r3, [r7, #8]
  401800:	b25a      	sxtb	r2, r3
  401802:	683b      	ldr	r3, [r7, #0]
  401804:	78db      	ldrb	r3, [r3, #3]
  401806:	2b00      	cmp	r3, #0
  401808:	d001      	beq.n	40180e <inv_icm426xx_set_config_int1+0xc2>
  40180a:	2302      	movs	r3, #2
  40180c:	e000      	b.n	401810 <inv_icm426xx_set_config_int1+0xc4>
  40180e:	2300      	movs	r3, #0
  401810:	4313      	orrs	r3, r2
  401812:	b25b      	sxtb	r3, r3
  401814:	b2db      	uxtb	r3, r3
  401816:	723b      	strb	r3, [r7, #8]

	/* Set INT_SOURCE1 bits */
	data[1] &= (uint8_t)~(BIT_INT_SOURCE1_SMD_INT1_EN 
  401818:	7a7b      	ldrb	r3, [r7, #9]
  40181a:	f023 030f 	bic.w	r3, r3, #15
  40181e:	b2db      	uxtb	r3, r3
  401820:	727b      	strb	r3, [r7, #9]
			| BIT_INT_SOURCE1_WOM_X_INT1_EN 
			| BIT_INT_SOURCE1_WOM_Y_INT1_EN 
			| BIT_INT_SOURCE1_WOM_Z_INT1_EN);
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_SMD   != 0) << BIT_INT_SMD_INT_EN_POS);
  401822:	7a7b      	ldrb	r3, [r7, #9]
  401824:	b25a      	sxtb	r2, r3
  401826:	683b      	ldr	r3, [r7, #0]
  401828:	791b      	ldrb	r3, [r3, #4]
  40182a:	2b00      	cmp	r3, #0
  40182c:	d001      	beq.n	401832 <inv_icm426xx_set_config_int1+0xe6>
  40182e:	2308      	movs	r3, #8
  401830:	e000      	b.n	401834 <inv_icm426xx_set_config_int1+0xe8>
  401832:	2300      	movs	r3, #0
  401834:	4313      	orrs	r3, r2
  401836:	b25b      	sxtb	r3, r3
  401838:	b2db      	uxtb	r3, r3
  40183a:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_X != 0) << BIT_INT_WOM_X_INT_EN_POS);
  40183c:	7a7b      	ldrb	r3, [r7, #9]
  40183e:	b25a      	sxtb	r2, r3
  401840:	683b      	ldr	r3, [r7, #0]
  401842:	795b      	ldrb	r3, [r3, #5]
  401844:	2b00      	cmp	r3, #0
  401846:	bf14      	ite	ne
  401848:	2301      	movne	r3, #1
  40184a:	2300      	moveq	r3, #0
  40184c:	b2db      	uxtb	r3, r3
  40184e:	b25b      	sxtb	r3, r3
  401850:	4313      	orrs	r3, r2
  401852:	b25b      	sxtb	r3, r3
  401854:	b2db      	uxtb	r3, r3
  401856:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Y != 0) << BIT_INT_WOM_Y_INT_EN_POS);
  401858:	7a7b      	ldrb	r3, [r7, #9]
  40185a:	b25a      	sxtb	r2, r3
  40185c:	683b      	ldr	r3, [r7, #0]
  40185e:	799b      	ldrb	r3, [r3, #6]
  401860:	2b00      	cmp	r3, #0
  401862:	d001      	beq.n	401868 <inv_icm426xx_set_config_int1+0x11c>
  401864:	2302      	movs	r3, #2
  401866:	e000      	b.n	40186a <inv_icm426xx_set_config_int1+0x11e>
  401868:	2300      	movs	r3, #0
  40186a:	4313      	orrs	r3, r2
  40186c:	b25b      	sxtb	r3, r3
  40186e:	b2db      	uxtb	r3, r3
  401870:	727b      	strb	r3, [r7, #9]
	data[1] |= ((interrupt_to_configure->INV_ICM426XX_WOM_Z != 0) << BIT_INT_WOM_Z_INT_EN_POS);
  401872:	7a7b      	ldrb	r3, [r7, #9]
  401874:	b25a      	sxtb	r2, r3
  401876:	683b      	ldr	r3, [r7, #0]
  401878:	79db      	ldrb	r3, [r3, #7]
  40187a:	2b00      	cmp	r3, #0
  40187c:	d001      	beq.n	401882 <inv_icm426xx_set_config_int1+0x136>
  40187e:	2304      	movs	r3, #4
  401880:	e000      	b.n	401884 <inv_icm426xx_set_config_int1+0x138>
  401882:	2300      	movs	r3, #0
  401884:	4313      	orrs	r3, r2
  401886:	b25b      	sxtb	r3, r3
  401888:	b2db      	uxtb	r3, r3
  40188a:	727b      	strb	r3, [r7, #9]

	/* Set INT_SOURCE6 bits */
	data[2] &= (uint8_t)~(BIT_INT_SOURCE6_STEP_DET_INT1_EN
  40188c:	7abb      	ldrb	r3, [r7, #10]
  40188e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  401892:	b2db      	uxtb	r3, r3
  401894:	72bb      	strb	r3, [r7, #10]
			| BIT_INT_SOURCE6_STEP_CNT_OVFL_INT1_EN
			| BIT_INT_SOURCE6_TILT_DET_INT1_EN
			| BIT_INT_SOURCE6_SLEEP_DET_INT1_EN
			| BIT_INT_SOURCE6_WAKE_DET_INT1_EN
			| BIT_INT_SOURCE6_TAP_DET_INT1_EN);
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_DET != 0)      << BIT_INT_STEP_DET_INT_EN_POS);
  401896:	7abb      	ldrb	r3, [r7, #10]
  401898:	b25a      	sxtb	r2, r3
  40189a:	683b      	ldr	r3, [r7, #0]
  40189c:	7a1b      	ldrb	r3, [r3, #8]
  40189e:	2b00      	cmp	r3, #0
  4018a0:	d001      	beq.n	4018a6 <inv_icm426xx_set_config_int1+0x15a>
  4018a2:	2320      	movs	r3, #32
  4018a4:	e000      	b.n	4018a8 <inv_icm426xx_set_config_int1+0x15c>
  4018a6:	2300      	movs	r3, #0
  4018a8:	4313      	orrs	r3, r2
  4018aa:	b25b      	sxtb	r3, r3
  4018ac:	b2db      	uxtb	r3, r3
  4018ae:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_STEP_CNT_OVFL != 0) << BIT_INT_STEP_CNT_OVFL_INT_EN_POS);
  4018b0:	7abb      	ldrb	r3, [r7, #10]
  4018b2:	b25a      	sxtb	r2, r3
  4018b4:	683b      	ldr	r3, [r7, #0]
  4018b6:	7a5b      	ldrb	r3, [r3, #9]
  4018b8:	2b00      	cmp	r3, #0
  4018ba:	d001      	beq.n	4018c0 <inv_icm426xx_set_config_int1+0x174>
  4018bc:	2310      	movs	r3, #16
  4018be:	e000      	b.n	4018c2 <inv_icm426xx_set_config_int1+0x176>
  4018c0:	2300      	movs	r3, #0
  4018c2:	4313      	orrs	r3, r2
  4018c4:	b25b      	sxtb	r3, r3
  4018c6:	b2db      	uxtb	r3, r3
  4018c8:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TILT_DET != 0)      << BIT_INT_TILT_DET_INT_EN_POS);
  4018ca:	7abb      	ldrb	r3, [r7, #10]
  4018cc:	b25a      	sxtb	r2, r3
  4018ce:	683b      	ldr	r3, [r7, #0]
  4018d0:	7a9b      	ldrb	r3, [r3, #10]
  4018d2:	2b00      	cmp	r3, #0
  4018d4:	d001      	beq.n	4018da <inv_icm426xx_set_config_int1+0x18e>
  4018d6:	2308      	movs	r3, #8
  4018d8:	e000      	b.n	4018dc <inv_icm426xx_set_config_int1+0x190>
  4018da:	2300      	movs	r3, #0
  4018dc:	4313      	orrs	r3, r2
  4018de:	b25b      	sxtb	r3, r3
  4018e0:	b2db      	uxtb	r3, r3
  4018e2:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_SLEEP_DET != 0)     << BIT_INT_SLEEP_DET_INT_EN_POS);
  4018e4:	7abb      	ldrb	r3, [r7, #10]
  4018e6:	b25a      	sxtb	r2, r3
  4018e8:	683b      	ldr	r3, [r7, #0]
  4018ea:	7adb      	ldrb	r3, [r3, #11]
  4018ec:	2b00      	cmp	r3, #0
  4018ee:	d001      	beq.n	4018f4 <inv_icm426xx_set_config_int1+0x1a8>
  4018f0:	2302      	movs	r3, #2
  4018f2:	e000      	b.n	4018f6 <inv_icm426xx_set_config_int1+0x1aa>
  4018f4:	2300      	movs	r3, #0
  4018f6:	4313      	orrs	r3, r2
  4018f8:	b25b      	sxtb	r3, r3
  4018fa:	b2db      	uxtb	r3, r3
  4018fc:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_WAKE_DET != 0)      << BIT_INT_WAKE_DET_INT_EN_POS);
  4018fe:	7abb      	ldrb	r3, [r7, #10]
  401900:	b25a      	sxtb	r2, r3
  401902:	683b      	ldr	r3, [r7, #0]
  401904:	7b1b      	ldrb	r3, [r3, #12]
  401906:	2b00      	cmp	r3, #0
  401908:	d001      	beq.n	40190e <inv_icm426xx_set_config_int1+0x1c2>
  40190a:	2304      	movs	r3, #4
  40190c:	e000      	b.n	401910 <inv_icm426xx_set_config_int1+0x1c4>
  40190e:	2300      	movs	r3, #0
  401910:	4313      	orrs	r3, r2
  401912:	b25b      	sxtb	r3, r3
  401914:	b2db      	uxtb	r3, r3
  401916:	72bb      	strb	r3, [r7, #10]
	data[2] |= ((interrupt_to_configure->INV_ICM426XX_TAP_DET != 0)       << BIT_INT_TAP_DET_INT_EN_POS);
  401918:	7abb      	ldrb	r3, [r7, #10]
  40191a:	b25a      	sxtb	r2, r3
  40191c:	683b      	ldr	r3, [r7, #0]
  40191e:	7b5b      	ldrb	r3, [r3, #13]
  401920:	2b00      	cmp	r3, #0
  401922:	bf14      	ite	ne
  401924:	2301      	movne	r3, #1
  401926:	2300      	moveq	r3, #0
  401928:	b2db      	uxtb	r3, r3
  40192a:	b25b      	sxtb	r3, r3
  40192c:	4313      	orrs	r3, r2
  40192e:	b25b      	sxtb	r3, r3
  401930:	b2db      	uxtb	r3, r3
  401932:	72bb      	strb	r3, [r7, #10]
	
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE6_B4, 1, &data[2]); /* start with int_source6 since we are still in bank4 */
  401934:	f107 0308 	add.w	r3, r7, #8
  401938:	3302      	adds	r3, #2
  40193a:	2201      	movs	r2, #1
  40193c:	214d      	movs	r1, #77	; 0x4d
  40193e:	6878      	ldr	r0, [r7, #4]
  401940:	4c10      	ldr	r4, [pc, #64]	; (401984 <inv_icm426xx_set_config_int1+0x238>)
  401942:	47a0      	blx	r4
  401944:	4602      	mov	r2, r0
  401946:	68fb      	ldr	r3, [r7, #12]
  401948:	4313      	orrs	r3, r2
  40194a:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_set_reg_bank(s, 0);
  40194c:	2100      	movs	r1, #0
  40194e:	6878      	ldr	r0, [r7, #4]
  401950:	4b0b      	ldr	r3, [pc, #44]	; (401980 <inv_icm426xx_set_config_int1+0x234>)
  401952:	4798      	blx	r3
  401954:	4602      	mov	r2, r0
  401956:	68fb      	ldr	r3, [r7, #12]
  401958:	4313      	orrs	r3, r2
  40195a:	60fb      	str	r3, [r7, #12]
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_SOURCE0, 2, data); /* burst write int_source0/int_source1 */
  40195c:	f107 0308 	add.w	r3, r7, #8
  401960:	2202      	movs	r2, #2
  401962:	2165      	movs	r1, #101	; 0x65
  401964:	6878      	ldr	r0, [r7, #4]
  401966:	4c07      	ldr	r4, [pc, #28]	; (401984 <inv_icm426xx_set_config_int1+0x238>)
  401968:	47a0      	blx	r4
  40196a:	4602      	mov	r2, r0
  40196c:	68fb      	ldr	r3, [r7, #12]
  40196e:	4313      	orrs	r3, r2
  401970:	60fb      	str	r3, [r7, #12]

	return status;
  401972:	68fb      	ldr	r3, [r7, #12]
}
  401974:	4618      	mov	r0, r3
  401976:	3714      	adds	r7, #20
  401978:	46bd      	mov	sp, r7
  40197a:	bd90      	pop	{r4, r7, pc}
  40197c:	00402589 	.word	0x00402589
  401980:	004009d9 	.word	0x004009d9
  401984:	00402655 	.word	0x00402655

00401988 <inv_icm426xx_get_data_from_registers>:

	return status;
}

int inv_icm426xx_get_data_from_registers(struct inv_icm426xx * s)
{
  401988:	b590      	push	{r4, r7, lr}
  40198a:	b091      	sub	sp, #68	; 0x44
  40198c:	af00      	add	r7, sp, #0
  40198e:	6078      	str	r0, [r7, #4]
	int status = 0;
  401990:	2300      	movs	r3, #0
  401992:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t accel[ACCEL_DATA_SIZE];
	uint8_t gyro[GYRO_DATA_SIZE];
	inv_icm426xx_sensor_event_t event;
	
	/* Ensure data ready status bit is set */
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_STATUS, 1, &int_status);
  401994:	f107 033b 	add.w	r3, r7, #59	; 0x3b
  401998:	2201      	movs	r2, #1
  40199a:	212d      	movs	r1, #45	; 0x2d
  40199c:	6878      	ldr	r0, [r7, #4]
  40199e:	4c55      	ldr	r4, [pc, #340]	; (401af4 <inv_icm426xx_get_data_from_registers+0x16c>)
  4019a0:	47a0      	blx	r4
  4019a2:	4602      	mov	r2, r0
  4019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4019a6:	4313      	orrs	r3, r2
  4019a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(status)
  4019aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4019ac:	2b00      	cmp	r3, #0
  4019ae:	d001      	beq.n	4019b4 <inv_icm426xx_get_data_from_registers+0x2c>
		return status;
  4019b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4019b2:	e09b      	b.n	401aec <inv_icm426xx_get_data_from_registers+0x164>

	if(int_status & BIT_INT_STATUS_DRDY) {
  4019b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  4019b8:	f003 0308 	and.w	r3, r3, #8
  4019bc:	2b00      	cmp	r3, #0
  4019be:	f000 8094 	beq.w	401aea <inv_icm426xx_get_data_from_registers+0x162>
		
		status = inv_icm426xx_read_reg(s, MPUREG_TEMP_DATA0_UI, TEMP_DATA_SIZE, temperature);
  4019c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
  4019c6:	2202      	movs	r2, #2
  4019c8:	211d      	movs	r1, #29
  4019ca:	6878      	ldr	r0, [r7, #4]
  4019cc:	4c49      	ldr	r4, [pc, #292]	; (401af4 <inv_icm426xx_get_data_from_registers+0x16c>)
  4019ce:	47a0      	blx	r4
  4019d0:	63f8      	str	r0, [r7, #60]	; 0x3c
		inv_icm426xx_format_data(s->endianess_data, temperature, (uint16_t *)&event.temperature);
  4019d2:	687b      	ldr	r3, [r7, #4]
  4019d4:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  4019d8:	f107 030c 	add.w	r3, r7, #12
  4019dc:	f103 0212 	add.w	r2, r3, #18
  4019e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
  4019e4:	4619      	mov	r1, r3
  4019e6:	4b44      	ldr	r3, [pc, #272]	; (401af8 <inv_icm426xx_get_data_from_registers+0x170>)
  4019e8:	4798      	blx	r3
		
		status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_DATA_X0_UI, ACCEL_DATA_SIZE, accel);
  4019ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
  4019ee:	2206      	movs	r2, #6
  4019f0:	211f      	movs	r1, #31
  4019f2:	6878      	ldr	r0, [r7, #4]
  4019f4:	4c3f      	ldr	r4, [pc, #252]	; (401af4 <inv_icm426xx_get_data_from_registers+0x16c>)
  4019f6:	47a0      	blx	r4
  4019f8:	4602      	mov	r2, r0
  4019fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4019fc:	4313      	orrs	r3, r2
  4019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
		inv_icm426xx_format_data(s->endianess_data, &accel[0], (uint16_t *)&event.accel[0]);
  401a00:	687b      	ldr	r3, [r7, #4]
  401a02:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  401a06:	f107 030c 	add.w	r3, r7, #12
  401a0a:	1d9a      	adds	r2, r3, #6
  401a0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
  401a10:	4619      	mov	r1, r3
  401a12:	4b39      	ldr	r3, [pc, #228]	; (401af8 <inv_icm426xx_get_data_from_registers+0x170>)
  401a14:	4798      	blx	r3
		inv_icm426xx_format_data(s->endianess_data, &accel[2], (uint16_t *)&event.accel[1]);
  401a16:	687b      	ldr	r3, [r7, #4]
  401a18:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  401a1c:	f107 030c 	add.w	r3, r7, #12
  401a20:	f103 0208 	add.w	r2, r3, #8
  401a24:	f107 0330 	add.w	r3, r7, #48	; 0x30
  401a28:	3302      	adds	r3, #2
  401a2a:	4619      	mov	r1, r3
  401a2c:	4b32      	ldr	r3, [pc, #200]	; (401af8 <inv_icm426xx_get_data_from_registers+0x170>)
  401a2e:	4798      	blx	r3
		inv_icm426xx_format_data(s->endianess_data, &accel[4], (uint16_t *)&event.accel[2]);
  401a30:	687b      	ldr	r3, [r7, #4]
  401a32:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  401a36:	f107 030c 	add.w	r3, r7, #12
  401a3a:	f103 020a 	add.w	r2, r3, #10
  401a3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
  401a42:	3304      	adds	r3, #4
  401a44:	4619      	mov	r1, r3
  401a46:	4b2c      	ldr	r3, [pc, #176]	; (401af8 <inv_icm426xx_get_data_from_registers+0x170>)
  401a48:	4798      	blx	r3
		
		status |= inv_icm426xx_read_reg(s, MPUREG_GYRO_DATA_X0_UI, GYRO_DATA_SIZE, gyro);
  401a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
  401a4e:	2206      	movs	r2, #6
  401a50:	2125      	movs	r1, #37	; 0x25
  401a52:	6878      	ldr	r0, [r7, #4]
  401a54:	4c27      	ldr	r4, [pc, #156]	; (401af4 <inv_icm426xx_get_data_from_registers+0x16c>)
  401a56:	47a0      	blx	r4
  401a58:	4602      	mov	r2, r0
  401a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401a5c:	4313      	orrs	r3, r2
  401a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
		inv_icm426xx_format_data(s->endianess_data, &gyro[0], (uint16_t *)&event.gyro[0]);
  401a60:	687b      	ldr	r3, [r7, #4]
  401a62:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  401a66:	f107 030c 	add.w	r3, r7, #12
  401a6a:	f103 020c 	add.w	r2, r3, #12
  401a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
  401a72:	4619      	mov	r1, r3
  401a74:	4b20      	ldr	r3, [pc, #128]	; (401af8 <inv_icm426xx_get_data_from_registers+0x170>)
  401a76:	4798      	blx	r3
		inv_icm426xx_format_data(s->endianess_data, &gyro[2], (uint16_t *)&event.gyro[1]);
  401a78:	687b      	ldr	r3, [r7, #4]
  401a7a:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  401a7e:	f107 030c 	add.w	r3, r7, #12
  401a82:	f103 020e 	add.w	r2, r3, #14
  401a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
  401a8a:	3302      	adds	r3, #2
  401a8c:	4619      	mov	r1, r3
  401a8e:	4b1a      	ldr	r3, [pc, #104]	; (401af8 <inv_icm426xx_get_data_from_registers+0x170>)
  401a90:	4798      	blx	r3
		inv_icm426xx_format_data(s->endianess_data, &gyro[4], (uint16_t *)&event.gyro[2]);
  401a92:	687b      	ldr	r3, [r7, #4]
  401a94:	f893 0868 	ldrb.w	r0, [r3, #2152]	; 0x868
  401a98:	f107 030c 	add.w	r3, r7, #12
  401a9c:	f103 0210 	add.w	r2, r3, #16
  401aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
  401aa4:	3304      	adds	r3, #4
  401aa6:	4619      	mov	r1, r3
  401aa8:	4b13      	ldr	r3, [pc, #76]	; (401af8 <inv_icm426xx_get_data_from_registers+0x170>)
  401aaa:	4798      	blx	r3
		
		/* call sensor event callback */
		if(s->sensor_event_cb)
  401aac:	687b      	ldr	r3, [r7, #4]
  401aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401ab0:	2b00      	cmp	r3, #0
  401ab2:	d005      	beq.n	401ac0 <inv_icm426xx_get_data_from_registers+0x138>
			s->sensor_event_cb(&event);
  401ab4:	687b      	ldr	r3, [r7, #4]
  401ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401ab8:	f107 020c 	add.w	r2, r7, #12
  401abc:	4610      	mov	r0, r2
  401abe:	4798      	blx	r3

		/* Device interrupts delayed when communicating with other slaves connected to same bus 
		 * Semi-Write to release interrupt in I2C
		 */
		if((s->transport.serif.serif_type == ICM426XX_UI_I2C) || (s->transport.serif.serif_type == ICM426XX_UI_I3C)) {
  401ac0:	687b      	ldr	r3, [r7, #4]
  401ac2:	7e1b      	ldrb	r3, [r3, #24]
  401ac4:	2b00      	cmp	r3, #0
  401ac6:	d003      	beq.n	401ad0 <inv_icm426xx_get_data_from_registers+0x148>
  401ac8:	687b      	ldr	r3, [r7, #4]
  401aca:	7e1b      	ldrb	r3, [r3, #24]
  401acc:	2b02      	cmp	r3, #2
  401ace:	d10c      	bne.n	401aea <inv_icm426xx_get_data_from_registers+0x162>
			uint8_t data = 0;
  401ad0:	2300      	movs	r3, #0
  401ad2:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_WHO_AM_I, 1, &data);
  401ad4:	f107 030b 	add.w	r3, r7, #11
  401ad8:	2201      	movs	r2, #1
  401ada:	2175      	movs	r1, #117	; 0x75
  401adc:	6878      	ldr	r0, [r7, #4]
  401ade:	4c07      	ldr	r4, [pc, #28]	; (401afc <inv_icm426xx_get_data_from_registers+0x174>)
  401ae0:	47a0      	blx	r4
  401ae2:	4602      	mov	r2, r0
  401ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401ae6:	4313      	orrs	r3, r2
  401ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

	}
	/*else: Data Ready was not set*/
	
	return status;
  401aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
  401aec:	4618      	mov	r0, r3
  401aee:	3744      	adds	r7, #68	; 0x44
  401af0:	46bd      	mov	sp, r7
  401af2:	bd90      	pop	{r4, r7, pc}
  401af4:	00402589 	.word	0x00402589
  401af8:	00402469 	.word	0x00402469
  401afc:	00402655 	.word	0x00402655

00401b00 <inv_icm426xx_convert_odr_bitfield_to_us>:

	return packet_count;
}

uint32_t inv_icm426xx_convert_odr_bitfield_to_us(uint32_t odr_bitfield)
{
  401b00:	b480      	push	{r7}
  401b02:	b083      	sub	sp, #12
  401b04:	af00      	add	r7, sp, #0
  401b06:	6078      	str	r0, [r7, #4]
			13 - 3.125    : 320 ms
			14 - 1.5625   : 640 ms
			15 - 500      : 2 ms
		*/
	
	switch(odr_bitfield ) {
  401b08:	687b      	ldr	r3, [r7, #4]
  401b0a:	3b01      	subs	r3, #1
  401b0c:	2b0e      	cmp	r3, #14
  401b0e:	d844      	bhi.n	401b9a <inv_icm426xx_convert_odr_bitfield_to_us+0x9a>
  401b10:	a201      	add	r2, pc, #4	; (adr r2, 401b18 <inv_icm426xx_convert_odr_bitfield_to_us+0x18>)
  401b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401b16:	bf00      	nop
  401b18:	00401b55 	.word	0x00401b55
  401b1c:	00401b59 	.word	0x00401b59
  401b20:	00401b5d 	.word	0x00401b5d
  401b24:	00401b61 	.word	0x00401b61
  401b28:	00401b65 	.word	0x00401b65
  401b2c:	00401b6b 	.word	0x00401b6b
  401b30:	00401b77 	.word	0x00401b77
  401b34:	00401b7d 	.word	0x00401b7d
  401b38:	00401b83 	.word	0x00401b83
  401b3c:	00401b89 	.word	0x00401b89
  401b40:	00401b8f 	.word	0x00401b8f
  401b44:	00401b93 	.word	0x00401b93
  401b48:	00401b97 	.word	0x00401b97
  401b4c:	00401b9b 	.word	0x00401b9b
  401b50:	00401b71 	.word	0x00401b71
		case ICM426XX_ACCEL_CONFIG0_ODR_32_KHZ:      return 32;
  401b54:	2320      	movs	r3, #32
  401b56:	e021      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_16_KHZ:      return 63;
  401b58:	233f      	movs	r3, #63	; 0x3f
  401b5a:	e01f      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_8_KHZ:      return 125;
  401b5c:	237d      	movs	r3, #125	; 0x7d
  401b5e:	e01d      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_4_KHZ:      return 250;
  401b60:	23fa      	movs	r3, #250	; 0xfa
  401b62:	e01b      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_2_KHZ:      return 500;
  401b64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  401b68:	e018      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_1_KHZ:      return 1000;
  401b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  401b6e:	e015      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_500_HZ:     return 2000;
  401b70:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  401b74:	e012      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_200_HZ:     return 5000;
  401b76:	f241 3388 	movw	r3, #5000	; 0x1388
  401b7a:	e00f      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_100_HZ:     return 10000;
  401b7c:	f242 7310 	movw	r3, #10000	; 0x2710
  401b80:	e00c      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_50_HZ:      return 20000;
  401b82:	f644 6320 	movw	r3, #20000	; 0x4e20
  401b86:	e009      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_25_HZ:      return 40000;
  401b88:	f649 4340 	movw	r3, #40000	; 0x9c40
  401b8c:	e006      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_12_5_HZ:    return 80000;
  401b8e:	4b06      	ldr	r3, [pc, #24]	; (401ba8 <inv_icm426xx_convert_odr_bitfield_to_us+0xa8>)
  401b90:	e004      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_6_25_HZ:    return 160000;
  401b92:	4b06      	ldr	r3, [pc, #24]	; (401bac <inv_icm426xx_convert_odr_bitfield_to_us+0xac>)
  401b94:	e002      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_3_125_HZ:   return 320000;
  401b96:	4b06      	ldr	r3, [pc, #24]	; (401bb0 <inv_icm426xx_convert_odr_bitfield_to_us+0xb0>)
  401b98:	e000      	b.n	401b9c <inv_icm426xx_convert_odr_bitfield_to_us+0x9c>
		case ICM426XX_ACCEL_CONFIG0_ODR_1_5625_HZ:
		default:                                    return 640000;
  401b9a:	4b06      	ldr	r3, [pc, #24]	; (401bb4 <inv_icm426xx_convert_odr_bitfield_to_us+0xb4>)
	}
}
  401b9c:	4618      	mov	r0, r3
  401b9e:	370c      	adds	r7, #12
  401ba0:	46bd      	mov	sp, r7
  401ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ba6:	4770      	bx	lr
  401ba8:	00013880 	.word	0x00013880
  401bac:	00027100 	.word	0x00027100
  401bb0:	0004e200 	.word	0x0004e200
  401bb4:	0009c400 	.word	0x0009c400

00401bb8 <inv_icm426xx_set_accel_frequency>:

int inv_icm426xx_set_accel_frequency(struct inv_icm426xx * s, const ICM426XX_ACCEL_CONFIG0_ODR_t frequency)
{
  401bb8:	b590      	push	{r4, r7, lr}
  401bba:	b085      	sub	sp, #20
  401bbc:	af00      	add	r7, sp, #0
  401bbe:	6078      	str	r0, [r7, #4]
  401bc0:	460b      	mov	r3, r1
  401bc2:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  401bc4:	2300      	movs	r3, #0
  401bc6:	60fb      	str	r3, [r7, #12]
	 * Update software counter to handle the overflow
	 */
	uint8_t pwr_mngt_0_reg;
	ICM426XX_PWR_MGMT_0_ACCEL_MODE_t accel_pwr_mode;
	
	status |= inv_icm426xx_read_reg(s, MPUREG_PWR_MGMT_0, 1, &pwr_mngt_0_reg);
  401bc8:	f107 0309 	add.w	r3, r7, #9
  401bcc:	2201      	movs	r2, #1
  401bce:	214e      	movs	r1, #78	; 0x4e
  401bd0:	6878      	ldr	r0, [r7, #4]
  401bd2:	4c1f      	ldr	r4, [pc, #124]	; (401c50 <inv_icm426xx_set_accel_frequency+0x98>)
  401bd4:	47a0      	blx	r4
  401bd6:	4602      	mov	r2, r0
  401bd8:	68fb      	ldr	r3, [r7, #12]
  401bda:	4313      	orrs	r3, r2
  401bdc:	60fb      	str	r3, [r7, #12]
	accel_pwr_mode = (ICM426XX_PWR_MGMT_0_ACCEL_MODE_t)(pwr_mngt_0_reg & BIT_PWR_MGMT_0_ACCEL_MODE_MASK);
  401bde:	7a7b      	ldrb	r3, [r7, #9]
  401be0:	f003 0303 	and.w	r3, r3, #3
  401be4:	72fb      	strb	r3, [r7, #11]
	if(ICM426XX_PWR_MGMT_0_ACCEL_MODE_LP != accel_pwr_mode)
  401be6:	7afb      	ldrb	r3, [r7, #11]
  401be8:	2b02      	cmp	r3, #2
  401bea:	d007      	beq.n	401bfc <inv_icm426xx_set_accel_frequency+0x44>
		s->wu_off_acc_odr_changes++; /* WUOSC is not clock source, this ODR change could be missed */
  401bec:	687b      	ldr	r3, [r7, #4]
  401bee:	f8d3 386c 	ldr.w	r3, [r3, #2156]	; 0x86c
  401bf2:	1c5a      	adds	r2, r3, #1
  401bf4:	687b      	ldr	r3, [r7, #4]
  401bf6:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  401bfa:	e003      	b.n	401c04 <inv_icm426xx_set_accel_frequency+0x4c>
	else
		s->wu_off_acc_odr_changes = 0; /* WUOSC is on and acc is running, ODR change will be taken into account */
  401bfc:	687b      	ldr	r3, [r7, #4]
  401bfe:	2200      	movs	r2, #0
  401c00:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
#endif
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  401c04:	f107 030a 	add.w	r3, r7, #10
  401c08:	2201      	movs	r2, #1
  401c0a:	2150      	movs	r1, #80	; 0x50
  401c0c:	6878      	ldr	r0, [r7, #4]
  401c0e:	4c10      	ldr	r4, [pc, #64]	; (401c50 <inv_icm426xx_set_accel_frequency+0x98>)
  401c10:	47a0      	blx	r4
  401c12:	4602      	mov	r2, r0
  401c14:	68fb      	ldr	r3, [r7, #12]
  401c16:	4313      	orrs	r3, r2
  401c18:	60fb      	str	r3, [r7, #12]
	accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_ODR_MASK;
  401c1a:	7abb      	ldrb	r3, [r7, #10]
  401c1c:	f023 030f 	bic.w	r3, r3, #15
  401c20:	b2db      	uxtb	r3, r3
  401c22:	72bb      	strb	r3, [r7, #10]
	accel_cfg_0_reg |= (uint8_t)frequency;
  401c24:	7aba      	ldrb	r2, [r7, #10]
  401c26:	78fb      	ldrb	r3, [r7, #3]
  401c28:	4313      	orrs	r3, r2
  401c2a:	b2db      	uxtb	r3, r3
  401c2c:	72bb      	strb	r3, [r7, #10]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  401c2e:	f107 030a 	add.w	r3, r7, #10
  401c32:	2201      	movs	r2, #1
  401c34:	2150      	movs	r1, #80	; 0x50
  401c36:	6878      	ldr	r0, [r7, #4]
  401c38:	4c06      	ldr	r4, [pc, #24]	; (401c54 <inv_icm426xx_set_accel_frequency+0x9c>)
  401c3a:	47a0      	blx	r4
  401c3c:	4602      	mov	r2, r0
  401c3e:	68fb      	ldr	r3, [r7, #12]
  401c40:	4313      	orrs	r3, r2
  401c42:	60fb      	str	r3, [r7, #12]
	
	return status;
  401c44:	68fb      	ldr	r3, [r7, #12]
}
  401c46:	4618      	mov	r0, r3
  401c48:	3714      	adds	r7, #20
  401c4a:	46bd      	mov	sp, r7
  401c4c:	bd90      	pop	{r4, r7, pc}
  401c4e:	bf00      	nop
  401c50:	00402589 	.word	0x00402589
  401c54:	00402655 	.word	0x00402655

00401c58 <inv_icm426xx_set_gyro_frequency>:

int inv_icm426xx_set_gyro_frequency(struct inv_icm426xx * s, const ICM426XX_GYRO_CONFIG0_ODR_t frequency)
{
  401c58:	b590      	push	{r4, r7, lr}
  401c5a:	b085      	sub	sp, #20
  401c5c:	af00      	add	r7, sp, #0
  401c5e:	6078      	str	r0, [r7, #4]
  401c60:	460b      	mov	r3, r1
  401c62:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  401c64:	2300      	movs	r3, #0
  401c66:	60fb      	str	r3, [r7, #12]
	uint8_t gyro_cfg_0_reg;
	status |= inv_icm426xx_read_reg( s, MPUREG_GYRO_CONFIG0 , 1, &gyro_cfg_0_reg);
  401c68:	f107 030b 	add.w	r3, r7, #11
  401c6c:	2201      	movs	r2, #1
  401c6e:	214f      	movs	r1, #79	; 0x4f
  401c70:	6878      	ldr	r0, [r7, #4]
  401c72:	4c10      	ldr	r4, [pc, #64]	; (401cb4 <inv_icm426xx_set_gyro_frequency+0x5c>)
  401c74:	47a0      	blx	r4
  401c76:	4602      	mov	r2, r0
  401c78:	68fb      	ldr	r3, [r7, #12]
  401c7a:	4313      	orrs	r3, r2
  401c7c:	60fb      	str	r3, [r7, #12]
	gyro_cfg_0_reg &= (uint8_t)~BIT_GYRO_CONFIG0_ODR_MASK;
  401c7e:	7afb      	ldrb	r3, [r7, #11]
  401c80:	f023 030f 	bic.w	r3, r3, #15
  401c84:	b2db      	uxtb	r3, r3
  401c86:	72fb      	strb	r3, [r7, #11]
	gyro_cfg_0_reg |= (uint8_t)frequency;
  401c88:	7afa      	ldrb	r2, [r7, #11]
  401c8a:	78fb      	ldrb	r3, [r7, #3]
  401c8c:	4313      	orrs	r3, r2
  401c8e:	b2db      	uxtb	r3, r3
  401c90:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  401c92:	f107 030b 	add.w	r3, r7, #11
  401c96:	2201      	movs	r2, #1
  401c98:	214f      	movs	r1, #79	; 0x4f
  401c9a:	6878      	ldr	r0, [r7, #4]
  401c9c:	4c06      	ldr	r4, [pc, #24]	; (401cb8 <inv_icm426xx_set_gyro_frequency+0x60>)
  401c9e:	47a0      	blx	r4
  401ca0:	4602      	mov	r2, r0
  401ca2:	68fb      	ldr	r3, [r7, #12]
  401ca4:	4313      	orrs	r3, r2
  401ca6:	60fb      	str	r3, [r7, #12]
	
	return status;
  401ca8:	68fb      	ldr	r3, [r7, #12]
}
  401caa:	4618      	mov	r0, r3
  401cac:	3714      	adds	r7, #20
  401cae:	46bd      	mov	sp, r7
  401cb0:	bd90      	pop	{r4, r7, pc}
  401cb2:	bf00      	nop
  401cb4:	00402589 	.word	0x00402589
  401cb8:	00402655 	.word	0x00402655

00401cbc <inv_icm426xx_set_accel_fsr>:

int inv_icm426xx_set_accel_fsr(struct inv_icm426xx * s, ICM426XX_ACCEL_CONFIG0_FS_SEL_t accel_fsr_g)
{
  401cbc:	b590      	push	{r4, r7, lr}
  401cbe:	b085      	sub	sp, #20
  401cc0:	af00      	add	r7, sp, #0
  401cc2:	6078      	str	r0, [r7, #4]
  401cc4:	460b      	mov	r3, r1
  401cc6:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  401cc8:	2300      	movs	r3, #0
  401cca:	60fb      	str	r3, [r7, #12]
	uint8_t accel_cfg_0_reg;
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  401ccc:	f107 030b 	add.w	r3, r7, #11
  401cd0:	2201      	movs	r2, #1
  401cd2:	2150      	movs	r1, #80	; 0x50
  401cd4:	6878      	ldr	r0, [r7, #4]
  401cd6:	4c10      	ldr	r4, [pc, #64]	; (401d18 <inv_icm426xx_set_accel_fsr+0x5c>)
  401cd8:	47a0      	blx	r4
  401cda:	4602      	mov	r2, r0
  401cdc:	68fb      	ldr	r3, [r7, #12]
  401cde:	4313      	orrs	r3, r2
  401ce0:	60fb      	str	r3, [r7, #12]
	accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_FS_SEL_MASK;
  401ce2:	7afb      	ldrb	r3, [r7, #11]
  401ce4:	f003 031f 	and.w	r3, r3, #31
  401ce8:	b2db      	uxtb	r3, r3
  401cea:	72fb      	strb	r3, [r7, #11]
	accel_cfg_0_reg |= (uint8_t)accel_fsr_g;
  401cec:	7afa      	ldrb	r2, [r7, #11]
  401cee:	78fb      	ldrb	r3, [r7, #3]
  401cf0:	4313      	orrs	r3, r2
  401cf2:	b2db      	uxtb	r3, r3
  401cf4:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  401cf6:	f107 030b 	add.w	r3, r7, #11
  401cfa:	2201      	movs	r2, #1
  401cfc:	2150      	movs	r1, #80	; 0x50
  401cfe:	6878      	ldr	r0, [r7, #4]
  401d00:	4c06      	ldr	r4, [pc, #24]	; (401d1c <inv_icm426xx_set_accel_fsr+0x60>)
  401d02:	47a0      	blx	r4
  401d04:	4602      	mov	r2, r0
  401d06:	68fb      	ldr	r3, [r7, #12]
  401d08:	4313      	orrs	r3, r2
  401d0a:	60fb      	str	r3, [r7, #12]
	
	return status;
  401d0c:	68fb      	ldr	r3, [r7, #12]
}
  401d0e:	4618      	mov	r0, r3
  401d10:	3714      	adds	r7, #20
  401d12:	46bd      	mov	sp, r7
  401d14:	bd90      	pop	{r4, r7, pc}
  401d16:	bf00      	nop
  401d18:	00402589 	.word	0x00402589
  401d1c:	00402655 	.word	0x00402655

00401d20 <inv_icm426xx_set_gyro_fsr>:

int inv_icm426xx_set_gyro_fsr(struct inv_icm426xx * s, ICM426XX_GYRO_CONFIG0_FS_SEL_t gyro_fsr_dps)
{
  401d20:	b590      	push	{r4, r7, lr}
  401d22:	b085      	sub	sp, #20
  401d24:	af00      	add	r7, sp, #0
  401d26:	6078      	str	r0, [r7, #4]
  401d28:	460b      	mov	r3, r1
  401d2a:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  401d2c:	2300      	movs	r3, #0
  401d2e:	60fb      	str	r3, [r7, #12]
	uint8_t gyro_cfg_0_reg;
	status |= inv_icm426xx_read_reg( s, MPUREG_GYRO_CONFIG0 , 1, &gyro_cfg_0_reg);
  401d30:	f107 030b 	add.w	r3, r7, #11
  401d34:	2201      	movs	r2, #1
  401d36:	214f      	movs	r1, #79	; 0x4f
  401d38:	6878      	ldr	r0, [r7, #4]
  401d3a:	4c10      	ldr	r4, [pc, #64]	; (401d7c <inv_icm426xx_set_gyro_fsr+0x5c>)
  401d3c:	47a0      	blx	r4
  401d3e:	4602      	mov	r2, r0
  401d40:	68fb      	ldr	r3, [r7, #12]
  401d42:	4313      	orrs	r3, r2
  401d44:	60fb      	str	r3, [r7, #12]
	gyro_cfg_0_reg &= (uint8_t)~BIT_GYRO_CONFIG0_FS_SEL_MASK;
  401d46:	7afb      	ldrb	r3, [r7, #11]
  401d48:	f003 031f 	and.w	r3, r3, #31
  401d4c:	b2db      	uxtb	r3, r3
  401d4e:	72fb      	strb	r3, [r7, #11]
	gyro_cfg_0_reg |= (uint8_t)gyro_fsr_dps;
  401d50:	7afa      	ldrb	r2, [r7, #11]
  401d52:	78fb      	ldrb	r3, [r7, #3]
  401d54:	4313      	orrs	r3, r2
  401d56:	b2db      	uxtb	r3, r3
  401d58:	72fb      	strb	r3, [r7, #11]
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  401d5a:	f107 030b 	add.w	r3, r7, #11
  401d5e:	2201      	movs	r2, #1
  401d60:	214f      	movs	r1, #79	; 0x4f
  401d62:	6878      	ldr	r0, [r7, #4]
  401d64:	4c06      	ldr	r4, [pc, #24]	; (401d80 <inv_icm426xx_set_gyro_fsr+0x60>)
  401d66:	47a0      	blx	r4
  401d68:	4602      	mov	r2, r0
  401d6a:	68fb      	ldr	r3, [r7, #12]
  401d6c:	4313      	orrs	r3, r2
  401d6e:	60fb      	str	r3, [r7, #12]
	
	return status;
  401d70:	68fb      	ldr	r3, [r7, #12]
}
  401d72:	4618      	mov	r0, r3
  401d74:	3714      	adds	r7, #20
  401d76:	46bd      	mov	sp, r7
  401d78:	bd90      	pop	{r4, r7, pc}
  401d7a:	bf00      	nop
  401d7c:	00402589 	.word	0x00402589
  401d80:	00402655 	.word	0x00402655

00401d84 <inv_icm426xx_enable_clkin_rtc>:
	
	return status;
}

int inv_icm426xx_enable_clkin_rtc(struct inv_icm426xx * s, uint8_t enable)
{
  401d84:	b590      	push	{r4, r7, lr}
  401d86:	b085      	sub	sp, #20
  401d88:	af00      	add	r7, sp, #0
  401d8a:	6078      	str	r0, [r7, #4]
  401d8c:	460b      	mov	r3, r1
  401d8e:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  401d90:	2300      	movs	r3, #0
  401d92:	60fb      	str	r3, [r7, #12]
	uint8_t data;

	if (enable) {
  401d94:	78fb      	ldrb	r3, [r7, #3]
  401d96:	2b00      	cmp	r3, #0
  401d98:	d002      	beq.n	401da0 <inv_icm426xx_enable_clkin_rtc+0x1c>
		status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
		status |= inv_icm426xx_configure_timestamp_resolution(s, ICM426XX_TMST_CONFIG_RESOL_16us);
#else
		(void)s;
		(void)enable;
		return INV_ERROR;
  401d9a:	f04f 33ff 	mov.w	r3, #4294967295
  401d9e:	e01d      	b.n	401ddc <inv_icm426xx_enable_clkin_rtc+0x58>
#endif

	} else {
		status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  401da0:	f107 030b 	add.w	r3, r7, #11
  401da4:	2201      	movs	r2, #1
  401da6:	214d      	movs	r1, #77	; 0x4d
  401da8:	6878      	ldr	r0, [r7, #4]
  401daa:	4c0e      	ldr	r4, [pc, #56]	; (401de4 <inv_icm426xx_enable_clkin_rtc+0x60>)
  401dac:	47a0      	blx	r4
  401dae:	4602      	mov	r2, r0
  401db0:	68fb      	ldr	r3, [r7, #12]
  401db2:	4313      	orrs	r3, r2
  401db4:	60fb      	str	r3, [r7, #12]
		data &= (uint8_t)~BIT_RTC_MODE_MASK;
  401db6:	7afb      	ldrb	r3, [r7, #11]
  401db8:	f023 0304 	bic.w	r3, r3, #4
  401dbc:	b2db      	uxtb	r3, r3
  401dbe:	72fb      	strb	r3, [r7, #11]
		data |= (uint8_t)ICM426XX_INTF_CONFIG1_RTC_MODE_DIS;
  401dc0:	7afb      	ldrb	r3, [r7, #11]
  401dc2:	72fb      	strb	r3, [r7, #11]
		status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG1, 1, &data);
  401dc4:	f107 030b 	add.w	r3, r7, #11
  401dc8:	2201      	movs	r2, #1
  401dca:	214d      	movs	r1, #77	; 0x4d
  401dcc:	6878      	ldr	r0, [r7, #4]
  401dce:	4c06      	ldr	r4, [pc, #24]	; (401de8 <inv_icm426xx_enable_clkin_rtc+0x64>)
  401dd0:	47a0      	blx	r4
  401dd2:	4602      	mov	r2, r0
  401dd4:	68fb      	ldr	r3, [r7, #12]
  401dd6:	4313      	orrs	r3, r2
  401dd8:	60fb      	str	r3, [r7, #12]
	}
	
	return status;
  401dda:	68fb      	ldr	r3, [r7, #12]
}
  401ddc:	4618      	mov	r0, r3
  401dde:	3714      	adds	r7, #20
  401de0:	46bd      	mov	sp, r7
  401de2:	bd90      	pop	{r4, r7, pc}
  401de4:	00402589 	.word	0x00402589
  401de8:	00402655 	.word	0x00402655

00401dec <inv_icm426xx_disable_high_resolution_fifo>:
	
	return 0;
}

int inv_icm426xx_disable_high_resolution_fifo(struct inv_icm426xx * s)
{
  401dec:	b480      	push	{r7}
  401dee:	b083      	sub	sp, #12
  401df0:	af00      	add	r7, sp, #0
  401df2:	6078      	str	r0, [r7, #4]
	data |= (uint8_t)~BIT_FIFO_CONFIG1_HIRES_MASK; /* == ICM426XX_FIFO_CONFIG1_HIRES_DIS */
	status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
#endif

	/* set FIFO packets to 16bit format (i.e. high res is disabled) */
	s->fifo_highres_enabled = 0;
  401df4:	687b      	ldr	r3, [r7, #4]
  401df6:	2200      	movs	r2, #0
  401df8:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
	
	return 0;
  401dfc:	2300      	movs	r3, #0
}
  401dfe:	4618      	mov	r0, r3
  401e00:	370c      	adds	r7, #12
  401e02:	46bd      	mov	sp, r7
  401e04:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e08:	4770      	bx	lr
	...

00401e0c <inv_icm426xx_configure_fifo>:

int inv_icm426xx_configure_fifo(struct inv_icm426xx * s, INV_ICM426XX_FIFO_CONFIG_t fifo_config)
{
  401e0c:	b590      	push	{r4, r7, lr}
  401e0e:	b089      	sub	sp, #36	; 0x24
  401e10:	af00      	add	r7, sp, #0
  401e12:	6078      	str	r0, [r7, #4]
  401e14:	460b      	mov	r3, r1
  401e16:	70fb      	strb	r3, [r7, #3]
	int status = 0;
  401e18:	2300      	movs	r3, #0
  401e1a:	61fb      	str	r3, [r7, #28]
	uint8_t data;
	inv_icm426xx_interrupt_parameter_t config_int = {(inv_icm426xx_interrupt_value)0};
  401e1c:	f107 030c 	add.w	r3, r7, #12
  401e20:	2200      	movs	r2, #0
  401e22:	601a      	str	r2, [r3, #0]
  401e24:	605a      	str	r2, [r3, #4]
  401e26:	609a      	str	r2, [r3, #8]
  401e28:	819a      	strh	r2, [r3, #12]
	
	s->fifo_is_used = fifo_config;
  401e2a:	687b      	ldr	r3, [r7, #4]
  401e2c:	78fa      	ldrb	r2, [r7, #3]
  401e2e:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
	
	switch (fifo_config) {
  401e32:	78fb      	ldrb	r3, [r7, #3]
  401e34:	2b00      	cmp	r3, #0
  401e36:	f000 8094 	beq.w	401f62 <inv_icm426xx_configure_fifo+0x156>
  401e3a:	2b01      	cmp	r3, #1
  401e3c:	f040 80d5 	bne.w	401fea <inv_icm426xx_configure_fifo+0x1de>
			 * - FIFO record mode i.e FIFO count unit is packet 
			 * - FIFO snapshot mode i.e drop the data when the FIFO overflows
			 * - Timestamp is logged in FIFO
			 * - Little Endian fifo_count
			*/
			status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG0, 1, &data);
  401e40:	f107 031b 	add.w	r3, r7, #27
  401e44:	2201      	movs	r2, #1
  401e46:	214c      	movs	r1, #76	; 0x4c
  401e48:	6878      	ldr	r0, [r7, #4]
  401e4a:	4c6c      	ldr	r4, [pc, #432]	; (401ffc <inv_icm426xx_configure_fifo+0x1f0>)
  401e4c:	47a0      	blx	r4
  401e4e:	4602      	mov	r2, r0
  401e50:	69fb      	ldr	r3, [r7, #28]
  401e52:	4313      	orrs	r3, r2
  401e54:	61fb      	str	r3, [r7, #28]
			data |= (uint8_t)ICM426XX_INTF_CONFIG0_FIFO_COUNT_REC_RECORD;
  401e56:	7efb      	ldrb	r3, [r7, #27]
  401e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401e5c:	b2db      	uxtb	r3, r3
  401e5e:	76fb      	strb	r3, [r7, #27]
			data &= (uint8_t)~BIT_FIFO_COUNT_ENDIAN_MASK; // little endian
  401e60:	7efb      	ldrb	r3, [r7, #27]
  401e62:	f023 0320 	bic.w	r3, r3, #32
  401e66:	b2db      	uxtb	r3, r3
  401e68:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG0, 1, &data);
  401e6a:	f107 031b 	add.w	r3, r7, #27
  401e6e:	2201      	movs	r2, #1
  401e70:	214c      	movs	r1, #76	; 0x4c
  401e72:	6878      	ldr	r0, [r7, #4]
  401e74:	4c62      	ldr	r4, [pc, #392]	; (402000 <inv_icm426xx_configure_fifo+0x1f4>)
  401e76:	47a0      	blx	r4
  401e78:	4602      	mov	r2, r0
  401e7a:	69fb      	ldr	r3, [r7, #28]
  401e7c:	4313      	orrs	r3, r2
  401e7e:	61fb      	str	r3, [r7, #28]
			data = (uint8_t)ICM426XX_FIFO_CONFIG_MODE_STOP_ON_FULL;
  401e80:	2380      	movs	r3, #128	; 0x80
  401e82:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  401e84:	f107 031b 	add.w	r3, r7, #27
  401e88:	2201      	movs	r2, #1
  401e8a:	2116      	movs	r1, #22
  401e8c:	6878      	ldr	r0, [r7, #4]
  401e8e:	4c5c      	ldr	r4, [pc, #368]	; (402000 <inv_icm426xx_configure_fifo+0x1f4>)
  401e90:	47a0      	blx	r4
  401e92:	4602      	mov	r2, r0
  401e94:	69fb      	ldr	r3, [r7, #28]
  401e96:	4313      	orrs	r3, r2
  401e98:	61fb      	str	r3, [r7, #28]
			status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &data);
  401e9a:	f107 031b 	add.w	r3, r7, #27
  401e9e:	2201      	movs	r2, #1
  401ea0:	2154      	movs	r1, #84	; 0x54
  401ea2:	6878      	ldr	r0, [r7, #4]
  401ea4:	4c55      	ldr	r4, [pc, #340]	; (401ffc <inv_icm426xx_configure_fifo+0x1f0>)
  401ea6:	47a0      	blx	r4
  401ea8:	4602      	mov	r2, r0
  401eaa:	69fb      	ldr	r3, [r7, #28]
  401eac:	4313      	orrs	r3, r2
  401eae:	61fb      	str	r3, [r7, #28]
			data |= ICM426XX_TMST_CONFIG_TMST_EN;
  401eb0:	7efb      	ldrb	r3, [r7, #27]
  401eb2:	f043 0301 	orr.w	r3, r3, #1
  401eb6:	b2db      	uxtb	r3, r3
  401eb8:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &data);
  401eba:	f107 031b 	add.w	r3, r7, #27
  401ebe:	2201      	movs	r2, #1
  401ec0:	2154      	movs	r1, #84	; 0x54
  401ec2:	6878      	ldr	r0, [r7, #4]
  401ec4:	4c4e      	ldr	r4, [pc, #312]	; (402000 <inv_icm426xx_configure_fifo+0x1f4>)
  401ec6:	47a0      	blx	r4
  401ec8:	4602      	mov	r2, r0
  401eca:	69fb      	ldr	r3, [r7, #28]
  401ecc:	4313      	orrs	r3, r2
  401ece:	61fb      	str	r3, [r7, #28]

#if (!INV_ICM426XX_LIGHTWEIGHT_DRIVER)
			/* restart and reset FIFO configuration */
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401ed0:	f107 031b 	add.w	r3, r7, #27
  401ed4:	2201      	movs	r2, #1
  401ed6:	215f      	movs	r1, #95	; 0x5f
  401ed8:	6878      	ldr	r0, [r7, #4]
  401eda:	4c48      	ldr	r4, [pc, #288]	; (401ffc <inv_icm426xx_configure_fifo+0x1f0>)
  401edc:	47a0      	blx	r4
  401ede:	4602      	mov	r2, r0
  401ee0:	69fb      	ldr	r3, [r7, #28]
  401ee2:	4313      	orrs	r3, r2
  401ee4:	61fb      	str	r3, [r7, #28]
			data &= (uint8_t)~(BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_ACCEL_MASK);
  401ee6:	7efb      	ldrb	r3, [r7, #27]
  401ee8:	f023 0303 	bic.w	r3, r3, #3
  401eec:	b2db      	uxtb	r3, r3
  401eee:	76fb      	strb	r3, [r7, #27]
			data |= (BIT_FIFO_CONFIG1_TEMP_MASK | BIT_FIFO_CONFIG1_TMST_FSYNC_MASK);
  401ef0:	7efb      	ldrb	r3, [r7, #27]
  401ef2:	f043 030c 	orr.w	r3, r3, #12
  401ef6:	b2db      	uxtb	r3, r3
  401ef8:	76fb      	strb	r3, [r7, #27]
#else
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
			data |= (BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_ACCEL_MASK | BIT_FIFO_CONFIG1_TEMP_MASK | BIT_FIFO_CONFIG1_TMST_FSYNC_MASK);
#endif
			/* Set fifo_wm_int_w generating condition : fifo_wm_int_w generated when counter >= threshold */
			data |= (uint8_t)ICM426XX_FIFO_CONFIG1_WM_GT_TH_EN;
  401efa:	7efb      	ldrb	r3, [r7, #27]
  401efc:	f043 0320 	orr.w	r3, r3, #32
  401f00:	b2db      	uxtb	r3, r3
  401f02:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401f04:	f107 031b 	add.w	r3, r7, #27
  401f08:	2201      	movs	r2, #1
  401f0a:	215f      	movs	r1, #95	; 0x5f
  401f0c:	6878      	ldr	r0, [r7, #4]
  401f0e:	4c3c      	ldr	r4, [pc, #240]	; (402000 <inv_icm426xx_configure_fifo+0x1f4>)
  401f10:	47a0      	blx	r4
  401f12:	4602      	mov	r2, r0
  401f14:	69fb      	ldr	r3, [r7, #28]
  401f16:	4313      	orrs	r3, r2
  401f18:	61fb      	str	r3, [r7, #28]
			/* Configure FIFO WM so that INT is triggered for each packet */
			data = 0x1;
  401f1a:	2301      	movs	r3, #1
  401f1c:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG2, 1, &data);
  401f1e:	f107 031b 	add.w	r3, r7, #27
  401f22:	2201      	movs	r2, #1
  401f24:	2160      	movs	r1, #96	; 0x60
  401f26:	6878      	ldr	r0, [r7, #4]
  401f28:	4c35      	ldr	r4, [pc, #212]	; (402000 <inv_icm426xx_configure_fifo+0x1f4>)
  401f2a:	47a0      	blx	r4
  401f2c:	4602      	mov	r2, r0
  401f2e:	69fb      	ldr	r3, [r7, #28]
  401f30:	4313      	orrs	r3, r2
  401f32:	61fb      	str	r3, [r7, #28]

			/* Disable Data Ready Interrupt */
			status |= inv_icm426xx_get_config_int1(s, &config_int);
  401f34:	f107 030c 	add.w	r3, r7, #12
  401f38:	4619      	mov	r1, r3
  401f3a:	6878      	ldr	r0, [r7, #4]
  401f3c:	4b31      	ldr	r3, [pc, #196]	; (402004 <inv_icm426xx_configure_fifo+0x1f8>)
  401f3e:	4798      	blx	r3
  401f40:	4602      	mov	r2, r0
  401f42:	69fb      	ldr	r3, [r7, #28]
  401f44:	4313      	orrs	r3, r2
  401f46:	61fb      	str	r3, [r7, #28]
			config_int.INV_ICM426XX_UI_DRDY = INV_ICM426XX_DISABLE;
  401f48:	2300      	movs	r3, #0
  401f4a:	737b      	strb	r3, [r7, #13]
			status |= inv_icm426xx_set_config_int1(s, &config_int);
  401f4c:	f107 030c 	add.w	r3, r7, #12
  401f50:	4619      	mov	r1, r3
  401f52:	6878      	ldr	r0, [r7, #4]
  401f54:	4b2c      	ldr	r3, [pc, #176]	; (402008 <inv_icm426xx_configure_fifo+0x1fc>)
  401f56:	4798      	blx	r3
  401f58:	4602      	mov	r2, r0
  401f5a:	69fb      	ldr	r3, [r7, #28]
  401f5c:	4313      	orrs	r3, r2
  401f5e:	61fb      	str	r3, [r7, #28]
			break;
  401f60:	e046      	b.n	401ff0 <inv_icm426xx_configure_fifo+0x1e4>
		
		case INV_ICM426XX_FIFO_DISABLED :
			/* make sure FIFO is disabled */
			data = ICM426XX_FIFO_CONFIG_MODE_BYPASS;
  401f62:	2300      	movs	r3, #0
  401f64:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  401f66:	f107 031b 	add.w	r3, r7, #27
  401f6a:	2201      	movs	r2, #1
  401f6c:	2116      	movs	r1, #22
  401f6e:	6878      	ldr	r0, [r7, #4]
  401f70:	4c23      	ldr	r4, [pc, #140]	; (402000 <inv_icm426xx_configure_fifo+0x1f4>)
  401f72:	47a0      	blx	r4
  401f74:	4602      	mov	r2, r0
  401f76:	69fb      	ldr	r3, [r7, #28]
  401f78:	4313      	orrs	r3, r2
  401f7a:	61fb      	str	r3, [r7, #28]
			
			/* restart and reset FIFO configuration */
			status |= inv_icm426xx_read_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401f7c:	f107 031b 	add.w	r3, r7, #27
  401f80:	2201      	movs	r2, #1
  401f82:	215f      	movs	r1, #95	; 0x5f
  401f84:	6878      	ldr	r0, [r7, #4]
  401f86:	4c1d      	ldr	r4, [pc, #116]	; (401ffc <inv_icm426xx_configure_fifo+0x1f0>)
  401f88:	47a0      	blx	r4
  401f8a:	4602      	mov	r2, r0
  401f8c:	69fb      	ldr	r3, [r7, #28]
  401f8e:	4313      	orrs	r3, r2
  401f90:	61fb      	str	r3, [r7, #28]
			data &= (uint8_t)~(BIT_FIFO_CONFIG1_GYRO_MASK | BIT_FIFO_CONFIG1_ACCEL_MASK);
  401f92:	7efb      	ldrb	r3, [r7, #27]
  401f94:	f023 0303 	bic.w	r3, r3, #3
  401f98:	b2db      	uxtb	r3, r3
  401f9a:	76fb      	strb	r3, [r7, #27]
			data |= (BIT_FIFO_CONFIG1_TEMP_MASK | BIT_FIFO_CONFIG1_TMST_FSYNC_MASK);
  401f9c:	7efb      	ldrb	r3, [r7, #27]
  401f9e:	f043 030c 	orr.w	r3, r3, #12
  401fa2:	b2db      	uxtb	r3, r3
  401fa4:	76fb      	strb	r3, [r7, #27]
			status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG1, 1, &data);
  401fa6:	f107 031b 	add.w	r3, r7, #27
  401faa:	2201      	movs	r2, #1
  401fac:	215f      	movs	r1, #95	; 0x5f
  401fae:	6878      	ldr	r0, [r7, #4]
  401fb0:	4c13      	ldr	r4, [pc, #76]	; (402000 <inv_icm426xx_configure_fifo+0x1f4>)
  401fb2:	47a0      	blx	r4
  401fb4:	4602      	mov	r2, r0
  401fb6:	69fb      	ldr	r3, [r7, #28]
  401fb8:	4313      	orrs	r3, r2
  401fba:	61fb      	str	r3, [r7, #28]
			
			/* Enable Data Ready Interrupt */
			status |= inv_icm426xx_get_config_int1(s, &config_int);
  401fbc:	f107 030c 	add.w	r3, r7, #12
  401fc0:	4619      	mov	r1, r3
  401fc2:	6878      	ldr	r0, [r7, #4]
  401fc4:	4b0f      	ldr	r3, [pc, #60]	; (402004 <inv_icm426xx_configure_fifo+0x1f8>)
  401fc6:	4798      	blx	r3
  401fc8:	4602      	mov	r2, r0
  401fca:	69fb      	ldr	r3, [r7, #28]
  401fcc:	4313      	orrs	r3, r2
  401fce:	61fb      	str	r3, [r7, #28]
			config_int.INV_ICM426XX_UI_DRDY = INV_ICM426XX_ENABLE;
  401fd0:	2301      	movs	r3, #1
  401fd2:	737b      	strb	r3, [r7, #13]
			status |= inv_icm426xx_set_config_int1(s, &config_int);
  401fd4:	f107 030c 	add.w	r3, r7, #12
  401fd8:	4619      	mov	r1, r3
  401fda:	6878      	ldr	r0, [r7, #4]
  401fdc:	4b0a      	ldr	r3, [pc, #40]	; (402008 <inv_icm426xx_configure_fifo+0x1fc>)
  401fde:	4798      	blx	r3
  401fe0:	4602      	mov	r2, r0
  401fe2:	69fb      	ldr	r3, [r7, #28]
  401fe4:	4313      	orrs	r3, r2
  401fe6:	61fb      	str	r3, [r7, #28]
			break;
  401fe8:	e002      	b.n	401ff0 <inv_icm426xx_configure_fifo+0x1e4>

		default :
			status = -1;
  401fea:	f04f 33ff 	mov.w	r3, #4294967295
  401fee:	61fb      	str	r3, [r7, #28]
	}
	return status;
  401ff0:	69fb      	ldr	r3, [r7, #28]
}
  401ff2:	4618      	mov	r0, r3
  401ff4:	3724      	adds	r7, #36	; 0x24
  401ff6:	46bd      	mov	sp, r7
  401ff8:	bd90      	pop	{r4, r7, pc}
  401ffa:	bf00      	nop
  401ffc:	00402589 	.word	0x00402589
  402000:	00402655 	.word	0x00402655
  402004:	00401439 	.word	0x00401439
  402008:	0040174d 	.word	0x0040174d

0040200c <inv_icm426xx_configure_serial_interface>:

/*
 * Static functions definition
 */
static int inv_icm426xx_configure_serial_interface(struct inv_icm426xx * s)
{
  40200c:	b590      	push	{r4, r7, lr}
  40200e:	b085      	sub	sp, #20
  402010:	af00      	add	r7, sp, #0
  402012:	6078      	str	r0, [r7, #4]
	int status = 0;
  402014:	2300      	movs	r3, #0
  402016:	60fb      	str	r3, [r7, #12]
	uint8_t value;

	/* Set memory bank 1 */
	status |= inv_icm426xx_set_reg_bank(s, 1);
  402018:	2101      	movs	r1, #1
  40201a:	6878      	ldr	r0, [r7, #4]
  40201c:	4b36      	ldr	r3, [pc, #216]	; (4020f8 <inv_icm426xx_configure_serial_interface+0xec>)
  40201e:	4798      	blx	r3
  402020:	4602      	mov	r2, r0
  402022:	68fb      	ldr	r3, [r7, #12]
  402024:	4313      	orrs	r3, r2
  402026:	60fb      	str	r3, [r7, #12]

	switch(s->transport.serif.serif_type) {
  402028:	687b      	ldr	r3, [r7, #4]
  40202a:	7e1b      	ldrb	r3, [r3, #24]
  40202c:	2b01      	cmp	r3, #1
  40202e:	d043      	beq.n	4020b8 <inv_icm426xx_configure_serial_interface+0xac>
  402030:	2b02      	cmp	r3, #2
  402032:	d01d      	beq.n	402070 <inv_icm426xx_configure_serial_interface+0x64>
  402034:	2b00      	cmp	r3, #0
  402036:	d14d      	bne.n	4020d4 <inv_icm426xx_configure_serial_interface+0xc8>
	
		case ICM426XX_UI_I2C:
			/* Enable I2C 50ns spike filtering */
			status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  402038:	f107 030b 	add.w	r3, r7, #11
  40203c:	2201      	movs	r2, #1
  40203e:	217c      	movs	r1, #124	; 0x7c
  402040:	6878      	ldr	r0, [r7, #4]
  402042:	4c2e      	ldr	r4, [pc, #184]	; (4020fc <inv_icm426xx_configure_serial_interface+0xf0>)
  402044:	47a0      	blx	r4
  402046:	4602      	mov	r2, r0
  402048:	68fb      	ldr	r3, [r7, #12]
  40204a:	4313      	orrs	r3, r2
  40204c:	60fb      	str	r3, [r7, #12]
			value &= (uint8_t)~(BIT_INTF_CONFIG6_I3C_SDR_EN_MASK | BIT_INTF_CONFIG6_I3C_DDR_EN_MASK);
  40204e:	7afb      	ldrb	r3, [r7, #11]
  402050:	f023 0303 	bic.w	r3, r3, #3
  402054:	b2db      	uxtb	r3, r3
  402056:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  402058:	f107 030b 	add.w	r3, r7, #11
  40205c:	2201      	movs	r2, #1
  40205e:	217c      	movs	r1, #124	; 0x7c
  402060:	6878      	ldr	r0, [r7, #4]
  402062:	4c27      	ldr	r4, [pc, #156]	; (402100 <inv_icm426xx_configure_serial_interface+0xf4>)
  402064:	47a0      	blx	r4
  402066:	4602      	mov	r2, r0
  402068:	68fb      	ldr	r3, [r7, #12]
  40206a:	4313      	orrs	r3, r2
  40206c:	60fb      	str	r3, [r7, #12]
			break;
  40206e:	e035      	b.n	4020dc <inv_icm426xx_configure_serial_interface+0xd0>
			
		case ICM426XX_UI_I3C:
			/* Enable In Band Interrupt for I3C UI interface and associated payload byte and assign dynamic address */
			status |= inv_icm426xx_read_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  402070:	f107 030b 	add.w	r3, r7, #11
  402074:	2201      	movs	r2, #1
  402076:	217c      	movs	r1, #124	; 0x7c
  402078:	6878      	ldr	r0, [r7, #4]
  40207a:	4c20      	ldr	r4, [pc, #128]	; (4020fc <inv_icm426xx_configure_serial_interface+0xf0>)
  40207c:	47a0      	blx	r4
  40207e:	4602      	mov	r2, r0
  402080:	68fb      	ldr	r3, [r7, #12]
  402082:	4313      	orrs	r3, r2
  402084:	60fb      	str	r3, [r7, #12]
			value |= (BIT_INTF_CONFIG6_I3C_IBI_BYTE_EN_MASK | BIT_INTF_CONFIG6_I3C_IBI_EN_MASK);
  402086:	7afb      	ldrb	r3, [r7, #11]
  402088:	f043 030c 	orr.w	r3, r3, #12
  40208c:	b2db      	uxtb	r3, r3
  40208e:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG6_B1, 1, &value);
  402090:	f107 030b 	add.w	r3, r7, #11
  402094:	2201      	movs	r2, #1
  402096:	217c      	movs	r1, #124	; 0x7c
  402098:	6878      	ldr	r0, [r7, #4]
  40209a:	4c19      	ldr	r4, [pc, #100]	; (402100 <inv_icm426xx_configure_serial_interface+0xf4>)
  40209c:	47a0      	blx	r4
  40209e:	4602      	mov	r2, r0
  4020a0:	68fb      	ldr	r3, [r7, #12]
  4020a2:	4313      	orrs	r3, r2
  4020a4:	60fb      	str	r3, [r7, #12]
			status |= s->transport.serif.configure((struct inv_icm426xx_serif *)s);
  4020a6:	687b      	ldr	r3, [r7, #4]
  4020a8:	68db      	ldr	r3, [r3, #12]
  4020aa:	6878      	ldr	r0, [r7, #4]
  4020ac:	4798      	blx	r3
  4020ae:	4602      	mov	r2, r0
  4020b0:	68fb      	ldr	r3, [r7, #12]
  4020b2:	4313      	orrs	r3, r2
  4020b4:	60fb      	str	r3, [r7, #12]
			break;
  4020b6:	e011      	b.n	4020dc <inv_icm426xx_configure_serial_interface+0xd0>
			
		case ICM426XX_UI_SPI4:
			value = ICM426XX_INTF_CONFIG4_AP_SPI4W;
  4020b8:	2302      	movs	r3, #2
  4020ba:	72fb      	strb	r3, [r7, #11]
			status |= inv_icm426xx_write_reg(s, MPUREG_INTF_CONFIG4_B1, 1, &value);
  4020bc:	f107 030b 	add.w	r3, r7, #11
  4020c0:	2201      	movs	r2, #1
  4020c2:	217a      	movs	r1, #122	; 0x7a
  4020c4:	6878      	ldr	r0, [r7, #4]
  4020c6:	4c0e      	ldr	r4, [pc, #56]	; (402100 <inv_icm426xx_configure_serial_interface+0xf4>)
  4020c8:	47a0      	blx	r4
  4020ca:	4602      	mov	r2, r0
  4020cc:	68fb      	ldr	r3, [r7, #12]
  4020ce:	4313      	orrs	r3, r2
  4020d0:	60fb      	str	r3, [r7, #12]
			break;
  4020d2:	e003      	b.n	4020dc <inv_icm426xx_configure_serial_interface+0xd0>
			
		default:
			status |= INV_ERROR_BAD_ARG;
  4020d4:	68fb      	ldr	r3, [r7, #12]
  4020d6:	f063 030a 	orn	r3, r3, #10
  4020da:	60fb      	str	r3, [r7, #12]
	}

	/* Set memory bank 0 */
	status |= inv_icm426xx_set_reg_bank(s, 0);
  4020dc:	2100      	movs	r1, #0
  4020de:	6878      	ldr	r0, [r7, #4]
  4020e0:	4b05      	ldr	r3, [pc, #20]	; (4020f8 <inv_icm426xx_configure_serial_interface+0xec>)
  4020e2:	4798      	blx	r3
  4020e4:	4602      	mov	r2, r0
  4020e6:	68fb      	ldr	r3, [r7, #12]
  4020e8:	4313      	orrs	r3, r2
  4020ea:	60fb      	str	r3, [r7, #12]
	
	return status;
  4020ec:	68fb      	ldr	r3, [r7, #12]
}
  4020ee:	4618      	mov	r0, r3
  4020f0:	3714      	adds	r7, #20
  4020f2:	46bd      	mov	sp, r7
  4020f4:	bd90      	pop	{r4, r7, pc}
  4020f6:	bf00      	nop
  4020f8:	004009d9 	.word	0x004009d9
  4020fc:	00402589 	.word	0x00402589
  402100:	00402655 	.word	0x00402655

00402104 <inv_icm426xx_init_hardware_from_ui>:

static int inv_icm426xx_init_hardware_from_ui(struct inv_icm426xx * s)
{
  402104:	b590      	push	{r4, r7, lr}
  402106:	b08b      	sub	sp, #44	; 0x2c
  402108:	af00      	add	r7, sp, #0
  40210a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	int status = 0;
  40210c:	2300      	movs	r3, #0
  40210e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t wom_threshold[3];
	uint8_t gyro_cfg_0_reg, accel_cfg_0_reg, tmst_cfg_reg; 
	inv_icm426xx_interrupt_parameter_t config_int = {
  402110:	4bb4      	ldr	r3, [pc, #720]	; (4023e4 <inv_icm426xx_init_hardware_from_ui+0x2e0>)
  402112:	f107 040c 	add.w	r4, r7, #12
  402116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402118:	c407      	stmia	r4!, {r0, r1, r2}
  40211a:	8023      	strh	r3, [r4, #0]
		.INV_ICM426XX_SLEEP_DET     = INV_ICM426XX_ENABLE,	
		.INV_ICM426XX_WAKE_DET      = INV_ICM426XX_ENABLE,	
		.INV_ICM426XX_TAP_DET       = INV_ICM426XX_ENABLE,	
	};

	status |= inv_icm426xx_device_reset(s);
  40211c:	6878      	ldr	r0, [r7, #4]
  40211e:	4bb2      	ldr	r3, [pc, #712]	; (4023e8 <inv_icm426xx_init_hardware_from_ui+0x2e4>)
  402120:	4798      	blx	r3
  402122:	4602      	mov	r2, r0
  402124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402126:	4313      	orrs	r3, r2
  402128:	627b      	str	r3, [r7, #36]	; 0x24

	/* Setup MEMs properties */
	status |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  40212a:	f107 031f 	add.w	r3, r7, #31
  40212e:	2201      	movs	r2, #1
  402130:	214f      	movs	r1, #79	; 0x4f
  402132:	6878      	ldr	r0, [r7, #4]
  402134:	4cad      	ldr	r4, [pc, #692]	; (4023ec <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  402136:	47a0      	blx	r4
  402138:	4602      	mov	r2, r0
  40213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40213c:	4313      	orrs	r3, r2
  40213e:	627b      	str	r3, [r7, #36]	; 0x24
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  402140:	f107 031e 	add.w	r3, r7, #30
  402144:	2201      	movs	r2, #1
  402146:	2150      	movs	r1, #80	; 0x50
  402148:	6878      	ldr	r0, [r7, #4]
  40214a:	4ca8      	ldr	r4, [pc, #672]	; (4023ec <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  40214c:	47a0      	blx	r4
  40214e:	4602      	mov	r2, r0
  402150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402152:	4313      	orrs	r3, r2
  402154:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_cfg_0_reg &= (uint8_t)~BIT_GYRO_CONFIG0_FS_SEL_MASK;
  402156:	7ffb      	ldrb	r3, [r7, #31]
  402158:	f003 031f 	and.w	r3, r3, #31
  40215c:	b2db      	uxtb	r3, r3
  40215e:	77fb      	strb	r3, [r7, #31]
	gyro_cfg_0_reg |= (uint8_t)ICM426XX_GYRO_CONFIG0_FS_SEL_2000dps;
  402160:	7ffb      	ldrb	r3, [r7, #31]
  402162:	77fb      	strb	r3, [r7, #31]
	accel_cfg_0_reg &= (uint8_t)~BIT_ACCEL_CONFIG0_FS_SEL_MASK;
  402164:	7fbb      	ldrb	r3, [r7, #30]
  402166:	f003 031f 	and.w	r3, r3, #31
  40216a:	b2db      	uxtb	r3, r3
  40216c:	77bb      	strb	r3, [r7, #30]
	accel_cfg_0_reg |= (uint8_t)ICM426XX_ACCEL_CONFIG0_FS_SEL_4g;
  40216e:	7fbb      	ldrb	r3, [r7, #30]
  402170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402174:	b2db      	uxtb	r3, r3
  402176:	77bb      	strb	r3, [r7, #30]
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG0, 1, &gyro_cfg_0_reg);
  402178:	f107 031f 	add.w	r3, r7, #31
  40217c:	2201      	movs	r2, #1
  40217e:	214f      	movs	r1, #79	; 0x4f
  402180:	6878      	ldr	r0, [r7, #4]
  402182:	4c9b      	ldr	r4, [pc, #620]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  402184:	47a0      	blx	r4
  402186:	4602      	mov	r2, r0
  402188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40218a:	4313      	orrs	r3, r2
  40218c:	627b      	str	r3, [r7, #36]	; 0x24
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG0, 1, &accel_cfg_0_reg);
  40218e:	f107 031e 	add.w	r3, r7, #30
  402192:	2201      	movs	r2, #1
  402194:	2150      	movs	r1, #80	; 0x50
  402196:	6878      	ldr	r0, [r7, #4]
  402198:	4c95      	ldr	r4, [pc, #596]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  40219a:	47a0      	blx	r4
  40219c:	4602      	mov	r2, r0
  40219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4021a0:	4313      	orrs	r3, r2
  4021a2:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* make sure FIFO is disabled */
	data = ICM426XX_FIFO_CONFIG_MODE_BYPASS;
  4021a4:	2300      	movs	r3, #0
  4021a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_FIFO_CONFIG, 1, &data);
  4021aa:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4021ae:	2201      	movs	r2, #1
  4021b0:	2116      	movs	r1, #22
  4021b2:	6878      	ldr	r0, [r7, #4]
  4021b4:	4c8e      	ldr	r4, [pc, #568]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4021b6:	47a0      	blx	r4
  4021b8:	4602      	mov	r2, r0
  4021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4021bc:	4313      	orrs	r3, r2
  4021be:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Deactivate FSYNC by default */
	status |= inv_icm426xx_read_reg(s, MPUREG_FSYNC_CONFIG, 1, &data);
  4021c0:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4021c4:	2201      	movs	r2, #1
  4021c6:	2162      	movs	r1, #98	; 0x62
  4021c8:	6878      	ldr	r0, [r7, #4]
  4021ca:	4c88      	ldr	r4, [pc, #544]	; (4023ec <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  4021cc:	47a0      	blx	r4
  4021ce:	4602      	mov	r2, r0
  4021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4021d2:	4313      	orrs	r3, r2
  4021d4:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_FSYNC_CONFIG_UI_SEL_MASK;
  4021d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4021da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4021de:	b2db      	uxtb	r3, r3
  4021e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_FSYNC_CONFIG, 1, &data);
  4021e4:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4021e8:	2201      	movs	r2, #1
  4021ea:	2162      	movs	r1, #98	; 0x62
  4021ec:	6878      	ldr	r0, [r7, #4]
  4021ee:	4c80      	ldr	r4, [pc, #512]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4021f0:	47a0      	blx	r4
  4021f2:	4602      	mov	r2, r0
  4021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4021f6:	4313      	orrs	r3, r2
  4021f8:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_read_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  4021fa:	f107 031d 	add.w	r3, r7, #29
  4021fe:	2201      	movs	r2, #1
  402200:	2154      	movs	r1, #84	; 0x54
  402202:	6878      	ldr	r0, [r7, #4]
  402204:	4c79      	ldr	r4, [pc, #484]	; (4023ec <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  402206:	47a0      	blx	r4
  402208:	4602      	mov	r2, r0
  40220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40220c:	4313      	orrs	r3, r2
  40220e:	627b      	str	r3, [r7, #36]	; 0x24
	tmst_cfg_reg &= (uint8_t)~BIT_TMST_CONFIG_TMST_FSYNC_MASK; // == ICM426XX_FSYNC_CONFIG_UI_SEL_NO
  402210:	7f7b      	ldrb	r3, [r7, #29]
  402212:	f023 0302 	bic.w	r3, r3, #2
  402216:	b2db      	uxtb	r3, r3
  402218:	777b      	strb	r3, [r7, #29]
	status |= inv_icm426xx_write_reg(s, MPUREG_TMST_CONFIG, 1, &tmst_cfg_reg);
  40221a:	f107 031d 	add.w	r3, r7, #29
  40221e:	2201      	movs	r2, #1
  402220:	2154      	movs	r1, #84	; 0x54
  402222:	6878      	ldr	r0, [r7, #4]
  402224:	4c72      	ldr	r4, [pc, #456]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  402226:	47a0      	blx	r4
  402228:	4602      	mov	r2, r0
  40222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40222c:	4313      	orrs	r3, r2
  40222e:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Set default timestamp resolution 16us (Mobile use cases) */
	status |= inv_icm426xx_configure_timestamp_resolution(s, ICM426XX_TMST_CONFIG_RESOL_16us);
  402230:	2108      	movs	r1, #8
  402232:	6878      	ldr	r0, [r7, #4]
  402234:	4b6f      	ldr	r3, [pc, #444]	; (4023f4 <inv_icm426xx_init_hardware_from_ui+0x2f0>)
  402236:	4798      	blx	r3
  402238:	4602      	mov	r2, r0
  40223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40223c:	4313      	orrs	r3, r2
  40223e:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_configure_fifo(s, INV_ICM426XX_FIFO_ENABLED);
  402240:	2101      	movs	r1, #1
  402242:	6878      	ldr	r0, [r7, #4]
  402244:	4b6c      	ldr	r3, [pc, #432]	; (4023f8 <inv_icm426xx_init_hardware_from_ui+0x2f4>)
  402246:	4798      	blx	r3
  402248:	4602      	mov	r2, r0
  40224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40224c:	4313      	orrs	r3, r2
  40224e:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_CONFIG, 1, &data);
  402250:	f107 0323 	add.w	r3, r7, #35	; 0x23
  402254:	2201      	movs	r2, #1
  402256:	2114      	movs	r1, #20
  402258:	6878      	ldr	r0, [r7, #4]
  40225a:	4c64      	ldr	r4, [pc, #400]	; (4023ec <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  40225c:	47a0      	blx	r4
  40225e:	4602      	mov	r2, r0
  402260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402262:	4313      	orrs	r3, r2
  402264:	627b      	str	r3, [r7, #36]	; 0x24
	/* Enable push pull on INT1 to avoid moving in Test Mode after a soft reset */
	data |= (uint8_t)ICM426XX_INT_CONFIG_INT1_DRIVE_CIRCUIT_PP;
  402266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40226a:	f043 0302 	orr.w	r3, r3, #2
  40226e:	b2db      	uxtb	r3, r3
  402270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	/* Configure the INT1 interrupt pulse as active high */
	data |= (uint8_t)ICM426XX_INT_CONFIG_INT1_POLARITY_HIGH;
  402274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402278:	f043 0301 	orr.w	r3, r3, #1
  40227c:	b2db      	uxtb	r3, r3
  40227e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_CONFIG, 1, &data);
  402282:	f107 0323 	add.w	r3, r7, #35	; 0x23
  402286:	2201      	movs	r2, #1
  402288:	2114      	movs	r1, #20
  40228a:	6878      	ldr	r0, [r7, #4]
  40228c:	4c58      	ldr	r4, [pc, #352]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  40228e:	47a0      	blx	r4
  402290:	4602      	mov	r2, r0
  402292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402294:	4313      	orrs	r3, r2
  402296:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Set interrupt config */
	status |= inv_icm426xx_set_config_int1(s,&config_int);
  402298:	f107 030c 	add.w	r3, r7, #12
  40229c:	4619      	mov	r1, r3
  40229e:	6878      	ldr	r0, [r7, #4]
  4022a0:	4b56      	ldr	r3, [pc, #344]	; (4023fc <inv_icm426xx_init_hardware_from_ui+0x2f8>)
  4022a2:	4798      	blx	r3
  4022a4:	4602      	mov	r2, r0
  4022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4022a8:	4313      	orrs	r3, r2
  4022aa:	627b      	str	r3, [r7, #36]	; 0x24
	config_int.INV_ICM426XX_UI_DRDY  = INV_ICM426XX_ENABLE;
  4022ac:	2301      	movs	r3, #1
  4022ae:	737b      	strb	r3, [r7, #13]
	config_int.INV_ICM426XX_FIFO_THS = INV_ICM426XX_DISABLE;
  4022b0:	2300      	movs	r3, #0
  4022b2:	73bb      	strb	r3, [r7, #14]
	status |= inv_icm426xx_set_config_ibi(s,&config_int);
  4022b4:	f107 030c 	add.w	r3, r7, #12
  4022b8:	4619      	mov	r1, r3
  4022ba:	6878      	ldr	r0, [r7, #4]
  4022bc:	4b50      	ldr	r3, [pc, #320]	; (402400 <inv_icm426xx_init_hardware_from_ui+0x2fc>)
  4022be:	4798      	blx	r3
  4022c0:	4602      	mov	r2, r0
  4022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4022c4:	4313      	orrs	r3, r2
  4022c6:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* Set the ASY_RESET_DISABLE bit to 0 (async enabled) in order to chop Tpulse as soon as interrupt status is read
	 * Guideline is to set the ASY_RESET_DISABLE bit to 0 in pulse mode
	 * No effect in latch mode */
	status |= inv_icm426xx_read_reg(s, MPUREG_INT_CONFIG1, 1, &data);
  4022c8:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4022cc:	2201      	movs	r2, #1
  4022ce:	2164      	movs	r1, #100	; 0x64
  4022d0:	6878      	ldr	r0, [r7, #4]
  4022d2:	4c46      	ldr	r4, [pc, #280]	; (4023ec <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  4022d4:	47a0      	blx	r4
  4022d6:	4602      	mov	r2, r0
  4022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4022da:	4313      	orrs	r3, r2
  4022dc:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_INT_CONFIG1_ASY_RST_MASK;
  4022de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4022e2:	f023 0310 	bic.w	r3, r3, #16
  4022e6:	b2db      	uxtb	r3, r3
  4022e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	data |= (uint8_t)ICM426XX_INT_CONFIG1_ASY_RST_ENABLED;
  4022ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4022f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_INT_CONFIG1, 1, &data);
  4022f4:	f107 0323 	add.w	r3, r7, #35	; 0x23
  4022f8:	2201      	movs	r2, #1
  4022fa:	2164      	movs	r1, #100	; 0x64
  4022fc:	6878      	ldr	r0, [r7, #4]
  4022fe:	4c3c      	ldr	r4, [pc, #240]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  402300:	47a0      	blx	r4
  402302:	4602      	mov	r2, r0
  402304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402306:	4313      	orrs	r3, r2
  402308:	627b      	str	r3, [r7, #36]	; 0x24

	/* Set the UI filter order to 2 for both gyro and accel */
	status |= inv_icm426xx_read_reg(s, MPUREG_GYRO_CONFIG1, 1, &data);
  40230a:	f107 0323 	add.w	r3, r7, #35	; 0x23
  40230e:	2201      	movs	r2, #1
  402310:	2151      	movs	r1, #81	; 0x51
  402312:	6878      	ldr	r0, [r7, #4]
  402314:	4c35      	ldr	r4, [pc, #212]	; (4023ec <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  402316:	47a0      	blx	r4
  402318:	4602      	mov	r2, r0
  40231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40231c:	4313      	orrs	r3, r2
  40231e:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_GYRO_CONFIG1_GYRO_UI_FILT_ORD_MASK;
  402320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402324:	f023 030c 	bic.w	r3, r3, #12
  402328:	b2db      	uxtb	r3, r3
  40232a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	data |= (uint8_t)ICM426XX_GYRO_CONFIG_GYRO_UI_FILT_ORD_2ND_ORDER;
  40232e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  402332:	f043 0304 	orr.w	r3, r3, #4
  402336:	b2db      	uxtb	r3, r3
  402338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_GYRO_CONFIG1, 1, &data);
  40233c:	f107 0323 	add.w	r3, r7, #35	; 0x23
  402340:	2201      	movs	r2, #1
  402342:	2151      	movs	r1, #81	; 0x51
  402344:	6878      	ldr	r0, [r7, #4]
  402346:	4c2a      	ldr	r4, [pc, #168]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  402348:	47a0      	blx	r4
  40234a:	4602      	mov	r2, r0
  40234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40234e:	4313      	orrs	r3, r2
  402350:	627b      	str	r3, [r7, #36]	; 0x24
	status |= inv_icm426xx_read_reg(s, MPUREG_ACCEL_CONFIG1, 1, &data);
  402352:	f107 0323 	add.w	r3, r7, #35	; 0x23
  402356:	2201      	movs	r2, #1
  402358:	2153      	movs	r1, #83	; 0x53
  40235a:	6878      	ldr	r0, [r7, #4]
  40235c:	4c23      	ldr	r4, [pc, #140]	; (4023ec <inv_icm426xx_init_hardware_from_ui+0x2e8>)
  40235e:	47a0      	blx	r4
  402360:	4602      	mov	r2, r0
  402362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402364:	4313      	orrs	r3, r2
  402366:	627b      	str	r3, [r7, #36]	; 0x24
	data &= (uint8_t)~BIT_ACCEL_CONFIG1_ACCEL_UI_FILT_ORD_MASK;
  402368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40236c:	f023 0318 	bic.w	r3, r3, #24
  402370:	b2db      	uxtb	r3, r3
  402372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	data |= (uint8_t)ICM426XX_ACCEL_CONFIG_ACCEL_UI_FILT_ORD_2ND_ORDER;
  402376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40237a:	f043 0308 	orr.w	r3, r3, #8
  40237e:	b2db      	uxtb	r3, r3
  402380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_CONFIG1, 1, &data);
  402384:	f107 0323 	add.w	r3, r7, #35	; 0x23
  402388:	2201      	movs	r2, #1
  40238a:	2153      	movs	r1, #83	; 0x53
  40238c:	6878      	ldr	r0, [r7, #4]
  40238e:	4c18      	ldr	r4, [pc, #96]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  402390:	47a0      	blx	r4
  402392:	4602      	mov	r2, r0
  402394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402396:	4313      	orrs	r3, r2
  402398:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* FIFO packets are 16bit format by default (i.e. high res is disabled) */
	status |= inv_icm426xx_disable_high_resolution_fifo(s);
  40239a:	6878      	ldr	r0, [r7, #4]
  40239c:	4b19      	ldr	r3, [pc, #100]	; (402404 <inv_icm426xx_init_hardware_from_ui+0x300>)
  40239e:	4798      	blx	r3
  4023a0:	4602      	mov	r2, r0
  4023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4023a4:	4313      	orrs	r3, r2
  4023a6:	627b      	str	r3, [r7, #36]	; 0x24
	
	/* For retro-compatibility, configure WOM to compare current sample with the previous sample and to produce signal when all axis exceed 52 mg */
	status |= inv_icm426xx_set_reg_bank(s, 4); /* Set memory bank 4 */
  4023a8:	2104      	movs	r1, #4
  4023aa:	6878      	ldr	r0, [r7, #4]
  4023ac:	4b16      	ldr	r3, [pc, #88]	; (402408 <inv_icm426xx_init_hardware_from_ui+0x304>)
  4023ae:	4798      	blx	r3
  4023b0:	4602      	mov	r2, r0
  4023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4023b4:	4313      	orrs	r3, r2
  4023b6:	627b      	str	r3, [r7, #36]	; 0x24
	wom_threshold[0] = ICM426XX_DEFAULT_WOM_THS_MG; /* Set X threshold */
  4023b8:	230d      	movs	r3, #13
  4023ba:	f887 3020 	strb.w	r3, [r7, #32]
	wom_threshold[1] = ICM426XX_DEFAULT_WOM_THS_MG; /* Set Y threshold */
  4023be:	230d      	movs	r3, #13
  4023c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	wom_threshold[2] = ICM426XX_DEFAULT_WOM_THS_MG; /* Set Z threshold */
  4023c4:	230d      	movs	r3, #13
  4023c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	status |= inv_icm426xx_write_reg(s, MPUREG_ACCEL_WOM_X_THR_B4, sizeof(wom_threshold), &wom_threshold[0]);
  4023ca:	f107 0320 	add.w	r3, r7, #32
  4023ce:	2203      	movs	r2, #3
  4023d0:	214a      	movs	r1, #74	; 0x4a
  4023d2:	6878      	ldr	r0, [r7, #4]
  4023d4:	4c06      	ldr	r4, [pc, #24]	; (4023f0 <inv_icm426xx_init_hardware_from_ui+0x2ec>)
  4023d6:	47a0      	blx	r4
  4023d8:	4602      	mov	r2, r0
  4023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4023dc:	4313      	orrs	r3, r2
  4023de:	627b      	str	r3, [r7, #36]	; 0x24
	
	status |= inv_icm426xx_set_reg_bank(s, 0); /* Set memory bank 0 */
  4023e0:	2100      	movs	r1, #0
  4023e2:	e013      	b.n	40240c <inv_icm426xx_init_hardware_from_ui+0x308>
  4023e4:	0040c480 	.word	0x0040c480
  4023e8:	00400ab5 	.word	0x00400ab5
  4023ec:	00402589 	.word	0x00402589
  4023f0:	00402655 	.word	0x00402655
  4023f4:	004013d5 	.word	0x004013d5
  4023f8:	00401e0d 	.word	0x00401e0d
  4023fc:	0040174d 	.word	0x0040174d
  402400:	00401575 	.word	0x00401575
  402404:	00401ded 	.word	0x00401ded
  402408:	004009d9 	.word	0x004009d9
  40240c:	6878      	ldr	r0, [r7, #4]
  40240e:	4b14      	ldr	r3, [pc, #80]	; (402460 <inv_icm426xx_init_hardware_from_ui+0x35c>)
  402410:	4798      	blx	r3
  402412:	4602      	mov	r2, r0
  402414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402416:	4313      	orrs	r3, r2
  402418:	627b      	str	r3, [r7, #36]	; 0x24
	data = ((uint8_t)ICM426XX_SMD_CONFIG_WOM_INT_MODE_ANDED) | ((uint8_t)ICM426XX_SMD_CONFIG_WOM_MODE_CMP_PREV);
  40241a:	230c      	movs	r3, #12
  40241c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	status |= inv_icm426xx_write_reg(s, MPUREG_SMD_CONFIG, 1, &data);
  402420:	f107 0323 	add.w	r3, r7, #35	; 0x23
  402424:	2201      	movs	r2, #1
  402426:	2157      	movs	r1, #87	; 0x57
  402428:	6878      	ldr	r0, [r7, #4]
  40242a:	4c0e      	ldr	r4, [pc, #56]	; (402464 <inv_icm426xx_init_hardware_from_ui+0x360>)
  40242c:	47a0      	blx	r4
  40242e:	4602      	mov	r2, r0
  402430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402432:	4313      	orrs	r3, r2
  402434:	627b      	str	r3, [r7, #36]	; 0x24

	/* by default, set IIR filter BW to ODR/4 for LN, 16x averaging for GLP, 16x averaging for ALP */
	s->avg_bw_setting.acc_ln_bw = (uint8_t)ICM426XX_GYRO_ACCEL_CONFIG0_ACCEL_FILT_BW_4;
  402436:	687b      	ldr	r3, [r7, #4]
  402438:	2210      	movs	r2, #16
  40243a:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
	s->avg_bw_setting.gyr_ln_bw = (uint8_t)ICM426XX_GYRO_ACCEL_CONFIG0_GYRO_FILT_BW_4;
  40243e:	687b      	ldr	r3, [r7, #4]
  402440:	2201      	movs	r2, #1
  402442:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
	s->avg_bw_setting.acc_lp_avg = (uint8_t)ICM426XX_GYRO_ACCEL_CONFIG0_ACCEL_FILT_AVG_16;
  402446:	687b      	ldr	r3, [r7, #4]
  402448:	2260      	movs	r2, #96	; 0x60
  40244a:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872

	/* Reset self-test result variable*/
	s->st_result = 0;
  40244e:	687b      	ldr	r3, [r7, #4]
  402450:	2200      	movs	r2, #0
  402452:	641a      	str	r2, [r3, #64]	; 0x40

	return status;
  402454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  402456:	4618      	mov	r0, r3
  402458:	372c      	adds	r7, #44	; 0x2c
  40245a:	46bd      	mov	sp, r7
  40245c:	bd90      	pop	{r4, r7, pc}
  40245e:	bf00      	nop
  402460:	004009d9 	.word	0x004009d9
  402464:	00402655 	.word	0x00402655

00402468 <inv_icm426xx_format_data>:
	       && (lp_clk == ICM426XX_INTF_CONFIG1_ACCEL_LP_CLK_WUOSC)); /* WU oscillator is selected */
}

/* Default implementation converts ICM endian to little endian */
static void inv_icm426xx_format_data(const uint8_t endian, const uint8_t *in, uint16_t *out)
{
  402468:	b480      	push	{r7}
  40246a:	b085      	sub	sp, #20
  40246c:	af00      	add	r7, sp, #0
  40246e:	4603      	mov	r3, r0
  402470:	60b9      	str	r1, [r7, #8]
  402472:	607a      	str	r2, [r7, #4]
  402474:	73fb      	strb	r3, [r7, #15]
	if(endian == ICM426XX_INTF_CONFIG0_DATA_BIG_ENDIAN)
  402476:	7bfb      	ldrb	r3, [r7, #15]
  402478:	2b10      	cmp	r3, #16
  40247a:	d10d      	bne.n	402498 <inv_icm426xx_format_data+0x30>
		*out = (in[0] << 8) | in[1];
  40247c:	68bb      	ldr	r3, [r7, #8]
  40247e:	781b      	ldrb	r3, [r3, #0]
  402480:	021b      	lsls	r3, r3, #8
  402482:	b21a      	sxth	r2, r3
  402484:	68bb      	ldr	r3, [r7, #8]
  402486:	3301      	adds	r3, #1
  402488:	781b      	ldrb	r3, [r3, #0]
  40248a:	b21b      	sxth	r3, r3
  40248c:	4313      	orrs	r3, r2
  40248e:	b21b      	sxth	r3, r3
  402490:	b29a      	uxth	r2, r3
  402492:	687b      	ldr	r3, [r7, #4]
  402494:	801a      	strh	r2, [r3, #0]
	else
		*out = (in[1] << 8) | in[0];
}
  402496:	e00c      	b.n	4024b2 <inv_icm426xx_format_data+0x4a>
		*out = (in[1] << 8) | in[0];
  402498:	68bb      	ldr	r3, [r7, #8]
  40249a:	3301      	adds	r3, #1
  40249c:	781b      	ldrb	r3, [r3, #0]
  40249e:	021b      	lsls	r3, r3, #8
  4024a0:	b21a      	sxth	r2, r3
  4024a2:	68bb      	ldr	r3, [r7, #8]
  4024a4:	781b      	ldrb	r3, [r3, #0]
  4024a6:	b21b      	sxth	r3, r3
  4024a8:	4313      	orrs	r3, r2
  4024aa:	b21b      	sxth	r3, r3
  4024ac:	b29a      	uxth	r2, r3
  4024ae:	687b      	ldr	r3, [r7, #4]
  4024b0:	801a      	strh	r2, [r3, #0]
}
  4024b2:	bf00      	nop
  4024b4:	3714      	adds	r7, #20
  4024b6:	46bd      	mov	sp, r7
  4024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024bc:	4770      	bx	lr
	...

004024c0 <inv_icm426xx_init_transport>:
static uint8_t * get_register_cache_addr(struct inv_icm426xx * s, uint8_t reg);
static uint8_t is_aux_interface(struct inv_icm426xx_transport *t);


int inv_icm426xx_init_transport(struct inv_icm426xx * s)
{
  4024c0:	b590      	push	{r4, r7, lr}
  4024c2:	b085      	sub	sp, #20
  4024c4:	af00      	add	r7, sp, #0
  4024c6:	6078      	str	r0, [r7, #4]
	// Registers in cache must be in bank 0
	int status = 0;
  4024c8:	2300      	movs	r3, #0
  4024ca:	60fb      	str	r3, [r7, #12]
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  4024cc:	687b      	ldr	r3, [r7, #4]
  4024ce:	60bb      	str	r3, [r7, #8]

	if(!is_aux_interface(t)){
  4024d0:	68b8      	ldr	r0, [r7, #8]
  4024d2:	4b2c      	ldr	r3, [pc, #176]	; (402584 <inv_icm426xx_init_transport+0xc4>)
  4024d4:	4798      	blx	r3
  4024d6:	4603      	mov	r3, r0
  4024d8:	2b00      	cmp	r3, #0
  4024da:	d140      	bne.n	40255e <inv_icm426xx_init_transport+0x9e>
		status |= t->serif.read_reg(&(t->serif), MPUREG_INTF_CONFIG1,  &(t->register_cache.intf_cfg_1_reg), 1);
  4024dc:	68bb      	ldr	r3, [r7, #8]
  4024de:	685c      	ldr	r4, [r3, #4]
  4024e0:	68b8      	ldr	r0, [r7, #8]
  4024e2:	68bb      	ldr	r3, [r7, #8]
  4024e4:	f103 021c 	add.w	r2, r3, #28
  4024e8:	2301      	movs	r3, #1
  4024ea:	214d      	movs	r1, #77	; 0x4d
  4024ec:	47a0      	blx	r4
  4024ee:	4602      	mov	r2, r0
  4024f0:	68fb      	ldr	r3, [r7, #12]
  4024f2:	4313      	orrs	r3, r2
  4024f4:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_PWR_MGMT_0,    &(t->register_cache.pwr_mngt_0_reg), 1);
  4024f6:	68bb      	ldr	r3, [r7, #8]
  4024f8:	685c      	ldr	r4, [r3, #4]
  4024fa:	68b8      	ldr	r0, [r7, #8]
  4024fc:	68bb      	ldr	r3, [r7, #8]
  4024fe:	f103 021d 	add.w	r2, r3, #29
  402502:	2301      	movs	r3, #1
  402504:	214e      	movs	r1, #78	; 0x4e
  402506:	47a0      	blx	r4
  402508:	4602      	mov	r2, r0
  40250a:	68fb      	ldr	r3, [r7, #12]
  40250c:	4313      	orrs	r3, r2
  40250e:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_GYRO_CONFIG0,  &(t->register_cache.gyro_cfg_0_reg), 1);
  402510:	68bb      	ldr	r3, [r7, #8]
  402512:	685c      	ldr	r4, [r3, #4]
  402514:	68b8      	ldr	r0, [r7, #8]
  402516:	68bb      	ldr	r3, [r7, #8]
  402518:	f103 021e 	add.w	r2, r3, #30
  40251c:	2301      	movs	r3, #1
  40251e:	214f      	movs	r1, #79	; 0x4f
  402520:	47a0      	blx	r4
  402522:	4602      	mov	r2, r0
  402524:	68fb      	ldr	r3, [r7, #12]
  402526:	4313      	orrs	r3, r2
  402528:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_ACCEL_CONFIG0, &(t->register_cache.accel_cfg_0_reg), 1);
  40252a:	68bb      	ldr	r3, [r7, #8]
  40252c:	685c      	ldr	r4, [r3, #4]
  40252e:	68b8      	ldr	r0, [r7, #8]
  402530:	68bb      	ldr	r3, [r7, #8]
  402532:	f103 021f 	add.w	r2, r3, #31
  402536:	2301      	movs	r3, #1
  402538:	2150      	movs	r1, #80	; 0x50
  40253a:	47a0      	blx	r4
  40253c:	4602      	mov	r2, r0
  40253e:	68fb      	ldr	r3, [r7, #12]
  402540:	4313      	orrs	r3, r2
  402542:	60fb      	str	r3, [r7, #12]
		status |= t->serif.read_reg(&(t->serif), MPUREG_TMST_CONFIG,   &(t->register_cache.tmst_cfg_reg), 1);
  402544:	68bb      	ldr	r3, [r7, #8]
  402546:	685c      	ldr	r4, [r3, #4]
  402548:	68b8      	ldr	r0, [r7, #8]
  40254a:	68bb      	ldr	r3, [r7, #8]
  40254c:	f103 0220 	add.w	r2, r3, #32
  402550:	2301      	movs	r3, #1
  402552:	2154      	movs	r1, #84	; 0x54
  402554:	47a0      	blx	r4
  402556:	4602      	mov	r2, r0
  402558:	68fb      	ldr	r3, [r7, #12]
  40255a:	4313      	orrs	r3, r2
  40255c:	60fb      	str	r3, [r7, #12]
	}
	
	status |= t->serif.read_reg(&(t->serif), MPUREG_REG_BANK_SEL,  &(t->register_cache.bank_sel_reg), 1);
  40255e:	68bb      	ldr	r3, [r7, #8]
  402560:	685c      	ldr	r4, [r3, #4]
  402562:	68b8      	ldr	r0, [r7, #8]
  402564:	68bb      	ldr	r3, [r7, #8]
  402566:	f103 0221 	add.w	r2, r3, #33	; 0x21
  40256a:	2301      	movs	r3, #1
  40256c:	2176      	movs	r1, #118	; 0x76
  40256e:	47a0      	blx	r4
  402570:	4602      	mov	r2, r0
  402572:	68fb      	ldr	r3, [r7, #12]
  402574:	4313      	orrs	r3, r2
  402576:	60fb      	str	r3, [r7, #12]

	return status;
  402578:	68fb      	ldr	r3, [r7, #12]
}
  40257a:	4618      	mov	r0, r3
  40257c:	3714      	adds	r7, #20
  40257e:	46bd      	mov	sp, r7
  402580:	bd90      	pop	{r4, r7, pc}
  402582:	bf00      	nop
  402584:	00402781 	.word	0x00402781

00402588 <inv_icm426xx_read_reg>:

int inv_icm426xx_read_reg(struct inv_icm426xx * s, uint8_t reg, uint32_t len, uint8_t * buf)
{
  402588:	b5b0      	push	{r4, r5, r7, lr}
  40258a:	b088      	sub	sp, #32
  40258c:	af00      	add	r7, sp, #0
  40258e:	60f8      	str	r0, [r7, #12]
  402590:	607a      	str	r2, [r7, #4]
  402592:	603b      	str	r3, [r7, #0]
  402594:	460b      	mov	r3, r1
  402596:	72fb      	strb	r3, [r7, #11]
	// First field of struct inv_icm426xx is assumed to be a struct inv_icm426xx_transport object.
	// So let's cast s to struct inv_icm426xx_transport and ignore the rest of struct inv_icm426xx.
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  402598:	68fb      	ldr	r3, [r7, #12]
  40259a:	61bb      	str	r3, [r7, #24]
	uint32_t i=0;
  40259c:	2300      	movs	r3, #0
  40259e:	61fb      	str	r3, [r7, #28]
	
	// Registers in cache are only in bank 0
	// Check if bank0 is used because of duplicate register addresses between banks
	// For AUX interface, register cache must not be used
	if((t->register_cache.bank_sel_reg == 0) && (is_aux_interface(t) == 0)) {
  4025a0:	69bb      	ldr	r3, [r7, #24]
  4025a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  4025a6:	2b00      	cmp	r3, #0
  4025a8:	d12a      	bne.n	402600 <inv_icm426xx_read_reg+0x78>
  4025aa:	69b8      	ldr	r0, [r7, #24]
  4025ac:	4b27      	ldr	r3, [pc, #156]	; (40264c <inv_icm426xx_read_reg+0xc4>)
  4025ae:	4798      	blx	r3
  4025b0:	4603      	mov	r3, r0
  4025b2:	2b00      	cmp	r3, #0
  4025b4:	d124      	bne.n	402600 <inv_icm426xx_read_reg+0x78>
		for(i=0; i<len ; i++) {
  4025b6:	2300      	movs	r3, #0
  4025b8:	61fb      	str	r3, [r7, #28]
  4025ba:	e015      	b.n	4025e8 <inv_icm426xx_read_reg+0x60>
			uint8_t * cache_addr  = get_register_cache_addr(s, reg+i);
  4025bc:	69fb      	ldr	r3, [r7, #28]
  4025be:	b2da      	uxtb	r2, r3
  4025c0:	7afb      	ldrb	r3, [r7, #11]
  4025c2:	4413      	add	r3, r2
  4025c4:	b2db      	uxtb	r3, r3
  4025c6:	4619      	mov	r1, r3
  4025c8:	68f8      	ldr	r0, [r7, #12]
  4025ca:	4b21      	ldr	r3, [pc, #132]	; (402650 <inv_icm426xx_read_reg+0xc8>)
  4025cc:	4798      	blx	r3
  4025ce:	6178      	str	r0, [r7, #20]
			if(cache_addr)
  4025d0:	697b      	ldr	r3, [r7, #20]
  4025d2:	2b00      	cmp	r3, #0
  4025d4:	d00d      	beq.n	4025f2 <inv_icm426xx_read_reg+0x6a>
				buf[i] = *cache_addr;
  4025d6:	683a      	ldr	r2, [r7, #0]
  4025d8:	69fb      	ldr	r3, [r7, #28]
  4025da:	4413      	add	r3, r2
  4025dc:	697a      	ldr	r2, [r7, #20]
  4025de:	7812      	ldrb	r2, [r2, #0]
  4025e0:	701a      	strb	r2, [r3, #0]
		for(i=0; i<len ; i++) {
  4025e2:	69fb      	ldr	r3, [r7, #28]
  4025e4:	3301      	adds	r3, #1
  4025e6:	61fb      	str	r3, [r7, #28]
  4025e8:	69fa      	ldr	r2, [r7, #28]
  4025ea:	687b      	ldr	r3, [r7, #4]
  4025ec:	429a      	cmp	r2, r3
  4025ee:	d3e5      	bcc.n	4025bc <inv_icm426xx_read_reg+0x34>
  4025f0:	e000      	b.n	4025f4 <inv_icm426xx_read_reg+0x6c>
			else
				break; // If one register isn't in cache, exit the loop and proceed a physical access
  4025f2:	bf00      	nop
		}
		
		if(i==len) // If the end of loop is reached, then all registers have been read in cache so return
  4025f4:	69fa      	ldr	r2, [r7, #28]
  4025f6:	687b      	ldr	r3, [r7, #4]
  4025f8:	429a      	cmp	r2, r3
  4025fa:	d101      	bne.n	402600 <inv_icm426xx_read_reg+0x78>
			return 0;
  4025fc:	2300      	movs	r3, #0
  4025fe:	e020      	b.n	402642 <inv_icm426xx_read_reg+0xba>
	}
	
	// Physical access to read registers
	if((len-i) > t->serif.max_read)
  402600:	687a      	ldr	r2, [r7, #4]
  402602:	69fb      	ldr	r3, [r7, #28]
  402604:	1ad2      	subs	r2, r2, r3
  402606:	69bb      	ldr	r3, [r7, #24]
  402608:	691b      	ldr	r3, [r3, #16]
  40260a:	429a      	cmp	r2, r3
  40260c:	d902      	bls.n	402614 <inv_icm426xx_read_reg+0x8c>
		return INV_ERROR_SIZE;
  40260e:	f06f 0304 	mvn.w	r3, #4
  402612:	e016      	b.n	402642 <inv_icm426xx_read_reg+0xba>
	if(t->serif.read_reg(&(t->serif), reg+i, &buf[i], len-i) != 0)
  402614:	69bb      	ldr	r3, [r7, #24]
  402616:	685c      	ldr	r4, [r3, #4]
  402618:	69b8      	ldr	r0, [r7, #24]
  40261a:	69fb      	ldr	r3, [r7, #28]
  40261c:	b2da      	uxtb	r2, r3
  40261e:	7afb      	ldrb	r3, [r7, #11]
  402620:	4413      	add	r3, r2
  402622:	b2d9      	uxtb	r1, r3
  402624:	683a      	ldr	r2, [r7, #0]
  402626:	69fb      	ldr	r3, [r7, #28]
  402628:	18d5      	adds	r5, r2, r3
  40262a:	687a      	ldr	r2, [r7, #4]
  40262c:	69fb      	ldr	r3, [r7, #28]
  40262e:	1ad3      	subs	r3, r2, r3
  402630:	462a      	mov	r2, r5
  402632:	47a0      	blx	r4
  402634:	4603      	mov	r3, r0
  402636:	2b00      	cmp	r3, #0
  402638:	d002      	beq.n	402640 <inv_icm426xx_read_reg+0xb8>
		return INV_ERROR_TRANSPORT;
  40263a:	f06f 0302 	mvn.w	r3, #2
  40263e:	e000      	b.n	402642 <inv_icm426xx_read_reg+0xba>
	
	return 0;
  402640:	2300      	movs	r3, #0
}
  402642:	4618      	mov	r0, r3
  402644:	3720      	adds	r7, #32
  402646:	46bd      	mov	sp, r7
  402648:	bdb0      	pop	{r4, r5, r7, pc}
  40264a:	bf00      	nop
  40264c:	00402781 	.word	0x00402781
  402650:	00402715 	.word	0x00402715

00402654 <inv_icm426xx_write_reg>:

int inv_icm426xx_write_reg(struct inv_icm426xx * s, uint8_t reg, uint32_t len, const uint8_t * buf)
{
  402654:	b590      	push	{r4, r7, lr}
  402656:	b089      	sub	sp, #36	; 0x24
  402658:	af00      	add	r7, sp, #0
  40265a:	60f8      	str	r0, [r7, #12]
  40265c:	607a      	str	r2, [r7, #4]
  40265e:	603b      	str	r3, [r7, #0]
  402660:	460b      	mov	r3, r1
  402662:	72fb      	strb	r3, [r7, #11]
	// First field of struct inv_icm426xx is assumed to be a struct inv_icm426xx_transport object.
	// So let's cast s to struct inv_icm426xx_transport and ignore the rest of struct inv_icm426xx.
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  402664:	68fb      	ldr	r3, [r7, #12]
  402666:	61bb      	str	r3, [r7, #24]
	uint32_t i;
	
	if(len > t->serif.max_write)
  402668:	69bb      	ldr	r3, [r7, #24]
  40266a:	695a      	ldr	r2, [r3, #20]
  40266c:	687b      	ldr	r3, [r7, #4]
  40266e:	429a      	cmp	r2, r3
  402670:	d202      	bcs.n	402678 <inv_icm426xx_write_reg+0x24>
		return INV_ERROR_SIZE;
  402672:	f06f 0304 	mvn.w	r3, #4
  402676:	e045      	b.n	402704 <inv_icm426xx_write_reg+0xb0>
	
	
	for(i=0; i<len; i++) {
  402678:	2300      	movs	r3, #0
  40267a:	61fb      	str	r3, [r7, #28]
  40267c:	e030      	b.n	4026e0 <inv_icm426xx_write_reg+0x8c>
		// Update bank_sel_reg in the cache
		if((reg+i) == MPUREG_REG_BANK_SEL){
  40267e:	7afa      	ldrb	r2, [r7, #11]
  402680:	69fb      	ldr	r3, [r7, #28]
  402682:	4413      	add	r3, r2
  402684:	2b76      	cmp	r3, #118	; 0x76
  402686:	d107      	bne.n	402698 <inv_icm426xx_write_reg+0x44>
			t->register_cache.bank_sel_reg = buf[i];
  402688:	683a      	ldr	r2, [r7, #0]
  40268a:	69fb      	ldr	r3, [r7, #28]
  40268c:	4413      	add	r3, r2
  40268e:	781a      	ldrb	r2, [r3, #0]
  402690:	69bb      	ldr	r3, [r7, #24]
  402692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  402696:	e020      	b.n	4026da <inv_icm426xx_write_reg+0x86>
		}
		else {
			uint8_t * cache_addr  = get_register_cache_addr(s, reg+i);
  402698:	69fb      	ldr	r3, [r7, #28]
  40269a:	b2da      	uxtb	r2, r3
  40269c:	7afb      	ldrb	r3, [r7, #11]
  40269e:	4413      	add	r3, r2
  4026a0:	b2db      	uxtb	r3, r3
  4026a2:	4619      	mov	r1, r3
  4026a4:	68f8      	ldr	r0, [r7, #12]
  4026a6:	4b19      	ldr	r3, [pc, #100]	; (40270c <inv_icm426xx_write_reg+0xb8>)
  4026a8:	4798      	blx	r3
  4026aa:	6178      	str	r0, [r7, #20]
			if(cache_addr){
  4026ac:	697b      	ldr	r3, [r7, #20]
  4026ae:	2b00      	cmp	r3, #0
  4026b0:	d013      	beq.n	4026da <inv_icm426xx_write_reg+0x86>
				if (t->register_cache.bank_sel_reg == 0){
  4026b2:	69bb      	ldr	r3, [r7, #24]
  4026b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  4026b8:	2b00      	cmp	r3, #0
  4026ba:	d10e      	bne.n	4026da <inv_icm426xx_write_reg+0x86>
					if(is_aux_interface(t) == 1)
  4026bc:	69b8      	ldr	r0, [r7, #24]
  4026be:	4b14      	ldr	r3, [pc, #80]	; (402710 <inv_icm426xx_write_reg+0xbc>)
  4026c0:	4798      	blx	r3
  4026c2:	4603      	mov	r3, r0
  4026c4:	2b01      	cmp	r3, #1
  4026c6:	d102      	bne.n	4026ce <inv_icm426xx_write_reg+0x7a>
						return INV_ERROR_BAD_ARG; // Cached registers must not be written from AUX interface
  4026c8:	f06f 030a 	mvn.w	r3, #10
  4026cc:	e01a      	b.n	402704 <inv_icm426xx_write_reg+0xb0>
					else
						*cache_addr = buf[i]; // Update register cache if the current bank is 0
  4026ce:	683a      	ldr	r2, [r7, #0]
  4026d0:	69fb      	ldr	r3, [r7, #28]
  4026d2:	4413      	add	r3, r2
  4026d4:	781a      	ldrb	r2, [r3, #0]
  4026d6:	697b      	ldr	r3, [r7, #20]
  4026d8:	701a      	strb	r2, [r3, #0]
	for(i=0; i<len; i++) {
  4026da:	69fb      	ldr	r3, [r7, #28]
  4026dc:	3301      	adds	r3, #1
  4026de:	61fb      	str	r3, [r7, #28]
  4026e0:	69fa      	ldr	r2, [r7, #28]
  4026e2:	687b      	ldr	r3, [r7, #4]
  4026e4:	429a      	cmp	r2, r3
  4026e6:	d3ca      	bcc.n	40267e <inv_icm426xx_write_reg+0x2a>
			}
		}
	}
	
	// Physical access to write registers
	if(t->serif.write_reg(&(t->serif), reg, buf, len) != 0)
  4026e8:	69bb      	ldr	r3, [r7, #24]
  4026ea:	689c      	ldr	r4, [r3, #8]
  4026ec:	69b8      	ldr	r0, [r7, #24]
  4026ee:	7af9      	ldrb	r1, [r7, #11]
  4026f0:	687b      	ldr	r3, [r7, #4]
  4026f2:	683a      	ldr	r2, [r7, #0]
  4026f4:	47a0      	blx	r4
  4026f6:	4603      	mov	r3, r0
  4026f8:	2b00      	cmp	r3, #0
  4026fa:	d002      	beq.n	402702 <inv_icm426xx_write_reg+0xae>
		return INV_ERROR_TRANSPORT;
  4026fc:	f06f 0302 	mvn.w	r3, #2
  402700:	e000      	b.n	402704 <inv_icm426xx_write_reg+0xb0>

	return 0;
  402702:	2300      	movs	r3, #0
}
  402704:	4618      	mov	r0, r3
  402706:	3724      	adds	r7, #36	; 0x24
  402708:	46bd      	mov	sp, r7
  40270a:	bd90      	pop	{r4, r7, pc}
  40270c:	00402715 	.word	0x00402715
  402710:	00402781 	.word	0x00402781

00402714 <get_register_cache_addr>:

/* Static function */

/* MPUREG_REG_BANK_SEL shall never be added to the function get_register_cache_addr() */
static uint8_t * get_register_cache_addr(struct inv_icm426xx * s, uint8_t reg)
{
  402714:	b480      	push	{r7}
  402716:	b085      	sub	sp, #20
  402718:	af00      	add	r7, sp, #0
  40271a:	6078      	str	r0, [r7, #4]
  40271c:	460b      	mov	r3, r1
  40271e:	70fb      	strb	r3, [r7, #3]
	struct inv_icm426xx_transport *t = (struct inv_icm426xx_transport *)s;
  402720:	687b      	ldr	r3, [r7, #4]
  402722:	60fb      	str	r3, [r7, #12]

	switch(reg) {
  402724:	78fb      	ldrb	r3, [r7, #3]
  402726:	3b4d      	subs	r3, #77	; 0x4d
  402728:	2b07      	cmp	r3, #7
  40272a:	d822      	bhi.n	402772 <get_register_cache_addr+0x5e>
  40272c:	a201      	add	r2, pc, #4	; (adr r2, 402734 <get_register_cache_addr+0x20>)
  40272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402732:	bf00      	nop
  402734:	00402755 	.word	0x00402755
  402738:	0040275b 	.word	0x0040275b
  40273c:	00402761 	.word	0x00402761
  402740:	00402767 	.word	0x00402767
  402744:	00402773 	.word	0x00402773
  402748:	00402773 	.word	0x00402773
  40274c:	00402773 	.word	0x00402773
  402750:	0040276d 	.word	0x0040276d
		case MPUREG_INTF_CONFIG1:     return &(t->register_cache.intf_cfg_1_reg);
  402754:	68fb      	ldr	r3, [r7, #12]
  402756:	331c      	adds	r3, #28
  402758:	e00c      	b.n	402774 <get_register_cache_addr+0x60>
		case MPUREG_PWR_MGMT_0:       return &(t->register_cache.pwr_mngt_0_reg);
  40275a:	68fb      	ldr	r3, [r7, #12]
  40275c:	331d      	adds	r3, #29
  40275e:	e009      	b.n	402774 <get_register_cache_addr+0x60>
		case MPUREG_GYRO_CONFIG0:     return &(t->register_cache.gyro_cfg_0_reg);
  402760:	68fb      	ldr	r3, [r7, #12]
  402762:	331e      	adds	r3, #30
  402764:	e006      	b.n	402774 <get_register_cache_addr+0x60>
		case MPUREG_ACCEL_CONFIG0:    return &(t->register_cache.accel_cfg_0_reg);
  402766:	68fb      	ldr	r3, [r7, #12]
  402768:	331f      	adds	r3, #31
  40276a:	e003      	b.n	402774 <get_register_cache_addr+0x60>
		case MPUREG_TMST_CONFIG:      return &(t->register_cache.tmst_cfg_reg);
  40276c:	68fb      	ldr	r3, [r7, #12]
  40276e:	3320      	adds	r3, #32
  402770:	e000      	b.n	402774 <get_register_cache_addr+0x60>
		default:                      return (uint8_t *)0; // Not found
  402772:	2300      	movs	r3, #0
	}
}
  402774:	4618      	mov	r0, r3
  402776:	3714      	adds	r7, #20
  402778:	46bd      	mov	sp, r7
  40277a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40277e:	4770      	bx	lr

00402780 <is_aux_interface>:

static uint8_t is_aux_interface(struct inv_icm426xx_transport *t)
{
  402780:	b480      	push	{r7}
  402782:	b083      	sub	sp, #12
  402784:	af00      	add	r7, sp, #0
  402786:	6078      	str	r0, [r7, #4]
	if ((t->serif.serif_type == ICM426XX_AUX1_SPI3) || (t->serif.serif_type == ICM426XX_AUX2_SPI3))
  402788:	687b      	ldr	r3, [r7, #4]
  40278a:	7e1b      	ldrb	r3, [r3, #24]
  40278c:	2b03      	cmp	r3, #3
  40278e:	d003      	beq.n	402798 <is_aux_interface+0x18>
  402790:	687b      	ldr	r3, [r7, #4]
  402792:	7e1b      	ldrb	r3, [r3, #24]
  402794:	2b04      	cmp	r3, #4
  402796:	d101      	bne.n	40279c <is_aux_interface+0x1c>
		return 1;
  402798:	2301      	movs	r3, #1
  40279a:	e000      	b.n	40279e <is_aux_interface+0x1e>
	else
		return 0;
  40279c:	2300      	movs	r3, #0
}
  40279e:	4618      	mov	r0, r3
  4027a0:	370c      	adds	r7, #12
  4027a2:	46bd      	mov	sp, r7
  4027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027a8:	4770      	bx	lr
	...

004027ac <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4027ac:	b580      	push	{r7, lr}
  4027ae:	b082      	sub	sp, #8
  4027b0:	af00      	add	r7, sp, #0
  4027b2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4027b4:	6878      	ldr	r0, [r7, #4]
  4027b6:	4b03      	ldr	r3, [pc, #12]	; (4027c4 <sysclk_enable_peripheral_clock+0x18>)
  4027b8:	4798      	blx	r3
}
  4027ba:	bf00      	nop
  4027bc:	3708      	adds	r7, #8
  4027be:	46bd      	mov	sp, r7
  4027c0:	bd80      	pop	{r7, pc}
  4027c2:	bf00      	nop
  4027c4:	004066e9 	.word	0x004066e9

004027c8 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4027c8:	b580      	push	{r7, lr}
  4027ca:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4027cc:	200b      	movs	r0, #11
  4027ce:	4b03      	ldr	r3, [pc, #12]	; (4027dc <ioport_init+0x14>)
  4027d0:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4027d2:	200c      	movs	r0, #12
  4027d4:	4b01      	ldr	r3, [pc, #4]	; (4027dc <ioport_init+0x14>)
  4027d6:	4798      	blx	r3
	arch_ioport_init();
}
  4027d8:	bf00      	nop
  4027da:	bd80      	pop	{r7, pc}
  4027dc:	004027ad 	.word	0x004027ad

004027e0 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4027e0:	b480      	push	{r7}
  4027e2:	b08d      	sub	sp, #52	; 0x34
  4027e4:	af00      	add	r7, sp, #0
  4027e6:	6078      	str	r0, [r7, #4]
  4027e8:	460b      	mov	r3, r1
  4027ea:	70fb      	strb	r3, [r7, #3]
  4027ec:	687b      	ldr	r3, [r7, #4]
  4027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  4027f0:	78fb      	ldrb	r3, [r7, #3]
  4027f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4027f8:	627b      	str	r3, [r7, #36]	; 0x24
  4027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4027fc:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4027fe:	6a3b      	ldr	r3, [r7, #32]
  402800:	095b      	lsrs	r3, r3, #5
  402802:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402804:	69fb      	ldr	r3, [r7, #28]
  402806:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40280a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40280e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402810:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  402812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402816:	2b01      	cmp	r3, #1
  402818:	d109      	bne.n	40282e <ioport_set_pin_dir+0x4e>
  40281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40281c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40281e:	697b      	ldr	r3, [r7, #20]
  402820:	f003 031f 	and.w	r3, r3, #31
  402824:	2201      	movs	r2, #1
  402826:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402828:	69bb      	ldr	r3, [r7, #24]
  40282a:	611a      	str	r2, [r3, #16]
  40282c:	e00c      	b.n	402848 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  40282e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402832:	2b00      	cmp	r3, #0
  402834:	d108      	bne.n	402848 <ioport_set_pin_dir+0x68>
  402836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402838:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  40283a:	693b      	ldr	r3, [r7, #16]
  40283c:	f003 031f 	and.w	r3, r3, #31
  402840:	2201      	movs	r2, #1
  402842:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402844:	69bb      	ldr	r3, [r7, #24]
  402846:	615a      	str	r2, [r3, #20]
  402848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40284a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40284c:	68fb      	ldr	r3, [r7, #12]
  40284e:	f003 031f 	and.w	r3, r3, #31
  402852:	2201      	movs	r2, #1
  402854:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402856:	69bb      	ldr	r3, [r7, #24]
  402858:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  40285c:	bf00      	nop
  40285e:	3734      	adds	r7, #52	; 0x34
  402860:	46bd      	mov	sp, r7
  402862:	f85d 7b04 	ldr.w	r7, [sp], #4
  402866:	4770      	bx	lr

00402868 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  402868:	b480      	push	{r7}
  40286a:	b08b      	sub	sp, #44	; 0x2c
  40286c:	af00      	add	r7, sp, #0
  40286e:	6078      	str	r0, [r7, #4]
  402870:	460b      	mov	r3, r1
  402872:	70fb      	strb	r3, [r7, #3]
  402874:	687b      	ldr	r3, [r7, #4]
  402876:	627b      	str	r3, [r7, #36]	; 0x24
  402878:	78fb      	ldrb	r3, [r7, #3]
  40287a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402880:	61fb      	str	r3, [r7, #28]
  402882:	69fb      	ldr	r3, [r7, #28]
  402884:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402886:	69bb      	ldr	r3, [r7, #24]
  402888:	095b      	lsrs	r3, r3, #5
  40288a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40288c:	697b      	ldr	r3, [r7, #20]
  40288e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402892:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402896:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402898:	613b      	str	r3, [r7, #16]

	if (level) {
  40289a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40289e:	2b00      	cmp	r3, #0
  4028a0:	d009      	beq.n	4028b6 <ioport_set_pin_level+0x4e>
  4028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4028a4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4028a6:	68fb      	ldr	r3, [r7, #12]
  4028a8:	f003 031f 	and.w	r3, r3, #31
  4028ac:	2201      	movs	r2, #1
  4028ae:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4028b0:	693b      	ldr	r3, [r7, #16]
  4028b2:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4028b4:	e008      	b.n	4028c8 <ioport_set_pin_level+0x60>
  4028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4028b8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4028ba:	68bb      	ldr	r3, [r7, #8]
  4028bc:	f003 031f 	and.w	r3, r3, #31
  4028c0:	2201      	movs	r2, #1
  4028c2:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4028c4:	693b      	ldr	r3, [r7, #16]
  4028c6:	635a      	str	r2, [r3, #52]	; 0x34
  4028c8:	bf00      	nop
  4028ca:	372c      	adds	r7, #44	; 0x2c
  4028cc:	46bd      	mov	sp, r7
  4028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028d2:	4770      	bx	lr

004028d4 <inv_board_hal_init>:

/* This variable contains the number of nested calls to disable_irq */
static uint32_t sDisableIntCount = 0;

void inv_board_hal_init(void)
{
  4028d4:	b580      	push	{r7, lr}
  4028d6:	af00      	add	r7, sp, #0
	/* Initialize the SAM system */
	sysclk_init();
  4028d8:	4b08      	ldr	r3, [pc, #32]	; (4028fc <inv_board_hal_init+0x28>)
  4028da:	4798      	blx	r3
	
	ioport_init();
  4028dc:	4b08      	ldr	r3, [pc, #32]	; (402900 <inv_board_hal_init+0x2c>)
  4028de:	4798      	blx	r3
	
	/* Initialize LED0, turned off */
	ioport_set_pin_dir(PIO_PA6_IDX, IOPORT_DIR_OUTPUT);
  4028e0:	2101      	movs	r1, #1
  4028e2:	2006      	movs	r0, #6
  4028e4:	4b07      	ldr	r3, [pc, #28]	; (402904 <inv_board_hal_init+0x30>)
  4028e6:	4798      	blx	r3
	ioport_set_pin_level(PIO_PA6_IDX, IOPORT_PIN_LEVEL_HIGH);
  4028e8:	2101      	movs	r1, #1
  4028ea:	2006      	movs	r0, #6
  4028ec:	4b06      	ldr	r3, [pc, #24]	; (402908 <inv_board_hal_init+0x34>)
  4028ee:	4798      	blx	r3
	
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4028f0:	4b06      	ldr	r3, [pc, #24]	; (40290c <inv_board_hal_init+0x38>)
  4028f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4028f6:	605a      	str	r2, [r3, #4]
}
  4028f8:	bf00      	nop
  4028fa:	bd80      	pop	{r7, pc}
  4028fc:	004059e9 	.word	0x004059e9
  402900:	004027c9 	.word	0x004027c9
  402904:	004027e1 	.word	0x004027e1
  402908:	00402869 	.word	0x00402869
  40290c:	400e1450 	.word	0x400e1450

00402910 <inv_disable_irq>:

void inv_disable_irq(void)
{
  402910:	b480      	push	{r7}
  402912:	af00      	add	r7, sp, #0
	if(sDisableIntCount == 0) {
  402914:	4b07      	ldr	r3, [pc, #28]	; (402934 <inv_disable_irq+0x24>)
  402916:	681b      	ldr	r3, [r3, #0]
  402918:	2b00      	cmp	r3, #0
  40291a:	d100      	bne.n	40291e <inv_disable_irq+0xe>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40291c:	b672      	cpsid	i
		__disable_irq();
	}
	sDisableIntCount ++;
  40291e:	4b05      	ldr	r3, [pc, #20]	; (402934 <inv_disable_irq+0x24>)
  402920:	681b      	ldr	r3, [r3, #0]
  402922:	3301      	adds	r3, #1
  402924:	4a03      	ldr	r2, [pc, #12]	; (402934 <inv_disable_irq+0x24>)
  402926:	6013      	str	r3, [r2, #0]
}
  402928:	bf00      	nop
  40292a:	46bd      	mov	sp, r7
  40292c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402930:	4770      	bx	lr
  402932:	bf00      	nop
  402934:	20003838 	.word	0x20003838

00402938 <inv_enable_irq>:

void inv_enable_irq(void)
{
  402938:	b480      	push	{r7}
  40293a:	af00      	add	r7, sp, #0
	sDisableIntCount --;
  40293c:	4b07      	ldr	r3, [pc, #28]	; (40295c <inv_enable_irq+0x24>)
  40293e:	681b      	ldr	r3, [r3, #0]
  402940:	3b01      	subs	r3, #1
  402942:	4a06      	ldr	r2, [pc, #24]	; (40295c <inv_enable_irq+0x24>)
  402944:	6013      	str	r3, [r2, #0]
	if(sDisableIntCount == 0) {
  402946:	4b05      	ldr	r3, [pc, #20]	; (40295c <inv_enable_irq+0x24>)
  402948:	681b      	ldr	r3, [r3, #0]
  40294a:	2b00      	cmp	r3, #0
  40294c:	d100      	bne.n	402950 <inv_enable_irq+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
  40294e:	b662      	cpsie	i
		__enable_irq();
	}
}
  402950:	bf00      	nop
  402952:	46bd      	mov	sp, r7
  402954:	f85d 7b04 	ldr.w	r7, [sp], #4
  402958:	4770      	bx	lr
  40295a:	bf00      	nop
  40295c:	20003838 	.word	0x20003838

00402960 <start_timer>:
#include <stdint.h>

static unsigned timer_num;

static void start_timer(void) 
{
  402960:	b580      	push	{r7, lr}
  402962:	af00      	add	r7, sp, #0
	inv_timer_enable(timer_num);
  402964:	4b03      	ldr	r3, [pc, #12]	; (402974 <start_timer+0x14>)
  402966:	681b      	ldr	r3, [r3, #0]
  402968:	4618      	mov	r0, r3
  40296a:	4b03      	ldr	r3, [pc, #12]	; (402978 <start_timer+0x18>)
  40296c:	4798      	blx	r3
}
  40296e:	bf00      	nop
  402970:	bd80      	pop	{r7, pc}
  402972:	bf00      	nop
  402974:	2000383c 	.word	0x2000383c
  402978:	00403ecd 	.word	0x00403ecd

0040297c <stop_timer>:

static void stop_timer(void) 
{
  40297c:	b580      	push	{r7, lr}
  40297e:	af00      	add	r7, sp, #0
	inv_timer_channel_stop(timer_num, 0);
  402980:	4b03      	ldr	r3, [pc, #12]	; (402990 <stop_timer+0x14>)
  402982:	681b      	ldr	r3, [r3, #0]
  402984:	2100      	movs	r1, #0
  402986:	4618      	mov	r0, r3
  402988:	4b02      	ldr	r3, [pc, #8]	; (402994 <stop_timer+0x18>)
  40298a:	4798      	blx	r3
}
  40298c:	bf00      	nop
  40298e:	bd80      	pop	{r7, pc}
  402990:	2000383c 	.word	0x2000383c
  402994:	0040428d 	.word	0x0040428d

00402998 <internal_delay>:

static void internal_delay(uint16_t us)
{
  402998:	b590      	push	{r4, r7, lr}
  40299a:	b087      	sub	sp, #28
  40299c:	af00      	add	r7, sp, #0
  40299e:	4603      	mov	r3, r0
  4029a0:	80fb      	strh	r3, [r7, #6]
	const uint32_t start = (uint32_t)inv_timer_get_counter(timer_num);
  4029a2:	4b13      	ldr	r3, [pc, #76]	; (4029f0 <internal_delay+0x58>)
  4029a4:	681b      	ldr	r3, [r3, #0]
  4029a6:	4618      	mov	r0, r3
  4029a8:	4b12      	ldr	r3, [pc, #72]	; (4029f4 <internal_delay+0x5c>)
  4029aa:	4798      	blx	r3
  4029ac:	4603      	mov	r3, r0
  4029ae:	460c      	mov	r4, r1
  4029b0:	60fb      	str	r3, [r7, #12]

	uint32_t now, prev = 0;
  4029b2:	2300      	movs	r3, #0
  4029b4:	613b      	str	r3, [r7, #16]
	do{
		now = (uint32_t)inv_timer_get_counter(timer_num);
  4029b6:	4b0e      	ldr	r3, [pc, #56]	; (4029f0 <internal_delay+0x58>)
  4029b8:	681b      	ldr	r3, [r3, #0]
  4029ba:	4618      	mov	r0, r3
  4029bc:	4b0d      	ldr	r3, [pc, #52]	; (4029f4 <internal_delay+0x5c>)
  4029be:	4798      	blx	r3
  4029c0:	4603      	mov	r3, r0
  4029c2:	460c      	mov	r4, r1
  4029c4:	617b      	str	r3, [r7, #20]

		/* handle rollover */
		if(now < prev)
  4029c6:	697a      	ldr	r2, [r7, #20]
  4029c8:	693b      	ldr	r3, [r7, #16]
  4029ca:	429a      	cmp	r2, r3
  4029cc:	d204      	bcs.n	4029d8 <internal_delay+0x40>
			now = UINT16_MAX + now;
  4029ce:	697b      	ldr	r3, [r7, #20]
  4029d0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
  4029d4:	33ff      	adds	r3, #255	; 0xff
  4029d6:	617b      	str	r3, [r7, #20]
		prev = now;
  4029d8:	697b      	ldr	r3, [r7, #20]
  4029da:	613b      	str	r3, [r7, #16]

	}while((now - start) <= us);
  4029dc:	697a      	ldr	r2, [r7, #20]
  4029de:	68fb      	ldr	r3, [r7, #12]
  4029e0:	1ad2      	subs	r2, r2, r3
  4029e2:	88fb      	ldrh	r3, [r7, #6]
  4029e4:	429a      	cmp	r2, r3
  4029e6:	d9e6      	bls.n	4029b6 <internal_delay+0x1e>
}
  4029e8:	bf00      	nop
  4029ea:	371c      	adds	r7, #28
  4029ec:	46bd      	mov	sp, r7
  4029ee:	bd90      	pop	{r4, r7, pc}
  4029f0:	2000383c 	.word	0x2000383c
  4029f4:	00404159 	.word	0x00404159

004029f8 <inv_delay_init>:

int inv_delay_init(unsigned tim_num)
{
  4029f8:	b580      	push	{r7, lr}
  4029fa:	b082      	sub	sp, #8
  4029fc:	af00      	add	r7, sp, #0
  4029fe:	6078      	str	r0, [r7, #4]
	timer_num = tim_num;
  402a00:	4a05      	ldr	r2, [pc, #20]	; (402a18 <inv_delay_init+0x20>)
  402a02:	687b      	ldr	r3, [r7, #4]
  402a04:	6013      	str	r3, [r2, #0]
	
	/* Timer configuration at 1MHz frequency */
	return inv_timer_configure_timebase(1000000);
  402a06:	4805      	ldr	r0, [pc, #20]	; (402a1c <inv_delay_init+0x24>)
  402a08:	4b05      	ldr	r3, [pc, #20]	; (402a20 <inv_delay_init+0x28>)
  402a0a:	4798      	blx	r3
  402a0c:	4603      	mov	r3, r0
}
  402a0e:	4618      	mov	r0, r3
  402a10:	3708      	adds	r7, #8
  402a12:	46bd      	mov	sp, r7
  402a14:	bd80      	pop	{r7, pc}
  402a16:	bf00      	nop
  402a18:	2000383c 	.word	0x2000383c
  402a1c:	000f4240 	.word	0x000f4240
  402a20:	00403f4d 	.word	0x00403f4d

00402a24 <inv_delay_us>:

void inv_delay_us(uint32_t us)
{
  402a24:	b580      	push	{r7, lr}
  402a26:	b084      	sub	sp, #16
  402a28:	af00      	add	r7, sp, #0
  402a2a:	6078      	str	r0, [r7, #4]
	start_timer();
  402a2c:	4b18      	ldr	r3, [pc, #96]	; (402a90 <inv_delay_us+0x6c>)
  402a2e:	4798      	blx	r3

	/* in case the delay is up to UINT16_MAX */
	if(us >= UINT16_MAX) {
  402a30:	687b      	ldr	r3, [r7, #4]
  402a32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402a36:	4293      	cmp	r3, r2
  402a38:	d91f      	bls.n	402a7a <inv_delay_us+0x56>
		/* go to the loop as the internal_delay function only support uint16_t argument type */
		for(uint32_t i = 0; i < (uint32_t)(us / UINT16_MAX); i++) {
  402a3a:	2300      	movs	r3, #0
  402a3c:	60fb      	str	r3, [r7, #12]
  402a3e:	e006      	b.n	402a4e <inv_delay_us+0x2a>
			internal_delay(UINT16_MAX);
  402a40:	f64f 70ff 	movw	r0, #65535	; 0xffff
  402a44:	4b13      	ldr	r3, [pc, #76]	; (402a94 <inv_delay_us+0x70>)
  402a46:	4798      	blx	r3
		for(uint32_t i = 0; i < (uint32_t)(us / UINT16_MAX); i++) {
  402a48:	68fb      	ldr	r3, [r7, #12]
  402a4a:	3301      	adds	r3, #1
  402a4c:	60fb      	str	r3, [r7, #12]
  402a4e:	687b      	ldr	r3, [r7, #4]
  402a50:	4a11      	ldr	r2, [pc, #68]	; (402a98 <inv_delay_us+0x74>)
  402a52:	fba2 2303 	umull	r2, r3, r2, r3
  402a56:	0bda      	lsrs	r2, r3, #15
  402a58:	68fb      	ldr	r3, [r7, #12]
  402a5a:	429a      	cmp	r2, r3
  402a5c:	d8f0      	bhi.n	402a40 <inv_delay_us+0x1c>
		}
		internal_delay(us % UINT16_MAX);
  402a5e:	6879      	ldr	r1, [r7, #4]
  402a60:	4b0d      	ldr	r3, [pc, #52]	; (402a98 <inv_delay_us+0x74>)
  402a62:	fba3 2301 	umull	r2, r3, r3, r1
  402a66:	0bda      	lsrs	r2, r3, #15
  402a68:	4613      	mov	r3, r2
  402a6a:	041b      	lsls	r3, r3, #16
  402a6c:	1a9b      	subs	r3, r3, r2
  402a6e:	1aca      	subs	r2, r1, r3
  402a70:	b293      	uxth	r3, r2
  402a72:	4618      	mov	r0, r3
  402a74:	4b07      	ldr	r3, [pc, #28]	; (402a94 <inv_delay_us+0x70>)
  402a76:	4798      	blx	r3
  402a78:	e004      	b.n	402a84 <inv_delay_us+0x60>
	}
	else
		internal_delay(us);
  402a7a:	687b      	ldr	r3, [r7, #4]
  402a7c:	b29b      	uxth	r3, r3
  402a7e:	4618      	mov	r0, r3
  402a80:	4b04      	ldr	r3, [pc, #16]	; (402a94 <inv_delay_us+0x70>)
  402a82:	4798      	blx	r3

	stop_timer();
  402a84:	4b05      	ldr	r3, [pc, #20]	; (402a9c <inv_delay_us+0x78>)
  402a86:	4798      	blx	r3
}
  402a88:	bf00      	nop
  402a8a:	3710      	adds	r7, #16
  402a8c:	46bd      	mov	sp, r7
  402a8e:	bd80      	pop	{r7, pc}
  402a90:	00402961 	.word	0x00402961
  402a94:	00402999 	.word	0x00402999
  402a98:	80008001 	.word	0x80008001
  402a9c:	0040297d 	.word	0x0040297d

00402aa0 <inv_gpio_sensor_irq_init>:
	return 0;
}

void inv_gpio_sensor_irq_init(unsigned pin_num,
		void (*interrupt_cb)(void * context, unsigned pin_num), void * context)
{
  402aa0:	b5b0      	push	{r4, r5, r7, lr}
  402aa2:	b086      	sub	sp, #24
  402aa4:	af02      	add	r7, sp, #8
  402aa6:	60f8      	str	r0, [r7, #12]
  402aa8:	60b9      	str	r1, [r7, #8]
  402aaa:	607a      	str	r2, [r7, #4]
	if(pin_num >= INV_GPIO_MAX)
  402aac:	68fb      	ldr	r3, [r7, #12]
  402aae:	2b05      	cmp	r3, #5
  402ab0:	f200 809c 	bhi.w	402bec <inv_gpio_sensor_irq_init+0x14c>
		return;
	
	gm[pin_num].callback = interrupt_cb;
  402ab4:	494f      	ldr	r1, [pc, #316]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402ab6:	68fa      	ldr	r2, [r7, #12]
  402ab8:	4613      	mov	r3, r2
  402aba:	00db      	lsls	r3, r3, #3
  402abc:	4413      	add	r3, r2
  402abe:	009b      	lsls	r3, r3, #2
  402ac0:	440b      	add	r3, r1
  402ac2:	331c      	adds	r3, #28
  402ac4:	68ba      	ldr	r2, [r7, #8]
  402ac6:	601a      	str	r2, [r3, #0]
	gm[pin_num].context = context;
  402ac8:	494a      	ldr	r1, [pc, #296]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402aca:	68fa      	ldr	r2, [r7, #12]
  402acc:	4613      	mov	r3, r2
  402ace:	00db      	lsls	r3, r3, #3
  402ad0:	4413      	add	r3, r2
  402ad2:	009b      	lsls	r3, r3, #2
  402ad4:	440b      	add	r3, r1
  402ad6:	3320      	adds	r3, #32
  402ad8:	687a      	ldr	r2, [r7, #4]
  402ada:	601a      	str	r2, [r3, #0]
	
	pmc_enable_periph_clk(gm[pin_num].pio_id);
  402adc:	4945      	ldr	r1, [pc, #276]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402ade:	68fa      	ldr	r2, [r7, #12]
  402ae0:	4613      	mov	r3, r2
  402ae2:	00db      	lsls	r3, r3, #3
  402ae4:	4413      	add	r3, r2
  402ae6:	009b      	lsls	r3, r3, #2
  402ae8:	440b      	add	r3, r1
  402aea:	3304      	adds	r3, #4
  402aec:	681b      	ldr	r3, [r3, #0]
  402aee:	4618      	mov	r0, r3
  402af0:	4b41      	ldr	r3, [pc, #260]	; (402bf8 <inv_gpio_sensor_irq_init+0x158>)
  402af2:	4798      	blx	r3
	
	pio_configure(gm[pin_num].p_pio, gm[pin_num].pio_type, gm[pin_num].pio_mask, 
  402af4:	493f      	ldr	r1, [pc, #252]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402af6:	68fa      	ldr	r2, [r7, #12]
  402af8:	4613      	mov	r3, r2
  402afa:	00db      	lsls	r3, r3, #3
  402afc:	4413      	add	r3, r2
  402afe:	009b      	lsls	r3, r3, #2
  402b00:	440b      	add	r3, r1
  402b02:	6818      	ldr	r0, [r3, #0]
  402b04:	493b      	ldr	r1, [pc, #236]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402b06:	68fa      	ldr	r2, [r7, #12]
  402b08:	4613      	mov	r3, r2
  402b0a:	00db      	lsls	r3, r3, #3
  402b0c:	4413      	add	r3, r2
  402b0e:	009b      	lsls	r3, r3, #2
  402b10:	440b      	add	r3, r1
  402b12:	3310      	adds	r3, #16
  402b14:	681c      	ldr	r4, [r3, #0]
  402b16:	4937      	ldr	r1, [pc, #220]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402b18:	68fa      	ldr	r2, [r7, #12]
  402b1a:	4613      	mov	r3, r2
  402b1c:	00db      	lsls	r3, r3, #3
  402b1e:	4413      	add	r3, r2
  402b20:	009b      	lsls	r3, r3, #2
  402b22:	440b      	add	r3, r1
  402b24:	330c      	adds	r3, #12
  402b26:	681d      	ldr	r5, [r3, #0]
  402b28:	4932      	ldr	r1, [pc, #200]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402b2a:	68fa      	ldr	r2, [r7, #12]
  402b2c:	4613      	mov	r3, r2
  402b2e:	00db      	lsls	r3, r3, #3
  402b30:	4413      	add	r3, r2
  402b32:	009b      	lsls	r3, r3, #2
  402b34:	440b      	add	r3, r1
  402b36:	3314      	adds	r3, #20
  402b38:	681b      	ldr	r3, [r3, #0]
  402b3a:	462a      	mov	r2, r5
  402b3c:	4621      	mov	r1, r4
  402b3e:	4c2f      	ldr	r4, [pc, #188]	; (402bfc <inv_gpio_sensor_irq_init+0x15c>)
  402b40:	47a0      	blx	r4
			 gm[pin_num].pio_attributes);
	
	pio_handler_set(gm[pin_num].p_pio, gm[pin_num].pio_id, gm[pin_num].pio_mask, 
  402b42:	492c      	ldr	r1, [pc, #176]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402b44:	68fa      	ldr	r2, [r7, #12]
  402b46:	4613      	mov	r3, r2
  402b48:	00db      	lsls	r3, r3, #3
  402b4a:	4413      	add	r3, r2
  402b4c:	009b      	lsls	r3, r3, #2
  402b4e:	440b      	add	r3, r1
  402b50:	6818      	ldr	r0, [r3, #0]
  402b52:	4928      	ldr	r1, [pc, #160]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402b54:	68fa      	ldr	r2, [r7, #12]
  402b56:	4613      	mov	r3, r2
  402b58:	00db      	lsls	r3, r3, #3
  402b5a:	4413      	add	r3, r2
  402b5c:	009b      	lsls	r3, r3, #2
  402b5e:	440b      	add	r3, r1
  402b60:	3304      	adds	r3, #4
  402b62:	681c      	ldr	r4, [r3, #0]
  402b64:	4923      	ldr	r1, [pc, #140]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402b66:	68fa      	ldr	r2, [r7, #12]
  402b68:	4613      	mov	r3, r2
  402b6a:	00db      	lsls	r3, r3, #3
  402b6c:	4413      	add	r3, r2
  402b6e:	009b      	lsls	r3, r3, #2
  402b70:	440b      	add	r3, r1
  402b72:	330c      	adds	r3, #12
  402b74:	681d      	ldr	r5, [r3, #0]
  402b76:	491f      	ldr	r1, [pc, #124]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402b78:	68fa      	ldr	r2, [r7, #12]
  402b7a:	4613      	mov	r3, r2
  402b7c:	00db      	lsls	r3, r3, #3
  402b7e:	4413      	add	r3, r2
  402b80:	009b      	lsls	r3, r3, #2
  402b82:	440b      	add	r3, r1
  402b84:	3314      	adds	r3, #20
  402b86:	681a      	ldr	r2, [r3, #0]
  402b88:	4b1d      	ldr	r3, [pc, #116]	; (402c00 <inv_gpio_sensor_irq_init+0x160>)
  402b8a:	9300      	str	r3, [sp, #0]
  402b8c:	4613      	mov	r3, r2
  402b8e:	462a      	mov	r2, r5
  402b90:	4621      	mov	r1, r4
  402b92:	4c1c      	ldr	r4, [pc, #112]	; (402c04 <inv_gpio_sensor_irq_init+0x164>)
  402b94:	47a0      	blx	r4
			gm[pin_num].pio_attributes, gpio_common_callback);
	
	pio_enable_interrupt(gm[pin_num].p_pio, gm[pin_num].pio_mask);
  402b96:	4917      	ldr	r1, [pc, #92]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402b98:	68fa      	ldr	r2, [r7, #12]
  402b9a:	4613      	mov	r3, r2
  402b9c:	00db      	lsls	r3, r3, #3
  402b9e:	4413      	add	r3, r2
  402ba0:	009b      	lsls	r3, r3, #2
  402ba2:	440b      	add	r3, r1
  402ba4:	6818      	ldr	r0, [r3, #0]
  402ba6:	4913      	ldr	r1, [pc, #76]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402ba8:	68fa      	ldr	r2, [r7, #12]
  402baa:	4613      	mov	r3, r2
  402bac:	00db      	lsls	r3, r3, #3
  402bae:	4413      	add	r3, r2
  402bb0:	009b      	lsls	r3, r3, #2
  402bb2:	440b      	add	r3, r1
  402bb4:	330c      	adds	r3, #12
  402bb6:	681b      	ldr	r3, [r3, #0]
  402bb8:	4619      	mov	r1, r3
  402bba:	4b13      	ldr	r3, [pc, #76]	; (402c08 <inv_gpio_sensor_irq_init+0x168>)
  402bbc:	4798      	blx	r3
	
	pio_handler_set_priority(gm[pin_num].p_pio, gm[pin_num].pio_irqn, 0);// TODO: make the priority configurable
  402bbe:	490d      	ldr	r1, [pc, #52]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402bc0:	68fa      	ldr	r2, [r7, #12]
  402bc2:	4613      	mov	r3, r2
  402bc4:	00db      	lsls	r3, r3, #3
  402bc6:	4413      	add	r3, r2
  402bc8:	009b      	lsls	r3, r3, #2
  402bca:	440b      	add	r3, r1
  402bcc:	6818      	ldr	r0, [r3, #0]
  402bce:	4909      	ldr	r1, [pc, #36]	; (402bf4 <inv_gpio_sensor_irq_init+0x154>)
  402bd0:	68fa      	ldr	r2, [r7, #12]
  402bd2:	4613      	mov	r3, r2
  402bd4:	00db      	lsls	r3, r3, #3
  402bd6:	4413      	add	r3, r2
  402bd8:	009b      	lsls	r3, r3, #2
  402bda:	440b      	add	r3, r1
  402bdc:	3318      	adds	r3, #24
  402bde:	f993 3000 	ldrsb.w	r3, [r3]
  402be2:	2200      	movs	r2, #0
  402be4:	4619      	mov	r1, r3
  402be6:	4b09      	ldr	r3, [pc, #36]	; (402c0c <inv_gpio_sensor_irq_init+0x16c>)
  402be8:	4798      	blx	r3
  402bea:	e000      	b.n	402bee <inv_gpio_sensor_irq_init+0x14e>
		return;
  402bec:	bf00      	nop
}
  402bee:	3710      	adds	r7, #16
  402bf0:	46bd      	mov	sp, r7
  402bf2:	bdb0      	pop	{r4, r5, r7, pc}
  402bf4:	200000f4 	.word	0x200000f4
  402bf8:	004066e9 	.word	0x004066e9
  402bfc:	00406001 	.word	0x00406001
  402c00:	00402c11 	.word	0x00402c11
  402c04:	00406339 	.word	0x00406339
  402c08:	0040612d 	.word	0x0040612d
  402c0c:	00406409 	.word	0x00406409

00402c10 <gpio_common_callback>:

static void gpio_common_callback(const uint32_t id, const uint32_t index)
{
  402c10:	b590      	push	{r4, r7, lr}
  402c12:	b085      	sub	sp, #20
  402c14:	af00      	add	r7, sp, #0
  402c16:	6078      	str	r0, [r7, #4]
  402c18:	6039      	str	r1, [r7, #0]
	for(unsigned i=0; i<sizeof(gm)/sizeof(gm[0]); i++) {
  402c1a:	2300      	movs	r3, #0
  402c1c:	60fb      	str	r3, [r7, #12]
  402c1e:	e03b      	b.n	402c98 <gpio_common_callback+0x88>
		if((gm[i].pio_id == id) && (gm[i].pio_mask == index)) {
  402c20:	4922      	ldr	r1, [pc, #136]	; (402cac <gpio_common_callback+0x9c>)
  402c22:	68fa      	ldr	r2, [r7, #12]
  402c24:	4613      	mov	r3, r2
  402c26:	00db      	lsls	r3, r3, #3
  402c28:	4413      	add	r3, r2
  402c2a:	009b      	lsls	r3, r3, #2
  402c2c:	440b      	add	r3, r1
  402c2e:	3304      	adds	r3, #4
  402c30:	681a      	ldr	r2, [r3, #0]
  402c32:	687b      	ldr	r3, [r7, #4]
  402c34:	429a      	cmp	r2, r3
  402c36:	d12c      	bne.n	402c92 <gpio_common_callback+0x82>
  402c38:	491c      	ldr	r1, [pc, #112]	; (402cac <gpio_common_callback+0x9c>)
  402c3a:	68fa      	ldr	r2, [r7, #12]
  402c3c:	4613      	mov	r3, r2
  402c3e:	00db      	lsls	r3, r3, #3
  402c40:	4413      	add	r3, r2
  402c42:	009b      	lsls	r3, r3, #2
  402c44:	440b      	add	r3, r1
  402c46:	330c      	adds	r3, #12
  402c48:	681a      	ldr	r2, [r3, #0]
  402c4a:	683b      	ldr	r3, [r7, #0]
  402c4c:	429a      	cmp	r2, r3
  402c4e:	d120      	bne.n	402c92 <gpio_common_callback+0x82>
			if(gm[i].callback)
  402c50:	4916      	ldr	r1, [pc, #88]	; (402cac <gpio_common_callback+0x9c>)
  402c52:	68fa      	ldr	r2, [r7, #12]
  402c54:	4613      	mov	r3, r2
  402c56:	00db      	lsls	r3, r3, #3
  402c58:	4413      	add	r3, r2
  402c5a:	009b      	lsls	r3, r3, #2
  402c5c:	440b      	add	r3, r1
  402c5e:	331c      	adds	r3, #28
  402c60:	681b      	ldr	r3, [r3, #0]
  402c62:	2b00      	cmp	r3, #0
  402c64:	d01c      	beq.n	402ca0 <gpio_common_callback+0x90>
				gm[i].callback(gm[i].context, i);
  402c66:	4911      	ldr	r1, [pc, #68]	; (402cac <gpio_common_callback+0x9c>)
  402c68:	68fa      	ldr	r2, [r7, #12]
  402c6a:	4613      	mov	r3, r2
  402c6c:	00db      	lsls	r3, r3, #3
  402c6e:	4413      	add	r3, r2
  402c70:	009b      	lsls	r3, r3, #2
  402c72:	440b      	add	r3, r1
  402c74:	331c      	adds	r3, #28
  402c76:	681c      	ldr	r4, [r3, #0]
  402c78:	490c      	ldr	r1, [pc, #48]	; (402cac <gpio_common_callback+0x9c>)
  402c7a:	68fa      	ldr	r2, [r7, #12]
  402c7c:	4613      	mov	r3, r2
  402c7e:	00db      	lsls	r3, r3, #3
  402c80:	4413      	add	r3, r2
  402c82:	009b      	lsls	r3, r3, #2
  402c84:	440b      	add	r3, r1
  402c86:	3320      	adds	r3, #32
  402c88:	681b      	ldr	r3, [r3, #0]
  402c8a:	68f9      	ldr	r1, [r7, #12]
  402c8c:	4618      	mov	r0, r3
  402c8e:	47a0      	blx	r4
			break;
  402c90:	e006      	b.n	402ca0 <gpio_common_callback+0x90>
	for(unsigned i=0; i<sizeof(gm)/sizeof(gm[0]); i++) {
  402c92:	68fb      	ldr	r3, [r7, #12]
  402c94:	3301      	adds	r3, #1
  402c96:	60fb      	str	r3, [r7, #12]
  402c98:	68fb      	ldr	r3, [r7, #12]
  402c9a:	2b05      	cmp	r3, #5
  402c9c:	d9c0      	bls.n	402c20 <gpio_common_callback+0x10>
		}
	}
  402c9e:	e000      	b.n	402ca2 <gpio_common_callback+0x92>
			break;
  402ca0:	bf00      	nop
  402ca2:	bf00      	nop
  402ca4:	3714      	adds	r7, #20
  402ca6:	46bd      	mov	sp, r7
  402ca8:	bd90      	pop	{r4, r7, pc}
  402caa:	bf00      	nop
  402cac:	200000f4 	.word	0x200000f4

00402cb0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  402cb0:	b480      	push	{r7}
  402cb2:	b083      	sub	sp, #12
  402cb4:	af00      	add	r7, sp, #0
  402cb6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402cb8:	687b      	ldr	r3, [r7, #4]
  402cba:	2b07      	cmp	r3, #7
  402cbc:	d825      	bhi.n	402d0a <osc_get_rate+0x5a>
  402cbe:	a201      	add	r2, pc, #4	; (adr r2, 402cc4 <osc_get_rate+0x14>)
  402cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402cc4:	00402ce5 	.word	0x00402ce5
  402cc8:	00402ceb 	.word	0x00402ceb
  402ccc:	00402cf1 	.word	0x00402cf1
  402cd0:	00402cf7 	.word	0x00402cf7
  402cd4:	00402cfb 	.word	0x00402cfb
  402cd8:	00402cff 	.word	0x00402cff
  402cdc:	00402d03 	.word	0x00402d03
  402ce0:	00402d07 	.word	0x00402d07
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  402ce4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402ce8:	e010      	b.n	402d0c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  402cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402cee:	e00d      	b.n	402d0c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  402cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402cf4:	e00a      	b.n	402d0c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  402cf6:	4b08      	ldr	r3, [pc, #32]	; (402d18 <osc_get_rate+0x68>)
  402cf8:	e008      	b.n	402d0c <osc_get_rate+0x5c>

	case OSC_MAINCK_16M_RC:
		return OSC_MAINCK_16M_RC_HZ;
  402cfa:	4b08      	ldr	r3, [pc, #32]	; (402d1c <osc_get_rate+0x6c>)
  402cfc:	e006      	b.n	402d0c <osc_get_rate+0x5c>

	case OSC_MAINCK_24M_RC:
		return OSC_MAINCK_24M_RC_HZ;
  402cfe:	4b08      	ldr	r3, [pc, #32]	; (402d20 <osc_get_rate+0x70>)
  402d00:	e004      	b.n	402d0c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  402d02:	2300      	movs	r3, #0
  402d04:	e002      	b.n	402d0c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  402d06:	2300      	movs	r3, #0
  402d08:	e000      	b.n	402d0c <osc_get_rate+0x5c>
#endif
	}

	return 0;
  402d0a:	2300      	movs	r3, #0
}
  402d0c:	4618      	mov	r0, r3
  402d0e:	370c      	adds	r7, #12
  402d10:	46bd      	mov	sp, r7
  402d12:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d16:	4770      	bx	lr
  402d18:	007a1200 	.word	0x007a1200
  402d1c:	00f42400 	.word	0x00f42400
  402d20:	016e3600 	.word	0x016e3600

00402d24 <sysclk_get_main_hz>:
{
  402d24:	b580      	push	{r7, lr}
  402d26:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402d28:	2001      	movs	r0, #1
  402d2a:	4b04      	ldr	r3, [pc, #16]	; (402d3c <sysclk_get_main_hz+0x18>)
  402d2c:	4798      	blx	r3
  402d2e:	4602      	mov	r2, r0
  402d30:	f640 634e 	movw	r3, #3662	; 0xe4e
  402d34:	fb03 f302 	mul.w	r3, r3, r2
}
  402d38:	4618      	mov	r0, r3
  402d3a:	bd80      	pop	{r7, pc}
  402d3c:	00402cb1 	.word	0x00402cb1

00402d40 <sysclk_get_peripheral_hz>:
{
  402d40:	b580      	push	{r7, lr}
  402d42:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402d44:	4b02      	ldr	r3, [pc, #8]	; (402d50 <sysclk_get_peripheral_hz+0x10>)
  402d46:	4798      	blx	r3
  402d48:	4603      	mov	r3, r0
}
  402d4a:	4618      	mov	r0, r3
  402d4c:	bd80      	pop	{r7, pc}
  402d4e:	bf00      	nop
  402d50:	00402d25 	.word	0x00402d25

00402d54 <ioport_disable_pin>:
{
  402d54:	b480      	push	{r7}
  402d56:	b089      	sub	sp, #36	; 0x24
  402d58:	af00      	add	r7, sp, #0
  402d5a:	6078      	str	r0, [r7, #4]
  402d5c:	687b      	ldr	r3, [r7, #4]
  402d5e:	61fb      	str	r3, [r7, #28]
  402d60:	69fb      	ldr	r3, [r7, #28]
  402d62:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  402d64:	69bb      	ldr	r3, [r7, #24]
  402d66:	095a      	lsrs	r2, r3, #5
  402d68:	69fb      	ldr	r3, [r7, #28]
  402d6a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  402d6c:	697b      	ldr	r3, [r7, #20]
  402d6e:	f003 031f 	and.w	r3, r3, #31
  402d72:	2101      	movs	r1, #1
  402d74:	fa01 f303 	lsl.w	r3, r1, r3
  402d78:	613a      	str	r2, [r7, #16]
  402d7a:	60fb      	str	r3, [r7, #12]
  402d7c:	693b      	ldr	r3, [r7, #16]
  402d7e:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402d80:	68bb      	ldr	r3, [r7, #8]
  402d82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402d86:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402d8a:	025b      	lsls	r3, r3, #9
  402d8c:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402d8e:	68fb      	ldr	r3, [r7, #12]
  402d90:	6053      	str	r3, [r2, #4]
}
  402d92:	bf00      	nop
  402d94:	3724      	adds	r7, #36	; 0x24
  402d96:	46bd      	mov	sp, r7
  402d98:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d9c:	4770      	bx	lr

00402d9e <ioport_set_pin_mode>:
{
  402d9e:	b480      	push	{r7}
  402da0:	b08d      	sub	sp, #52	; 0x34
  402da2:	af00      	add	r7, sp, #0
  402da4:	6078      	str	r0, [r7, #4]
  402da6:	6039      	str	r1, [r7, #0]
  402da8:	687b      	ldr	r3, [r7, #4]
  402daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  402dac:	683b      	ldr	r3, [r7, #0]
  402dae:	62bb      	str	r3, [r7, #40]	; 0x28
  402db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402db2:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  402db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402db6:	095a      	lsrs	r2, r3, #5
  402db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402dba:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  402dbc:	6a3b      	ldr	r3, [r7, #32]
  402dbe:	f003 031f 	and.w	r3, r3, #31
  402dc2:	2101      	movs	r1, #1
  402dc4:	fa01 f303 	lsl.w	r3, r1, r3
  402dc8:	61fa      	str	r2, [r7, #28]
  402dca:	61bb      	str	r3, [r7, #24]
  402dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402dce:	617b      	str	r3, [r7, #20]
  402dd0:	69fb      	ldr	r3, [r7, #28]
  402dd2:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402dd4:	693b      	ldr	r3, [r7, #16]
  402dd6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402dda:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402dde:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  402de0:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  402de2:	697b      	ldr	r3, [r7, #20]
  402de4:	f003 0308 	and.w	r3, r3, #8
  402de8:	2b00      	cmp	r3, #0
  402dea:	d003      	beq.n	402df4 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  402dec:	68fb      	ldr	r3, [r7, #12]
  402dee:	69ba      	ldr	r2, [r7, #24]
  402df0:	665a      	str	r2, [r3, #100]	; 0x64
  402df2:	e002      	b.n	402dfa <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  402df4:	68fb      	ldr	r3, [r7, #12]
  402df6:	69ba      	ldr	r2, [r7, #24]
  402df8:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  402dfa:	697b      	ldr	r3, [r7, #20]
  402dfc:	f003 0310 	and.w	r3, r3, #16
  402e00:	2b00      	cmp	r3, #0
  402e02:	d004      	beq.n	402e0e <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  402e04:	68fb      	ldr	r3, [r7, #12]
  402e06:	69ba      	ldr	r2, [r7, #24]
  402e08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  402e0c:	e003      	b.n	402e16 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  402e0e:	68fb      	ldr	r3, [r7, #12]
  402e10:	69ba      	ldr	r2, [r7, #24]
  402e12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  402e16:	697b      	ldr	r3, [r7, #20]
  402e18:	f003 0320 	and.w	r3, r3, #32
  402e1c:	2b00      	cmp	r3, #0
  402e1e:	d003      	beq.n	402e28 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  402e20:	68fb      	ldr	r3, [r7, #12]
  402e22:	69ba      	ldr	r2, [r7, #24]
  402e24:	651a      	str	r2, [r3, #80]	; 0x50
  402e26:	e002      	b.n	402e2e <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  402e28:	68fb      	ldr	r3, [r7, #12]
  402e2a:	69ba      	ldr	r2, [r7, #24]
  402e2c:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  402e2e:	697b      	ldr	r3, [r7, #20]
  402e30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  402e34:	2b00      	cmp	r3, #0
  402e36:	d003      	beq.n	402e40 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  402e38:	68fb      	ldr	r3, [r7, #12]
  402e3a:	69ba      	ldr	r2, [r7, #24]
  402e3c:	621a      	str	r2, [r3, #32]
  402e3e:	e002      	b.n	402e46 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  402e40:	68fb      	ldr	r3, [r7, #12]
  402e42:	69ba      	ldr	r2, [r7, #24]
  402e44:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  402e46:	697b      	ldr	r3, [r7, #20]
  402e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402e4c:	2b00      	cmp	r3, #0
  402e4e:	d004      	beq.n	402e5a <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  402e50:	68fb      	ldr	r3, [r7, #12]
  402e52:	69ba      	ldr	r2, [r7, #24]
  402e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  402e58:	e003      	b.n	402e62 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  402e5a:	68fb      	ldr	r3, [r7, #12]
  402e5c:	69ba      	ldr	r2, [r7, #24]
  402e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  402e62:	697b      	ldr	r3, [r7, #20]
  402e64:	f003 0301 	and.w	r3, r3, #1
  402e68:	2b00      	cmp	r3, #0
  402e6a:	d006      	beq.n	402e7a <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  402e6c:	68fb      	ldr	r3, [r7, #12]
  402e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402e70:	69bb      	ldr	r3, [r7, #24]
  402e72:	431a      	orrs	r2, r3
  402e74:	68fb      	ldr	r3, [r7, #12]
  402e76:	671a      	str	r2, [r3, #112]	; 0x70
  402e78:	e006      	b.n	402e88 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  402e7a:	68fb      	ldr	r3, [r7, #12]
  402e7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402e7e:	69bb      	ldr	r3, [r7, #24]
  402e80:	43db      	mvns	r3, r3
  402e82:	401a      	ands	r2, r3
  402e84:	68fb      	ldr	r3, [r7, #12]
  402e86:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  402e88:	697b      	ldr	r3, [r7, #20]
  402e8a:	f003 0302 	and.w	r3, r3, #2
  402e8e:	2b00      	cmp	r3, #0
  402e90:	d006      	beq.n	402ea0 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  402e92:	68fb      	ldr	r3, [r7, #12]
  402e94:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402e96:	69bb      	ldr	r3, [r7, #24]
  402e98:	431a      	orrs	r2, r3
  402e9a:	68fb      	ldr	r3, [r7, #12]
  402e9c:	675a      	str	r2, [r3, #116]	; 0x74
}
  402e9e:	e006      	b.n	402eae <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  402ea0:	68fb      	ldr	r3, [r7, #12]
  402ea2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402ea4:	69bb      	ldr	r3, [r7, #24]
  402ea6:	43db      	mvns	r3, r3
  402ea8:	401a      	ands	r2, r3
  402eaa:	68fb      	ldr	r3, [r7, #12]
  402eac:	675a      	str	r2, [r3, #116]	; 0x74
  402eae:	bf00      	nop
  402eb0:	3734      	adds	r7, #52	; 0x34
  402eb2:	46bd      	mov	sp, r7
  402eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402eb8:	4770      	bx	lr
	...

00402ebc <inv_i2c_master_init>:
};

/********************************* Prototypes *********************************/

void inv_i2c_master_init(void)
{
  402ebc:	b580      	push	{r7, lr}
  402ebe:	b084      	sub	sp, #16
  402ec0:	af00      	add	r7, sp, #0
	twi_options_t opt;
	if (i2cm.is_inited != 0)
  402ec2:	4b25      	ldr	r3, [pc, #148]	; (402f58 <inv_i2c_master_init+0x9c>)
  402ec4:	781b      	ldrb	r3, [r3, #0]
  402ec6:	2b00      	cmp	r3, #0
  402ec8:	d13f      	bne.n	402f4a <inv_i2c_master_init+0x8e>
		return;

	memset(&opt, 0, sizeof(twi_options_t));
  402eca:	1d3b      	adds	r3, r7, #4
  402ecc:	220c      	movs	r2, #12
  402ece:	2100      	movs	r1, #0
  402ed0:	4618      	mov	r0, r3
  402ed2:	4b22      	ldr	r3, [pc, #136]	; (402f5c <inv_i2c_master_init+0xa0>)
  402ed4:	4798      	blx	r3
	
	ioport_set_pin_mode(i2cm.sda_pin, i2cm.sda_pin_mode);
  402ed6:	4b20      	ldr	r3, [pc, #128]	; (402f58 <inv_i2c_master_init+0x9c>)
  402ed8:	695a      	ldr	r2, [r3, #20]
  402eda:	4b1f      	ldr	r3, [pc, #124]	; (402f58 <inv_i2c_master_init+0x9c>)
  402edc:	699b      	ldr	r3, [r3, #24]
  402ede:	4619      	mov	r1, r3
  402ee0:	4610      	mov	r0, r2
  402ee2:	4b1f      	ldr	r3, [pc, #124]	; (402f60 <inv_i2c_master_init+0xa4>)
  402ee4:	4798      	blx	r3
	ioport_disable_pin(i2cm.sda_pin);
  402ee6:	4b1c      	ldr	r3, [pc, #112]	; (402f58 <inv_i2c_master_init+0x9c>)
  402ee8:	695b      	ldr	r3, [r3, #20]
  402eea:	4618      	mov	r0, r3
  402eec:	4b1d      	ldr	r3, [pc, #116]	; (402f64 <inv_i2c_master_init+0xa8>)
  402eee:	4798      	blx	r3
	ioport_set_pin_mode(i2cm.clk_pin, i2cm.clk_pin_mode);
  402ef0:	4b19      	ldr	r3, [pc, #100]	; (402f58 <inv_i2c_master_init+0x9c>)
  402ef2:	68da      	ldr	r2, [r3, #12]
  402ef4:	4b18      	ldr	r3, [pc, #96]	; (402f58 <inv_i2c_master_init+0x9c>)
  402ef6:	691b      	ldr	r3, [r3, #16]
  402ef8:	4619      	mov	r1, r3
  402efa:	4610      	mov	r0, r2
  402efc:	4b18      	ldr	r3, [pc, #96]	; (402f60 <inv_i2c_master_init+0xa4>)
  402efe:	4798      	blx	r3
	ioport_disable_pin(i2cm.clk_pin);
  402f00:	4b15      	ldr	r3, [pc, #84]	; (402f58 <inv_i2c_master_init+0x9c>)
  402f02:	68db      	ldr	r3, [r3, #12]
  402f04:	4618      	mov	r0, r3
  402f06:	4b17      	ldr	r3, [pc, #92]	; (402f64 <inv_i2c_master_init+0xa8>)
  402f08:	4798      	blx	r3

	/* Enable the peripheral and set TWI mode. */
	flexcom_enable(i2cm.p_flexcom);
  402f0a:	4b13      	ldr	r3, [pc, #76]	; (402f58 <inv_i2c_master_init+0x9c>)
  402f0c:	689b      	ldr	r3, [r3, #8]
  402f0e:	4618      	mov	r0, r3
  402f10:	4b15      	ldr	r3, [pc, #84]	; (402f68 <inv_i2c_master_init+0xac>)
  402f12:	4798      	blx	r3
	flexcom_set_opmode(i2cm.p_flexcom, FLEXCOM_TWI);
  402f14:	4b10      	ldr	r3, [pc, #64]	; (402f58 <inv_i2c_master_init+0x9c>)
  402f16:	689b      	ldr	r3, [r3, #8]
  402f18:	2103      	movs	r1, #3
  402f1a:	4618      	mov	r0, r3
  402f1c:	4b13      	ldr	r3, [pc, #76]	; (402f6c <inv_i2c_master_init+0xb0>)
  402f1e:	4798      	blx	r3

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_peripheral_hz();
  402f20:	4b13      	ldr	r3, [pc, #76]	; (402f70 <inv_i2c_master_init+0xb4>)
  402f22:	4798      	blx	r3
  402f24:	4603      	mov	r3, r0
  402f26:	607b      	str	r3, [r7, #4]
	opt.speed      = i2cm.clk_speed;
  402f28:	4b0b      	ldr	r3, [pc, #44]	; (402f58 <inv_i2c_master_init+0x9c>)
  402f2a:	69db      	ldr	r3, [r3, #28]
  402f2c:	60bb      	str	r3, [r7, #8]

	if (twi_master_init(i2cm.p_i2c, &opt) != TWI_SUCCESS)
  402f2e:	4b0a      	ldr	r3, [pc, #40]	; (402f58 <inv_i2c_master_init+0x9c>)
  402f30:	685b      	ldr	r3, [r3, #4]
  402f32:	1d3a      	adds	r2, r7, #4
  402f34:	4611      	mov	r1, r2
  402f36:	4618      	mov	r0, r3
  402f38:	4b0e      	ldr	r3, [pc, #56]	; (402f74 <inv_i2c_master_init+0xb8>)
  402f3a:	4798      	blx	r3
  402f3c:	4603      	mov	r3, r0
  402f3e:	2b00      	cmp	r3, #0
  402f40:	d105      	bne.n	402f4e <inv_i2c_master_init+0x92>
		return;
	
	i2cm.is_inited = 1;
  402f42:	4b05      	ldr	r3, [pc, #20]	; (402f58 <inv_i2c_master_init+0x9c>)
  402f44:	2201      	movs	r2, #1
  402f46:	701a      	strb	r2, [r3, #0]
  402f48:	e002      	b.n	402f50 <inv_i2c_master_init+0x94>
		return;
  402f4a:	bf00      	nop
  402f4c:	e000      	b.n	402f50 <inv_i2c_master_init+0x94>
		return;
  402f4e:	bf00      	nop
}
  402f50:	3710      	adds	r7, #16
  402f52:	46bd      	mov	sp, r7
  402f54:	bd80      	pop	{r7, pc}
  402f56:	bf00      	nop
  402f58:	200001cc 	.word	0x200001cc
  402f5c:	0040885d 	.word	0x0040885d
  402f60:	00402d9f 	.word	0x00402d9f
  402f64:	00402d55 	.word	0x00402d55
  402f68:	00405b9d 	.word	0x00405b9d
  402f6c:	00405d05 	.word	0x00405d05
  402f70:	00402d41 	.word	0x00402d41
  402f74:	00406cb5 	.word	0x00406cb5

00402f78 <inv_i2c_master_write_register>:

unsigned long inv_i2c_master_write_register(unsigned char Address, unsigned char RegisterAddr, unsigned short RegisterLen, const unsigned char *RegisterValue)
{
  402f78:	b580      	push	{r7, lr}
  402f7a:	b088      	sub	sp, #32
  402f7c:	af00      	add	r7, sp, #0
  402f7e:	603b      	str	r3, [r7, #0]
  402f80:	4603      	mov	r3, r0
  402f82:	71fb      	strb	r3, [r7, #7]
  402f84:	460b      	mov	r3, r1
  402f86:	71bb      	strb	r3, [r7, #6]
  402f88:	4613      	mov	r3, r2
  402f8a:	80bb      	strh	r3, [r7, #4]
	uint8_t data = 0;
  402f8c:	2300      	movs	r3, #0
  402f8e:	77fb      	strb	r3, [r7, #31]
	twi_packet_t packet_tx;
	
	/* Configure the data packet to be transmitted */
	packet_tx.chip        = Address;
  402f90:	79fb      	ldrb	r3, [r7, #7]
  402f92:	763b      	strb	r3, [r7, #24]
	packet_tx.addr[0]     = RegisterAddr;
  402f94:	79bb      	ldrb	r3, [r7, #6]
  402f96:	723b      	strb	r3, [r7, #8]
	packet_tx.addr_length = 1;
  402f98:	2301      	movs	r3, #1
  402f9a:	60fb      	str	r3, [r7, #12]

	/* I2C Semi-Write is basically not supported
	 * Force packet length to 1 and 0 in packet buffer in case of I2C Semi-Write needed */
	if (RegisterLen == 0) {
  402f9c:	88bb      	ldrh	r3, [r7, #4]
  402f9e:	2b00      	cmp	r3, #0
  402fa0:	d105      	bne.n	402fae <inv_i2c_master_write_register+0x36>
		packet_tx.buffer  = &data;
  402fa2:	f107 031f 	add.w	r3, r7, #31
  402fa6:	613b      	str	r3, [r7, #16]
		packet_tx.length  = 1;
  402fa8:	2301      	movs	r3, #1
  402faa:	617b      	str	r3, [r7, #20]
  402fac:	e003      	b.n	402fb6 <inv_i2c_master_write_register+0x3e>
	} else {
		packet_tx.buffer  = (uint8_t *) RegisterValue;
  402fae:	683b      	ldr	r3, [r7, #0]
  402fb0:	613b      	str	r3, [r7, #16]
		packet_tx.length  = RegisterLen;
  402fb2:	88bb      	ldrh	r3, [r7, #4]
  402fb4:	617b      	str	r3, [r7, #20]
	}

	/* Send data to attached I2C slave */
	if (twi_master_write(i2cm.p_i2c, &packet_tx) != TWI_SUCCESS)
  402fb6:	4b09      	ldr	r3, [pc, #36]	; (402fdc <inv_i2c_master_write_register+0x64>)
  402fb8:	685b      	ldr	r3, [r3, #4]
  402fba:	f107 0208 	add.w	r2, r7, #8
  402fbe:	4611      	mov	r1, r2
  402fc0:	4618      	mov	r0, r3
  402fc2:	4b07      	ldr	r3, [pc, #28]	; (402fe0 <inv_i2c_master_write_register+0x68>)
  402fc4:	4798      	blx	r3
  402fc6:	4603      	mov	r3, r0
  402fc8:	2b00      	cmp	r3, #0
  402fca:	d002      	beq.n	402fd2 <inv_i2c_master_write_register+0x5a>
		return -1;
  402fcc:	f04f 33ff 	mov.w	r3, #4294967295
  402fd0:	e000      	b.n	402fd4 <inv_i2c_master_write_register+0x5c>
	else
		return 0;
  402fd2:	2300      	movs	r3, #0
}
  402fd4:	4618      	mov	r0, r3
  402fd6:	3720      	adds	r7, #32
  402fd8:	46bd      	mov	sp, r7
  402fda:	bd80      	pop	{r7, pc}
  402fdc:	200001cc 	.word	0x200001cc
  402fe0:	00406f75 	.word	0x00406f75

00402fe4 <inv_i2c_master_read_register>:
	else
		return 0;    
}

unsigned long inv_i2c_master_read_register(unsigned char Address, unsigned char RegisterAddr, unsigned short RegisterLen, unsigned char *RegisterValue)
{
  402fe4:	b580      	push	{r7, lr}
  402fe6:	b088      	sub	sp, #32
  402fe8:	af00      	add	r7, sp, #0
  402fea:	603b      	str	r3, [r7, #0]
  402fec:	4603      	mov	r3, r0
  402fee:	71fb      	strb	r3, [r7, #7]
  402ff0:	460b      	mov	r3, r1
  402ff2:	71bb      	strb	r3, [r7, #6]
  402ff4:	4613      	mov	r3, r2
  402ff6:	80bb      	strh	r3, [r7, #4]
	twi_packet_t packet_rx;
	
	/* Configure the data packet to be received */
	packet_rx.chip        = Address;
  402ff8:	79fb      	ldrb	r3, [r7, #7]
  402ffa:	773b      	strb	r3, [r7, #28]
	packet_rx.addr[0]     = RegisterAddr;
  402ffc:	79bb      	ldrb	r3, [r7, #6]
  402ffe:	733b      	strb	r3, [r7, #12]
	packet_rx.addr_length = 1;
  403000:	2301      	movs	r3, #1
  403002:	613b      	str	r3, [r7, #16]
	packet_rx.buffer      = RegisterValue;
  403004:	683b      	ldr	r3, [r7, #0]
  403006:	617b      	str	r3, [r7, #20]
	packet_rx.length      = RegisterLen;
  403008:	88bb      	ldrh	r3, [r7, #4]
  40300a:	61bb      	str	r3, [r7, #24]

	/* Get data out of attached I2C slave */
	if (twi_master_read(i2cm.p_i2c, &packet_rx) != TWI_SUCCESS)
  40300c:	4b09      	ldr	r3, [pc, #36]	; (403034 <inv_i2c_master_read_register+0x50>)
  40300e:	685b      	ldr	r3, [r3, #4]
  403010:	f107 020c 	add.w	r2, r7, #12
  403014:	4611      	mov	r1, r2
  403016:	4618      	mov	r0, r3
  403018:	4b07      	ldr	r3, [pc, #28]	; (403038 <inv_i2c_master_read_register+0x54>)
  40301a:	4798      	blx	r3
  40301c:	4603      	mov	r3, r0
  40301e:	2b00      	cmp	r3, #0
  403020:	d002      	beq.n	403028 <inv_i2c_master_read_register+0x44>
		return -1;
  403022:	f04f 33ff 	mov.w	r3, #4294967295
  403026:	e000      	b.n	40302a <inv_i2c_master_read_register+0x46>
	else
		return 0;
  403028:	2300      	movs	r3, #0
}
  40302a:	4618      	mov	r0, r3
  40302c:	3720      	adds	r7, #32
  40302e:	46bd      	mov	sp, r7
  403030:	bd80      	pop	{r7, pc}
  403032:	bf00      	nop
  403034:	200001cc 	.word	0x200001cc
  403038:	00406e69 	.word	0x00406e69

0040303c <RTC_Handler>:

/**
 * \brief Interrupt handler for the RTC.
 */
void RTC_Handler(void)
{
  40303c:	b580      	push	{r7, lr}
  40303e:	b082      	sub	sp, #8
  403040:	af00      	add	r7, sp, #0
	uint32_t ul_status = rtc_get_status(RTC);
  403042:	4810      	ldr	r0, [pc, #64]	; (403084 <RTC_Handler+0x48>)
  403044:	4b10      	ldr	r3, [pc, #64]	; (403088 <RTC_Handler+0x4c>)
  403046:	4798      	blx	r3
  403048:	6078      	str	r0, [r7, #4]

	/* Time event interrupt */
	if ((ul_status & RTC_SR_TIMEV) == RTC_SR_TIMEV) {
  40304a:	687b      	ldr	r3, [r7, #4]
  40304c:	f003 0308 	and.w	r3, r3, #8
  403050:	2b00      	cmp	r3, #0
  403052:	d012      	beq.n	40307a <RTC_Handler+0x3e>
		/* Disable RTC interrupt */
		rtc_disable_interrupt(RTC, RTC_IDR_TIMDIS);
  403054:	2108      	movs	r1, #8
  403056:	480b      	ldr	r0, [pc, #44]	; (403084 <RTC_Handler+0x48>)
  403058:	4b0c      	ldr	r3, [pc, #48]	; (40308c <RTC_Handler+0x50>)
  40305a:	4798      	blx	r3

		rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  40305c:	2108      	movs	r1, #8
  40305e:	4809      	ldr	r0, [pc, #36]	; (403084 <RTC_Handler+0x48>)
  403060:	4b0b      	ldr	r3, [pc, #44]	; (403090 <RTC_Handler+0x54>)
  403062:	4798      	blx	r3

		rtc_enable_interrupt(RTC, RTC_IER_TIMEN);
  403064:	2108      	movs	r1, #8
  403066:	4807      	ldr	r0, [pc, #28]	; (403084 <RTC_Handler+0x48>)
  403068:	4b0a      	ldr	r3, [pc, #40]	; (403094 <RTC_Handler+0x58>)
  40306a:	4798      	blx	r3
	
		if (sRtc_irq_handler_cb != NULL)
  40306c:	4b0a      	ldr	r3, [pc, #40]	; (403098 <RTC_Handler+0x5c>)
  40306e:	681b      	ldr	r3, [r3, #0]
  403070:	2b00      	cmp	r3, #0
  403072:	d002      	beq.n	40307a <RTC_Handler+0x3e>
			sRtc_irq_handler_cb();
  403074:	4b08      	ldr	r3, [pc, #32]	; (403098 <RTC_Handler+0x5c>)
  403076:	681b      	ldr	r3, [r3, #0]
  403078:	4798      	blx	r3
	}
}
  40307a:	bf00      	nop
  40307c:	3708      	adds	r7, #8
  40307e:	46bd      	mov	sp, r7
  403080:	bd80      	pop	{r7, pc}
  403082:	bf00      	nop
  403084:	400e1460 	.word	0x400e1460
  403088:	0040684d 	.word	0x0040684d
  40308c:	00406831 	.word	0x00406831
  403090:	00406865 	.word	0x00406865
  403094:	00406815 	.word	0x00406815
  403098:	20003840 	.word	0x20003840

0040309c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  40309c:	b480      	push	{r7}
  40309e:	b083      	sub	sp, #12
  4030a0:	af00      	add	r7, sp, #0
  4030a2:	4603      	mov	r3, r0
  4030a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4030a6:	4909      	ldr	r1, [pc, #36]	; (4030cc <NVIC_ClearPendingIRQ+0x30>)
  4030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4030ac:	095b      	lsrs	r3, r3, #5
  4030ae:	79fa      	ldrb	r2, [r7, #7]
  4030b0:	f002 021f 	and.w	r2, r2, #31
  4030b4:	2001      	movs	r0, #1
  4030b6:	fa00 f202 	lsl.w	r2, r0, r2
  4030ba:	3360      	adds	r3, #96	; 0x60
  4030bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4030c0:	bf00      	nop
  4030c2:	370c      	adds	r7, #12
  4030c4:	46bd      	mov	sp, r7
  4030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030ca:	4770      	bx	lr
  4030cc:	e000e100 	.word	0xe000e100

004030d0 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  4030d0:	b480      	push	{r7}
  4030d2:	b083      	sub	sp, #12
  4030d4:	af00      	add	r7, sp, #0
  4030d6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4030d8:	687b      	ldr	r3, [r7, #4]
  4030da:	2280      	movs	r2, #128	; 0x80
  4030dc:	601a      	str	r2, [r3, #0]
}
  4030de:	bf00      	nop
  4030e0:	370c      	adds	r7, #12
  4030e2:	46bd      	mov	sp, r7
  4030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030e8:	4770      	bx	lr

004030ea <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
  4030ea:	b480      	push	{r7}
  4030ec:	b083      	sub	sp, #12
  4030ee:	af00      	add	r7, sp, #0
  4030f0:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4030f2:	687b      	ldr	r3, [r7, #4]
  4030f4:	2201      	movs	r2, #1
  4030f6:	601a      	str	r2, [r3, #0]
}
  4030f8:	bf00      	nop
  4030fa:	370c      	adds	r7, #12
  4030fc:	46bd      	mov	sp, r7
  4030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  403102:	4770      	bx	lr

00403104 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
  403104:	b480      	push	{r7}
  403106:	b083      	sub	sp, #12
  403108:	af00      	add	r7, sp, #0
  40310a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40310c:	687b      	ldr	r3, [r7, #4]
  40310e:	2202      	movs	r2, #2
  403110:	601a      	str	r2, [r3, #0]
}
  403112:	bf00      	nop
  403114:	370c      	adds	r7, #12
  403116:	46bd      	mov	sp, r7
  403118:	f85d 7b04 	ldr.w	r7, [sp], #4
  40311c:	4770      	bx	lr

0040311e <spi_set_lastxfer>:
 *  The next transfer is the last transfer and after that CS is de-asserted.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
  40311e:	b480      	push	{r7}
  403120:	b083      	sub	sp, #12
  403122:	af00      	add	r7, sp, #0
  403124:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  403126:	687b      	ldr	r3, [r7, #4]
  403128:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40312c:	601a      	str	r2, [r3, #0]
}
  40312e:	bf00      	nop
  403130:	370c      	adds	r7, #12
  403132:	46bd      	mov	sp, r7
  403134:	f85d 7b04 	ldr.w	r7, [sp], #4
  403138:	4770      	bx	lr

0040313a <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  40313a:	b480      	push	{r7}
  40313c:	b083      	sub	sp, #12
  40313e:	af00      	add	r7, sp, #0
  403140:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  403142:	687b      	ldr	r3, [r7, #4]
  403144:	685b      	ldr	r3, [r3, #4]
  403146:	f043 0201 	orr.w	r2, r3, #1
  40314a:	687b      	ldr	r3, [r7, #4]
  40314c:	605a      	str	r2, [r3, #4]
}
  40314e:	bf00      	nop
  403150:	370c      	adds	r7, #12
  403152:	46bd      	mov	sp, r7
  403154:	f85d 7b04 	ldr.w	r7, [sp], #4
  403158:	4770      	bx	lr

0040315a <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  40315a:	b480      	push	{r7}
  40315c:	b083      	sub	sp, #12
  40315e:	af00      	add	r7, sp, #0
  403160:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  403162:	687b      	ldr	r3, [r7, #4]
  403164:	685b      	ldr	r3, [r3, #4]
  403166:	f043 0210 	orr.w	r2, r3, #16
  40316a:	687b      	ldr	r3, [r7, #4]
  40316c:	605a      	str	r2, [r3, #4]
}
  40316e:	bf00      	nop
  403170:	370c      	adds	r7, #12
  403172:	46bd      	mov	sp, r7
  403174:	f85d 7b04 	ldr.w	r7, [sp], #4
  403178:	4770      	bx	lr

0040317a <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
  40317a:	b480      	push	{r7}
  40317c:	b083      	sub	sp, #12
  40317e:	af00      	add	r7, sp, #0
  403180:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
  403182:	687b      	ldr	r3, [r7, #4]
  403184:	691b      	ldr	r3, [r3, #16]
}
  403186:	4618      	mov	r0, r3
  403188:	370c      	adds	r7, #12
  40318a:	46bd      	mov	sp, r7
  40318c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403190:	4770      	bx	lr

00403192 <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  403192:	b480      	push	{r7}
  403194:	b083      	sub	sp, #12
  403196:	af00      	add	r7, sp, #0
  403198:	6078      	str	r0, [r7, #4]
  40319a:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
  40319c:	687b      	ldr	r3, [r7, #4]
  40319e:	683a      	ldr	r2, [r7, #0]
  4031a0:	615a      	str	r2, [r3, #20]
}
  4031a2:	bf00      	nop
  4031a4:	370c      	adds	r7, #12
  4031a6:	46bd      	mov	sp, r7
  4031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031ac:	4770      	bx	lr

004031ae <spi_disable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be disabled.
 */
static inline void spi_disable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  4031ae:	b480      	push	{r7}
  4031b0:	b083      	sub	sp, #12
  4031b2:	af00      	add	r7, sp, #0
  4031b4:	6078      	str	r0, [r7, #4]
  4031b6:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IDR = ul_sources;
  4031b8:	687b      	ldr	r3, [r7, #4]
  4031ba:	683a      	ldr	r2, [r7, #0]
  4031bc:	619a      	str	r2, [r3, #24]
}
  4031be:	bf00      	nop
  4031c0:	370c      	adds	r7, #12
  4031c2:	46bd      	mov	sp, r7
  4031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031c8:	4770      	bx	lr

004031ca <spi_get_pdc_base>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return PDC registers base for PDC driver to access.
 */
static inline Pdc *spi_get_pdc_base(Spi *p_spi)
{
  4031ca:	b480      	push	{r7}
  4031cc:	b083      	sub	sp, #12
  4031ce:	af00      	add	r7, sp, #0
  4031d0:	6078      	str	r0, [r7, #4]
	return (Pdc *)&(p_spi->SPI_RPR);
  4031d2:	687b      	ldr	r3, [r7, #4]
  4031d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
}
  4031d8:	4618      	mov	r0, r3
  4031da:	370c      	adds	r7, #12
  4031dc:	46bd      	mov	sp, r7
  4031de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031e2:	4770      	bx	lr

004031e4 <osc_get_rate>:
{
  4031e4:	b480      	push	{r7}
  4031e6:	b083      	sub	sp, #12
  4031e8:	af00      	add	r7, sp, #0
  4031ea:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4031ec:	687b      	ldr	r3, [r7, #4]
  4031ee:	2b07      	cmp	r3, #7
  4031f0:	d825      	bhi.n	40323e <osc_get_rate+0x5a>
  4031f2:	a201      	add	r2, pc, #4	; (adr r2, 4031f8 <osc_get_rate+0x14>)
  4031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4031f8:	00403219 	.word	0x00403219
  4031fc:	0040321f 	.word	0x0040321f
  403200:	00403225 	.word	0x00403225
  403204:	0040322b 	.word	0x0040322b
  403208:	0040322f 	.word	0x0040322f
  40320c:	00403233 	.word	0x00403233
  403210:	00403237 	.word	0x00403237
  403214:	0040323b 	.word	0x0040323b
		return OSC_SLCK_32K_RC_HZ;
  403218:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40321c:	e010      	b.n	403240 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40321e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403222:	e00d      	b.n	403240 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  403224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403228:	e00a      	b.n	403240 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40322a:	4b08      	ldr	r3, [pc, #32]	; (40324c <osc_get_rate+0x68>)
  40322c:	e008      	b.n	403240 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  40322e:	4b08      	ldr	r3, [pc, #32]	; (403250 <osc_get_rate+0x6c>)
  403230:	e006      	b.n	403240 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  403232:	4b08      	ldr	r3, [pc, #32]	; (403254 <osc_get_rate+0x70>)
  403234:	e004      	b.n	403240 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  403236:	2300      	movs	r3, #0
  403238:	e002      	b.n	403240 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40323a:	2300      	movs	r3, #0
  40323c:	e000      	b.n	403240 <osc_get_rate+0x5c>
	return 0;
  40323e:	2300      	movs	r3, #0
}
  403240:	4618      	mov	r0, r3
  403242:	370c      	adds	r7, #12
  403244:	46bd      	mov	sp, r7
  403246:	f85d 7b04 	ldr.w	r7, [sp], #4
  40324a:	4770      	bx	lr
  40324c:	007a1200 	.word	0x007a1200
  403250:	00f42400 	.word	0x00f42400
  403254:	016e3600 	.word	0x016e3600

00403258 <sysclk_get_main_hz>:
{
  403258:	b580      	push	{r7, lr}
  40325a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40325c:	2001      	movs	r0, #1
  40325e:	4b04      	ldr	r3, [pc, #16]	; (403270 <sysclk_get_main_hz+0x18>)
  403260:	4798      	blx	r3
  403262:	4602      	mov	r2, r0
  403264:	f640 634e 	movw	r3, #3662	; 0xe4e
  403268:	fb03 f302 	mul.w	r3, r3, r2
}
  40326c:	4618      	mov	r0, r3
  40326e:	bd80      	pop	{r7, pc}
  403270:	004031e5 	.word	0x004031e5

00403274 <sysclk_get_peripheral_hz>:
{
  403274:	b580      	push	{r7, lr}
  403276:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403278:	4b02      	ldr	r3, [pc, #8]	; (403284 <sysclk_get_peripheral_hz+0x10>)
  40327a:	4798      	blx	r3
  40327c:	4603      	mov	r3, r0
}
  40327e:	4618      	mov	r0, r3
  403280:	bd80      	pop	{r7, pc}
  403282:	bf00      	nop
  403284:	00403259 	.word	0x00403259

00403288 <ioport_disable_pin>:
{
  403288:	b480      	push	{r7}
  40328a:	b089      	sub	sp, #36	; 0x24
  40328c:	af00      	add	r7, sp, #0
  40328e:	6078      	str	r0, [r7, #4]
  403290:	687b      	ldr	r3, [r7, #4]
  403292:	61fb      	str	r3, [r7, #28]
  403294:	69fb      	ldr	r3, [r7, #28]
  403296:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  403298:	69bb      	ldr	r3, [r7, #24]
  40329a:	095a      	lsrs	r2, r3, #5
  40329c:	69fb      	ldr	r3, [r7, #28]
  40329e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4032a0:	697b      	ldr	r3, [r7, #20]
  4032a2:	f003 031f 	and.w	r3, r3, #31
  4032a6:	2101      	movs	r1, #1
  4032a8:	fa01 f303 	lsl.w	r3, r1, r3
  4032ac:	613a      	str	r2, [r7, #16]
  4032ae:	60fb      	str	r3, [r7, #12]
  4032b0:	693b      	ldr	r3, [r7, #16]
  4032b2:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4032b4:	68bb      	ldr	r3, [r7, #8]
  4032b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4032ba:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4032be:	025b      	lsls	r3, r3, #9
  4032c0:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4032c2:	68fb      	ldr	r3, [r7, #12]
  4032c4:	6053      	str	r3, [r2, #4]
}
  4032c6:	bf00      	nop
  4032c8:	3724      	adds	r7, #36	; 0x24
  4032ca:	46bd      	mov	sp, r7
  4032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4032d0:	4770      	bx	lr

004032d2 <ioport_set_pin_mode>:
{
  4032d2:	b480      	push	{r7}
  4032d4:	b08d      	sub	sp, #52	; 0x34
  4032d6:	af00      	add	r7, sp, #0
  4032d8:	6078      	str	r0, [r7, #4]
  4032da:	6039      	str	r1, [r7, #0]
  4032dc:	687b      	ldr	r3, [r7, #4]
  4032de:	62fb      	str	r3, [r7, #44]	; 0x2c
  4032e0:	683b      	ldr	r3, [r7, #0]
  4032e2:	62bb      	str	r3, [r7, #40]	; 0x28
  4032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4032e6:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4032ea:	095a      	lsrs	r2, r3, #5
  4032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4032ee:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4032f0:	6a3b      	ldr	r3, [r7, #32]
  4032f2:	f003 031f 	and.w	r3, r3, #31
  4032f6:	2101      	movs	r1, #1
  4032f8:	fa01 f303 	lsl.w	r3, r1, r3
  4032fc:	61fa      	str	r2, [r7, #28]
  4032fe:	61bb      	str	r3, [r7, #24]
  403300:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403302:	617b      	str	r3, [r7, #20]
  403304:	69fb      	ldr	r3, [r7, #28]
  403306:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403308:	693b      	ldr	r3, [r7, #16]
  40330a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40330e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403312:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  403314:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  403316:	697b      	ldr	r3, [r7, #20]
  403318:	f003 0308 	and.w	r3, r3, #8
  40331c:	2b00      	cmp	r3, #0
  40331e:	d003      	beq.n	403328 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  403320:	68fb      	ldr	r3, [r7, #12]
  403322:	69ba      	ldr	r2, [r7, #24]
  403324:	665a      	str	r2, [r3, #100]	; 0x64
  403326:	e002      	b.n	40332e <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  403328:	68fb      	ldr	r3, [r7, #12]
  40332a:	69ba      	ldr	r2, [r7, #24]
  40332c:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  40332e:	697b      	ldr	r3, [r7, #20]
  403330:	f003 0310 	and.w	r3, r3, #16
  403334:	2b00      	cmp	r3, #0
  403336:	d004      	beq.n	403342 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  403338:	68fb      	ldr	r3, [r7, #12]
  40333a:	69ba      	ldr	r2, [r7, #24]
  40333c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  403340:	e003      	b.n	40334a <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  403342:	68fb      	ldr	r3, [r7, #12]
  403344:	69ba      	ldr	r2, [r7, #24]
  403346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40334a:	697b      	ldr	r3, [r7, #20]
  40334c:	f003 0320 	and.w	r3, r3, #32
  403350:	2b00      	cmp	r3, #0
  403352:	d003      	beq.n	40335c <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  403354:	68fb      	ldr	r3, [r7, #12]
  403356:	69ba      	ldr	r2, [r7, #24]
  403358:	651a      	str	r2, [r3, #80]	; 0x50
  40335a:	e002      	b.n	403362 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  40335c:	68fb      	ldr	r3, [r7, #12]
  40335e:	69ba      	ldr	r2, [r7, #24]
  403360:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  403362:	697b      	ldr	r3, [r7, #20]
  403364:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  403368:	2b00      	cmp	r3, #0
  40336a:	d003      	beq.n	403374 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  40336c:	68fb      	ldr	r3, [r7, #12]
  40336e:	69ba      	ldr	r2, [r7, #24]
  403370:	621a      	str	r2, [r3, #32]
  403372:	e002      	b.n	40337a <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  403374:	68fb      	ldr	r3, [r7, #12]
  403376:	69ba      	ldr	r2, [r7, #24]
  403378:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  40337a:	697b      	ldr	r3, [r7, #20]
  40337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403380:	2b00      	cmp	r3, #0
  403382:	d004      	beq.n	40338e <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  403384:	68fb      	ldr	r3, [r7, #12]
  403386:	69ba      	ldr	r2, [r7, #24]
  403388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40338c:	e003      	b.n	403396 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  40338e:	68fb      	ldr	r3, [r7, #12]
  403390:	69ba      	ldr	r2, [r7, #24]
  403392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  403396:	697b      	ldr	r3, [r7, #20]
  403398:	f003 0301 	and.w	r3, r3, #1
  40339c:	2b00      	cmp	r3, #0
  40339e:	d006      	beq.n	4033ae <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  4033a0:	68fb      	ldr	r3, [r7, #12]
  4033a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4033a4:	69bb      	ldr	r3, [r7, #24]
  4033a6:	431a      	orrs	r2, r3
  4033a8:	68fb      	ldr	r3, [r7, #12]
  4033aa:	671a      	str	r2, [r3, #112]	; 0x70
  4033ac:	e006      	b.n	4033bc <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  4033ae:	68fb      	ldr	r3, [r7, #12]
  4033b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4033b2:	69bb      	ldr	r3, [r7, #24]
  4033b4:	43db      	mvns	r3, r3
  4033b6:	401a      	ands	r2, r3
  4033b8:	68fb      	ldr	r3, [r7, #12]
  4033ba:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  4033bc:	697b      	ldr	r3, [r7, #20]
  4033be:	f003 0302 	and.w	r3, r3, #2
  4033c2:	2b00      	cmp	r3, #0
  4033c4:	d006      	beq.n	4033d4 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  4033c6:	68fb      	ldr	r3, [r7, #12]
  4033c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4033ca:	69bb      	ldr	r3, [r7, #24]
  4033cc:	431a      	orrs	r2, r3
  4033ce:	68fb      	ldr	r3, [r7, #12]
  4033d0:	675a      	str	r2, [r3, #116]	; 0x74
}
  4033d2:	e006      	b.n	4033e2 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  4033d4:	68fb      	ldr	r3, [r7, #12]
  4033d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4033d8:	69bb      	ldr	r3, [r7, #24]
  4033da:	43db      	mvns	r3, r3
  4033dc:	401a      	ands	r2, r3
  4033de:	68fb      	ldr	r3, [r7, #12]
  4033e0:	675a      	str	r2, [r3, #116]	; 0x74
  4033e2:	bf00      	nop
  4033e4:	3734      	adds	r7, #52	; 0x34
  4033e6:	46bd      	mov	sp, r7
  4033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033ec:	4770      	bx	lr
	...

004033f0 <spi_master_irq_handler>:

/**
 * \brief Interrupt handler for the SPI master.
 */
static void spi_master_irq_handler(unsigned spi_num)
{
  4033f0:	b590      	push	{r4, r7, lr}
  4033f2:	b083      	sub	sp, #12
  4033f4:	af00      	add	r7, sp, #0
  4033f6:	6078      	str	r0, [r7, #4]
	/* Disable the RX and TX PDC transfer requests */
	pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS |
  4033f8:	4a3a      	ldr	r2, [pc, #232]	; (4034e4 <spi_master_irq_handler+0xf4>)
  4033fa:	687b      	ldr	r3, [r7, #4]
  4033fc:	f241 018c 	movw	r1, #4236	; 0x108c
  403400:	fb01 f303 	mul.w	r3, r1, r3
  403404:	4413      	add	r3, r2
  403406:	3304      	adds	r3, #4
  403408:	681b      	ldr	r3, [r3, #0]
  40340a:	f240 2102 	movw	r1, #514	; 0x202
  40340e:	4618      	mov	r0, r3
  403410:	4b35      	ldr	r3, [pc, #212]	; (4034e8 <spi_master_irq_handler+0xf8>)
  403412:	4798      	blx	r3
			PERIPH_PTCR_TXTDIS);
			
	NVIC_ClearPendingIRQ(sm[spi_num].irqn);
  403414:	4a33      	ldr	r2, [pc, #204]	; (4034e4 <spi_master_irq_handler+0xf4>)
  403416:	687b      	ldr	r3, [r7, #4]
  403418:	f241 018c 	movw	r1, #4236	; 0x108c
  40341c:	fb01 f303 	mul.w	r3, r1, r3
  403420:	4413      	add	r3, r2
  403422:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
  403426:	331c      	adds	r3, #28
  403428:	f993 3000 	ldrsb.w	r3, [r3]
  40342c:	4618      	mov	r0, r3
  40342e:	4b2f      	ldr	r3, [pc, #188]	; (4034ec <spi_master_irq_handler+0xfc>)
  403430:	4798      	blx	r3

	if(sm[spi_num].p_spi->SPI_SR & SPI_SR_RXBUFF) {
  403432:	4a2c      	ldr	r2, [pc, #176]	; (4034e4 <spi_master_irq_handler+0xf4>)
  403434:	687b      	ldr	r3, [r7, #4]
  403436:	f241 018c 	movw	r1, #4236	; 0x108c
  40343a:	fb01 f303 	mul.w	r3, r1, r3
  40343e:	4413      	add	r3, r2
  403440:	681b      	ldr	r3, [r3, #0]
  403442:	691b      	ldr	r3, [r3, #16]
  403444:	f003 0340 	and.w	r3, r3, #64	; 0x40
  403448:	2b00      	cmp	r3, #0
  40344a:	d047      	beq.n	4034dc <spi_master_irq_handler+0xec>
		memcpy(sm[spi_num].rx_dest_addr, &sm[spi_num].rx_buffer[1], sm[spi_num].rx_len);
  40344c:	4a25      	ldr	r2, [pc, #148]	; (4034e4 <spi_master_irq_handler+0xf4>)
  40344e:	687b      	ldr	r3, [r7, #4]
  403450:	f241 018c 	movw	r1, #4236	; 0x108c
  403454:	fb01 f303 	mul.w	r3, r1, r3
  403458:	4413      	add	r3, r2
  40345a:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  40345e:	3304      	adds	r3, #4
  403460:	6818      	ldr	r0, [r3, #0]
  403462:	687b      	ldr	r3, [r7, #4]
  403464:	f241 028c 	movw	r2, #4236	; 0x108c
  403468:	fb02 f303 	mul.w	r3, r2, r3
  40346c:	f603 0359 	addw	r3, r3, #2137	; 0x859
  403470:	4a1c      	ldr	r2, [pc, #112]	; (4034e4 <spi_master_irq_handler+0xf4>)
  403472:	4413      	add	r3, r2
  403474:	1d1c      	adds	r4, r3, #4
  403476:	4a1b      	ldr	r2, [pc, #108]	; (4034e4 <spi_master_irq_handler+0xf4>)
  403478:	687b      	ldr	r3, [r7, #4]
  40347a:	f241 018c 	movw	r1, #4236	; 0x108c
  40347e:	fb01 f303 	mul.w	r3, r1, r3
  403482:	4413      	add	r3, r2
  403484:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  403488:	3308      	adds	r3, #8
  40348a:	881b      	ldrh	r3, [r3, #0]
  40348c:	461a      	mov	r2, r3
  40348e:	4621      	mov	r1, r4
  403490:	4b17      	ldr	r3, [pc, #92]	; (4034f0 <spi_master_irq_handler+0x100>)
  403492:	4798      	blx	r3

		/* Disable SPI IRQ */
		spi_disable_interrupt(sm[spi_num].p_spi, SPI_IDR_RXBUFF);
  403494:	4a13      	ldr	r2, [pc, #76]	; (4034e4 <spi_master_irq_handler+0xf4>)
  403496:	687b      	ldr	r3, [r7, #4]
  403498:	f241 018c 	movw	r1, #4236	; 0x108c
  40349c:	fb01 f303 	mul.w	r3, r1, r3
  4034a0:	4413      	add	r3, r2
  4034a2:	681b      	ldr	r3, [r3, #0]
  4034a4:	2140      	movs	r1, #64	; 0x40
  4034a6:	4618      	mov	r0, r3
  4034a8:	4b12      	ldr	r3, [pc, #72]	; (4034f4 <spi_master_irq_handler+0x104>)
  4034aa:	4798      	blx	r3

		if(sm[spi_num].transfer_done_cb)
  4034ac:	4a0d      	ldr	r2, [pc, #52]	; (4034e4 <spi_master_irq_handler+0xf4>)
  4034ae:	687b      	ldr	r3, [r7, #4]
  4034b0:	f241 018c 	movw	r1, #4236	; 0x108c
  4034b4:	fb01 f303 	mul.w	r3, r1, r3
  4034b8:	4413      	add	r3, r2
  4034ba:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  4034be:	681b      	ldr	r3, [r3, #0]
  4034c0:	2b00      	cmp	r3, #0
  4034c2:	d00b      	beq.n	4034dc <spi_master_irq_handler+0xec>
			sm[spi_num].transfer_done_cb(0);
  4034c4:	4a07      	ldr	r2, [pc, #28]	; (4034e4 <spi_master_irq_handler+0xf4>)
  4034c6:	687b      	ldr	r3, [r7, #4]
  4034c8:	f241 018c 	movw	r1, #4236	; 0x108c
  4034cc:	fb01 f303 	mul.w	r3, r1, r3
  4034d0:	4413      	add	r3, r2
  4034d2:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  4034d6:	681b      	ldr	r3, [r3, #0]
  4034d8:	2000      	movs	r0, #0
  4034da:	4798      	blx	r3
	}
}
  4034dc:	bf00      	nop
  4034de:	370c      	adds	r7, #12
  4034e0:	46bd      	mov	sp, r7
  4034e2:	bd90      	pop	{r4, r7, pc}
  4034e4:	200001ec 	.word	0x200001ec
  4034e8:	00405ded 	.word	0x00405ded
  4034ec:	0040309d 	.word	0x0040309d
  4034f0:	00408661 	.word	0x00408661
  4034f4:	004031af 	.word	0x004031af

004034f8 <inv_spi_master_init>:


/********************************* Public Prototypes **************************/

void inv_spi_master_init(unsigned spi_num, uint32_t speed_hz)
{
  4034f8:	b5b0      	push	{r4, r5, r7, lr}
  4034fa:	b082      	sub	sp, #8
  4034fc:	af00      	add	r7, sp, #0
  4034fe:	6078      	str	r0, [r7, #4]
  403500:	6039      	str	r1, [r7, #0]
	ioport_set_pin_mode(sm[spi_num].clk_pin,  sm[spi_num].clk_pin_mode);
  403502:	4ab5      	ldr	r2, [pc, #724]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403504:	687b      	ldr	r3, [r7, #4]
  403506:	f241 018c 	movw	r1, #4236	; 0x108c
  40350a:	fb01 f303 	mul.w	r3, r1, r3
  40350e:	4413      	add	r3, r2
  403510:	331c      	adds	r3, #28
  403512:	6818      	ldr	r0, [r3, #0]
  403514:	4ab0      	ldr	r2, [pc, #704]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403516:	687b      	ldr	r3, [r7, #4]
  403518:	f241 018c 	movw	r1, #4236	; 0x108c
  40351c:	fb01 f303 	mul.w	r3, r1, r3
  403520:	4413      	add	r3, r2
  403522:	3320      	adds	r3, #32
  403524:	681b      	ldr	r3, [r3, #0]
  403526:	4619      	mov	r1, r3
  403528:	4bac      	ldr	r3, [pc, #688]	; (4037dc <inv_spi_master_init+0x2e4>)
  40352a:	4798      	blx	r3
	ioport_set_pin_mode(sm[spi_num].mosi_pin, sm[spi_num].mosi_pin_mode);
  40352c:	4aaa      	ldr	r2, [pc, #680]	; (4037d8 <inv_spi_master_init+0x2e0>)
  40352e:	687b      	ldr	r3, [r7, #4]
  403530:	f241 018c 	movw	r1, #4236	; 0x108c
  403534:	fb01 f303 	mul.w	r3, r1, r3
  403538:	4413      	add	r3, r2
  40353a:	3324      	adds	r3, #36	; 0x24
  40353c:	6818      	ldr	r0, [r3, #0]
  40353e:	4aa6      	ldr	r2, [pc, #664]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403540:	687b      	ldr	r3, [r7, #4]
  403542:	f241 018c 	movw	r1, #4236	; 0x108c
  403546:	fb01 f303 	mul.w	r3, r1, r3
  40354a:	4413      	add	r3, r2
  40354c:	3328      	adds	r3, #40	; 0x28
  40354e:	681b      	ldr	r3, [r3, #0]
  403550:	4619      	mov	r1, r3
  403552:	4ba2      	ldr	r3, [pc, #648]	; (4037dc <inv_spi_master_init+0x2e4>)
  403554:	4798      	blx	r3
	ioport_set_pin_mode(sm[spi_num].miso_pin, sm[spi_num].miso_pin_mode);
  403556:	4aa0      	ldr	r2, [pc, #640]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403558:	687b      	ldr	r3, [r7, #4]
  40355a:	f241 018c 	movw	r1, #4236	; 0x108c
  40355e:	fb01 f303 	mul.w	r3, r1, r3
  403562:	4413      	add	r3, r2
  403564:	332c      	adds	r3, #44	; 0x2c
  403566:	6818      	ldr	r0, [r3, #0]
  403568:	4a9b      	ldr	r2, [pc, #620]	; (4037d8 <inv_spi_master_init+0x2e0>)
  40356a:	687b      	ldr	r3, [r7, #4]
  40356c:	f241 018c 	movw	r1, #4236	; 0x108c
  403570:	fb01 f303 	mul.w	r3, r1, r3
  403574:	4413      	add	r3, r2
  403576:	3330      	adds	r3, #48	; 0x30
  403578:	681b      	ldr	r3, [r3, #0]
  40357a:	4619      	mov	r1, r3
  40357c:	4b97      	ldr	r3, [pc, #604]	; (4037dc <inv_spi_master_init+0x2e4>)
  40357e:	4798      	blx	r3
	ioport_set_pin_mode(sm[spi_num].cs_pin,   sm[spi_num].cs_pin_mode);
  403580:	4a95      	ldr	r2, [pc, #596]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403582:	687b      	ldr	r3, [r7, #4]
  403584:	f241 018c 	movw	r1, #4236	; 0x108c
  403588:	fb01 f303 	mul.w	r3, r1, r3
  40358c:	4413      	add	r3, r2
  40358e:	3334      	adds	r3, #52	; 0x34
  403590:	6818      	ldr	r0, [r3, #0]
  403592:	4a91      	ldr	r2, [pc, #580]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403594:	687b      	ldr	r3, [r7, #4]
  403596:	f241 018c 	movw	r1, #4236	; 0x108c
  40359a:	fb01 f303 	mul.w	r3, r1, r3
  40359e:	4413      	add	r3, r2
  4035a0:	3338      	adds	r3, #56	; 0x38
  4035a2:	681b      	ldr	r3, [r3, #0]
  4035a4:	4619      	mov	r1, r3
  4035a6:	4b8d      	ldr	r3, [pc, #564]	; (4037dc <inv_spi_master_init+0x2e4>)
  4035a8:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].clk_pin);
  4035aa:	4a8b      	ldr	r2, [pc, #556]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4035ac:	687b      	ldr	r3, [r7, #4]
  4035ae:	f241 018c 	movw	r1, #4236	; 0x108c
  4035b2:	fb01 f303 	mul.w	r3, r1, r3
  4035b6:	4413      	add	r3, r2
  4035b8:	331c      	adds	r3, #28
  4035ba:	681b      	ldr	r3, [r3, #0]
  4035bc:	4618      	mov	r0, r3
  4035be:	4b88      	ldr	r3, [pc, #544]	; (4037e0 <inv_spi_master_init+0x2e8>)
  4035c0:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].mosi_pin);
  4035c2:	4a85      	ldr	r2, [pc, #532]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4035c4:	687b      	ldr	r3, [r7, #4]
  4035c6:	f241 018c 	movw	r1, #4236	; 0x108c
  4035ca:	fb01 f303 	mul.w	r3, r1, r3
  4035ce:	4413      	add	r3, r2
  4035d0:	3324      	adds	r3, #36	; 0x24
  4035d2:	681b      	ldr	r3, [r3, #0]
  4035d4:	4618      	mov	r0, r3
  4035d6:	4b82      	ldr	r3, [pc, #520]	; (4037e0 <inv_spi_master_init+0x2e8>)
  4035d8:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].miso_pin);
  4035da:	4a7f      	ldr	r2, [pc, #508]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4035dc:	687b      	ldr	r3, [r7, #4]
  4035de:	f241 018c 	movw	r1, #4236	; 0x108c
  4035e2:	fb01 f303 	mul.w	r3, r1, r3
  4035e6:	4413      	add	r3, r2
  4035e8:	332c      	adds	r3, #44	; 0x2c
  4035ea:	681b      	ldr	r3, [r3, #0]
  4035ec:	4618      	mov	r0, r3
  4035ee:	4b7c      	ldr	r3, [pc, #496]	; (4037e0 <inv_spi_master_init+0x2e8>)
  4035f0:	4798      	blx	r3
	ioport_disable_pin(sm[spi_num].cs_pin);
  4035f2:	4a79      	ldr	r2, [pc, #484]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4035f4:	687b      	ldr	r3, [r7, #4]
  4035f6:	f241 018c 	movw	r1, #4236	; 0x108c
  4035fa:	fb01 f303 	mul.w	r3, r1, r3
  4035fe:	4413      	add	r3, r2
  403600:	3334      	adds	r3, #52	; 0x34
  403602:	681b      	ldr	r3, [r3, #0]
  403604:	4618      	mov	r0, r3
  403606:	4b76      	ldr	r3, [pc, #472]	; (4037e0 <inv_spi_master_init+0x2e8>)
  403608:	4798      	blx	r3
	
	/* Get pointer to SPI master PDC register base */
	sm[spi_num].p_pdc = spi_get_pdc_base(sm[spi_num].p_spi);
  40360a:	4a73      	ldr	r2, [pc, #460]	; (4037d8 <inv_spi_master_init+0x2e0>)
  40360c:	687b      	ldr	r3, [r7, #4]
  40360e:	f241 018c 	movw	r1, #4236	; 0x108c
  403612:	fb01 f303 	mul.w	r3, r1, r3
  403616:	4413      	add	r3, r2
  403618:	681b      	ldr	r3, [r3, #0]
  40361a:	4618      	mov	r0, r3
  40361c:	4b71      	ldr	r3, [pc, #452]	; (4037e4 <inv_spi_master_init+0x2ec>)
  40361e:	4798      	blx	r3
  403620:	4a6d      	ldr	r2, [pc, #436]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403622:	687b      	ldr	r3, [r7, #4]
  403624:	f241 018c 	movw	r1, #4236	; 0x108c
  403628:	fb01 f303 	mul.w	r3, r1, r3
  40362c:	4413      	add	r3, r2
  40362e:	3304      	adds	r3, #4
  403630:	6018      	str	r0, [r3, #0]

	/* Enable the peripheral and set SPI mode. */
	flexcom_enable(sm[spi_num].p_flexcom);
  403632:	4a69      	ldr	r2, [pc, #420]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403634:	687b      	ldr	r3, [r7, #4]
  403636:	f241 018c 	movw	r1, #4236	; 0x108c
  40363a:	fb01 f303 	mul.w	r3, r1, r3
  40363e:	4413      	add	r3, r2
  403640:	3308      	adds	r3, #8
  403642:	681b      	ldr	r3, [r3, #0]
  403644:	4618      	mov	r0, r3
  403646:	4b68      	ldr	r3, [pc, #416]	; (4037e8 <inv_spi_master_init+0x2f0>)
  403648:	4798      	blx	r3
	flexcom_set_opmode(sm[spi_num].p_flexcom, FLEXCOM_SPI);
  40364a:	4a63      	ldr	r2, [pc, #396]	; (4037d8 <inv_spi_master_init+0x2e0>)
  40364c:	687b      	ldr	r3, [r7, #4]
  40364e:	f241 018c 	movw	r1, #4236	; 0x108c
  403652:	fb01 f303 	mul.w	r3, r1, r3
  403656:	4413      	add	r3, r2
  403658:	3308      	adds	r3, #8
  40365a:	681b      	ldr	r3, [r3, #0]
  40365c:	2102      	movs	r1, #2
  40365e:	4618      	mov	r0, r3
  403660:	4b62      	ldr	r3, [pc, #392]	; (4037ec <inv_spi_master_init+0x2f4>)
  403662:	4798      	blx	r3

	spi_disable(sm[spi_num].p_spi);
  403664:	4a5c      	ldr	r2, [pc, #368]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403666:	687b      	ldr	r3, [r7, #4]
  403668:	f241 018c 	movw	r1, #4236	; 0x108c
  40366c:	fb01 f303 	mul.w	r3, r1, r3
  403670:	4413      	add	r3, r2
  403672:	681b      	ldr	r3, [r3, #0]
  403674:	4618      	mov	r0, r3
  403676:	4b5e      	ldr	r3, [pc, #376]	; (4037f0 <inv_spi_master_init+0x2f8>)
  403678:	4798      	blx	r3
	spi_reset(sm[spi_num].p_spi);
  40367a:	4a57      	ldr	r2, [pc, #348]	; (4037d8 <inv_spi_master_init+0x2e0>)
  40367c:	687b      	ldr	r3, [r7, #4]
  40367e:	f241 018c 	movw	r1, #4236	; 0x108c
  403682:	fb01 f303 	mul.w	r3, r1, r3
  403686:	4413      	add	r3, r2
  403688:	681b      	ldr	r3, [r3, #0]
  40368a:	4618      	mov	r0, r3
  40368c:	4b59      	ldr	r3, [pc, #356]	; (4037f4 <inv_spi_master_init+0x2fc>)
  40368e:	4798      	blx	r3
	spi_set_lastxfer(sm[spi_num].p_spi);
  403690:	4a51      	ldr	r2, [pc, #324]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403692:	687b      	ldr	r3, [r7, #4]
  403694:	f241 018c 	movw	r1, #4236	; 0x108c
  403698:	fb01 f303 	mul.w	r3, r1, r3
  40369c:	4413      	add	r3, r2
  40369e:	681b      	ldr	r3, [r3, #0]
  4036a0:	4618      	mov	r0, r3
  4036a2:	4b55      	ldr	r3, [pc, #340]	; (4037f8 <inv_spi_master_init+0x300>)
  4036a4:	4798      	blx	r3
	spi_set_master_mode(sm[spi_num].p_spi);
  4036a6:	4a4c      	ldr	r2, [pc, #304]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4036a8:	687b      	ldr	r3, [r7, #4]
  4036aa:	f241 018c 	movw	r1, #4236	; 0x108c
  4036ae:	fb01 f303 	mul.w	r3, r1, r3
  4036b2:	4413      	add	r3, r2
  4036b4:	681b      	ldr	r3, [r3, #0]
  4036b6:	4618      	mov	r0, r3
  4036b8:	4b50      	ldr	r3, [pc, #320]	; (4037fc <inv_spi_master_init+0x304>)
  4036ba:	4798      	blx	r3
	spi_disable_mode_fault_detect(sm[spi_num].p_spi);
  4036bc:	4a46      	ldr	r2, [pc, #280]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4036be:	687b      	ldr	r3, [r7, #4]
  4036c0:	f241 018c 	movw	r1, #4236	; 0x108c
  4036c4:	fb01 f303 	mul.w	r3, r1, r3
  4036c8:	4413      	add	r3, r2
  4036ca:	681b      	ldr	r3, [r3, #0]
  4036cc:	4618      	mov	r0, r3
  4036ce:	4b4c      	ldr	r3, [pc, #304]	; (403800 <inv_spi_master_init+0x308>)
  4036d0:	4798      	blx	r3
	
	spi_configure_cs_behavior(sm[spi_num].p_spi, sm[spi_num].chip_sel, SPI_CS_RISE_NO_TX);
  4036d2:	4a41      	ldr	r2, [pc, #260]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4036d4:	687b      	ldr	r3, [r7, #4]
  4036d6:	f241 018c 	movw	r1, #4236	; 0x108c
  4036da:	fb01 f303 	mul.w	r3, r1, r3
  4036de:	4413      	add	r3, r2
  4036e0:	6818      	ldr	r0, [r3, #0]
  4036e2:	4a3d      	ldr	r2, [pc, #244]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4036e4:	687b      	ldr	r3, [r7, #4]
  4036e6:	f241 018c 	movw	r1, #4236	; 0x108c
  4036ea:	fb01 f303 	mul.w	r3, r1, r3
  4036ee:	4413      	add	r3, r2
  4036f0:	330c      	adds	r3, #12
  4036f2:	681b      	ldr	r3, [r3, #0]
  4036f4:	2200      	movs	r2, #0
  4036f6:	4619      	mov	r1, r3
  4036f8:	4b42      	ldr	r3, [pc, #264]	; (403804 <inv_spi_master_init+0x30c>)
  4036fa:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(sm[spi_num].p_spi, sm[spi_num].chip_sel);
  4036fc:	4a36      	ldr	r2, [pc, #216]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4036fe:	687b      	ldr	r3, [r7, #4]
  403700:	f241 018c 	movw	r1, #4236	; 0x108c
  403704:	fb01 f303 	mul.w	r3, r1, r3
  403708:	4413      	add	r3, r2
  40370a:	6818      	ldr	r0, [r3, #0]
  40370c:	4a32      	ldr	r2, [pc, #200]	; (4037d8 <inv_spi_master_init+0x2e0>)
  40370e:	687b      	ldr	r3, [r7, #4]
  403710:	f241 018c 	movw	r1, #4236	; 0x108c
  403714:	fb01 f303 	mul.w	r3, r1, r3
  403718:	4413      	add	r3, r2
  40371a:	330c      	adds	r3, #12
  40371c:	681b      	ldr	r3, [r3, #0]
  40371e:	4619      	mov	r1, r3
  403720:	4b39      	ldr	r3, [pc, #228]	; (403808 <inv_spi_master_init+0x310>)
  403722:	4798      	blx	r3
	
	spi_set_clock_polarity(sm[spi_num].p_spi, sm[spi_num].chip_sel, sm[spi_num].clk_pol);
  403724:	4a2c      	ldr	r2, [pc, #176]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403726:	687b      	ldr	r3, [r7, #4]
  403728:	f241 018c 	movw	r1, #4236	; 0x108c
  40372c:	fb01 f303 	mul.w	r3, r1, r3
  403730:	4413      	add	r3, r2
  403732:	6818      	ldr	r0, [r3, #0]
  403734:	4a28      	ldr	r2, [pc, #160]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403736:	687b      	ldr	r3, [r7, #4]
  403738:	f241 018c 	movw	r1, #4236	; 0x108c
  40373c:	fb01 f303 	mul.w	r3, r1, r3
  403740:	4413      	add	r3, r2
  403742:	330c      	adds	r3, #12
  403744:	681c      	ldr	r4, [r3, #0]
  403746:	4a24      	ldr	r2, [pc, #144]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403748:	687b      	ldr	r3, [r7, #4]
  40374a:	f241 018c 	movw	r1, #4236	; 0x108c
  40374e:	fb01 f303 	mul.w	r3, r1, r3
  403752:	4413      	add	r3, r2
  403754:	3310      	adds	r3, #16
  403756:	681b      	ldr	r3, [r3, #0]
  403758:	461a      	mov	r2, r3
  40375a:	4621      	mov	r1, r4
  40375c:	4b2b      	ldr	r3, [pc, #172]	; (40380c <inv_spi_master_init+0x314>)
  40375e:	4798      	blx	r3
	spi_set_clock_phase(sm[spi_num].p_spi, sm[spi_num].chip_sel, sm[spi_num].clk_ph);
  403760:	4a1d      	ldr	r2, [pc, #116]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403762:	687b      	ldr	r3, [r7, #4]
  403764:	f241 018c 	movw	r1, #4236	; 0x108c
  403768:	fb01 f303 	mul.w	r3, r1, r3
  40376c:	4413      	add	r3, r2
  40376e:	6818      	ldr	r0, [r3, #0]
  403770:	4a19      	ldr	r2, [pc, #100]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403772:	687b      	ldr	r3, [r7, #4]
  403774:	f241 018c 	movw	r1, #4236	; 0x108c
  403778:	fb01 f303 	mul.w	r3, r1, r3
  40377c:	4413      	add	r3, r2
  40377e:	330c      	adds	r3, #12
  403780:	681c      	ldr	r4, [r3, #0]
  403782:	4a15      	ldr	r2, [pc, #84]	; (4037d8 <inv_spi_master_init+0x2e0>)
  403784:	687b      	ldr	r3, [r7, #4]
  403786:	f241 018c 	movw	r1, #4236	; 0x108c
  40378a:	fb01 f303 	mul.w	r3, r1, r3
  40378e:	4413      	add	r3, r2
  403790:	3314      	adds	r3, #20
  403792:	681b      	ldr	r3, [r3, #0]
  403794:	461a      	mov	r2, r3
  403796:	4621      	mov	r1, r4
  403798:	4b1d      	ldr	r3, [pc, #116]	; (403810 <inv_spi_master_init+0x318>)
  40379a:	4798      	blx	r3
	spi_set_bits_per_transfer(sm[spi_num].p_spi, sm[spi_num].chip_sel, SPI_CSR_BITS_8_BIT);
  40379c:	4a0e      	ldr	r2, [pc, #56]	; (4037d8 <inv_spi_master_init+0x2e0>)
  40379e:	687b      	ldr	r3, [r7, #4]
  4037a0:	f241 018c 	movw	r1, #4236	; 0x108c
  4037a4:	fb01 f303 	mul.w	r3, r1, r3
  4037a8:	4413      	add	r3, r2
  4037aa:	6818      	ldr	r0, [r3, #0]
  4037ac:	4a0a      	ldr	r2, [pc, #40]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4037ae:	687b      	ldr	r3, [r7, #4]
  4037b0:	f241 018c 	movw	r1, #4236	; 0x108c
  4037b4:	fb01 f303 	mul.w	r3, r1, r3
  4037b8:	4413      	add	r3, r2
  4037ba:	330c      	adds	r3, #12
  4037bc:	681b      	ldr	r3, [r3, #0]
  4037be:	2200      	movs	r2, #0
  4037c0:	4619      	mov	r1, r3
  4037c2:	4b14      	ldr	r3, [pc, #80]	; (403814 <inv_spi_master_init+0x31c>)
  4037c4:	4798      	blx	r3
	spi_set_baudrate_div(sm[spi_num].p_spi, sm[spi_num].chip_sel, 
  4037c6:	4a04      	ldr	r2, [pc, #16]	; (4037d8 <inv_spi_master_init+0x2e0>)
  4037c8:	687b      	ldr	r3, [r7, #4]
  4037ca:	f241 018c 	movw	r1, #4236	; 0x108c
  4037ce:	fb01 f303 	mul.w	r3, r1, r3
  4037d2:	4413      	add	r3, r2
  4037d4:	681c      	ldr	r4, [r3, #0]
  4037d6:	e01f      	b.n	403818 <inv_spi_master_init+0x320>
  4037d8:	200001ec 	.word	0x200001ec
  4037dc:	004032d3 	.word	0x004032d3
  4037e0:	00403289 	.word	0x00403289
  4037e4:	004031cb 	.word	0x004031cb
  4037e8:	00405b9d 	.word	0x00405b9d
  4037ec:	00405d05 	.word	0x00405d05
  4037f0:	00403105 	.word	0x00403105
  4037f4:	004030d1 	.word	0x004030d1
  4037f8:	0040311f 	.word	0x0040311f
  4037fc:	0040313b 	.word	0x0040313b
  403800:	0040315b 	.word	0x0040315b
  403804:	00406955 	.word	0x00406955
  403808:	00406881 	.word	0x00406881
  40380c:	004068b5 	.word	0x004068b5
  403810:	00406905 	.word	0x00406905
  403814:	004069fb 	.word	0x004069fb
  403818:	4a31      	ldr	r2, [pc, #196]	; (4038e0 <inv_spi_master_init+0x3e8>)
  40381a:	687b      	ldr	r3, [r7, #4]
  40381c:	f241 018c 	movw	r1, #4236	; 0x108c
  403820:	fb01 f303 	mul.w	r3, r1, r3
  403824:	4413      	add	r3, r2
  403826:	330c      	adds	r3, #12
  403828:	681d      	ldr	r5, [r3, #0]
			(sysclk_get_peripheral_hz() / speed_hz));
  40382a:	4b2e      	ldr	r3, [pc, #184]	; (4038e4 <inv_spi_master_init+0x3ec>)
  40382c:	4798      	blx	r3
  40382e:	4602      	mov	r2, r0
  403830:	683b      	ldr	r3, [r7, #0]
  403832:	fbb2 f3f3 	udiv	r3, r2, r3
	spi_set_baudrate_div(sm[spi_num].p_spi, sm[spi_num].chip_sel, 
  403836:	b2db      	uxtb	r3, r3
  403838:	461a      	mov	r2, r3
  40383a:	4629      	mov	r1, r5
  40383c:	4620      	mov	r0, r4
  40383e:	4b2a      	ldr	r3, [pc, #168]	; (4038e8 <inv_spi_master_init+0x3f0>)
  403840:	4798      	blx	r3
	spi_set_transfer_delay(sm[spi_num].p_spi, sm[spi_num].chip_sel, sm[spi_num].dlybs, 
  403842:	4a27      	ldr	r2, [pc, #156]	; (4038e0 <inv_spi_master_init+0x3e8>)
  403844:	687b      	ldr	r3, [r7, #4]
  403846:	f241 018c 	movw	r1, #4236	; 0x108c
  40384a:	fb01 f303 	mul.w	r3, r1, r3
  40384e:	4413      	add	r3, r2
  403850:	6818      	ldr	r0, [r3, #0]
  403852:	4a23      	ldr	r2, [pc, #140]	; (4038e0 <inv_spi_master_init+0x3e8>)
  403854:	687b      	ldr	r3, [r7, #4]
  403856:	f241 018c 	movw	r1, #4236	; 0x108c
  40385a:	fb01 f303 	mul.w	r3, r1, r3
  40385e:	4413      	add	r3, r2
  403860:	330c      	adds	r3, #12
  403862:	681c      	ldr	r4, [r3, #0]
  403864:	4a1e      	ldr	r2, [pc, #120]	; (4038e0 <inv_spi_master_init+0x3e8>)
  403866:	687b      	ldr	r3, [r7, #4]
  403868:	f241 018c 	movw	r1, #4236	; 0x108c
  40386c:	fb01 f303 	mul.w	r3, r1, r3
  403870:	4413      	add	r3, r2
  403872:	3318      	adds	r3, #24
  403874:	781d      	ldrb	r5, [r3, #0]
  403876:	4a1a      	ldr	r2, [pc, #104]	; (4038e0 <inv_spi_master_init+0x3e8>)
  403878:	687b      	ldr	r3, [r7, #4]
  40387a:	f241 018c 	movw	r1, #4236	; 0x108c
  40387e:	fb01 f303 	mul.w	r3, r1, r3
  403882:	4413      	add	r3, r2
  403884:	3319      	adds	r3, #25
  403886:	781b      	ldrb	r3, [r3, #0]
  403888:	462a      	mov	r2, r5
  40388a:	4621      	mov	r1, r4
  40388c:	4c17      	ldr	r4, [pc, #92]	; (4038ec <inv_spi_master_init+0x3f4>)
  40388e:	47a0      	blx	r4
			sm[spi_num].dlybct);

	spi_enable(sm[spi_num].p_spi);
  403890:	4a13      	ldr	r2, [pc, #76]	; (4038e0 <inv_spi_master_init+0x3e8>)
  403892:	687b      	ldr	r3, [r7, #4]
  403894:	f241 018c 	movw	r1, #4236	; 0x108c
  403898:	fb01 f303 	mul.w	r3, r1, r3
  40389c:	4413      	add	r3, r2
  40389e:	681b      	ldr	r3, [r3, #0]
  4038a0:	4618      	mov	r0, r3
  4038a2:	4b13      	ldr	r3, [pc, #76]	; (4038f0 <inv_spi_master_init+0x3f8>)
  4038a4:	4798      	blx	r3

	pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  4038a6:	4a0e      	ldr	r2, [pc, #56]	; (4038e0 <inv_spi_master_init+0x3e8>)
  4038a8:	687b      	ldr	r3, [r7, #4]
  4038aa:	f241 018c 	movw	r1, #4236	; 0x108c
  4038ae:	fb01 f303 	mul.w	r3, r1, r3
  4038b2:	4413      	add	r3, r2
  4038b4:	3304      	adds	r3, #4
  4038b6:	681b      	ldr	r3, [r3, #0]
  4038b8:	f240 2102 	movw	r1, #514	; 0x202
  4038bc:	4618      	mov	r0, r3
  4038be:	4b0d      	ldr	r3, [pc, #52]	; (4038f4 <inv_spi_master_init+0x3fc>)
  4038c0:	4798      	blx	r3
	
	sm[spi_num].transfer_done_cb = 0;
  4038c2:	4a07      	ldr	r2, [pc, #28]	; (4038e0 <inv_spi_master_init+0x3e8>)
  4038c4:	687b      	ldr	r3, [r7, #4]
  4038c6:	f241 018c 	movw	r1, #4236	; 0x108c
  4038ca:	fb01 f303 	mul.w	r3, r1, r3
  4038ce:	4413      	add	r3, r2
  4038d0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  4038d4:	2200      	movs	r2, #0
  4038d6:	601a      	str	r2, [r3, #0]
}
  4038d8:	bf00      	nop
  4038da:	3708      	adds	r7, #8
  4038dc:	46bd      	mov	sp, r7
  4038de:	bdb0      	pop	{r4, r5, r7, pc}
  4038e0:	200001ec 	.word	0x200001ec
  4038e4:	00403275 	.word	0x00403275
  4038e8:	00406a45 	.word	0x00406a45
  4038ec:	00406aa3 	.word	0x00406aa3
  4038f0:	004030eb 	.word	0x004030eb
  4038f4:	00405ded 	.word	0x00405ded

004038f8 <inv_spi_master_write_register>:
	NVIC_ClearPendingIRQ(sm[spi_num].irqn);
}

unsigned long inv_spi_master_write_register(unsigned spi_num, unsigned char register_addr,
		unsigned short len, const unsigned char *value)
{
  4038f8:	b580      	push	{r7, lr}
  4038fa:	b086      	sub	sp, #24
  4038fc:	af00      	add	r7, sp, #0
  4038fe:	60f8      	str	r0, [r7, #12]
  403900:	607b      	str	r3, [r7, #4]
  403902:	460b      	mov	r3, r1
  403904:	72fb      	strb	r3, [r7, #11]
  403906:	4613      	mov	r3, r2
  403908:	813b      	strh	r3, [r7, #8]
	if(len+1 > SPI_BUFFER_SIZE)
  40390a:	893b      	ldrh	r3, [r7, #8]
  40390c:	3301      	adds	r3, #1
  40390e:	f5b3 6f02 	cmp.w	r3, #2080	; 0x820
  403912:	dd01      	ble.n	403918 <inv_spi_master_write_register+0x20>
		return 1;
  403914:	2301      	movs	r3, #1
  403916:	e082      	b.n	403a1e <inv_spi_master_write_register+0x126>
	
	pdc_packet_t pdc_spi_packet;
	
	/* Desactivate Irq during buffer write*/
	inv_disable_irq();
  403918:	4b43      	ldr	r3, [pc, #268]	; (403a28 <inv_spi_master_write_register+0x130>)
  40391a:	4798      	blx	r3
	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].rx_buffer[0];
  40391c:	68fb      	ldr	r3, [r7, #12]
  40391e:	f241 028c 	movw	r2, #4236	; 0x108c
  403922:	fb02 f303 	mul.w	r3, r2, r3
  403926:	f603 0358 	addw	r3, r3, #2136	; 0x858
  40392a:	4a40      	ldr	r2, [pc, #256]	; (403a2c <inv_spi_master_write_register+0x134>)
  40392c:	4413      	add	r3, r2
  40392e:	3304      	adds	r3, #4
  403930:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  403932:	893b      	ldrh	r3, [r7, #8]
  403934:	3301      	adds	r3, #1
  403936:	617b      	str	r3, [r7, #20]
	pdc_rx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  403938:	4a3c      	ldr	r2, [pc, #240]	; (403a2c <inv_spi_master_write_register+0x134>)
  40393a:	68fb      	ldr	r3, [r7, #12]
  40393c:	f241 018c 	movw	r1, #4236	; 0x108c
  403940:	fb01 f303 	mul.w	r3, r1, r3
  403944:	4413      	add	r3, r2
  403946:	3304      	adds	r3, #4
  403948:	681b      	ldr	r3, [r3, #0]
  40394a:	f107 0110 	add.w	r1, r7, #16
  40394e:	2200      	movs	r2, #0
  403950:	4618      	mov	r0, r3
  403952:	4b37      	ldr	r3, [pc, #220]	; (403a30 <inv_spi_master_write_register+0x138>)
  403954:	4798      	blx	r3

	sm[spi_num].tx_buffer[0] = (uint8_t) register_addr;
  403956:	4a35      	ldr	r2, [pc, #212]	; (403a2c <inv_spi_master_write_register+0x134>)
  403958:	68fb      	ldr	r3, [r7, #12]
  40395a:	f241 018c 	movw	r1, #4236	; 0x108c
  40395e:	fb01 f303 	mul.w	r3, r1, r3
  403962:	4413      	add	r3, r2
  403964:	333c      	adds	r3, #60	; 0x3c
  403966:	7afa      	ldrb	r2, [r7, #11]
  403968:	701a      	strb	r2, [r3, #0]
	memcpy(&sm[spi_num].tx_buffer[1], (uint8_t *)value, len);
  40396a:	68fb      	ldr	r3, [r7, #12]
  40396c:	f241 028c 	movw	r2, #4236	; 0x108c
  403970:	fb02 f303 	mul.w	r3, r2, r3
  403974:	3339      	adds	r3, #57	; 0x39
  403976:	4a2d      	ldr	r2, [pc, #180]	; (403a2c <inv_spi_master_write_register+0x134>)
  403978:	4413      	add	r3, r2
  40397a:	3304      	adds	r3, #4
  40397c:	893a      	ldrh	r2, [r7, #8]
  40397e:	6879      	ldr	r1, [r7, #4]
  403980:	4618      	mov	r0, r3
  403982:	4b2c      	ldr	r3, [pc, #176]	; (403a34 <inv_spi_master_write_register+0x13c>)
  403984:	4798      	blx	r3

	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].tx_buffer[0];
  403986:	68fb      	ldr	r3, [r7, #12]
  403988:	f241 028c 	movw	r2, #4236	; 0x108c
  40398c:	fb02 f303 	mul.w	r3, r2, r3
  403990:	3338      	adds	r3, #56	; 0x38
  403992:	4a26      	ldr	r2, [pc, #152]	; (403a2c <inv_spi_master_write_register+0x134>)
  403994:	4413      	add	r3, r2
  403996:	3304      	adds	r3, #4
  403998:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  40399a:	893b      	ldrh	r3, [r7, #8]
  40399c:	3301      	adds	r3, #1
  40399e:	617b      	str	r3, [r7, #20]
	pdc_tx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  4039a0:	4a22      	ldr	r2, [pc, #136]	; (403a2c <inv_spi_master_write_register+0x134>)
  4039a2:	68fb      	ldr	r3, [r7, #12]
  4039a4:	f241 018c 	movw	r1, #4236	; 0x108c
  4039a8:	fb01 f303 	mul.w	r3, r1, r3
  4039ac:	4413      	add	r3, r2
  4039ae:	3304      	adds	r3, #4
  4039b0:	681b      	ldr	r3, [r3, #0]
  4039b2:	f107 0110 	add.w	r1, r7, #16
  4039b6:	2200      	movs	r2, #0
  4039b8:	4618      	mov	r0, r3
  4039ba:	4b1f      	ldr	r3, [pc, #124]	; (403a38 <inv_spi_master_write_register+0x140>)
  4039bc:	4798      	blx	r3
	
	/* Enable the RX and TX PDC transfer requests */
	pdc_enable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  4039be:	4a1b      	ldr	r2, [pc, #108]	; (403a2c <inv_spi_master_write_register+0x134>)
  4039c0:	68fb      	ldr	r3, [r7, #12]
  4039c2:	f241 018c 	movw	r1, #4236	; 0x108c
  4039c6:	fb01 f303 	mul.w	r3, r1, r3
  4039ca:	4413      	add	r3, r2
  4039cc:	3304      	adds	r3, #4
  4039ce:	681b      	ldr	r3, [r3, #0]
  4039d0:	f240 1101 	movw	r1, #257	; 0x101
  4039d4:	4618      	mov	r0, r3
  4039d6:	4b19      	ldr	r3, [pc, #100]	; (403a3c <inv_spi_master_write_register+0x144>)
  4039d8:	4798      	blx	r3
	/* Re activate Irq */
	inv_enable_irq();
  4039da:	4b19      	ldr	r3, [pc, #100]	; (403a40 <inv_spi_master_write_register+0x148>)
  4039dc:	4798      	blx	r3
	/* Waiting transfer done*/
	while((spi_read_status(sm[spi_num].p_spi) & SPI_SR_TXEMPTY) == 0);
  4039de:	bf00      	nop
  4039e0:	4a12      	ldr	r2, [pc, #72]	; (403a2c <inv_spi_master_write_register+0x134>)
  4039e2:	68fb      	ldr	r3, [r7, #12]
  4039e4:	f241 018c 	movw	r1, #4236	; 0x108c
  4039e8:	fb01 f303 	mul.w	r3, r1, r3
  4039ec:	4413      	add	r3, r2
  4039ee:	681b      	ldr	r3, [r3, #0]
  4039f0:	4618      	mov	r0, r3
  4039f2:	4b14      	ldr	r3, [pc, #80]	; (403a44 <inv_spi_master_write_register+0x14c>)
  4039f4:	4798      	blx	r3
  4039f6:	4603      	mov	r3, r0
  4039f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4039fc:	2b00      	cmp	r3, #0
  4039fe:	d0ef      	beq.n	4039e0 <inv_spi_master_write_register+0xe8>
		
	/* Disable the RX and TX PDC transfer requests */
	pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS |
  403a00:	4a0a      	ldr	r2, [pc, #40]	; (403a2c <inv_spi_master_write_register+0x134>)
  403a02:	68fb      	ldr	r3, [r7, #12]
  403a04:	f241 018c 	movw	r1, #4236	; 0x108c
  403a08:	fb01 f303 	mul.w	r3, r1, r3
  403a0c:	4413      	add	r3, r2
  403a0e:	3304      	adds	r3, #4
  403a10:	681b      	ldr	r3, [r3, #0]
  403a12:	f240 2102 	movw	r1, #514	; 0x202
  403a16:	4618      	mov	r0, r3
  403a18:	4b0b      	ldr	r3, [pc, #44]	; (403a48 <inv_spi_master_write_register+0x150>)
  403a1a:	4798      	blx	r3
			PERIPH_PTCR_TXTDIS);
	
	return 0;
  403a1c:	2300      	movs	r3, #0
}
  403a1e:	4618      	mov	r0, r3
  403a20:	3718      	adds	r7, #24
  403a22:	46bd      	mov	sp, r7
  403a24:	bd80      	pop	{r7, pc}
  403a26:	bf00      	nop
  403a28:	00402911 	.word	0x00402911
  403a2c:	200001ec 	.word	0x200001ec
  403a30:	00405d67 	.word	0x00405d67
  403a34:	00408661 	.word	0x00408661
  403a38:	00405d23 	.word	0x00405d23
  403a3c:	00405dcb 	.word	0x00405dcb
  403a40:	00402939 	.word	0x00402939
  403a44:	0040317b 	.word	0x0040317b
  403a48:	00405ded 	.word	0x00405ded

00403a4c <inv_spi_master_read_register>:

unsigned long inv_spi_master_read_register(unsigned spi_num, unsigned char register_addr,
		unsigned short len, unsigned char *value)
{
  403a4c:	b580      	push	{r7, lr}
  403a4e:	b086      	sub	sp, #24
  403a50:	af00      	add	r7, sp, #0
  403a52:	60f8      	str	r0, [r7, #12]
  403a54:	607b      	str	r3, [r7, #4]
  403a56:	460b      	mov	r3, r1
  403a58:	72fb      	strb	r3, [r7, #11]
  403a5a:	4613      	mov	r3, r2
  403a5c:	813b      	strh	r3, [r7, #8]
	if(len+1 > SPI_BUFFER_SIZE)
  403a5e:	893b      	ldrh	r3, [r7, #8]
  403a60:	3301      	adds	r3, #1
  403a62:	f5b3 6f02 	cmp.w	r3, #2080	; 0x820
  403a66:	dd01      	ble.n	403a6c <inv_spi_master_read_register+0x20>
		return 1;
  403a68:	2301      	movs	r3, #1
  403a6a:	e0ec      	b.n	403c46 <inv_spi_master_read_register+0x1fa>
	
	pdc_packet_t pdc_spi_packet;
	
	if(sm[spi_num].transfer_done_cb)
  403a6c:	4a78      	ldr	r2, [pc, #480]	; (403c50 <inv_spi_master_read_register+0x204>)
  403a6e:	68fb      	ldr	r3, [r7, #12]
  403a70:	f241 018c 	movw	r1, #4236	; 0x108c
  403a74:	fb01 f303 	mul.w	r3, r1, r3
  403a78:	4413      	add	r3, r2
  403a7a:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  403a7e:	681b      	ldr	r3, [r3, #0]
  403a80:	2b00      	cmp	r3, #0
  403a82:	d00b      	beq.n	403a9c <inv_spi_master_read_register+0x50>
		pdc_rx_clear_cnt(sm[spi_num].p_pdc);
  403a84:	4a72      	ldr	r2, [pc, #456]	; (403c50 <inv_spi_master_read_register+0x204>)
  403a86:	68fb      	ldr	r3, [r7, #12]
  403a88:	f241 018c 	movw	r1, #4236	; 0x108c
  403a8c:	fb01 f303 	mul.w	r3, r1, r3
  403a90:	4413      	add	r3, r2
  403a92:	3304      	adds	r3, #4
  403a94:	681b      	ldr	r3, [r3, #0]
  403a96:	4618      	mov	r0, r3
  403a98:	4b6e      	ldr	r3, [pc, #440]	; (403c54 <inv_spi_master_read_register+0x208>)
  403a9a:	4798      	blx	r3
	/* Desactivate Irq during buffer write*/
	inv_disable_irq();
  403a9c:	4b6e      	ldr	r3, [pc, #440]	; (403c58 <inv_spi_master_read_register+0x20c>)
  403a9e:	4798      	blx	r3
	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].rx_buffer[0];
  403aa0:	68fb      	ldr	r3, [r7, #12]
  403aa2:	f241 028c 	movw	r2, #4236	; 0x108c
  403aa6:	fb02 f303 	mul.w	r3, r2, r3
  403aaa:	f603 0358 	addw	r3, r3, #2136	; 0x858
  403aae:	4a68      	ldr	r2, [pc, #416]	; (403c50 <inv_spi_master_read_register+0x204>)
  403ab0:	4413      	add	r3, r2
  403ab2:	3304      	adds	r3, #4
  403ab4:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  403ab6:	893b      	ldrh	r3, [r7, #8]
  403ab8:	3301      	adds	r3, #1
  403aba:	617b      	str	r3, [r7, #20]
	pdc_rx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  403abc:	4a64      	ldr	r2, [pc, #400]	; (403c50 <inv_spi_master_read_register+0x204>)
  403abe:	68fb      	ldr	r3, [r7, #12]
  403ac0:	f241 018c 	movw	r1, #4236	; 0x108c
  403ac4:	fb01 f303 	mul.w	r3, r1, r3
  403ac8:	4413      	add	r3, r2
  403aca:	3304      	adds	r3, #4
  403acc:	681b      	ldr	r3, [r3, #0]
  403ace:	f107 0110 	add.w	r1, r7, #16
  403ad2:	2200      	movs	r2, #0
  403ad4:	4618      	mov	r0, r3
  403ad6:	4b61      	ldr	r3, [pc, #388]	; (403c5c <inv_spi_master_read_register+0x210>)
  403ad8:	4798      	blx	r3
	
	sm[spi_num].tx_buffer[0] = (uint8_t) register_addr | 0x80;
  403ada:	7afb      	ldrb	r3, [r7, #11]
  403adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403ae0:	b2d8      	uxtb	r0, r3
  403ae2:	4a5b      	ldr	r2, [pc, #364]	; (403c50 <inv_spi_master_read_register+0x204>)
  403ae4:	68fb      	ldr	r3, [r7, #12]
  403ae6:	f241 018c 	movw	r1, #4236	; 0x108c
  403aea:	fb01 f303 	mul.w	r3, r1, r3
  403aee:	4413      	add	r3, r2
  403af0:	333c      	adds	r3, #60	; 0x3c
  403af2:	4602      	mov	r2, r0
  403af4:	701a      	strb	r2, [r3, #0]
	memset(&sm[spi_num].tx_buffer[1], 0x00, len);
  403af6:	68fb      	ldr	r3, [r7, #12]
  403af8:	f241 028c 	movw	r2, #4236	; 0x108c
  403afc:	fb02 f303 	mul.w	r3, r2, r3
  403b00:	3339      	adds	r3, #57	; 0x39
  403b02:	4a53      	ldr	r2, [pc, #332]	; (403c50 <inv_spi_master_read_register+0x204>)
  403b04:	4413      	add	r3, r2
  403b06:	3304      	adds	r3, #4
  403b08:	893a      	ldrh	r2, [r7, #8]
  403b0a:	2100      	movs	r1, #0
  403b0c:	4618      	mov	r0, r3
  403b0e:	4b54      	ldr	r3, [pc, #336]	; (403c60 <inv_spi_master_read_register+0x214>)
  403b10:	4798      	blx	r3

	pdc_spi_packet.ul_addr = (uint32_t)&sm[spi_num].tx_buffer[0];
  403b12:	68fb      	ldr	r3, [r7, #12]
  403b14:	f241 028c 	movw	r2, #4236	; 0x108c
  403b18:	fb02 f303 	mul.w	r3, r2, r3
  403b1c:	3338      	adds	r3, #56	; 0x38
  403b1e:	4a4c      	ldr	r2, [pc, #304]	; (403c50 <inv_spi_master_read_register+0x204>)
  403b20:	4413      	add	r3, r2
  403b22:	3304      	adds	r3, #4
  403b24:	613b      	str	r3, [r7, #16]
	pdc_spi_packet.ul_size = len + 1;
  403b26:	893b      	ldrh	r3, [r7, #8]
  403b28:	3301      	adds	r3, #1
  403b2a:	617b      	str	r3, [r7, #20]
	pdc_tx_init(sm[spi_num].p_pdc, &pdc_spi_packet, NULL);
  403b2c:	4a48      	ldr	r2, [pc, #288]	; (403c50 <inv_spi_master_read_register+0x204>)
  403b2e:	68fb      	ldr	r3, [r7, #12]
  403b30:	f241 018c 	movw	r1, #4236	; 0x108c
  403b34:	fb01 f303 	mul.w	r3, r1, r3
  403b38:	4413      	add	r3, r2
  403b3a:	3304      	adds	r3, #4
  403b3c:	681b      	ldr	r3, [r3, #0]
  403b3e:	f107 0110 	add.w	r1, r7, #16
  403b42:	2200      	movs	r2, #0
  403b44:	4618      	mov	r0, r3
  403b46:	4b47      	ldr	r3, [pc, #284]	; (403c64 <inv_spi_master_read_register+0x218>)
  403b48:	4798      	blx	r3
	/* Re activate Irq */
	inv_enable_irq();
  403b4a:	4b47      	ldr	r3, [pc, #284]	; (403c68 <inv_spi_master_read_register+0x21c>)
  403b4c:	4798      	blx	r3

	if (sm[spi_num].transfer_done_cb == 0) {
  403b4e:	4a40      	ldr	r2, [pc, #256]	; (403c50 <inv_spi_master_read_register+0x204>)
  403b50:	68fb      	ldr	r3, [r7, #12]
  403b52:	f241 018c 	movw	r1, #4236	; 0x108c
  403b56:	fb01 f303 	mul.w	r3, r1, r3
  403b5a:	4413      	add	r3, r2
  403b5c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  403b60:	681b      	ldr	r3, [r3, #0]
  403b62:	2b00      	cmp	r3, #0
  403b64:	d13c      	bne.n	403be0 <inv_spi_master_read_register+0x194>
		/* Enable the RX and TX PDC transfer requests */
		pdc_enable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  403b66:	4a3a      	ldr	r2, [pc, #232]	; (403c50 <inv_spi_master_read_register+0x204>)
  403b68:	68fb      	ldr	r3, [r7, #12]
  403b6a:	f241 018c 	movw	r1, #4236	; 0x108c
  403b6e:	fb01 f303 	mul.w	r3, r1, r3
  403b72:	4413      	add	r3, r2
  403b74:	3304      	adds	r3, #4
  403b76:	681b      	ldr	r3, [r3, #0]
  403b78:	f240 1101 	movw	r1, #257	; 0x101
  403b7c:	4618      	mov	r0, r3
  403b7e:	4b3b      	ldr	r3, [pc, #236]	; (403c6c <inv_spi_master_read_register+0x220>)
  403b80:	4798      	blx	r3
		
		/* Waiting transfer done*/
		while((spi_read_status(sm[spi_num].p_spi) & SPI_SR_ENDRX) == 0);
  403b82:	bf00      	nop
  403b84:	4a32      	ldr	r2, [pc, #200]	; (403c50 <inv_spi_master_read_register+0x204>)
  403b86:	68fb      	ldr	r3, [r7, #12]
  403b88:	f241 018c 	movw	r1, #4236	; 0x108c
  403b8c:	fb01 f303 	mul.w	r3, r1, r3
  403b90:	4413      	add	r3, r2
  403b92:	681b      	ldr	r3, [r3, #0]
  403b94:	4618      	mov	r0, r3
  403b96:	4b36      	ldr	r3, [pc, #216]	; (403c70 <inv_spi_master_read_register+0x224>)
  403b98:	4798      	blx	r3
  403b9a:	4603      	mov	r3, r0
  403b9c:	f003 0310 	and.w	r3, r3, #16
  403ba0:	2b00      	cmp	r3, #0
  403ba2:	d0ef      	beq.n	403b84 <inv_spi_master_read_register+0x138>
		
		/* Disable the RX and TX PDC transfer requests */
		pdc_disable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTDIS |
  403ba4:	4a2a      	ldr	r2, [pc, #168]	; (403c50 <inv_spi_master_read_register+0x204>)
  403ba6:	68fb      	ldr	r3, [r7, #12]
  403ba8:	f241 018c 	movw	r1, #4236	; 0x108c
  403bac:	fb01 f303 	mul.w	r3, r1, r3
  403bb0:	4413      	add	r3, r2
  403bb2:	3304      	adds	r3, #4
  403bb4:	681b      	ldr	r3, [r3, #0]
  403bb6:	f240 2102 	movw	r1, #514	; 0x202
  403bba:	4618      	mov	r0, r3
  403bbc:	4b2d      	ldr	r3, [pc, #180]	; (403c74 <inv_spi_master_read_register+0x228>)
  403bbe:	4798      	blx	r3
				PERIPH_PTCR_TXTDIS);
				
		memcpy(value, &sm[spi_num].rx_buffer[1], len);
  403bc0:	68fb      	ldr	r3, [r7, #12]
  403bc2:	f241 028c 	movw	r2, #4236	; 0x108c
  403bc6:	fb02 f303 	mul.w	r3, r2, r3
  403bca:	f603 0359 	addw	r3, r3, #2137	; 0x859
  403bce:	4a20      	ldr	r2, [pc, #128]	; (403c50 <inv_spi_master_read_register+0x204>)
  403bd0:	4413      	add	r3, r2
  403bd2:	3304      	adds	r3, #4
  403bd4:	893a      	ldrh	r2, [r7, #8]
  403bd6:	4619      	mov	r1, r3
  403bd8:	6878      	ldr	r0, [r7, #4]
  403bda:	4b27      	ldr	r3, [pc, #156]	; (403c78 <inv_spi_master_read_register+0x22c>)
  403bdc:	4798      	blx	r3
  403bde:	e031      	b.n	403c44 <inv_spi_master_read_register+0x1f8>
	} else {
		sm[spi_num].rx_dest_addr = value;
  403be0:	4a1b      	ldr	r2, [pc, #108]	; (403c50 <inv_spi_master_read_register+0x204>)
  403be2:	68fb      	ldr	r3, [r7, #12]
  403be4:	f241 018c 	movw	r1, #4236	; 0x108c
  403be8:	fb01 f303 	mul.w	r3, r1, r3
  403bec:	4413      	add	r3, r2
  403bee:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  403bf2:	3304      	adds	r3, #4
  403bf4:	687a      	ldr	r2, [r7, #4]
  403bf6:	601a      	str	r2, [r3, #0]
		sm[spi_num].rx_len = len;
  403bf8:	4a15      	ldr	r2, [pc, #84]	; (403c50 <inv_spi_master_read_register+0x204>)
  403bfa:	68fb      	ldr	r3, [r7, #12]
  403bfc:	f241 018c 	movw	r1, #4236	; 0x108c
  403c00:	fb01 f303 	mul.w	r3, r1, r3
  403c04:	4413      	add	r3, r2
  403c06:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
  403c0a:	3308      	adds	r3, #8
  403c0c:	893a      	ldrh	r2, [r7, #8]
  403c0e:	801a      	strh	r2, [r3, #0]

		/* Transfer done handler is in ISR */
		spi_enable_interrupt(sm[spi_num].p_spi, SPI_IER_RXBUFF) ;
  403c10:	4a0f      	ldr	r2, [pc, #60]	; (403c50 <inv_spi_master_read_register+0x204>)
  403c12:	68fb      	ldr	r3, [r7, #12]
  403c14:	f241 018c 	movw	r1, #4236	; 0x108c
  403c18:	fb01 f303 	mul.w	r3, r1, r3
  403c1c:	4413      	add	r3, r2
  403c1e:	681b      	ldr	r3, [r3, #0]
  403c20:	2140      	movs	r1, #64	; 0x40
  403c22:	4618      	mov	r0, r3
  403c24:	4b15      	ldr	r3, [pc, #84]	; (403c7c <inv_spi_master_read_register+0x230>)
  403c26:	4798      	blx	r3

		/* Enable the RX and TX PDC transfer requests */
		pdc_enable_transfer(sm[spi_num].p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  403c28:	4a09      	ldr	r2, [pc, #36]	; (403c50 <inv_spi_master_read_register+0x204>)
  403c2a:	68fb      	ldr	r3, [r7, #12]
  403c2c:	f241 018c 	movw	r1, #4236	; 0x108c
  403c30:	fb01 f303 	mul.w	r3, r1, r3
  403c34:	4413      	add	r3, r2
  403c36:	3304      	adds	r3, #4
  403c38:	681b      	ldr	r3, [r3, #0]
  403c3a:	f240 1101 	movw	r1, #257	; 0x101
  403c3e:	4618      	mov	r0, r3
  403c40:	4b0a      	ldr	r3, [pc, #40]	; (403c6c <inv_spi_master_read_register+0x220>)
  403c42:	4798      	blx	r3
	}

	return 0;
  403c44:	2300      	movs	r3, #0
}
  403c46:	4618      	mov	r0, r3
  403c48:	3718      	adds	r7, #24
  403c4a:	46bd      	mov	sp, r7
  403c4c:	bd80      	pop	{r7, pc}
  403c4e:	bf00      	nop
  403c50:	200001ec 	.word	0x200001ec
  403c54:	00405dab 	.word	0x00405dab
  403c58:	00402911 	.word	0x00402911
  403c5c:	00405d67 	.word	0x00405d67
  403c60:	0040885d 	.word	0x0040885d
  403c64:	00405d23 	.word	0x00405d23
  403c68:	00402939 	.word	0x00402939
  403c6c:	00405dcb 	.word	0x00405dcb
  403c70:	0040317b 	.word	0x0040317b
  403c74:	00405ded 	.word	0x00405ded
  403c78:	00408661 	.word	0x00408661
  403c7c:	00403193 	.word	0x00403193

00403c80 <FLEXCOM5_Handler>:
	}
}


void FLEXCOM5_Handler(void)
{
  403c80:	b580      	push	{r7, lr}
  403c82:	af00      	add	r7, sp, #0
#ifdef INV_SENSOR_DB
	spi_master_irq_handler(INV_SPI_DB);
#else
	spi_master_irq_handler(INV_SPI_ONBOARD);
  403c84:	2001      	movs	r0, #1
  403c86:	4b02      	ldr	r3, [pc, #8]	; (403c90 <FLEXCOM5_Handler+0x10>)
  403c88:	4798      	blx	r3
#endif
}
  403c8a:	bf00      	nop
  403c8c:	bd80      	pop	{r7, pc}
  403c8e:	bf00      	nop
  403c90:	004033f1 	.word	0x004033f1

00403c94 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  403c94:	b580      	push	{r7, lr}
  403c96:	af00      	add	r7, sp, #0
	if(sSystick_irq_handler_cb != 0)
  403c98:	4b04      	ldr	r3, [pc, #16]	; (403cac <SysTick_Handler+0x18>)
  403c9a:	681b      	ldr	r3, [r3, #0]
  403c9c:	2b00      	cmp	r3, #0
  403c9e:	d002      	beq.n	403ca6 <SysTick_Handler+0x12>
		sSystick_irq_handler_cb();
  403ca0:	4b02      	ldr	r3, [pc, #8]	; (403cac <SysTick_Handler+0x18>)
  403ca2:	681b      	ldr	r3, [r3, #0]
  403ca4:	4798      	blx	r3
}
  403ca6:	bf00      	nop
  403ca8:	bd80      	pop	{r7, pc}
  403caa:	bf00      	nop
  403cac:	20003844 	.word	0x20003844

00403cb0 <NVIC_EnableIRQ>:
{
  403cb0:	b480      	push	{r7}
  403cb2:	b083      	sub	sp, #12
  403cb4:	af00      	add	r7, sp, #0
  403cb6:	4603      	mov	r3, r0
  403cb8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403cba:	4909      	ldr	r1, [pc, #36]	; (403ce0 <NVIC_EnableIRQ+0x30>)
  403cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403cc0:	095b      	lsrs	r3, r3, #5
  403cc2:	79fa      	ldrb	r2, [r7, #7]
  403cc4:	f002 021f 	and.w	r2, r2, #31
  403cc8:	2001      	movs	r0, #1
  403cca:	fa00 f202 	lsl.w	r2, r0, r2
  403cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403cd2:	bf00      	nop
  403cd4:	370c      	adds	r7, #12
  403cd6:	46bd      	mov	sp, r7
  403cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cdc:	4770      	bx	lr
  403cde:	bf00      	nop
  403ce0:	e000e100 	.word	0xe000e100

00403ce4 <NVIC_DisableIRQ>:
{
  403ce4:	b480      	push	{r7}
  403ce6:	b083      	sub	sp, #12
  403ce8:	af00      	add	r7, sp, #0
  403cea:	4603      	mov	r3, r0
  403cec:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403cee:	4909      	ldr	r1, [pc, #36]	; (403d14 <NVIC_DisableIRQ+0x30>)
  403cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403cf4:	095b      	lsrs	r3, r3, #5
  403cf6:	79fa      	ldrb	r2, [r7, #7]
  403cf8:	f002 021f 	and.w	r2, r2, #31
  403cfc:	2001      	movs	r0, #1
  403cfe:	fa00 f202 	lsl.w	r2, r0, r2
  403d02:	3320      	adds	r3, #32
  403d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403d08:	bf00      	nop
  403d0a:	370c      	adds	r7, #12
  403d0c:	46bd      	mov	sp, r7
  403d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d12:	4770      	bx	lr
  403d14:	e000e100 	.word	0xe000e100

00403d18 <NVIC_ClearPendingIRQ>:
{
  403d18:	b480      	push	{r7}
  403d1a:	b083      	sub	sp, #12
  403d1c:	af00      	add	r7, sp, #0
  403d1e:	4603      	mov	r3, r0
  403d20:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403d22:	4909      	ldr	r1, [pc, #36]	; (403d48 <NVIC_ClearPendingIRQ+0x30>)
  403d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d28:	095b      	lsrs	r3, r3, #5
  403d2a:	79fa      	ldrb	r2, [r7, #7]
  403d2c:	f002 021f 	and.w	r2, r2, #31
  403d30:	2001      	movs	r0, #1
  403d32:	fa00 f202 	lsl.w	r2, r0, r2
  403d36:	3360      	adds	r3, #96	; 0x60
  403d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403d3c:	bf00      	nop
  403d3e:	370c      	adds	r7, #12
  403d40:	46bd      	mov	sp, r7
  403d42:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d46:	4770      	bx	lr
  403d48:	e000e100 	.word	0xe000e100

00403d4c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  403d4c:	b480      	push	{r7}
  403d4e:	b083      	sub	sp, #12
  403d50:	af00      	add	r7, sp, #0
  403d52:	4603      	mov	r3, r0
  403d54:	6039      	str	r1, [r7, #0]
  403d56:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  403d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d5c:	2b00      	cmp	r3, #0
  403d5e:	da0b      	bge.n	403d78 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403d60:	490d      	ldr	r1, [pc, #52]	; (403d98 <NVIC_SetPriority+0x4c>)
  403d62:	79fb      	ldrb	r3, [r7, #7]
  403d64:	f003 030f 	and.w	r3, r3, #15
  403d68:	3b04      	subs	r3, #4
  403d6a:	683a      	ldr	r2, [r7, #0]
  403d6c:	b2d2      	uxtb	r2, r2
  403d6e:	0112      	lsls	r2, r2, #4
  403d70:	b2d2      	uxtb	r2, r2
  403d72:	440b      	add	r3, r1
  403d74:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
  403d76:	e009      	b.n	403d8c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403d78:	4908      	ldr	r1, [pc, #32]	; (403d9c <NVIC_SetPriority+0x50>)
  403d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d7e:	683a      	ldr	r2, [r7, #0]
  403d80:	b2d2      	uxtb	r2, r2
  403d82:	0112      	lsls	r2, r2, #4
  403d84:	b2d2      	uxtb	r2, r2
  403d86:	440b      	add	r3, r1
  403d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  403d8c:	bf00      	nop
  403d8e:	370c      	adds	r7, #12
  403d90:	46bd      	mov	sp, r7
  403d92:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d96:	4770      	bx	lr
  403d98:	e000ed00 	.word	0xe000ed00
  403d9c:	e000e100 	.word	0xe000e100

00403da0 <osc_get_rate>:
{
  403da0:	b480      	push	{r7}
  403da2:	b083      	sub	sp, #12
  403da4:	af00      	add	r7, sp, #0
  403da6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403da8:	687b      	ldr	r3, [r7, #4]
  403daa:	2b07      	cmp	r3, #7
  403dac:	d825      	bhi.n	403dfa <osc_get_rate+0x5a>
  403dae:	a201      	add	r2, pc, #4	; (adr r2, 403db4 <osc_get_rate+0x14>)
  403db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403db4:	00403dd5 	.word	0x00403dd5
  403db8:	00403ddb 	.word	0x00403ddb
  403dbc:	00403de1 	.word	0x00403de1
  403dc0:	00403de7 	.word	0x00403de7
  403dc4:	00403deb 	.word	0x00403deb
  403dc8:	00403def 	.word	0x00403def
  403dcc:	00403df3 	.word	0x00403df3
  403dd0:	00403df7 	.word	0x00403df7
		return OSC_SLCK_32K_RC_HZ;
  403dd4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403dd8:	e010      	b.n	403dfc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  403dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403dde:	e00d      	b.n	403dfc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  403de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403de4:	e00a      	b.n	403dfc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  403de6:	4b08      	ldr	r3, [pc, #32]	; (403e08 <osc_get_rate+0x68>)
  403de8:	e008      	b.n	403dfc <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  403dea:	4b08      	ldr	r3, [pc, #32]	; (403e0c <osc_get_rate+0x6c>)
  403dec:	e006      	b.n	403dfc <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  403dee:	4b08      	ldr	r3, [pc, #32]	; (403e10 <osc_get_rate+0x70>)
  403df0:	e004      	b.n	403dfc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  403df2:	2300      	movs	r3, #0
  403df4:	e002      	b.n	403dfc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  403df6:	2300      	movs	r3, #0
  403df8:	e000      	b.n	403dfc <osc_get_rate+0x5c>
	return 0;
  403dfa:	2300      	movs	r3, #0
}
  403dfc:	4618      	mov	r0, r3
  403dfe:	370c      	adds	r7, #12
  403e00:	46bd      	mov	sp, r7
  403e02:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e06:	4770      	bx	lr
  403e08:	007a1200 	.word	0x007a1200
  403e0c:	00f42400 	.word	0x00f42400
  403e10:	016e3600 	.word	0x016e3600

00403e14 <sysclk_get_main_hz>:
{
  403e14:	b580      	push	{r7, lr}
  403e16:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  403e18:	2001      	movs	r0, #1
  403e1a:	4b04      	ldr	r3, [pc, #16]	; (403e2c <sysclk_get_main_hz+0x18>)
  403e1c:	4798      	blx	r3
  403e1e:	4602      	mov	r2, r0
  403e20:	f640 634e 	movw	r3, #3662	; 0xe4e
  403e24:	fb03 f302 	mul.w	r3, r3, r2
}
  403e28:	4618      	mov	r0, r3
  403e2a:	bd80      	pop	{r7, pc}
  403e2c:	00403da1 	.word	0x00403da1

00403e30 <sysclk_get_peripheral_hz>:
{
  403e30:	b580      	push	{r7, lr}
  403e32:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403e34:	4b02      	ldr	r3, [pc, #8]	; (403e40 <sysclk_get_peripheral_hz+0x10>)
  403e36:	4798      	blx	r3
  403e38:	4603      	mov	r3, r0
}
  403e3a:	4618      	mov	r0, r3
  403e3c:	bd80      	pop	{r7, pc}
  403e3e:	bf00      	nop
  403e40:	00403e15 	.word	0x00403e15

00403e44 <sysclk_get_peripheral_bus_hz>:
{
  403e44:	b580      	push	{r7, lr}
  403e46:	b082      	sub	sp, #8
  403e48:	af00      	add	r7, sp, #0
  403e4a:	6078      	str	r0, [r7, #4]
	return sysclk_get_peripheral_hz();
  403e4c:	4b03      	ldr	r3, [pc, #12]	; (403e5c <sysclk_get_peripheral_bus_hz+0x18>)
  403e4e:	4798      	blx	r3
  403e50:	4603      	mov	r3, r0
}
  403e52:	4618      	mov	r0, r3
  403e54:	3708      	adds	r7, #8
  403e56:	46bd      	mov	sp, r7
  403e58:	bd80      	pop	{r7, pc}
  403e5a:	bf00      	nop
  403e5c:	00403e31 	.word	0x00403e31

00403e60 <sysclk_enable_peripheral_clock>:
{
  403e60:	b580      	push	{r7, lr}
  403e62:	b082      	sub	sp, #8
  403e64:	af00      	add	r7, sp, #0
  403e66:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403e68:	6878      	ldr	r0, [r7, #4]
  403e6a:	4b03      	ldr	r3, [pc, #12]	; (403e78 <sysclk_enable_peripheral_clock+0x18>)
  403e6c:	4798      	blx	r3
}
  403e6e:	bf00      	nop
  403e70:	3708      	adds	r7, #8
  403e72:	46bd      	mov	sp, r7
  403e74:	bd80      	pop	{r7, pc}
  403e76:	bf00      	nop
  403e78:	004066e9 	.word	0x004066e9

00403e7c <fusion_16bit_into_32bit>:
 * The two timers have to be read lsb then msb. Reading them in another order might prevent this function from 
 * detecting an overflow that took place between two timer reads.
 */
static uint32_t fusion_16bit_into_32bit(uint16_t lsb_1, uint16_t msb_1, uint16_t lsb_2,
		uint16_t msb_2)
{
  403e7c:	b490      	push	{r4, r7}
  403e7e:	b084      	sub	sp, #16
  403e80:	af00      	add	r7, sp, #0
  403e82:	4604      	mov	r4, r0
  403e84:	4608      	mov	r0, r1
  403e86:	4611      	mov	r1, r2
  403e88:	461a      	mov	r2, r3
  403e8a:	4623      	mov	r3, r4
  403e8c:	80fb      	strh	r3, [r7, #6]
  403e8e:	4603      	mov	r3, r0
  403e90:	80bb      	strh	r3, [r7, #4]
  403e92:	460b      	mov	r3, r1
  403e94:	807b      	strh	r3, [r7, #2]
  403e96:	4613      	mov	r3, r2
  403e98:	803b      	strh	r3, [r7, #0]
	uint32_t ret_val;
	
	/* Detect if the first counter rolled-over between the moments when the 
	* two counters were read
	*/
	if((lsb_2 < lsb_1) && (msb_2 == msb_1))
  403e9a:	887a      	ldrh	r2, [r7, #2]
  403e9c:	88fb      	ldrh	r3, [r7, #6]
  403e9e:	429a      	cmp	r2, r3
  403ea0:	d206      	bcs.n	403eb0 <fusion_16bit_into_32bit+0x34>
  403ea2:	883a      	ldrh	r2, [r7, #0]
  403ea4:	88bb      	ldrh	r3, [r7, #4]
  403ea6:	429a      	cmp	r2, r3
  403ea8:	d102      	bne.n	403eb0 <fusion_16bit_into_32bit+0x34>
		msb_1--;
  403eaa:	88bb      	ldrh	r3, [r7, #4]
  403eac:	3b01      	subs	r3, #1
  403eae:	80bb      	strh	r3, [r7, #4]
	
	ret_val  = (uint32_t)lsb_1;
  403eb0:	88fb      	ldrh	r3, [r7, #6]
  403eb2:	60fb      	str	r3, [r7, #12]
	ret_val |= (uint32_t)msb_1 << 16;
  403eb4:	88bb      	ldrh	r3, [r7, #4]
  403eb6:	041b      	lsls	r3, r3, #16
  403eb8:	68fa      	ldr	r2, [r7, #12]
  403eba:	4313      	orrs	r3, r2
  403ebc:	60fb      	str	r3, [r7, #12]
	
	return ret_val;
  403ebe:	68fb      	ldr	r3, [r7, #12]
}
  403ec0:	4618      	mov	r0, r3
  403ec2:	3710      	adds	r7, #16
  403ec4:	46bd      	mov	sp, r7
  403ec6:	bc90      	pop	{r4, r7}
  403ec8:	4770      	bx	lr
	...

00403ecc <inv_timer_enable>:

void inv_timer_enable(unsigned timer_num)
{
  403ecc:	b580      	push	{r7, lr}
  403ece:	b082      	sub	sp, #8
  403ed0:	af00      	add	r7, sp, #0
  403ed2:	6078      	str	r0, [r7, #4]
	if(timer_num >= INV_TIMER_MAX)
  403ed4:	687b      	ldr	r3, [r7, #4]
  403ed6:	2b04      	cmp	r3, #4
  403ed8:	d82d      	bhi.n	403f36 <inv_timer_enable+0x6a>
		return;
	
	/* If timer is not already running, start it */
	if((tc_get_status(tm[timer_num].timer_periph, tm[timer_num].timer_channel) & TC_SR_CLKSTA) == 0)
  403eda:	4919      	ldr	r1, [pc, #100]	; (403f40 <inv_timer_enable+0x74>)
  403edc:	687a      	ldr	r2, [r7, #4]
  403ede:	4613      	mov	r3, r2
  403ee0:	009b      	lsls	r3, r3, #2
  403ee2:	4413      	add	r3, r2
  403ee4:	00db      	lsls	r3, r3, #3
  403ee6:	440b      	add	r3, r1
  403ee8:	6818      	ldr	r0, [r3, #0]
  403eea:	4915      	ldr	r1, [pc, #84]	; (403f40 <inv_timer_enable+0x74>)
  403eec:	687a      	ldr	r2, [r7, #4]
  403eee:	4613      	mov	r3, r2
  403ef0:	009b      	lsls	r3, r3, #2
  403ef2:	4413      	add	r3, r2
  403ef4:	00db      	lsls	r3, r3, #3
  403ef6:	440b      	add	r3, r1
  403ef8:	3304      	adds	r3, #4
  403efa:	681b      	ldr	r3, [r3, #0]
  403efc:	4619      	mov	r1, r3
  403efe:	4b11      	ldr	r3, [pc, #68]	; (403f44 <inv_timer_enable+0x78>)
  403f00:	4798      	blx	r3
  403f02:	4603      	mov	r3, r0
  403f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403f08:	2b00      	cmp	r3, #0
  403f0a:	d115      	bne.n	403f38 <inv_timer_enable+0x6c>
		tc_start(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  403f0c:	490c      	ldr	r1, [pc, #48]	; (403f40 <inv_timer_enable+0x74>)
  403f0e:	687a      	ldr	r2, [r7, #4]
  403f10:	4613      	mov	r3, r2
  403f12:	009b      	lsls	r3, r3, #2
  403f14:	4413      	add	r3, r2
  403f16:	00db      	lsls	r3, r3, #3
  403f18:	440b      	add	r3, r1
  403f1a:	6818      	ldr	r0, [r3, #0]
  403f1c:	4908      	ldr	r1, [pc, #32]	; (403f40 <inv_timer_enable+0x74>)
  403f1e:	687a      	ldr	r2, [r7, #4]
  403f20:	4613      	mov	r3, r2
  403f22:	009b      	lsls	r3, r3, #2
  403f24:	4413      	add	r3, r2
  403f26:	00db      	lsls	r3, r3, #3
  403f28:	440b      	add	r3, r1
  403f2a:	3304      	adds	r3, #4
  403f2c:	681b      	ldr	r3, [r3, #0]
  403f2e:	4619      	mov	r1, r3
  403f30:	4b05      	ldr	r3, [pc, #20]	; (403f48 <inv_timer_enable+0x7c>)
  403f32:	4798      	blx	r3
  403f34:	e000      	b.n	403f38 <inv_timer_enable+0x6c>
		return;
  403f36:	bf00      	nop
}
  403f38:	3708      	adds	r7, #8
  403f3a:	46bd      	mov	sp, r7
  403f3c:	bd80      	pop	{r7, pc}
  403f3e:	bf00      	nop
  403f40:	20002304 	.word	0x20002304
  403f44:	00406c6b 	.word	0x00406c6b
  403f48:	00406b91 	.word	0x00406b91

00403f4c <inv_timer_configure_timebase>:

int inv_timer_configure_timebase(uint32_t frequency)
{
  403f4c:	b590      	push	{r4, r7, lr}
  403f4e:	b085      	sub	sp, #20
  403f50:	af00      	add	r7, sp, #0
  403f52:	6078      	str	r0, [r7, #4]
	/* 
	 * Compute the prescaler value for the requested frequency,
	 * knowing that TC0 and TC1 are fed by the same clock.
	 */
	timer_prescaler = DIV_ROUND_UINT(sysclk_get_peripheral_bus_hz(TC0), frequency) - 1;
  403f54:	4870      	ldr	r0, [pc, #448]	; (404118 <inv_timer_configure_timebase+0x1cc>)
  403f56:	4b71      	ldr	r3, [pc, #452]	; (40411c <inv_timer_configure_timebase+0x1d0>)
  403f58:	4798      	blx	r3
  403f5a:	4602      	mov	r2, r0
  403f5c:	687b      	ldr	r3, [r7, #4]
  403f5e:	085b      	lsrs	r3, r3, #1
  403f60:	441a      	add	r2, r3
  403f62:	687b      	ldr	r3, [r7, #4]
  403f64:	fbb2 f3f3 	udiv	r3, r2, r3
  403f68:	3b01      	subs	r3, #1
  403f6a:	4a6d      	ldr	r2, [pc, #436]	; (404120 <inv_timer_configure_timebase+0x1d4>)
  403f6c:	6013      	str	r3, [r2, #0]
	if(timer_prescaler > UINT8_MAX)
  403f6e:	4b6c      	ldr	r3, [pc, #432]	; (404120 <inv_timer_configure_timebase+0x1d4>)
  403f70:	681b      	ldr	r3, [r3, #0]
  403f72:	2bff      	cmp	r3, #255	; 0xff
  403f74:	d902      	bls.n	403f7c <inv_timer_configure_timebase+0x30>
		return -1;
  403f76:	f04f 33ff 	mov.w	r3, #4294967295
  403f7a:	e0c8      	b.n	40410e <inv_timer_configure_timebase+0x1c2>
	
	/* Configure the PMC to enable the TC modules. */
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  403f7c:	2300      	movs	r3, #0
  403f7e:	60fb      	str	r3, [r7, #12]
  403f80:	e00e      	b.n	403fa0 <inv_timer_configure_timebase+0x54>
		sysclk_enable_peripheral_clock(tm[i].timer_id);
  403f82:	4968      	ldr	r1, [pc, #416]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  403f84:	68fa      	ldr	r2, [r7, #12]
  403f86:	4613      	mov	r3, r2
  403f88:	009b      	lsls	r3, r3, #2
  403f8a:	4413      	add	r3, r2
  403f8c:	00db      	lsls	r3, r3, #3
  403f8e:	440b      	add	r3, r1
  403f90:	3308      	adds	r3, #8
  403f92:	681b      	ldr	r3, [r3, #0]
  403f94:	4618      	mov	r0, r3
  403f96:	4b64      	ldr	r3, [pc, #400]	; (404128 <inv_timer_configure_timebase+0x1dc>)
  403f98:	4798      	blx	r3
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  403f9a:	68fb      	ldr	r3, [r7, #12]
  403f9c:	3301      	adds	r3, #1
  403f9e:	60fb      	str	r3, [r7, #12]
  403fa0:	68fb      	ldr	r3, [r7, #12]
  403fa2:	2b05      	cmp	r3, #5
  403fa4:	d9ed      	bls.n	403f82 <inv_timer_configure_timebase+0x36>
	}
	/* Enable PCK output and configure prescaler */
	pmc_disable_pck(PMC_PCK_3);
  403fa6:	2003      	movs	r0, #3
  403fa8:	4b60      	ldr	r3, [pc, #384]	; (40412c <inv_timer_configure_timebase+0x1e0>)
  403faa:	4798      	blx	r3
	if(pmc_switch_pck_to_mck(PMC_PCK_3, PMC_PCK_PRES(timer_prescaler)))
  403fac:	4b5c      	ldr	r3, [pc, #368]	; (404120 <inv_timer_configure_timebase+0x1d4>)
  403fae:	681b      	ldr	r3, [r3, #0]
  403fb0:	011b      	lsls	r3, r3, #4
  403fb2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
  403fb6:	4619      	mov	r1, r3
  403fb8:	2003      	movs	r0, #3
  403fba:	4b5d      	ldr	r3, [pc, #372]	; (404130 <inv_timer_configure_timebase+0x1e4>)
  403fbc:	4798      	blx	r3
  403fbe:	4603      	mov	r3, r0
  403fc0:	2b00      	cmp	r3, #0
  403fc2:	d002      	beq.n	403fca <inv_timer_configure_timebase+0x7e>
		return -1;
  403fc4:	f04f 33ff 	mov.w	r3, #4294967295
  403fc8:	e0a1      	b.n	40410e <inv_timer_configure_timebase+0x1c2>
	pmc_enable_pck(PMC_PCK_3);
  403fca:	2003      	movs	r0, #3
  403fcc:	4b59      	ldr	r3, [pc, #356]	; (404134 <inv_timer_configure_timebase+0x1e8>)
  403fce:	4798      	blx	r3
	
	/* Init all channels with PCK3 as clock source */
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  403fd0:	2300      	movs	r3, #0
  403fd2:	60bb      	str	r3, [r7, #8]
  403fd4:	e096      	b.n	404104 <inv_timer_configure_timebase+0x1b8>
		tc_init(tm[i].timer_periph, tm[i].timer_channel, tm[i].timer_mode);
  403fd6:	4953      	ldr	r1, [pc, #332]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  403fd8:	68ba      	ldr	r2, [r7, #8]
  403fda:	4613      	mov	r3, r2
  403fdc:	009b      	lsls	r3, r3, #2
  403fde:	4413      	add	r3, r2
  403fe0:	00db      	lsls	r3, r3, #3
  403fe2:	440b      	add	r3, r1
  403fe4:	6818      	ldr	r0, [r3, #0]
  403fe6:	494f      	ldr	r1, [pc, #316]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  403fe8:	68ba      	ldr	r2, [r7, #8]
  403fea:	4613      	mov	r3, r2
  403fec:	009b      	lsls	r3, r3, #2
  403fee:	4413      	add	r3, r2
  403ff0:	00db      	lsls	r3, r3, #3
  403ff2:	440b      	add	r3, r1
  403ff4:	3304      	adds	r3, #4
  403ff6:	681c      	ldr	r4, [r3, #0]
  403ff8:	494a      	ldr	r1, [pc, #296]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  403ffa:	68ba      	ldr	r2, [r7, #8]
  403ffc:	4613      	mov	r3, r2
  403ffe:	009b      	lsls	r3, r3, #2
  404000:	4413      	add	r3, r2
  404002:	00db      	lsls	r3, r3, #3
  404004:	440b      	add	r3, r1
  404006:	330c      	adds	r3, #12
  404008:	681b      	ldr	r3, [r3, #0]
  40400a:	461a      	mov	r2, r3
  40400c:	4621      	mov	r1, r4
  40400e:	4b4a      	ldr	r3, [pc, #296]	; (404138 <inv_timer_configure_timebase+0x1ec>)
  404010:	4798      	blx	r3
		
		tc_write_ra(tm[i].timer_periph, tm[i].timer_channel, tm[i].ra);
  404012:	4944      	ldr	r1, [pc, #272]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  404014:	68ba      	ldr	r2, [r7, #8]
  404016:	4613      	mov	r3, r2
  404018:	009b      	lsls	r3, r3, #2
  40401a:	4413      	add	r3, r2
  40401c:	00db      	lsls	r3, r3, #3
  40401e:	440b      	add	r3, r1
  404020:	6818      	ldr	r0, [r3, #0]
  404022:	4940      	ldr	r1, [pc, #256]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  404024:	68ba      	ldr	r2, [r7, #8]
  404026:	4613      	mov	r3, r2
  404028:	009b      	lsls	r3, r3, #2
  40402a:	4413      	add	r3, r2
  40402c:	00db      	lsls	r3, r3, #3
  40402e:	440b      	add	r3, r1
  404030:	3304      	adds	r3, #4
  404032:	681c      	ldr	r4, [r3, #0]
  404034:	493b      	ldr	r1, [pc, #236]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  404036:	68ba      	ldr	r2, [r7, #8]
  404038:	4613      	mov	r3, r2
  40403a:	009b      	lsls	r3, r3, #2
  40403c:	4413      	add	r3, r2
  40403e:	00db      	lsls	r3, r3, #3
  404040:	440b      	add	r3, r1
  404042:	3310      	adds	r3, #16
  404044:	681b      	ldr	r3, [r3, #0]
  404046:	461a      	mov	r2, r3
  404048:	4621      	mov	r1, r4
  40404a:	4b3c      	ldr	r3, [pc, #240]	; (40413c <inv_timer_configure_timebase+0x1f0>)
  40404c:	4798      	blx	r3
		
		if(i == INV_TIMER_MAX) {
  40404e:	68bb      	ldr	r3, [r7, #8]
  404050:	2b05      	cmp	r3, #5
  404052:	d11f      	bne.n	404094 <inv_timer_configure_timebase+0x148>
			tc_set_block_mode(tm[i].timer_periph, TC_BMR_TC0XC0S_TIOA1);
  404054:	4933      	ldr	r1, [pc, #204]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  404056:	68ba      	ldr	r2, [r7, #8]
  404058:	4613      	mov	r3, r2
  40405a:	009b      	lsls	r3, r3, #2
  40405c:	4413      	add	r3, r2
  40405e:	00db      	lsls	r3, r3, #3
  404060:	440b      	add	r3, r1
  404062:	681b      	ldr	r3, [r3, #0]
  404064:	2102      	movs	r1, #2
  404066:	4618      	mov	r0, r3
  404068:	4b35      	ldr	r3, [pc, #212]	; (404140 <inv_timer_configure_timebase+0x1f4>)
  40406a:	4798      	blx	r3
			/* Can be started since it will not count until TC0 channel 1 will be started */
			tc_start(tm[i].timer_periph, tm[i].timer_channel);
  40406c:	492d      	ldr	r1, [pc, #180]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  40406e:	68ba      	ldr	r2, [r7, #8]
  404070:	4613      	mov	r3, r2
  404072:	009b      	lsls	r3, r3, #2
  404074:	4413      	add	r3, r2
  404076:	00db      	lsls	r3, r3, #3
  404078:	440b      	add	r3, r1
  40407a:	6818      	ldr	r0, [r3, #0]
  40407c:	4929      	ldr	r1, [pc, #164]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  40407e:	68ba      	ldr	r2, [r7, #8]
  404080:	4613      	mov	r3, r2
  404082:	009b      	lsls	r3, r3, #2
  404084:	4413      	add	r3, r2
  404086:	00db      	lsls	r3, r3, #3
  404088:	440b      	add	r3, r1
  40408a:	3304      	adds	r3, #4
  40408c:	681b      	ldr	r3, [r3, #0]
  40408e:	4619      	mov	r1, r3
  404090:	4b2c      	ldr	r3, [pc, #176]	; (404144 <inv_timer_configure_timebase+0x1f8>)
  404092:	4798      	blx	r3
		}
		
		NVIC_DisableIRQ(tm[i].irq);
  404094:	4923      	ldr	r1, [pc, #140]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  404096:	68ba      	ldr	r2, [r7, #8]
  404098:	4613      	mov	r3, r2
  40409a:	009b      	lsls	r3, r3, #2
  40409c:	4413      	add	r3, r2
  40409e:	00db      	lsls	r3, r3, #3
  4040a0:	440b      	add	r3, r1
  4040a2:	3320      	adds	r3, #32
  4040a4:	f993 3000 	ldrsb.w	r3, [r3]
  4040a8:	4618      	mov	r0, r3
  4040aa:	4b27      	ldr	r3, [pc, #156]	; (404148 <inv_timer_configure_timebase+0x1fc>)
  4040ac:	4798      	blx	r3
		NVIC_ClearPendingIRQ(tm[i].irq);
  4040ae:	491d      	ldr	r1, [pc, #116]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  4040b0:	68ba      	ldr	r2, [r7, #8]
  4040b2:	4613      	mov	r3, r2
  4040b4:	009b      	lsls	r3, r3, #2
  4040b6:	4413      	add	r3, r2
  4040b8:	00db      	lsls	r3, r3, #3
  4040ba:	440b      	add	r3, r1
  4040bc:	3320      	adds	r3, #32
  4040be:	f993 3000 	ldrsb.w	r3, [r3]
  4040c2:	4618      	mov	r0, r3
  4040c4:	4b21      	ldr	r3, [pc, #132]	; (40414c <inv_timer_configure_timebase+0x200>)
  4040c6:	4798      	blx	r3
		NVIC_SetPriority(tm[i].irq, 0); // TODO: make the priority configurable
  4040c8:	4916      	ldr	r1, [pc, #88]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  4040ca:	68ba      	ldr	r2, [r7, #8]
  4040cc:	4613      	mov	r3, r2
  4040ce:	009b      	lsls	r3, r3, #2
  4040d0:	4413      	add	r3, r2
  4040d2:	00db      	lsls	r3, r3, #3
  4040d4:	440b      	add	r3, r1
  4040d6:	3320      	adds	r3, #32
  4040d8:	f993 3000 	ldrsb.w	r3, [r3]
  4040dc:	2100      	movs	r1, #0
  4040de:	4618      	mov	r0, r3
  4040e0:	4b1b      	ldr	r3, [pc, #108]	; (404150 <inv_timer_configure_timebase+0x204>)
  4040e2:	4798      	blx	r3
		NVIC_EnableIRQ(tm[i].irq);
  4040e4:	490f      	ldr	r1, [pc, #60]	; (404124 <inv_timer_configure_timebase+0x1d8>)
  4040e6:	68ba      	ldr	r2, [r7, #8]
  4040e8:	4613      	mov	r3, r2
  4040ea:	009b      	lsls	r3, r3, #2
  4040ec:	4413      	add	r3, r2
  4040ee:	00db      	lsls	r3, r3, #3
  4040f0:	440b      	add	r3, r1
  4040f2:	3320      	adds	r3, #32
  4040f4:	f993 3000 	ldrsb.w	r3, [r3]
  4040f8:	4618      	mov	r0, r3
  4040fa:	4b16      	ldr	r3, [pc, #88]	; (404154 <inv_timer_configure_timebase+0x208>)
  4040fc:	4798      	blx	r3
	for(uint32_t i=0; i< (uint32_t)(sizeof(tm)/sizeof(tm[0])); i++) {
  4040fe:	68bb      	ldr	r3, [r7, #8]
  404100:	3301      	adds	r3, #1
  404102:	60bb      	str	r3, [r7, #8]
  404104:	68bb      	ldr	r3, [r7, #8]
  404106:	2b05      	cmp	r3, #5
  404108:	f67f af65 	bls.w	403fd6 <inv_timer_configure_timebase+0x8a>
	}

	return 0;
  40410c:	2300      	movs	r3, #0
}
  40410e:	4618      	mov	r0, r3
  404110:	3714      	adds	r7, #20
  404112:	46bd      	mov	sp, r7
  404114:	bd90      	pop	{r4, r7, pc}
  404116:	bf00      	nop
  404118:	40010000 	.word	0x40010000
  40411c:	00403e45 	.word	0x00403e45
  404120:	20003848 	.word	0x20003848
  404124:	20002304 	.word	0x20002304
  404128:	00403e61 	.word	0x00403e61
  40412c:	004067ed 	.word	0x004067ed
  404130:	0040676d 	.word	0x0040676d
  404134:	004067c5 	.word	0x004067c5
  404138:	00406b39 	.word	0x00406b39
  40413c:	00406bf7 	.word	0x00406bf7
  404140:	00406b73 	.word	0x00406b73
  404144:	00406b91 	.word	0x00406b91
  404148:	00403ce5 	.word	0x00403ce5
  40414c:	00403d19 	.word	0x00403d19
  404150:	00403d4d 	.word	0x00403d4d
  404154:	00403cb1 	.word	0x00403cb1

00404158 <inv_timer_get_counter>:

uint64_t inv_timer_get_counter(unsigned timer_num)
{
  404158:	b590      	push	{r4, r7, lr}
  40415a:	b087      	sub	sp, #28
  40415c:	af00      	add	r7, sp, #0
  40415e:	6078      	str	r0, [r7, #4]
	uint64_t ret_value;
	uint16_t lsb_1, msb_1, lsb_2, msb_2;
	
	/* Sanity check */
	if(timer_num >= INV_TIMER_MAX)
  404160:	687b      	ldr	r3, [r7, #4]
  404162:	2b04      	cmp	r3, #4
  404164:	d904      	bls.n	404170 <inv_timer_get_counter+0x18>
		return 0;
  404166:	f04f 0300 	mov.w	r3, #0
  40416a:	f04f 0400 	mov.w	r4, #0
  40416e:	e080      	b.n	404272 <inv_timer_get_counter+0x11a>
	
	if((tm[timer_num].timer_periph == TC0) && (tm[timer_num].timer_channel == 1)) {
  404170:	4942      	ldr	r1, [pc, #264]	; (40427c <inv_timer_get_counter+0x124>)
  404172:	687a      	ldr	r2, [r7, #4]
  404174:	4613      	mov	r3, r2
  404176:	009b      	lsls	r3, r3, #2
  404178:	4413      	add	r3, r2
  40417a:	00db      	lsls	r3, r3, #3
  40417c:	440b      	add	r3, r1
  40417e:	681b      	ldr	r3, [r3, #0]
  404180:	4a3f      	ldr	r2, [pc, #252]	; (404280 <inv_timer_get_counter+0x128>)
  404182:	4293      	cmp	r3, r2
  404184:	d15a      	bne.n	40423c <inv_timer_get_counter+0xe4>
  404186:	493d      	ldr	r1, [pc, #244]	; (40427c <inv_timer_get_counter+0x124>)
  404188:	687a      	ldr	r2, [r7, #4]
  40418a:	4613      	mov	r3, r2
  40418c:	009b      	lsls	r3, r3, #2
  40418e:	4413      	add	r3, r2
  404190:	00db      	lsls	r3, r3, #3
  404192:	440b      	add	r3, r1
  404194:	3304      	adds	r3, #4
  404196:	681b      	ldr	r3, [r3, #0]
  404198:	2b01      	cmp	r3, #1
  40419a:	d14f      	bne.n	40423c <inv_timer_get_counter+0xe4>
		lsb_1 = tc_read_cv(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  40419c:	4937      	ldr	r1, [pc, #220]	; (40427c <inv_timer_get_counter+0x124>)
  40419e:	687a      	ldr	r2, [r7, #4]
  4041a0:	4613      	mov	r3, r2
  4041a2:	009b      	lsls	r3, r3, #2
  4041a4:	4413      	add	r3, r2
  4041a6:	00db      	lsls	r3, r3, #3
  4041a8:	440b      	add	r3, r1
  4041aa:	6818      	ldr	r0, [r3, #0]
  4041ac:	4933      	ldr	r1, [pc, #204]	; (40427c <inv_timer_get_counter+0x124>)
  4041ae:	687a      	ldr	r2, [r7, #4]
  4041b0:	4613      	mov	r3, r2
  4041b2:	009b      	lsls	r3, r3, #2
  4041b4:	4413      	add	r3, r2
  4041b6:	00db      	lsls	r3, r3, #3
  4041b8:	440b      	add	r3, r1
  4041ba:	3304      	adds	r3, #4
  4041bc:	681b      	ldr	r3, [r3, #0]
  4041be:	4619      	mov	r1, r3
  4041c0:	4b30      	ldr	r3, [pc, #192]	; (404284 <inv_timer_get_counter+0x12c>)
  4041c2:	4798      	blx	r3
  4041c4:	4603      	mov	r3, r0
  4041c6:	81fb      	strh	r3, [r7, #14]
		msb_1 = tc_read_cv(tm[INV_TIMER_MAX].timer_periph, tm[INV_TIMER_MAX].timer_channel);
  4041c8:	4b2c      	ldr	r3, [pc, #176]	; (40427c <inv_timer_get_counter+0x124>)
  4041ca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  4041ce:	4b2b      	ldr	r3, [pc, #172]	; (40427c <inv_timer_get_counter+0x124>)
  4041d0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  4041d4:	4619      	mov	r1, r3
  4041d6:	4610      	mov	r0, r2
  4041d8:	4b2a      	ldr	r3, [pc, #168]	; (404284 <inv_timer_get_counter+0x12c>)
  4041da:	4798      	blx	r3
  4041dc:	4603      	mov	r3, r0
  4041de:	81bb      	strh	r3, [r7, #12]
		lsb_2 = tc_read_cv(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  4041e0:	4926      	ldr	r1, [pc, #152]	; (40427c <inv_timer_get_counter+0x124>)
  4041e2:	687a      	ldr	r2, [r7, #4]
  4041e4:	4613      	mov	r3, r2
  4041e6:	009b      	lsls	r3, r3, #2
  4041e8:	4413      	add	r3, r2
  4041ea:	00db      	lsls	r3, r3, #3
  4041ec:	440b      	add	r3, r1
  4041ee:	6818      	ldr	r0, [r3, #0]
  4041f0:	4922      	ldr	r1, [pc, #136]	; (40427c <inv_timer_get_counter+0x124>)
  4041f2:	687a      	ldr	r2, [r7, #4]
  4041f4:	4613      	mov	r3, r2
  4041f6:	009b      	lsls	r3, r3, #2
  4041f8:	4413      	add	r3, r2
  4041fa:	00db      	lsls	r3, r3, #3
  4041fc:	440b      	add	r3, r1
  4041fe:	3304      	adds	r3, #4
  404200:	681b      	ldr	r3, [r3, #0]
  404202:	4619      	mov	r1, r3
  404204:	4b1f      	ldr	r3, [pc, #124]	; (404284 <inv_timer_get_counter+0x12c>)
  404206:	4798      	blx	r3
  404208:	4603      	mov	r3, r0
  40420a:	817b      	strh	r3, [r7, #10]
		msb_2 = tc_read_cv(tm[INV_TIMER_MAX].timer_periph, tm[INV_TIMER_MAX].timer_channel);
  40420c:	4b1b      	ldr	r3, [pc, #108]	; (40427c <inv_timer_get_counter+0x124>)
  40420e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  404212:	4b1a      	ldr	r3, [pc, #104]	; (40427c <inv_timer_get_counter+0x124>)
  404214:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  404218:	4619      	mov	r1, r3
  40421a:	4610      	mov	r0, r2
  40421c:	4b19      	ldr	r3, [pc, #100]	; (404284 <inv_timer_get_counter+0x12c>)
  40421e:	4798      	blx	r3
  404220:	4603      	mov	r3, r0
  404222:	813b      	strh	r3, [r7, #8]
		ret_value = (uint64_t)fusion_16bit_into_32bit(lsb_1, msb_1, lsb_2, msb_2);
  404224:	893b      	ldrh	r3, [r7, #8]
  404226:	897a      	ldrh	r2, [r7, #10]
  404228:	89b9      	ldrh	r1, [r7, #12]
  40422a:	89f8      	ldrh	r0, [r7, #14]
  40422c:	4c16      	ldr	r4, [pc, #88]	; (404288 <inv_timer_get_counter+0x130>)
  40422e:	47a0      	blx	r4
  404230:	4603      	mov	r3, r0
  404232:	f04f 0400 	mov.w	r4, #0
  404236:	e9c7 3404 	strd	r3, r4, [r7, #16]
  40423a:	e018      	b.n	40426e <inv_timer_get_counter+0x116>
	} else {
		ret_value = (uint64_t)tc_read_cv(tm[timer_num].timer_periph, tm[timer_num].timer_channel);
  40423c:	490f      	ldr	r1, [pc, #60]	; (40427c <inv_timer_get_counter+0x124>)
  40423e:	687a      	ldr	r2, [r7, #4]
  404240:	4613      	mov	r3, r2
  404242:	009b      	lsls	r3, r3, #2
  404244:	4413      	add	r3, r2
  404246:	00db      	lsls	r3, r3, #3
  404248:	440b      	add	r3, r1
  40424a:	6818      	ldr	r0, [r3, #0]
  40424c:	490b      	ldr	r1, [pc, #44]	; (40427c <inv_timer_get_counter+0x124>)
  40424e:	687a      	ldr	r2, [r7, #4]
  404250:	4613      	mov	r3, r2
  404252:	009b      	lsls	r3, r3, #2
  404254:	4413      	add	r3, r2
  404256:	00db      	lsls	r3, r3, #3
  404258:	440b      	add	r3, r1
  40425a:	3304      	adds	r3, #4
  40425c:	681b      	ldr	r3, [r3, #0]
  40425e:	4619      	mov	r1, r3
  404260:	4b08      	ldr	r3, [pc, #32]	; (404284 <inv_timer_get_counter+0x12c>)
  404262:	4798      	blx	r3
  404264:	4603      	mov	r3, r0
  404266:	f04f 0400 	mov.w	r4, #0
  40426a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	}
	
	return ret_value;
  40426e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
}
  404272:	4618      	mov	r0, r3
  404274:	4621      	mov	r1, r4
  404276:	371c      	adds	r7, #28
  404278:	46bd      	mov	sp, r7
  40427a:	bd90      	pop	{r4, r7, pc}
  40427c:	20002304 	.word	0x20002304
  404280:	40010000 	.word	0x40010000
  404284:	00406bb3 	.word	0x00406bb3
  404288:	00403e7d 	.word	0x00403e7d

0040428c <inv_timer_channel_stop>:

	return 0;
}

int inv_timer_channel_stop(unsigned timer_num, uint8_t channel)
{
  40428c:	b580      	push	{r7, lr}
  40428e:	b082      	sub	sp, #8
  404290:	af00      	add	r7, sp, #0
  404292:	6078      	str	r0, [r7, #4]
  404294:	460b      	mov	r3, r1
  404296:	70fb      	strb	r3, [r7, #3]
	(void) channel;

	if(timer_num >= INV_TIMER_MAX)
  404298:	687b      	ldr	r3, [r7, #4]
  40429a:	2b04      	cmp	r3, #4
  40429c:	d902      	bls.n	4042a4 <inv_timer_channel_stop+0x18>
		return -1;
  40429e:	f04f 33ff 	mov.w	r3, #4294967295
  4042a2:	e029      	b.n	4042f8 <inv_timer_channel_stop+0x6c>

	tc_disable_interrupt(tm[timer_num].timer_periph, tm[timer_num].timer_channel, TC_SR_CPCS);
  4042a4:	4916      	ldr	r1, [pc, #88]	; (404300 <inv_timer_channel_stop+0x74>)
  4042a6:	687a      	ldr	r2, [r7, #4]
  4042a8:	4613      	mov	r3, r2
  4042aa:	009b      	lsls	r3, r3, #2
  4042ac:	4413      	add	r3, r2
  4042ae:	00db      	lsls	r3, r3, #3
  4042b0:	440b      	add	r3, r1
  4042b2:	6818      	ldr	r0, [r3, #0]
  4042b4:	4912      	ldr	r1, [pc, #72]	; (404300 <inv_timer_channel_stop+0x74>)
  4042b6:	687a      	ldr	r2, [r7, #4]
  4042b8:	4613      	mov	r3, r2
  4042ba:	009b      	lsls	r3, r3, #2
  4042bc:	4413      	add	r3, r2
  4042be:	00db      	lsls	r3, r3, #3
  4042c0:	440b      	add	r3, r1
  4042c2:	3304      	adds	r3, #4
  4042c4:	681b      	ldr	r3, [r3, #0]
  4042c6:	2210      	movs	r2, #16
  4042c8:	4619      	mov	r1, r3
  4042ca:	4b0e      	ldr	r3, [pc, #56]	; (404304 <inv_timer_channel_stop+0x78>)
  4042cc:	4798      	blx	r3

	tm[timer_num].callback = 0;
  4042ce:	490c      	ldr	r1, [pc, #48]	; (404300 <inv_timer_channel_stop+0x74>)
  4042d0:	687a      	ldr	r2, [r7, #4]
  4042d2:	4613      	mov	r3, r2
  4042d4:	009b      	lsls	r3, r3, #2
  4042d6:	4413      	add	r3, r2
  4042d8:	00db      	lsls	r3, r3, #3
  4042da:	440b      	add	r3, r1
  4042dc:	3318      	adds	r3, #24
  4042de:	2200      	movs	r2, #0
  4042e0:	601a      	str	r2, [r3, #0]
	tm[timer_num].context  = 0;
  4042e2:	4907      	ldr	r1, [pc, #28]	; (404300 <inv_timer_channel_stop+0x74>)
  4042e4:	687a      	ldr	r2, [r7, #4]
  4042e6:	4613      	mov	r3, r2
  4042e8:	009b      	lsls	r3, r3, #2
  4042ea:	4413      	add	r3, r2
  4042ec:	00db      	lsls	r3, r3, #3
  4042ee:	440b      	add	r3, r1
  4042f0:	331c      	adds	r3, #28
  4042f2:	2200      	movs	r2, #0
  4042f4:	601a      	str	r2, [r3, #0]

	return 0;
  4042f6:	2300      	movs	r3, #0
}
  4042f8:	4618      	mov	r0, r3
  4042fa:	3708      	adds	r7, #8
  4042fc:	46bd      	mov	sp, r7
  4042fe:	bd80      	pop	{r7, pc}
  404300:	20002304 	.word	0x20002304
  404304:	00406c43 	.word	0x00406c43

00404308 <timer_irq_handler>:

	return 0;
}

static void timer_irq_handler(void (*caller)(void))
{
  404308:	b5b0      	push	{r4, r5, r7, lr}
  40430a:	b084      	sub	sp, #16
  40430c:	af00      	add	r7, sp, #0
  40430e:	6078      	str	r0, [r7, #4]
	for(int i=INV_TIMER1; i<INV_TIMER_MAX; i++) {
  404310:	2300      	movs	r3, #0
  404312:	60fb      	str	r3, [r7, #12]
  404314:	e07a      	b.n	40440c <timer_irq_handler+0x104>
		if(caller == tm[i].irq_handler) {
  404316:	4941      	ldr	r1, [pc, #260]	; (40441c <timer_irq_handler+0x114>)
  404318:	68fa      	ldr	r2, [r7, #12]
  40431a:	4613      	mov	r3, r2
  40431c:	009b      	lsls	r3, r3, #2
  40431e:	4413      	add	r3, r2
  404320:	00db      	lsls	r3, r3, #3
  404322:	440b      	add	r3, r1
  404324:	3324      	adds	r3, #36	; 0x24
  404326:	681a      	ldr	r2, [r3, #0]
  404328:	687b      	ldr	r3, [r7, #4]
  40432a:	429a      	cmp	r2, r3
  40432c:	d16b      	bne.n	404406 <timer_irq_handler+0xfe>
			if((tc_get_status(tm[i].timer_periph, tm[i].timer_channel) & TC_SR_CPCS) == TC_SR_CPCS) {
  40432e:	493b      	ldr	r1, [pc, #236]	; (40441c <timer_irq_handler+0x114>)
  404330:	68fa      	ldr	r2, [r7, #12]
  404332:	4613      	mov	r3, r2
  404334:	009b      	lsls	r3, r3, #2
  404336:	4413      	add	r3, r2
  404338:	00db      	lsls	r3, r3, #3
  40433a:	440b      	add	r3, r1
  40433c:	6818      	ldr	r0, [r3, #0]
  40433e:	4937      	ldr	r1, [pc, #220]	; (40441c <timer_irq_handler+0x114>)
  404340:	68fa      	ldr	r2, [r7, #12]
  404342:	4613      	mov	r3, r2
  404344:	009b      	lsls	r3, r3, #2
  404346:	4413      	add	r3, r2
  404348:	00db      	lsls	r3, r3, #3
  40434a:	440b      	add	r3, r1
  40434c:	3304      	adds	r3, #4
  40434e:	681b      	ldr	r3, [r3, #0]
  404350:	4619      	mov	r1, r3
  404352:	4b33      	ldr	r3, [pc, #204]	; (404420 <timer_irq_handler+0x118>)
  404354:	4798      	blx	r3
  404356:	4603      	mov	r3, r0
  404358:	f003 0310 	and.w	r3, r3, #16
  40435c:	2b10      	cmp	r3, #16
  40435e:	d152      	bne.n	404406 <timer_irq_handler+0xfe>
				tc_write_rc(tm[i].timer_periph, tm[i].timer_channel, 
  404360:	492e      	ldr	r1, [pc, #184]	; (40441c <timer_irq_handler+0x114>)
  404362:	68fa      	ldr	r2, [r7, #12]
  404364:	4613      	mov	r3, r2
  404366:	009b      	lsls	r3, r3, #2
  404368:	4413      	add	r3, r2
  40436a:	00db      	lsls	r3, r3, #3
  40436c:	440b      	add	r3, r1
  40436e:	681c      	ldr	r4, [r3, #0]
  404370:	492a      	ldr	r1, [pc, #168]	; (40441c <timer_irq_handler+0x114>)
  404372:	68fa      	ldr	r2, [r7, #12]
  404374:	4613      	mov	r3, r2
  404376:	009b      	lsls	r3, r3, #2
  404378:	4413      	add	r3, r2
  40437a:	00db      	lsls	r3, r3, #3
  40437c:	440b      	add	r3, r1
  40437e:	3304      	adds	r3, #4
  404380:	681d      	ldr	r5, [r3, #0]
						tc_read_rc(tm[i].timer_periph, tm[i].timer_channel) + tm[i].rc);
  404382:	4926      	ldr	r1, [pc, #152]	; (40441c <timer_irq_handler+0x114>)
  404384:	68fa      	ldr	r2, [r7, #12]
  404386:	4613      	mov	r3, r2
  404388:	009b      	lsls	r3, r3, #2
  40438a:	4413      	add	r3, r2
  40438c:	00db      	lsls	r3, r3, #3
  40438e:	440b      	add	r3, r1
  404390:	6818      	ldr	r0, [r3, #0]
  404392:	4922      	ldr	r1, [pc, #136]	; (40441c <timer_irq_handler+0x114>)
  404394:	68fa      	ldr	r2, [r7, #12]
  404396:	4613      	mov	r3, r2
  404398:	009b      	lsls	r3, r3, #2
  40439a:	4413      	add	r3, r2
  40439c:	00db      	lsls	r3, r3, #3
  40439e:	440b      	add	r3, r1
  4043a0:	3304      	adds	r3, #4
  4043a2:	681b      	ldr	r3, [r3, #0]
  4043a4:	4619      	mov	r1, r3
  4043a6:	4b1f      	ldr	r3, [pc, #124]	; (404424 <timer_irq_handler+0x11c>)
  4043a8:	4798      	blx	r3
  4043aa:	491c      	ldr	r1, [pc, #112]	; (40441c <timer_irq_handler+0x114>)
  4043ac:	68fa      	ldr	r2, [r7, #12]
  4043ae:	4613      	mov	r3, r2
  4043b0:	009b      	lsls	r3, r3, #2
  4043b2:	4413      	add	r3, r2
  4043b4:	00db      	lsls	r3, r3, #3
  4043b6:	440b      	add	r3, r1
  4043b8:	3314      	adds	r3, #20
  4043ba:	681b      	ldr	r3, [r3, #0]
				tc_write_rc(tm[i].timer_periph, tm[i].timer_channel, 
  4043bc:	4403      	add	r3, r0
  4043be:	461a      	mov	r2, r3
  4043c0:	4629      	mov	r1, r5
  4043c2:	4620      	mov	r0, r4
  4043c4:	4b18      	ldr	r3, [pc, #96]	; (404428 <timer_irq_handler+0x120>)
  4043c6:	4798      	blx	r3
				
				if(tm[i].callback)
  4043c8:	4914      	ldr	r1, [pc, #80]	; (40441c <timer_irq_handler+0x114>)
  4043ca:	68fa      	ldr	r2, [r7, #12]
  4043cc:	4613      	mov	r3, r2
  4043ce:	009b      	lsls	r3, r3, #2
  4043d0:	4413      	add	r3, r2
  4043d2:	00db      	lsls	r3, r3, #3
  4043d4:	440b      	add	r3, r1
  4043d6:	3318      	adds	r3, #24
  4043d8:	681b      	ldr	r3, [r3, #0]
  4043da:	2b00      	cmp	r3, #0
  4043dc:	d013      	beq.n	404406 <timer_irq_handler+0xfe>
					tm[i].callback(tm[i].context);
  4043de:	490f      	ldr	r1, [pc, #60]	; (40441c <timer_irq_handler+0x114>)
  4043e0:	68fa      	ldr	r2, [r7, #12]
  4043e2:	4613      	mov	r3, r2
  4043e4:	009b      	lsls	r3, r3, #2
  4043e6:	4413      	add	r3, r2
  4043e8:	00db      	lsls	r3, r3, #3
  4043ea:	440b      	add	r3, r1
  4043ec:	3318      	adds	r3, #24
  4043ee:	6819      	ldr	r1, [r3, #0]
  4043f0:	480a      	ldr	r0, [pc, #40]	; (40441c <timer_irq_handler+0x114>)
  4043f2:	68fa      	ldr	r2, [r7, #12]
  4043f4:	4613      	mov	r3, r2
  4043f6:	009b      	lsls	r3, r3, #2
  4043f8:	4413      	add	r3, r2
  4043fa:	00db      	lsls	r3, r3, #3
  4043fc:	4403      	add	r3, r0
  4043fe:	331c      	adds	r3, #28
  404400:	681b      	ldr	r3, [r3, #0]
  404402:	4618      	mov	r0, r3
  404404:	4788      	blx	r1
	for(int i=INV_TIMER1; i<INV_TIMER_MAX; i++) {
  404406:	68fb      	ldr	r3, [r7, #12]
  404408:	3301      	adds	r3, #1
  40440a:	60fb      	str	r3, [r7, #12]
  40440c:	68fb      	ldr	r3, [r7, #12]
  40440e:	2b04      	cmp	r3, #4
  404410:	dd81      	ble.n	404316 <timer_irq_handler+0xe>
			}
		}
	}
}
  404412:	bf00      	nop
  404414:	3710      	adds	r7, #16
  404416:	46bd      	mov	sp, r7
  404418:	bdb0      	pop	{r4, r5, r7, pc}
  40441a:	bf00      	nop
  40441c:	20002304 	.word	0x20002304
  404420:	00406c6b 	.word	0x00406c6b
  404424:	00406bd5 	.word	0x00406bd5
  404428:	00406c1d 	.word	0x00406c1d

0040442c <TC0_Handler>:

void TC0_Handler(void)
{
  40442c:	b580      	push	{r7, lr}
  40442e:	af00      	add	r7, sp, #0
	tc_get_status(tm[INV_TIMER_MAX].timer_periph, tm[INV_TIMER_MAX].timer_channel);
  404430:	4b05      	ldr	r3, [pc, #20]	; (404448 <TC0_Handler+0x1c>)
  404432:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  404436:	4b04      	ldr	r3, [pc, #16]	; (404448 <TC0_Handler+0x1c>)
  404438:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
  40443c:	4619      	mov	r1, r3
  40443e:	4610      	mov	r0, r2
  404440:	4b02      	ldr	r3, [pc, #8]	; (40444c <TC0_Handler+0x20>)
  404442:	4798      	blx	r3
}
  404444:	bf00      	nop
  404446:	bd80      	pop	{r7, pc}
  404448:	20002304 	.word	0x20002304
  40444c:	00406c6b 	.word	0x00406c6b

00404450 <TC1_Handler>:

void TC1_Handler(void)
{
  404450:	b580      	push	{r7, lr}
  404452:	af00      	add	r7, sp, #0
	timer_irq_handler(TC1_Handler);
  404454:	4802      	ldr	r0, [pc, #8]	; (404460 <TC1_Handler+0x10>)
  404456:	4b03      	ldr	r3, [pc, #12]	; (404464 <TC1_Handler+0x14>)
  404458:	4798      	blx	r3
}
  40445a:	bf00      	nop
  40445c:	bd80      	pop	{r7, pc}
  40445e:	bf00      	nop
  404460:	00404451 	.word	0x00404451
  404464:	00404309 	.word	0x00404309

00404468 <TC2_Handler>:

void TC2_Handler(void)
{
  404468:	b580      	push	{r7, lr}
  40446a:	af00      	add	r7, sp, #0
	timer_irq_handler(TC2_Handler);
  40446c:	4802      	ldr	r0, [pc, #8]	; (404478 <TC2_Handler+0x10>)
  40446e:	4b03      	ldr	r3, [pc, #12]	; (40447c <TC2_Handler+0x14>)
  404470:	4798      	blx	r3
}
  404472:	bf00      	nop
  404474:	bd80      	pop	{r7, pc}
  404476:	bf00      	nop
  404478:	00404469 	.word	0x00404469
  40447c:	00404309 	.word	0x00404309

00404480 <TC3_Handler>:

void TC3_Handler(void)
{
  404480:	b580      	push	{r7, lr}
  404482:	af00      	add	r7, sp, #0
	timer_irq_handler(TC3_Handler);
  404484:	4802      	ldr	r0, [pc, #8]	; (404490 <TC3_Handler+0x10>)
  404486:	4b03      	ldr	r3, [pc, #12]	; (404494 <TC3_Handler+0x14>)
  404488:	4798      	blx	r3
}
  40448a:	bf00      	nop
  40448c:	bd80      	pop	{r7, pc}
  40448e:	bf00      	nop
  404490:	00404481 	.word	0x00404481
  404494:	00404309 	.word	0x00404309

00404498 <TC4_Handler>:

void TC4_Handler(void)
{
  404498:	b580      	push	{r7, lr}
  40449a:	af00      	add	r7, sp, #0
	timer_irq_handler(TC4_Handler);
  40449c:	4802      	ldr	r0, [pc, #8]	; (4044a8 <TC4_Handler+0x10>)
  40449e:	4b03      	ldr	r3, [pc, #12]	; (4044ac <TC4_Handler+0x14>)
  4044a0:	4798      	blx	r3
}
  4044a2:	bf00      	nop
  4044a4:	bd80      	pop	{r7, pc}
  4044a6:	bf00      	nop
  4044a8:	00404499 	.word	0x00404499
  4044ac:	00404309 	.word	0x00404309

004044b0 <TC5_Handler>:

void TC5_Handler(void)
{
  4044b0:	b580      	push	{r7, lr}
  4044b2:	af00      	add	r7, sp, #0
	timer_irq_handler(TC5_Handler);
  4044b4:	4802      	ldr	r0, [pc, #8]	; (4044c0 <TC5_Handler+0x10>)
  4044b6:	4b03      	ldr	r3, [pc, #12]	; (4044c4 <TC5_Handler+0x14>)
  4044b8:	4798      	blx	r3
  4044ba:	bf00      	nop
  4044bc:	bd80      	pop	{r7, pc}
  4044be:	bf00      	nop
  4044c0:	004044b1 	.word	0x004044b1
  4044c4:	00404309 	.word	0x00404309

004044c8 <NVIC_EnableIRQ>:
{
  4044c8:	b480      	push	{r7}
  4044ca:	b083      	sub	sp, #12
  4044cc:	af00      	add	r7, sp, #0
  4044ce:	4603      	mov	r3, r0
  4044d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4044d2:	4909      	ldr	r1, [pc, #36]	; (4044f8 <NVIC_EnableIRQ+0x30>)
  4044d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4044d8:	095b      	lsrs	r3, r3, #5
  4044da:	79fa      	ldrb	r2, [r7, #7]
  4044dc:	f002 021f 	and.w	r2, r2, #31
  4044e0:	2001      	movs	r0, #1
  4044e2:	fa00 f202 	lsl.w	r2, r0, r2
  4044e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4044ea:	bf00      	nop
  4044ec:	370c      	adds	r7, #12
  4044ee:	46bd      	mov	sp, r7
  4044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4044f4:	4770      	bx	lr
  4044f6:	bf00      	nop
  4044f8:	e000e100 	.word	0xe000e100

004044fc <osc_get_rate>:
{
  4044fc:	b480      	push	{r7}
  4044fe:	b083      	sub	sp, #12
  404500:	af00      	add	r7, sp, #0
  404502:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404504:	687b      	ldr	r3, [r7, #4]
  404506:	2b07      	cmp	r3, #7
  404508:	d825      	bhi.n	404556 <osc_get_rate+0x5a>
  40450a:	a201      	add	r2, pc, #4	; (adr r2, 404510 <osc_get_rate+0x14>)
  40450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404510:	00404531 	.word	0x00404531
  404514:	00404537 	.word	0x00404537
  404518:	0040453d 	.word	0x0040453d
  40451c:	00404543 	.word	0x00404543
  404520:	00404547 	.word	0x00404547
  404524:	0040454b 	.word	0x0040454b
  404528:	0040454f 	.word	0x0040454f
  40452c:	00404553 	.word	0x00404553
		return OSC_SLCK_32K_RC_HZ;
  404530:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404534:	e010      	b.n	404558 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  404536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40453a:	e00d      	b.n	404558 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40453c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404540:	e00a      	b.n	404558 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  404542:	4b08      	ldr	r3, [pc, #32]	; (404564 <osc_get_rate+0x68>)
  404544:	e008      	b.n	404558 <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  404546:	4b08      	ldr	r3, [pc, #32]	; (404568 <osc_get_rate+0x6c>)
  404548:	e006      	b.n	404558 <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  40454a:	4b08      	ldr	r3, [pc, #32]	; (40456c <osc_get_rate+0x70>)
  40454c:	e004      	b.n	404558 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40454e:	2300      	movs	r3, #0
  404550:	e002      	b.n	404558 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  404552:	2300      	movs	r3, #0
  404554:	e000      	b.n	404558 <osc_get_rate+0x5c>
	return 0;
  404556:	2300      	movs	r3, #0
}
  404558:	4618      	mov	r0, r3
  40455a:	370c      	adds	r7, #12
  40455c:	46bd      	mov	sp, r7
  40455e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404562:	4770      	bx	lr
  404564:	007a1200 	.word	0x007a1200
  404568:	00f42400 	.word	0x00f42400
  40456c:	016e3600 	.word	0x016e3600

00404570 <sysclk_get_main_hz>:
{
  404570:	b580      	push	{r7, lr}
  404572:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  404574:	2001      	movs	r0, #1
  404576:	4b04      	ldr	r3, [pc, #16]	; (404588 <sysclk_get_main_hz+0x18>)
  404578:	4798      	blx	r3
  40457a:	4602      	mov	r2, r0
  40457c:	f640 634e 	movw	r3, #3662	; 0xe4e
  404580:	fb03 f302 	mul.w	r3, r3, r2
}
  404584:	4618      	mov	r0, r3
  404586:	bd80      	pop	{r7, pc}
  404588:	004044fd 	.word	0x004044fd

0040458c <sysclk_get_peripheral_hz>:
{
  40458c:	b580      	push	{r7, lr}
  40458e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  404590:	4b02      	ldr	r3, [pc, #8]	; (40459c <sysclk_get_peripheral_hz+0x10>)
  404592:	4798      	blx	r3
  404594:	4603      	mov	r3, r0
}
  404596:	4618      	mov	r0, r3
  404598:	bd80      	pop	{r7, pc}
  40459a:	bf00      	nop
  40459c:	00404571 	.word	0x00404571

004045a0 <sysclk_enable_peripheral_clock>:
{
  4045a0:	b580      	push	{r7, lr}
  4045a2:	b082      	sub	sp, #8
  4045a4:	af00      	add	r7, sp, #0
  4045a6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4045a8:	6878      	ldr	r0, [r7, #4]
  4045aa:	4b03      	ldr	r3, [pc, #12]	; (4045b8 <sysclk_enable_peripheral_clock+0x18>)
  4045ac:	4798      	blx	r3
}
  4045ae:	bf00      	nop
  4045b0:	3708      	adds	r7, #8
  4045b2:	46bd      	mov	sp, r7
  4045b4:	bd80      	pop	{r7, pc}
  4045b6:	bf00      	nop
  4045b8:	004066e9 	.word	0x004066e9

004045bc <ioport_disable_port>:
{
  4045bc:	b480      	push	{r7}
  4045be:	b087      	sub	sp, #28
  4045c0:	af00      	add	r7, sp, #0
  4045c2:	6078      	str	r0, [r7, #4]
  4045c4:	6039      	str	r1, [r7, #0]
  4045c6:	687b      	ldr	r3, [r7, #4]
  4045c8:	617b      	str	r3, [r7, #20]
  4045ca:	683b      	ldr	r3, [r7, #0]
  4045cc:	613b      	str	r3, [r7, #16]
  4045ce:	697b      	ldr	r3, [r7, #20]
  4045d0:	60fb      	str	r3, [r7, #12]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4045d2:	68fb      	ldr	r3, [r7, #12]
  4045d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4045d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4045dc:	025b      	lsls	r3, r3, #9
  4045de:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4045e0:	693b      	ldr	r3, [r7, #16]
  4045e2:	6053      	str	r3, [r2, #4]
}
  4045e4:	bf00      	nop
  4045e6:	371c      	adds	r7, #28
  4045e8:	46bd      	mov	sp, r7
  4045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4045ee:	4770      	bx	lr

004045f0 <ioport_set_port_mode>:
{
  4045f0:	b480      	push	{r7}
  4045f2:	b08b      	sub	sp, #44	; 0x2c
  4045f4:	af00      	add	r7, sp, #0
  4045f6:	60f8      	str	r0, [r7, #12]
  4045f8:	60b9      	str	r1, [r7, #8]
  4045fa:	607a      	str	r2, [r7, #4]
  4045fc:	68fb      	ldr	r3, [r7, #12]
  4045fe:	627b      	str	r3, [r7, #36]	; 0x24
  404600:	68bb      	ldr	r3, [r7, #8]
  404602:	623b      	str	r3, [r7, #32]
  404604:	687b      	ldr	r3, [r7, #4]
  404606:	61fb      	str	r3, [r7, #28]
  404608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40460a:	61bb      	str	r3, [r7, #24]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40460c:	69bb      	ldr	r3, [r7, #24]
  40460e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404612:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404616:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  404618:	617b      	str	r3, [r7, #20]
	if (mode & IOPORT_MODE_PULLUP) {
  40461a:	69fb      	ldr	r3, [r7, #28]
  40461c:	f003 0308 	and.w	r3, r3, #8
  404620:	2b00      	cmp	r3, #0
  404622:	d003      	beq.n	40462c <ioport_set_port_mode+0x3c>
		base->PIO_PUER = mask;
  404624:	697b      	ldr	r3, [r7, #20]
  404626:	6a3a      	ldr	r2, [r7, #32]
  404628:	665a      	str	r2, [r3, #100]	; 0x64
  40462a:	e002      	b.n	404632 <ioport_set_port_mode+0x42>
		base->PIO_PUDR = mask;
  40462c:	697b      	ldr	r3, [r7, #20]
  40462e:	6a3a      	ldr	r2, [r7, #32]
  404630:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  404632:	69fb      	ldr	r3, [r7, #28]
  404634:	f003 0310 	and.w	r3, r3, #16
  404638:	2b00      	cmp	r3, #0
  40463a:	d004      	beq.n	404646 <ioport_set_port_mode+0x56>
		base->PIO_PPDER = mask;
  40463c:	697b      	ldr	r3, [r7, #20]
  40463e:	6a3a      	ldr	r2, [r7, #32]
  404640:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  404644:	e003      	b.n	40464e <ioport_set_port_mode+0x5e>
		base->PIO_PPDDR = mask;
  404646:	697b      	ldr	r3, [r7, #20]
  404648:	6a3a      	ldr	r2, [r7, #32]
  40464a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  40464e:	69fb      	ldr	r3, [r7, #28]
  404650:	f003 0320 	and.w	r3, r3, #32
  404654:	2b00      	cmp	r3, #0
  404656:	d003      	beq.n	404660 <ioport_set_port_mode+0x70>
		base->PIO_MDER = mask;
  404658:	697b      	ldr	r3, [r7, #20]
  40465a:	6a3a      	ldr	r2, [r7, #32]
  40465c:	651a      	str	r2, [r3, #80]	; 0x50
  40465e:	e002      	b.n	404666 <ioport_set_port_mode+0x76>
		base->PIO_MDDR = mask;
  404660:	697b      	ldr	r3, [r7, #20]
  404662:	6a3a      	ldr	r2, [r7, #32]
  404664:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  404666:	69fb      	ldr	r3, [r7, #28]
  404668:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40466c:	2b00      	cmp	r3, #0
  40466e:	d003      	beq.n	404678 <ioport_set_port_mode+0x88>
		base->PIO_IFER = mask;
  404670:	697b      	ldr	r3, [r7, #20]
  404672:	6a3a      	ldr	r2, [r7, #32]
  404674:	621a      	str	r2, [r3, #32]
  404676:	e002      	b.n	40467e <ioport_set_port_mode+0x8e>
		base->PIO_IFDR = mask;
  404678:	697b      	ldr	r3, [r7, #20]
  40467a:	6a3a      	ldr	r2, [r7, #32]
  40467c:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  40467e:	69fb      	ldr	r3, [r7, #28]
  404680:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404684:	2b00      	cmp	r3, #0
  404686:	d004      	beq.n	404692 <ioport_set_port_mode+0xa2>
		base->PIO_IFSCER = mask;
  404688:	697b      	ldr	r3, [r7, #20]
  40468a:	6a3a      	ldr	r2, [r7, #32]
  40468c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  404690:	e003      	b.n	40469a <ioport_set_port_mode+0xaa>
		base->PIO_IFSCDR = mask;
  404692:	697b      	ldr	r3, [r7, #20]
  404694:	6a3a      	ldr	r2, [r7, #32]
  404696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40469a:	69fb      	ldr	r3, [r7, #28]
  40469c:	f003 0301 	and.w	r3, r3, #1
  4046a0:	2b00      	cmp	r3, #0
  4046a2:	d006      	beq.n	4046b2 <ioport_set_port_mode+0xc2>
		base->PIO_ABCDSR[0] |= mask;
  4046a4:	697b      	ldr	r3, [r7, #20]
  4046a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4046a8:	6a3b      	ldr	r3, [r7, #32]
  4046aa:	431a      	orrs	r2, r3
  4046ac:	697b      	ldr	r3, [r7, #20]
  4046ae:	671a      	str	r2, [r3, #112]	; 0x70
  4046b0:	e006      	b.n	4046c0 <ioport_set_port_mode+0xd0>
		base->PIO_ABCDSR[0] &= ~mask;
  4046b2:	697b      	ldr	r3, [r7, #20]
  4046b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4046b6:	6a3b      	ldr	r3, [r7, #32]
  4046b8:	43db      	mvns	r3, r3
  4046ba:	401a      	ands	r2, r3
  4046bc:	697b      	ldr	r3, [r7, #20]
  4046be:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  4046c0:	69fb      	ldr	r3, [r7, #28]
  4046c2:	f003 0302 	and.w	r3, r3, #2
  4046c6:	2b00      	cmp	r3, #0
  4046c8:	d006      	beq.n	4046d8 <ioport_set_port_mode+0xe8>
		base->PIO_ABCDSR[1] |= mask;
  4046ca:	697b      	ldr	r3, [r7, #20]
  4046cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4046ce:	6a3b      	ldr	r3, [r7, #32]
  4046d0:	431a      	orrs	r2, r3
  4046d2:	697b      	ldr	r3, [r7, #20]
  4046d4:	675a      	str	r2, [r3, #116]	; 0x74
}
  4046d6:	e006      	b.n	4046e6 <ioport_set_port_mode+0xf6>
		base->PIO_ABCDSR[1] &= ~mask;
  4046d8:	697b      	ldr	r3, [r7, #20]
  4046da:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4046dc:	6a3b      	ldr	r3, [r7, #32]
  4046de:	43db      	mvns	r3, r3
  4046e0:	401a      	ands	r2, r3
  4046e2:	697b      	ldr	r3, [r7, #20]
  4046e4:	675a      	str	r2, [r3, #116]	; 0x74
  4046e6:	bf00      	nop
  4046e8:	372c      	adds	r7, #44	; 0x2c
  4046ea:	46bd      	mov	sp, r7
  4046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4046f0:	4770      	bx	lr
	...

004046f4 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4046f4:	b580      	push	{r7, lr}
  4046f6:	b088      	sub	sp, #32
  4046f8:	af00      	add	r7, sp, #0
  4046fa:	6078      	str	r0, [r7, #4]
  4046fc:	6039      	str	r1, [r7, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4046fe:	683b      	ldr	r3, [r7, #0]
  404700:	681b      	ldr	r3, [r3, #0]
  404702:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
  404704:	683b      	ldr	r3, [r7, #0]
  404706:	685b      	ldr	r3, [r3, #4]
  404708:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
  40470a:	683b      	ldr	r3, [r7, #0]
  40470c:	689b      	ldr	r3, [r3, #8]
  40470e:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
  404710:	683b      	ldr	r3, [r7, #0]
  404712:	68db      	ldr	r3, [r3, #12]
  404714:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  404716:	2300      	movs	r3, #0
  404718:	61bb      	str	r3, [r7, #24]
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40471a:	687b      	ldr	r3, [r7, #4]
  40471c:	4a69      	ldr	r2, [pc, #420]	; (4048c4 <usart_serial_init+0x1d0>)
  40471e:	4293      	cmp	r3, r2
  404720:	d115      	bne.n	40474e <usart_serial_init+0x5a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
  404722:	4869      	ldr	r0, [pc, #420]	; (4048c8 <usart_serial_init+0x1d4>)
  404724:	4b69      	ldr	r3, [pc, #420]	; (4048cc <usart_serial_init+0x1d8>)
  404726:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
  404728:	2101      	movs	r1, #1
  40472a:	4867      	ldr	r0, [pc, #412]	; (4048c8 <usart_serial_init+0x1d4>)
  40472c:	4b68      	ldr	r3, [pc, #416]	; (4048d0 <usart_serial_init+0x1dc>)
  40472e:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART0);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404730:	4b68      	ldr	r3, [pc, #416]	; (4048d4 <usart_serial_init+0x1e0>)
  404732:	4798      	blx	r3
  404734:	4602      	mov	r2, r0
  404736:	f107 0308 	add.w	r3, r7, #8
  40473a:	4619      	mov	r1, r3
  40473c:	6878      	ldr	r0, [r7, #4]
  40473e:	4b66      	ldr	r3, [pc, #408]	; (4048d8 <usart_serial_init+0x1e4>)
  404740:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  404742:	6878      	ldr	r0, [r7, #4]
  404744:	4b65      	ldr	r3, [pc, #404]	; (4048dc <usart_serial_init+0x1e8>)
  404746:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404748:	6878      	ldr	r0, [r7, #4]
  40474a:	4b65      	ldr	r3, [pc, #404]	; (4048e0 <usart_serial_init+0x1ec>)
  40474c:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40474e:	687b      	ldr	r3, [r7, #4]
  404750:	4a64      	ldr	r2, [pc, #400]	; (4048e4 <usart_serial_init+0x1f0>)
  404752:	4293      	cmp	r3, r2
  404754:	d115      	bne.n	404782 <usart_serial_init+0x8e>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
  404756:	4864      	ldr	r0, [pc, #400]	; (4048e8 <usart_serial_init+0x1f4>)
  404758:	4b5c      	ldr	r3, [pc, #368]	; (4048cc <usart_serial_init+0x1d8>)
  40475a:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
  40475c:	2101      	movs	r1, #1
  40475e:	4862      	ldr	r0, [pc, #392]	; (4048e8 <usart_serial_init+0x1f4>)
  404760:	4b5b      	ldr	r3, [pc, #364]	; (4048d0 <usart_serial_init+0x1dc>)
  404762:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404764:	4b5b      	ldr	r3, [pc, #364]	; (4048d4 <usart_serial_init+0x1e0>)
  404766:	4798      	blx	r3
  404768:	4602      	mov	r2, r0
  40476a:	f107 0308 	add.w	r3, r7, #8
  40476e:	4619      	mov	r1, r3
  404770:	6878      	ldr	r0, [r7, #4]
  404772:	4b59      	ldr	r3, [pc, #356]	; (4048d8 <usart_serial_init+0x1e4>)
  404774:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  404776:	6878      	ldr	r0, [r7, #4]
  404778:	4b58      	ldr	r3, [pc, #352]	; (4048dc <usart_serial_init+0x1e8>)
  40477a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40477c:	6878      	ldr	r0, [r7, #4]
  40477e:	4b58      	ldr	r3, [pc, #352]	; (4048e0 <usart_serial_init+0x1ec>)
  404780:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  404782:	687b      	ldr	r3, [r7, #4]
  404784:	4a59      	ldr	r2, [pc, #356]	; (4048ec <usart_serial_init+0x1f8>)
  404786:	4293      	cmp	r3, r2
  404788:	d115      	bne.n	4047b6 <usart_serial_init+0xc2>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
  40478a:	4859      	ldr	r0, [pc, #356]	; (4048f0 <usart_serial_init+0x1fc>)
  40478c:	4b4f      	ldr	r3, [pc, #316]	; (4048cc <usart_serial_init+0x1d8>)
  40478e:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
  404790:	2101      	movs	r1, #1
  404792:	4857      	ldr	r0, [pc, #348]	; (4048f0 <usart_serial_init+0x1fc>)
  404794:	4b4e      	ldr	r3, [pc, #312]	; (4048d0 <usart_serial_init+0x1dc>)
  404796:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART2);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404798:	4b4e      	ldr	r3, [pc, #312]	; (4048d4 <usart_serial_init+0x1e0>)
  40479a:	4798      	blx	r3
  40479c:	4602      	mov	r2, r0
  40479e:	f107 0308 	add.w	r3, r7, #8
  4047a2:	4619      	mov	r1, r3
  4047a4:	6878      	ldr	r0, [r7, #4]
  4047a6:	4b4c      	ldr	r3, [pc, #304]	; (4048d8 <usart_serial_init+0x1e4>)
  4047a8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4047aa:	6878      	ldr	r0, [r7, #4]
  4047ac:	4b4b      	ldr	r3, [pc, #300]	; (4048dc <usart_serial_init+0x1e8>)
  4047ae:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4047b0:	6878      	ldr	r0, [r7, #4]
  4047b2:	4b4b      	ldr	r3, [pc, #300]	; (4048e0 <usart_serial_init+0x1ec>)
  4047b4:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
  4047b6:	687b      	ldr	r3, [r7, #4]
  4047b8:	4a4e      	ldr	r2, [pc, #312]	; (4048f4 <usart_serial_init+0x200>)
  4047ba:	4293      	cmp	r3, r2
  4047bc:	d115      	bne.n	4047ea <usart_serial_init+0xf6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM3);
  4047be:	484e      	ldr	r0, [pc, #312]	; (4048f8 <usart_serial_init+0x204>)
  4047c0:	4b42      	ldr	r3, [pc, #264]	; (4048cc <usart_serial_init+0x1d8>)
  4047c2:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM3, FLEXCOM_USART);
  4047c4:	2101      	movs	r1, #1
  4047c6:	484c      	ldr	r0, [pc, #304]	; (4048f8 <usart_serial_init+0x204>)
  4047c8:	4b41      	ldr	r3, [pc, #260]	; (4048d0 <usart_serial_init+0x1dc>)
  4047ca:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART3);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4047cc:	4b41      	ldr	r3, [pc, #260]	; (4048d4 <usart_serial_init+0x1e0>)
  4047ce:	4798      	blx	r3
  4047d0:	4602      	mov	r2, r0
  4047d2:	f107 0308 	add.w	r3, r7, #8
  4047d6:	4619      	mov	r1, r3
  4047d8:	6878      	ldr	r0, [r7, #4]
  4047da:	4b3f      	ldr	r3, [pc, #252]	; (4048d8 <usart_serial_init+0x1e4>)
  4047dc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4047de:	6878      	ldr	r0, [r7, #4]
  4047e0:	4b3e      	ldr	r3, [pc, #248]	; (4048dc <usart_serial_init+0x1e8>)
  4047e2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4047e4:	6878      	ldr	r0, [r7, #4]
  4047e6:	4b3e      	ldr	r3, [pc, #248]	; (4048e0 <usart_serial_init+0x1ec>)
  4047e8:	4798      	blx	r3
	}
# endif
# ifdef USART4
	if (USART4 == p_usart) {
  4047ea:	687b      	ldr	r3, [r7, #4]
  4047ec:	4a43      	ldr	r2, [pc, #268]	; (4048fc <usart_serial_init+0x208>)
  4047ee:	4293      	cmp	r3, r2
  4047f0:	d115      	bne.n	40481e <usart_serial_init+0x12a>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM4);
  4047f2:	4843      	ldr	r0, [pc, #268]	; (404900 <usart_serial_init+0x20c>)
  4047f4:	4b35      	ldr	r3, [pc, #212]	; (4048cc <usart_serial_init+0x1d8>)
  4047f6:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM4, FLEXCOM_USART);
  4047f8:	2101      	movs	r1, #1
  4047fa:	4841      	ldr	r0, [pc, #260]	; (404900 <usart_serial_init+0x20c>)
  4047fc:	4b34      	ldr	r3, [pc, #208]	; (4048d0 <usart_serial_init+0x1dc>)
  4047fe:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART4);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404800:	4b34      	ldr	r3, [pc, #208]	; (4048d4 <usart_serial_init+0x1e0>)
  404802:	4798      	blx	r3
  404804:	4602      	mov	r2, r0
  404806:	f107 0308 	add.w	r3, r7, #8
  40480a:	4619      	mov	r1, r3
  40480c:	6878      	ldr	r0, [r7, #4]
  40480e:	4b32      	ldr	r3, [pc, #200]	; (4048d8 <usart_serial_init+0x1e4>)
  404810:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  404812:	6878      	ldr	r0, [r7, #4]
  404814:	4b31      	ldr	r3, [pc, #196]	; (4048dc <usart_serial_init+0x1e8>)
  404816:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404818:	6878      	ldr	r0, [r7, #4]
  40481a:	4b31      	ldr	r3, [pc, #196]	; (4048e0 <usart_serial_init+0x1ec>)
  40481c:	4798      	blx	r3
	}
# endif
# ifdef USART5
	if (USART5 == p_usart) {
  40481e:	687b      	ldr	r3, [r7, #4]
  404820:	4a38      	ldr	r2, [pc, #224]	; (404904 <usart_serial_init+0x210>)
  404822:	4293      	cmp	r3, r2
  404824:	d115      	bne.n	404852 <usart_serial_init+0x15e>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM5);
  404826:	4838      	ldr	r0, [pc, #224]	; (404908 <usart_serial_init+0x214>)
  404828:	4b28      	ldr	r3, [pc, #160]	; (4048cc <usart_serial_init+0x1d8>)
  40482a:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM5, FLEXCOM_USART);
  40482c:	2101      	movs	r1, #1
  40482e:	4836      	ldr	r0, [pc, #216]	; (404908 <usart_serial_init+0x214>)
  404830:	4b27      	ldr	r3, [pc, #156]	; (4048d0 <usart_serial_init+0x1dc>)
  404832:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART5);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404834:	4b27      	ldr	r3, [pc, #156]	; (4048d4 <usart_serial_init+0x1e0>)
  404836:	4798      	blx	r3
  404838:	4602      	mov	r2, r0
  40483a:	f107 0308 	add.w	r3, r7, #8
  40483e:	4619      	mov	r1, r3
  404840:	6878      	ldr	r0, [r7, #4]
  404842:	4b25      	ldr	r3, [pc, #148]	; (4048d8 <usart_serial_init+0x1e4>)
  404844:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  404846:	6878      	ldr	r0, [r7, #4]
  404848:	4b24      	ldr	r3, [pc, #144]	; (4048dc <usart_serial_init+0x1e8>)
  40484a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40484c:	6878      	ldr	r0, [r7, #4]
  40484e:	4b24      	ldr	r3, [pc, #144]	; (4048e0 <usart_serial_init+0x1ec>)
  404850:	4798      	blx	r3
	}
# endif
# ifdef USART6
	if (USART6 == p_usart) {
  404852:	687b      	ldr	r3, [r7, #4]
  404854:	4a2d      	ldr	r2, [pc, #180]	; (40490c <usart_serial_init+0x218>)
  404856:	4293      	cmp	r3, r2
  404858:	d115      	bne.n	404886 <usart_serial_init+0x192>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM6);
  40485a:	482d      	ldr	r0, [pc, #180]	; (404910 <usart_serial_init+0x21c>)
  40485c:	4b1b      	ldr	r3, [pc, #108]	; (4048cc <usart_serial_init+0x1d8>)
  40485e:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM6, FLEXCOM_USART);
  404860:	2101      	movs	r1, #1
  404862:	482b      	ldr	r0, [pc, #172]	; (404910 <usart_serial_init+0x21c>)
  404864:	4b1a      	ldr	r3, [pc, #104]	; (4048d0 <usart_serial_init+0x1dc>)
  404866:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART6);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  404868:	4b1a      	ldr	r3, [pc, #104]	; (4048d4 <usart_serial_init+0x1e0>)
  40486a:	4798      	blx	r3
  40486c:	4602      	mov	r2, r0
  40486e:	f107 0308 	add.w	r3, r7, #8
  404872:	4619      	mov	r1, r3
  404874:	6878      	ldr	r0, [r7, #4]
  404876:	4b18      	ldr	r3, [pc, #96]	; (4048d8 <usart_serial_init+0x1e4>)
  404878:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40487a:	6878      	ldr	r0, [r7, #4]
  40487c:	4b17      	ldr	r3, [pc, #92]	; (4048dc <usart_serial_init+0x1e8>)
  40487e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404880:	6878      	ldr	r0, [r7, #4]
  404882:	4b17      	ldr	r3, [pc, #92]	; (4048e0 <usart_serial_init+0x1ec>)
  404884:	4798      	blx	r3
	}
# endif
# ifdef USART7
	if (USART7 == p_usart) {
  404886:	687b      	ldr	r3, [r7, #4]
  404888:	4a22      	ldr	r2, [pc, #136]	; (404914 <usart_serial_init+0x220>)
  40488a:	4293      	cmp	r3, r2
  40488c:	d115      	bne.n	4048ba <usart_serial_init+0x1c6>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM7);
  40488e:	4822      	ldr	r0, [pc, #136]	; (404918 <usart_serial_init+0x224>)
  404890:	4b0e      	ldr	r3, [pc, #56]	; (4048cc <usart_serial_init+0x1d8>)
  404892:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM7, FLEXCOM_USART);
  404894:	2101      	movs	r1, #1
  404896:	4820      	ldr	r0, [pc, #128]	; (404918 <usart_serial_init+0x224>)
  404898:	4b0d      	ldr	r3, [pc, #52]	; (4048d0 <usart_serial_init+0x1dc>)
  40489a:	4798      	blx	r3
#else
		sysclk_enable_peripheral_clock(ID_USART7);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40489c:	4b0d      	ldr	r3, [pc, #52]	; (4048d4 <usart_serial_init+0x1e0>)
  40489e:	4798      	blx	r3
  4048a0:	4602      	mov	r2, r0
  4048a2:	f107 0308 	add.w	r3, r7, #8
  4048a6:	4619      	mov	r1, r3
  4048a8:	6878      	ldr	r0, [r7, #4]
  4048aa:	4b0b      	ldr	r3, [pc, #44]	; (4048d8 <usart_serial_init+0x1e4>)
  4048ac:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4048ae:	6878      	ldr	r0, [r7, #4]
  4048b0:	4b0a      	ldr	r3, [pc, #40]	; (4048dc <usart_serial_init+0x1e8>)
  4048b2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4048b4:	6878      	ldr	r0, [r7, #4]
  4048b6:	4b0a      	ldr	r3, [pc, #40]	; (4048e0 <usart_serial_init+0x1ec>)
  4048b8:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4048ba:	bf00      	nop
  4048bc:	3720      	adds	r7, #32
  4048be:	46bd      	mov	sp, r7
  4048c0:	bd80      	pop	{r7, pc}
  4048c2:	bf00      	nop
  4048c4:	4000c200 	.word	0x4000c200
  4048c8:	4000c000 	.word	0x4000c000
  4048cc:	00405b9d 	.word	0x00405b9d
  4048d0:	00405d05 	.word	0x00405d05
  4048d4:	0040458d 	.word	0x0040458d
  4048d8:	0040714d 	.word	0x0040714d
  4048dc:	004071d1 	.word	0x004071d1
  4048e0:	00407205 	.word	0x00407205
  4048e4:	40020200 	.word	0x40020200
  4048e8:	40020000 	.word	0x40020000
  4048ec:	40024200 	.word	0x40024200
  4048f0:	40024000 	.word	0x40024000
  4048f4:	40018200 	.word	0x40018200
  4048f8:	40018000 	.word	0x40018000
  4048fc:	4001c200 	.word	0x4001c200
  404900:	4001c000 	.word	0x4001c000
  404904:	40008200 	.word	0x40008200
  404908:	40008000 	.word	0x40008000
  40490c:	40040200 	.word	0x40040200
  404910:	40040000 	.word	0x40040000
  404914:	40034200 	.word	0x40034200
  404918:	40034000 	.word	0x40034000

0040491c <inv_uart_init>:
static int uart_dma_rx(inv_uart_num_t uart);


/****************************** Public Functions ******************************/
int inv_uart_init(inv_uart_init_struct_t * uart_init)
{
  40491c:	b5b0      	push	{r4, r5, r7, lr}
  40491e:	b088      	sub	sp, #32
  404920:	af00      	add	r7, sp, #0
  404922:	6078      	str	r0, [r7, #4]
	uint32_t i;
	usart_serial_options_t USART_InitStructure;
	inv_uart_num_t uart = uart_init->uart_num;
  404924:	687b      	ldr	r3, [r7, #4]
  404926:	781b      	ldrb	r3, [r3, #0]
  404928:	76fb      	strb	r3, [r7, #27]
	
	/* Don't execute this function if UART is not under reset state */
	if( (um[uart].uart_tx_state != INV_UART_STATE_RESET) ||
  40492a:	7efb      	ldrb	r3, [r7, #27]
  40492c:	4aa1      	ldr	r2, [pc, #644]	; (404bb4 <inv_uart_init+0x298>)
  40492e:	215c      	movs	r1, #92	; 0x5c
  404930:	fb01 f303 	mul.w	r3, r1, r3
  404934:	4413      	add	r3, r2
  404936:	3340      	adds	r3, #64	; 0x40
  404938:	781b      	ldrb	r3, [r3, #0]
  40493a:	b2db      	uxtb	r3, r3
  40493c:	2b00      	cmp	r3, #0
  40493e:	d109      	bne.n	404954 <inv_uart_init+0x38>
		(um[uart].uart_rx_state != INV_UART_STATE_RESET))
  404940:	7efb      	ldrb	r3, [r7, #27]
  404942:	4a9c      	ldr	r2, [pc, #624]	; (404bb4 <inv_uart_init+0x298>)
  404944:	215c      	movs	r1, #92	; 0x5c
  404946:	fb01 f303 	mul.w	r3, r1, r3
  40494a:	4413      	add	r3, r2
  40494c:	3341      	adds	r3, #65	; 0x41
  40494e:	781b      	ldrb	r3, [r3, #0]
	if( (um[uart].uart_tx_state != INV_UART_STATE_RESET) ||
  404950:	2b00      	cmp	r3, #0
  404952:	d001      	beq.n	404958 <inv_uart_init+0x3c>
		return INV_UART_ERROR_SUCCES;
  404954:	2300      	movs	r3, #0
  404956:	e129      	b.n	404bac <inv_uart_init+0x290>
	
	/* Check memory is passed in parameter for tx and rx  */
	if ((uart_init->tx_size == 0) && (uart_init->rx_size == 0))
  404958:	687b      	ldr	r3, [r7, #4]
  40495a:	899b      	ldrh	r3, [r3, #12]
  40495c:	2b00      	cmp	r3, #0
  40495e:	d106      	bne.n	40496e <inv_uart_init+0x52>
  404960:	687b      	ldr	r3, [r7, #4]
  404962:	89db      	ldrh	r3, [r3, #14]
  404964:	2b00      	cmp	r3, #0
  404966:	d102      	bne.n	40496e <inv_uart_init+0x52>
			return INV_UART_ERROR_BAD_ARG;
  404968:	f06f 0303 	mvn.w	r3, #3
  40496c:	e11e      	b.n	404bac <inv_uart_init+0x290>

	/* init structure */
	um[uart].uart_pdc = usart_get_pdc_base(um[uart].uart_ip);
  40496e:	7efc      	ldrb	r4, [r7, #27]
  404970:	7efb      	ldrb	r3, [r7, #27]
  404972:	4a90      	ldr	r2, [pc, #576]	; (404bb4 <inv_uart_init+0x298>)
  404974:	215c      	movs	r1, #92	; 0x5c
  404976:	fb01 f303 	mul.w	r3, r1, r3
  40497a:	4413      	add	r3, r2
  40497c:	681b      	ldr	r3, [r3, #0]
  40497e:	4618      	mov	r0, r3
  404980:	4b8d      	ldr	r3, [pc, #564]	; (404bb8 <inv_uart_init+0x29c>)
  404982:	4798      	blx	r3
  404984:	4601      	mov	r1, r0
  404986:	4a8b      	ldr	r2, [pc, #556]	; (404bb4 <inv_uart_init+0x298>)
  404988:	235c      	movs	r3, #92	; 0x5c
  40498a:	fb03 f304 	mul.w	r3, r3, r4
  40498e:	4413      	add	r3, r2
  404990:	3304      	adds	r3, #4
  404992:	6019      	str	r1, [r3, #0]
	um[uart].uart_tx_state = INV_UART_STATE_IDLE;	
  404994:	7efb      	ldrb	r3, [r7, #27]
  404996:	4a87      	ldr	r2, [pc, #540]	; (404bb4 <inv_uart_init+0x298>)
  404998:	215c      	movs	r1, #92	; 0x5c
  40499a:	fb01 f303 	mul.w	r3, r1, r3
  40499e:	4413      	add	r3, r2
  4049a0:	3340      	adds	r3, #64	; 0x40
  4049a2:	2201      	movs	r2, #1
  4049a4:	701a      	strb	r2, [r3, #0]
	um[uart].uart_rx_state = INV_UART_STATE_IDLE;
  4049a6:	7efb      	ldrb	r3, [r7, #27]
  4049a8:	4a82      	ldr	r2, [pc, #520]	; (404bb4 <inv_uart_init+0x298>)
  4049aa:	215c      	movs	r1, #92	; 0x5c
  4049ac:	fb01 f303 	mul.w	r3, r1, r3
  4049b0:	4413      	add	r3, r2
  4049b2:	3341      	adds	r3, #65	; 0x41
  4049b4:	2201      	movs	r2, #1
  4049b6:	701a      	strb	r2, [r3, #0]
	um[uart].uart_rx_buffer = uart_init->rx_buffer;
  4049b8:	7efb      	ldrb	r3, [r7, #27]
  4049ba:	687a      	ldr	r2, [r7, #4]
  4049bc:	6892      	ldr	r2, [r2, #8]
  4049be:	497d      	ldr	r1, [pc, #500]	; (404bb4 <inv_uart_init+0x298>)
  4049c0:	205c      	movs	r0, #92	; 0x5c
  4049c2:	fb00 f303 	mul.w	r3, r0, r3
  4049c6:	440b      	add	r3, r1
  4049c8:	3344      	adds	r3, #68	; 0x44
  4049ca:	601a      	str	r2, [r3, #0]
	um[uart].uart_tx_buffer = uart_init->tx_buffer;
  4049cc:	7efb      	ldrb	r3, [r7, #27]
  4049ce:	687a      	ldr	r2, [r7, #4]
  4049d0:	6852      	ldr	r2, [r2, #4]
  4049d2:	4978      	ldr	r1, [pc, #480]	; (404bb4 <inv_uart_init+0x298>)
  4049d4:	205c      	movs	r0, #92	; 0x5c
  4049d6:	fb00 f303 	mul.w	r3, r0, r3
  4049da:	440b      	add	r3, r1
  4049dc:	3348      	adds	r3, #72	; 0x48
  4049de:	601a      	str	r2, [r3, #0]
	um[uart].uart_rx_buffer_size = uart_init->rx_size;
  4049e0:	7efb      	ldrb	r3, [r7, #27]
  4049e2:	687a      	ldr	r2, [r7, #4]
  4049e4:	89d0      	ldrh	r0, [r2, #14]
  4049e6:	4a73      	ldr	r2, [pc, #460]	; (404bb4 <inv_uart_init+0x298>)
  4049e8:	215c      	movs	r1, #92	; 0x5c
  4049ea:	fb01 f303 	mul.w	r3, r1, r3
  4049ee:	4413      	add	r3, r2
  4049f0:	334c      	adds	r3, #76	; 0x4c
  4049f2:	4602      	mov	r2, r0
  4049f4:	801a      	strh	r2, [r3, #0]
	um[uart].uart_tx_buffer_size = uart_init->tx_size;
  4049f6:	7efb      	ldrb	r3, [r7, #27]
  4049f8:	687a      	ldr	r2, [r7, #4]
  4049fa:	8990      	ldrh	r0, [r2, #12]
  4049fc:	4a6d      	ldr	r2, [pc, #436]	; (404bb4 <inv_uart_init+0x298>)
  4049fe:	215c      	movs	r1, #92	; 0x5c
  404a00:	fb01 f303 	mul.w	r3, r1, r3
  404a04:	4413      	add	r3, r2
  404a06:	334e      	adds	r3, #78	; 0x4e
  404a08:	4602      	mov	r2, r0
  404a0a:	801a      	strh	r2, [r3, #0]
	um[uart].tx_done_cb = uart_init->tx_done_cb;
  404a0c:	7efb      	ldrb	r3, [r7, #27]
  404a0e:	687a      	ldr	r2, [r7, #4]
  404a10:	6992      	ldr	r2, [r2, #24]
  404a12:	4968      	ldr	r1, [pc, #416]	; (404bb4 <inv_uart_init+0x298>)
  404a14:	205c      	movs	r0, #92	; 0x5c
  404a16:	fb00 f303 	mul.w	r3, r0, r3
  404a1a:	440b      	add	r3, r1
  404a1c:	3354      	adds	r3, #84	; 0x54
  404a1e:	601a      	str	r2, [r3, #0]
	um[uart].tx_context = uart_init->tx_context;
  404a20:	7efb      	ldrb	r3, [r7, #27]
  404a22:	687a      	ldr	r2, [r7, #4]
  404a24:	69d2      	ldr	r2, [r2, #28]
  404a26:	4963      	ldr	r1, [pc, #396]	; (404bb4 <inv_uart_init+0x298>)
  404a28:	205c      	movs	r0, #92	; 0x5c
  404a2a:	fb00 f303 	mul.w	r3, r0, r3
  404a2e:	440b      	add	r3, r1
  404a30:	3358      	adds	r3, #88	; 0x58
  404a32:	601a      	str	r2, [r3, #0]
	
	/* Configure GPIO pins */
	for(i=0 ; i < (uint32_t) (sizeof(um[uart].uart_gpio)/sizeof(um[uart].uart_gpio[0])) ; i++) {
  404a34:	2300      	movs	r3, #0
  404a36:	61fb      	str	r3, [r7, #28]
  404a38:	e062      	b.n	404b00 <inv_uart_init+0x1e4>
		/* gpio port )= 0xffffffff means ignore this pin */
		if(um[uart].uart_gpio[i].port != 0xffffffff) {
  404a3a:	7ef9      	ldrb	r1, [r7, #27]
  404a3c:	485d      	ldr	r0, [pc, #372]	; (404bb4 <inv_uart_init+0x298>)
  404a3e:	69fa      	ldr	r2, [r7, #28]
  404a40:	4613      	mov	r3, r2
  404a42:	005b      	lsls	r3, r3, #1
  404a44:	4413      	add	r3, r2
  404a46:	009b      	lsls	r3, r3, #2
  404a48:	225c      	movs	r2, #92	; 0x5c
  404a4a:	fb02 f201 	mul.w	r2, r2, r1
  404a4e:	4413      	add	r3, r2
  404a50:	4403      	add	r3, r0
  404a52:	3310      	adds	r3, #16
  404a54:	681b      	ldr	r3, [r3, #0]
  404a56:	f1b3 3fff 	cmp.w	r3, #4294967295
  404a5a:	d04e      	beq.n	404afa <inv_uart_init+0x1de>
			ioport_set_port_mode(um[uart].uart_gpio[i].port,
  404a5c:	7ef9      	ldrb	r1, [r7, #27]
  404a5e:	4855      	ldr	r0, [pc, #340]	; (404bb4 <inv_uart_init+0x298>)
  404a60:	69fa      	ldr	r2, [r7, #28]
  404a62:	4613      	mov	r3, r2
  404a64:	005b      	lsls	r3, r3, #1
  404a66:	4413      	add	r3, r2
  404a68:	009b      	lsls	r3, r3, #2
  404a6a:	225c      	movs	r2, #92	; 0x5c
  404a6c:	fb02 f201 	mul.w	r2, r2, r1
  404a70:	4413      	add	r3, r2
  404a72:	4403      	add	r3, r0
  404a74:	3310      	adds	r3, #16
  404a76:	681c      	ldr	r4, [r3, #0]
  404a78:	7ef9      	ldrb	r1, [r7, #27]
  404a7a:	484e      	ldr	r0, [pc, #312]	; (404bb4 <inv_uart_init+0x298>)
  404a7c:	69fa      	ldr	r2, [r7, #28]
  404a7e:	4613      	mov	r3, r2
  404a80:	005b      	lsls	r3, r3, #1
  404a82:	4413      	add	r3, r2
  404a84:	009b      	lsls	r3, r3, #2
  404a86:	225c      	movs	r2, #92	; 0x5c
  404a88:	fb02 f201 	mul.w	r2, r2, r1
  404a8c:	4413      	add	r3, r2
  404a8e:	4403      	add	r3, r0
  404a90:	3314      	adds	r3, #20
  404a92:	681d      	ldr	r5, [r3, #0]
  404a94:	7ef9      	ldrb	r1, [r7, #27]
  404a96:	4847      	ldr	r0, [pc, #284]	; (404bb4 <inv_uart_init+0x298>)
  404a98:	69fa      	ldr	r2, [r7, #28]
  404a9a:	4613      	mov	r3, r2
  404a9c:	005b      	lsls	r3, r3, #1
  404a9e:	4413      	add	r3, r2
  404aa0:	009b      	lsls	r3, r3, #2
  404aa2:	225c      	movs	r2, #92	; 0x5c
  404aa4:	fb02 f201 	mul.w	r2, r2, r1
  404aa8:	4413      	add	r3, r2
  404aaa:	4403      	add	r3, r0
  404aac:	3318      	adds	r3, #24
  404aae:	681b      	ldr	r3, [r3, #0]
  404ab0:	461a      	mov	r2, r3
  404ab2:	4629      	mov	r1, r5
  404ab4:	4620      	mov	r0, r4
  404ab6:	4b41      	ldr	r3, [pc, #260]	; (404bbc <inv_uart_init+0x2a0>)
  404ab8:	4798      	blx	r3
								 um[uart].uart_gpio[i].pin_id,
								 um[uart].uart_gpio[i].mode_mux);
			ioport_disable_port(um[uart].uart_gpio[i].port,
  404aba:	7ef9      	ldrb	r1, [r7, #27]
  404abc:	483d      	ldr	r0, [pc, #244]	; (404bb4 <inv_uart_init+0x298>)
  404abe:	69fa      	ldr	r2, [r7, #28]
  404ac0:	4613      	mov	r3, r2
  404ac2:	005b      	lsls	r3, r3, #1
  404ac4:	4413      	add	r3, r2
  404ac6:	009b      	lsls	r3, r3, #2
  404ac8:	225c      	movs	r2, #92	; 0x5c
  404aca:	fb02 f201 	mul.w	r2, r2, r1
  404ace:	4413      	add	r3, r2
  404ad0:	4403      	add	r3, r0
  404ad2:	3310      	adds	r3, #16
  404ad4:	681c      	ldr	r4, [r3, #0]
  404ad6:	7ef9      	ldrb	r1, [r7, #27]
  404ad8:	4836      	ldr	r0, [pc, #216]	; (404bb4 <inv_uart_init+0x298>)
  404ada:	69fa      	ldr	r2, [r7, #28]
  404adc:	4613      	mov	r3, r2
  404ade:	005b      	lsls	r3, r3, #1
  404ae0:	4413      	add	r3, r2
  404ae2:	009b      	lsls	r3, r3, #2
  404ae4:	225c      	movs	r2, #92	; 0x5c
  404ae6:	fb02 f201 	mul.w	r2, r2, r1
  404aea:	4413      	add	r3, r2
  404aec:	4403      	add	r3, r0
  404aee:	3314      	adds	r3, #20
  404af0:	681b      	ldr	r3, [r3, #0]
  404af2:	4619      	mov	r1, r3
  404af4:	4620      	mov	r0, r4
  404af6:	4b32      	ldr	r3, [pc, #200]	; (404bc0 <inv_uart_init+0x2a4>)
  404af8:	4798      	blx	r3
	for(i=0 ; i < (uint32_t) (sizeof(um[uart].uart_gpio)/sizeof(um[uart].uart_gpio[0])) ; i++) {
  404afa:	69fb      	ldr	r3, [r7, #28]
  404afc:	3301      	adds	r3, #1
  404afe:	61fb      	str	r3, [r7, #28]
  404b00:	69fb      	ldr	r3, [r7, #28]
  404b02:	2b03      	cmp	r3, #3
  404b04:	d999      	bls.n	404a3a <inv_uart_init+0x11e>
	 *  - 8bits
	 *  - 1Stop
	 *  - No parity
	 *  - baudrate from input parameter
	 */
	USART_InitStructure.baudrate = uart_init->baudrate;
  404b06:	687b      	ldr	r3, [r7, #4]
  404b08:	691b      	ldr	r3, [r3, #16]
  404b0a:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.charlength = US_MR_CHRL_8_BIT;
  404b0c:	23c0      	movs	r3, #192	; 0xc0
  404b0e:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.stopbits = US_MR_NBSTOP_1_BIT;
  404b10:	2300      	movs	r3, #0
  404b12:	617b      	str	r3, [r7, #20]
	USART_InitStructure.paritytype = US_MR_PAR_NO;
  404b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404b18:	613b      	str	r3, [r7, #16]

	
	sysclk_enable_peripheral_clock(um[uart].uart_periph_id);
  404b1a:	7efb      	ldrb	r3, [r7, #27]
  404b1c:	4a25      	ldr	r2, [pc, #148]	; (404bb4 <inv_uart_init+0x298>)
  404b1e:	215c      	movs	r1, #92	; 0x5c
  404b20:	fb01 f303 	mul.w	r3, r1, r3
  404b24:	4413      	add	r3, r2
  404b26:	330c      	adds	r3, #12
  404b28:	681b      	ldr	r3, [r3, #0]
  404b2a:	4618      	mov	r0, r3
  404b2c:	4b25      	ldr	r3, [pc, #148]	; (404bc4 <inv_uart_init+0x2a8>)
  404b2e:	4798      	blx	r3
	
	/* initialize and enable UART */
	usart_serial_init(um[uart].uart_ip, &USART_InitStructure);
  404b30:	7efb      	ldrb	r3, [r7, #27]
  404b32:	4a20      	ldr	r2, [pc, #128]	; (404bb4 <inv_uart_init+0x298>)
  404b34:	215c      	movs	r1, #92	; 0x5c
  404b36:	fb01 f303 	mul.w	r3, r1, r3
  404b3a:	4413      	add	r3, r2
  404b3c:	681b      	ldr	r3, [r3, #0]
  404b3e:	f107 0208 	add.w	r2, r7, #8
  404b42:	4611      	mov	r1, r2
  404b44:	4618      	mov	r0, r3
  404b46:	4b20      	ldr	r3, [pc, #128]	; (404bc8 <inv_uart_init+0x2ac>)
  404b48:	4798      	blx	r3
	
	/*
	 * Enable hw handshake if required.
	 * Note: Flow control is only supported on INV_UART_SENSOR_CTRL
	 */
	if(uart_init->flow_ctrl != INV_UART_FLOW_CONTROL_NONE) {
  404b4a:	687b      	ldr	r3, [r7, #4]
  404b4c:	7d1b      	ldrb	r3, [r3, #20]
  404b4e:	2b00      	cmp	r3, #0
  404b50:	d010      	beq.n	404b74 <inv_uart_init+0x258>
		if(uart == INV_UART_SENSOR_CTRL)
  404b52:	7efb      	ldrb	r3, [r7, #27]
  404b54:	2b00      	cmp	r3, #0
  404b56:	d10a      	bne.n	404b6e <inv_uart_init+0x252>
			um[INV_UART_SENSOR_CTRL].uart_ip->US_MR = (um[INV_UART_SENSOR_CTRL].uart_ip->US_MR & ~US_MR_USART_MODE_Msk) |
  404b58:	4b16      	ldr	r3, [pc, #88]	; (404bb4 <inv_uart_init+0x298>)
  404b5a:	681b      	ldr	r3, [r3, #0]
  404b5c:	4a15      	ldr	r2, [pc, #84]	; (404bb4 <inv_uart_init+0x298>)
  404b5e:	6812      	ldr	r2, [r2, #0]
  404b60:	6852      	ldr	r2, [r2, #4]
  404b62:	f022 020f 	bic.w	r2, r2, #15
  404b66:	f042 0202 	orr.w	r2, r2, #2
  404b6a:	605a      	str	r2, [r3, #4]
  404b6c:	e002      	b.n	404b74 <inv_uart_init+0x258>
										US_MR_USART_MODE_HW_HANDSHAKING;
		else
			return INV_UART_ERROR_BAD_ARG;
  404b6e:	f06f 0303 	mvn.w	r3, #3
  404b72:	e01b      	b.n	404bac <inv_uart_init+0x290>
	
	/* 
	 * UART TX specific configuration:
	 *  - Enable UART interrupt at NVIC level
	 */
	NVIC_EnableIRQ((IRQn_Type)um[uart].uart_it_nb);
  404b74:	7efb      	ldrb	r3, [r7, #27]
  404b76:	4a0f      	ldr	r2, [pc, #60]	; (404bb4 <inv_uart_init+0x298>)
  404b78:	215c      	movs	r1, #92	; 0x5c
  404b7a:	fb01 f303 	mul.w	r3, r1, r3
  404b7e:	4413      	add	r3, r2
  404b80:	3308      	adds	r3, #8
  404b82:	681b      	ldr	r3, [r3, #0]
  404b84:	b25b      	sxtb	r3, r3
  404b86:	4618      	mov	r0, r3
  404b88:	4b10      	ldr	r3, [pc, #64]	; (404bcc <inv_uart_init+0x2b0>)
  404b8a:	4798      	blx	r3
	/* 
	 * UART RX specific configuration:
	 *  - Set circular buffer mode for RX
	 *  - No interrupt
	 */
	um[uart].uart_pdc->PERIPH_PTCR = PERIPH_PTCR_RXCBEN;
  404b8c:	7efb      	ldrb	r3, [r7, #27]
  404b8e:	4a09      	ldr	r2, [pc, #36]	; (404bb4 <inv_uart_init+0x298>)
  404b90:	215c      	movs	r1, #92	; 0x5c
  404b92:	fb01 f303 	mul.w	r3, r1, r3
  404b96:	4413      	add	r3, r2
  404b98:	3304      	adds	r3, #4
  404b9a:	681b      	ldr	r3, [r3, #0]
  404b9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  404ba0:	621a      	str	r2, [r3, #32]
	
	/* Trigger a DMA RX. 
	 * Note: DMA is in circular mode. refer to the device datasheet for further details.
	 */
	return uart_dma_rx(uart);
  404ba2:	7efb      	ldrb	r3, [r7, #27]
  404ba4:	4618      	mov	r0, r3
  404ba6:	4b0a      	ldr	r3, [pc, #40]	; (404bd0 <inv_uart_init+0x2b4>)
  404ba8:	4798      	blx	r3
  404baa:	4603      	mov	r3, r0
}
  404bac:	4618      	mov	r0, r3
  404bae:	3720      	adds	r7, #32
  404bb0:	46bd      	mov	sp, r7
  404bb2:	bdb0      	pop	{r4, r5, r7, pc}
  404bb4:	200023f4 	.word	0x200023f4
  404bb8:	004072c1 	.word	0x004072c1
  404bbc:	004045f1 	.word	0x004045f1
  404bc0:	004045bd 	.word	0x004045bd
  404bc4:	004045a1 	.word	0x004045a1
  404bc8:	004046f5 	.word	0x004046f5
  404bcc:	004044c9 	.word	0x004044c9
  404bd0:	00404f15 	.word	0x00404f15

00404bd4 <inv_uart_puts>:
	
	return inv_uart_tx_txfer(uart, &txfer);
}

int inv_uart_puts(inv_uart_num_t uart, const char * s, unsigned short l)
{
  404bd4:	b580      	push	{r7, lr}
  404bd6:	b084      	sub	sp, #16
  404bd8:	af00      	add	r7, sp, #0
  404bda:	4603      	mov	r3, r0
  404bdc:	6039      	str	r1, [r7, #0]
  404bde:	71fb      	strb	r3, [r7, #7]
  404be0:	4613      	mov	r3, r2
  404be2:	80bb      	strh	r3, [r7, #4]
	inv_uart_tx_transfer_t txfer;
	
	txfer.data = (uint8_t *)s;
  404be4:	683b      	ldr	r3, [r7, #0]
  404be6:	60bb      	str	r3, [r7, #8]
	txfer.len = (uint16_t)l;
  404be8:	88bb      	ldrh	r3, [r7, #4]
  404bea:	81bb      	strh	r3, [r7, #12]
	
	return inv_uart_tx_txfer(uart, &txfer);
  404bec:	f107 0208 	add.w	r2, r7, #8
  404bf0:	79fb      	ldrb	r3, [r7, #7]
  404bf2:	4611      	mov	r1, r2
  404bf4:	4618      	mov	r0, r3
  404bf6:	4b03      	ldr	r3, [pc, #12]	; (404c04 <inv_uart_puts+0x30>)
  404bf8:	4798      	blx	r3
  404bfa:	4603      	mov	r3, r0
}
  404bfc:	4618      	mov	r0, r3
  404bfe:	3710      	adds	r7, #16
  404c00:	46bd      	mov	sp, r7
  404c02:	bd80      	pop	{r7, pc}
  404c04:	00404c09 	.word	0x00404c09

00404c08 <inv_uart_tx_txfer>:

int inv_uart_tx_txfer(inv_uart_num_t uart, inv_uart_tx_transfer_t * txfer)
{
  404c08:	b580      	push	{r7, lr}
  404c0a:	b088      	sub	sp, #32
  404c0c:	af00      	add	r7, sp, #0
  404c0e:	4603      	mov	r3, r0
  404c10:	6039      	str	r1, [r7, #0]
  404c12:	71fb      	strb	r3, [r7, #7]
	int rc = INV_UART_ERROR_SUCCES;
  404c14:	2300      	movs	r3, #0
  404c16:	61fb      	str	r3, [r7, #28]
	inv_uart_state_t uart_tx_state;
	int timeout = 1000;
  404c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  404c1c:	61bb      	str	r3, [r7, #24]
	
	uart_tx_state = inv_uart_tx_get_state(uart);
  404c1e:	79fb      	ldrb	r3, [r7, #7]
  404c20:	4618      	mov	r0, r3
  404c22:	4b57      	ldr	r3, [pc, #348]	; (404d80 <inv_uart_tx_txfer+0x178>)
  404c24:	4798      	blx	r3
  404c26:	4603      	mov	r3, r0
  404c28:	75fb      	strb	r3, [r7, #23]
	
	if(uart_tx_state == INV_UART_STATE_IDLE) {
  404c2a:	7dfb      	ldrb	r3, [r7, #23]
  404c2c:	2b01      	cmp	r3, #1
  404c2e:	f040 809b 	bne.w	404d68 <inv_uart_tx_txfer+0x160>
		if (txfer->len > um[uart].uart_tx_buffer_size) {
  404c32:	683b      	ldr	r3, [r7, #0]
  404c34:	889a      	ldrh	r2, [r3, #4]
  404c36:	79fb      	ldrb	r3, [r7, #7]
  404c38:	4952      	ldr	r1, [pc, #328]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404c3a:	205c      	movs	r0, #92	; 0x5c
  404c3c:	fb00 f303 	mul.w	r3, r0, r3
  404c40:	440b      	add	r3, r1
  404c42:	334e      	adds	r3, #78	; 0x4e
  404c44:	881b      	ldrh	r3, [r3, #0]
  404c46:	429a      	cmp	r2, r3
  404c48:	d903      	bls.n	404c52 <inv_uart_tx_txfer+0x4a>
			/* Requested transfer size does fit in the internal buffers */
			rc = INV_UART_ERROR_MEMORY;
  404c4a:	f06f 0302 	mvn.w	r3, #2
  404c4e:	61fb      	str	r3, [r7, #28]
  404c50:	e090      	b.n	404d74 <inv_uart_tx_txfer+0x16c>
		} else {
			pdc_packet_t pdc_usart_packet;
			uint32_t pdc_status;

			inv_disable_irq();
  404c52:	4b4d      	ldr	r3, [pc, #308]	; (404d88 <inv_uart_tx_txfer+0x180>)
  404c54:	4798      	blx	r3
			
			/* Double-check if there is already an on-going transfer in TX */
			pdc_status = pdc_read_status(um[uart].uart_pdc);
  404c56:	79fb      	ldrb	r3, [r7, #7]
  404c58:	4a4a      	ldr	r2, [pc, #296]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404c5a:	215c      	movs	r1, #92	; 0x5c
  404c5c:	fb01 f303 	mul.w	r3, r1, r3
  404c60:	4413      	add	r3, r2
  404c62:	3304      	adds	r3, #4
  404c64:	681b      	ldr	r3, [r3, #0]
  404c66:	4618      	mov	r0, r3
  404c68:	4b48      	ldr	r3, [pc, #288]	; (404d8c <inv_uart_tx_txfer+0x184>)
  404c6a:	4798      	blx	r3
  404c6c:	6138      	str	r0, [r7, #16]
			if( (pdc_status & PERIPH_PTCR_TXTEN) != 0) {
  404c6e:	693b      	ldr	r3, [r7, #16]
  404c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404c74:	2b00      	cmp	r3, #0
  404c76:	d004      	beq.n	404c82 <inv_uart_tx_txfer+0x7a>
				inv_enable_irq();
  404c78:	4b45      	ldr	r3, [pc, #276]	; (404d90 <inv_uart_tx_txfer+0x188>)
  404c7a:	4798      	blx	r3
				return INV_UART_ERROR_BUSY;
  404c7c:	f06f 0301 	mvn.w	r3, #1
  404c80:	e079      	b.n	404d76 <inv_uart_tx_txfer+0x16e>
			}

			/* Copy the data to be transfered into the internal buffers */
			memcpy((void*)um[uart].uart_tx_buffer, txfer->data, txfer->len);
  404c82:	79fb      	ldrb	r3, [r7, #7]
  404c84:	4a3f      	ldr	r2, [pc, #252]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404c86:	215c      	movs	r1, #92	; 0x5c
  404c88:	fb01 f303 	mul.w	r3, r1, r3
  404c8c:	4413      	add	r3, r2
  404c8e:	3348      	adds	r3, #72	; 0x48
  404c90:	6818      	ldr	r0, [r3, #0]
  404c92:	683b      	ldr	r3, [r7, #0]
  404c94:	6819      	ldr	r1, [r3, #0]
  404c96:	683b      	ldr	r3, [r7, #0]
  404c98:	889b      	ldrh	r3, [r3, #4]
  404c9a:	461a      	mov	r2, r3
  404c9c:	4b3d      	ldr	r3, [pc, #244]	; (404d94 <inv_uart_tx_txfer+0x18c>)
  404c9e:	4798      	blx	r3
			
			/* Set address and size of data to be transfered  and configure PDC */
			pdc_usart_packet.ul_addr = (uint32_t)um[uart].uart_tx_buffer;
  404ca0:	79fb      	ldrb	r3, [r7, #7]
  404ca2:	4a38      	ldr	r2, [pc, #224]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404ca4:	215c      	movs	r1, #92	; 0x5c
  404ca6:	fb01 f303 	mul.w	r3, r1, r3
  404caa:	4413      	add	r3, r2
  404cac:	3348      	adds	r3, #72	; 0x48
  404cae:	681b      	ldr	r3, [r3, #0]
  404cb0:	60bb      	str	r3, [r7, #8]
			pdc_usart_packet.ul_size = txfer->len;
  404cb2:	683b      	ldr	r3, [r7, #0]
  404cb4:	889b      	ldrh	r3, [r3, #4]
  404cb6:	60fb      	str	r3, [r7, #12]
			
			pdc_tx_init(um[uart].uart_pdc, &pdc_usart_packet, NULL);
  404cb8:	79fb      	ldrb	r3, [r7, #7]
  404cba:	4a32      	ldr	r2, [pc, #200]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404cbc:	215c      	movs	r1, #92	; 0x5c
  404cbe:	fb01 f303 	mul.w	r3, r1, r3
  404cc2:	4413      	add	r3, r2
  404cc4:	3304      	adds	r3, #4
  404cc6:	681b      	ldr	r3, [r3, #0]
  404cc8:	f107 0108 	add.w	r1, r7, #8
  404ccc:	2200      	movs	r2, #0
  404cce:	4618      	mov	r0, r3
  404cd0:	4b31      	ldr	r3, [pc, #196]	; (404d98 <inv_uart_tx_txfer+0x190>)
  404cd2:	4798      	blx	r3

			/* Enable DMA transfer in TX */
			pdc_enable_transfer(um[uart].uart_pdc, PERIPH_PTCR_TXTEN);
  404cd4:	79fb      	ldrb	r3, [r7, #7]
  404cd6:	4a2b      	ldr	r2, [pc, #172]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404cd8:	215c      	movs	r1, #92	; 0x5c
  404cda:	fb01 f303 	mul.w	r3, r1, r3
  404cde:	4413      	add	r3, r2
  404ce0:	3304      	adds	r3, #4
  404ce2:	681b      	ldr	r3, [r3, #0]
  404ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
  404ce8:	4618      	mov	r0, r3
  404cea:	4b2c      	ldr	r3, [pc, #176]	; (404d9c <inv_uart_tx_txfer+0x194>)
  404cec:	4798      	blx	r3

			/* Enable UART TX buffer empty interrupt. Corresponding NVIC interrupt 
			 * was already enabled by uart_init(). */
			usart_enable_interrupt(um[uart].uart_ip, US_IER_TXBUFE);
  404cee:	79fb      	ldrb	r3, [r7, #7]
  404cf0:	4a24      	ldr	r2, [pc, #144]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404cf2:	215c      	movs	r1, #92	; 0x5c
  404cf4:	fb01 f303 	mul.w	r3, r1, r3
  404cf8:	4413      	add	r3, r2
  404cfa:	681b      	ldr	r3, [r3, #0]
  404cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  404d00:	4618      	mov	r0, r3
  404d02:	4b27      	ldr	r3, [pc, #156]	; (404da0 <inv_uart_tx_txfer+0x198>)
  404d04:	4798      	blx	r3

			um[uart].uart_tx_state = INV_UART_STATE_BUSY_TX;
  404d06:	79fb      	ldrb	r3, [r7, #7]
  404d08:	4a1e      	ldr	r2, [pc, #120]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404d0a:	215c      	movs	r1, #92	; 0x5c
  404d0c:	fb01 f303 	mul.w	r3, r1, r3
  404d10:	4413      	add	r3, r2
  404d12:	3340      	adds	r3, #64	; 0x40
  404d14:	2202      	movs	r2, #2
  404d16:	701a      	strb	r2, [r3, #0]
			
			/* Wait for the stream to be enabled */
			while (((pdc_read_status(um[uart].uart_pdc) & PERIPH_PTCR_TXTEN) == 0) && (timeout-- > 0));
  404d18:	bf00      	nop
  404d1a:	79fb      	ldrb	r3, [r7, #7]
  404d1c:	4a19      	ldr	r2, [pc, #100]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404d1e:	215c      	movs	r1, #92	; 0x5c
  404d20:	fb01 f303 	mul.w	r3, r1, r3
  404d24:	4413      	add	r3, r2
  404d26:	3304      	adds	r3, #4
  404d28:	681b      	ldr	r3, [r3, #0]
  404d2a:	4618      	mov	r0, r3
  404d2c:	4b17      	ldr	r3, [pc, #92]	; (404d8c <inv_uart_tx_txfer+0x184>)
  404d2e:	4798      	blx	r3
  404d30:	4603      	mov	r3, r0
  404d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404d36:	2b00      	cmp	r3, #0
  404d38:	d104      	bne.n	404d44 <inv_uart_tx_txfer+0x13c>
  404d3a:	69bb      	ldr	r3, [r7, #24]
  404d3c:	1e5a      	subs	r2, r3, #1
  404d3e:	61ba      	str	r2, [r7, #24]
  404d40:	2b00      	cmp	r3, #0
  404d42:	dcea      	bgt.n	404d1a <inv_uart_tx_txfer+0x112>
			if (timeout == 0) {
  404d44:	69bb      	ldr	r3, [r7, #24]
  404d46:	2b00      	cmp	r3, #0
  404d48:	d10b      	bne.n	404d62 <inv_uart_tx_txfer+0x15a>
				/* For some reason, the transfer did not start */
				um[uart].uart_tx_state = INV_UART_STATE_IDLE;
  404d4a:	79fb      	ldrb	r3, [r7, #7]
  404d4c:	4a0d      	ldr	r2, [pc, #52]	; (404d84 <inv_uart_tx_txfer+0x17c>)
  404d4e:	215c      	movs	r1, #92	; 0x5c
  404d50:	fb01 f303 	mul.w	r3, r1, r3
  404d54:	4413      	add	r3, r2
  404d56:	3340      	adds	r3, #64	; 0x40
  404d58:	2201      	movs	r2, #1
  404d5a:	701a      	strb	r2, [r3, #0]
				rc = INV_UART_ERROR;
  404d5c:	f04f 33ff 	mov.w	r3, #4294967295
  404d60:	61fb      	str	r3, [r7, #28]
			}
			
			inv_enable_irq();
  404d62:	4b0b      	ldr	r3, [pc, #44]	; (404d90 <inv_uart_tx_txfer+0x188>)
  404d64:	4798      	blx	r3
  404d66:	e005      	b.n	404d74 <inv_uart_tx_txfer+0x16c>
		}
	} else if(uart_tx_state == INV_UART_STATE_BUSY_TX) {
  404d68:	7dfb      	ldrb	r3, [r7, #23]
  404d6a:	2b02      	cmp	r3, #2
  404d6c:	d102      	bne.n	404d74 <inv_uart_tx_txfer+0x16c>
		/* A transfer is already on-going */
		rc = INV_UART_ERROR_BUSY;
  404d6e:	f06f 0301 	mvn.w	r3, #1
  404d72:	61fb      	str	r3, [r7, #28]
	}

	return rc;
  404d74:	69fb      	ldr	r3, [r7, #28]
}
  404d76:	4618      	mov	r0, r3
  404d78:	3720      	adds	r7, #32
  404d7a:	46bd      	mov	sp, r7
  404d7c:	bd80      	pop	{r7, pc}
  404d7e:	bf00      	nop
  404d80:	00404ee9 	.word	0x00404ee9
  404d84:	200023f4 	.word	0x200023f4
  404d88:	00402911 	.word	0x00402911
  404d8c:	00405e0f 	.word	0x00405e0f
  404d90:	00402939 	.word	0x00402939
  404d94:	00408661 	.word	0x00408661
  404d98:	00405d23 	.word	0x00405d23
  404d9c:	00405dcb 	.word	0x00405dcb
  404da0:	00407239 	.word	0x00407239

00404da4 <inv_uart_getc>:

int inv_uart_getc(inv_uart_num_t uart)
{
  404da4:	b5b0      	push	{r4, r5, r7, lr}
  404da6:	b084      	sub	sp, #16
  404da8:	af00      	add	r7, sp, #0
  404daa:	4603      	mov	r3, r0
  404dac:	71fb      	strb	r3, [r7, #7]
	int data = EOF;
  404dae:	f04f 33ff 	mov.w	r3, #4294967295
  404db2:	60fb      	str	r3, [r7, #12]

	/* Check if there is something in the RX FIFO */
	if(inv_uart_available(uart) > 0) {
  404db4:	79fb      	ldrb	r3, [r7, #7]
  404db6:	4618      	mov	r0, r3
  404db8:	4b26      	ldr	r3, [pc, #152]	; (404e54 <inv_uart_getc+0xb0>)
  404dba:	4798      	blx	r3
  404dbc:	4603      	mov	r3, r0
  404dbe:	2b00      	cmp	r3, #0
  404dc0:	dd43      	ble.n	404e4a <inv_uart_getc+0xa6>
		inv_disable_irq();
  404dc2:	4b25      	ldr	r3, [pc, #148]	; (404e58 <inv_uart_getc+0xb4>)
  404dc4:	4798      	blx	r3
		/* Pop the data from the RX FIFO and increment the tail */
		data = um[uart].uart_rx_buffer[um[uart].uart_rx_buffer_tail++];
  404dc6:	79fb      	ldrb	r3, [r7, #7]
  404dc8:	4a24      	ldr	r2, [pc, #144]	; (404e5c <inv_uart_getc+0xb8>)
  404dca:	215c      	movs	r1, #92	; 0x5c
  404dcc:	fb01 f303 	mul.w	r3, r1, r3
  404dd0:	4413      	add	r3, r2
  404dd2:	3344      	adds	r3, #68	; 0x44
  404dd4:	6819      	ldr	r1, [r3, #0]
  404dd6:	79fb      	ldrb	r3, [r7, #7]
  404dd8:	4820      	ldr	r0, [pc, #128]	; (404e5c <inv_uart_getc+0xb8>)
  404dda:	225c      	movs	r2, #92	; 0x5c
  404ddc:	fb02 f203 	mul.w	r2, r2, r3
  404de0:	4402      	add	r2, r0
  404de2:	3250      	adds	r2, #80	; 0x50
  404de4:	8812      	ldrh	r2, [r2, #0]
  404de6:	b292      	uxth	r2, r2
  404de8:	1c50      	adds	r0, r2, #1
  404dea:	b285      	uxth	r5, r0
  404dec:	481b      	ldr	r0, [pc, #108]	; (404e5c <inv_uart_getc+0xb8>)
  404dee:	245c      	movs	r4, #92	; 0x5c
  404df0:	fb04 f303 	mul.w	r3, r4, r3
  404df4:	4403      	add	r3, r0
  404df6:	3350      	adds	r3, #80	; 0x50
  404df8:	4628      	mov	r0, r5
  404dfa:	8018      	strh	r0, [r3, #0]
  404dfc:	4613      	mov	r3, r2
  404dfe:	440b      	add	r3, r1
  404e00:	781b      	ldrb	r3, [r3, #0]
  404e02:	b2db      	uxtb	r3, r3
  404e04:	60fb      	str	r3, [r7, #12]
		/* Tail rollover */
		um[uart].uart_rx_buffer_tail %= um[uart].uart_rx_buffer_size;
  404e06:	79f9      	ldrb	r1, [r7, #7]
  404e08:	79fb      	ldrb	r3, [r7, #7]
  404e0a:	4a14      	ldr	r2, [pc, #80]	; (404e5c <inv_uart_getc+0xb8>)
  404e0c:	205c      	movs	r0, #92	; 0x5c
  404e0e:	fb00 f303 	mul.w	r3, r0, r3
  404e12:	4413      	add	r3, r2
  404e14:	3350      	adds	r3, #80	; 0x50
  404e16:	881b      	ldrh	r3, [r3, #0]
  404e18:	b29b      	uxth	r3, r3
  404e1a:	79fa      	ldrb	r2, [r7, #7]
  404e1c:	480f      	ldr	r0, [pc, #60]	; (404e5c <inv_uart_getc+0xb8>)
  404e1e:	245c      	movs	r4, #92	; 0x5c
  404e20:	fb04 f202 	mul.w	r2, r4, r2
  404e24:	4402      	add	r2, r0
  404e26:	324c      	adds	r2, #76	; 0x4c
  404e28:	8812      	ldrh	r2, [r2, #0]
  404e2a:	fbb3 f0f2 	udiv	r0, r3, r2
  404e2e:	fb02 f200 	mul.w	r2, r2, r0
  404e32:	1a9b      	subs	r3, r3, r2
  404e34:	b298      	uxth	r0, r3
  404e36:	4a09      	ldr	r2, [pc, #36]	; (404e5c <inv_uart_getc+0xb8>)
  404e38:	235c      	movs	r3, #92	; 0x5c
  404e3a:	fb03 f301 	mul.w	r3, r3, r1
  404e3e:	4413      	add	r3, r2
  404e40:	3350      	adds	r3, #80	; 0x50
  404e42:	4602      	mov	r2, r0
  404e44:	801a      	strh	r2, [r3, #0]
		inv_enable_irq();
  404e46:	4b06      	ldr	r3, [pc, #24]	; (404e60 <inv_uart_getc+0xbc>)
  404e48:	4798      	blx	r3
	}

	return data;
  404e4a:	68fb      	ldr	r3, [r7, #12]
}
  404e4c:	4618      	mov	r0, r3
  404e4e:	3710      	adds	r7, #16
  404e50:	46bd      	mov	sp, r7
  404e52:	bdb0      	pop	{r4, r5, r7, pc}
  404e54:	00404e65 	.word	0x00404e65
  404e58:	00402911 	.word	0x00402911
  404e5c:	200023f4 	.word	0x200023f4
  404e60:	00402939 	.word	0x00402939

00404e64 <inv_uart_available>:

int inv_uart_available(inv_uart_num_t uart)
{
  404e64:	b590      	push	{r4, r7, lr}
  404e66:	b085      	sub	sp, #20
  404e68:	af00      	add	r7, sp, #0
  404e6a:	4603      	mov	r3, r0
  404e6c:	71fb      	strb	r3, [r7, #7]
	uint16_t head = um[uart].uart_rx_buffer_size - pdc_read_rx_counter(um[uart].uart_pdc);
  404e6e:	79fb      	ldrb	r3, [r7, #7]
  404e70:	4a1b      	ldr	r2, [pc, #108]	; (404ee0 <inv_uart_available+0x7c>)
  404e72:	215c      	movs	r1, #92	; 0x5c
  404e74:	fb01 f303 	mul.w	r3, r1, r3
  404e78:	4413      	add	r3, r2
  404e7a:	334c      	adds	r3, #76	; 0x4c
  404e7c:	881c      	ldrh	r4, [r3, #0]
  404e7e:	79fb      	ldrb	r3, [r7, #7]
  404e80:	4a17      	ldr	r2, [pc, #92]	; (404ee0 <inv_uart_available+0x7c>)
  404e82:	215c      	movs	r1, #92	; 0x5c
  404e84:	fb01 f303 	mul.w	r3, r1, r3
  404e88:	4413      	add	r3, r2
  404e8a:	3304      	adds	r3, #4
  404e8c:	681b      	ldr	r3, [r3, #0]
  404e8e:	4618      	mov	r0, r3
  404e90:	4b14      	ldr	r3, [pc, #80]	; (404ee4 <inv_uart_available+0x80>)
  404e92:	4798      	blx	r3
  404e94:	4603      	mov	r3, r0
  404e96:	b29b      	uxth	r3, r3
  404e98:	1ae3      	subs	r3, r4, r3
  404e9a:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = um[uart].uart_rx_buffer_tail;
  404e9c:	79fb      	ldrb	r3, [r7, #7]
  404e9e:	4a10      	ldr	r2, [pc, #64]	; (404ee0 <inv_uart_available+0x7c>)
  404ea0:	215c      	movs	r1, #92	; 0x5c
  404ea2:	fb01 f303 	mul.w	r3, r1, r3
  404ea6:	4413      	add	r3, r2
  404ea8:	3350      	adds	r3, #80	; 0x50
  404eaa:	881b      	ldrh	r3, [r3, #0]
  404eac:	81bb      	strh	r3, [r7, #12]

	if(head >= tail)
  404eae:	89fa      	ldrh	r2, [r7, #14]
  404eb0:	89bb      	ldrh	r3, [r7, #12]
  404eb2:	429a      	cmp	r2, r3
  404eb4:	d303      	bcc.n	404ebe <inv_uart_available+0x5a>
		return (int)(head - tail);
  404eb6:	89fa      	ldrh	r2, [r7, #14]
  404eb8:	89bb      	ldrh	r3, [r7, #12]
  404eba:	1ad3      	subs	r3, r2, r3
  404ebc:	e00c      	b.n	404ed8 <inv_uart_available+0x74>
	else
		return (int)(um[uart].uart_rx_buffer_size - (tail - head));
  404ebe:	79fb      	ldrb	r3, [r7, #7]
  404ec0:	4a07      	ldr	r2, [pc, #28]	; (404ee0 <inv_uart_available+0x7c>)
  404ec2:	215c      	movs	r1, #92	; 0x5c
  404ec4:	fb01 f303 	mul.w	r3, r1, r3
  404ec8:	4413      	add	r3, r2
  404eca:	334c      	adds	r3, #76	; 0x4c
  404ecc:	881b      	ldrh	r3, [r3, #0]
  404ece:	4619      	mov	r1, r3
  404ed0:	89ba      	ldrh	r2, [r7, #12]
  404ed2:	89fb      	ldrh	r3, [r7, #14]
  404ed4:	1ad3      	subs	r3, r2, r3
  404ed6:	1acb      	subs	r3, r1, r3
}
  404ed8:	4618      	mov	r0, r3
  404eda:	3714      	adds	r7, #20
  404edc:	46bd      	mov	sp, r7
  404ede:	bd90      	pop	{r4, r7, pc}
  404ee0:	200023f4 	.word	0x200023f4
  404ee4:	00405e27 	.word	0x00405e27

00404ee8 <inv_uart_tx_get_state>:
	else
		return INV_UART_FLOW_CONTROL_NONE;
}

inv_uart_state_t inv_uart_tx_get_state(inv_uart_num_t uart)
{	
  404ee8:	b480      	push	{r7}
  404eea:	b083      	sub	sp, #12
  404eec:	af00      	add	r7, sp, #0
  404eee:	4603      	mov	r3, r0
  404ef0:	71fb      	strb	r3, [r7, #7]
	return um[uart].uart_tx_state;
  404ef2:	79fb      	ldrb	r3, [r7, #7]
  404ef4:	4a06      	ldr	r2, [pc, #24]	; (404f10 <inv_uart_tx_get_state+0x28>)
  404ef6:	215c      	movs	r1, #92	; 0x5c
  404ef8:	fb01 f303 	mul.w	r3, r1, r3
  404efc:	4413      	add	r3, r2
  404efe:	3340      	adds	r3, #64	; 0x40
  404f00:	781b      	ldrb	r3, [r3, #0]
  404f02:	b2db      	uxtb	r3, r3
}
  404f04:	4618      	mov	r0, r3
  404f06:	370c      	adds	r7, #12
  404f08:	46bd      	mov	sp, r7
  404f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f0e:	4770      	bx	lr
  404f10:	200023f4 	.word	0x200023f4

00404f14 <uart_dma_rx>:


/***************************** Private Functions ******************************/

static int uart_dma_rx(inv_uart_num_t uart)
{
  404f14:	b580      	push	{r7, lr}
  404f16:	b088      	sub	sp, #32
  404f18:	af00      	add	r7, sp, #0
  404f1a:	4603      	mov	r3, r0
  404f1c:	71fb      	strb	r3, [r7, #7]
	int rc = 0;
  404f1e:	2300      	movs	r3, #0
  404f20:	61fb      	str	r3, [r7, #28]
	int timeout = 1000;
  404f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  404f26:	61bb      	str	r3, [r7, #24]
	
	inv_disable_irq();
  404f28:	4b45      	ldr	r3, [pc, #276]	; (405040 <uart_dma_rx+0x12c>)
  404f2a:	4798      	blx	r3
	if(um[uart].uart_rx_state == INV_UART_STATE_IDLE) {
  404f2c:	79fb      	ldrb	r3, [r7, #7]
  404f2e:	4a45      	ldr	r2, [pc, #276]	; (405044 <uart_dma_rx+0x130>)
  404f30:	215c      	movs	r1, #92	; 0x5c
  404f32:	fb01 f303 	mul.w	r3, r1, r3
  404f36:	4413      	add	r3, r2
  404f38:	3341      	adds	r3, #65	; 0x41
  404f3a:	781b      	ldrb	r3, [r3, #0]
  404f3c:	2b01      	cmp	r3, #1
  404f3e:	d174      	bne.n	40502a <uart_dma_rx+0x116>

		pdc_packet_t pdc_usart_packet;

		/* Read PDC current status */
		uint32_t pdc_status = pdc_read_status(um[uart].uart_pdc);
  404f40:	79fb      	ldrb	r3, [r7, #7]
  404f42:	4a40      	ldr	r2, [pc, #256]	; (405044 <uart_dma_rx+0x130>)
  404f44:	215c      	movs	r1, #92	; 0x5c
  404f46:	fb01 f303 	mul.w	r3, r1, r3
  404f4a:	4413      	add	r3, r2
  404f4c:	3304      	adds	r3, #4
  404f4e:	681b      	ldr	r3, [r3, #0]
  404f50:	4618      	mov	r0, r3
  404f52:	4b3d      	ldr	r3, [pc, #244]	; (405048 <uart_dma_rx+0x134>)
  404f54:	4798      	blx	r3
  404f56:	6178      	str	r0, [r7, #20]
		
		/* Double-check if there is already an on-going transfer in RX */
		if( (pdc_status & PERIPH_PTCR_RXTEN) != 0) {
  404f58:	697b      	ldr	r3, [r7, #20]
  404f5a:	f003 0301 	and.w	r3, r3, #1
  404f5e:	2b00      	cmp	r3, #0
  404f60:	d004      	beq.n	404f6c <uart_dma_rx+0x58>
			inv_enable_irq();
  404f62:	4b3a      	ldr	r3, [pc, #232]	; (40504c <uart_dma_rx+0x138>)
  404f64:	4798      	blx	r3
			return INV_UART_ERROR_BUSY;
  404f66:	f06f 0301 	mvn.w	r3, #1
  404f6a:	e064      	b.n	405036 <uart_dma_rx+0x122>
		}

		/* Initialize PDC (DMA) transfer address and size. Set same values for next transfer 
		 * as RX is used in circular mode (cf atmel SAM55G datasheet §21.5.3).
		 */
		pdc_usart_packet.ul_addr = (uint32_t)um[uart].uart_rx_buffer;
  404f6c:	79fb      	ldrb	r3, [r7, #7]
  404f6e:	4a35      	ldr	r2, [pc, #212]	; (405044 <uart_dma_rx+0x130>)
  404f70:	215c      	movs	r1, #92	; 0x5c
  404f72:	fb01 f303 	mul.w	r3, r1, r3
  404f76:	4413      	add	r3, r2
  404f78:	3344      	adds	r3, #68	; 0x44
  404f7a:	681b      	ldr	r3, [r3, #0]
  404f7c:	60fb      	str	r3, [r7, #12]
		pdc_usart_packet.ul_size = um[uart].uart_rx_buffer_size;
  404f7e:	79fb      	ldrb	r3, [r7, #7]
  404f80:	4a30      	ldr	r2, [pc, #192]	; (405044 <uart_dma_rx+0x130>)
  404f82:	215c      	movs	r1, #92	; 0x5c
  404f84:	fb01 f303 	mul.w	r3, r1, r3
  404f88:	4413      	add	r3, r2
  404f8a:	334c      	adds	r3, #76	; 0x4c
  404f8c:	881b      	ldrh	r3, [r3, #0]
  404f8e:	613b      	str	r3, [r7, #16]

		/* Configure PDC for data receive */
		pdc_rx_init(um[uart].uart_pdc, &pdc_usart_packet, &pdc_usart_packet);
  404f90:	79fb      	ldrb	r3, [r7, #7]
  404f92:	4a2c      	ldr	r2, [pc, #176]	; (405044 <uart_dma_rx+0x130>)
  404f94:	215c      	movs	r1, #92	; 0x5c
  404f96:	fb01 f303 	mul.w	r3, r1, r3
  404f9a:	4413      	add	r3, r2
  404f9c:	3304      	adds	r3, #4
  404f9e:	681b      	ldr	r3, [r3, #0]
  404fa0:	f107 020c 	add.w	r2, r7, #12
  404fa4:	f107 010c 	add.w	r1, r7, #12
  404fa8:	4618      	mov	r0, r3
  404faa:	4b29      	ldr	r3, [pc, #164]	; (405050 <uart_dma_rx+0x13c>)
  404fac:	4798      	blx	r3

		um[uart].uart_rx_state = INV_UART_STATE_BUSY_RX;
  404fae:	79fb      	ldrb	r3, [r7, #7]
  404fb0:	4a24      	ldr	r2, [pc, #144]	; (405044 <uart_dma_rx+0x130>)
  404fb2:	215c      	movs	r1, #92	; 0x5c
  404fb4:	fb01 f303 	mul.w	r3, r1, r3
  404fb8:	4413      	add	r3, r2
  404fba:	3341      	adds	r3, #65	; 0x41
  404fbc:	2203      	movs	r2, #3
  404fbe:	701a      	strb	r2, [r3, #0]
		
		/* Enable DMA transfer in RX */
		pdc_enable_transfer(um[uart].uart_pdc, PERIPH_PTCR_RXTEN);
  404fc0:	79fb      	ldrb	r3, [r7, #7]
  404fc2:	4a20      	ldr	r2, [pc, #128]	; (405044 <uart_dma_rx+0x130>)
  404fc4:	215c      	movs	r1, #92	; 0x5c
  404fc6:	fb01 f303 	mul.w	r3, r1, r3
  404fca:	4413      	add	r3, r2
  404fcc:	3304      	adds	r3, #4
  404fce:	681b      	ldr	r3, [r3, #0]
  404fd0:	2101      	movs	r1, #1
  404fd2:	4618      	mov	r0, r3
  404fd4:	4b1f      	ldr	r3, [pc, #124]	; (405054 <uart_dma_rx+0x140>)
  404fd6:	4798      	blx	r3

		/* Wait for the stream to be actually enabled  */
		timeout = 1000;
  404fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  404fdc:	61bb      	str	r3, [r7, #24]
		while (((pdc_read_status(um[uart].uart_pdc) & PERIPH_PTCR_RXTEN) == 0) && (timeout-- > 0));
  404fde:	bf00      	nop
  404fe0:	79fb      	ldrb	r3, [r7, #7]
  404fe2:	4a18      	ldr	r2, [pc, #96]	; (405044 <uart_dma_rx+0x130>)
  404fe4:	215c      	movs	r1, #92	; 0x5c
  404fe6:	fb01 f303 	mul.w	r3, r1, r3
  404fea:	4413      	add	r3, r2
  404fec:	3304      	adds	r3, #4
  404fee:	681b      	ldr	r3, [r3, #0]
  404ff0:	4618      	mov	r0, r3
  404ff2:	4b15      	ldr	r3, [pc, #84]	; (405048 <uart_dma_rx+0x134>)
  404ff4:	4798      	blx	r3
  404ff6:	4603      	mov	r3, r0
  404ff8:	f003 0301 	and.w	r3, r3, #1
  404ffc:	2b00      	cmp	r3, #0
  404ffe:	d104      	bne.n	40500a <uart_dma_rx+0xf6>
  405000:	69bb      	ldr	r3, [r7, #24]
  405002:	1e5a      	subs	r2, r3, #1
  405004:	61ba      	str	r2, [r7, #24]
  405006:	2b00      	cmp	r3, #0
  405008:	dcea      	bgt.n	404fe0 <uart_dma_rx+0xcc>
		if (timeout == 0) {
  40500a:	69bb      	ldr	r3, [r7, #24]
  40500c:	2b00      	cmp	r3, #0
  40500e:	d10f      	bne.n	405030 <uart_dma_rx+0x11c>
			um[uart].uart_rx_state = INV_UART_STATE_IDLE;
  405010:	79fb      	ldrb	r3, [r7, #7]
  405012:	4a0c      	ldr	r2, [pc, #48]	; (405044 <uart_dma_rx+0x130>)
  405014:	215c      	movs	r1, #92	; 0x5c
  405016:	fb01 f303 	mul.w	r3, r1, r3
  40501a:	4413      	add	r3, r2
  40501c:	3341      	adds	r3, #65	; 0x41
  40501e:	2201      	movs	r2, #1
  405020:	701a      	strb	r2, [r3, #0]
			rc = INV_UART_ERROR;
  405022:	f04f 33ff 	mov.w	r3, #4294967295
  405026:	61fb      	str	r3, [r7, #28]
  405028:	e002      	b.n	405030 <uart_dma_rx+0x11c>
		}
	} else {
		rc = INV_UART_ERROR_BUSY;
  40502a:	f06f 0301 	mvn.w	r3, #1
  40502e:	61fb      	str	r3, [r7, #28]
	}
	
	inv_enable_irq();
  405030:	4b06      	ldr	r3, [pc, #24]	; (40504c <uart_dma_rx+0x138>)
  405032:	4798      	blx	r3

	return rc;
  405034:	69fb      	ldr	r3, [r7, #28]
}
  405036:	4618      	mov	r0, r3
  405038:	3720      	adds	r7, #32
  40503a:	46bd      	mov	sp, r7
  40503c:	bd80      	pop	{r7, pc}
  40503e:	bf00      	nop
  405040:	00402911 	.word	0x00402911
  405044:	200023f4 	.word	0x200023f4
  405048:	00405e0f 	.word	0x00405e0f
  40504c:	00402939 	.word	0x00402939
  405050:	00405d67 	.word	0x00405d67
  405054:	00405dcb 	.word	0x00405dcb

00405058 <commonUSART_IRQ_HANDLER>:


/* Interrupt management ------------------------------------------------------*/

static void commonUSART_IRQ_HANDLER(inv_uart_num_t uart)
{
  405058:	b580      	push	{r7, lr}
  40505a:	b084      	sub	sp, #16
  40505c:	af00      	add	r7, sp, #0
  40505e:	4603      	mov	r3, r0
  405060:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_status;
	
	uart_status = usart_get_status(um[uart].uart_ip);
  405062:	79fb      	ldrb	r3, [r7, #7]
  405064:	4a28      	ldr	r2, [pc, #160]	; (405108 <commonUSART_IRQ_HANDLER+0xb0>)
  405066:	215c      	movs	r1, #92	; 0x5c
  405068:	fb01 f303 	mul.w	r3, r1, r3
  40506c:	4413      	add	r3, r2
  40506e:	681b      	ldr	r3, [r3, #0]
  405070:	4618      	mov	r0, r3
  405072:	4b26      	ldr	r3, [pc, #152]	; (40510c <commonUSART_IRQ_HANDLER+0xb4>)
  405074:	4798      	blx	r3
  405076:	60f8      	str	r0, [r7, #12]


	if((uart_status & US_CSR_TXBUFE) == US_CSR_TXBUFE) {
  405078:	68fb      	ldr	r3, [r7, #12]
  40507a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  40507e:	2b00      	cmp	r3, #0
  405080:	d03d      	beq.n	4050fe <commonUSART_IRQ_HANDLER+0xa6>
		pdc_disable_transfer(um[uart].uart_pdc, PERIPH_PTCR_TXTDIS);
  405082:	79fb      	ldrb	r3, [r7, #7]
  405084:	4a20      	ldr	r2, [pc, #128]	; (405108 <commonUSART_IRQ_HANDLER+0xb0>)
  405086:	215c      	movs	r1, #92	; 0x5c
  405088:	fb01 f303 	mul.w	r3, r1, r3
  40508c:	4413      	add	r3, r2
  40508e:	3304      	adds	r3, #4
  405090:	681b      	ldr	r3, [r3, #0]
  405092:	f44f 7100 	mov.w	r1, #512	; 0x200
  405096:	4618      	mov	r0, r3
  405098:	4b1d      	ldr	r3, [pc, #116]	; (405110 <commonUSART_IRQ_HANDLER+0xb8>)
  40509a:	4798      	blx	r3

		/* Mask TXBUFE interrupt. This will move IRQ state from active to inactive
		 * at NVIC level when exiting this handler.  */
		usart_disable_interrupt(um[uart].uart_ip, US_IER_TXBUFE);
  40509c:	79fb      	ldrb	r3, [r7, #7]
  40509e:	4a1a      	ldr	r2, [pc, #104]	; (405108 <commonUSART_IRQ_HANDLER+0xb0>)
  4050a0:	215c      	movs	r1, #92	; 0x5c
  4050a2:	fb01 f303 	mul.w	r3, r1, r3
  4050a6:	4413      	add	r3, r2
  4050a8:	681b      	ldr	r3, [r3, #0]
  4050aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4050ae:	4618      	mov	r0, r3
  4050b0:	4b18      	ldr	r3, [pc, #96]	; (405114 <commonUSART_IRQ_HANDLER+0xbc>)
  4050b2:	4798      	blx	r3

		um[uart].uart_tx_state = INV_UART_STATE_IDLE;
  4050b4:	79fb      	ldrb	r3, [r7, #7]
  4050b6:	4a14      	ldr	r2, [pc, #80]	; (405108 <commonUSART_IRQ_HANDLER+0xb0>)
  4050b8:	215c      	movs	r1, #92	; 0x5c
  4050ba:	fb01 f303 	mul.w	r3, r1, r3
  4050be:	4413      	add	r3, r2
  4050c0:	3340      	adds	r3, #64	; 0x40
  4050c2:	2201      	movs	r2, #1
  4050c4:	701a      	strb	r2, [r3, #0]

		if(um[uart].tx_done_cb)
  4050c6:	79fb      	ldrb	r3, [r7, #7]
  4050c8:	4a0f      	ldr	r2, [pc, #60]	; (405108 <commonUSART_IRQ_HANDLER+0xb0>)
  4050ca:	215c      	movs	r1, #92	; 0x5c
  4050cc:	fb01 f303 	mul.w	r3, r1, r3
  4050d0:	4413      	add	r3, r2
  4050d2:	3354      	adds	r3, #84	; 0x54
  4050d4:	681b      	ldr	r3, [r3, #0]
  4050d6:	2b00      	cmp	r3, #0
  4050d8:	d011      	beq.n	4050fe <commonUSART_IRQ_HANDLER+0xa6>
			um[uart].tx_done_cb(um[uart].tx_context);
  4050da:	79fb      	ldrb	r3, [r7, #7]
  4050dc:	4a0a      	ldr	r2, [pc, #40]	; (405108 <commonUSART_IRQ_HANDLER+0xb0>)
  4050de:	215c      	movs	r1, #92	; 0x5c
  4050e0:	fb01 f303 	mul.w	r3, r1, r3
  4050e4:	4413      	add	r3, r2
  4050e6:	3354      	adds	r3, #84	; 0x54
  4050e8:	681b      	ldr	r3, [r3, #0]
  4050ea:	79fa      	ldrb	r2, [r7, #7]
  4050ec:	4906      	ldr	r1, [pc, #24]	; (405108 <commonUSART_IRQ_HANDLER+0xb0>)
  4050ee:	205c      	movs	r0, #92	; 0x5c
  4050f0:	fb00 f202 	mul.w	r2, r0, r2
  4050f4:	440a      	add	r2, r1
  4050f6:	3258      	adds	r2, #88	; 0x58
  4050f8:	6812      	ldr	r2, [r2, #0]
  4050fa:	4610      	mov	r0, r2
  4050fc:	4798      	blx	r3
	}

	/* TODO : Handle transmission error here */	
}
  4050fe:	bf00      	nop
  405100:	3710      	adds	r7, #16
  405102:	46bd      	mov	sp, r7
  405104:	bd80      	pop	{r7, pc}
  405106:	bf00      	nop
  405108:	200023f4 	.word	0x200023f4
  40510c:	00407271 	.word	0x00407271
  405110:	00405ded 	.word	0x00405ded
  405114:	00407255 	.word	0x00407255

00405118 <FLEXCOM0_Handler>:


void USART0_IRQ_HANDLER(void)
{
  405118:	b580      	push	{r7, lr}
  40511a:	af00      	add	r7, sp, #0
	commonUSART_IRQ_HANDLER(INV_UART_SENSOR_CTRL);
  40511c:	2000      	movs	r0, #0
  40511e:	4b02      	ldr	r3, [pc, #8]	; (405128 <FLEXCOM0_Handler+0x10>)
  405120:	4798      	blx	r3
}
  405122:	bf00      	nop
  405124:	bd80      	pop	{r7, pc}
  405126:	bf00      	nop
  405128:	00405059 	.word	0x00405059

0040512c <FLEXCOM7_Handler>:

void USART7_IRQ_HANDLER(void)
{
  40512c:	b580      	push	{r7, lr}
  40512e:	af00      	add	r7, sp, #0
	commonUSART_IRQ_HANDLER(INV_UART_LOG);	
  405130:	2001      	movs	r0, #1
  405132:	4b02      	ldr	r3, [pc, #8]	; (40513c <FLEXCOM7_Handler+0x10>)
  405134:	4798      	blx	r3
}
  405136:	bf00      	nop
  405138:	bd80      	pop	{r7, pc}
  40513a:	bf00      	nop
  40513c:	00405059 	.word	0x00405059

00405140 <buffer_pop>:
 *  @param[in]  len Number of bytes to be poped
 *  @note:      This function does not check if there are any bytes available (waiting to be poped)
 *              in the ring byte buffer prior to poping them
 */
static void buffer_pop(uart_mngr_buffer_struct_t * uart_mngr, uint8_t * data, uint16_t len)
{
  405140:	b580      	push	{r7, lr}
  405142:	b086      	sub	sp, #24
  405144:	af00      	add	r7, sp, #0
  405146:	60f8      	str	r0, [r7, #12]
  405148:	60b9      	str	r1, [r7, #8]
  40514a:	4613      	mov	r3, r2
  40514c:	80fb      	strh	r3, [r7, #6]
  /* start index of the circular buffer (first bytes are reserved for driver) */
		uint16_t start = uart_mngr->driver_max_single_txfer_size;
  40514e:	68fb      	ldr	r3, [r7, #12]
  405150:	889b      	ldrh	r3, [r3, #4]
  405152:	82fb      	strh	r3, [r7, #22]
	uint16_t tail = uart_mngr->circ_buffer_tail;
  405154:	68fb      	ldr	r3, [r7, #12]
  405156:	895b      	ldrh	r3, [r3, #10]
  405158:	82bb      	strh	r3, [r7, #20]

	uart_mngr->circ_buffer_tail += len;
  40515a:	68fb      	ldr	r3, [r7, #12]
  40515c:	895b      	ldrh	r3, [r3, #10]
  40515e:	b29a      	uxth	r2, r3
  405160:	88fb      	ldrh	r3, [r7, #6]
  405162:	4413      	add	r3, r2
  405164:	b29a      	uxth	r2, r3
  405166:	68fb      	ldr	r3, [r7, #12]
  405168:	815a      	strh	r2, [r3, #10]
	uart_mngr->circ_buffer_tail %= uart_mngr->circ_buffer_size;
  40516a:	68fb      	ldr	r3, [r7, #12]
  40516c:	895b      	ldrh	r3, [r3, #10]
  40516e:	b29b      	uxth	r3, r3
  405170:	68fa      	ldr	r2, [r7, #12]
  405172:	88d2      	ldrh	r2, [r2, #6]
  405174:	fbb3 f1f2 	udiv	r1, r3, r2
  405178:	fb02 f201 	mul.w	r2, r2, r1
  40517c:	1a9b      	subs	r3, r3, r2
  40517e:	b29a      	uxth	r2, r3
  405180:	68fb      	ldr	r3, [r7, #12]
  405182:	815a      	strh	r2, [r3, #10]

	if((uart_mngr->circ_buffer_size - tail) >= len) {
  405184:	68fb      	ldr	r3, [r7, #12]
  405186:	88db      	ldrh	r3, [r3, #6]
  405188:	461a      	mov	r2, r3
  40518a:	8abb      	ldrh	r3, [r7, #20]
  40518c:	1ad2      	subs	r2, r2, r3
  40518e:	88fb      	ldrh	r3, [r7, #6]
  405190:	429a      	cmp	r2, r3
  405192:	db0b      	blt.n	4051ac <buffer_pop+0x6c>
		memcpy(data, &uart_mngr->buffer[start+tail], len);
  405194:	68fb      	ldr	r3, [r7, #12]
  405196:	681b      	ldr	r3, [r3, #0]
  405198:	8af9      	ldrh	r1, [r7, #22]
  40519a:	8aba      	ldrh	r2, [r7, #20]
  40519c:	440a      	add	r2, r1
  40519e:	4413      	add	r3, r2
  4051a0:	88fa      	ldrh	r2, [r7, #6]
  4051a2:	4619      	mov	r1, r3
  4051a4:	68b8      	ldr	r0, [r7, #8]
  4051a6:	4b15      	ldr	r3, [pc, #84]	; (4051fc <buffer_pop+0xbc>)
  4051a8:	4798      	blx	r3
				uart_mngr->circ_buffer_size - tail);
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
				&uart_mngr->buffer[start],
				len - uart_mngr->circ_buffer_size + tail);
	}
}
  4051aa:	e023      	b.n	4051f4 <buffer_pop+0xb4>
		memcpy(data, &uart_mngr->buffer[start+tail],
  4051ac:	68fb      	ldr	r3, [r7, #12]
  4051ae:	681b      	ldr	r3, [r3, #0]
  4051b0:	8af9      	ldrh	r1, [r7, #22]
  4051b2:	8aba      	ldrh	r2, [r7, #20]
  4051b4:	440a      	add	r2, r1
  4051b6:	1899      	adds	r1, r3, r2
				uart_mngr->circ_buffer_size - tail);
  4051b8:	68fb      	ldr	r3, [r7, #12]
  4051ba:	88db      	ldrh	r3, [r3, #6]
  4051bc:	461a      	mov	r2, r3
  4051be:	8abb      	ldrh	r3, [r7, #20]
  4051c0:	1ad3      	subs	r3, r2, r3
		memcpy(data, &uart_mngr->buffer[start+tail],
  4051c2:	461a      	mov	r2, r3
  4051c4:	68b8      	ldr	r0, [r7, #8]
  4051c6:	4b0d      	ldr	r3, [pc, #52]	; (4051fc <buffer_pop+0xbc>)
  4051c8:	4798      	blx	r3
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
  4051ca:	68fb      	ldr	r3, [r7, #12]
  4051cc:	88db      	ldrh	r3, [r3, #6]
  4051ce:	461a      	mov	r2, r3
  4051d0:	8abb      	ldrh	r3, [r7, #20]
  4051d2:	1ad3      	subs	r3, r2, r3
  4051d4:	461a      	mov	r2, r3
  4051d6:	68bb      	ldr	r3, [r7, #8]
  4051d8:	1898      	adds	r0, r3, r2
				&uart_mngr->buffer[start],
  4051da:	68fb      	ldr	r3, [r7, #12]
  4051dc:	681a      	ldr	r2, [r3, #0]
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
  4051de:	8afb      	ldrh	r3, [r7, #22]
				&uart_mngr->buffer[start],
  4051e0:	18d1      	adds	r1, r2, r3
				len - uart_mngr->circ_buffer_size + tail);
  4051e2:	88fb      	ldrh	r3, [r7, #6]
  4051e4:	68fa      	ldr	r2, [r7, #12]
  4051e6:	88d2      	ldrh	r2, [r2, #6]
  4051e8:	1a9a      	subs	r2, r3, r2
  4051ea:	8abb      	ldrh	r3, [r7, #20]
  4051ec:	4413      	add	r3, r2
		memcpy(&data[uart_mngr->circ_buffer_size - tail],
  4051ee:	461a      	mov	r2, r3
  4051f0:	4b02      	ldr	r3, [pc, #8]	; (4051fc <buffer_pop+0xbc>)
  4051f2:	4798      	blx	r3
}
  4051f4:	bf00      	nop
  4051f6:	3718      	adds	r7, #24
  4051f8:	46bd      	mov	sp, r7
  4051fa:	bd80      	pop	{r7, pc}
  4051fc:	00408661 	.word	0x00408661

00405200 <buffer_push>:
 *  @param[in]  len Number of bytes to be pushed
 *  @note:      This function does not check if there is any space available 
 *              in the ring byte buffer prior to pushing the data
 */
static void buffer_push(uart_mngr_buffer_struct_t * uart_mngr, uint8_t * data, uint16_t len)
{
  405200:	b580      	push	{r7, lr}
  405202:	b086      	sub	sp, #24
  405204:	af00      	add	r7, sp, #0
  405206:	60f8      	str	r0, [r7, #12]
  405208:	60b9      	str	r1, [r7, #8]
  40520a:	4613      	mov	r3, r2
  40520c:	80fb      	strh	r3, [r7, #6]
  /* start index of the circular buffer (first bytes are reserved for driver) */
		uint16_t start = uart_mngr->driver_max_single_txfer_size;
  40520e:	68fb      	ldr	r3, [r7, #12]
  405210:	889b      	ldrh	r3, [r3, #4]
  405212:	82fb      	strh	r3, [r7, #22]

	uint16_t head = uart_mngr->circ_buffer_head;
  405214:	68fb      	ldr	r3, [r7, #12]
  405216:	891b      	ldrh	r3, [r3, #8]
  405218:	82bb      	strh	r3, [r7, #20]

	if((uart_mngr->circ_buffer_size - head) >= len) {
  40521a:	68fb      	ldr	r3, [r7, #12]
  40521c:	88db      	ldrh	r3, [r3, #6]
  40521e:	461a      	mov	r2, r3
  405220:	8abb      	ldrh	r3, [r7, #20]
  405222:	1ad2      	subs	r2, r2, r3
  405224:	88fb      	ldrh	r3, [r7, #6]
  405226:	429a      	cmp	r2, r3
  405228:	db0b      	blt.n	405242 <buffer_push+0x42>
		memcpy(&uart_mngr->buffer[start+head], data, len);
  40522a:	68fb      	ldr	r3, [r7, #12]
  40522c:	681b      	ldr	r3, [r3, #0]
  40522e:	8af9      	ldrh	r1, [r7, #22]
  405230:	8aba      	ldrh	r2, [r7, #20]
  405232:	440a      	add	r2, r1
  405234:	4413      	add	r3, r2
  405236:	88fa      	ldrh	r2, [r7, #6]
  405238:	68b9      	ldr	r1, [r7, #8]
  40523a:	4618      	mov	r0, r3
  40523c:	4b1f      	ldr	r3, [pc, #124]	; (4052bc <buffer_push+0xbc>)
  40523e:	4798      	blx	r3
  405240:	e023      	b.n	40528a <buffer_push+0x8a>
	} else {
		
		memcpy(&uart_mngr->buffer[start+head], data, 
  405242:	68fb      	ldr	r3, [r7, #12]
  405244:	681b      	ldr	r3, [r3, #0]
  405246:	8af9      	ldrh	r1, [r7, #22]
  405248:	8aba      	ldrh	r2, [r7, #20]
  40524a:	440a      	add	r2, r1
  40524c:	1898      	adds	r0, r3, r2
				uart_mngr->circ_buffer_size - head);
  40524e:	68fb      	ldr	r3, [r7, #12]
  405250:	88db      	ldrh	r3, [r3, #6]
  405252:	461a      	mov	r2, r3
  405254:	8abb      	ldrh	r3, [r7, #20]
  405256:	1ad3      	subs	r3, r2, r3
		memcpy(&uart_mngr->buffer[start+head], data, 
  405258:	461a      	mov	r2, r3
  40525a:	68b9      	ldr	r1, [r7, #8]
  40525c:	4b17      	ldr	r3, [pc, #92]	; (4052bc <buffer_push+0xbc>)
  40525e:	4798      	blx	r3
		memcpy(&uart_mngr->buffer[start],
  405260:	68fb      	ldr	r3, [r7, #12]
  405262:	681a      	ldr	r2, [r3, #0]
  405264:	8afb      	ldrh	r3, [r7, #22]
  405266:	18d0      	adds	r0, r2, r3
				&data[uart_mngr->circ_buffer_size - head],
  405268:	68fb      	ldr	r3, [r7, #12]
  40526a:	88db      	ldrh	r3, [r3, #6]
  40526c:	461a      	mov	r2, r3
  40526e:	8abb      	ldrh	r3, [r7, #20]
  405270:	1ad3      	subs	r3, r2, r3
  405272:	461a      	mov	r2, r3
  405274:	68bb      	ldr	r3, [r7, #8]
  405276:	1899      	adds	r1, r3, r2
				len - uart_mngr->circ_buffer_size + head);
  405278:	88fb      	ldrh	r3, [r7, #6]
  40527a:	68fa      	ldr	r2, [r7, #12]
  40527c:	88d2      	ldrh	r2, [r2, #6]
  40527e:	1a9a      	subs	r2, r3, r2
  405280:	8abb      	ldrh	r3, [r7, #20]
  405282:	4413      	add	r3, r2
		memcpy(&uart_mngr->buffer[start],
  405284:	461a      	mov	r2, r3
  405286:	4b0d      	ldr	r3, [pc, #52]	; (4052bc <buffer_push+0xbc>)
  405288:	4798      	blx	r3
	}

	uart_mngr->circ_buffer_head += len;
  40528a:	68fb      	ldr	r3, [r7, #12]
  40528c:	891b      	ldrh	r3, [r3, #8]
  40528e:	b29a      	uxth	r2, r3
  405290:	88fb      	ldrh	r3, [r7, #6]
  405292:	4413      	add	r3, r2
  405294:	b29a      	uxth	r2, r3
  405296:	68fb      	ldr	r3, [r7, #12]
  405298:	811a      	strh	r2, [r3, #8]
	uart_mngr->circ_buffer_head %= uart_mngr->circ_buffer_size;
  40529a:	68fb      	ldr	r3, [r7, #12]
  40529c:	891b      	ldrh	r3, [r3, #8]
  40529e:	b29b      	uxth	r3, r3
  4052a0:	68fa      	ldr	r2, [r7, #12]
  4052a2:	88d2      	ldrh	r2, [r2, #6]
  4052a4:	fbb3 f1f2 	udiv	r1, r3, r2
  4052a8:	fb02 f201 	mul.w	r2, r2, r1
  4052ac:	1a9b      	subs	r3, r3, r2
  4052ae:	b29a      	uxth	r2, r3
  4052b0:	68fb      	ldr	r3, [r7, #12]
  4052b2:	811a      	strh	r2, [r3, #8]
}
  4052b4:	bf00      	nop
  4052b6:	3718      	adds	r7, #24
  4052b8:	46bd      	mov	sp, r7
  4052ba:	bd80      	pop	{r7, pc}
  4052bc:	00408661 	.word	0x00408661

004052c0 <buffer_get_size>:
/** @brief      Returns the bytes available in the ring byte buffer
 *  @param[in]  uart_mngr Pointer to the UART manager buffer object
 *  @return     The number of bytes available (waiting to be poped) in the ring byte buffer
 */
static uint16_t buffer_get_size(uart_mngr_buffer_struct_t * uart_mngr)
{
  4052c0:	b480      	push	{r7}
  4052c2:	b085      	sub	sp, #20
  4052c4:	af00      	add	r7, sp, #0
  4052c6:	6078      	str	r0, [r7, #4]
	uint16_t head = uart_mngr->circ_buffer_head;
  4052c8:	687b      	ldr	r3, [r7, #4]
  4052ca:	891b      	ldrh	r3, [r3, #8]
  4052cc:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = uart_mngr->circ_buffer_tail;
  4052ce:	687b      	ldr	r3, [r7, #4]
  4052d0:	895b      	ldrh	r3, [r3, #10]
  4052d2:	81bb      	strh	r3, [r7, #12]

	if(head >= tail)
  4052d4:	89fa      	ldrh	r2, [r7, #14]
  4052d6:	89bb      	ldrh	r3, [r7, #12]
  4052d8:	429a      	cmp	r2, r3
  4052da:	d304      	bcc.n	4052e6 <buffer_get_size+0x26>
		return (head - tail);
  4052dc:	89fa      	ldrh	r2, [r7, #14]
  4052de:	89bb      	ldrh	r3, [r7, #12]
  4052e0:	1ad3      	subs	r3, r2, r3
  4052e2:	b29b      	uxth	r3, r3
  4052e4:	e007      	b.n	4052f6 <buffer_get_size+0x36>
	else
		return (uart_mngr->circ_buffer_size - tail + head);
  4052e6:	687b      	ldr	r3, [r7, #4]
  4052e8:	88da      	ldrh	r2, [r3, #6]
  4052ea:	89bb      	ldrh	r3, [r7, #12]
  4052ec:	1ad3      	subs	r3, r2, r3
  4052ee:	b29a      	uxth	r2, r3
  4052f0:	89fb      	ldrh	r3, [r7, #14]
  4052f2:	4413      	add	r3, r2
  4052f4:	b29b      	uxth	r3, r3
}
  4052f6:	4618      	mov	r0, r3
  4052f8:	3714      	adds	r7, #20
  4052fa:	46bd      	mov	sp, r7
  4052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405300:	4770      	bx	lr
	...

00405304 <buffer_get_available>:
/** @brief      Returns the free space that is available in the ring byte buffer
 *  @param[in]  uart_mngr Pointer to the UART manager buffer object
 *  @return     The space, in bytes, available in the ring byte buffer
 */
static uint16_t buffer_get_available(uart_mngr_buffer_struct_t * uart_mngr)
{
  405304:	b590      	push	{r4, r7, lr}
  405306:	b083      	sub	sp, #12
  405308:	af00      	add	r7, sp, #0
  40530a:	6078      	str	r0, [r7, #4]
	return (uart_mngr->circ_buffer_size - buffer_get_size(uart_mngr));
  40530c:	687b      	ldr	r3, [r7, #4]
  40530e:	88dc      	ldrh	r4, [r3, #6]
  405310:	6878      	ldr	r0, [r7, #4]
  405312:	4b04      	ldr	r3, [pc, #16]	; (405324 <buffer_get_available+0x20>)
  405314:	4798      	blx	r3
  405316:	4603      	mov	r3, r0
  405318:	1ae3      	subs	r3, r4, r3
  40531a:	b29b      	uxth	r3, r3
}
  40531c:	4618      	mov	r0, r3
  40531e:	370c      	adds	r7, #12
  405320:	46bd      	mov	sp, r7
  405322:	bd90      	pop	{r4, r7, pc}
  405324:	004052c1 	.word	0x004052c1

00405328 <uart_tx_done_cb>:

/** @brief      Callback called when a TX transfer finishes
 *  @param[in]  context Context passed at init
 */
static void uart_tx_done_cb(void * context)
{
  405328:	b580      	push	{r7, lr}
  40532a:	b086      	sub	sp, #24
  40532c:	af00      	add	r7, sp, #0
  40532e:	6078      	str	r0, [r7, #4]
	inv_uart_tx_transfer_t uart_txfer_struct;
	static uint8_t temp_buf[UART_MNGR_TX_ABSOLUTE_MAX_TRANSFER_SIZE];
	uart_mngr_struct_t * uart_mngr = (uart_mngr_struct_t *)context;
  405330:	687b      	ldr	r3, [r7, #4]
  405332:	613b      	str	r3, [r7, #16]
	
	/* Check if there is data waiting to be transfered in the ring byte buffer*/
	uint16_t bytes_num = buffer_get_size(&uart_mngr->uart_tx_buf);
  405334:	693b      	ldr	r3, [r7, #16]
  405336:	3310      	adds	r3, #16
  405338:	4618      	mov	r0, r3
  40533a:	4b13      	ldr	r3, [pc, #76]	; (405388 <uart_tx_done_cb+0x60>)
  40533c:	4798      	blx	r3
  40533e:	4603      	mov	r3, r0
  405340:	82fb      	strh	r3, [r7, #22]
	
	if(bytes_num) {
  405342:	8afb      	ldrh	r3, [r7, #22]
  405344:	2b00      	cmp	r3, #0
  405346:	d01a      	beq.n	40537e <uart_tx_done_cb+0x56>
		if(bytes_num >= uart_mngr->uart_tx_buf.driver_max_single_txfer_size) {
  405348:	693b      	ldr	r3, [r7, #16]
  40534a:	8a9b      	ldrh	r3, [r3, #20]
  40534c:	8afa      	ldrh	r2, [r7, #22]
  40534e:	429a      	cmp	r2, r3
  405350:	d302      	bcc.n	405358 <uart_tx_done_cb+0x30>
			/* Clamp the number of bytes to be transfered to the maximum size supported by the UART driver */
			bytes_num = uart_mngr->uart_tx_buf.driver_max_single_txfer_size;
  405352:	693b      	ldr	r3, [r7, #16]
  405354:	8a9b      	ldrh	r3, [r3, #20]
  405356:	82fb      	strh	r3, [r7, #22]
		}
		buffer_pop(&uart_mngr->uart_tx_buf, temp_buf, bytes_num);
  405358:	693b      	ldr	r3, [r7, #16]
  40535a:	3310      	adds	r3, #16
  40535c:	8afa      	ldrh	r2, [r7, #22]
  40535e:	490b      	ldr	r1, [pc, #44]	; (40538c <uart_tx_done_cb+0x64>)
  405360:	4618      	mov	r0, r3
  405362:	4b0b      	ldr	r3, [pc, #44]	; (405390 <uart_tx_done_cb+0x68>)
  405364:	4798      	blx	r3
		uart_txfer_struct.data = temp_buf;
  405366:	4b09      	ldr	r3, [pc, #36]	; (40538c <uart_tx_done_cb+0x64>)
  405368:	60bb      	str	r3, [r7, #8]
		uart_txfer_struct.len  = bytes_num;
  40536a:	8afb      	ldrh	r3, [r7, #22]
  40536c:	81bb      	strh	r3, [r7, #12]
		inv_uart_tx_txfer(uart_mngr->uart_mngr_uart_num, &uart_txfer_struct);
  40536e:	693b      	ldr	r3, [r7, #16]
  405370:	781b      	ldrb	r3, [r3, #0]
  405372:	f107 0208 	add.w	r2, r7, #8
  405376:	4611      	mov	r1, r2
  405378:	4618      	mov	r0, r3
  40537a:	4b06      	ldr	r3, [pc, #24]	; (405394 <uart_tx_done_cb+0x6c>)
  40537c:	4798      	blx	r3
	}
}
  40537e:	bf00      	nop
  405380:	3718      	adds	r7, #24
  405382:	46bd      	mov	sp, r7
  405384:	bd80      	pop	{r7, pc}
  405386:	bf00      	nop
  405388:	004052c1 	.word	0x004052c1
  40538c:	2000438c 	.word	0x2000438c
  405390:	00405141 	.word	0x00405141
  405394:	00404c09 	.word	0x00404c09

00405398 <inv_uart_mngr_init>:


int inv_uart_mngr_init(inv_uart_mngr_init_struct_t * uart_mngr_init_struct)
{
  405398:	b580      	push	{r7, lr}
  40539a:	b08c      	sub	sp, #48	; 0x30
  40539c:	af00      	add	r7, sp, #0
  40539e:	6078      	str	r0, [r7, #4]
	inv_uart_init_struct_t uart_init_struct;
	inv_uart_num_t uart_nb = uart_mngr_init_struct->uart_num;
  4053a0:	687b      	ldr	r3, [r7, #4]
  4053a2:	781b      	ldrb	r3, [r3, #0]
  4053a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* Populate the driver init structure with data common for all the UART peripherals */
	uart_init_struct.uart_num = uart_mngr_init_struct->uart_num;
  4053a8:	687b      	ldr	r3, [r7, #4]
  4053aa:	781b      	ldrb	r3, [r3, #0]
  4053ac:	733b      	strb	r3, [r7, #12]
	uart_init_struct.baudrate = uart_mngr_init_struct->baudrate;
  4053ae:	687b      	ldr	r3, [r7, #4]
  4053b0:	685b      	ldr	r3, [r3, #4]
  4053b2:	61fb      	str	r3, [r7, #28]
	uart_init_struct.flow_ctrl = uart_mngr_init_struct->flow_ctrl;
  4053b4:	687b      	ldr	r3, [r7, #4]
  4053b6:	7a1b      	ldrb	r3, [r3, #8]
  4053b8:	f887 3020 	strb.w	r3, [r7, #32]
	uart_init_struct.tx_done_cb = uart_tx_done_cb;
  4053bc:	4b20      	ldr	r3, [pc, #128]	; (405440 <inv_uart_mngr_init+0xa8>)
  4053be:	627b      	str	r3, [r7, #36]	; 0x24

	/* Populate the driver init structure with data specific to each UART peripheral */
	uart_init_struct.tx_buffer  = um[uart_nb].uart_tx_buf.buffer;
  4053c0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  4053c4:	491f      	ldr	r1, [pc, #124]	; (405444 <inv_uart_mngr_init+0xac>)
  4053c6:	4613      	mov	r3, r2
  4053c8:	00db      	lsls	r3, r3, #3
  4053ca:	1a9b      	subs	r3, r3, r2
  4053cc:	009b      	lsls	r3, r3, #2
  4053ce:	440b      	add	r3, r1
  4053d0:	3310      	adds	r3, #16
  4053d2:	681b      	ldr	r3, [r3, #0]
  4053d4:	613b      	str	r3, [r7, #16]
	uart_init_struct.rx_buffer  = um[uart_nb].uart_rx_buf.buffer;
  4053d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  4053da:	491a      	ldr	r1, [pc, #104]	; (405444 <inv_uart_mngr_init+0xac>)
  4053dc:	4613      	mov	r3, r2
  4053de:	00db      	lsls	r3, r3, #3
  4053e0:	1a9b      	subs	r3, r3, r2
  4053e2:	009b      	lsls	r3, r3, #2
  4053e4:	440b      	add	r3, r1
  4053e6:	3304      	adds	r3, #4
  4053e8:	681b      	ldr	r3, [r3, #0]
  4053ea:	617b      	str	r3, [r7, #20]
	uart_init_struct.tx_size    = um[uart_nb].uart_tx_buf.driver_max_single_txfer_size;
  4053ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  4053f0:	4914      	ldr	r1, [pc, #80]	; (405444 <inv_uart_mngr_init+0xac>)
  4053f2:	4613      	mov	r3, r2
  4053f4:	00db      	lsls	r3, r3, #3
  4053f6:	1a9b      	subs	r3, r3, r2
  4053f8:	009b      	lsls	r3, r3, #2
  4053fa:	440b      	add	r3, r1
  4053fc:	3314      	adds	r3, #20
  4053fe:	881b      	ldrh	r3, [r3, #0]
  405400:	833b      	strh	r3, [r7, #24]
	uart_init_struct.rx_size    = um[uart_nb].uart_rx_buf.driver_max_single_txfer_size;
  405402:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  405406:	490f      	ldr	r1, [pc, #60]	; (405444 <inv_uart_mngr_init+0xac>)
  405408:	4613      	mov	r3, r2
  40540a:	00db      	lsls	r3, r3, #3
  40540c:	1a9b      	subs	r3, r3, r2
  40540e:	009b      	lsls	r3, r3, #2
  405410:	440b      	add	r3, r1
  405412:	3308      	adds	r3, #8
  405414:	881b      	ldrh	r3, [r3, #0]
  405416:	837b      	strh	r3, [r7, #26]
	uart_init_struct.tx_context = &um[uart_nb];
  405418:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  40541c:	4613      	mov	r3, r2
  40541e:	00db      	lsls	r3, r3, #3
  405420:	1a9b      	subs	r3, r3, r2
  405422:	009b      	lsls	r3, r3, #2
  405424:	4a07      	ldr	r2, [pc, #28]	; (405444 <inv_uart_mngr_init+0xac>)
  405426:	4413      	add	r3, r2
  405428:	62bb      	str	r3, [r7, #40]	; 0x28
	
	/* Initialize the UART driver */
	return inv_uart_init(&uart_init_struct);
  40542a:	f107 030c 	add.w	r3, r7, #12
  40542e:	4618      	mov	r0, r3
  405430:	4b05      	ldr	r3, [pc, #20]	; (405448 <inv_uart_mngr_init+0xb0>)
  405432:	4798      	blx	r3
  405434:	4603      	mov	r3, r0
}
  405436:	4618      	mov	r0, r3
  405438:	3730      	adds	r7, #48	; 0x30
  40543a:	46bd      	mov	sp, r7
  40543c:	bd80      	pop	{r7, pc}
  40543e:	bf00      	nop
  405440:	00405329 	.word	0x00405329
  405444:	200024ac 	.word	0x200024ac
  405448:	0040491d 	.word	0x0040491d

0040544c <inv_uart_mngr_puts>:

int inv_uart_mngr_puts(inv_uart_num_t uart, const char * s, unsigned short l)
{
  40544c:	b580      	push	{r7, lr}
  40544e:	b086      	sub	sp, #24
  405450:	af00      	add	r7, sp, #0
  405452:	4603      	mov	r3, r0
  405454:	6039      	str	r1, [r7, #0]
  405456:	71fb      	strb	r3, [r7, #7]
  405458:	4613      	mov	r3, r2
  40545a:	80bb      	strh	r3, [r7, #4]
	int rc = INV_UART_ERROR_SUCCES;
  40545c:	2300      	movs	r3, #0
  40545e:	617b      	str	r3, [r7, #20]
	inv_uart_state_t uart_tx_state;
	uart_mngr_struct_t * uart_mngr = &um[uart];
  405460:	79fa      	ldrb	r2, [r7, #7]
  405462:	4613      	mov	r3, r2
  405464:	00db      	lsls	r3, r3, #3
  405466:	1a9b      	subs	r3, r3, r2
  405468:	009b      	lsls	r3, r3, #2
  40546a:	4a34      	ldr	r2, [pc, #208]	; (40553c <inv_uart_mngr_puts+0xf0>)
  40546c:	4413      	add	r3, r2
  40546e:	613b      	str	r3, [r7, #16]
	
	/* Check if the data to be transfered fits in the internal buffer
	 * Total size of the buffer being driver reserved size + circular buffer size
	 */
	if(l > (uart_mngr->uart_tx_buf.driver_max_single_txfer_size + 
  405470:	88ba      	ldrh	r2, [r7, #4]
  405472:	693b      	ldr	r3, [r7, #16]
  405474:	8a9b      	ldrh	r3, [r3, #20]
  405476:	4619      	mov	r1, r3
		     uart_mngr->uart_tx_buf.circ_buffer_size) )
  405478:	693b      	ldr	r3, [r7, #16]
  40547a:	8adb      	ldrh	r3, [r3, #22]
	if(l > (uart_mngr->uart_tx_buf.driver_max_single_txfer_size + 
  40547c:	440b      	add	r3, r1
  40547e:	429a      	cmp	r2, r3
  405480:	dd02      	ble.n	405488 <inv_uart_mngr_puts+0x3c>
		return INV_UART_ERROR_MEMORY;
  405482:	f06f 0302 	mvn.w	r3, #2
  405486:	e055      	b.n	405534 <inv_uart_mngr_puts+0xe8>
	
	inv_disable_irq();
  405488:	4b2d      	ldr	r3, [pc, #180]	; (405540 <inv_uart_mngr_puts+0xf4>)
  40548a:	4798      	blx	r3
	uart_tx_state = inv_uart_tx_get_state(uart_mngr->uart_mngr_uart_num);
  40548c:	693b      	ldr	r3, [r7, #16]
  40548e:	781b      	ldrb	r3, [r3, #0]
  405490:	4618      	mov	r0, r3
  405492:	4b2c      	ldr	r3, [pc, #176]	; (405544 <inv_uart_mngr_puts+0xf8>)
  405494:	4798      	blx	r3
  405496:	4603      	mov	r3, r0
  405498:	73fb      	strb	r3, [r7, #15]
	
	if(uart_tx_state == INV_UART_STATE_IDLE) {
  40549a:	7bfb      	ldrb	r3, [r7, #15]
  40549c:	2b01      	cmp	r3, #1
  40549e:	d127      	bne.n	4054f0 <inv_uart_mngr_puts+0xa4>
		if(l <= uart_mngr->uart_tx_buf.driver_max_single_txfer_size) {
  4054a0:	693b      	ldr	r3, [r7, #16]
  4054a2:	8a9b      	ldrh	r3, [r3, #20]
  4054a4:	88ba      	ldrh	r2, [r7, #4]
  4054a6:	429a      	cmp	r2, r3
  4054a8:	d808      	bhi.n	4054bc <inv_uart_mngr_puts+0x70>
			/* If the data fits into the UART driver's buffers, make a single transfer */
			rc = inv_uart_puts(uart_mngr->uart_mngr_uart_num, s, l);
  4054aa:	693b      	ldr	r3, [r7, #16]
  4054ac:	781b      	ldrb	r3, [r3, #0]
  4054ae:	88ba      	ldrh	r2, [r7, #4]
  4054b0:	6839      	ldr	r1, [r7, #0]
  4054b2:	4618      	mov	r0, r3
  4054b4:	4b24      	ldr	r3, [pc, #144]	; (405548 <inv_uart_mngr_puts+0xfc>)
  4054b6:	4798      	blx	r3
  4054b8:	6178      	str	r0, [r7, #20]
  4054ba:	e038      	b.n	40552e <inv_uart_mngr_puts+0xe2>
		} else {
			/* If the data does not fit in the UART driver's internal buffers, 
			 * make an UART transfer and push the rest of the data in the UART manager's ring byte buffer 
			 */
			buffer_push(&uart_mngr->uart_tx_buf, (uint8_t *)&s[uart_mngr->uart_tx_buf.driver_max_single_txfer_size], 
  4054bc:	693b      	ldr	r3, [r7, #16]
  4054be:	f103 0010 	add.w	r0, r3, #16
  4054c2:	693b      	ldr	r3, [r7, #16]
  4054c4:	8a9b      	ldrh	r3, [r3, #20]
  4054c6:	461a      	mov	r2, r3
  4054c8:	683b      	ldr	r3, [r7, #0]
  4054ca:	1899      	adds	r1, r3, r2
					l - uart_mngr->uart_tx_buf.driver_max_single_txfer_size);
  4054cc:	693b      	ldr	r3, [r7, #16]
  4054ce:	8a9b      	ldrh	r3, [r3, #20]
			buffer_push(&uart_mngr->uart_tx_buf, (uint8_t *)&s[uart_mngr->uart_tx_buf.driver_max_single_txfer_size], 
  4054d0:	88ba      	ldrh	r2, [r7, #4]
  4054d2:	1ad3      	subs	r3, r2, r3
  4054d4:	b29b      	uxth	r3, r3
  4054d6:	461a      	mov	r2, r3
  4054d8:	4b1c      	ldr	r3, [pc, #112]	; (40554c <inv_uart_mngr_puts+0x100>)
  4054da:	4798      	blx	r3
			rc = inv_uart_puts(uart_mngr->uart_mngr_uart_num, s, uart_mngr->uart_tx_buf.driver_max_single_txfer_size);
  4054dc:	693b      	ldr	r3, [r7, #16]
  4054de:	7818      	ldrb	r0, [r3, #0]
  4054e0:	693b      	ldr	r3, [r7, #16]
  4054e2:	8a9b      	ldrh	r3, [r3, #20]
  4054e4:	461a      	mov	r2, r3
  4054e6:	6839      	ldr	r1, [r7, #0]
  4054e8:	4b17      	ldr	r3, [pc, #92]	; (405548 <inv_uart_mngr_puts+0xfc>)
  4054ea:	4798      	blx	r3
  4054ec:	6178      	str	r0, [r7, #20]
  4054ee:	e01e      	b.n	40552e <inv_uart_mngr_puts+0xe2>
		}
	} else if(uart_tx_state == INV_UART_STATE_BUSY_TX) {
  4054f0:	7bfb      	ldrb	r3, [r7, #15]
  4054f2:	2b02      	cmp	r3, #2
  4054f4:	d115      	bne.n	405522 <inv_uart_mngr_puts+0xd6>
		if(buffer_get_available(&uart_mngr->uart_tx_buf) < l) {
  4054f6:	693b      	ldr	r3, [r7, #16]
  4054f8:	3310      	adds	r3, #16
  4054fa:	4618      	mov	r0, r3
  4054fc:	4b14      	ldr	r3, [pc, #80]	; (405550 <inv_uart_mngr_puts+0x104>)
  4054fe:	4798      	blx	r3
  405500:	4603      	mov	r3, r0
  405502:	461a      	mov	r2, r3
  405504:	88bb      	ldrh	r3, [r7, #4]
  405506:	4293      	cmp	r3, r2
  405508:	d903      	bls.n	405512 <inv_uart_mngr_puts+0xc6>
			/* Not enough room in the ring byte buffer */
			rc = INV_UART_ERROR_MEMORY;
  40550a:	f06f 0302 	mvn.w	r3, #2
  40550e:	617b      	str	r3, [r7, #20]
  405510:	e00d      	b.n	40552e <inv_uart_mngr_puts+0xe2>
		} else {
			/* Push the data in the ring byte buffer so that it can be transfered once the current transfer finishes */
			buffer_push(&uart_mngr->uart_tx_buf, (uint8_t *)s, l);
  405512:	693b      	ldr	r3, [r7, #16]
  405514:	3310      	adds	r3, #16
  405516:	88ba      	ldrh	r2, [r7, #4]
  405518:	6839      	ldr	r1, [r7, #0]
  40551a:	4618      	mov	r0, r3
  40551c:	4b0b      	ldr	r3, [pc, #44]	; (40554c <inv_uart_mngr_puts+0x100>)
  40551e:	4798      	blx	r3
  405520:	e005      	b.n	40552e <inv_uart_mngr_puts+0xe2>
		}
	} else if(uart_tx_state == INV_UART_STATE_RESET) {
  405522:	7bfb      	ldrb	r3, [r7, #15]
  405524:	2b00      	cmp	r3, #0
  405526:	d102      	bne.n	40552e <inv_uart_mngr_puts+0xe2>
		/* UART driver non-initialized */
		rc = INV_UART_ERROR;
  405528:	f04f 33ff 	mov.w	r3, #4294967295
  40552c:	617b      	str	r3, [r7, #20]
	}
	inv_enable_irq();
  40552e:	4b09      	ldr	r3, [pc, #36]	; (405554 <inv_uart_mngr_puts+0x108>)
  405530:	4798      	blx	r3
	
	return rc;
  405532:	697b      	ldr	r3, [r7, #20]
}
  405534:	4618      	mov	r0, r3
  405536:	3718      	adds	r7, #24
  405538:	46bd      	mov	sp, r7
  40553a:	bd80      	pop	{r7, pc}
  40553c:	200024ac 	.word	0x200024ac
  405540:	00402911 	.word	0x00402911
  405544:	00404ee9 	.word	0x00404ee9
  405548:	00404bd5 	.word	0x00404bd5
  40554c:	00405201 	.word	0x00405201
  405550:	00405305 	.word	0x00405305
  405554:	00402939 	.word	0x00402939

00405558 <inv_uart_mngr_getc>:

int inv_uart_mngr_getc(inv_uart_num_t uart)
{
  405558:	b580      	push	{r7, lr}
  40555a:	b082      	sub	sp, #8
  40555c:	af00      	add	r7, sp, #0
  40555e:	4603      	mov	r3, r0
  405560:	71fb      	strb	r3, [r7, #7]
	return inv_uart_getc(uart);
  405562:	79fb      	ldrb	r3, [r7, #7]
  405564:	4618      	mov	r0, r3
  405566:	4b03      	ldr	r3, [pc, #12]	; (405574 <inv_uart_mngr_getc+0x1c>)
  405568:	4798      	blx	r3
  40556a:	4603      	mov	r3, r0
}
  40556c:	4618      	mov	r0, r3
  40556e:	3708      	adds	r7, #8
  405570:	46bd      	mov	sp, r7
  405572:	bd80      	pop	{r7, pc}
  405574:	00404da5 	.word	0x00404da5

00405578 <inv_error_str>:
 */

#include "ErrorHelper.h"

const char * inv_error_str(int error)
{
  405578:	b480      	push	{r7}
  40557a:	b083      	sub	sp, #12
  40557c:	af00      	add	r7, sp, #0
  40557e:	6078      	str	r0, [r7, #4]
	switch(error) {
  405580:	687b      	ldr	r3, [r7, #4]
  405582:	3310      	adds	r3, #16
  405584:	2b10      	cmp	r3, #16
  405586:	d845      	bhi.n	405614 <inv_error_str+0x9c>
  405588:	a201      	add	r2, pc, #4	; (adr r2, 405590 <inv_error_str+0x18>)
  40558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40558e:	bf00      	nop
  405590:	00405611 	.word	0x00405611
  405594:	0040560d 	.word	0x0040560d
  405598:	00405609 	.word	0x00405609
  40559c:	00405605 	.word	0x00405605
  4055a0:	00405601 	.word	0x00405601
  4055a4:	004055fd 	.word	0x004055fd
  4055a8:	004055f9 	.word	0x004055f9
  4055ac:	004055f5 	.word	0x004055f5
  4055b0:	00405615 	.word	0x00405615
  4055b4:	004055f1 	.word	0x004055f1
  4055b8:	004055ed 	.word	0x004055ed
  4055bc:	004055e9 	.word	0x004055e9
  4055c0:	004055e5 	.word	0x004055e5
  4055c4:	004055e1 	.word	0x004055e1
  4055c8:	004055dd 	.word	0x004055dd
  4055cc:	004055d9 	.word	0x004055d9
  4055d0:	004055d5 	.word	0x004055d5
	case INV_ERROR_SUCCESS:      return "Success";
  4055d4:	4b13      	ldr	r3, [pc, #76]	; (405624 <inv_error_str+0xac>)
  4055d6:	e01e      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR:              return "Unspecified error";
  4055d8:	4b13      	ldr	r3, [pc, #76]	; (405628 <inv_error_str+0xb0>)
  4055da:	e01c      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_NIMPL:        return "Not implemented";
  4055dc:	4b13      	ldr	r3, [pc, #76]	; (40562c <inv_error_str+0xb4>)
  4055de:	e01a      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_TRANSPORT:    return "Transport error";
  4055e0:	4b13      	ldr	r3, [pc, #76]	; (405630 <inv_error_str+0xb8>)
  4055e2:	e018      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_TIMEOUT:      return "Timeout, action did not complete in time";
  4055e4:	4b13      	ldr	r3, [pc, #76]	; (405634 <inv_error_str+0xbc>)
  4055e6:	e016      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_SIZE:         return "Wrong size error";
  4055e8:	4b13      	ldr	r3, [pc, #76]	; (405638 <inv_error_str+0xc0>)
  4055ea:	e014      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_OS:           return "Operating system failure";
  4055ec:	4b13      	ldr	r3, [pc, #76]	; (40563c <inv_error_str+0xc4>)
  4055ee:	e012      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_IO:           return "Input/Output error";
  4055f0:	4b13      	ldr	r3, [pc, #76]	; (405640 <inv_error_str+0xc8>)
  4055f2:	e010      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_MEM: 		 return "Bad allocation";
  4055f4:	4b13      	ldr	r3, [pc, #76]	; (405644 <inv_error_str+0xcc>)
  4055f6:	e00e      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_HW:           return "Hardware error";
  4055f8:	4b13      	ldr	r3, [pc, #76]	; (405648 <inv_error_str+0xd0>)
  4055fa:	e00c      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_BAD_ARG:      return "Invalid arguments";
  4055fc:	4b13      	ldr	r3, [pc, #76]	; (40564c <inv_error_str+0xd4>)
  4055fe:	e00a      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_UNEXPECTED:   return "Unexpected error";
  405600:	4b13      	ldr	r3, [pc, #76]	; (405650 <inv_error_str+0xd8>)
  405602:	e008      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_FILE:         return "Invalid file format";
  405604:	4b13      	ldr	r3, [pc, #76]	; (405654 <inv_error_str+0xdc>)
  405606:	e006      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_PATH:         return "Invalid file path";
  405608:	4b13      	ldr	r3, [pc, #76]	; (405658 <inv_error_str+0xe0>)
  40560a:	e004      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_IMAGE_TYPE:   return "Unknown image type";
  40560c:	4b13      	ldr	r3, [pc, #76]	; (40565c <inv_error_str+0xe4>)
  40560e:	e002      	b.n	405616 <inv_error_str+0x9e>
	case INV_ERROR_WATCHDOG:     return "Watchdog error";
  405610:	4b13      	ldr	r3, [pc, #76]	; (405660 <inv_error_str+0xe8>)
  405612:	e000      	b.n	405616 <inv_error_str+0x9e>
	default:                     return "Unknown error";
  405614:	4b13      	ldr	r3, [pc, #76]	; (405664 <inv_error_str+0xec>)
	}
  405616:	4618      	mov	r0, r3
  405618:	370c      	adds	r7, #12
  40561a:	46bd      	mov	sp, r7
  40561c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405620:	4770      	bx	lr
  405622:	bf00      	nop
  405624:	0040c490 	.word	0x0040c490
  405628:	0040c498 	.word	0x0040c498
  40562c:	0040c4ac 	.word	0x0040c4ac
  405630:	0040c4bc 	.word	0x0040c4bc
  405634:	0040c4cc 	.word	0x0040c4cc
  405638:	0040c4f8 	.word	0x0040c4f8
  40563c:	0040c50c 	.word	0x0040c50c
  405640:	0040c528 	.word	0x0040c528
  405644:	0040c53c 	.word	0x0040c53c
  405648:	0040c54c 	.word	0x0040c54c
  40564c:	0040c55c 	.word	0x0040c55c
  405650:	0040c570 	.word	0x0040c570
  405654:	0040c584 	.word	0x0040c584
  405658:	0040c598 	.word	0x0040c598
  40565c:	0040c5ac 	.word	0x0040c5ac
  405660:	0040c5c0 	.word	0x0040c5c0
  405664:	0040c5d0 	.word	0x0040c5d0

00405668 <inv_msg_setup>:
	(void)level, (void)str, (void)ap;
#endif
}

void inv_msg_setup(int level, inv_msg_printer_t printer)
{
  405668:	b480      	push	{r7}
  40566a:	b083      	sub	sp, #12
  40566c:	af00      	add	r7, sp, #0
  40566e:	6078      	str	r0, [r7, #4]
  405670:	6039      	str	r1, [r7, #0]
	msg_level   = level;
  405672:	4a0c      	ldr	r2, [pc, #48]	; (4056a4 <inv_msg_setup+0x3c>)
  405674:	687b      	ldr	r3, [r7, #4]
  405676:	6013      	str	r3, [r2, #0]
	if (level < INV_MSG_LEVEL_OFF)
  405678:	687b      	ldr	r3, [r7, #4]
  40567a:	2b00      	cmp	r3, #0
  40567c:	da03      	bge.n	405686 <inv_msg_setup+0x1e>
		msg_level = INV_MSG_LEVEL_OFF;
  40567e:	4b09      	ldr	r3, [pc, #36]	; (4056a4 <inv_msg_setup+0x3c>)
  405680:	2200      	movs	r2, #0
  405682:	601a      	str	r2, [r3, #0]
  405684:	e005      	b.n	405692 <inv_msg_setup+0x2a>
	else if (level > INV_MSG_LEVEL_MAX)
  405686:	687b      	ldr	r3, [r7, #4]
  405688:	2b06      	cmp	r3, #6
  40568a:	dd02      	ble.n	405692 <inv_msg_setup+0x2a>
		msg_level = INV_MSG_LEVEL_MAX;
  40568c:	4b05      	ldr	r3, [pc, #20]	; (4056a4 <inv_msg_setup+0x3c>)
  40568e:	2206      	movs	r2, #6
  405690:	601a      	str	r2, [r3, #0]
	msg_printer = printer;
  405692:	4a05      	ldr	r2, [pc, #20]	; (4056a8 <inv_msg_setup+0x40>)
  405694:	683b      	ldr	r3, [r7, #0]
  405696:	6013      	str	r3, [r2, #0]
}
  405698:	bf00      	nop
  40569a:	370c      	adds	r7, #12
  40569c:	46bd      	mov	sp, r7
  40569e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056a2:	4770      	bx	lr
  4056a4:	200043cc 	.word	0x200043cc
  4056a8:	200043d0 	.word	0x200043d0

004056ac <inv_msg>:

void inv_msg(int level, const char * str, ...)
{
  4056ac:	b40e      	push	{r1, r2, r3}
  4056ae:	b580      	push	{r7, lr}
  4056b0:	b085      	sub	sp, #20
  4056b2:	af00      	add	r7, sp, #0
  4056b4:	6078      	str	r0, [r7, #4]
	if(level && level <= msg_level && msg_printer) {
  4056b6:	687b      	ldr	r3, [r7, #4]
  4056b8:	2b00      	cmp	r3, #0
  4056ba:	d011      	beq.n	4056e0 <inv_msg+0x34>
  4056bc:	4b0c      	ldr	r3, [pc, #48]	; (4056f0 <inv_msg+0x44>)
  4056be:	681b      	ldr	r3, [r3, #0]
  4056c0:	687a      	ldr	r2, [r7, #4]
  4056c2:	429a      	cmp	r2, r3
  4056c4:	dc0c      	bgt.n	4056e0 <inv_msg+0x34>
  4056c6:	4b0b      	ldr	r3, [pc, #44]	; (4056f4 <inv_msg+0x48>)
  4056c8:	681b      	ldr	r3, [r3, #0]
  4056ca:	2b00      	cmp	r3, #0
  4056cc:	d008      	beq.n	4056e0 <inv_msg+0x34>
		va_list ap;
		va_start(ap, str);
  4056ce:	f107 0320 	add.w	r3, r7, #32
  4056d2:	60fb      	str	r3, [r7, #12]
		msg_printer(level, str, ap);
  4056d4:	4b07      	ldr	r3, [pc, #28]	; (4056f4 <inv_msg+0x48>)
  4056d6:	681b      	ldr	r3, [r3, #0]
  4056d8:	68fa      	ldr	r2, [r7, #12]
  4056da:	69f9      	ldr	r1, [r7, #28]
  4056dc:	6878      	ldr	r0, [r7, #4]
  4056de:	4798      	blx	r3
		va_end(ap);
	}
}
  4056e0:	bf00      	nop
  4056e2:	3714      	adds	r7, #20
  4056e4:	46bd      	mov	sp, r7
  4056e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
  4056ea:	b003      	add	sp, #12
  4056ec:	4770      	bx	lr
  4056ee:	bf00      	nop
  4056f0:	200043cc 	.word	0x200043cc
  4056f4:	200043d0 	.word	0x200043d0

004056f8 <osc_enable>:
{
  4056f8:	b580      	push	{r7, lr}
  4056fa:	b082      	sub	sp, #8
  4056fc:	af00      	add	r7, sp, #0
  4056fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405700:	687b      	ldr	r3, [r7, #4]
  405702:	2b07      	cmp	r3, #7
  405704:	d831      	bhi.n	40576a <osc_enable+0x72>
  405706:	a201      	add	r2, pc, #4	; (adr r2, 40570c <osc_enable+0x14>)
  405708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40570c:	00405769 	.word	0x00405769
  405710:	0040572d 	.word	0x0040572d
  405714:	00405735 	.word	0x00405735
  405718:	0040573d 	.word	0x0040573d
  40571c:	00405745 	.word	0x00405745
  405720:	0040574d 	.word	0x0040574d
  405724:	00405755 	.word	0x00405755
  405728:	0040575f 	.word	0x0040575f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40572c:	2000      	movs	r0, #0
  40572e:	4b11      	ldr	r3, [pc, #68]	; (405774 <osc_enable+0x7c>)
  405730:	4798      	blx	r3
		break;
  405732:	e01a      	b.n	40576a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  405734:	2001      	movs	r0, #1
  405736:	4b0f      	ldr	r3, [pc, #60]	; (405774 <osc_enable+0x7c>)
  405738:	4798      	blx	r3
		break;
  40573a:	e016      	b.n	40576a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40573c:	2000      	movs	r0, #0
  40573e:	4b0e      	ldr	r3, [pc, #56]	; (405778 <osc_enable+0x80>)
  405740:	4798      	blx	r3
		break;
  405742:	e012      	b.n	40576a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_16_MHz);
  405744:	2010      	movs	r0, #16
  405746:	4b0c      	ldr	r3, [pc, #48]	; (405778 <osc_enable+0x80>)
  405748:	4798      	blx	r3
		break;
  40574a:	e00e      	b.n	40576a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_24_MHz);
  40574c:	2020      	movs	r0, #32
  40574e:	4b0a      	ldr	r3, [pc, #40]	; (405778 <osc_enable+0x80>)
  405750:	4798      	blx	r3
		break;
  405752:	e00a      	b.n	40576a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  405754:	213e      	movs	r1, #62	; 0x3e
  405756:	2000      	movs	r0, #0
  405758:	4b08      	ldr	r3, [pc, #32]	; (40577c <osc_enable+0x84>)
  40575a:	4798      	blx	r3
		break;
  40575c:	e005      	b.n	40576a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40575e:	213e      	movs	r1, #62	; 0x3e
  405760:	2001      	movs	r0, #1
  405762:	4b06      	ldr	r3, [pc, #24]	; (40577c <osc_enable+0x84>)
  405764:	4798      	blx	r3
		break;
  405766:	e000      	b.n	40576a <osc_enable+0x72>
		break;
  405768:	bf00      	nop
}
  40576a:	bf00      	nop
  40576c:	3708      	adds	r7, #8
  40576e:	46bd      	mov	sp, r7
  405770:	bd80      	pop	{r7, pc}
  405772:	bf00      	nop
  405774:	00406511 	.word	0x00406511
  405778:	0040657d 	.word	0x0040657d
  40577c:	004065ed 	.word	0x004065ed

00405780 <osc_is_ready>:
{
  405780:	b580      	push	{r7, lr}
  405782:	b082      	sub	sp, #8
  405784:	af00      	add	r7, sp, #0
  405786:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405788:	687b      	ldr	r3, [r7, #4]
  40578a:	2b07      	cmp	r3, #7
  40578c:	d826      	bhi.n	4057dc <osc_is_ready+0x5c>
  40578e:	a201      	add	r2, pc, #4	; (adr r2, 405794 <osc_is_ready+0x14>)
  405790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405794:	004057b5 	.word	0x004057b5
  405798:	004057b9 	.word	0x004057b9
  40579c:	004057b9 	.word	0x004057b9
  4057a0:	004057cb 	.word	0x004057cb
  4057a4:	004057cb 	.word	0x004057cb
  4057a8:	004057cb 	.word	0x004057cb
  4057ac:	004057cb 	.word	0x004057cb
  4057b0:	004057cb 	.word	0x004057cb
		return 1;
  4057b4:	2301      	movs	r3, #1
  4057b6:	e012      	b.n	4057de <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4057b8:	4b0b      	ldr	r3, [pc, #44]	; (4057e8 <osc_is_ready+0x68>)
  4057ba:	4798      	blx	r3
  4057bc:	4603      	mov	r3, r0
  4057be:	2b00      	cmp	r3, #0
  4057c0:	bf14      	ite	ne
  4057c2:	2301      	movne	r3, #1
  4057c4:	2300      	moveq	r3, #0
  4057c6:	b2db      	uxtb	r3, r3
  4057c8:	e009      	b.n	4057de <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4057ca:	4b08      	ldr	r3, [pc, #32]	; (4057ec <osc_is_ready+0x6c>)
  4057cc:	4798      	blx	r3
  4057ce:	4603      	mov	r3, r0
  4057d0:	2b00      	cmp	r3, #0
  4057d2:	bf14      	ite	ne
  4057d4:	2301      	movne	r3, #1
  4057d6:	2300      	moveq	r3, #0
  4057d8:	b2db      	uxtb	r3, r3
  4057da:	e000      	b.n	4057de <osc_is_ready+0x5e>
	return 0;
  4057dc:	2300      	movs	r3, #0
}
  4057de:	4618      	mov	r0, r3
  4057e0:	3708      	adds	r7, #8
  4057e2:	46bd      	mov	sp, r7
  4057e4:	bd80      	pop	{r7, pc}
  4057e6:	bf00      	nop
  4057e8:	00406549 	.word	0x00406549
  4057ec:	00406665 	.word	0x00406665

004057f0 <osc_get_rate>:
{
  4057f0:	b480      	push	{r7}
  4057f2:	b083      	sub	sp, #12
  4057f4:	af00      	add	r7, sp, #0
  4057f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4057f8:	687b      	ldr	r3, [r7, #4]
  4057fa:	2b07      	cmp	r3, #7
  4057fc:	d825      	bhi.n	40584a <osc_get_rate+0x5a>
  4057fe:	a201      	add	r2, pc, #4	; (adr r2, 405804 <osc_get_rate+0x14>)
  405800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405804:	00405825 	.word	0x00405825
  405808:	0040582b 	.word	0x0040582b
  40580c:	00405831 	.word	0x00405831
  405810:	00405837 	.word	0x00405837
  405814:	0040583b 	.word	0x0040583b
  405818:	0040583f 	.word	0x0040583f
  40581c:	00405843 	.word	0x00405843
  405820:	00405847 	.word	0x00405847
		return OSC_SLCK_32K_RC_HZ;
  405824:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  405828:	e010      	b.n	40584c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40582a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40582e:	e00d      	b.n	40584c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  405830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405834:	e00a      	b.n	40584c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  405836:	4b08      	ldr	r3, [pc, #32]	; (405858 <osc_get_rate+0x68>)
  405838:	e008      	b.n	40584c <osc_get_rate+0x5c>
		return OSC_MAINCK_16M_RC_HZ;
  40583a:	4b08      	ldr	r3, [pc, #32]	; (40585c <osc_get_rate+0x6c>)
  40583c:	e006      	b.n	40584c <osc_get_rate+0x5c>
		return OSC_MAINCK_24M_RC_HZ;
  40583e:	4b08      	ldr	r3, [pc, #32]	; (405860 <osc_get_rate+0x70>)
  405840:	e004      	b.n	40584c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  405842:	2300      	movs	r3, #0
  405844:	e002      	b.n	40584c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  405846:	2300      	movs	r3, #0
  405848:	e000      	b.n	40584c <osc_get_rate+0x5c>
	return 0;
  40584a:	2300      	movs	r3, #0
}
  40584c:	4618      	mov	r0, r3
  40584e:	370c      	adds	r7, #12
  405850:	46bd      	mov	sp, r7
  405852:	f85d 7b04 	ldr.w	r7, [sp], #4
  405856:	4770      	bx	lr
  405858:	007a1200 	.word	0x007a1200
  40585c:	00f42400 	.word	0x00f42400
  405860:	016e3600 	.word	0x016e3600

00405864 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  405864:	b580      	push	{r7, lr}
  405866:	b082      	sub	sp, #8
  405868:	af00      	add	r7, sp, #0
  40586a:	4603      	mov	r3, r0
  40586c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40586e:	bf00      	nop
  405870:	79fb      	ldrb	r3, [r7, #7]
  405872:	4618      	mov	r0, r3
  405874:	4b05      	ldr	r3, [pc, #20]	; (40588c <osc_wait_ready+0x28>)
  405876:	4798      	blx	r3
  405878:	4603      	mov	r3, r0
  40587a:	f083 0301 	eor.w	r3, r3, #1
  40587e:	b2db      	uxtb	r3, r3
  405880:	2b00      	cmp	r3, #0
  405882:	d1f5      	bne.n	405870 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  405884:	bf00      	nop
  405886:	3708      	adds	r7, #8
  405888:	46bd      	mov	sp, r7
  40588a:	bd80      	pop	{r7, pc}
  40588c:	00405781 	.word	0x00405781

00405890 <pll_config_init>:
 * \note The SAMG PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  405890:	b580      	push	{r7, lr}
  405892:	b086      	sub	sp, #24
  405894:	af00      	add	r7, sp, #0
  405896:	60f8      	str	r0, [r7, #12]
  405898:	607a      	str	r2, [r7, #4]
  40589a:	603b      	str	r3, [r7, #0]
  40589c:	460b      	mov	r3, r1
  40589e:	72fb      	strb	r3, [r7, #11]

	Assert(e_src < PLL_NR_SOURCES);
	Assert(ul_div < 2);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4058a0:	7afb      	ldrb	r3, [r7, #11]
  4058a2:	4618      	mov	r0, r3
  4058a4:	4b0d      	ldr	r3, [pc, #52]	; (4058dc <pll_config_init+0x4c>)
  4058a6:	4798      	blx	r3
  4058a8:	4602      	mov	r2, r0
  4058aa:	687b      	ldr	r3, [r7, #4]
  4058ac:	fbb2 f3f3 	udiv	r3, r2, r3
  4058b0:	617b      	str	r3, [r7, #20]

	vco_hz *= ul_mul;
  4058b2:	697b      	ldr	r3, [r7, #20]
  4058b4:	683a      	ldr	r2, [r7, #0]
  4058b6:	fb02 f303 	mul.w	r3, r2, r3
  4058ba:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= (PLL_OUTPUT_MIN_HZ - (PLL_OUTPUT_MIN_HZ >> 6)));
	Assert(vco_hz <= (PLL_OUTPUT_MAX_HZ + (PLL_OUTPUT_MAX_HZ >> 6)));

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_PLLAEN(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4058bc:	683b      	ldr	r3, [r7, #0]
  4058be:	3b01      	subs	r3, #1
  4058c0:	041a      	lsls	r2, r3, #16
  4058c2:	4b07      	ldr	r3, [pc, #28]	; (4058e0 <pll_config_init+0x50>)
  4058c4:	4013      	ands	r3, r2
  4058c6:	687a      	ldr	r2, [r7, #4]
  4058c8:	b2d2      	uxtb	r2, r2
  4058ca:	4313      	orrs	r3, r2
  4058cc:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4058d0:	68fb      	ldr	r3, [r7, #12]
  4058d2:	601a      	str	r2, [r3, #0]
}
  4058d4:	bf00      	nop
  4058d6:	3718      	adds	r7, #24
  4058d8:	46bd      	mov	sp, r7
  4058da:	bd80      	pop	{r7, pc}
  4058dc:	004057f1 	.word	0x004057f1
  4058e0:	1fff0000 	.word	0x1fff0000

004058e4 <pll_enable>:
#endif
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4058e4:	b580      	push	{r7, lr}
  4058e6:	b082      	sub	sp, #8
  4058e8:	af00      	add	r7, sp, #0
  4058ea:	6078      	str	r0, [r7, #4]
  4058ec:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4058ee:	683b      	ldr	r3, [r7, #0]
  4058f0:	2b00      	cmp	r3, #0
  4058f2:	d106      	bne.n	405902 <pll_enable+0x1e>
		pmc_disable_pllack(); // Always stop PLL first!
  4058f4:	4b08      	ldr	r3, [pc, #32]	; (405918 <pll_enable+0x34>)
  4058f6:	4798      	blx	r3
		PMC->CKGR_PLLAR = p_cfg->ctrl;
  4058f8:	4a08      	ldr	r2, [pc, #32]	; (40591c <pll_enable+0x38>)
  4058fa:	687b      	ldr	r3, [r7, #4]
  4058fc:	681b      	ldr	r3, [r3, #0]
  4058fe:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck(); // Always stop PLL first!
		PMC->CKGR_PLLBR = p_cfg->ctrl;
#endif
	}
}
  405900:	e005      	b.n	40590e <pll_enable+0x2a>
		pmc_disable_pllbck(); // Always stop PLL first!
  405902:	4b07      	ldr	r3, [pc, #28]	; (405920 <pll_enable+0x3c>)
  405904:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  405906:	4a05      	ldr	r2, [pc, #20]	; (40591c <pll_enable+0x38>)
  405908:	687b      	ldr	r3, [r7, #4]
  40590a:	681b      	ldr	r3, [r3, #0]
  40590c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  40590e:	bf00      	nop
  405910:	3708      	adds	r7, #8
  405912:	46bd      	mov	sp, r7
  405914:	bd80      	pop	{r7, pc}
  405916:	bf00      	nop
  405918:	00406681 	.word	0x00406681
  40591c:	400e0400 	.word	0x400e0400
  405920:	004066b5 	.word	0x004066b5

00405924 <pll_is_locked>:
#endif
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  405924:	b580      	push	{r7, lr}
  405926:	b082      	sub	sp, #8
  405928:	af00      	add	r7, sp, #0
  40592a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40592c:	687b      	ldr	r3, [r7, #4]
  40592e:	2b00      	cmp	r3, #0
  405930:	d103      	bne.n	40593a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  405932:	4b08      	ldr	r3, [pc, #32]	; (405954 <pll_is_locked+0x30>)
  405934:	4798      	blx	r3
  405936:	4603      	mov	r3, r0
  405938:	e007      	b.n	40594a <pll_is_locked+0x26>
#if SAMG55
	} else if (ul_pll_id == PLLB_ID) {
  40593a:	687b      	ldr	r3, [r7, #4]
  40593c:	2b01      	cmp	r3, #1
  40593e:	d103      	bne.n	405948 <pll_is_locked+0x24>
		return pmc_is_locked_pllbck();
  405940:	4b05      	ldr	r3, [pc, #20]	; (405958 <pll_is_locked+0x34>)
  405942:	4798      	blx	r3
  405944:	4603      	mov	r3, r0
  405946:	e000      	b.n	40594a <pll_is_locked+0x26>
#endif
	} else {
		return 0;
  405948:	2300      	movs	r3, #0
	}
}
  40594a:	4618      	mov	r0, r3
  40594c:	3708      	adds	r7, #8
  40594e:	46bd      	mov	sp, r7
  405950:	bd80      	pop	{r7, pc}
  405952:	bf00      	nop
  405954:	00406699 	.word	0x00406699
  405958:	004066cd 	.word	0x004066cd

0040595c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40595c:	b580      	push	{r7, lr}
  40595e:	b082      	sub	sp, #8
  405960:	af00      	add	r7, sp, #0
  405962:	4603      	mov	r3, r0
  405964:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  405966:	79fb      	ldrb	r3, [r7, #7]
  405968:	3300      	adds	r3, #0
  40596a:	2b01      	cmp	r3, #1
  40596c:	d808      	bhi.n	405980 <pll_enable_source+0x24>
	case PLL_SRC_SLCK_RC:
	case PLL_SRC_SLCK_XTAL:
		osc_enable(e_src);
  40596e:	79fb      	ldrb	r3, [r7, #7]
  405970:	4618      	mov	r0, r3
  405972:	4b06      	ldr	r3, [pc, #24]	; (40598c <pll_enable_source+0x30>)
  405974:	4798      	blx	r3
		osc_wait_ready(e_src);
  405976:	79fb      	ldrb	r3, [r7, #7]
  405978:	4618      	mov	r0, r3
  40597a:	4b05      	ldr	r3, [pc, #20]	; (405990 <pll_enable_source+0x34>)
  40597c:	4798      	blx	r3
		break;
  40597e:	e000      	b.n	405982 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  405980:	bf00      	nop
	}
}
  405982:	bf00      	nop
  405984:	3708      	adds	r7, #8
  405986:	46bd      	mov	sp, r7
  405988:	bd80      	pop	{r7, pc}
  40598a:	bf00      	nop
  40598c:	004056f9 	.word	0x004056f9
  405990:	00405865 	.word	0x00405865

00405994 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  405994:	b580      	push	{r7, lr}
  405996:	b082      	sub	sp, #8
  405998:	af00      	add	r7, sp, #0
  40599a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40599c:	bf00      	nop
  40599e:	6878      	ldr	r0, [r7, #4]
  4059a0:	4b04      	ldr	r3, [pc, #16]	; (4059b4 <pll_wait_for_lock+0x20>)
  4059a2:	4798      	blx	r3
  4059a4:	4603      	mov	r3, r0
  4059a6:	2b00      	cmp	r3, #0
  4059a8:	d0f9      	beq.n	40599e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4059aa:	2300      	movs	r3, #0
}
  4059ac:	4618      	mov	r0, r3
  4059ae:	3708      	adds	r7, #8
  4059b0:	46bd      	mov	sp, r7
  4059b2:	bd80      	pop	{r7, pc}
  4059b4:	00405925 	.word	0x00405925

004059b8 <sysclk_get_main_hz>:
{
  4059b8:	b580      	push	{r7, lr}
  4059ba:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4059bc:	2001      	movs	r0, #1
  4059be:	4b04      	ldr	r3, [pc, #16]	; (4059d0 <sysclk_get_main_hz+0x18>)
  4059c0:	4798      	blx	r3
  4059c2:	4602      	mov	r2, r0
  4059c4:	f640 634e 	movw	r3, #3662	; 0xe4e
  4059c8:	fb03 f302 	mul.w	r3, r3, r2
}
  4059cc:	4618      	mov	r0, r3
  4059ce:	bd80      	pop	{r7, pc}
  4059d0:	004057f1 	.word	0x004057f1

004059d4 <sysclk_get_cpu_hz>:
{
  4059d4:	b580      	push	{r7, lr}
  4059d6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4059d8:	4b02      	ldr	r3, [pc, #8]	; (4059e4 <sysclk_get_cpu_hz+0x10>)
  4059da:	4798      	blx	r3
  4059dc:	4603      	mov	r3, r0
}
  4059de:	4618      	mov	r0, r3
  4059e0:	bd80      	pop	{r7, pc}
  4059e2:	bf00      	nop
  4059e4:	004059b9 	.word	0x004059b9

004059e8 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE
#endif

void sysclk_init(void)
{
  4059e8:	b590      	push	{r4, r7, lr}
  4059ea:	b0a7      	sub	sp, #156	; 0x9c
  4059ec:	af02      	add	r7, sp, #8
	uint32_t unique_id[32];
	uint32_t trim_value;
#endif

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4059ee:	4821      	ldr	r0, [pc, #132]	; (405a74 <sysclk_init+0x8c>)
  4059f0:	4b21      	ldr	r3, [pc, #132]	; (405a78 <sysclk_init+0x90>)
  4059f2:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4059f4:	2001      	movs	r0, #1
  4059f6:	4b21      	ldr	r3, [pc, #132]	; (405a7c <sysclk_init+0x94>)
  4059f8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4059fa:	f107 0008 	add.w	r0, r7, #8
  4059fe:	f640 634e 	movw	r3, #3662	; 0xe4e
  405a02:	2201      	movs	r2, #1
  405a04:	2101      	movs	r1, #1
  405a06:	4c1e      	ldr	r4, [pc, #120]	; (405a80 <sysclk_init+0x98>)
  405a08:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  405a0a:	f107 0308 	add.w	r3, r7, #8
  405a0e:	2100      	movs	r1, #0
  405a10:	4618      	mov	r0, r3
  405a12:	4b1c      	ldr	r3, [pc, #112]	; (405a84 <sysclk_init+0x9c>)
  405a14:	4798      	blx	r3
		pll_wait_for_lock(0);
  405a16:	2000      	movs	r0, #0
  405a18:	4b1b      	ldr	r3, [pc, #108]	; (405a88 <sysclk_init+0xa0>)
  405a1a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  405a1c:	2000      	movs	r0, #0
  405a1e:	4b1b      	ldr	r3, [pc, #108]	; (405a8c <sysclk_init+0xa4>)
  405a20:	4798      	blx	r3
	}
#endif
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  405a22:	4b1b      	ldr	r3, [pc, #108]	; (405a90 <sysclk_init+0xa8>)
  405a24:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  405a26:	4b1b      	ldr	r3, [pc, #108]	; (405a94 <sysclk_init+0xac>)
  405a28:	4798      	blx	r3
  405a2a:	4603      	mov	r3, r0
  405a2c:	4618      	mov	r0, r3
  405a2e:	4b12      	ldr	r3, [pc, #72]	; (405a78 <sysclk_init+0x90>)
  405a30:	4798      	blx	r3
	}
#endif

#if SAMG55
	/* Set the trim value when system run near 120M */
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  405a32:	4b19      	ldr	r3, [pc, #100]	; (405a98 <sysclk_init+0xb0>)
  405a34:	681b      	ldr	r3, [r3, #0]
  405a36:	4a19      	ldr	r2, [pc, #100]	; (405a9c <sysclk_init+0xb4>)
  405a38:	4293      	cmp	r3, r2
  405a3a:	d817      	bhi.n	405a6c <sysclk_init+0x84>
	(SystemCoreClock >= (CHIP_FREQ_CPU_MAX - (CHIP_FREQ_CPU_MAX >> 3)))) {
  405a3c:	4b16      	ldr	r3, [pc, #88]	; (405a98 <sysclk_init+0xb0>)
  405a3e:	681b      	ldr	r3, [r3, #0]
	if ((SystemCoreClock <= (CHIP_FREQ_CPU_MAX + (CHIP_FREQ_CPU_MAX >> 3))) &&
  405a40:	4a17      	ldr	r2, [pc, #92]	; (405aa0 <sysclk_init+0xb8>)
  405a42:	4293      	cmp	r3, r2
  405a44:	d912      	bls.n	405a6c <sysclk_init+0x84>
		/* Get the trim value from unique ID area */
		efc_perform_read_sequence(EFC, EFC_FCMD_STUI, EFC_FCMD_SPUI,
  405a46:	f107 020c 	add.w	r2, r7, #12
  405a4a:	2320      	movs	r3, #32
  405a4c:	9300      	str	r3, [sp, #0]
  405a4e:	4613      	mov	r3, r2
  405a50:	220f      	movs	r2, #15
  405a52:	210e      	movs	r1, #14
  405a54:	4813      	ldr	r0, [pc, #76]	; (405aa4 <sysclk_init+0xbc>)
  405a56:	4c14      	ldr	r4, [pc, #80]	; (405aa8 <sysclk_init+0xc0>)
  405a58:	47a0      	blx	r4
		unique_id, 32);
		
		/* According to Atmel's support, the trim value to reach 120MHz
		is provided in MSB of unique_id[16] instead of LSB */
		trim_value = (unique_id[16] & 0xFFFF0000) >> 16;
  405a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405a5c:	0c1b      	lsrs	r3, r3, #16
  405a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		supc_set_regulator_trim_user(SUPC, trim_value);
  405a62:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
  405a66:	4811      	ldr	r0, [pc, #68]	; (405aac <sysclk_init+0xc4>)
  405a68:	4b11      	ldr	r3, [pc, #68]	; (405ab0 <sysclk_init+0xc8>)
  405a6a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  405a6c:	bf00      	nop
  405a6e:	3794      	adds	r7, #148	; 0x94
  405a70:	46bd      	mov	sp, r7
  405a72:	bd90      	pop	{r4, r7, pc}
  405a74:	07270e00 	.word	0x07270e00
  405a78:	00407641 	.word	0x00407641
  405a7c:	0040595d 	.word	0x0040595d
  405a80:	00405891 	.word	0x00405891
  405a84:	004058e5 	.word	0x004058e5
  405a88:	00405995 	.word	0x00405995
  405a8c:	0040648d 	.word	0x0040648d
  405a90:	0040751d 	.word	0x0040751d
  405a94:	004059d5 	.word	0x004059d5
  405a98:	200024e8 	.word	0x200024e8
  405a9c:	080befc0 	.word	0x080befc0
  405aa0:	06422c3f 	.word	0x06422c3f
  405aa4:	400e0a00 	.word	0x400e0a00
  405aa8:	20000001 	.word	0x20000001
  405aac:	400e1410 	.word	0x400e1410
  405ab0:	00406b01 	.word	0x00406b01

00405ab4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  405ab4:	b480      	push	{r7}
  405ab6:	b083      	sub	sp, #12
  405ab8:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405aba:	f3ef 8310 	mrs	r3, PRIMASK
  405abe:	607b      	str	r3, [r7, #4]
  return(result);
  405ac0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405ac2:	2b00      	cmp	r3, #0
  405ac4:	bf0c      	ite	eq
  405ac6:	2301      	moveq	r3, #1
  405ac8:	2300      	movne	r3, #0
  405aca:	b2db      	uxtb	r3, r3
  405acc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  405ace:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  405ad0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405ad4:	4b04      	ldr	r3, [pc, #16]	; (405ae8 <cpu_irq_save+0x34>)
  405ad6:	2200      	movs	r2, #0
  405ad8:	701a      	strb	r2, [r3, #0]
	return flags;
  405ada:	683b      	ldr	r3, [r7, #0]
}
  405adc:	4618      	mov	r0, r3
  405ade:	370c      	adds	r7, #12
  405ae0:	46bd      	mov	sp, r7
  405ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ae6:	4770      	bx	lr
  405ae8:	200024e4 	.word	0x200024e4

00405aec <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  405aec:	b480      	push	{r7}
  405aee:	b083      	sub	sp, #12
  405af0:	af00      	add	r7, sp, #0
  405af2:	6078      	str	r0, [r7, #4]
	return (flags);
  405af4:	687b      	ldr	r3, [r7, #4]
  405af6:	2b00      	cmp	r3, #0
  405af8:	bf14      	ite	ne
  405afa:	2301      	movne	r3, #1
  405afc:	2300      	moveq	r3, #0
  405afe:	b2db      	uxtb	r3, r3
}
  405b00:	4618      	mov	r0, r3
  405b02:	370c      	adds	r7, #12
  405b04:	46bd      	mov	sp, r7
  405b06:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b0a:	4770      	bx	lr

00405b0c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  405b0c:	b580      	push	{r7, lr}
  405b0e:	b082      	sub	sp, #8
  405b10:	af00      	add	r7, sp, #0
  405b12:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  405b14:	6878      	ldr	r0, [r7, #4]
  405b16:	4b07      	ldr	r3, [pc, #28]	; (405b34 <cpu_irq_restore+0x28>)
  405b18:	4798      	blx	r3
  405b1a:	4603      	mov	r3, r0
  405b1c:	2b00      	cmp	r3, #0
  405b1e:	d005      	beq.n	405b2c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  405b20:	4b05      	ldr	r3, [pc, #20]	; (405b38 <cpu_irq_restore+0x2c>)
  405b22:	2201      	movs	r2, #1
  405b24:	701a      	strb	r2, [r3, #0]
  405b26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405b2a:	b662      	cpsie	i
}
  405b2c:	bf00      	nop
  405b2e:	3708      	adds	r7, #8
  405b30:	46bd      	mov	sp, r7
  405b32:	bd80      	pop	{r7, pc}
  405b34:	00405aed 	.word	0x00405aed
  405b38:	200024e4 	.word	0x200024e4

00405b3c <sysclk_enable_peripheral_clock>:
{
  405b3c:	b580      	push	{r7, lr}
  405b3e:	b082      	sub	sp, #8
  405b40:	af00      	add	r7, sp, #0
  405b42:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  405b44:	6878      	ldr	r0, [r7, #4]
  405b46:	4b03      	ldr	r3, [pc, #12]	; (405b54 <sysclk_enable_peripheral_clock+0x18>)
  405b48:	4798      	blx	r3
}
  405b4a:	bf00      	nop
  405b4c:	3708      	adds	r7, #8
  405b4e:	46bd      	mov	sp, r7
  405b50:	bd80      	pop	{r7, pc}
  405b52:	bf00      	nop
  405b54:	004066e9 	.word	0x004066e9

00405b58 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  405b58:	b580      	push	{r7, lr}
  405b5a:	b084      	sub	sp, #16
  405b5c:	af00      	add	r7, sp, #0
  405b5e:	4603      	mov	r3, r0
  405b60:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  405b62:	79fb      	ldrb	r3, [r7, #7]
  405b64:	4a0a      	ldr	r2, [pc, #40]	; (405b90 <sleepmgr_lock_mode+0x38>)
  405b66:	5cd3      	ldrb	r3, [r2, r3]
  405b68:	2bff      	cmp	r3, #255	; 0xff
  405b6a:	d100      	bne.n	405b6e <sleepmgr_lock_mode+0x16>
		while (true) {
  405b6c:	e7fe      	b.n	405b6c <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  405b6e:	4b09      	ldr	r3, [pc, #36]	; (405b94 <sleepmgr_lock_mode+0x3c>)
  405b70:	4798      	blx	r3
  405b72:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  405b74:	79fb      	ldrb	r3, [r7, #7]
  405b76:	4a06      	ldr	r2, [pc, #24]	; (405b90 <sleepmgr_lock_mode+0x38>)
  405b78:	5cd2      	ldrb	r2, [r2, r3]
  405b7a:	3201      	adds	r2, #1
  405b7c:	b2d1      	uxtb	r1, r2
  405b7e:	4a04      	ldr	r2, [pc, #16]	; (405b90 <sleepmgr_lock_mode+0x38>)
  405b80:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  405b82:	68f8      	ldr	r0, [r7, #12]
  405b84:	4b04      	ldr	r3, [pc, #16]	; (405b98 <sleepmgr_lock_mode+0x40>)
  405b86:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  405b88:	bf00      	nop
  405b8a:	3710      	adds	r7, #16
  405b8c:	46bd      	mov	sp, r7
  405b8e:	bd80      	pop	{r7, pc}
  405b90:	20004690 	.word	0x20004690
  405b94:	00405ab5 	.word	0x00405ab5
  405b98:	00405b0d 	.word	0x00405b0d

00405b9c <flexcom_enable>:
 *
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 *
 */
void flexcom_enable(Flexcom *p_flexcom)
{
  405b9c:	b580      	push	{r7, lr}
  405b9e:	b082      	sub	sp, #8
  405ba0:	af00      	add	r7, sp, #0
  405ba2:	6078      	str	r0, [r7, #4]
#if SAMG55
    #define PMC_PCK_PRES_CLK_1  PMC_PCK_PRES(0)
#endif

	sleepmgr_lock_mode(SLEEPMGR_ACTIVE);
  405ba4:	2000      	movs	r0, #0
  405ba6:	4b4a      	ldr	r3, [pc, #296]	; (405cd0 <flexcom_enable+0x134>)
  405ba8:	4798      	blx	r3
	/* Enable PMC clock for FLEXCOM */
#ifdef ID_FLEXCOM7
	 if (p_flexcom == FLEXCOM7) {
  405baa:	687b      	ldr	r3, [r7, #4]
  405bac:	4a49      	ldr	r2, [pc, #292]	; (405cd4 <flexcom_enable+0x138>)
  405bae:	4293      	cmp	r3, r2
  405bb0:	d10d      	bne.n	405bce <flexcom_enable+0x32>
		sysclk_enable_peripheral_clock(ID_FLEXCOM7);
  405bb2:	2007      	movs	r0, #7
  405bb4:	4b48      	ldr	r3, [pc, #288]	; (405cd8 <flexcom_enable+0x13c>)
  405bb6:	4798      	blx	r3
		/* Enable PCK output */
		pmc_disable_pck(PMC_PCK_7);
  405bb8:	2007      	movs	r0, #7
  405bba:	4b48      	ldr	r3, [pc, #288]	; (405cdc <flexcom_enable+0x140>)
  405bbc:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  405bbe:	2100      	movs	r1, #0
  405bc0:	2007      	movs	r0, #7
  405bc2:	4b47      	ldr	r3, [pc, #284]	; (405ce0 <flexcom_enable+0x144>)
  405bc4:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  405bc6:	2007      	movs	r0, #7
  405bc8:	4b46      	ldr	r3, [pc, #280]	; (405ce4 <flexcom_enable+0x148>)
  405bca:	4798      	blx	r3
	} else
#endif
	{
		Assert(false);
	}
}
  405bcc:	e07c      	b.n	405cc8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM6) {
  405bce:	687b      	ldr	r3, [r7, #4]
  405bd0:	4a45      	ldr	r2, [pc, #276]	; (405ce8 <flexcom_enable+0x14c>)
  405bd2:	4293      	cmp	r3, r2
  405bd4:	d10d      	bne.n	405bf2 <flexcom_enable+0x56>
		sysclk_enable_peripheral_clock(ID_FLEXCOM6);
  405bd6:	2016      	movs	r0, #22
  405bd8:	4b3f      	ldr	r3, [pc, #252]	; (405cd8 <flexcom_enable+0x13c>)
  405bda:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  405bdc:	2007      	movs	r0, #7
  405bde:	4b3f      	ldr	r3, [pc, #252]	; (405cdc <flexcom_enable+0x140>)
  405be0:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  405be2:	2100      	movs	r1, #0
  405be4:	2007      	movs	r0, #7
  405be6:	4b3e      	ldr	r3, [pc, #248]	; (405ce0 <flexcom_enable+0x144>)
  405be8:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  405bea:	2007      	movs	r0, #7
  405bec:	4b3d      	ldr	r3, [pc, #244]	; (405ce4 <flexcom_enable+0x148>)
  405bee:	4798      	blx	r3
}
  405bf0:	e06a      	b.n	405cc8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM5) {
  405bf2:	687b      	ldr	r3, [r7, #4]
  405bf4:	4a3d      	ldr	r2, [pc, #244]	; (405cec <flexcom_enable+0x150>)
  405bf6:	4293      	cmp	r3, r2
  405bf8:	d10d      	bne.n	405c16 <flexcom_enable+0x7a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM5);
  405bfa:	2015      	movs	r0, #21
  405bfc:	4b36      	ldr	r3, [pc, #216]	; (405cd8 <flexcom_enable+0x13c>)
  405bfe:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  405c00:	2007      	movs	r0, #7
  405c02:	4b36      	ldr	r3, [pc, #216]	; (405cdc <flexcom_enable+0x140>)
  405c04:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  405c06:	2100      	movs	r1, #0
  405c08:	2007      	movs	r0, #7
  405c0a:	4b35      	ldr	r3, [pc, #212]	; (405ce0 <flexcom_enable+0x144>)
  405c0c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  405c0e:	2007      	movs	r0, #7
  405c10:	4b34      	ldr	r3, [pc, #208]	; (405ce4 <flexcom_enable+0x148>)
  405c12:	4798      	blx	r3
}
  405c14:	e058      	b.n	405cc8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM4) {
  405c16:	687b      	ldr	r3, [r7, #4]
  405c18:	4a35      	ldr	r2, [pc, #212]	; (405cf0 <flexcom_enable+0x154>)
  405c1a:	4293      	cmp	r3, r2
  405c1c:	d10d      	bne.n	405c3a <flexcom_enable+0x9e>
		sysclk_enable_peripheral_clock(ID_FLEXCOM4);
  405c1e:	2014      	movs	r0, #20
  405c20:	4b2d      	ldr	r3, [pc, #180]	; (405cd8 <flexcom_enable+0x13c>)
  405c22:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_7);
  405c24:	2007      	movs	r0, #7
  405c26:	4b2d      	ldr	r3, [pc, #180]	; (405cdc <flexcom_enable+0x140>)
  405c28:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_7, PMC_PCK_PRES_CLK_1);
  405c2a:	2100      	movs	r1, #0
  405c2c:	2007      	movs	r0, #7
  405c2e:	4b2c      	ldr	r3, [pc, #176]	; (405ce0 <flexcom_enable+0x144>)
  405c30:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_7);
  405c32:	2007      	movs	r0, #7
  405c34:	4b2b      	ldr	r3, [pc, #172]	; (405ce4 <flexcom_enable+0x148>)
  405c36:	4798      	blx	r3
}
  405c38:	e046      	b.n	405cc8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM3) {
  405c3a:	687b      	ldr	r3, [r7, #4]
  405c3c:	4a2d      	ldr	r2, [pc, #180]	; (405cf4 <flexcom_enable+0x158>)
  405c3e:	4293      	cmp	r3, r2
  405c40:	d10d      	bne.n	405c5e <flexcom_enable+0xc2>
		sysclk_enable_peripheral_clock(ID_FLEXCOM3);
  405c42:	2013      	movs	r0, #19
  405c44:	4b24      	ldr	r3, [pc, #144]	; (405cd8 <flexcom_enable+0x13c>)
  405c46:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  405c48:	2006      	movs	r0, #6
  405c4a:	4b24      	ldr	r3, [pc, #144]	; (405cdc <flexcom_enable+0x140>)
  405c4c:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  405c4e:	2100      	movs	r1, #0
  405c50:	2006      	movs	r0, #6
  405c52:	4b23      	ldr	r3, [pc, #140]	; (405ce0 <flexcom_enable+0x144>)
  405c54:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  405c56:	2006      	movs	r0, #6
  405c58:	4b22      	ldr	r3, [pc, #136]	; (405ce4 <flexcom_enable+0x148>)
  405c5a:	4798      	blx	r3
}
  405c5c:	e034      	b.n	405cc8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM2) {
  405c5e:	687b      	ldr	r3, [r7, #4]
  405c60:	4a25      	ldr	r2, [pc, #148]	; (405cf8 <flexcom_enable+0x15c>)
  405c62:	4293      	cmp	r3, r2
  405c64:	d10d      	bne.n	405c82 <flexcom_enable+0xe6>
		sysclk_enable_peripheral_clock(ID_FLEXCOM2);
  405c66:	200e      	movs	r0, #14
  405c68:	4b1b      	ldr	r3, [pc, #108]	; (405cd8 <flexcom_enable+0x13c>)
  405c6a:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  405c6c:	2006      	movs	r0, #6
  405c6e:	4b1b      	ldr	r3, [pc, #108]	; (405cdc <flexcom_enable+0x140>)
  405c70:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  405c72:	2100      	movs	r1, #0
  405c74:	2006      	movs	r0, #6
  405c76:	4b1a      	ldr	r3, [pc, #104]	; (405ce0 <flexcom_enable+0x144>)
  405c78:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  405c7a:	2006      	movs	r0, #6
  405c7c:	4b19      	ldr	r3, [pc, #100]	; (405ce4 <flexcom_enable+0x148>)
  405c7e:	4798      	blx	r3
}
  405c80:	e022      	b.n	405cc8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM1) {
  405c82:	687b      	ldr	r3, [r7, #4]
  405c84:	4a1d      	ldr	r2, [pc, #116]	; (405cfc <flexcom_enable+0x160>)
  405c86:	4293      	cmp	r3, r2
  405c88:	d10d      	bne.n	405ca6 <flexcom_enable+0x10a>
		sysclk_enable_peripheral_clock(ID_FLEXCOM1);
  405c8a:	2009      	movs	r0, #9
  405c8c:	4b12      	ldr	r3, [pc, #72]	; (405cd8 <flexcom_enable+0x13c>)
  405c8e:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  405c90:	2006      	movs	r0, #6
  405c92:	4b12      	ldr	r3, [pc, #72]	; (405cdc <flexcom_enable+0x140>)
  405c94:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  405c96:	2100      	movs	r1, #0
  405c98:	2006      	movs	r0, #6
  405c9a:	4b11      	ldr	r3, [pc, #68]	; (405ce0 <flexcom_enable+0x144>)
  405c9c:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  405c9e:	2006      	movs	r0, #6
  405ca0:	4b10      	ldr	r3, [pc, #64]	; (405ce4 <flexcom_enable+0x148>)
  405ca2:	4798      	blx	r3
}
  405ca4:	e010      	b.n	405cc8 <flexcom_enable+0x12c>
	if (p_flexcom == FLEXCOM0) {
  405ca6:	687b      	ldr	r3, [r7, #4]
  405ca8:	4a15      	ldr	r2, [pc, #84]	; (405d00 <flexcom_enable+0x164>)
  405caa:	4293      	cmp	r3, r2
  405cac:	d10c      	bne.n	405cc8 <flexcom_enable+0x12c>
		sysclk_enable_peripheral_clock(ID_FLEXCOM0);
  405cae:	2008      	movs	r0, #8
  405cb0:	4b09      	ldr	r3, [pc, #36]	; (405cd8 <flexcom_enable+0x13c>)
  405cb2:	4798      	blx	r3
		pmc_disable_pck(PMC_PCK_6);
  405cb4:	2006      	movs	r0, #6
  405cb6:	4b09      	ldr	r3, [pc, #36]	; (405cdc <flexcom_enable+0x140>)
  405cb8:	4798      	blx	r3
		pmc_switch_pck_to_mck(PMC_PCK_6, PMC_PCK_PRES_CLK_1);
  405cba:	2100      	movs	r1, #0
  405cbc:	2006      	movs	r0, #6
  405cbe:	4b08      	ldr	r3, [pc, #32]	; (405ce0 <flexcom_enable+0x144>)
  405cc0:	4798      	blx	r3
		pmc_enable_pck(PMC_PCK_6);
  405cc2:	2006      	movs	r0, #6
  405cc4:	4b07      	ldr	r3, [pc, #28]	; (405ce4 <flexcom_enable+0x148>)
  405cc6:	4798      	blx	r3
}
  405cc8:	bf00      	nop
  405cca:	3708      	adds	r7, #8
  405ccc:	46bd      	mov	sp, r7
  405cce:	bd80      	pop	{r7, pc}
  405cd0:	00405b59 	.word	0x00405b59
  405cd4:	40034000 	.word	0x40034000
  405cd8:	00405b3d 	.word	0x00405b3d
  405cdc:	004067ed 	.word	0x004067ed
  405ce0:	0040676d 	.word	0x0040676d
  405ce4:	004067c5 	.word	0x004067c5
  405ce8:	40040000 	.word	0x40040000
  405cec:	40008000 	.word	0x40008000
  405cf0:	4001c000 	.word	0x4001c000
  405cf4:	40018000 	.word	0x40018000
  405cf8:	40024000 	.word	0x40024000
  405cfc:	40020000 	.word	0x40020000
  405d00:	4000c000 	.word	0x4000c000

00405d04 <flexcom_set_opmode>:
 * \param p_flexcom  Pointer to a FLEXCOM instance.
 * \param opmode  Opration mode.
 *
 */
void flexcom_set_opmode(Flexcom *p_flexcom, enum flexcom_opmode opmode)
{
  405d04:	b480      	push	{r7}
  405d06:	b083      	sub	sp, #12
  405d08:	af00      	add	r7, sp, #0
  405d0a:	6078      	str	r0, [r7, #4]
  405d0c:	460b      	mov	r3, r1
  405d0e:	70fb      	strb	r3, [r7, #3]
	p_flexcom->FLEXCOM_MR = opmode;
  405d10:	78fa      	ldrb	r2, [r7, #3]
  405d12:	687b      	ldr	r3, [r7, #4]
  405d14:	601a      	str	r2, [r3, #0]
}
  405d16:	bf00      	nop
  405d18:	370c      	adds	r7, #12
  405d1a:	46bd      	mov	sp, r7
  405d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d20:	4770      	bx	lr

00405d22 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  405d22:	b480      	push	{r7}
  405d24:	b085      	sub	sp, #20
  405d26:	af00      	add	r7, sp, #0
  405d28:	60f8      	str	r0, [r7, #12]
  405d2a:	60b9      	str	r1, [r7, #8]
  405d2c:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  405d2e:	68bb      	ldr	r3, [r7, #8]
  405d30:	2b00      	cmp	r3, #0
  405d32:	d007      	beq.n	405d44 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  405d34:	68bb      	ldr	r3, [r7, #8]
  405d36:	681a      	ldr	r2, [r3, #0]
  405d38:	68fb      	ldr	r3, [r7, #12]
  405d3a:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  405d3c:	68bb      	ldr	r3, [r7, #8]
  405d3e:	685a      	ldr	r2, [r3, #4]
  405d40:	68fb      	ldr	r3, [r7, #12]
  405d42:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  405d44:	687b      	ldr	r3, [r7, #4]
  405d46:	2b00      	cmp	r3, #0
  405d48:	d007      	beq.n	405d5a <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  405d4a:	687b      	ldr	r3, [r7, #4]
  405d4c:	681a      	ldr	r2, [r3, #0]
  405d4e:	68fb      	ldr	r3, [r7, #12]
  405d50:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  405d52:	687b      	ldr	r3, [r7, #4]
  405d54:	685a      	ldr	r2, [r3, #4]
  405d56:	68fb      	ldr	r3, [r7, #12]
  405d58:	61da      	str	r2, [r3, #28]
	}
}
  405d5a:	bf00      	nop
  405d5c:	3714      	adds	r7, #20
  405d5e:	46bd      	mov	sp, r7
  405d60:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d64:	4770      	bx	lr

00405d66 <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  405d66:	b480      	push	{r7}
  405d68:	b085      	sub	sp, #20
  405d6a:	af00      	add	r7, sp, #0
  405d6c:	60f8      	str	r0, [r7, #12]
  405d6e:	60b9      	str	r1, [r7, #8]
  405d70:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  405d72:	68bb      	ldr	r3, [r7, #8]
  405d74:	2b00      	cmp	r3, #0
  405d76:	d007      	beq.n	405d88 <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
  405d78:	68bb      	ldr	r3, [r7, #8]
  405d7a:	681a      	ldr	r2, [r3, #0]
  405d7c:	68fb      	ldr	r3, [r7, #12]
  405d7e:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
  405d80:	68bb      	ldr	r3, [r7, #8]
  405d82:	685a      	ldr	r2, [r3, #4]
  405d84:	68fb      	ldr	r3, [r7, #12]
  405d86:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
  405d88:	687b      	ldr	r3, [r7, #4]
  405d8a:	2b00      	cmp	r3, #0
  405d8c:	d007      	beq.n	405d9e <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
  405d8e:	687b      	ldr	r3, [r7, #4]
  405d90:	681a      	ldr	r2, [r3, #0]
  405d92:	68fb      	ldr	r3, [r7, #12]
  405d94:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
  405d96:	687b      	ldr	r3, [r7, #4]
  405d98:	685a      	ldr	r2, [r3, #4]
  405d9a:	68fb      	ldr	r3, [r7, #12]
  405d9c:	615a      	str	r2, [r3, #20]
	}
}
  405d9e:	bf00      	nop
  405da0:	3714      	adds	r7, #20
  405da2:	46bd      	mov	sp, r7
  405da4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405da8:	4770      	bx	lr

00405daa <pdc_rx_clear_cnt>:
 *
 * \param[out] p_pdc Device structure pointer
 */
void pdc_rx_clear_cnt(
		Pdc *p_pdc)
{
  405daa:	b480      	push	{r7}
  405dac:	b083      	sub	sp, #12
  405dae:	af00      	add	r7, sp, #0
  405db0:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_RNCR = 0;
  405db2:	687b      	ldr	r3, [r7, #4]
  405db4:	2200      	movs	r2, #0
  405db6:	615a      	str	r2, [r3, #20]
	p_pdc->PERIPH_RCR = 0;
  405db8:	687b      	ldr	r3, [r7, #4]
  405dba:	2200      	movs	r2, #0
  405dbc:	605a      	str	r2, [r3, #4]
}
  405dbe:	bf00      	nop
  405dc0:	370c      	adds	r7, #12
  405dc2:	46bd      	mov	sp, r7
  405dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405dc8:	4770      	bx	lr

00405dca <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  405dca:	b480      	push	{r7}
  405dcc:	b083      	sub	sp, #12
  405dce:	af00      	add	r7, sp, #0
  405dd0:	6078      	str	r0, [r7, #4]
  405dd2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  405dd4:	683a      	ldr	r2, [r7, #0]
  405dd6:	f240 1301 	movw	r3, #257	; 0x101
  405dda:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
  405ddc:	687a      	ldr	r2, [r7, #4]
  405dde:	6213      	str	r3, [r2, #32]
}
  405de0:	bf00      	nop
  405de2:	370c      	adds	r7, #12
  405de4:	46bd      	mov	sp, r7
  405de6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405dea:	4770      	bx	lr

00405dec <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  405dec:	b480      	push	{r7}
  405dee:	b083      	sub	sp, #12
  405df0:	af00      	add	r7, sp, #0
  405df2:	6078      	str	r0, [r7, #4]
  405df4:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
  405df6:	683a      	ldr	r2, [r7, #0]
  405df8:	f240 2302 	movw	r3, #514	; 0x202
  405dfc:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
  405dfe:	687a      	ldr	r2, [r7, #4]
  405e00:	6213      	str	r3, [r2, #32]
}
  405e02:	bf00      	nop
  405e04:	370c      	adds	r7, #12
  405e06:	46bd      	mov	sp, r7
  405e08:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e0c:	4770      	bx	lr

00405e0e <pdc_read_status>:
 * </table>
 *
 */
uint32_t pdc_read_status(
		Pdc *p_pdc)
{
  405e0e:	b480      	push	{r7}
  405e10:	b083      	sub	sp, #12
  405e12:	af00      	add	r7, sp, #0
  405e14:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_PTSR;
  405e16:	687b      	ldr	r3, [r7, #4]
  405e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  405e1a:	4618      	mov	r0, r3
  405e1c:	370c      	adds	r7, #12
  405e1e:	46bd      	mov	sp, r7
  405e20:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e24:	4770      	bx	lr

00405e26 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
  405e26:	b480      	push	{r7}
  405e28:	b083      	sub	sp, #12
  405e2a:	af00      	add	r7, sp, #0
  405e2c:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
  405e2e:	687b      	ldr	r3, [r7, #4]
  405e30:	685b      	ldr	r3, [r3, #4]
}
  405e32:	4618      	mov	r0, r3
  405e34:	370c      	adds	r7, #12
  405e36:	46bd      	mov	sp, r7
  405e38:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e3c:	4770      	bx	lr

00405e3e <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  405e3e:	b480      	push	{r7}
  405e40:	b085      	sub	sp, #20
  405e42:	af00      	add	r7, sp, #0
  405e44:	60f8      	str	r0, [r7, #12]
  405e46:	60b9      	str	r1, [r7, #8]
  405e48:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  405e4a:	687b      	ldr	r3, [r7, #4]
  405e4c:	2b00      	cmp	r3, #0
  405e4e:	d003      	beq.n	405e58 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  405e50:	68fb      	ldr	r3, [r7, #12]
  405e52:	68ba      	ldr	r2, [r7, #8]
  405e54:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  405e56:	e002      	b.n	405e5e <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  405e58:	68fb      	ldr	r3, [r7, #12]
  405e5a:	68ba      	ldr	r2, [r7, #8]
  405e5c:	661a      	str	r2, [r3, #96]	; 0x60
}
  405e5e:	bf00      	nop
  405e60:	3714      	adds	r7, #20
  405e62:	46bd      	mov	sp, r7
  405e64:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e68:	4770      	bx	lr

00405e6a <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  405e6a:	b480      	push	{r7}
  405e6c:	b087      	sub	sp, #28
  405e6e:	af00      	add	r7, sp, #0
  405e70:	60f8      	str	r0, [r7, #12]
  405e72:	60b9      	str	r1, [r7, #8]
  405e74:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  405e76:	68fb      	ldr	r3, [r7, #12]
  405e78:	687a      	ldr	r2, [r7, #4]
  405e7a:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  405e7c:	68bb      	ldr	r3, [r7, #8]
  405e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405e82:	d02b      	beq.n	405edc <pio_set_peripheral+0x72>
  405e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405e88:	d805      	bhi.n	405e96 <pio_set_peripheral+0x2c>
  405e8a:	2b00      	cmp	r3, #0
  405e8c:	d03f      	beq.n	405f0e <pio_set_peripheral+0xa4>
  405e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  405e92:	d00a      	beq.n	405eaa <pio_set_peripheral+0x40>
  405e94:	e037      	b.n	405f06 <pio_set_peripheral+0x9c>
  405e96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405e9a:	d038      	beq.n	405f0e <pio_set_peripheral+0xa4>
  405e9c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  405ea0:	d035      	beq.n	405f0e <pio_set_peripheral+0xa4>
  405ea2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405ea6:	d032      	beq.n	405f0e <pio_set_peripheral+0xa4>
  405ea8:	e02d      	b.n	405f06 <pio_set_peripheral+0x9c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405eaa:	68fb      	ldr	r3, [r7, #12]
  405eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405eae:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405eb0:	68fb      	ldr	r3, [r7, #12]
  405eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405eb4:	687b      	ldr	r3, [r7, #4]
  405eb6:	43d9      	mvns	r1, r3
  405eb8:	697b      	ldr	r3, [r7, #20]
  405eba:	400b      	ands	r3, r1
  405ebc:	401a      	ands	r2, r3
  405ebe:	68fb      	ldr	r3, [r7, #12]
  405ec0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405ec2:	68fb      	ldr	r3, [r7, #12]
  405ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405ec6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405ec8:	68fb      	ldr	r3, [r7, #12]
  405eca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405ecc:	687b      	ldr	r3, [r7, #4]
  405ece:	43d9      	mvns	r1, r3
  405ed0:	697b      	ldr	r3, [r7, #20]
  405ed2:	400b      	ands	r3, r1
  405ed4:	401a      	ands	r2, r3
  405ed6:	68fb      	ldr	r3, [r7, #12]
  405ed8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405eda:	e014      	b.n	405f06 <pio_set_peripheral+0x9c>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405edc:	68fb      	ldr	r3, [r7, #12]
  405ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405ee0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405ee2:	687a      	ldr	r2, [r7, #4]
  405ee4:	697b      	ldr	r3, [r7, #20]
  405ee6:	431a      	orrs	r2, r3
  405ee8:	68fb      	ldr	r3, [r7, #12]
  405eea:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405eec:	68fb      	ldr	r3, [r7, #12]
  405eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405ef0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405ef2:	68fb      	ldr	r3, [r7, #12]
  405ef4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405ef6:	687b      	ldr	r3, [r7, #4]
  405ef8:	43d9      	mvns	r1, r3
  405efa:	697b      	ldr	r3, [r7, #20]
  405efc:	400b      	ands	r3, r1
  405efe:	401a      	ands	r2, r3
  405f00:	68fb      	ldr	r3, [r7, #12]
  405f02:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405f04:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  405f06:	68fb      	ldr	r3, [r7, #12]
  405f08:	687a      	ldr	r2, [r7, #4]
  405f0a:	605a      	str	r2, [r3, #4]
  405f0c:	e000      	b.n	405f10 <pio_set_peripheral+0xa6>
		return;
  405f0e:	bf00      	nop
}
  405f10:	371c      	adds	r7, #28
  405f12:	46bd      	mov	sp, r7
  405f14:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f18:	4770      	bx	lr
	...

00405f1c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  405f1c:	b580      	push	{r7, lr}
  405f1e:	b084      	sub	sp, #16
  405f20:	af00      	add	r7, sp, #0
  405f22:	60f8      	str	r0, [r7, #12]
  405f24:	60b9      	str	r1, [r7, #8]
  405f26:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  405f28:	68b9      	ldr	r1, [r7, #8]
  405f2a:	68f8      	ldr	r0, [r7, #12]
  405f2c:	4b19      	ldr	r3, [pc, #100]	; (405f94 <pio_set_input+0x78>)
  405f2e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  405f30:	687b      	ldr	r3, [r7, #4]
  405f32:	f003 0301 	and.w	r3, r3, #1
  405f36:	461a      	mov	r2, r3
  405f38:	68b9      	ldr	r1, [r7, #8]
  405f3a:	68f8      	ldr	r0, [r7, #12]
  405f3c:	4b16      	ldr	r3, [pc, #88]	; (405f98 <pio_set_input+0x7c>)
  405f3e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  405f40:	687b      	ldr	r3, [r7, #4]
  405f42:	f003 030a 	and.w	r3, r3, #10
  405f46:	2b00      	cmp	r3, #0
  405f48:	d003      	beq.n	405f52 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  405f4a:	68fb      	ldr	r3, [r7, #12]
  405f4c:	68ba      	ldr	r2, [r7, #8]
  405f4e:	621a      	str	r2, [r3, #32]
  405f50:	e002      	b.n	405f58 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  405f52:	68fb      	ldr	r3, [r7, #12]
  405f54:	68ba      	ldr	r2, [r7, #8]
  405f56:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  405f58:	687b      	ldr	r3, [r7, #4]
  405f5a:	f003 0302 	and.w	r3, r3, #2
  405f5e:	2b00      	cmp	r3, #0
  405f60:	d004      	beq.n	405f6c <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  405f62:	68fb      	ldr	r3, [r7, #12]
  405f64:	68ba      	ldr	r2, [r7, #8]
  405f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  405f6a:	e008      	b.n	405f7e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  405f6c:	687b      	ldr	r3, [r7, #4]
  405f6e:	f003 0308 	and.w	r3, r3, #8
  405f72:	2b00      	cmp	r3, #0
  405f74:	d003      	beq.n	405f7e <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  405f76:	68fb      	ldr	r3, [r7, #12]
  405f78:	68ba      	ldr	r2, [r7, #8]
  405f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  405f7e:	68fb      	ldr	r3, [r7, #12]
  405f80:	68ba      	ldr	r2, [r7, #8]
  405f82:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  405f84:	68fb      	ldr	r3, [r7, #12]
  405f86:	68ba      	ldr	r2, [r7, #8]
  405f88:	601a      	str	r2, [r3, #0]
}
  405f8a:	bf00      	nop
  405f8c:	3710      	adds	r7, #16
  405f8e:	46bd      	mov	sp, r7
  405f90:	bd80      	pop	{r7, pc}
  405f92:	bf00      	nop
  405f94:	00406149 	.word	0x00406149
  405f98:	00405e3f 	.word	0x00405e3f

00405f9c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  405f9c:	b580      	push	{r7, lr}
  405f9e:	b084      	sub	sp, #16
  405fa0:	af00      	add	r7, sp, #0
  405fa2:	60f8      	str	r0, [r7, #12]
  405fa4:	60b9      	str	r1, [r7, #8]
  405fa6:	607a      	str	r2, [r7, #4]
  405fa8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  405faa:	68b9      	ldr	r1, [r7, #8]
  405fac:	68f8      	ldr	r0, [r7, #12]
  405fae:	4b12      	ldr	r3, [pc, #72]	; (405ff8 <pio_set_output+0x5c>)
  405fb0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  405fb2:	69ba      	ldr	r2, [r7, #24]
  405fb4:	68b9      	ldr	r1, [r7, #8]
  405fb6:	68f8      	ldr	r0, [r7, #12]
  405fb8:	4b10      	ldr	r3, [pc, #64]	; (405ffc <pio_set_output+0x60>)
  405fba:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  405fbc:	683b      	ldr	r3, [r7, #0]
  405fbe:	2b00      	cmp	r3, #0
  405fc0:	d003      	beq.n	405fca <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  405fc2:	68fb      	ldr	r3, [r7, #12]
  405fc4:	68ba      	ldr	r2, [r7, #8]
  405fc6:	651a      	str	r2, [r3, #80]	; 0x50
  405fc8:	e002      	b.n	405fd0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  405fca:	68fb      	ldr	r3, [r7, #12]
  405fcc:	68ba      	ldr	r2, [r7, #8]
  405fce:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  405fd0:	687b      	ldr	r3, [r7, #4]
  405fd2:	2b00      	cmp	r3, #0
  405fd4:	d003      	beq.n	405fde <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  405fd6:	68fb      	ldr	r3, [r7, #12]
  405fd8:	68ba      	ldr	r2, [r7, #8]
  405fda:	631a      	str	r2, [r3, #48]	; 0x30
  405fdc:	e002      	b.n	405fe4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  405fde:	68fb      	ldr	r3, [r7, #12]
  405fe0:	68ba      	ldr	r2, [r7, #8]
  405fe2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  405fe4:	68fb      	ldr	r3, [r7, #12]
  405fe6:	68ba      	ldr	r2, [r7, #8]
  405fe8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  405fea:	68fb      	ldr	r3, [r7, #12]
  405fec:	68ba      	ldr	r2, [r7, #8]
  405fee:	601a      	str	r2, [r3, #0]
}
  405ff0:	bf00      	nop
  405ff2:	3710      	adds	r7, #16
  405ff4:	46bd      	mov	sp, r7
  405ff6:	bd80      	pop	{r7, pc}
  405ff8:	00406149 	.word	0x00406149
  405ffc:	00405e3f 	.word	0x00405e3f

00406000 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  406000:	b590      	push	{r4, r7, lr}
  406002:	b087      	sub	sp, #28
  406004:	af02      	add	r7, sp, #8
  406006:	60f8      	str	r0, [r7, #12]
  406008:	60b9      	str	r1, [r7, #8]
  40600a:	607a      	str	r2, [r7, #4]
  40600c:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  40600e:	68bb      	ldr	r3, [r7, #8]
  406010:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  406014:	d01e      	beq.n	406054 <pio_configure+0x54>
  406016:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40601a:	d806      	bhi.n	40602a <pio_configure+0x2a>
  40601c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  406020:	d00a      	beq.n	406038 <pio_configure+0x38>
  406022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  406026:	d007      	beq.n	406038 <pio_configure+0x38>
  406028:	e03a      	b.n	4060a0 <pio_configure+0xa0>
  40602a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40602e:	d017      	beq.n	406060 <pio_configure+0x60>
  406030:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  406034:	d014      	beq.n	406060 <pio_configure+0x60>
  406036:	e033      	b.n	4060a0 <pio_configure+0xa0>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  406038:	687a      	ldr	r2, [r7, #4]
  40603a:	68b9      	ldr	r1, [r7, #8]
  40603c:	68f8      	ldr	r0, [r7, #12]
  40603e:	4b1c      	ldr	r3, [pc, #112]	; (4060b0 <pio_configure+0xb0>)
  406040:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  406042:	683b      	ldr	r3, [r7, #0]
  406044:	f003 0301 	and.w	r3, r3, #1
  406048:	461a      	mov	r2, r3
  40604a:	6879      	ldr	r1, [r7, #4]
  40604c:	68f8      	ldr	r0, [r7, #12]
  40604e:	4b19      	ldr	r3, [pc, #100]	; (4060b4 <pio_configure+0xb4>)
  406050:	4798      	blx	r3
		break;
  406052:	e027      	b.n	4060a4 <pio_configure+0xa4>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  406054:	683a      	ldr	r2, [r7, #0]
  406056:	6879      	ldr	r1, [r7, #4]
  406058:	68f8      	ldr	r0, [r7, #12]
  40605a:	4b17      	ldr	r3, [pc, #92]	; (4060b8 <pio_configure+0xb8>)
  40605c:	4798      	blx	r3
		break;
  40605e:	e021      	b.n	4060a4 <pio_configure+0xa4>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  406060:	68bb      	ldr	r3, [r7, #8]
  406062:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  406066:	bf0c      	ite	eq
  406068:	2301      	moveq	r3, #1
  40606a:	2300      	movne	r3, #0
  40606c:	b2db      	uxtb	r3, r3
  40606e:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  406070:	683b      	ldr	r3, [r7, #0]
  406072:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  406076:	2b00      	cmp	r3, #0
  406078:	bf14      	ite	ne
  40607a:	2301      	movne	r3, #1
  40607c:	2300      	moveq	r3, #0
  40607e:	b2db      	uxtb	r3, r3
  406080:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  406082:	683b      	ldr	r3, [r7, #0]
  406084:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  406088:	2b00      	cmp	r3, #0
  40608a:	bf14      	ite	ne
  40608c:	2301      	movne	r3, #1
  40608e:	2300      	moveq	r3, #0
  406090:	b2db      	uxtb	r3, r3
  406092:	9300      	str	r3, [sp, #0]
  406094:	460b      	mov	r3, r1
  406096:	6879      	ldr	r1, [r7, #4]
  406098:	68f8      	ldr	r0, [r7, #12]
  40609a:	4c08      	ldr	r4, [pc, #32]	; (4060bc <pio_configure+0xbc>)
  40609c:	47a0      	blx	r4
		break;
  40609e:	e001      	b.n	4060a4 <pio_configure+0xa4>

	default:
		return 0;
  4060a0:	2300      	movs	r3, #0
  4060a2:	e000      	b.n	4060a6 <pio_configure+0xa6>
	}

	return 1;
  4060a4:	2301      	movs	r3, #1
}
  4060a6:	4618      	mov	r0, r3
  4060a8:	3714      	adds	r7, #20
  4060aa:	46bd      	mov	sp, r7
  4060ac:	bd90      	pop	{r4, r7, pc}
  4060ae:	bf00      	nop
  4060b0:	00405e6b 	.word	0x00405e6b
  4060b4:	00405e3f 	.word	0x00405e3f
  4060b8:	00405f1d 	.word	0x00405f1d
  4060bc:	00405f9d 	.word	0x00405f9d

004060c0 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  4060c0:	b480      	push	{r7}
  4060c2:	b085      	sub	sp, #20
  4060c4:	af00      	add	r7, sp, #0
  4060c6:	60f8      	str	r0, [r7, #12]
  4060c8:	60b9      	str	r1, [r7, #8]
  4060ca:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4060cc:	687b      	ldr	r3, [r7, #4]
  4060ce:	f003 0310 	and.w	r3, r3, #16
  4060d2:	2b00      	cmp	r3, #0
  4060d4:	d020      	beq.n	406118 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4060d6:	68fb      	ldr	r3, [r7, #12]
  4060d8:	68ba      	ldr	r2, [r7, #8]
  4060da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4060de:	687b      	ldr	r3, [r7, #4]
  4060e0:	f003 0320 	and.w	r3, r3, #32
  4060e4:	2b00      	cmp	r3, #0
  4060e6:	d004      	beq.n	4060f2 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4060e8:	68fb      	ldr	r3, [r7, #12]
  4060ea:	68ba      	ldr	r2, [r7, #8]
  4060ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4060f0:	e003      	b.n	4060fa <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4060f2:	68fb      	ldr	r3, [r7, #12]
  4060f4:	68ba      	ldr	r2, [r7, #8]
  4060f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4060fa:	687b      	ldr	r3, [r7, #4]
  4060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406100:	2b00      	cmp	r3, #0
  406102:	d004      	beq.n	40610e <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  406104:	68fb      	ldr	r3, [r7, #12]
  406106:	68ba      	ldr	r2, [r7, #8]
  406108:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  40610c:	e008      	b.n	406120 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  40610e:	68fb      	ldr	r3, [r7, #12]
  406110:	68ba      	ldr	r2, [r7, #8]
  406112:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  406116:	e003      	b.n	406120 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  406118:	68fb      	ldr	r3, [r7, #12]
  40611a:	68ba      	ldr	r2, [r7, #8]
  40611c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  406120:	bf00      	nop
  406122:	3714      	adds	r7, #20
  406124:	46bd      	mov	sp, r7
  406126:	f85d 7b04 	ldr.w	r7, [sp], #4
  40612a:	4770      	bx	lr

0040612c <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40612c:	b480      	push	{r7}
  40612e:	b083      	sub	sp, #12
  406130:	af00      	add	r7, sp, #0
  406132:	6078      	str	r0, [r7, #4]
  406134:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  406136:	687b      	ldr	r3, [r7, #4]
  406138:	683a      	ldr	r2, [r7, #0]
  40613a:	641a      	str	r2, [r3, #64]	; 0x40
}
  40613c:	bf00      	nop
  40613e:	370c      	adds	r7, #12
  406140:	46bd      	mov	sp, r7
  406142:	f85d 7b04 	ldr.w	r7, [sp], #4
  406146:	4770      	bx	lr

00406148 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  406148:	b480      	push	{r7}
  40614a:	b083      	sub	sp, #12
  40614c:	af00      	add	r7, sp, #0
  40614e:	6078      	str	r0, [r7, #4]
  406150:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  406152:	687b      	ldr	r3, [r7, #4]
  406154:	683a      	ldr	r2, [r7, #0]
  406156:	645a      	str	r2, [r3, #68]	; 0x44
}
  406158:	bf00      	nop
  40615a:	370c      	adds	r7, #12
  40615c:	46bd      	mov	sp, r7
  40615e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406162:	4770      	bx	lr

00406164 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  406164:	b480      	push	{r7}
  406166:	b083      	sub	sp, #12
  406168:	af00      	add	r7, sp, #0
  40616a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40616c:	687b      	ldr	r3, [r7, #4]
  40616e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  406170:	4618      	mov	r0, r3
  406172:	370c      	adds	r7, #12
  406174:	46bd      	mov	sp, r7
  406176:	f85d 7b04 	ldr.w	r7, [sp], #4
  40617a:	4770      	bx	lr

0040617c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40617c:	b480      	push	{r7}
  40617e:	b083      	sub	sp, #12
  406180:	af00      	add	r7, sp, #0
  406182:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  406184:	687b      	ldr	r3, [r7, #4]
  406186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  406188:	4618      	mov	r0, r3
  40618a:	370c      	adds	r7, #12
  40618c:	46bd      	mov	sp, r7
  40618e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406192:	4770      	bx	lr

00406194 <NVIC_EnableIRQ>:
{
  406194:	b480      	push	{r7}
  406196:	b083      	sub	sp, #12
  406198:	af00      	add	r7, sp, #0
  40619a:	4603      	mov	r3, r0
  40619c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40619e:	4909      	ldr	r1, [pc, #36]	; (4061c4 <NVIC_EnableIRQ+0x30>)
  4061a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4061a4:	095b      	lsrs	r3, r3, #5
  4061a6:	79fa      	ldrb	r2, [r7, #7]
  4061a8:	f002 021f 	and.w	r2, r2, #31
  4061ac:	2001      	movs	r0, #1
  4061ae:	fa00 f202 	lsl.w	r2, r0, r2
  4061b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4061b6:	bf00      	nop
  4061b8:	370c      	adds	r7, #12
  4061ba:	46bd      	mov	sp, r7
  4061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061c0:	4770      	bx	lr
  4061c2:	bf00      	nop
  4061c4:	e000e100 	.word	0xe000e100

004061c8 <NVIC_DisableIRQ>:
{
  4061c8:	b480      	push	{r7}
  4061ca:	b083      	sub	sp, #12
  4061cc:	af00      	add	r7, sp, #0
  4061ce:	4603      	mov	r3, r0
  4061d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4061d2:	4909      	ldr	r1, [pc, #36]	; (4061f8 <NVIC_DisableIRQ+0x30>)
  4061d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4061d8:	095b      	lsrs	r3, r3, #5
  4061da:	79fa      	ldrb	r2, [r7, #7]
  4061dc:	f002 021f 	and.w	r2, r2, #31
  4061e0:	2001      	movs	r0, #1
  4061e2:	fa00 f202 	lsl.w	r2, r0, r2
  4061e6:	3320      	adds	r3, #32
  4061e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4061ec:	bf00      	nop
  4061ee:	370c      	adds	r7, #12
  4061f0:	46bd      	mov	sp, r7
  4061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061f6:	4770      	bx	lr
  4061f8:	e000e100 	.word	0xe000e100

004061fc <NVIC_ClearPendingIRQ>:
{
  4061fc:	b480      	push	{r7}
  4061fe:	b083      	sub	sp, #12
  406200:	af00      	add	r7, sp, #0
  406202:	4603      	mov	r3, r0
  406204:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  406206:	4909      	ldr	r1, [pc, #36]	; (40622c <NVIC_ClearPendingIRQ+0x30>)
  406208:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40620c:	095b      	lsrs	r3, r3, #5
  40620e:	79fa      	ldrb	r2, [r7, #7]
  406210:	f002 021f 	and.w	r2, r2, #31
  406214:	2001      	movs	r0, #1
  406216:	fa00 f202 	lsl.w	r2, r0, r2
  40621a:	3360      	adds	r3, #96	; 0x60
  40621c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  406220:	bf00      	nop
  406222:	370c      	adds	r7, #12
  406224:	46bd      	mov	sp, r7
  406226:	f85d 7b04 	ldr.w	r7, [sp], #4
  40622a:	4770      	bx	lr
  40622c:	e000e100 	.word	0xe000e100

00406230 <NVIC_SetPriority>:
{
  406230:	b480      	push	{r7}
  406232:	b083      	sub	sp, #12
  406234:	af00      	add	r7, sp, #0
  406236:	4603      	mov	r3, r0
  406238:	6039      	str	r1, [r7, #0]
  40623a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40623c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406240:	2b00      	cmp	r3, #0
  406242:	da0b      	bge.n	40625c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  406244:	490d      	ldr	r1, [pc, #52]	; (40627c <NVIC_SetPriority+0x4c>)
  406246:	79fb      	ldrb	r3, [r7, #7]
  406248:	f003 030f 	and.w	r3, r3, #15
  40624c:	3b04      	subs	r3, #4
  40624e:	683a      	ldr	r2, [r7, #0]
  406250:	b2d2      	uxtb	r2, r2
  406252:	0112      	lsls	r2, r2, #4
  406254:	b2d2      	uxtb	r2, r2
  406256:	440b      	add	r3, r1
  406258:	761a      	strb	r2, [r3, #24]
}
  40625a:	e009      	b.n	406270 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40625c:	4908      	ldr	r1, [pc, #32]	; (406280 <NVIC_SetPriority+0x50>)
  40625e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406262:	683a      	ldr	r2, [r7, #0]
  406264:	b2d2      	uxtb	r2, r2
  406266:	0112      	lsls	r2, r2, #4
  406268:	b2d2      	uxtb	r2, r2
  40626a:	440b      	add	r3, r1
  40626c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  406270:	bf00      	nop
  406272:	370c      	adds	r7, #12
  406274:	46bd      	mov	sp, r7
  406276:	f85d 7b04 	ldr.w	r7, [sp], #4
  40627a:	4770      	bx	lr
  40627c:	e000ed00 	.word	0xe000ed00
  406280:	e000e100 	.word	0xe000e100

00406284 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  406284:	b580      	push	{r7, lr}
  406286:	b084      	sub	sp, #16
  406288:	af00      	add	r7, sp, #0
  40628a:	6078      	str	r0, [r7, #4]
  40628c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40628e:	6878      	ldr	r0, [r7, #4]
  406290:	4b26      	ldr	r3, [pc, #152]	; (40632c <pio_handler_process+0xa8>)
  406292:	4798      	blx	r3
  406294:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  406296:	6878      	ldr	r0, [r7, #4]
  406298:	4b25      	ldr	r3, [pc, #148]	; (406330 <pio_handler_process+0xac>)
  40629a:	4798      	blx	r3
  40629c:	4602      	mov	r2, r0
  40629e:	68fb      	ldr	r3, [r7, #12]
  4062a0:	4013      	ands	r3, r2
  4062a2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4062a4:	68fb      	ldr	r3, [r7, #12]
  4062a6:	2b00      	cmp	r3, #0
  4062a8:	d03c      	beq.n	406324 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4062aa:	2300      	movs	r3, #0
  4062ac:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4062ae:	e034      	b.n	40631a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4062b0:	4a20      	ldr	r2, [pc, #128]	; (406334 <pio_handler_process+0xb0>)
  4062b2:	68bb      	ldr	r3, [r7, #8]
  4062b4:	011b      	lsls	r3, r3, #4
  4062b6:	4413      	add	r3, r2
  4062b8:	681a      	ldr	r2, [r3, #0]
  4062ba:	683b      	ldr	r3, [r7, #0]
  4062bc:	429a      	cmp	r2, r3
  4062be:	d126      	bne.n	40630e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4062c0:	4a1c      	ldr	r2, [pc, #112]	; (406334 <pio_handler_process+0xb0>)
  4062c2:	68bb      	ldr	r3, [r7, #8]
  4062c4:	011b      	lsls	r3, r3, #4
  4062c6:	4413      	add	r3, r2
  4062c8:	3304      	adds	r3, #4
  4062ca:	681a      	ldr	r2, [r3, #0]
  4062cc:	68fb      	ldr	r3, [r7, #12]
  4062ce:	4013      	ands	r3, r2
  4062d0:	2b00      	cmp	r3, #0
  4062d2:	d01c      	beq.n	40630e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4062d4:	4a17      	ldr	r2, [pc, #92]	; (406334 <pio_handler_process+0xb0>)
  4062d6:	68bb      	ldr	r3, [r7, #8]
  4062d8:	011b      	lsls	r3, r3, #4
  4062da:	4413      	add	r3, r2
  4062dc:	330c      	adds	r3, #12
  4062de:	681b      	ldr	r3, [r3, #0]
  4062e0:	4914      	ldr	r1, [pc, #80]	; (406334 <pio_handler_process+0xb0>)
  4062e2:	68ba      	ldr	r2, [r7, #8]
  4062e4:	0112      	lsls	r2, r2, #4
  4062e6:	440a      	add	r2, r1
  4062e8:	6810      	ldr	r0, [r2, #0]
  4062ea:	4912      	ldr	r1, [pc, #72]	; (406334 <pio_handler_process+0xb0>)
  4062ec:	68ba      	ldr	r2, [r7, #8]
  4062ee:	0112      	lsls	r2, r2, #4
  4062f0:	440a      	add	r2, r1
  4062f2:	3204      	adds	r2, #4
  4062f4:	6812      	ldr	r2, [r2, #0]
  4062f6:	4611      	mov	r1, r2
  4062f8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4062fa:	4a0e      	ldr	r2, [pc, #56]	; (406334 <pio_handler_process+0xb0>)
  4062fc:	68bb      	ldr	r3, [r7, #8]
  4062fe:	011b      	lsls	r3, r3, #4
  406300:	4413      	add	r3, r2
  406302:	3304      	adds	r3, #4
  406304:	681b      	ldr	r3, [r3, #0]
  406306:	43db      	mvns	r3, r3
  406308:	68fa      	ldr	r2, [r7, #12]
  40630a:	4013      	ands	r3, r2
  40630c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40630e:	68bb      	ldr	r3, [r7, #8]
  406310:	3301      	adds	r3, #1
  406312:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  406314:	68bb      	ldr	r3, [r7, #8]
  406316:	2b06      	cmp	r3, #6
  406318:	d803      	bhi.n	406322 <pio_handler_process+0x9e>
		while (status != 0) {
  40631a:	68fb      	ldr	r3, [r7, #12]
  40631c:	2b00      	cmp	r3, #0
  40631e:	d1c7      	bne.n	4062b0 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  406320:	e000      	b.n	406324 <pio_handler_process+0xa0>
				break;
  406322:	bf00      	nop
}
  406324:	bf00      	nop
  406326:	3710      	adds	r7, #16
  406328:	46bd      	mov	sp, r7
  40632a:	bd80      	pop	{r7, pc}
  40632c:	00406165 	.word	0x00406165
  406330:	0040617d 	.word	0x0040617d
  406334:	200043d4 	.word	0x200043d4

00406338 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  406338:	b580      	push	{r7, lr}
  40633a:	b086      	sub	sp, #24
  40633c:	af00      	add	r7, sp, #0
  40633e:	60f8      	str	r0, [r7, #12]
  406340:	60b9      	str	r1, [r7, #8]
  406342:	607a      	str	r2, [r7, #4]
  406344:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  406346:	4b21      	ldr	r3, [pc, #132]	; (4063cc <pio_handler_set+0x94>)
  406348:	681b      	ldr	r3, [r3, #0]
  40634a:	2b06      	cmp	r3, #6
  40634c:	d901      	bls.n	406352 <pio_handler_set+0x1a>
		return 1;
  40634e:	2301      	movs	r3, #1
  406350:	e038      	b.n	4063c4 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  406352:	2300      	movs	r3, #0
  406354:	75fb      	strb	r3, [r7, #23]
  406356:	e011      	b.n	40637c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  406358:	7dfb      	ldrb	r3, [r7, #23]
  40635a:	011b      	lsls	r3, r3, #4
  40635c:	4a1c      	ldr	r2, [pc, #112]	; (4063d0 <pio_handler_set+0x98>)
  40635e:	4413      	add	r3, r2
  406360:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  406362:	693b      	ldr	r3, [r7, #16]
  406364:	681a      	ldr	r2, [r3, #0]
  406366:	68bb      	ldr	r3, [r7, #8]
  406368:	429a      	cmp	r2, r3
  40636a:	d104      	bne.n	406376 <pio_handler_set+0x3e>
  40636c:	693b      	ldr	r3, [r7, #16]
  40636e:	685a      	ldr	r2, [r3, #4]
  406370:	687b      	ldr	r3, [r7, #4]
  406372:	429a      	cmp	r2, r3
  406374:	d008      	beq.n	406388 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  406376:	7dfb      	ldrb	r3, [r7, #23]
  406378:	3301      	adds	r3, #1
  40637a:	75fb      	strb	r3, [r7, #23]
  40637c:	7dfa      	ldrb	r2, [r7, #23]
  40637e:	4b13      	ldr	r3, [pc, #76]	; (4063cc <pio_handler_set+0x94>)
  406380:	681b      	ldr	r3, [r3, #0]
  406382:	429a      	cmp	r2, r3
  406384:	d9e8      	bls.n	406358 <pio_handler_set+0x20>
  406386:	e000      	b.n	40638a <pio_handler_set+0x52>
			break;
  406388:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40638a:	693b      	ldr	r3, [r7, #16]
  40638c:	68ba      	ldr	r2, [r7, #8]
  40638e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  406390:	693b      	ldr	r3, [r7, #16]
  406392:	687a      	ldr	r2, [r7, #4]
  406394:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  406396:	693b      	ldr	r3, [r7, #16]
  406398:	683a      	ldr	r2, [r7, #0]
  40639a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40639c:	693b      	ldr	r3, [r7, #16]
  40639e:	6a3a      	ldr	r2, [r7, #32]
  4063a0:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  4063a2:	7dfa      	ldrb	r2, [r7, #23]
  4063a4:	4b09      	ldr	r3, [pc, #36]	; (4063cc <pio_handler_set+0x94>)
  4063a6:	681b      	ldr	r3, [r3, #0]
  4063a8:	3301      	adds	r3, #1
  4063aa:	429a      	cmp	r2, r3
  4063ac:	d104      	bne.n	4063b8 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  4063ae:	4b07      	ldr	r3, [pc, #28]	; (4063cc <pio_handler_set+0x94>)
  4063b0:	681b      	ldr	r3, [r3, #0]
  4063b2:	3301      	adds	r3, #1
  4063b4:	4a05      	ldr	r2, [pc, #20]	; (4063cc <pio_handler_set+0x94>)
  4063b6:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4063b8:	683a      	ldr	r2, [r7, #0]
  4063ba:	6879      	ldr	r1, [r7, #4]
  4063bc:	68f8      	ldr	r0, [r7, #12]
  4063be:	4b05      	ldr	r3, [pc, #20]	; (4063d4 <pio_handler_set+0x9c>)
  4063c0:	4798      	blx	r3

	return 0;
  4063c2:	2300      	movs	r3, #0
}
  4063c4:	4618      	mov	r0, r3
  4063c6:	3718      	adds	r7, #24
  4063c8:	46bd      	mov	sp, r7
  4063ca:	bd80      	pop	{r7, pc}
  4063cc:	20004444 	.word	0x20004444
  4063d0:	200043d4 	.word	0x200043d4
  4063d4:	004060c1 	.word	0x004060c1

004063d8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4063d8:	b580      	push	{r7, lr}
  4063da:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4063dc:	210b      	movs	r1, #11
  4063de:	4802      	ldr	r0, [pc, #8]	; (4063e8 <PIOA_Handler+0x10>)
  4063e0:	4b02      	ldr	r3, [pc, #8]	; (4063ec <PIOA_Handler+0x14>)
  4063e2:	4798      	blx	r3
}
  4063e4:	bf00      	nop
  4063e6:	bd80      	pop	{r7, pc}
  4063e8:	400e0e00 	.word	0x400e0e00
  4063ec:	00406285 	.word	0x00406285

004063f0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4063f0:	b580      	push	{r7, lr}
  4063f2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4063f4:	210c      	movs	r1, #12
  4063f6:	4802      	ldr	r0, [pc, #8]	; (406400 <PIOB_Handler+0x10>)
  4063f8:	4b02      	ldr	r3, [pc, #8]	; (406404 <PIOB_Handler+0x14>)
  4063fa:	4798      	blx	r3
}
  4063fc:	bf00      	nop
  4063fe:	bd80      	pop	{r7, pc}
  406400:	400e1000 	.word	0x400e1000
  406404:	00406285 	.word	0x00406285

00406408 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  406408:	b580      	push	{r7, lr}
  40640a:	b086      	sub	sp, #24
  40640c:	af00      	add	r7, sp, #0
  40640e:	60f8      	str	r0, [r7, #12]
  406410:	460b      	mov	r3, r1
  406412:	607a      	str	r2, [r7, #4]
  406414:	72fb      	strb	r3, [r7, #11]
	uint32_t bitmask = 0;
  406416:	2300      	movs	r3, #0
  406418:	617b      	str	r3, [r7, #20]

	bitmask = pio_get_interrupt_mask(p_pio);
  40641a:	68f8      	ldr	r0, [r7, #12]
  40641c:	4b13      	ldr	r3, [pc, #76]	; (40646c <pio_handler_set_priority+0x64>)
  40641e:	4798      	blx	r3
  406420:	6178      	str	r0, [r7, #20]
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  406422:	f04f 31ff 	mov.w	r1, #4294967295
  406426:	68f8      	ldr	r0, [r7, #12]
  406428:	4b11      	ldr	r3, [pc, #68]	; (406470 <pio_handler_set_priority+0x68>)
  40642a:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  40642c:	68f8      	ldr	r0, [r7, #12]
  40642e:	4b11      	ldr	r3, [pc, #68]	; (406474 <pio_handler_set_priority+0x6c>)
  406430:	4798      	blx	r3
	NVIC_DisableIRQ(ul_irqn);
  406432:	f997 300b 	ldrsb.w	r3, [r7, #11]
  406436:	4618      	mov	r0, r3
  406438:	4b0f      	ldr	r3, [pc, #60]	; (406478 <pio_handler_set_priority+0x70>)
  40643a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(ul_irqn);
  40643c:	f997 300b 	ldrsb.w	r3, [r7, #11]
  406440:	4618      	mov	r0, r3
  406442:	4b0e      	ldr	r3, [pc, #56]	; (40647c <pio_handler_set_priority+0x74>)
  406444:	4798      	blx	r3
	NVIC_SetPriority(ul_irqn, ul_priority);
  406446:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40644a:	6879      	ldr	r1, [r7, #4]
  40644c:	4618      	mov	r0, r3
  40644e:	4b0c      	ldr	r3, [pc, #48]	; (406480 <pio_handler_set_priority+0x78>)
  406450:	4798      	blx	r3
	NVIC_EnableIRQ(ul_irqn);
  406452:	f997 300b 	ldrsb.w	r3, [r7, #11]
  406456:	4618      	mov	r0, r3
  406458:	4b0a      	ldr	r3, [pc, #40]	; (406484 <pio_handler_set_priority+0x7c>)
  40645a:	4798      	blx	r3
	pio_enable_interrupt(p_pio, bitmask);
  40645c:	6979      	ldr	r1, [r7, #20]
  40645e:	68f8      	ldr	r0, [r7, #12]
  406460:	4b09      	ldr	r3, [pc, #36]	; (406488 <pio_handler_set_priority+0x80>)
  406462:	4798      	blx	r3
}
  406464:	bf00      	nop
  406466:	3718      	adds	r7, #24
  406468:	46bd      	mov	sp, r7
  40646a:	bd80      	pop	{r7, pc}
  40646c:	0040617d 	.word	0x0040617d
  406470:	00406149 	.word	0x00406149
  406474:	00406165 	.word	0x00406165
  406478:	004061c9 	.word	0x004061c9
  40647c:	004061fd 	.word	0x004061fd
  406480:	00406231 	.word	0x00406231
  406484:	00406195 	.word	0x00406195
  406488:	0040612d 	.word	0x0040612d

0040648c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40648c:	b480      	push	{r7}
  40648e:	b085      	sub	sp, #20
  406490:	af00      	add	r7, sp, #0
  406492:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  406494:	491d      	ldr	r1, [pc, #116]	; (40650c <pmc_switch_mck_to_pllack+0x80>)
  406496:	4b1d      	ldr	r3, [pc, #116]	; (40650c <pmc_switch_mck_to_pllack+0x80>)
  406498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40649a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40649e:	687b      	ldr	r3, [r7, #4]
  4064a0:	4313      	orrs	r3, r2
  4064a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4064a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4064a8:	60fb      	str	r3, [r7, #12]
  4064aa:	e007      	b.n	4064bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4064ac:	68fb      	ldr	r3, [r7, #12]
  4064ae:	2b00      	cmp	r3, #0
  4064b0:	d101      	bne.n	4064b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4064b2:	2301      	movs	r3, #1
  4064b4:	e023      	b.n	4064fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4064b6:	68fb      	ldr	r3, [r7, #12]
  4064b8:	3b01      	subs	r3, #1
  4064ba:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4064bc:	4b13      	ldr	r3, [pc, #76]	; (40650c <pmc_switch_mck_to_pllack+0x80>)
  4064be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4064c0:	f003 0308 	and.w	r3, r3, #8
  4064c4:	2b00      	cmp	r3, #0
  4064c6:	d0f1      	beq.n	4064ac <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4064c8:	4a10      	ldr	r2, [pc, #64]	; (40650c <pmc_switch_mck_to_pllack+0x80>)
  4064ca:	4b10      	ldr	r3, [pc, #64]	; (40650c <pmc_switch_mck_to_pllack+0x80>)
  4064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4064ce:	f023 0303 	bic.w	r3, r3, #3
  4064d2:	f043 0302 	orr.w	r3, r3, #2
  4064d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4064d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4064dc:	60fb      	str	r3, [r7, #12]
  4064de:	e007      	b.n	4064f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4064e0:	68fb      	ldr	r3, [r7, #12]
  4064e2:	2b00      	cmp	r3, #0
  4064e4:	d101      	bne.n	4064ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4064e6:	2301      	movs	r3, #1
  4064e8:	e009      	b.n	4064fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4064ea:	68fb      	ldr	r3, [r7, #12]
  4064ec:	3b01      	subs	r3, #1
  4064ee:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4064f0:	4b06      	ldr	r3, [pc, #24]	; (40650c <pmc_switch_mck_to_pllack+0x80>)
  4064f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4064f4:	f003 0308 	and.w	r3, r3, #8
  4064f8:	2b00      	cmp	r3, #0
  4064fa:	d0f1      	beq.n	4064e0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4064fc:	2300      	movs	r3, #0
}
  4064fe:	4618      	mov	r0, r3
  406500:	3714      	adds	r7, #20
  406502:	46bd      	mov	sp, r7
  406504:	f85d 7b04 	ldr.w	r7, [sp], #4
  406508:	4770      	bx	lr
  40650a:	bf00      	nop
  40650c:	400e0400 	.word	0x400e0400

00406510 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  406510:	b480      	push	{r7}
  406512:	b083      	sub	sp, #12
  406514:	af00      	add	r7, sp, #0
  406516:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  406518:	687b      	ldr	r3, [r7, #4]
  40651a:	2b01      	cmp	r3, #1
  40651c:	d107      	bne.n	40652e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40651e:	4a08      	ldr	r2, [pc, #32]	; (406540 <pmc_switch_sclk_to_32kxtal+0x30>)
  406520:	4b07      	ldr	r3, [pc, #28]	; (406540 <pmc_switch_sclk_to_32kxtal+0x30>)
  406522:	689b      	ldr	r3, [r3, #8]
  406524:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  406528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40652c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40652e:	4b04      	ldr	r3, [pc, #16]	; (406540 <pmc_switch_sclk_to_32kxtal+0x30>)
  406530:	4a04      	ldr	r2, [pc, #16]	; (406544 <pmc_switch_sclk_to_32kxtal+0x34>)
  406532:	601a      	str	r2, [r3, #0]
}
  406534:	bf00      	nop
  406536:	370c      	adds	r7, #12
  406538:	46bd      	mov	sp, r7
  40653a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40653e:	4770      	bx	lr
  406540:	400e1410 	.word	0x400e1410
  406544:	a5000008 	.word	0xa5000008

00406548 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  406548:	b480      	push	{r7}
  40654a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40654c:	4b09      	ldr	r3, [pc, #36]	; (406574 <pmc_osc_is_ready_32kxtal+0x2c>)
  40654e:	695b      	ldr	r3, [r3, #20]
  406550:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  406554:	2b00      	cmp	r3, #0
  406556:	d007      	beq.n	406568 <pmc_osc_is_ready_32kxtal+0x20>
  406558:	4b07      	ldr	r3, [pc, #28]	; (406578 <pmc_osc_is_ready_32kxtal+0x30>)
  40655a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406560:	2b00      	cmp	r3, #0
  406562:	d001      	beq.n	406568 <pmc_osc_is_ready_32kxtal+0x20>
  406564:	2301      	movs	r3, #1
  406566:	e000      	b.n	40656a <pmc_osc_is_ready_32kxtal+0x22>
  406568:	2300      	movs	r3, #0
}
  40656a:	4618      	mov	r0, r3
  40656c:	46bd      	mov	sp, r7
  40656e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406572:	4770      	bx	lr
  406574:	400e1410 	.word	0x400e1410
  406578:	400e0400 	.word	0x400e0400

0040657c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40657c:	b480      	push	{r7}
  40657e:	b083      	sub	sp, #12
  406580:	af00      	add	r7, sp, #0
  406582:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  406584:	4a18      	ldr	r2, [pc, #96]	; (4065e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  406586:	4b18      	ldr	r3, [pc, #96]	; (4065e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  406588:	6a1b      	ldr	r3, [r3, #32]
  40658a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40658e:	f043 0308 	orr.w	r3, r3, #8
  406592:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  406594:	bf00      	nop
  406596:	4b14      	ldr	r3, [pc, #80]	; (4065e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  406598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40659e:	2b00      	cmp	r3, #0
  4065a0:	d0f9      	beq.n	406596 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4065a2:	4911      	ldr	r1, [pc, #68]	; (4065e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4065a4:	4b10      	ldr	r3, [pc, #64]	; (4065e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4065a6:	6a1b      	ldr	r3, [r3, #32]
  4065a8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4065ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4065b0:	687a      	ldr	r2, [r7, #4]
  4065b2:	4313      	orrs	r3, r2
  4065b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4065b8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4065ba:	bf00      	nop
  4065bc:	4b0a      	ldr	r3, [pc, #40]	; (4065e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4065be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4065c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4065c4:	2b00      	cmp	r3, #0
  4065c6:	d0f9      	beq.n	4065bc <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4065c8:	4a07      	ldr	r2, [pc, #28]	; (4065e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4065ca:	4b07      	ldr	r3, [pc, #28]	; (4065e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4065cc:	6a1b      	ldr	r3, [r3, #32]
  4065ce:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4065d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4065d6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4065da:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4065dc:	bf00      	nop
  4065de:	370c      	adds	r7, #12
  4065e0:	46bd      	mov	sp, r7
  4065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4065e6:	4770      	bx	lr
  4065e8:	400e0400 	.word	0x400e0400

004065ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4065ec:	b480      	push	{r7}
  4065ee:	b083      	sub	sp, #12
  4065f0:	af00      	add	r7, sp, #0
  4065f2:	6078      	str	r0, [r7, #4]
  4065f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4065f6:	687b      	ldr	r3, [r7, #4]
  4065f8:	2b00      	cmp	r3, #0
  4065fa:	d008      	beq.n	40660e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4065fc:	4916      	ldr	r1, [pc, #88]	; (406658 <pmc_switch_mainck_to_xtal+0x6c>)
  4065fe:	4b16      	ldr	r3, [pc, #88]	; (406658 <pmc_switch_mainck_to_xtal+0x6c>)
  406600:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  406602:	4a16      	ldr	r2, [pc, #88]	; (40665c <pmc_switch_mainck_to_xtal+0x70>)
  406604:	401a      	ands	r2, r3
  406606:	4b16      	ldr	r3, [pc, #88]	; (406660 <pmc_switch_mainck_to_xtal+0x74>)
  406608:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40660a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40660c:	e01e      	b.n	40664c <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40660e:	4912      	ldr	r1, [pc, #72]	; (406658 <pmc_switch_mainck_to_xtal+0x6c>)
  406610:	4b11      	ldr	r3, [pc, #68]	; (406658 <pmc_switch_mainck_to_xtal+0x6c>)
  406612:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  406614:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  406618:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40661c:	683a      	ldr	r2, [r7, #0]
  40661e:	0212      	lsls	r2, r2, #8
  406620:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  406622:	4313      	orrs	r3, r2
  406624:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406628:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40662c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40662e:	bf00      	nop
  406630:	4b09      	ldr	r3, [pc, #36]	; (406658 <pmc_switch_mainck_to_xtal+0x6c>)
  406632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406634:	f003 0301 	and.w	r3, r3, #1
  406638:	2b00      	cmp	r3, #0
  40663a:	d0f9      	beq.n	406630 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40663c:	4a06      	ldr	r2, [pc, #24]	; (406658 <pmc_switch_mainck_to_xtal+0x6c>)
  40663e:	4b06      	ldr	r3, [pc, #24]	; (406658 <pmc_switch_mainck_to_xtal+0x6c>)
  406640:	6a1b      	ldr	r3, [r3, #32]
  406642:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  406646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40664a:	6213      	str	r3, [r2, #32]
}
  40664c:	bf00      	nop
  40664e:	370c      	adds	r7, #12
  406650:	46bd      	mov	sp, r7
  406652:	f85d 7b04 	ldr.w	r7, [sp], #4
  406656:	4770      	bx	lr
  406658:	400e0400 	.word	0x400e0400
  40665c:	fec8fffc 	.word	0xfec8fffc
  406660:	01370002 	.word	0x01370002

00406664 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  406664:	b480      	push	{r7}
  406666:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  406668:	4b04      	ldr	r3, [pc, #16]	; (40667c <pmc_osc_is_ready_mainck+0x18>)
  40666a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40666c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  406670:	4618      	mov	r0, r3
  406672:	46bd      	mov	sp, r7
  406674:	f85d 7b04 	ldr.w	r7, [sp], #4
  406678:	4770      	bx	lr
  40667a:	bf00      	nop
  40667c:	400e0400 	.word	0x400e0400

00406680 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  406680:	b480      	push	{r7}
  406682:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
  406684:	4b03      	ldr	r3, [pc, #12]	; (406694 <pmc_disable_pllack+0x14>)
  406686:	2200      	movs	r2, #0
  406688:	629a      	str	r2, [r3, #40]	; 0x28
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
#endif
}
  40668a:	bf00      	nop
  40668c:	46bd      	mov	sp, r7
  40668e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406692:	4770      	bx	lr
  406694:	400e0400 	.word	0x400e0400

00406698 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  406698:	b480      	push	{r7}
  40669a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40669c:	4b04      	ldr	r3, [pc, #16]	; (4066b0 <pmc_is_locked_pllack+0x18>)
  40669e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4066a0:	f003 0302 	and.w	r3, r3, #2
}
  4066a4:	4618      	mov	r0, r3
  4066a6:	46bd      	mov	sp, r7
  4066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066ac:	4770      	bx	lr
  4066ae:	bf00      	nop
  4066b0:	400e0400 	.word	0x400e0400

004066b4 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  4066b4:	b480      	push	{r7}
  4066b6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4066b8:	4b03      	ldr	r3, [pc, #12]	; (4066c8 <pmc_disable_pllbck+0x14>)
  4066ba:	2200      	movs	r2, #0
  4066bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
  4066be:	bf00      	nop
  4066c0:	46bd      	mov	sp, r7
  4066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066c6:	4770      	bx	lr
  4066c8:	400e0400 	.word	0x400e0400

004066cc <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  4066cc:	b480      	push	{r7}
  4066ce:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4066d0:	4b04      	ldr	r3, [pc, #16]	; (4066e4 <pmc_is_locked_pllbck+0x18>)
  4066d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4066d4:	f003 0304 	and.w	r3, r3, #4
}
  4066d8:	4618      	mov	r0, r3
  4066da:	46bd      	mov	sp, r7
  4066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4066e0:	4770      	bx	lr
  4066e2:	bf00      	nop
  4066e4:	400e0400 	.word	0x400e0400

004066e8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4066e8:	b480      	push	{r7}
  4066ea:	b083      	sub	sp, #12
  4066ec:	af00      	add	r7, sp, #0
  4066ee:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4066f0:	687b      	ldr	r3, [r7, #4]
  4066f2:	2b32      	cmp	r3, #50	; 0x32
  4066f4:	d901      	bls.n	4066fa <pmc_enable_periph_clk+0x12>
		return 1;
  4066f6:	2301      	movs	r3, #1
  4066f8:	e02f      	b.n	40675a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4066fa:	687b      	ldr	r3, [r7, #4]
  4066fc:	2b1f      	cmp	r3, #31
  4066fe:	d813      	bhi.n	406728 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  406700:	4b19      	ldr	r3, [pc, #100]	; (406768 <pmc_enable_periph_clk+0x80>)
  406702:	699a      	ldr	r2, [r3, #24]
  406704:	2101      	movs	r1, #1
  406706:	687b      	ldr	r3, [r7, #4]
  406708:	fa01 f303 	lsl.w	r3, r1, r3
  40670c:	401a      	ands	r2, r3
  40670e:	2101      	movs	r1, #1
  406710:	687b      	ldr	r3, [r7, #4]
  406712:	fa01 f303 	lsl.w	r3, r1, r3
  406716:	429a      	cmp	r2, r3
  406718:	d01e      	beq.n	406758 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  40671a:	4a13      	ldr	r2, [pc, #76]	; (406768 <pmc_enable_periph_clk+0x80>)
  40671c:	2101      	movs	r1, #1
  40671e:	687b      	ldr	r3, [r7, #4]
  406720:	fa01 f303 	lsl.w	r3, r1, r3
  406724:	6113      	str	r3, [r2, #16]
  406726:	e017      	b.n	406758 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  406728:	687b      	ldr	r3, [r7, #4]
  40672a:	3b20      	subs	r3, #32
  40672c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40672e:	4b0e      	ldr	r3, [pc, #56]	; (406768 <pmc_enable_periph_clk+0x80>)
  406730:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  406734:	2101      	movs	r1, #1
  406736:	687b      	ldr	r3, [r7, #4]
  406738:	fa01 f303 	lsl.w	r3, r1, r3
  40673c:	401a      	ands	r2, r3
  40673e:	2101      	movs	r1, #1
  406740:	687b      	ldr	r3, [r7, #4]
  406742:	fa01 f303 	lsl.w	r3, r1, r3
  406746:	429a      	cmp	r2, r3
  406748:	d006      	beq.n	406758 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40674a:	4a07      	ldr	r2, [pc, #28]	; (406768 <pmc_enable_periph_clk+0x80>)
  40674c:	2101      	movs	r1, #1
  40674e:	687b      	ldr	r3, [r7, #4]
  406750:	fa01 f303 	lsl.w	r3, r1, r3
  406754:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  406758:	2300      	movs	r3, #0
}
  40675a:	4618      	mov	r0, r3
  40675c:	370c      	adds	r7, #12
  40675e:	46bd      	mov	sp, r7
  406760:	f85d 7b04 	ldr.w	r7, [sp], #4
  406764:	4770      	bx	lr
  406766:	bf00      	nop
  406768:	400e0400 	.word	0x400e0400

0040676c <pmc_switch_pck_to_mck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
{
  40676c:	b480      	push	{r7}
  40676e:	b085      	sub	sp, #20
  406770:	af00      	add	r7, sp, #0
  406772:	6078      	str	r0, [r7, #4]
  406774:	6039      	str	r1, [r7, #0]
	uint32_t ul_timeout;

	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
  406776:	4912      	ldr	r1, [pc, #72]	; (4067c0 <pmc_switch_pck_to_mck+0x54>)
  406778:	683b      	ldr	r3, [r7, #0]
  40677a:	f043 0204 	orr.w	r2, r3, #4
  40677e:	687b      	ldr	r3, [r7, #4]
  406780:	3310      	adds	r3, #16
  406782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (ul_timeout = PMC_TIMEOUT;
  406786:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40678a:	60fb      	str	r3, [r7, #12]
  40678c:	e007      	b.n	40679e <pmc_switch_pck_to_mck+0x32>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
		if (ul_timeout == 0) {
  40678e:	68fb      	ldr	r3, [r7, #12]
  406790:	2b00      	cmp	r3, #0
  406792:	d101      	bne.n	406798 <pmc_switch_pck_to_mck+0x2c>
			return 1;
  406794:	2301      	movs	r3, #1
  406796:	e00d      	b.n	4067b4 <pmc_switch_pck_to_mck+0x48>
	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
  406798:	68fb      	ldr	r3, [r7, #12]
  40679a:	3b01      	subs	r3, #1
  40679c:	60fb      	str	r3, [r7, #12]
  40679e:	4b08      	ldr	r3, [pc, #32]	; (4067c0 <pmc_switch_pck_to_mck+0x54>)
  4067a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  4067a2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4067a6:	687b      	ldr	r3, [r7, #4]
  4067a8:	fa01 f303 	lsl.w	r3, r1, r3
  4067ac:	4013      	ands	r3, r2
	for (ul_timeout = PMC_TIMEOUT;
  4067ae:	2b00      	cmp	r3, #0
  4067b0:	d0ed      	beq.n	40678e <pmc_switch_pck_to_mck+0x22>
		}
	}

	return 0;
  4067b2:	2300      	movs	r3, #0
}
  4067b4:	4618      	mov	r0, r3
  4067b6:	3714      	adds	r7, #20
  4067b8:	46bd      	mov	sp, r7
  4067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067be:	4770      	bx	lr
  4067c0:	400e0400 	.word	0x400e0400

004067c4 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
  4067c4:	b480      	push	{r7}
  4067c6:	b083      	sub	sp, #12
  4067c8:	af00      	add	r7, sp, #0
  4067ca:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  4067cc:	4a06      	ldr	r2, [pc, #24]	; (4067e8 <pmc_enable_pck+0x24>)
  4067ce:	f44f 7180 	mov.w	r1, #256	; 0x100
  4067d2:	687b      	ldr	r3, [r7, #4]
  4067d4:	fa01 f303 	lsl.w	r3, r1, r3
  4067d8:	6013      	str	r3, [r2, #0]
}
  4067da:	bf00      	nop
  4067dc:	370c      	adds	r7, #12
  4067de:	46bd      	mov	sp, r7
  4067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067e4:	4770      	bx	lr
  4067e6:	bf00      	nop
  4067e8:	400e0400 	.word	0x400e0400

004067ec <pmc_disable_pck>:
 * \brief Disable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_disable_pck(uint32_t ul_id)
{
  4067ec:	b480      	push	{r7}
  4067ee:	b083      	sub	sp, #12
  4067f0:	af00      	add	r7, sp, #0
  4067f2:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
  4067f4:	4a06      	ldr	r2, [pc, #24]	; (406810 <pmc_disable_pck+0x24>)
  4067f6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4067fa:	687b      	ldr	r3, [r7, #4]
  4067fc:	fa01 f303 	lsl.w	r3, r1, r3
  406800:	6053      	str	r3, [r2, #4]
}
  406802:	bf00      	nop
  406804:	370c      	adds	r7, #12
  406806:	46bd      	mov	sp, r7
  406808:	f85d 7b04 	ldr.w	r7, [sp], #4
  40680c:	4770      	bx	lr
  40680e:	bf00      	nop
  406810:	400e0400 	.word	0x400e0400

00406814 <rtc_enable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  406814:	b480      	push	{r7}
  406816:	b083      	sub	sp, #12
  406818:	af00      	add	r7, sp, #0
  40681a:	6078      	str	r0, [r7, #4]
  40681c:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IER = ul_sources;
  40681e:	687b      	ldr	r3, [r7, #4]
  406820:	683a      	ldr	r2, [r7, #0]
  406822:	621a      	str	r2, [r3, #32]
}
  406824:	bf00      	nop
  406826:	370c      	adds	r7, #12
  406828:	46bd      	mov	sp, r7
  40682a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40682e:	4770      	bx	lr

00406830 <rtc_disable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtc_disable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  406830:	b480      	push	{r7}
  406832:	b083      	sub	sp, #12
  406834:	af00      	add	r7, sp, #0
  406836:	6078      	str	r0, [r7, #4]
  406838:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IDR = ul_sources;
  40683a:	687b      	ldr	r3, [r7, #4]
  40683c:	683a      	ldr	r2, [r7, #0]
  40683e:	625a      	str	r2, [r3, #36]	; 0x24
}
  406840:	bf00      	nop
  406842:	370c      	adds	r7, #12
  406844:	46bd      	mov	sp, r7
  406846:	f85d 7b04 	ldr.w	r7, [sp], #4
  40684a:	4770      	bx	lr

0040684c <rtc_get_status>:
 * \param p_rtc Pointer to an RTC instance.
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
  40684c:	b480      	push	{r7}
  40684e:	b083      	sub	sp, #12
  406850:	af00      	add	r7, sp, #0
  406852:	6078      	str	r0, [r7, #4]
	return (p_rtc->RTC_SR);
  406854:	687b      	ldr	r3, [r7, #4]
  406856:	699b      	ldr	r3, [r3, #24]
}
  406858:	4618      	mov	r0, r3
  40685a:	370c      	adds	r7, #12
  40685c:	46bd      	mov	sp, r7
  40685e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406862:	4770      	bx	lr

00406864 <rtc_clear_status>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
  406864:	b480      	push	{r7}
  406866:	b083      	sub	sp, #12
  406868:	af00      	add	r7, sp, #0
  40686a:	6078      	str	r0, [r7, #4]
  40686c:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_SCCR = ul_clear;
  40686e:	687b      	ldr	r3, [r7, #4]
  406870:	683a      	ldr	r2, [r7, #0]
  406872:	61da      	str	r2, [r3, #28]
}
  406874:	bf00      	nop
  406876:	370c      	adds	r7, #12
  406878:	46bd      	mov	sp, r7
  40687a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40687e:	4770      	bx	lr

00406880 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  406880:	b480      	push	{r7}
  406882:	b083      	sub	sp, #12
  406884:	af00      	add	r7, sp, #0
  406886:	6078      	str	r0, [r7, #4]
  406888:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40688a:	687b      	ldr	r3, [r7, #4]
  40688c:	685b      	ldr	r3, [r3, #4]
  40688e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
  406892:	687b      	ldr	r3, [r7, #4]
  406894:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  406896:	687b      	ldr	r3, [r7, #4]
  406898:	685a      	ldr	r2, [r3, #4]
  40689a:	683b      	ldr	r3, [r7, #0]
  40689c:	041b      	lsls	r3, r3, #16
  40689e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  4068a2:	431a      	orrs	r2, r3
  4068a4:	687b      	ldr	r3, [r7, #4]
  4068a6:	605a      	str	r2, [r3, #4]
}
  4068a8:	bf00      	nop
  4068aa:	370c      	adds	r7, #12
  4068ac:	46bd      	mov	sp, r7
  4068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4068b2:	4770      	bx	lr

004068b4 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  4068b4:	b480      	push	{r7}
  4068b6:	b085      	sub	sp, #20
  4068b8:	af00      	add	r7, sp, #0
  4068ba:	60f8      	str	r0, [r7, #12]
  4068bc:	60b9      	str	r1, [r7, #8]
  4068be:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  4068c0:	687b      	ldr	r3, [r7, #4]
  4068c2:	2b00      	cmp	r3, #0
  4068c4:	d00c      	beq.n	4068e0 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4068c6:	68fb      	ldr	r3, [r7, #12]
  4068c8:	68ba      	ldr	r2, [r7, #8]
  4068ca:	320c      	adds	r2, #12
  4068cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4068d0:	f043 0101 	orr.w	r1, r3, #1
  4068d4:	68fb      	ldr	r3, [r7, #12]
  4068d6:	68ba      	ldr	r2, [r7, #8]
  4068d8:	320c      	adds	r2, #12
  4068da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4068de:	e00b      	b.n	4068f8 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4068e0:	68fb      	ldr	r3, [r7, #12]
  4068e2:	68ba      	ldr	r2, [r7, #8]
  4068e4:	320c      	adds	r2, #12
  4068e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4068ea:	f023 0101 	bic.w	r1, r3, #1
  4068ee:	68fb      	ldr	r3, [r7, #12]
  4068f0:	68ba      	ldr	r2, [r7, #8]
  4068f2:	320c      	adds	r2, #12
  4068f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4068f8:	bf00      	nop
  4068fa:	3714      	adds	r7, #20
  4068fc:	46bd      	mov	sp, r7
  4068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  406902:	4770      	bx	lr

00406904 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  406904:	b480      	push	{r7}
  406906:	b085      	sub	sp, #20
  406908:	af00      	add	r7, sp, #0
  40690a:	60f8      	str	r0, [r7, #12]
  40690c:	60b9      	str	r1, [r7, #8]
  40690e:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  406910:	687b      	ldr	r3, [r7, #4]
  406912:	2b00      	cmp	r3, #0
  406914:	d00c      	beq.n	406930 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  406916:	68fb      	ldr	r3, [r7, #12]
  406918:	68ba      	ldr	r2, [r7, #8]
  40691a:	320c      	adds	r2, #12
  40691c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406920:	f043 0102 	orr.w	r1, r3, #2
  406924:	68fb      	ldr	r3, [r7, #12]
  406926:	68ba      	ldr	r2, [r7, #8]
  406928:	320c      	adds	r2, #12
  40692a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  40692e:	e00b      	b.n	406948 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  406930:	68fb      	ldr	r3, [r7, #12]
  406932:	68ba      	ldr	r2, [r7, #8]
  406934:	320c      	adds	r2, #12
  406936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40693a:	f023 0102 	bic.w	r1, r3, #2
  40693e:	68fb      	ldr	r3, [r7, #12]
  406940:	68ba      	ldr	r2, [r7, #8]
  406942:	320c      	adds	r2, #12
  406944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406948:	bf00      	nop
  40694a:	3714      	adds	r7, #20
  40694c:	46bd      	mov	sp, r7
  40694e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406952:	4770      	bx	lr

00406954 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  406954:	b480      	push	{r7}
  406956:	b085      	sub	sp, #20
  406958:	af00      	add	r7, sp, #0
  40695a:	60f8      	str	r0, [r7, #12]
  40695c:	60b9      	str	r1, [r7, #8]
  40695e:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  406960:	687b      	ldr	r3, [r7, #4]
  406962:	2b04      	cmp	r3, #4
  406964:	d118      	bne.n	406998 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  406966:	68fb      	ldr	r3, [r7, #12]
  406968:	68ba      	ldr	r2, [r7, #8]
  40696a:	320c      	adds	r2, #12
  40696c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406970:	f023 0108 	bic.w	r1, r3, #8
  406974:	68fb      	ldr	r3, [r7, #12]
  406976:	68ba      	ldr	r2, [r7, #8]
  406978:	320c      	adds	r2, #12
  40697a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40697e:	68fb      	ldr	r3, [r7, #12]
  406980:	68ba      	ldr	r2, [r7, #8]
  406982:	320c      	adds	r2, #12
  406984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406988:	f043 0104 	orr.w	r1, r3, #4
  40698c:	68fb      	ldr	r3, [r7, #12]
  40698e:	68ba      	ldr	r2, [r7, #8]
  406990:	320c      	adds	r2, #12
  406992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  406996:	e02a      	b.n	4069ee <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  406998:	687b      	ldr	r3, [r7, #4]
  40699a:	2b00      	cmp	r3, #0
  40699c:	d118      	bne.n	4069d0 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40699e:	68fb      	ldr	r3, [r7, #12]
  4069a0:	68ba      	ldr	r2, [r7, #8]
  4069a2:	320c      	adds	r2, #12
  4069a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4069a8:	f023 0108 	bic.w	r1, r3, #8
  4069ac:	68fb      	ldr	r3, [r7, #12]
  4069ae:	68ba      	ldr	r2, [r7, #8]
  4069b0:	320c      	adds	r2, #12
  4069b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4069b6:	68fb      	ldr	r3, [r7, #12]
  4069b8:	68ba      	ldr	r2, [r7, #8]
  4069ba:	320c      	adds	r2, #12
  4069bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4069c0:	f023 0104 	bic.w	r1, r3, #4
  4069c4:	68fb      	ldr	r3, [r7, #12]
  4069c6:	68ba      	ldr	r2, [r7, #8]
  4069c8:	320c      	adds	r2, #12
  4069ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4069ce:	e00e      	b.n	4069ee <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4069d0:	687b      	ldr	r3, [r7, #4]
  4069d2:	2b08      	cmp	r3, #8
  4069d4:	d10b      	bne.n	4069ee <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4069d6:	68fb      	ldr	r3, [r7, #12]
  4069d8:	68ba      	ldr	r2, [r7, #8]
  4069da:	320c      	adds	r2, #12
  4069dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4069e0:	f043 0108 	orr.w	r1, r3, #8
  4069e4:	68fb      	ldr	r3, [r7, #12]
  4069e6:	68ba      	ldr	r2, [r7, #8]
  4069e8:	320c      	adds	r2, #12
  4069ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4069ee:	bf00      	nop
  4069f0:	3714      	adds	r7, #20
  4069f2:	46bd      	mov	sp, r7
  4069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4069f8:	4770      	bx	lr

004069fa <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4069fa:	b480      	push	{r7}
  4069fc:	b085      	sub	sp, #20
  4069fe:	af00      	add	r7, sp, #0
  406a00:	60f8      	str	r0, [r7, #12]
  406a02:	60b9      	str	r1, [r7, #8]
  406a04:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  406a06:	68fb      	ldr	r3, [r7, #12]
  406a08:	68ba      	ldr	r2, [r7, #8]
  406a0a:	320c      	adds	r2, #12
  406a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406a10:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  406a14:	68fb      	ldr	r3, [r7, #12]
  406a16:	68ba      	ldr	r2, [r7, #8]
  406a18:	320c      	adds	r2, #12
  406a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  406a1e:	68fb      	ldr	r3, [r7, #12]
  406a20:	68ba      	ldr	r2, [r7, #8]
  406a22:	320c      	adds	r2, #12
  406a24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  406a28:	687b      	ldr	r3, [r7, #4]
  406a2a:	ea42 0103 	orr.w	r1, r2, r3
  406a2e:	68fb      	ldr	r3, [r7, #12]
  406a30:	68ba      	ldr	r2, [r7, #8]
  406a32:	320c      	adds	r2, #12
  406a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406a38:	bf00      	nop
  406a3a:	3714      	adds	r7, #20
  406a3c:	46bd      	mov	sp, r7
  406a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a42:	4770      	bx	lr

00406a44 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  406a44:	b480      	push	{r7}
  406a46:	b085      	sub	sp, #20
  406a48:	af00      	add	r7, sp, #0
  406a4a:	60f8      	str	r0, [r7, #12]
  406a4c:	60b9      	str	r1, [r7, #8]
  406a4e:	4613      	mov	r3, r2
  406a50:	71fb      	strb	r3, [r7, #7]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
  406a52:	79fb      	ldrb	r3, [r7, #7]
  406a54:	2b00      	cmp	r3, #0
  406a56:	d102      	bne.n	406a5e <spi_set_baudrate_div+0x1a>
		return -1;
  406a58:	f04f 33ff 	mov.w	r3, #4294967295
  406a5c:	e01b      	b.n	406a96 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  406a5e:	68fb      	ldr	r3, [r7, #12]
  406a60:	68ba      	ldr	r2, [r7, #8]
  406a62:	320c      	adds	r2, #12
  406a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406a68:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  406a6c:	68fb      	ldr	r3, [r7, #12]
  406a6e:	68ba      	ldr	r2, [r7, #8]
  406a70:	320c      	adds	r2, #12
  406a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  406a76:	68fb      	ldr	r3, [r7, #12]
  406a78:	68ba      	ldr	r2, [r7, #8]
  406a7a:	320c      	adds	r2, #12
  406a7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  406a80:	79fb      	ldrb	r3, [r7, #7]
  406a82:	021b      	lsls	r3, r3, #8
  406a84:	b29b      	uxth	r3, r3
  406a86:	ea42 0103 	orr.w	r1, r2, r3
  406a8a:	68fb      	ldr	r3, [r7, #12]
  406a8c:	68ba      	ldr	r2, [r7, #8]
  406a8e:	320c      	adds	r2, #12
  406a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  406a94:	2300      	movs	r3, #0
}
  406a96:	4618      	mov	r0, r3
  406a98:	3714      	adds	r7, #20
  406a9a:	46bd      	mov	sp, r7
  406a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406aa0:	4770      	bx	lr

00406aa2 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  406aa2:	b480      	push	{r7}
  406aa4:	b085      	sub	sp, #20
  406aa6:	af00      	add	r7, sp, #0
  406aa8:	60f8      	str	r0, [r7, #12]
  406aaa:	60b9      	str	r1, [r7, #8]
  406aac:	4611      	mov	r1, r2
  406aae:	461a      	mov	r2, r3
  406ab0:	460b      	mov	r3, r1
  406ab2:	71fb      	strb	r3, [r7, #7]
  406ab4:	4613      	mov	r3, r2
  406ab6:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  406ab8:	68fb      	ldr	r3, [r7, #12]
  406aba:	68ba      	ldr	r2, [r7, #8]
  406abc:	320c      	adds	r2, #12
  406abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  406ac2:	b299      	uxth	r1, r3
  406ac4:	68fb      	ldr	r3, [r7, #12]
  406ac6:	68ba      	ldr	r2, [r7, #8]
  406ac8:	320c      	adds	r2, #12
  406aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  406ace:	68fb      	ldr	r3, [r7, #12]
  406ad0:	68ba      	ldr	r2, [r7, #8]
  406ad2:	320c      	adds	r2, #12
  406ad4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  406ad8:	79fb      	ldrb	r3, [r7, #7]
  406ada:	041b      	lsls	r3, r3, #16
  406adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  406ae0:	79b9      	ldrb	r1, [r7, #6]
  406ae2:	0609      	lsls	r1, r1, #24
  406ae4:	430b      	orrs	r3, r1
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  406ae6:	ea42 0103 	orr.w	r1, r2, r3
  406aea:	68fb      	ldr	r3, [r7, #12]
  406aec:	68ba      	ldr	r2, [r7, #8]
  406aee:	320c      	adds	r2, #12
  406af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  406af4:	bf00      	nop
  406af6:	3714      	adds	r7, #20
  406af8:	46bd      	mov	sp, r7
  406afa:	f85d 7b04 	ldr.w	r7, [sp], #4
  406afe:	4770      	bx	lr

00406b00 <supc_set_regulator_trim_user>:
 * \param value the trim value.
 *
 * \note For the trim value in 96M PLL, please read the value in flash unique identifier area.
 */
void supc_set_regulator_trim_user(Supc *p_supc, uint32_t value)
{
  406b00:	b480      	push	{r7}
  406b02:	b085      	sub	sp, #20
  406b04:	af00      	add	r7, sp, #0
  406b06:	6078      	str	r0, [r7, #4]
  406b08:	6039      	str	r1, [r7, #0]
#if SAMG54
	uint32_t ul_mr = p_supc->SUPC_MR & (~SUPC_MR_VRVDD_Msk);
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_VDDSEL_USER_VRVDD
		 | SUPC_MR_VRVDD(value);
#else
	uint32_t ul_pwmr = p_supc->SUPC_PWMR & (~(0xFu << 9));
  406b0a:	687b      	ldr	r3, [r7, #4]
  406b0c:	69db      	ldr	r3, [r3, #28]
  406b0e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
  406b12:	60fb      	str	r3, [r7, #12]
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
		| ((value & 0xFu) << 9);
  406b14:	683b      	ldr	r3, [r7, #0]
  406b16:	025b      	lsls	r3, r3, #9
  406b18:	f403 52f0 	and.w	r2, r3, #7680	; 0x1e00
  406b1c:	68fb      	ldr	r3, [r7, #12]
  406b1e:	4313      	orrs	r3, r2
  406b20:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
  406b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	p_supc->SUPC_PWMR = SUPC_PWMR_KEY_PASSWD | ul_pwmr | SUPC_PWMR_ECPWRS
  406b28:	687a      	ldr	r2, [r7, #4]
  406b2a:	61d3      	str	r3, [r2, #28]
#endif
}
  406b2c:	bf00      	nop
  406b2e:	3714      	adds	r7, #20
  406b30:	46bd      	mov	sp, r7
  406b32:	f85d 7b04 	ldr.w	r7, [sp], #4
  406b36:	4770      	bx	lr

00406b38 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  406b38:	b480      	push	{r7}
  406b3a:	b087      	sub	sp, #28
  406b3c:	af00      	add	r7, sp, #0
  406b3e:	60f8      	str	r0, [r7, #12]
  406b40:	60b9      	str	r1, [r7, #8]
  406b42:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  406b44:	68fa      	ldr	r2, [r7, #12]
  406b46:	68bb      	ldr	r3, [r7, #8]
  406b48:	019b      	lsls	r3, r3, #6
  406b4a:	4413      	add	r3, r2
  406b4c:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  406b4e:	697b      	ldr	r3, [r7, #20]
  406b50:	2202      	movs	r2, #2
  406b52:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  406b54:	697b      	ldr	r3, [r7, #20]
  406b56:	f04f 32ff 	mov.w	r2, #4294967295
  406b5a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  406b5c:	697b      	ldr	r3, [r7, #20]
  406b5e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  406b60:	697b      	ldr	r3, [r7, #20]
  406b62:	687a      	ldr	r2, [r7, #4]
  406b64:	605a      	str	r2, [r3, #4]
}
  406b66:	bf00      	nop
  406b68:	371c      	adds	r7, #28
  406b6a:	46bd      	mov	sp, r7
  406b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406b70:	4770      	bx	lr

00406b72 <tc_set_block_mode>:
 * the section  entitled "TC Block Mode Register" in the device-specific datasheet.
 */
void tc_set_block_mode(
		Tc *p_tc,
		uint32_t ul_blockmode)
{
  406b72:	b480      	push	{r7}
  406b74:	b083      	sub	sp, #12
  406b76:	af00      	add	r7, sp, #0
  406b78:	6078      	str	r0, [r7, #4]
  406b7a:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
  406b7c:	687b      	ldr	r3, [r7, #4]
  406b7e:	683a      	ldr	r2, [r7, #0]
  406b80:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  406b84:	bf00      	nop
  406b86:	370c      	adds	r7, #12
  406b88:	46bd      	mov	sp, r7
  406b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  406b8e:	4770      	bx	lr

00406b90 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  406b90:	b480      	push	{r7}
  406b92:	b083      	sub	sp, #12
  406b94:	af00      	add	r7, sp, #0
  406b96:	6078      	str	r0, [r7, #4]
  406b98:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  406b9a:	687a      	ldr	r2, [r7, #4]
  406b9c:	683b      	ldr	r3, [r7, #0]
  406b9e:	019b      	lsls	r3, r3, #6
  406ba0:	4413      	add	r3, r2
  406ba2:	2205      	movs	r2, #5
  406ba4:	601a      	str	r2, [r3, #0]
}
  406ba6:	bf00      	nop
  406ba8:	370c      	adds	r7, #12
  406baa:	46bd      	mov	sp, r7
  406bac:	f85d 7b04 	ldr.w	r7, [sp], #4
  406bb0:	4770      	bx	lr

00406bb2 <tc_read_cv>:
 * \return The counter value.
 */
uint32_t tc_read_cv(
		Tc *p_tc,
		uint32_t ul_channel)
{
  406bb2:	b480      	push	{r7}
  406bb4:	b083      	sub	sp, #12
  406bb6:	af00      	add	r7, sp, #0
  406bb8:	6078      	str	r0, [r7, #4]
  406bba:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
  406bbc:	687a      	ldr	r2, [r7, #4]
  406bbe:	683b      	ldr	r3, [r7, #0]
  406bc0:	019b      	lsls	r3, r3, #6
  406bc2:	4413      	add	r3, r2
  406bc4:	3310      	adds	r3, #16
  406bc6:	681b      	ldr	r3, [r3, #0]
}
  406bc8:	4618      	mov	r0, r3
  406bca:	370c      	adds	r7, #12
  406bcc:	46bd      	mov	sp, r7
  406bce:	f85d 7b04 	ldr.w	r7, [sp], #4
  406bd2:	4770      	bx	lr

00406bd4 <tc_read_rc>:
 * \return The Register C (RC) value.
 */
uint32_t tc_read_rc(
		Tc *p_tc,
		uint32_t ul_channel)
{
  406bd4:	b480      	push	{r7}
  406bd6:	b083      	sub	sp, #12
  406bd8:	af00      	add	r7, sp, #0
  406bda:	6078      	str	r0, [r7, #4]
  406bdc:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_RC;
  406bde:	687a      	ldr	r2, [r7, #4]
  406be0:	683b      	ldr	r3, [r7, #0]
  406be2:	019b      	lsls	r3, r3, #6
  406be4:	4413      	add	r3, r2
  406be6:	331c      	adds	r3, #28
  406be8:	681b      	ldr	r3, [r3, #0]
}
  406bea:	4618      	mov	r0, r3
  406bec:	370c      	adds	r7, #12
  406bee:	46bd      	mov	sp, r7
  406bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
  406bf4:	4770      	bx	lr

00406bf6 <tc_write_ra>:
 */
void tc_write_ra(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  406bf6:	b480      	push	{r7}
  406bf8:	b085      	sub	sp, #20
  406bfa:	af00      	add	r7, sp, #0
  406bfc:	60f8      	str	r0, [r7, #12]
  406bfe:	60b9      	str	r1, [r7, #8]
  406c00:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  406c02:	68fa      	ldr	r2, [r7, #12]
  406c04:	68bb      	ldr	r3, [r7, #8]
  406c06:	019b      	lsls	r3, r3, #6
  406c08:	4413      	add	r3, r2
  406c0a:	3314      	adds	r3, #20
  406c0c:	687a      	ldr	r2, [r7, #4]
  406c0e:	601a      	str	r2, [r3, #0]
}
  406c10:	bf00      	nop
  406c12:	3714      	adds	r7, #20
  406c14:	46bd      	mov	sp, r7
  406c16:	f85d 7b04 	ldr.w	r7, [sp], #4
  406c1a:	4770      	bx	lr

00406c1c <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  406c1c:	b480      	push	{r7}
  406c1e:	b085      	sub	sp, #20
  406c20:	af00      	add	r7, sp, #0
  406c22:	60f8      	str	r0, [r7, #12]
  406c24:	60b9      	str	r1, [r7, #8]
  406c26:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  406c28:	68fa      	ldr	r2, [r7, #12]
  406c2a:	68bb      	ldr	r3, [r7, #8]
  406c2c:	019b      	lsls	r3, r3, #6
  406c2e:	4413      	add	r3, r2
  406c30:	331c      	adds	r3, #28
  406c32:	687a      	ldr	r2, [r7, #4]
  406c34:	601a      	str	r2, [r3, #0]
}
  406c36:	bf00      	nop
  406c38:	3714      	adds	r7, #20
  406c3a:	46bd      	mov	sp, r7
  406c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406c40:	4770      	bx	lr

00406c42 <tc_disable_interrupt>:
 */
void tc_disable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  406c42:	b480      	push	{r7}
  406c44:	b087      	sub	sp, #28
  406c46:	af00      	add	r7, sp, #0
  406c48:	60f8      	str	r0, [r7, #12]
  406c4a:	60b9      	str	r1, [r7, #8]
  406c4c:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  406c4e:	68fa      	ldr	r2, [r7, #12]
  406c50:	68bb      	ldr	r3, [r7, #8]
  406c52:	019b      	lsls	r3, r3, #6
  406c54:	4413      	add	r3, r2
  406c56:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IDR = ul_sources;
  406c58:	697b      	ldr	r3, [r7, #20]
  406c5a:	687a      	ldr	r2, [r7, #4]
  406c5c:	629a      	str	r2, [r3, #40]	; 0x28
}
  406c5e:	bf00      	nop
  406c60:	371c      	adds	r7, #28
  406c62:	46bd      	mov	sp, r7
  406c64:	f85d 7b04 	ldr.w	r7, [sp], #4
  406c68:	4770      	bx	lr

00406c6a <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  406c6a:	b480      	push	{r7}
  406c6c:	b085      	sub	sp, #20
  406c6e:	af00      	add	r7, sp, #0
  406c70:	6078      	str	r0, [r7, #4]
  406c72:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  406c74:	687a      	ldr	r2, [r7, #4]
  406c76:	683b      	ldr	r3, [r7, #0]
  406c78:	019b      	lsls	r3, r3, #6
  406c7a:	4413      	add	r3, r2
  406c7c:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  406c7e:	68fb      	ldr	r3, [r7, #12]
  406c80:	6a1b      	ldr	r3, [r3, #32]
}
  406c82:	4618      	mov	r0, r3
  406c84:	3714      	adds	r7, #20
  406c86:	46bd      	mov	sp, r7
  406c88:	f85d 7b04 	ldr.w	r7, [sp], #4
  406c8c:	4770      	bx	lr

00406c8e <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  406c8e:	b480      	push	{r7}
  406c90:	b083      	sub	sp, #12
  406c92:	af00      	add	r7, sp, #0
  406c94:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  406c96:	687b      	ldr	r3, [r7, #4]
  406c98:	2208      	movs	r2, #8
  406c9a:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  406c9c:	687b      	ldr	r3, [r7, #4]
  406c9e:	2220      	movs	r2, #32
  406ca0:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  406ca2:	687b      	ldr	r3, [r7, #4]
  406ca4:	2204      	movs	r2, #4
  406ca6:	601a      	str	r2, [r3, #0]
}
  406ca8:	bf00      	nop
  406caa:	370c      	adds	r7, #12
  406cac:	46bd      	mov	sp, r7
  406cae:	f85d 7b04 	ldr.w	r7, [sp], #4
  406cb2:	4770      	bx	lr

00406cb4 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  406cb4:	b580      	push	{r7, lr}
  406cb6:	b084      	sub	sp, #16
  406cb8:	af00      	add	r7, sp, #0
  406cba:	6078      	str	r0, [r7, #4]
  406cbc:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  406cbe:	2300      	movs	r3, #0
  406cc0:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  406cc2:	687b      	ldr	r3, [r7, #4]
  406cc4:	f04f 32ff 	mov.w	r2, #4294967295
  406cc8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  406cca:	687b      	ldr	r3, [r7, #4]
  406ccc:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  406cce:	6878      	ldr	r0, [r7, #4]
  406cd0:	4b0e      	ldr	r3, [pc, #56]	; (406d0c <twi_master_init+0x58>)
  406cd2:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  406cd4:	6878      	ldr	r0, [r7, #4]
  406cd6:	4b0e      	ldr	r3, [pc, #56]	; (406d10 <twi_master_init+0x5c>)
  406cd8:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  406cda:	683b      	ldr	r3, [r7, #0]
  406cdc:	6859      	ldr	r1, [r3, #4]
  406cde:	683b      	ldr	r3, [r7, #0]
  406ce0:	681b      	ldr	r3, [r3, #0]
  406ce2:	461a      	mov	r2, r3
  406ce4:	6878      	ldr	r0, [r7, #4]
  406ce6:	4b0b      	ldr	r3, [pc, #44]	; (406d14 <twi_master_init+0x60>)
  406ce8:	4798      	blx	r3
  406cea:	4603      	mov	r3, r0
  406cec:	2b01      	cmp	r3, #1
  406cee:	d101      	bne.n	406cf4 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  406cf0:	2301      	movs	r3, #1
  406cf2:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  406cf4:	683b      	ldr	r3, [r7, #0]
  406cf6:	7a5b      	ldrb	r3, [r3, #9]
  406cf8:	2b01      	cmp	r3, #1
  406cfa:	d102      	bne.n	406d02 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  406cfc:	687b      	ldr	r3, [r7, #4]
  406cfe:	2240      	movs	r2, #64	; 0x40
  406d00:	601a      	str	r2, [r3, #0]
	}

	return status;
  406d02:	68fb      	ldr	r3, [r7, #12]
}
  406d04:	4618      	mov	r0, r3
  406d06:	3710      	adds	r7, #16
  406d08:	46bd      	mov	sp, r7
  406d0a:	bd80      	pop	{r7, pc}
  406d0c:	00407051 	.word	0x00407051
  406d10:	00406c8f 	.word	0x00406c8f
  406d14:	00406d19 	.word	0x00406d19

00406d18 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  406d18:	b480      	push	{r7}
  406d1a:	b089      	sub	sp, #36	; 0x24
  406d1c:	af00      	add	r7, sp, #0
  406d1e:	60f8      	str	r0, [r7, #12]
  406d20:	60b9      	str	r1, [r7, #8]
  406d22:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  406d24:	2300      	movs	r3, #0
  406d26:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  406d28:	68bb      	ldr	r3, [r7, #8]
  406d2a:	4a34      	ldr	r2, [pc, #208]	; (406dfc <twi_set_speed+0xe4>)
  406d2c:	4293      	cmp	r3, r2
  406d2e:	d901      	bls.n	406d34 <twi_set_speed+0x1c>
		return FAIL;
  406d30:	2301      	movs	r3, #1
  406d32:	e05d      	b.n	406df0 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  406d34:	68bb      	ldr	r3, [r7, #8]
  406d36:	4a32      	ldr	r2, [pc, #200]	; (406e00 <twi_set_speed+0xe8>)
  406d38:	4293      	cmp	r3, r2
  406d3a:	d937      	bls.n	406dac <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  406d3c:	687b      	ldr	r3, [r7, #4]
  406d3e:	4a31      	ldr	r2, [pc, #196]	; (406e04 <twi_set_speed+0xec>)
  406d40:	fba2 2303 	umull	r2, r3, r2, r3
  406d44:	0b9b      	lsrs	r3, r3, #14
  406d46:	3b03      	subs	r3, #3
  406d48:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  406d4a:	68ba      	ldr	r2, [r7, #8]
  406d4c:	4b2e      	ldr	r3, [pc, #184]	; (406e08 <twi_set_speed+0xf0>)
  406d4e:	4413      	add	r3, r2
  406d50:	009b      	lsls	r3, r3, #2
  406d52:	687a      	ldr	r2, [r7, #4]
  406d54:	fbb2 f3f3 	udiv	r3, r2, r3
  406d58:	3b03      	subs	r3, #3
  406d5a:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406d5c:	e005      	b.n	406d6a <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  406d5e:	69fb      	ldr	r3, [r7, #28]
  406d60:	3301      	adds	r3, #1
  406d62:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  406d64:	697b      	ldr	r3, [r7, #20]
  406d66:	085b      	lsrs	r3, r3, #1
  406d68:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406d6a:	697b      	ldr	r3, [r7, #20]
  406d6c:	2bff      	cmp	r3, #255	; 0xff
  406d6e:	d909      	bls.n	406d84 <twi_set_speed+0x6c>
  406d70:	69fb      	ldr	r3, [r7, #28]
  406d72:	2b06      	cmp	r3, #6
  406d74:	d9f3      	bls.n	406d5e <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406d76:	e005      	b.n	406d84 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  406d78:	69fb      	ldr	r3, [r7, #28]
  406d7a:	3301      	adds	r3, #1
  406d7c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  406d7e:	693b      	ldr	r3, [r7, #16]
  406d80:	085b      	lsrs	r3, r3, #1
  406d82:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406d84:	693b      	ldr	r3, [r7, #16]
  406d86:	2bff      	cmp	r3, #255	; 0xff
  406d88:	d902      	bls.n	406d90 <twi_set_speed+0x78>
  406d8a:	69fb      	ldr	r3, [r7, #28]
  406d8c:	2b06      	cmp	r3, #6
  406d8e:	d9f3      	bls.n	406d78 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  406d90:	697b      	ldr	r3, [r7, #20]
  406d92:	b2da      	uxtb	r2, r3
  406d94:	693b      	ldr	r3, [r7, #16]
  406d96:	021b      	lsls	r3, r3, #8
  406d98:	b29b      	uxth	r3, r3
  406d9a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  406d9c:	69fb      	ldr	r3, [r7, #28]
  406d9e:	041b      	lsls	r3, r3, #16
  406da0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  406da4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  406da6:	68fb      	ldr	r3, [r7, #12]
  406da8:	611a      	str	r2, [r3, #16]
  406daa:	e020      	b.n	406dee <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  406dac:	68bb      	ldr	r3, [r7, #8]
  406dae:	005b      	lsls	r3, r3, #1
  406db0:	687a      	ldr	r2, [r7, #4]
  406db2:	fbb2 f3f3 	udiv	r3, r2, r3
  406db6:	3b03      	subs	r3, #3
  406db8:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406dba:	e005      	b.n	406dc8 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  406dbc:	69fb      	ldr	r3, [r7, #28]
  406dbe:	3301      	adds	r3, #1
  406dc0:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  406dc2:	69bb      	ldr	r3, [r7, #24]
  406dc4:	085b      	lsrs	r3, r3, #1
  406dc6:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406dc8:	69bb      	ldr	r3, [r7, #24]
  406dca:	2bff      	cmp	r3, #255	; 0xff
  406dcc:	d902      	bls.n	406dd4 <twi_set_speed+0xbc>
  406dce:	69fb      	ldr	r3, [r7, #28]
  406dd0:	2b06      	cmp	r3, #6
  406dd2:	d9f3      	bls.n	406dbc <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  406dd4:	69bb      	ldr	r3, [r7, #24]
  406dd6:	b2da      	uxtb	r2, r3
  406dd8:	69bb      	ldr	r3, [r7, #24]
  406dda:	021b      	lsls	r3, r3, #8
  406ddc:	b29b      	uxth	r3, r3
  406dde:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  406de0:	69fb      	ldr	r3, [r7, #28]
  406de2:	041b      	lsls	r3, r3, #16
  406de4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  406de8:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  406dea:	68fb      	ldr	r3, [r7, #12]
  406dec:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  406dee:	2300      	movs	r3, #0
}
  406df0:	4618      	mov	r0, r3
  406df2:	3724      	adds	r7, #36	; 0x24
  406df4:	46bd      	mov	sp, r7
  406df6:	f85d 7b04 	ldr.w	r7, [sp], #4
  406dfa:	4770      	bx	lr
  406dfc:	00061a80 	.word	0x00061a80
  406e00:	0005dc00 	.word	0x0005dc00
  406e04:	057619f1 	.word	0x057619f1
  406e08:	3ffd1200 	.word	0x3ffd1200

00406e0c <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  406e0c:	b480      	push	{r7}
  406e0e:	b085      	sub	sp, #20
  406e10:	af00      	add	r7, sp, #0
  406e12:	6078      	str	r0, [r7, #4]
  406e14:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  406e16:	683b      	ldr	r3, [r7, #0]
  406e18:	2b00      	cmp	r3, #0
  406e1a:	d101      	bne.n	406e20 <twi_mk_addr+0x14>
		return 0;
  406e1c:	2300      	movs	r3, #0
  406e1e:	e01d      	b.n	406e5c <twi_mk_addr+0x50>

	val = addr[0];
  406e20:	687b      	ldr	r3, [r7, #4]
  406e22:	781b      	ldrb	r3, [r3, #0]
  406e24:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  406e26:	683b      	ldr	r3, [r7, #0]
  406e28:	2b01      	cmp	r3, #1
  406e2a:	dd09      	ble.n	406e40 <twi_mk_addr+0x34>
		val <<= 8;
  406e2c:	68fb      	ldr	r3, [r7, #12]
  406e2e:	021b      	lsls	r3, r3, #8
  406e30:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  406e32:	687b      	ldr	r3, [r7, #4]
  406e34:	3301      	adds	r3, #1
  406e36:	781b      	ldrb	r3, [r3, #0]
  406e38:	461a      	mov	r2, r3
  406e3a:	68fb      	ldr	r3, [r7, #12]
  406e3c:	4313      	orrs	r3, r2
  406e3e:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  406e40:	683b      	ldr	r3, [r7, #0]
  406e42:	2b02      	cmp	r3, #2
  406e44:	dd09      	ble.n	406e5a <twi_mk_addr+0x4e>
		val <<= 8;
  406e46:	68fb      	ldr	r3, [r7, #12]
  406e48:	021b      	lsls	r3, r3, #8
  406e4a:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  406e4c:	687b      	ldr	r3, [r7, #4]
  406e4e:	3302      	adds	r3, #2
  406e50:	781b      	ldrb	r3, [r3, #0]
  406e52:	461a      	mov	r2, r3
  406e54:	68fb      	ldr	r3, [r7, #12]
  406e56:	4313      	orrs	r3, r2
  406e58:	60fb      	str	r3, [r7, #12]
	}
	return val;
  406e5a:	68fb      	ldr	r3, [r7, #12]
}
  406e5c:	4618      	mov	r0, r3
  406e5e:	3714      	adds	r7, #20
  406e60:	46bd      	mov	sp, r7
  406e62:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e66:	4770      	bx	lr

00406e68 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  406e68:	b580      	push	{r7, lr}
  406e6a:	b088      	sub	sp, #32
  406e6c:	af00      	add	r7, sp, #0
  406e6e:	6078      	str	r0, [r7, #4]
  406e70:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  406e72:	683b      	ldr	r3, [r7, #0]
  406e74:	68db      	ldr	r3, [r3, #12]
  406e76:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  406e78:	683b      	ldr	r3, [r7, #0]
  406e7a:	689b      	ldr	r3, [r3, #8]
  406e7c:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  406e7e:	2300      	movs	r3, #0
  406e80:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  406e82:	f247 5330 	movw	r3, #30000	; 0x7530
  406e86:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  406e88:	69fb      	ldr	r3, [r7, #28]
  406e8a:	2b00      	cmp	r3, #0
  406e8c:	d101      	bne.n	406e92 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  406e8e:	2301      	movs	r3, #1
  406e90:	e069      	b.n	406f66 <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  406e92:	687b      	ldr	r3, [r7, #4]
  406e94:	2200      	movs	r2, #0
  406e96:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  406e98:	683b      	ldr	r3, [r7, #0]
  406e9a:	7c1b      	ldrb	r3, [r3, #16]
  406e9c:	041b      	lsls	r3, r3, #16
  406e9e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  406ea2:	683b      	ldr	r3, [r7, #0]
  406ea4:	685b      	ldr	r3, [r3, #4]
  406ea6:	021b      	lsls	r3, r3, #8
  406ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  406eac:	4313      	orrs	r3, r2
  406eae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  406eb2:	687b      	ldr	r3, [r7, #4]
  406eb4:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  406eb6:	687b      	ldr	r3, [r7, #4]
  406eb8:	2200      	movs	r2, #0
  406eba:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  406ebc:	683a      	ldr	r2, [r7, #0]
  406ebe:	683b      	ldr	r3, [r7, #0]
  406ec0:	685b      	ldr	r3, [r3, #4]
  406ec2:	4619      	mov	r1, r3
  406ec4:	4610      	mov	r0, r2
  406ec6:	4b2a      	ldr	r3, [pc, #168]	; (406f70 <twi_master_read+0x108>)
  406ec8:	4798      	blx	r3
  406eca:	4602      	mov	r2, r0
  406ecc:	687b      	ldr	r3, [r7, #4]
  406ece:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  406ed0:	69fb      	ldr	r3, [r7, #28]
  406ed2:	2b01      	cmp	r3, #1
  406ed4:	d105      	bne.n	406ee2 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  406ed6:	687b      	ldr	r3, [r7, #4]
  406ed8:	2203      	movs	r2, #3
  406eda:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  406edc:	2301      	movs	r3, #1
  406ede:	75fb      	strb	r3, [r7, #23]
  406ee0:	e034      	b.n	406f4c <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  406ee2:	687b      	ldr	r3, [r7, #4]
  406ee4:	2201      	movs	r2, #1
  406ee6:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  406ee8:	2300      	movs	r3, #0
  406eea:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  406eec:	e02e      	b.n	406f4c <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  406eee:	687b      	ldr	r3, [r7, #4]
  406ef0:	6a1b      	ldr	r3, [r3, #32]
  406ef2:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  406ef4:	68fb      	ldr	r3, [r7, #12]
  406ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406efa:	2b00      	cmp	r3, #0
  406efc:	d001      	beq.n	406f02 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  406efe:	2305      	movs	r3, #5
  406f00:	e031      	b.n	406f66 <twi_master_read+0xfe>
		}

		if (!timeout--) {
  406f02:	693b      	ldr	r3, [r7, #16]
  406f04:	1e5a      	subs	r2, r3, #1
  406f06:	613a      	str	r2, [r7, #16]
  406f08:	2b00      	cmp	r3, #0
  406f0a:	d101      	bne.n	406f10 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  406f0c:	2309      	movs	r3, #9
  406f0e:	e02a      	b.n	406f66 <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  406f10:	69fb      	ldr	r3, [r7, #28]
  406f12:	2b01      	cmp	r3, #1
  406f14:	d107      	bne.n	406f26 <twi_master_read+0xbe>
  406f16:	7dfb      	ldrb	r3, [r7, #23]
  406f18:	2b00      	cmp	r3, #0
  406f1a:	d104      	bne.n	406f26 <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  406f1c:	687b      	ldr	r3, [r7, #4]
  406f1e:	2202      	movs	r2, #2
  406f20:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  406f22:	2301      	movs	r3, #1
  406f24:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  406f26:	68fb      	ldr	r3, [r7, #12]
  406f28:	f003 0302 	and.w	r3, r3, #2
  406f2c:	2b00      	cmp	r3, #0
  406f2e:	d100      	bne.n	406f32 <twi_master_read+0xca>
			continue;
  406f30:	e00c      	b.n	406f4c <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  406f32:	69bb      	ldr	r3, [r7, #24]
  406f34:	1c5a      	adds	r2, r3, #1
  406f36:	61ba      	str	r2, [r7, #24]
  406f38:	687a      	ldr	r2, [r7, #4]
  406f3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
  406f3c:	b2d2      	uxtb	r2, r2
  406f3e:	701a      	strb	r2, [r3, #0]

		cnt--;
  406f40:	69fb      	ldr	r3, [r7, #28]
  406f42:	3b01      	subs	r3, #1
  406f44:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  406f46:	f247 5330 	movw	r3, #30000	; 0x7530
  406f4a:	613b      	str	r3, [r7, #16]
	while (cnt > 0) {
  406f4c:	69fb      	ldr	r3, [r7, #28]
  406f4e:	2b00      	cmp	r3, #0
  406f50:	d1cd      	bne.n	406eee <twi_master_read+0x86>
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  406f52:	bf00      	nop
  406f54:	687b      	ldr	r3, [r7, #4]
  406f56:	6a1b      	ldr	r3, [r3, #32]
  406f58:	f003 0301 	and.w	r3, r3, #1
  406f5c:	2b00      	cmp	r3, #0
  406f5e:	d0f9      	beq.n	406f54 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  406f60:	687b      	ldr	r3, [r7, #4]
  406f62:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  406f64:	2300      	movs	r3, #0
}
  406f66:	4618      	mov	r0, r3
  406f68:	3720      	adds	r7, #32
  406f6a:	46bd      	mov	sp, r7
  406f6c:	bd80      	pop	{r7, pc}
  406f6e:	bf00      	nop
  406f70:	00406e0d 	.word	0x00406e0d

00406f74 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  406f74:	b580      	push	{r7, lr}
  406f76:	b086      	sub	sp, #24
  406f78:	af00      	add	r7, sp, #0
  406f7a:	6078      	str	r0, [r7, #4]
  406f7c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  406f7e:	683b      	ldr	r3, [r7, #0]
  406f80:	68db      	ldr	r3, [r3, #12]
  406f82:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  406f84:	683b      	ldr	r3, [r7, #0]
  406f86:	689b      	ldr	r3, [r3, #8]
  406f88:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  406f8a:	697b      	ldr	r3, [r7, #20]
  406f8c:	2b00      	cmp	r3, #0
  406f8e:	d101      	bne.n	406f94 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  406f90:	2301      	movs	r3, #1
  406f92:	e056      	b.n	407042 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  406f94:	687b      	ldr	r3, [r7, #4]
  406f96:	2200      	movs	r2, #0
  406f98:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  406f9a:	683b      	ldr	r3, [r7, #0]
  406f9c:	7c1b      	ldrb	r3, [r3, #16]
  406f9e:	041b      	lsls	r3, r3, #16
  406fa0:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  406fa4:	683b      	ldr	r3, [r7, #0]
  406fa6:	685b      	ldr	r3, [r3, #4]
  406fa8:	021b      	lsls	r3, r3, #8
  406faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  406fae:	431a      	orrs	r2, r3
  406fb0:	687b      	ldr	r3, [r7, #4]
  406fb2:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  406fb4:	687b      	ldr	r3, [r7, #4]
  406fb6:	2200      	movs	r2, #0
  406fb8:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  406fba:	683a      	ldr	r2, [r7, #0]
  406fbc:	683b      	ldr	r3, [r7, #0]
  406fbe:	685b      	ldr	r3, [r3, #4]
  406fc0:	4619      	mov	r1, r3
  406fc2:	4610      	mov	r0, r2
  406fc4:	4b21      	ldr	r3, [pc, #132]	; (40704c <twi_master_write+0xd8>)
  406fc6:	4798      	blx	r3
  406fc8:	4602      	mov	r2, r0
  406fca:	687b      	ldr	r3, [r7, #4]
  406fcc:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  406fce:	e019      	b.n	407004 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  406fd0:	687b      	ldr	r3, [r7, #4]
  406fd2:	6a1b      	ldr	r3, [r3, #32]
  406fd4:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  406fd6:	68fb      	ldr	r3, [r7, #12]
  406fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406fdc:	2b00      	cmp	r3, #0
  406fde:	d001      	beq.n	406fe4 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  406fe0:	2305      	movs	r3, #5
  406fe2:	e02e      	b.n	407042 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  406fe4:	68fb      	ldr	r3, [r7, #12]
  406fe6:	f003 0304 	and.w	r3, r3, #4
  406fea:	2b00      	cmp	r3, #0
  406fec:	d100      	bne.n	406ff0 <twi_master_write+0x7c>
			continue;
  406fee:	e009      	b.n	407004 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  406ff0:	693b      	ldr	r3, [r7, #16]
  406ff2:	1c5a      	adds	r2, r3, #1
  406ff4:	613a      	str	r2, [r7, #16]
  406ff6:	781b      	ldrb	r3, [r3, #0]
  406ff8:	461a      	mov	r2, r3
  406ffa:	687b      	ldr	r3, [r7, #4]
  406ffc:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  406ffe:	697b      	ldr	r3, [r7, #20]
  407000:	3b01      	subs	r3, #1
  407002:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  407004:	697b      	ldr	r3, [r7, #20]
  407006:	2b00      	cmp	r3, #0
  407008:	d1e2      	bne.n	406fd0 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  40700a:	687b      	ldr	r3, [r7, #4]
  40700c:	6a1b      	ldr	r3, [r3, #32]
  40700e:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  407010:	68fb      	ldr	r3, [r7, #12]
  407012:	f403 7380 	and.w	r3, r3, #256	; 0x100
  407016:	2b00      	cmp	r3, #0
  407018:	d001      	beq.n	40701e <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  40701a:	2305      	movs	r3, #5
  40701c:	e011      	b.n	407042 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  40701e:	68fb      	ldr	r3, [r7, #12]
  407020:	f003 0304 	and.w	r3, r3, #4
  407024:	2b00      	cmp	r3, #0
  407026:	d100      	bne.n	40702a <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  407028:	e7ef      	b.n	40700a <twi_master_write+0x96>
			break;
  40702a:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  40702c:	687b      	ldr	r3, [r7, #4]
  40702e:	2202      	movs	r2, #2
  407030:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  407032:	bf00      	nop
  407034:	687b      	ldr	r3, [r7, #4]
  407036:	6a1b      	ldr	r3, [r3, #32]
  407038:	f003 0301 	and.w	r3, r3, #1
  40703c:	2b00      	cmp	r3, #0
  40703e:	d0f9      	beq.n	407034 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  407040:	2300      	movs	r3, #0
}
  407042:	4618      	mov	r0, r3
  407044:	3718      	adds	r7, #24
  407046:	46bd      	mov	sp, r7
  407048:	bd80      	pop	{r7, pc}
  40704a:	bf00      	nop
  40704c:	00406e0d 	.word	0x00406e0d

00407050 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  407050:	b480      	push	{r7}
  407052:	b083      	sub	sp, #12
  407054:	af00      	add	r7, sp, #0
  407056:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  407058:	687b      	ldr	r3, [r7, #4]
  40705a:	2280      	movs	r2, #128	; 0x80
  40705c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  40705e:	687b      	ldr	r3, [r7, #4]
  407060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  407062:	bf00      	nop
  407064:	370c      	adds	r7, #12
  407066:	46bd      	mov	sp, r7
  407068:	f85d 7b04 	ldr.w	r7, [sp], #4
  40706c:	4770      	bx	lr

0040706e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40706e:	b480      	push	{r7}
  407070:	b089      	sub	sp, #36	; 0x24
  407072:	af00      	add	r7, sp, #0
  407074:	60f8      	str	r0, [r7, #12]
  407076:	60b9      	str	r1, [r7, #8]
  407078:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40707a:	68bb      	ldr	r3, [r7, #8]
  40707c:	011a      	lsls	r2, r3, #4
  40707e:	687b      	ldr	r3, [r7, #4]
  407080:	429a      	cmp	r2, r3
  407082:	d802      	bhi.n	40708a <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  407084:	2310      	movs	r3, #16
  407086:	61fb      	str	r3, [r7, #28]
  407088:	e001      	b.n	40708e <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40708a:	2308      	movs	r3, #8
  40708c:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40708e:	687b      	ldr	r3, [r7, #4]
  407090:	00da      	lsls	r2, r3, #3
  407092:	69fb      	ldr	r3, [r7, #28]
  407094:	68b9      	ldr	r1, [r7, #8]
  407096:	fb01 f303 	mul.w	r3, r1, r3
  40709a:	085b      	lsrs	r3, r3, #1
  40709c:	441a      	add	r2, r3
  40709e:	69fb      	ldr	r3, [r7, #28]
  4070a0:	68b9      	ldr	r1, [r7, #8]
  4070a2:	fb01 f303 	mul.w	r3, r1, r3
  4070a6:	fbb2 f3f3 	udiv	r3, r2, r3
  4070aa:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  4070ac:	69bb      	ldr	r3, [r7, #24]
  4070ae:	08db      	lsrs	r3, r3, #3
  4070b0:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  4070b2:	69bb      	ldr	r3, [r7, #24]
  4070b4:	f003 0307 	and.w	r3, r3, #7
  4070b8:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4070ba:	697b      	ldr	r3, [r7, #20]
  4070bc:	2b00      	cmp	r3, #0
  4070be:	d003      	beq.n	4070c8 <usart_set_async_baudrate+0x5a>
  4070c0:	697b      	ldr	r3, [r7, #20]
  4070c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4070c6:	d301      	bcc.n	4070cc <usart_set_async_baudrate+0x5e>
		return 1;
  4070c8:	2301      	movs	r3, #1
  4070ca:	e00f      	b.n	4070ec <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  4070cc:	69fb      	ldr	r3, [r7, #28]
  4070ce:	2b08      	cmp	r3, #8
  4070d0:	d105      	bne.n	4070de <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  4070d2:	68fb      	ldr	r3, [r7, #12]
  4070d4:	685b      	ldr	r3, [r3, #4]
  4070d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  4070da:	68fb      	ldr	r3, [r7, #12]
  4070dc:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4070de:	693b      	ldr	r3, [r7, #16]
  4070e0:	041a      	lsls	r2, r3, #16
  4070e2:	697b      	ldr	r3, [r7, #20]
  4070e4:	431a      	orrs	r2, r3
  4070e6:	68fb      	ldr	r3, [r7, #12]
  4070e8:	621a      	str	r2, [r3, #32]

	return 0;
  4070ea:	2300      	movs	r3, #0
}
  4070ec:	4618      	mov	r0, r3
  4070ee:	3724      	adds	r7, #36	; 0x24
  4070f0:	46bd      	mov	sp, r7
  4070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4070f6:	4770      	bx	lr

004070f8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  4070f8:	b580      	push	{r7, lr}
  4070fa:	b082      	sub	sp, #8
  4070fc:	af00      	add	r7, sp, #0
  4070fe:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  407100:	6878      	ldr	r0, [r7, #4]
  407102:	4b0d      	ldr	r3, [pc, #52]	; (407138 <usart_reset+0x40>)
  407104:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  407106:	687b      	ldr	r3, [r7, #4]
  407108:	2200      	movs	r2, #0
  40710a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40710c:	687b      	ldr	r3, [r7, #4]
  40710e:	2200      	movs	r2, #0
  407110:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  407112:	687b      	ldr	r3, [r7, #4]
  407114:	2200      	movs	r2, #0
  407116:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  407118:	6878      	ldr	r0, [r7, #4]
  40711a:	4b08      	ldr	r3, [pc, #32]	; (40713c <usart_reset+0x44>)
  40711c:	4798      	blx	r3
	usart_reset_rx(p_usart);
  40711e:	6878      	ldr	r0, [r7, #4]
  407120:	4b07      	ldr	r3, [pc, #28]	; (407140 <usart_reset+0x48>)
  407122:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  407124:	6878      	ldr	r0, [r7, #4]
  407126:	4b07      	ldr	r3, [pc, #28]	; (407144 <usart_reset+0x4c>)
  407128:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40712a:	6878      	ldr	r0, [r7, #4]
  40712c:	4b06      	ldr	r3, [pc, #24]	; (407148 <usart_reset+0x50>)
  40712e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  407130:	bf00      	nop
  407132:	3708      	adds	r7, #8
  407134:	46bd      	mov	sp, r7
  407136:	bd80      	pop	{r7, pc}
  407138:	0040739d 	.word	0x0040739d
  40713c:	004071eb 	.word	0x004071eb
  407140:	0040721f 	.word	0x0040721f
  407144:	00407289 	.word	0x00407289
  407148:	004072a5 	.word	0x004072a5

0040714c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  40714c:	b580      	push	{r7, lr}
  40714e:	b084      	sub	sp, #16
  407150:	af00      	add	r7, sp, #0
  407152:	60f8      	str	r0, [r7, #12]
  407154:	60b9      	str	r1, [r7, #8]
  407156:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  407158:	68f8      	ldr	r0, [r7, #12]
  40715a:	4b1a      	ldr	r3, [pc, #104]	; (4071c4 <usart_init_rs232+0x78>)
  40715c:	4798      	blx	r3

	ul_reg_val = 0;
  40715e:	4b1a      	ldr	r3, [pc, #104]	; (4071c8 <usart_init_rs232+0x7c>)
  407160:	2200      	movs	r2, #0
  407162:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  407164:	68bb      	ldr	r3, [r7, #8]
  407166:	2b00      	cmp	r3, #0
  407168:	d009      	beq.n	40717e <usart_init_rs232+0x32>
  40716a:	68bb      	ldr	r3, [r7, #8]
  40716c:	681b      	ldr	r3, [r3, #0]
  40716e:	687a      	ldr	r2, [r7, #4]
  407170:	4619      	mov	r1, r3
  407172:	68f8      	ldr	r0, [r7, #12]
  407174:	4b15      	ldr	r3, [pc, #84]	; (4071cc <usart_init_rs232+0x80>)
  407176:	4798      	blx	r3
  407178:	4603      	mov	r3, r0
  40717a:	2b00      	cmp	r3, #0
  40717c:	d001      	beq.n	407182 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40717e:	2301      	movs	r3, #1
  407180:	e01b      	b.n	4071ba <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  407182:	68bb      	ldr	r3, [r7, #8]
  407184:	685a      	ldr	r2, [r3, #4]
  407186:	68bb      	ldr	r3, [r7, #8]
  407188:	689b      	ldr	r3, [r3, #8]
  40718a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40718c:	68bb      	ldr	r3, [r7, #8]
  40718e:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  407190:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  407192:	68bb      	ldr	r3, [r7, #8]
  407194:	68db      	ldr	r3, [r3, #12]
  407196:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  407198:	4b0b      	ldr	r3, [pc, #44]	; (4071c8 <usart_init_rs232+0x7c>)
  40719a:	681b      	ldr	r3, [r3, #0]
  40719c:	4313      	orrs	r3, r2
  40719e:	4a0a      	ldr	r2, [pc, #40]	; (4071c8 <usart_init_rs232+0x7c>)
  4071a0:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  4071a2:	4b09      	ldr	r3, [pc, #36]	; (4071c8 <usart_init_rs232+0x7c>)
  4071a4:	681b      	ldr	r3, [r3, #0]
  4071a6:	4a08      	ldr	r2, [pc, #32]	; (4071c8 <usart_init_rs232+0x7c>)
  4071a8:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  4071aa:	68fb      	ldr	r3, [r7, #12]
  4071ac:	685a      	ldr	r2, [r3, #4]
  4071ae:	4b06      	ldr	r3, [pc, #24]	; (4071c8 <usart_init_rs232+0x7c>)
  4071b0:	681b      	ldr	r3, [r3, #0]
  4071b2:	431a      	orrs	r2, r3
  4071b4:	68fb      	ldr	r3, [r7, #12]
  4071b6:	605a      	str	r2, [r3, #4]

	return 0;
  4071b8:	2300      	movs	r3, #0
}
  4071ba:	4618      	mov	r0, r3
  4071bc:	3710      	adds	r7, #16
  4071be:	46bd      	mov	sp, r7
  4071c0:	bd80      	pop	{r7, pc}
  4071c2:	bf00      	nop
  4071c4:	004070f9 	.word	0x004070f9
  4071c8:	20004448 	.word	0x20004448
  4071cc:	0040706f 	.word	0x0040706f

004071d0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  4071d0:	b480      	push	{r7}
  4071d2:	b083      	sub	sp, #12
  4071d4:	af00      	add	r7, sp, #0
  4071d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  4071d8:	687b      	ldr	r3, [r7, #4]
  4071da:	2240      	movs	r2, #64	; 0x40
  4071dc:	601a      	str	r2, [r3, #0]
}
  4071de:	bf00      	nop
  4071e0:	370c      	adds	r7, #12
  4071e2:	46bd      	mov	sp, r7
  4071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4071e8:	4770      	bx	lr

004071ea <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  4071ea:	b480      	push	{r7}
  4071ec:	b083      	sub	sp, #12
  4071ee:	af00      	add	r7, sp, #0
  4071f0:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4071f2:	687b      	ldr	r3, [r7, #4]
  4071f4:	2288      	movs	r2, #136	; 0x88
  4071f6:	601a      	str	r2, [r3, #0]
}
  4071f8:	bf00      	nop
  4071fa:	370c      	adds	r7, #12
  4071fc:	46bd      	mov	sp, r7
  4071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  407202:	4770      	bx	lr

00407204 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  407204:	b480      	push	{r7}
  407206:	b083      	sub	sp, #12
  407208:	af00      	add	r7, sp, #0
  40720a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  40720c:	687b      	ldr	r3, [r7, #4]
  40720e:	2210      	movs	r2, #16
  407210:	601a      	str	r2, [r3, #0]
}
  407212:	bf00      	nop
  407214:	370c      	adds	r7, #12
  407216:	46bd      	mov	sp, r7
  407218:	f85d 7b04 	ldr.w	r7, [sp], #4
  40721c:	4770      	bx	lr

0040721e <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  40721e:	b480      	push	{r7}
  407220:	b083      	sub	sp, #12
  407222:	af00      	add	r7, sp, #0
  407224:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  407226:	687b      	ldr	r3, [r7, #4]
  407228:	2224      	movs	r2, #36	; 0x24
  40722a:	601a      	str	r2, [r3, #0]
}
  40722c:	bf00      	nop
  40722e:	370c      	adds	r7, #12
  407230:	46bd      	mov	sp, r7
  407232:	f85d 7b04 	ldr.w	r7, [sp], #4
  407236:	4770      	bx	lr

00407238 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  407238:	b480      	push	{r7}
  40723a:	b083      	sub	sp, #12
  40723c:	af00      	add	r7, sp, #0
  40723e:	6078      	str	r0, [r7, #4]
  407240:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  407242:	687b      	ldr	r3, [r7, #4]
  407244:	683a      	ldr	r2, [r7, #0]
  407246:	609a      	str	r2, [r3, #8]
}
  407248:	bf00      	nop
  40724a:	370c      	adds	r7, #12
  40724c:	46bd      	mov	sp, r7
  40724e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407252:	4770      	bx	lr

00407254 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  407254:	b480      	push	{r7}
  407256:	b083      	sub	sp, #12
  407258:	af00      	add	r7, sp, #0
  40725a:	6078      	str	r0, [r7, #4]
  40725c:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  40725e:	687b      	ldr	r3, [r7, #4]
  407260:	683a      	ldr	r2, [r7, #0]
  407262:	60da      	str	r2, [r3, #12]
}
  407264:	bf00      	nop
  407266:	370c      	adds	r7, #12
  407268:	46bd      	mov	sp, r7
  40726a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40726e:	4770      	bx	lr

00407270 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  407270:	b480      	push	{r7}
  407272:	b083      	sub	sp, #12
  407274:	af00      	add	r7, sp, #0
  407276:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  407278:	687b      	ldr	r3, [r7, #4]
  40727a:	695b      	ldr	r3, [r3, #20]
}
  40727c:	4618      	mov	r0, r3
  40727e:	370c      	adds	r7, #12
  407280:	46bd      	mov	sp, r7
  407282:	f85d 7b04 	ldr.w	r7, [sp], #4
  407286:	4770      	bx	lr

00407288 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  407288:	b480      	push	{r7}
  40728a:	b083      	sub	sp, #12
  40728c:	af00      	add	r7, sp, #0
  40728e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  407290:	687b      	ldr	r3, [r7, #4]
  407292:	f44f 7280 	mov.w	r2, #256	; 0x100
  407296:	601a      	str	r2, [r3, #0]
}
  407298:	bf00      	nop
  40729a:	370c      	adds	r7, #12
  40729c:	46bd      	mov	sp, r7
  40729e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4072a2:	4770      	bx	lr

004072a4 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4072a4:	b480      	push	{r7}
  4072a6:	b083      	sub	sp, #12
  4072a8:	af00      	add	r7, sp, #0
  4072aa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4072ac:	687b      	ldr	r3, [r7, #4]
  4072ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4072b2:	601a      	str	r2, [r3, #0]
}
  4072b4:	bf00      	nop
  4072b6:	370c      	adds	r7, #12
  4072b8:	46bd      	mov	sp, r7
  4072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4072be:	4770      	bx	lr

004072c0 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
  4072c0:	b480      	push	{r7}
  4072c2:	b085      	sub	sp, #20
  4072c4:	af00      	add	r7, sp, #0
  4072c6:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *)NULL;
  4072c8:	2300      	movs	r3, #0
  4072ca:	60fb      	str	r3, [r7, #12]
		p_pdc_base = PDC_USART;
		return p_pdc_base;
	}
#endif
#ifdef PDC_USART0
	if (p_usart == USART0) {
  4072cc:	687b      	ldr	r3, [r7, #4]
  4072ce:	4a23      	ldr	r2, [pc, #140]	; (40735c <usart_get_pdc_base+0x9c>)
  4072d0:	4293      	cmp	r3, r2
  4072d2:	d103      	bne.n	4072dc <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
  4072d4:	4b22      	ldr	r3, [pc, #136]	; (407360 <usart_get_pdc_base+0xa0>)
  4072d6:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4072d8:	68fb      	ldr	r3, [r7, #12]
  4072da:	e038      	b.n	40734e <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART1
	else if (p_usart == USART1) {
  4072dc:	687b      	ldr	r3, [r7, #4]
  4072de:	4a21      	ldr	r2, [pc, #132]	; (407364 <usart_get_pdc_base+0xa4>)
  4072e0:	4293      	cmp	r3, r2
  4072e2:	d103      	bne.n	4072ec <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
  4072e4:	4b20      	ldr	r3, [pc, #128]	; (407368 <usart_get_pdc_base+0xa8>)
  4072e6:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4072e8:	68fb      	ldr	r3, [r7, #12]
  4072ea:	e030      	b.n	40734e <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART2
	else if (p_usart == USART2) {
  4072ec:	687b      	ldr	r3, [r7, #4]
  4072ee:	4a1f      	ldr	r2, [pc, #124]	; (40736c <usart_get_pdc_base+0xac>)
  4072f0:	4293      	cmp	r3, r2
  4072f2:	d103      	bne.n	4072fc <usart_get_pdc_base+0x3c>
		p_pdc_base = PDC_USART2;
  4072f4:	4b1e      	ldr	r3, [pc, #120]	; (407370 <usart_get_pdc_base+0xb0>)
  4072f6:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  4072f8:	68fb      	ldr	r3, [r7, #12]
  4072fa:	e028      	b.n	40734e <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART3
	else if (p_usart == USART3) {
  4072fc:	687b      	ldr	r3, [r7, #4]
  4072fe:	4a1d      	ldr	r2, [pc, #116]	; (407374 <usart_get_pdc_base+0xb4>)
  407300:	4293      	cmp	r3, r2
  407302:	d103      	bne.n	40730c <usart_get_pdc_base+0x4c>
		p_pdc_base = PDC_USART3;
  407304:	4b1c      	ldr	r3, [pc, #112]	; (407378 <usart_get_pdc_base+0xb8>)
  407306:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  407308:	68fb      	ldr	r3, [r7, #12]
  40730a:	e020      	b.n	40734e <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART4
	else if (p_usart == USART4) {
  40730c:	687b      	ldr	r3, [r7, #4]
  40730e:	4a1b      	ldr	r2, [pc, #108]	; (40737c <usart_get_pdc_base+0xbc>)
  407310:	4293      	cmp	r3, r2
  407312:	d103      	bne.n	40731c <usart_get_pdc_base+0x5c>
		p_pdc_base = PDC_USART4;
  407314:	4b1a      	ldr	r3, [pc, #104]	; (407380 <usart_get_pdc_base+0xc0>)
  407316:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  407318:	68fb      	ldr	r3, [r7, #12]
  40731a:	e018      	b.n	40734e <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART5
	else if (p_usart == USART5) {
  40731c:	687b      	ldr	r3, [r7, #4]
  40731e:	4a19      	ldr	r2, [pc, #100]	; (407384 <usart_get_pdc_base+0xc4>)
  407320:	4293      	cmp	r3, r2
  407322:	d103      	bne.n	40732c <usart_get_pdc_base+0x6c>
		p_pdc_base = PDC_USART5;
  407324:	4b18      	ldr	r3, [pc, #96]	; (407388 <usart_get_pdc_base+0xc8>)
  407326:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  407328:	68fb      	ldr	r3, [r7, #12]
  40732a:	e010      	b.n	40734e <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART6
	else if (p_usart == USART6) {
  40732c:	687b      	ldr	r3, [r7, #4]
  40732e:	4a17      	ldr	r2, [pc, #92]	; (40738c <usart_get_pdc_base+0xcc>)
  407330:	4293      	cmp	r3, r2
  407332:	d103      	bne.n	40733c <usart_get_pdc_base+0x7c>
		p_pdc_base = PDC_USART6;
  407334:	4b16      	ldr	r3, [pc, #88]	; (407390 <usart_get_pdc_base+0xd0>)
  407336:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  407338:	68fb      	ldr	r3, [r7, #12]
  40733a:	e008      	b.n	40734e <usart_get_pdc_base+0x8e>
	}
#endif
#ifdef PDC_USART7
	else if (p_usart == USART7) {
  40733c:	687b      	ldr	r3, [r7, #4]
  40733e:	4a15      	ldr	r2, [pc, #84]	; (407394 <usart_get_pdc_base+0xd4>)
  407340:	4293      	cmp	r3, r2
  407342:	d103      	bne.n	40734c <usart_get_pdc_base+0x8c>
		p_pdc_base = PDC_USART7;
  407344:	4b14      	ldr	r3, [pc, #80]	; (407398 <usart_get_pdc_base+0xd8>)
  407346:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
  407348:	68fb      	ldr	r3, [r7, #12]
  40734a:	e000      	b.n	40734e <usart_get_pdc_base+0x8e>
	}
#endif

	return p_pdc_base;
  40734c:	68fb      	ldr	r3, [r7, #12]
}
  40734e:	4618      	mov	r0, r3
  407350:	3714      	adds	r7, #20
  407352:	46bd      	mov	sp, r7
  407354:	f85d 7b04 	ldr.w	r7, [sp], #4
  407358:	4770      	bx	lr
  40735a:	bf00      	nop
  40735c:	4000c200 	.word	0x4000c200
  407360:	4000c300 	.word	0x4000c300
  407364:	40020200 	.word	0x40020200
  407368:	40020300 	.word	0x40020300
  40736c:	40024200 	.word	0x40024200
  407370:	40024300 	.word	0x40024300
  407374:	40018200 	.word	0x40018200
  407378:	40018300 	.word	0x40018300
  40737c:	4001c200 	.word	0x4001c200
  407380:	4001c300 	.word	0x4001c300
  407384:	40008200 	.word	0x40008200
  407388:	40008300 	.word	0x40008300
  40738c:	40040200 	.word	0x40040200
  407390:	40040300 	.word	0x40040300
  407394:	40034200 	.word	0x40034200
  407398:	40034300 	.word	0x40034300

0040739c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  40739c:	b480      	push	{r7}
  40739e:	b083      	sub	sp, #12
  4073a0:	af00      	add	r7, sp, #0
  4073a2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4073a4:	687b      	ldr	r3, [r7, #4]
  4073a6:	4a04      	ldr	r2, [pc, #16]	; (4073b8 <usart_disable_writeprotect+0x1c>)
  4073a8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4073ac:	bf00      	nop
  4073ae:	370c      	adds	r7, #12
  4073b0:	46bd      	mov	sp, r7
  4073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4073b6:	4770      	bx	lr
  4073b8:	55534100 	.word	0x55534100

004073bc <cpu_irq_save>:
{
  4073bc:	b480      	push	{r7}
  4073be:	b083      	sub	sp, #12
  4073c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4073c2:	f3ef 8310 	mrs	r3, PRIMASK
  4073c6:	607b      	str	r3, [r7, #4]
  return(result);
  4073c8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4073ca:	2b00      	cmp	r3, #0
  4073cc:	bf0c      	ite	eq
  4073ce:	2301      	moveq	r3, #1
  4073d0:	2300      	movne	r3, #0
  4073d2:	b2db      	uxtb	r3, r3
  4073d4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4073d6:	b672      	cpsid	i
  4073d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4073dc:	4b04      	ldr	r3, [pc, #16]	; (4073f0 <cpu_irq_save+0x34>)
  4073de:	2200      	movs	r2, #0
  4073e0:	701a      	strb	r2, [r3, #0]
	return flags;
  4073e2:	683b      	ldr	r3, [r7, #0]
}
  4073e4:	4618      	mov	r0, r3
  4073e6:	370c      	adds	r7, #12
  4073e8:	46bd      	mov	sp, r7
  4073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4073ee:	4770      	bx	lr
  4073f0:	200024e4 	.word	0x200024e4

004073f4 <cpu_irq_is_enabled_flags>:
{
  4073f4:	b480      	push	{r7}
  4073f6:	b083      	sub	sp, #12
  4073f8:	af00      	add	r7, sp, #0
  4073fa:	6078      	str	r0, [r7, #4]
	return (flags);
  4073fc:	687b      	ldr	r3, [r7, #4]
  4073fe:	2b00      	cmp	r3, #0
  407400:	bf14      	ite	ne
  407402:	2301      	movne	r3, #1
  407404:	2300      	moveq	r3, #0
  407406:	b2db      	uxtb	r3, r3
}
  407408:	4618      	mov	r0, r3
  40740a:	370c      	adds	r7, #12
  40740c:	46bd      	mov	sp, r7
  40740e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407412:	4770      	bx	lr

00407414 <cpu_irq_restore>:
{
  407414:	b580      	push	{r7, lr}
  407416:	b082      	sub	sp, #8
  407418:	af00      	add	r7, sp, #0
  40741a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40741c:	6878      	ldr	r0, [r7, #4]
  40741e:	4b07      	ldr	r3, [pc, #28]	; (40743c <cpu_irq_restore+0x28>)
  407420:	4798      	blx	r3
  407422:	4603      	mov	r3, r0
  407424:	2b00      	cmp	r3, #0
  407426:	d005      	beq.n	407434 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  407428:	4b05      	ldr	r3, [pc, #20]	; (407440 <cpu_irq_restore+0x2c>)
  40742a:	2201      	movs	r2, #1
  40742c:	701a      	strb	r2, [r3, #0]
  40742e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  407432:	b662      	cpsie	i
}
  407434:	bf00      	nop
  407436:	3708      	adds	r7, #8
  407438:	46bd      	mov	sp, r7
  40743a:	bd80      	pop	{r7, pc}
  40743c:	004073f5 	.word	0x004073f5
  407440:	200024e4 	.word	0x200024e4

00407444 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  407444:	b580      	push	{r7, lr}
  407446:	b084      	sub	sp, #16
  407448:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40744a:	4b25      	ldr	r3, [pc, #148]	; (4074e0 <Reset_Handler+0x9c>)
  40744c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40744e:	4b25      	ldr	r3, [pc, #148]	; (4074e4 <Reset_Handler+0xa0>)
  407450:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  407452:	68fa      	ldr	r2, [r7, #12]
  407454:	68bb      	ldr	r3, [r7, #8]
  407456:	429a      	cmp	r2, r3
  407458:	d00c      	beq.n	407474 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40745a:	e007      	b.n	40746c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40745c:	68bb      	ldr	r3, [r7, #8]
  40745e:	1d1a      	adds	r2, r3, #4
  407460:	60ba      	str	r2, [r7, #8]
  407462:	68fa      	ldr	r2, [r7, #12]
  407464:	1d11      	adds	r1, r2, #4
  407466:	60f9      	str	r1, [r7, #12]
  407468:	6812      	ldr	r2, [r2, #0]
  40746a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  40746c:	68bb      	ldr	r3, [r7, #8]
  40746e:	4a1e      	ldr	r2, [pc, #120]	; (4074e8 <Reset_Handler+0xa4>)
  407470:	4293      	cmp	r3, r2
  407472:	d3f3      	bcc.n	40745c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  407474:	4b1d      	ldr	r3, [pc, #116]	; (4074ec <Reset_Handler+0xa8>)
  407476:	60bb      	str	r3, [r7, #8]
  407478:	e004      	b.n	407484 <Reset_Handler+0x40>
                *pDest++ = 0;
  40747a:	68bb      	ldr	r3, [r7, #8]
  40747c:	1d1a      	adds	r2, r3, #4
  40747e:	60ba      	str	r2, [r7, #8]
  407480:	2200      	movs	r2, #0
  407482:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  407484:	68bb      	ldr	r3, [r7, #8]
  407486:	4a1a      	ldr	r2, [pc, #104]	; (4074f0 <Reset_Handler+0xac>)
  407488:	4293      	cmp	r3, r2
  40748a:	d3f6      	bcc.n	40747a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  40748c:	4b19      	ldr	r3, [pc, #100]	; (4074f4 <Reset_Handler+0xb0>)
  40748e:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  407490:	4a19      	ldr	r2, [pc, #100]	; (4074f8 <Reset_Handler+0xb4>)
  407492:	68fb      	ldr	r3, [r7, #12]
  407494:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  407498:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  40749a:	4b18      	ldr	r3, [pc, #96]	; (4074fc <Reset_Handler+0xb8>)
  40749c:	4798      	blx	r3
  40749e:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4074a0:	4a17      	ldr	r2, [pc, #92]	; (407500 <Reset_Handler+0xbc>)
  4074a2:	4b17      	ldr	r3, [pc, #92]	; (407500 <Reset_Handler+0xbc>)
  4074a4:	681b      	ldr	r3, [r3, #0]
  4074a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4074aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4074ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4074b0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4074b4:	6878      	ldr	r0, [r7, #4]
  4074b6:	4b13      	ldr	r3, [pc, #76]	; (407504 <Reset_Handler+0xc0>)
  4074b8:	4798      	blx	r3

#if __FPU_USED
	fpu_enable();
#endif

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4074ba:	68fb      	ldr	r3, [r7, #12]
  4074bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4074c0:	d309      	bcc.n	4074d6 <Reset_Handler+0x92>
  4074c2:	68fb      	ldr	r3, [r7, #12]
  4074c4:	4a10      	ldr	r2, [pc, #64]	; (407508 <Reset_Handler+0xc4>)
  4074c6:	4293      	cmp	r3, r2
  4074c8:	d805      	bhi.n	4074d6 <Reset_Handler+0x92>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  4074ca:	4a0b      	ldr	r2, [pc, #44]	; (4074f8 <Reset_Handler+0xb4>)
  4074cc:	4b0a      	ldr	r3, [pc, #40]	; (4074f8 <Reset_Handler+0xb4>)
  4074ce:	689b      	ldr	r3, [r3, #8]
  4074d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4074d4:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  4074d6:	4b0d      	ldr	r3, [pc, #52]	; (40750c <Reset_Handler+0xc8>)
  4074d8:	4798      	blx	r3

        /* Branch to main function */
        main();
  4074da:	4b0d      	ldr	r3, [pc, #52]	; (407510 <Reset_Handler+0xcc>)
  4074dc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4074de:	e7fe      	b.n	4074de <Reset_Handler+0x9a>
  4074e0:	0040c894 	.word	0x0040c894
  4074e4:	20000000 	.word	0x20000000
  4074e8:	20002e98 	.word	0x20002e98
  4074ec:	20002e98 	.word	0x20002e98
  4074f0:	200046c0 	.word	0x200046c0
  4074f4:	00400000 	.word	0x00400000
  4074f8:	e000ed00 	.word	0xe000ed00
  4074fc:	004073bd 	.word	0x004073bd
  407500:	e000ed88 	.word	0xe000ed88
  407504:	00407415 	.word	0x00407415
  407508:	20027fff 	.word	0x20027fff
  40750c:	00408001 	.word	0x00408001
  407510:	004001b5 	.word	0x004001b5

00407514 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  407514:	b480      	push	{r7}
  407516:	af00      	add	r7, sp, #0
        while (1) {
  407518:	e7fe      	b.n	407518 <Dummy_Handler+0x4>
	...

0040751c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
  40751c:	b480      	push	{r7}
  40751e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  407520:	4b41      	ldr	r3, [pc, #260]	; (407628 <SystemCoreClockUpdate+0x10c>)
  407522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  407524:	f003 0303 	and.w	r3, r3, #3
  407528:	2b01      	cmp	r3, #1
  40752a:	d014      	beq.n	407556 <SystemCoreClockUpdate+0x3a>
  40752c:	2b01      	cmp	r3, #1
  40752e:	d302      	bcc.n	407536 <SystemCoreClockUpdate+0x1a>
  407530:	2b02      	cmp	r3, #2
  407532:	d038      	beq.n	4075a6 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
					CKGR_PLLAR_MULA_Pos) + 1U);
		}
		break;
	default:
		break;
  407534:	e059      	b.n	4075ea <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  407536:	4b3d      	ldr	r3, [pc, #244]	; (40762c <SystemCoreClockUpdate+0x110>)
  407538:	695b      	ldr	r3, [r3, #20]
  40753a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40753e:	2b00      	cmp	r3, #0
  407540:	d004      	beq.n	40754c <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  407542:	4b3b      	ldr	r3, [pc, #236]	; (407630 <SystemCoreClockUpdate+0x114>)
  407544:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  407548:	601a      	str	r2, [r3, #0]
		break;
  40754a:	e04e      	b.n	4075ea <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40754c:	4b38      	ldr	r3, [pc, #224]	; (407630 <SystemCoreClockUpdate+0x114>)
  40754e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  407552:	601a      	str	r2, [r3, #0]
		break;
  407554:	e049      	b.n	4075ea <SystemCoreClockUpdate+0xce>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  407556:	4b34      	ldr	r3, [pc, #208]	; (407628 <SystemCoreClockUpdate+0x10c>)
  407558:	6a1b      	ldr	r3, [r3, #32]
  40755a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40755e:	2b00      	cmp	r3, #0
  407560:	d003      	beq.n	40756a <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  407562:	4b33      	ldr	r3, [pc, #204]	; (407630 <SystemCoreClockUpdate+0x114>)
  407564:	4a33      	ldr	r2, [pc, #204]	; (407634 <SystemCoreClockUpdate+0x118>)
  407566:	601a      	str	r2, [r3, #0]
		break;
  407568:	e03f      	b.n	4075ea <SystemCoreClockUpdate+0xce>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40756a:	4b31      	ldr	r3, [pc, #196]	; (407630 <SystemCoreClockUpdate+0x114>)
  40756c:	4a32      	ldr	r2, [pc, #200]	; (407638 <SystemCoreClockUpdate+0x11c>)
  40756e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  407570:	4b2d      	ldr	r3, [pc, #180]	; (407628 <SystemCoreClockUpdate+0x10c>)
  407572:	6a1b      	ldr	r3, [r3, #32]
  407574:	f003 0370 	and.w	r3, r3, #112	; 0x70
  407578:	2b10      	cmp	r3, #16
  40757a:	d004      	beq.n	407586 <SystemCoreClockUpdate+0x6a>
  40757c:	2b20      	cmp	r3, #32
  40757e:	d008      	beq.n	407592 <SystemCoreClockUpdate+0x76>
  407580:	2b00      	cmp	r3, #0
  407582:	d00e      	beq.n	4075a2 <SystemCoreClockUpdate+0x86>
				break;
  407584:	e00e      	b.n	4075a4 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 2U;
  407586:	4b2a      	ldr	r3, [pc, #168]	; (407630 <SystemCoreClockUpdate+0x114>)
  407588:	681b      	ldr	r3, [r3, #0]
  40758a:	005b      	lsls	r3, r3, #1
  40758c:	4a28      	ldr	r2, [pc, #160]	; (407630 <SystemCoreClockUpdate+0x114>)
  40758e:	6013      	str	r3, [r2, #0]
				break;
  407590:	e008      	b.n	4075a4 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 3U;
  407592:	4b27      	ldr	r3, [pc, #156]	; (407630 <SystemCoreClockUpdate+0x114>)
  407594:	681a      	ldr	r2, [r3, #0]
  407596:	4613      	mov	r3, r2
  407598:	005b      	lsls	r3, r3, #1
  40759a:	4413      	add	r3, r2
  40759c:	4a24      	ldr	r2, [pc, #144]	; (407630 <SystemCoreClockUpdate+0x114>)
  40759e:	6013      	str	r3, [r2, #0]
				break;
  4075a0:	e000      	b.n	4075a4 <SystemCoreClockUpdate+0x88>
				break;
  4075a2:	bf00      	nop
		break;
  4075a4:	e021      	b.n	4075ea <SystemCoreClockUpdate+0xce>
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4075a6:	4b21      	ldr	r3, [pc, #132]	; (40762c <SystemCoreClockUpdate+0x110>)
  4075a8:	695b      	ldr	r3, [r3, #20]
  4075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4075ae:	2b00      	cmp	r3, #0
  4075b0:	d004      	beq.n	4075bc <SystemCoreClockUpdate+0xa0>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4075b2:	4b1f      	ldr	r3, [pc, #124]	; (407630 <SystemCoreClockUpdate+0x114>)
  4075b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4075b8:	601a      	str	r2, [r3, #0]
  4075ba:	e003      	b.n	4075c4 <SystemCoreClockUpdate+0xa8>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4075bc:	4b1c      	ldr	r3, [pc, #112]	; (407630 <SystemCoreClockUpdate+0x114>)
  4075be:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4075c2:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  4075c4:	4b18      	ldr	r3, [pc, #96]	; (407628 <SystemCoreClockUpdate+0x10c>)
  4075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4075c8:	f003 0303 	and.w	r3, r3, #3
  4075cc:	2b02      	cmp	r3, #2
  4075ce:	d10b      	bne.n	4075e8 <SystemCoreClockUpdate+0xcc>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  4075d0:	4b15      	ldr	r3, [pc, #84]	; (407628 <SystemCoreClockUpdate+0x10c>)
  4075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4075d4:	0c1b      	lsrs	r3, r3, #16
  4075d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
					CKGR_PLLAR_MULA_Pos) + 1U);
  4075da:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  4075dc:	4a14      	ldr	r2, [pc, #80]	; (407630 <SystemCoreClockUpdate+0x114>)
  4075de:	6812      	ldr	r2, [r2, #0]
  4075e0:	fb02 f303 	mul.w	r3, r2, r3
  4075e4:	4a12      	ldr	r2, [pc, #72]	; (407630 <SystemCoreClockUpdate+0x114>)
  4075e6:	6013      	str	r3, [r2, #0]
		break;
  4075e8:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4075ea:	4b0f      	ldr	r3, [pc, #60]	; (407628 <SystemCoreClockUpdate+0x10c>)
  4075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4075ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4075f2:	2b70      	cmp	r3, #112	; 0x70
  4075f4:	d108      	bne.n	407608 <SystemCoreClockUpdate+0xec>
		SystemCoreClock /= 3U;
  4075f6:	4b0e      	ldr	r3, [pc, #56]	; (407630 <SystemCoreClockUpdate+0x114>)
  4075f8:	681b      	ldr	r3, [r3, #0]
  4075fa:	4a10      	ldr	r2, [pc, #64]	; (40763c <SystemCoreClockUpdate+0x120>)
  4075fc:	fba2 2303 	umull	r2, r3, r2, r3
  407600:	085b      	lsrs	r3, r3, #1
  407602:	4a0b      	ldr	r2, [pc, #44]	; (407630 <SystemCoreClockUpdate+0x114>)
  407604:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  407606:	e00a      	b.n	40761e <SystemCoreClockUpdate+0x102>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  407608:	4b07      	ldr	r3, [pc, #28]	; (407628 <SystemCoreClockUpdate+0x10c>)
  40760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40760c:	091b      	lsrs	r3, r3, #4
  40760e:	f003 0307 	and.w	r3, r3, #7
  407612:	4a07      	ldr	r2, [pc, #28]	; (407630 <SystemCoreClockUpdate+0x114>)
  407614:	6812      	ldr	r2, [r2, #0]
  407616:	fa22 f303 	lsr.w	r3, r2, r3
  40761a:	4a05      	ldr	r2, [pc, #20]	; (407630 <SystemCoreClockUpdate+0x114>)
  40761c:	6013      	str	r3, [r2, #0]
}
  40761e:	bf00      	nop
  407620:	46bd      	mov	sp, r7
  407622:	f85d 7b04 	ldr.w	r7, [sp], #4
  407626:	4770      	bx	lr
  407628:	400e0400 	.word	0x400e0400
  40762c:	400e1410 	.word	0x400e1410
  407630:	200024e8 	.word	0x200024e8
  407634:	00b71b00 	.word	0x00b71b00
  407638:	007a1200 	.word	0x007a1200
  40763c:	aaaaaaab 	.word	0xaaaaaaab

00407640 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
  407640:	b480      	push	{r7}
  407642:	b083      	sub	sp, #12
  407644:	af00      	add	r7, sp, #0
  407646:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  407648:	687b      	ldr	r3, [r7, #4]
  40764a:	4a19      	ldr	r2, [pc, #100]	; (4076b0 <system_init_flash+0x70>)
  40764c:	4293      	cmp	r3, r2
  40764e:	d804      	bhi.n	40765a <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  407650:	4b18      	ldr	r3, [pc, #96]	; (4076b4 <system_init_flash+0x74>)
  407652:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  407656:	601a      	str	r2, [r3, #0]
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
	}
}
  407658:	e023      	b.n	4076a2 <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  40765a:	687b      	ldr	r3, [r7, #4]
  40765c:	4a16      	ldr	r2, [pc, #88]	; (4076b8 <system_init_flash+0x78>)
  40765e:	4293      	cmp	r3, r2
  407660:	d803      	bhi.n	40766a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  407662:	4b14      	ldr	r3, [pc, #80]	; (4076b4 <system_init_flash+0x74>)
  407664:	4a15      	ldr	r2, [pc, #84]	; (4076bc <system_init_flash+0x7c>)
  407666:	601a      	str	r2, [r3, #0]
}
  407668:	e01b      	b.n	4076a2 <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  40766a:	687b      	ldr	r3, [r7, #4]
  40766c:	4a14      	ldr	r2, [pc, #80]	; (4076c0 <system_init_flash+0x80>)
  40766e:	4293      	cmp	r3, r2
  407670:	d803      	bhi.n	40767a <system_init_flash+0x3a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  407672:	4b10      	ldr	r3, [pc, #64]	; (4076b4 <system_init_flash+0x74>)
  407674:	4a13      	ldr	r2, [pc, #76]	; (4076c4 <system_init_flash+0x84>)
  407676:	601a      	str	r2, [r3, #0]
}
  407678:	e013      	b.n	4076a2 <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
  40767a:	687b      	ldr	r3, [r7, #4]
  40767c:	4a12      	ldr	r2, [pc, #72]	; (4076c8 <system_init_flash+0x88>)
  40767e:	4293      	cmp	r3, r2
  407680:	d803      	bhi.n	40768a <system_init_flash+0x4a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  407682:	4b0c      	ldr	r3, [pc, #48]	; (4076b4 <system_init_flash+0x74>)
  407684:	4a11      	ldr	r2, [pc, #68]	; (4076cc <system_init_flash+0x8c>)
  407686:	601a      	str	r2, [r3, #0]
}
  407688:	e00b      	b.n	4076a2 <system_init_flash+0x62>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
  40768a:	687b      	ldr	r3, [r7, #4]
  40768c:	4a10      	ldr	r2, [pc, #64]	; (4076d0 <system_init_flash+0x90>)
  40768e:	4293      	cmp	r3, r2
  407690:	d804      	bhi.n	40769c <system_init_flash+0x5c>
		EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  407692:	4b08      	ldr	r3, [pc, #32]	; (4076b4 <system_init_flash+0x74>)
  407694:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  407698:	601a      	str	r2, [r3, #0]
}
  40769a:	e002      	b.n	4076a2 <system_init_flash+0x62>
		EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40769c:	4b05      	ldr	r3, [pc, #20]	; (4076b4 <system_init_flash+0x74>)
  40769e:	4a0d      	ldr	r2, [pc, #52]	; (4076d4 <system_init_flash+0x94>)
  4076a0:	601a      	str	r2, [r3, #0]
}
  4076a2:	bf00      	nop
  4076a4:	370c      	adds	r7, #12
  4076a6:	46bd      	mov	sp, r7
  4076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4076ac:	4770      	bx	lr
  4076ae:	bf00      	nop
  4076b0:	01312cff 	.word	0x01312cff
  4076b4:	400e0a00 	.word	0x400e0a00
  4076b8:	026259ff 	.word	0x026259ff
  4076bc:	04000100 	.word	0x04000100
  4076c0:	039386ff 	.word	0x039386ff
  4076c4:	04000200 	.word	0x04000200
  4076c8:	04c4b3ff 	.word	0x04c4b3ff
  4076cc:	04000300 	.word	0x04000300
  4076d0:	05f5e0ff 	.word	0x05f5e0ff
  4076d4:	04000500 	.word	0x04000500

004076d8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4076d8:	b480      	push	{r7}
  4076da:	b085      	sub	sp, #20
  4076dc:	af00      	add	r7, sp, #0
  4076de:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4076e0:	4b10      	ldr	r3, [pc, #64]	; (407724 <_sbrk+0x4c>)
  4076e2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4076e4:	4b10      	ldr	r3, [pc, #64]	; (407728 <_sbrk+0x50>)
  4076e6:	681b      	ldr	r3, [r3, #0]
  4076e8:	2b00      	cmp	r3, #0
  4076ea:	d102      	bne.n	4076f2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4076ec:	4b0e      	ldr	r3, [pc, #56]	; (407728 <_sbrk+0x50>)
  4076ee:	4a0f      	ldr	r2, [pc, #60]	; (40772c <_sbrk+0x54>)
  4076f0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4076f2:	4b0d      	ldr	r3, [pc, #52]	; (407728 <_sbrk+0x50>)
  4076f4:	681b      	ldr	r3, [r3, #0]
  4076f6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4076f8:	68ba      	ldr	r2, [r7, #8]
  4076fa:	687b      	ldr	r3, [r7, #4]
  4076fc:	441a      	add	r2, r3
  4076fe:	68fb      	ldr	r3, [r7, #12]
  407700:	429a      	cmp	r2, r3
  407702:	dd02      	ble.n	40770a <_sbrk+0x32>
		return (caddr_t) -1;	
  407704:	f04f 33ff 	mov.w	r3, #4294967295
  407708:	e006      	b.n	407718 <_sbrk+0x40>
	}

	heap += incr;
  40770a:	4b07      	ldr	r3, [pc, #28]	; (407728 <_sbrk+0x50>)
  40770c:	681a      	ldr	r2, [r3, #0]
  40770e:	687b      	ldr	r3, [r7, #4]
  407710:	4413      	add	r3, r2
  407712:	4a05      	ldr	r2, [pc, #20]	; (407728 <_sbrk+0x50>)
  407714:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  407716:	68bb      	ldr	r3, [r7, #8]
}
  407718:	4618      	mov	r0, r3
  40771a:	3714      	adds	r7, #20
  40771c:	46bd      	mov	sp, r7
  40771e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407722:	4770      	bx	lr
  407724:	20027ffc 	.word	0x20027ffc
  407728:	2000444c 	.word	0x2000444c
  40772c:	200076c0 	.word	0x200076c0

00407730 <__aeabi_drsub>:
  407730:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407734:	e002      	b.n	40773c <__adddf3>
  407736:	bf00      	nop

00407738 <__aeabi_dsub>:
  407738:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040773c <__adddf3>:
  40773c:	b530      	push	{r4, r5, lr}
  40773e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407742:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407746:	ea94 0f05 	teq	r4, r5
  40774a:	bf08      	it	eq
  40774c:	ea90 0f02 	teqeq	r0, r2
  407750:	bf1f      	itttt	ne
  407752:	ea54 0c00 	orrsne.w	ip, r4, r0
  407756:	ea55 0c02 	orrsne.w	ip, r5, r2
  40775a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40775e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407762:	f000 80e2 	beq.w	40792a <__adddf3+0x1ee>
  407766:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40776a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40776e:	bfb8      	it	lt
  407770:	426d      	neglt	r5, r5
  407772:	dd0c      	ble.n	40778e <__adddf3+0x52>
  407774:	442c      	add	r4, r5
  407776:	ea80 0202 	eor.w	r2, r0, r2
  40777a:	ea81 0303 	eor.w	r3, r1, r3
  40777e:	ea82 0000 	eor.w	r0, r2, r0
  407782:	ea83 0101 	eor.w	r1, r3, r1
  407786:	ea80 0202 	eor.w	r2, r0, r2
  40778a:	ea81 0303 	eor.w	r3, r1, r3
  40778e:	2d36      	cmp	r5, #54	; 0x36
  407790:	bf88      	it	hi
  407792:	bd30      	pophi	{r4, r5, pc}
  407794:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407798:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40779c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4077a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4077a4:	d002      	beq.n	4077ac <__adddf3+0x70>
  4077a6:	4240      	negs	r0, r0
  4077a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4077ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4077b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4077b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4077b8:	d002      	beq.n	4077c0 <__adddf3+0x84>
  4077ba:	4252      	negs	r2, r2
  4077bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4077c0:	ea94 0f05 	teq	r4, r5
  4077c4:	f000 80a7 	beq.w	407916 <__adddf3+0x1da>
  4077c8:	f1a4 0401 	sub.w	r4, r4, #1
  4077cc:	f1d5 0e20 	rsbs	lr, r5, #32
  4077d0:	db0d      	blt.n	4077ee <__adddf3+0xb2>
  4077d2:	fa02 fc0e 	lsl.w	ip, r2, lr
  4077d6:	fa22 f205 	lsr.w	r2, r2, r5
  4077da:	1880      	adds	r0, r0, r2
  4077dc:	f141 0100 	adc.w	r1, r1, #0
  4077e0:	fa03 f20e 	lsl.w	r2, r3, lr
  4077e4:	1880      	adds	r0, r0, r2
  4077e6:	fa43 f305 	asr.w	r3, r3, r5
  4077ea:	4159      	adcs	r1, r3
  4077ec:	e00e      	b.n	40780c <__adddf3+0xd0>
  4077ee:	f1a5 0520 	sub.w	r5, r5, #32
  4077f2:	f10e 0e20 	add.w	lr, lr, #32
  4077f6:	2a01      	cmp	r2, #1
  4077f8:	fa03 fc0e 	lsl.w	ip, r3, lr
  4077fc:	bf28      	it	cs
  4077fe:	f04c 0c02 	orrcs.w	ip, ip, #2
  407802:	fa43 f305 	asr.w	r3, r3, r5
  407806:	18c0      	adds	r0, r0, r3
  407808:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40780c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407810:	d507      	bpl.n	407822 <__adddf3+0xe6>
  407812:	f04f 0e00 	mov.w	lr, #0
  407816:	f1dc 0c00 	rsbs	ip, ip, #0
  40781a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40781e:	eb6e 0101 	sbc.w	r1, lr, r1
  407822:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407826:	d31b      	bcc.n	407860 <__adddf3+0x124>
  407828:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40782c:	d30c      	bcc.n	407848 <__adddf3+0x10c>
  40782e:	0849      	lsrs	r1, r1, #1
  407830:	ea5f 0030 	movs.w	r0, r0, rrx
  407834:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407838:	f104 0401 	add.w	r4, r4, #1
  40783c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407840:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407844:	f080 809a 	bcs.w	40797c <__adddf3+0x240>
  407848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40784c:	bf08      	it	eq
  40784e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407852:	f150 0000 	adcs.w	r0, r0, #0
  407856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40785a:	ea41 0105 	orr.w	r1, r1, r5
  40785e:	bd30      	pop	{r4, r5, pc}
  407860:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407864:	4140      	adcs	r0, r0
  407866:	eb41 0101 	adc.w	r1, r1, r1
  40786a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40786e:	f1a4 0401 	sub.w	r4, r4, #1
  407872:	d1e9      	bne.n	407848 <__adddf3+0x10c>
  407874:	f091 0f00 	teq	r1, #0
  407878:	bf04      	itt	eq
  40787a:	4601      	moveq	r1, r0
  40787c:	2000      	moveq	r0, #0
  40787e:	fab1 f381 	clz	r3, r1
  407882:	bf08      	it	eq
  407884:	3320      	addeq	r3, #32
  407886:	f1a3 030b 	sub.w	r3, r3, #11
  40788a:	f1b3 0220 	subs.w	r2, r3, #32
  40788e:	da0c      	bge.n	4078aa <__adddf3+0x16e>
  407890:	320c      	adds	r2, #12
  407892:	dd08      	ble.n	4078a6 <__adddf3+0x16a>
  407894:	f102 0c14 	add.w	ip, r2, #20
  407898:	f1c2 020c 	rsb	r2, r2, #12
  40789c:	fa01 f00c 	lsl.w	r0, r1, ip
  4078a0:	fa21 f102 	lsr.w	r1, r1, r2
  4078a4:	e00c      	b.n	4078c0 <__adddf3+0x184>
  4078a6:	f102 0214 	add.w	r2, r2, #20
  4078aa:	bfd8      	it	le
  4078ac:	f1c2 0c20 	rsble	ip, r2, #32
  4078b0:	fa01 f102 	lsl.w	r1, r1, r2
  4078b4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4078b8:	bfdc      	itt	le
  4078ba:	ea41 010c 	orrle.w	r1, r1, ip
  4078be:	4090      	lslle	r0, r2
  4078c0:	1ae4      	subs	r4, r4, r3
  4078c2:	bfa2      	ittt	ge
  4078c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4078c8:	4329      	orrge	r1, r5
  4078ca:	bd30      	popge	{r4, r5, pc}
  4078cc:	ea6f 0404 	mvn.w	r4, r4
  4078d0:	3c1f      	subs	r4, #31
  4078d2:	da1c      	bge.n	40790e <__adddf3+0x1d2>
  4078d4:	340c      	adds	r4, #12
  4078d6:	dc0e      	bgt.n	4078f6 <__adddf3+0x1ba>
  4078d8:	f104 0414 	add.w	r4, r4, #20
  4078dc:	f1c4 0220 	rsb	r2, r4, #32
  4078e0:	fa20 f004 	lsr.w	r0, r0, r4
  4078e4:	fa01 f302 	lsl.w	r3, r1, r2
  4078e8:	ea40 0003 	orr.w	r0, r0, r3
  4078ec:	fa21 f304 	lsr.w	r3, r1, r4
  4078f0:	ea45 0103 	orr.w	r1, r5, r3
  4078f4:	bd30      	pop	{r4, r5, pc}
  4078f6:	f1c4 040c 	rsb	r4, r4, #12
  4078fa:	f1c4 0220 	rsb	r2, r4, #32
  4078fe:	fa20 f002 	lsr.w	r0, r0, r2
  407902:	fa01 f304 	lsl.w	r3, r1, r4
  407906:	ea40 0003 	orr.w	r0, r0, r3
  40790a:	4629      	mov	r1, r5
  40790c:	bd30      	pop	{r4, r5, pc}
  40790e:	fa21 f004 	lsr.w	r0, r1, r4
  407912:	4629      	mov	r1, r5
  407914:	bd30      	pop	{r4, r5, pc}
  407916:	f094 0f00 	teq	r4, #0
  40791a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40791e:	bf06      	itte	eq
  407920:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407924:	3401      	addeq	r4, #1
  407926:	3d01      	subne	r5, #1
  407928:	e74e      	b.n	4077c8 <__adddf3+0x8c>
  40792a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40792e:	bf18      	it	ne
  407930:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407934:	d029      	beq.n	40798a <__adddf3+0x24e>
  407936:	ea94 0f05 	teq	r4, r5
  40793a:	bf08      	it	eq
  40793c:	ea90 0f02 	teqeq	r0, r2
  407940:	d005      	beq.n	40794e <__adddf3+0x212>
  407942:	ea54 0c00 	orrs.w	ip, r4, r0
  407946:	bf04      	itt	eq
  407948:	4619      	moveq	r1, r3
  40794a:	4610      	moveq	r0, r2
  40794c:	bd30      	pop	{r4, r5, pc}
  40794e:	ea91 0f03 	teq	r1, r3
  407952:	bf1e      	ittt	ne
  407954:	2100      	movne	r1, #0
  407956:	2000      	movne	r0, #0
  407958:	bd30      	popne	{r4, r5, pc}
  40795a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40795e:	d105      	bne.n	40796c <__adddf3+0x230>
  407960:	0040      	lsls	r0, r0, #1
  407962:	4149      	adcs	r1, r1
  407964:	bf28      	it	cs
  407966:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40796a:	bd30      	pop	{r4, r5, pc}
  40796c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407970:	bf3c      	itt	cc
  407972:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407976:	bd30      	popcc	{r4, r5, pc}
  407978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40797c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407980:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407984:	f04f 0000 	mov.w	r0, #0
  407988:	bd30      	pop	{r4, r5, pc}
  40798a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40798e:	bf1a      	itte	ne
  407990:	4619      	movne	r1, r3
  407992:	4610      	movne	r0, r2
  407994:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407998:	bf1c      	itt	ne
  40799a:	460b      	movne	r3, r1
  40799c:	4602      	movne	r2, r0
  40799e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4079a2:	bf06      	itte	eq
  4079a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4079a8:	ea91 0f03 	teqeq	r1, r3
  4079ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4079b0:	bd30      	pop	{r4, r5, pc}
  4079b2:	bf00      	nop

004079b4 <__aeabi_ui2d>:
  4079b4:	f090 0f00 	teq	r0, #0
  4079b8:	bf04      	itt	eq
  4079ba:	2100      	moveq	r1, #0
  4079bc:	4770      	bxeq	lr
  4079be:	b530      	push	{r4, r5, lr}
  4079c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4079c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4079c8:	f04f 0500 	mov.w	r5, #0
  4079cc:	f04f 0100 	mov.w	r1, #0
  4079d0:	e750      	b.n	407874 <__adddf3+0x138>
  4079d2:	bf00      	nop

004079d4 <__aeabi_i2d>:
  4079d4:	f090 0f00 	teq	r0, #0
  4079d8:	bf04      	itt	eq
  4079da:	2100      	moveq	r1, #0
  4079dc:	4770      	bxeq	lr
  4079de:	b530      	push	{r4, r5, lr}
  4079e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4079e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4079e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4079ec:	bf48      	it	mi
  4079ee:	4240      	negmi	r0, r0
  4079f0:	f04f 0100 	mov.w	r1, #0
  4079f4:	e73e      	b.n	407874 <__adddf3+0x138>
  4079f6:	bf00      	nop

004079f8 <__aeabi_f2d>:
  4079f8:	0042      	lsls	r2, r0, #1
  4079fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4079fe:	ea4f 0131 	mov.w	r1, r1, rrx
  407a02:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407a06:	bf1f      	itttt	ne
  407a08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407a0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407a10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407a14:	4770      	bxne	lr
  407a16:	f092 0f00 	teq	r2, #0
  407a1a:	bf14      	ite	ne
  407a1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407a20:	4770      	bxeq	lr
  407a22:	b530      	push	{r4, r5, lr}
  407a24:	f44f 7460 	mov.w	r4, #896	; 0x380
  407a28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407a2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407a30:	e720      	b.n	407874 <__adddf3+0x138>
  407a32:	bf00      	nop

00407a34 <__aeabi_ul2d>:
  407a34:	ea50 0201 	orrs.w	r2, r0, r1
  407a38:	bf08      	it	eq
  407a3a:	4770      	bxeq	lr
  407a3c:	b530      	push	{r4, r5, lr}
  407a3e:	f04f 0500 	mov.w	r5, #0
  407a42:	e00a      	b.n	407a5a <__aeabi_l2d+0x16>

00407a44 <__aeabi_l2d>:
  407a44:	ea50 0201 	orrs.w	r2, r0, r1
  407a48:	bf08      	it	eq
  407a4a:	4770      	bxeq	lr
  407a4c:	b530      	push	{r4, r5, lr}
  407a4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407a52:	d502      	bpl.n	407a5a <__aeabi_l2d+0x16>
  407a54:	4240      	negs	r0, r0
  407a56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407a5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407a5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407a62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407a66:	f43f aedc 	beq.w	407822 <__adddf3+0xe6>
  407a6a:	f04f 0203 	mov.w	r2, #3
  407a6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407a72:	bf18      	it	ne
  407a74:	3203      	addne	r2, #3
  407a76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407a7a:	bf18      	it	ne
  407a7c:	3203      	addne	r2, #3
  407a7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407a82:	f1c2 0320 	rsb	r3, r2, #32
  407a86:	fa00 fc03 	lsl.w	ip, r0, r3
  407a8a:	fa20 f002 	lsr.w	r0, r0, r2
  407a8e:	fa01 fe03 	lsl.w	lr, r1, r3
  407a92:	ea40 000e 	orr.w	r0, r0, lr
  407a96:	fa21 f102 	lsr.w	r1, r1, r2
  407a9a:	4414      	add	r4, r2
  407a9c:	e6c1      	b.n	407822 <__adddf3+0xe6>
  407a9e:	bf00      	nop

00407aa0 <__aeabi_dmul>:
  407aa0:	b570      	push	{r4, r5, r6, lr}
  407aa2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407aa6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407aaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407aae:	bf1d      	ittte	ne
  407ab0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407ab4:	ea94 0f0c 	teqne	r4, ip
  407ab8:	ea95 0f0c 	teqne	r5, ip
  407abc:	f000 f8de 	bleq	407c7c <__aeabi_dmul+0x1dc>
  407ac0:	442c      	add	r4, r5
  407ac2:	ea81 0603 	eor.w	r6, r1, r3
  407ac6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407aca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407ace:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407ad2:	bf18      	it	ne
  407ad4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407adc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407ae0:	d038      	beq.n	407b54 <__aeabi_dmul+0xb4>
  407ae2:	fba0 ce02 	umull	ip, lr, r0, r2
  407ae6:	f04f 0500 	mov.w	r5, #0
  407aea:	fbe1 e502 	umlal	lr, r5, r1, r2
  407aee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407af2:	fbe0 e503 	umlal	lr, r5, r0, r3
  407af6:	f04f 0600 	mov.w	r6, #0
  407afa:	fbe1 5603 	umlal	r5, r6, r1, r3
  407afe:	f09c 0f00 	teq	ip, #0
  407b02:	bf18      	it	ne
  407b04:	f04e 0e01 	orrne.w	lr, lr, #1
  407b08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407b0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407b10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407b14:	d204      	bcs.n	407b20 <__aeabi_dmul+0x80>
  407b16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407b1a:	416d      	adcs	r5, r5
  407b1c:	eb46 0606 	adc.w	r6, r6, r6
  407b20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407b24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407b28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407b2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407b30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407b34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407b38:	bf88      	it	hi
  407b3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407b3e:	d81e      	bhi.n	407b7e <__aeabi_dmul+0xde>
  407b40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407b44:	bf08      	it	eq
  407b46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407b4a:	f150 0000 	adcs.w	r0, r0, #0
  407b4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407b52:	bd70      	pop	{r4, r5, r6, pc}
  407b54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407b58:	ea46 0101 	orr.w	r1, r6, r1
  407b5c:	ea40 0002 	orr.w	r0, r0, r2
  407b60:	ea81 0103 	eor.w	r1, r1, r3
  407b64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407b68:	bfc2      	ittt	gt
  407b6a:	ebd4 050c 	rsbsgt	r5, r4, ip
  407b6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407b72:	bd70      	popgt	{r4, r5, r6, pc}
  407b74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407b78:	f04f 0e00 	mov.w	lr, #0
  407b7c:	3c01      	subs	r4, #1
  407b7e:	f300 80ab 	bgt.w	407cd8 <__aeabi_dmul+0x238>
  407b82:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407b86:	bfde      	ittt	le
  407b88:	2000      	movle	r0, #0
  407b8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407b8e:	bd70      	pople	{r4, r5, r6, pc}
  407b90:	f1c4 0400 	rsb	r4, r4, #0
  407b94:	3c20      	subs	r4, #32
  407b96:	da35      	bge.n	407c04 <__aeabi_dmul+0x164>
  407b98:	340c      	adds	r4, #12
  407b9a:	dc1b      	bgt.n	407bd4 <__aeabi_dmul+0x134>
  407b9c:	f104 0414 	add.w	r4, r4, #20
  407ba0:	f1c4 0520 	rsb	r5, r4, #32
  407ba4:	fa00 f305 	lsl.w	r3, r0, r5
  407ba8:	fa20 f004 	lsr.w	r0, r0, r4
  407bac:	fa01 f205 	lsl.w	r2, r1, r5
  407bb0:	ea40 0002 	orr.w	r0, r0, r2
  407bb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407bb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407bbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407bc0:	fa21 f604 	lsr.w	r6, r1, r4
  407bc4:	eb42 0106 	adc.w	r1, r2, r6
  407bc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407bcc:	bf08      	it	eq
  407bce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407bd2:	bd70      	pop	{r4, r5, r6, pc}
  407bd4:	f1c4 040c 	rsb	r4, r4, #12
  407bd8:	f1c4 0520 	rsb	r5, r4, #32
  407bdc:	fa00 f304 	lsl.w	r3, r0, r4
  407be0:	fa20 f005 	lsr.w	r0, r0, r5
  407be4:	fa01 f204 	lsl.w	r2, r1, r4
  407be8:	ea40 0002 	orr.w	r0, r0, r2
  407bec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407bf0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407bf4:	f141 0100 	adc.w	r1, r1, #0
  407bf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407bfc:	bf08      	it	eq
  407bfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407c02:	bd70      	pop	{r4, r5, r6, pc}
  407c04:	f1c4 0520 	rsb	r5, r4, #32
  407c08:	fa00 f205 	lsl.w	r2, r0, r5
  407c0c:	ea4e 0e02 	orr.w	lr, lr, r2
  407c10:	fa20 f304 	lsr.w	r3, r0, r4
  407c14:	fa01 f205 	lsl.w	r2, r1, r5
  407c18:	ea43 0302 	orr.w	r3, r3, r2
  407c1c:	fa21 f004 	lsr.w	r0, r1, r4
  407c20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407c24:	fa21 f204 	lsr.w	r2, r1, r4
  407c28:	ea20 0002 	bic.w	r0, r0, r2
  407c2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407c30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407c34:	bf08      	it	eq
  407c36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407c3a:	bd70      	pop	{r4, r5, r6, pc}
  407c3c:	f094 0f00 	teq	r4, #0
  407c40:	d10f      	bne.n	407c62 <__aeabi_dmul+0x1c2>
  407c42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407c46:	0040      	lsls	r0, r0, #1
  407c48:	eb41 0101 	adc.w	r1, r1, r1
  407c4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407c50:	bf08      	it	eq
  407c52:	3c01      	subeq	r4, #1
  407c54:	d0f7      	beq.n	407c46 <__aeabi_dmul+0x1a6>
  407c56:	ea41 0106 	orr.w	r1, r1, r6
  407c5a:	f095 0f00 	teq	r5, #0
  407c5e:	bf18      	it	ne
  407c60:	4770      	bxne	lr
  407c62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407c66:	0052      	lsls	r2, r2, #1
  407c68:	eb43 0303 	adc.w	r3, r3, r3
  407c6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407c70:	bf08      	it	eq
  407c72:	3d01      	subeq	r5, #1
  407c74:	d0f7      	beq.n	407c66 <__aeabi_dmul+0x1c6>
  407c76:	ea43 0306 	orr.w	r3, r3, r6
  407c7a:	4770      	bx	lr
  407c7c:	ea94 0f0c 	teq	r4, ip
  407c80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407c84:	bf18      	it	ne
  407c86:	ea95 0f0c 	teqne	r5, ip
  407c8a:	d00c      	beq.n	407ca6 <__aeabi_dmul+0x206>
  407c8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407c90:	bf18      	it	ne
  407c92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407c96:	d1d1      	bne.n	407c3c <__aeabi_dmul+0x19c>
  407c98:	ea81 0103 	eor.w	r1, r1, r3
  407c9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407ca0:	f04f 0000 	mov.w	r0, #0
  407ca4:	bd70      	pop	{r4, r5, r6, pc}
  407ca6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407caa:	bf06      	itte	eq
  407cac:	4610      	moveq	r0, r2
  407cae:	4619      	moveq	r1, r3
  407cb0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407cb4:	d019      	beq.n	407cea <__aeabi_dmul+0x24a>
  407cb6:	ea94 0f0c 	teq	r4, ip
  407cba:	d102      	bne.n	407cc2 <__aeabi_dmul+0x222>
  407cbc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407cc0:	d113      	bne.n	407cea <__aeabi_dmul+0x24a>
  407cc2:	ea95 0f0c 	teq	r5, ip
  407cc6:	d105      	bne.n	407cd4 <__aeabi_dmul+0x234>
  407cc8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407ccc:	bf1c      	itt	ne
  407cce:	4610      	movne	r0, r2
  407cd0:	4619      	movne	r1, r3
  407cd2:	d10a      	bne.n	407cea <__aeabi_dmul+0x24a>
  407cd4:	ea81 0103 	eor.w	r1, r1, r3
  407cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407cdc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407ce0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407ce4:	f04f 0000 	mov.w	r0, #0
  407ce8:	bd70      	pop	{r4, r5, r6, pc}
  407cea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407cee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407cf2:	bd70      	pop	{r4, r5, r6, pc}

00407cf4 <__aeabi_ddiv>:
  407cf4:	b570      	push	{r4, r5, r6, lr}
  407cf6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407cfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407cfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407d02:	bf1d      	ittte	ne
  407d04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407d08:	ea94 0f0c 	teqne	r4, ip
  407d0c:	ea95 0f0c 	teqne	r5, ip
  407d10:	f000 f8a7 	bleq	407e62 <__aeabi_ddiv+0x16e>
  407d14:	eba4 0405 	sub.w	r4, r4, r5
  407d18:	ea81 0e03 	eor.w	lr, r1, r3
  407d1c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407d20:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407d24:	f000 8088 	beq.w	407e38 <__aeabi_ddiv+0x144>
  407d28:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407d2c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407d30:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407d34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407d38:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407d3c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407d40:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407d44:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407d48:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407d4c:	429d      	cmp	r5, r3
  407d4e:	bf08      	it	eq
  407d50:	4296      	cmpeq	r6, r2
  407d52:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407d56:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407d5a:	d202      	bcs.n	407d62 <__aeabi_ddiv+0x6e>
  407d5c:	085b      	lsrs	r3, r3, #1
  407d5e:	ea4f 0232 	mov.w	r2, r2, rrx
  407d62:	1ab6      	subs	r6, r6, r2
  407d64:	eb65 0503 	sbc.w	r5, r5, r3
  407d68:	085b      	lsrs	r3, r3, #1
  407d6a:	ea4f 0232 	mov.w	r2, r2, rrx
  407d6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407d72:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407d76:	ebb6 0e02 	subs.w	lr, r6, r2
  407d7a:	eb75 0e03 	sbcs.w	lr, r5, r3
  407d7e:	bf22      	ittt	cs
  407d80:	1ab6      	subcs	r6, r6, r2
  407d82:	4675      	movcs	r5, lr
  407d84:	ea40 000c 	orrcs.w	r0, r0, ip
  407d88:	085b      	lsrs	r3, r3, #1
  407d8a:	ea4f 0232 	mov.w	r2, r2, rrx
  407d8e:	ebb6 0e02 	subs.w	lr, r6, r2
  407d92:	eb75 0e03 	sbcs.w	lr, r5, r3
  407d96:	bf22      	ittt	cs
  407d98:	1ab6      	subcs	r6, r6, r2
  407d9a:	4675      	movcs	r5, lr
  407d9c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407da0:	085b      	lsrs	r3, r3, #1
  407da2:	ea4f 0232 	mov.w	r2, r2, rrx
  407da6:	ebb6 0e02 	subs.w	lr, r6, r2
  407daa:	eb75 0e03 	sbcs.w	lr, r5, r3
  407dae:	bf22      	ittt	cs
  407db0:	1ab6      	subcs	r6, r6, r2
  407db2:	4675      	movcs	r5, lr
  407db4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407db8:	085b      	lsrs	r3, r3, #1
  407dba:	ea4f 0232 	mov.w	r2, r2, rrx
  407dbe:	ebb6 0e02 	subs.w	lr, r6, r2
  407dc2:	eb75 0e03 	sbcs.w	lr, r5, r3
  407dc6:	bf22      	ittt	cs
  407dc8:	1ab6      	subcs	r6, r6, r2
  407dca:	4675      	movcs	r5, lr
  407dcc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407dd0:	ea55 0e06 	orrs.w	lr, r5, r6
  407dd4:	d018      	beq.n	407e08 <__aeabi_ddiv+0x114>
  407dd6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407dda:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407dde:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407de2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407de6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407dea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407dee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407df2:	d1c0      	bne.n	407d76 <__aeabi_ddiv+0x82>
  407df4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407df8:	d10b      	bne.n	407e12 <__aeabi_ddiv+0x11e>
  407dfa:	ea41 0100 	orr.w	r1, r1, r0
  407dfe:	f04f 0000 	mov.w	r0, #0
  407e02:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407e06:	e7b6      	b.n	407d76 <__aeabi_ddiv+0x82>
  407e08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407e0c:	bf04      	itt	eq
  407e0e:	4301      	orreq	r1, r0
  407e10:	2000      	moveq	r0, #0
  407e12:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407e16:	bf88      	it	hi
  407e18:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407e1c:	f63f aeaf 	bhi.w	407b7e <__aeabi_dmul+0xde>
  407e20:	ebb5 0c03 	subs.w	ip, r5, r3
  407e24:	bf04      	itt	eq
  407e26:	ebb6 0c02 	subseq.w	ip, r6, r2
  407e2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407e2e:	f150 0000 	adcs.w	r0, r0, #0
  407e32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407e36:	bd70      	pop	{r4, r5, r6, pc}
  407e38:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407e3c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407e40:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407e44:	bfc2      	ittt	gt
  407e46:	ebd4 050c 	rsbsgt	r5, r4, ip
  407e4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407e4e:	bd70      	popgt	{r4, r5, r6, pc}
  407e50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407e54:	f04f 0e00 	mov.w	lr, #0
  407e58:	3c01      	subs	r4, #1
  407e5a:	e690      	b.n	407b7e <__aeabi_dmul+0xde>
  407e5c:	ea45 0e06 	orr.w	lr, r5, r6
  407e60:	e68d      	b.n	407b7e <__aeabi_dmul+0xde>
  407e62:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407e66:	ea94 0f0c 	teq	r4, ip
  407e6a:	bf08      	it	eq
  407e6c:	ea95 0f0c 	teqeq	r5, ip
  407e70:	f43f af3b 	beq.w	407cea <__aeabi_dmul+0x24a>
  407e74:	ea94 0f0c 	teq	r4, ip
  407e78:	d10a      	bne.n	407e90 <__aeabi_ddiv+0x19c>
  407e7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407e7e:	f47f af34 	bne.w	407cea <__aeabi_dmul+0x24a>
  407e82:	ea95 0f0c 	teq	r5, ip
  407e86:	f47f af25 	bne.w	407cd4 <__aeabi_dmul+0x234>
  407e8a:	4610      	mov	r0, r2
  407e8c:	4619      	mov	r1, r3
  407e8e:	e72c      	b.n	407cea <__aeabi_dmul+0x24a>
  407e90:	ea95 0f0c 	teq	r5, ip
  407e94:	d106      	bne.n	407ea4 <__aeabi_ddiv+0x1b0>
  407e96:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407e9a:	f43f aefd 	beq.w	407c98 <__aeabi_dmul+0x1f8>
  407e9e:	4610      	mov	r0, r2
  407ea0:	4619      	mov	r1, r3
  407ea2:	e722      	b.n	407cea <__aeabi_dmul+0x24a>
  407ea4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407ea8:	bf18      	it	ne
  407eaa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407eae:	f47f aec5 	bne.w	407c3c <__aeabi_dmul+0x19c>
  407eb2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407eb6:	f47f af0d 	bne.w	407cd4 <__aeabi_dmul+0x234>
  407eba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407ebe:	f47f aeeb 	bne.w	407c98 <__aeabi_dmul+0x1f8>
  407ec2:	e712      	b.n	407cea <__aeabi_dmul+0x24a>

00407ec4 <__gedf2>:
  407ec4:	f04f 3cff 	mov.w	ip, #4294967295
  407ec8:	e006      	b.n	407ed8 <__cmpdf2+0x4>
  407eca:	bf00      	nop

00407ecc <__ledf2>:
  407ecc:	f04f 0c01 	mov.w	ip, #1
  407ed0:	e002      	b.n	407ed8 <__cmpdf2+0x4>
  407ed2:	bf00      	nop

00407ed4 <__cmpdf2>:
  407ed4:	f04f 0c01 	mov.w	ip, #1
  407ed8:	f84d cd04 	str.w	ip, [sp, #-4]!
  407edc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407ee4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407ee8:	bf18      	it	ne
  407eea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407eee:	d01b      	beq.n	407f28 <__cmpdf2+0x54>
  407ef0:	b001      	add	sp, #4
  407ef2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407ef6:	bf0c      	ite	eq
  407ef8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407efc:	ea91 0f03 	teqne	r1, r3
  407f00:	bf02      	ittt	eq
  407f02:	ea90 0f02 	teqeq	r0, r2
  407f06:	2000      	moveq	r0, #0
  407f08:	4770      	bxeq	lr
  407f0a:	f110 0f00 	cmn.w	r0, #0
  407f0e:	ea91 0f03 	teq	r1, r3
  407f12:	bf58      	it	pl
  407f14:	4299      	cmppl	r1, r3
  407f16:	bf08      	it	eq
  407f18:	4290      	cmpeq	r0, r2
  407f1a:	bf2c      	ite	cs
  407f1c:	17d8      	asrcs	r0, r3, #31
  407f1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407f22:	f040 0001 	orr.w	r0, r0, #1
  407f26:	4770      	bx	lr
  407f28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407f30:	d102      	bne.n	407f38 <__cmpdf2+0x64>
  407f32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407f36:	d107      	bne.n	407f48 <__cmpdf2+0x74>
  407f38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407f3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407f40:	d1d6      	bne.n	407ef0 <__cmpdf2+0x1c>
  407f42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407f46:	d0d3      	beq.n	407ef0 <__cmpdf2+0x1c>
  407f48:	f85d 0b04 	ldr.w	r0, [sp], #4
  407f4c:	4770      	bx	lr
  407f4e:	bf00      	nop

00407f50 <__aeabi_cdrcmple>:
  407f50:	4684      	mov	ip, r0
  407f52:	4610      	mov	r0, r2
  407f54:	4662      	mov	r2, ip
  407f56:	468c      	mov	ip, r1
  407f58:	4619      	mov	r1, r3
  407f5a:	4663      	mov	r3, ip
  407f5c:	e000      	b.n	407f60 <__aeabi_cdcmpeq>
  407f5e:	bf00      	nop

00407f60 <__aeabi_cdcmpeq>:
  407f60:	b501      	push	{r0, lr}
  407f62:	f7ff ffb7 	bl	407ed4 <__cmpdf2>
  407f66:	2800      	cmp	r0, #0
  407f68:	bf48      	it	mi
  407f6a:	f110 0f00 	cmnmi.w	r0, #0
  407f6e:	bd01      	pop	{r0, pc}

00407f70 <__aeabi_dcmpeq>:
  407f70:	f84d ed08 	str.w	lr, [sp, #-8]!
  407f74:	f7ff fff4 	bl	407f60 <__aeabi_cdcmpeq>
  407f78:	bf0c      	ite	eq
  407f7a:	2001      	moveq	r0, #1
  407f7c:	2000      	movne	r0, #0
  407f7e:	f85d fb08 	ldr.w	pc, [sp], #8
  407f82:	bf00      	nop

00407f84 <__aeabi_dcmplt>:
  407f84:	f84d ed08 	str.w	lr, [sp, #-8]!
  407f88:	f7ff ffea 	bl	407f60 <__aeabi_cdcmpeq>
  407f8c:	bf34      	ite	cc
  407f8e:	2001      	movcc	r0, #1
  407f90:	2000      	movcs	r0, #0
  407f92:	f85d fb08 	ldr.w	pc, [sp], #8
  407f96:	bf00      	nop

00407f98 <__aeabi_dcmple>:
  407f98:	f84d ed08 	str.w	lr, [sp, #-8]!
  407f9c:	f7ff ffe0 	bl	407f60 <__aeabi_cdcmpeq>
  407fa0:	bf94      	ite	ls
  407fa2:	2001      	movls	r0, #1
  407fa4:	2000      	movhi	r0, #0
  407fa6:	f85d fb08 	ldr.w	pc, [sp], #8
  407faa:	bf00      	nop

00407fac <__aeabi_dcmpge>:
  407fac:	f84d ed08 	str.w	lr, [sp, #-8]!
  407fb0:	f7ff ffce 	bl	407f50 <__aeabi_cdrcmple>
  407fb4:	bf94      	ite	ls
  407fb6:	2001      	movls	r0, #1
  407fb8:	2000      	movhi	r0, #0
  407fba:	f85d fb08 	ldr.w	pc, [sp], #8
  407fbe:	bf00      	nop

00407fc0 <__aeabi_dcmpgt>:
  407fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
  407fc4:	f7ff ffc4 	bl	407f50 <__aeabi_cdrcmple>
  407fc8:	bf34      	ite	cc
  407fca:	2001      	movcc	r0, #1
  407fcc:	2000      	movcs	r0, #0
  407fce:	f85d fb08 	ldr.w	pc, [sp], #8
  407fd2:	bf00      	nop

00407fd4 <__aeabi_dcmpun>:
  407fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407fdc:	d102      	bne.n	407fe4 <__aeabi_dcmpun+0x10>
  407fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407fe2:	d10a      	bne.n	407ffa <__aeabi_dcmpun+0x26>
  407fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407fec:	d102      	bne.n	407ff4 <__aeabi_dcmpun+0x20>
  407fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407ff2:	d102      	bne.n	407ffa <__aeabi_dcmpun+0x26>
  407ff4:	f04f 0000 	mov.w	r0, #0
  407ff8:	4770      	bx	lr
  407ffa:	f04f 0001 	mov.w	r0, #1
  407ffe:	4770      	bx	lr

00408000 <__libc_init_array>:
  408000:	b570      	push	{r4, r5, r6, lr}
  408002:	4e0f      	ldr	r6, [pc, #60]	; (408040 <__libc_init_array+0x40>)
  408004:	4d0f      	ldr	r5, [pc, #60]	; (408044 <__libc_init_array+0x44>)
  408006:	1b76      	subs	r6, r6, r5
  408008:	10b6      	asrs	r6, r6, #2
  40800a:	bf18      	it	ne
  40800c:	2400      	movne	r4, #0
  40800e:	d005      	beq.n	40801c <__libc_init_array+0x1c>
  408010:	3401      	adds	r4, #1
  408012:	f855 3b04 	ldr.w	r3, [r5], #4
  408016:	4798      	blx	r3
  408018:	42a6      	cmp	r6, r4
  40801a:	d1f9      	bne.n	408010 <__libc_init_array+0x10>
  40801c:	4e0a      	ldr	r6, [pc, #40]	; (408048 <__libc_init_array+0x48>)
  40801e:	4d0b      	ldr	r5, [pc, #44]	; (40804c <__libc_init_array+0x4c>)
  408020:	1b76      	subs	r6, r6, r5
  408022:	f004 fc21 	bl	40c868 <_init>
  408026:	10b6      	asrs	r6, r6, #2
  408028:	bf18      	it	ne
  40802a:	2400      	movne	r4, #0
  40802c:	d006      	beq.n	40803c <__libc_init_array+0x3c>
  40802e:	3401      	adds	r4, #1
  408030:	f855 3b04 	ldr.w	r3, [r5], #4
  408034:	4798      	blx	r3
  408036:	42a6      	cmp	r6, r4
  408038:	d1f9      	bne.n	40802e <__libc_init_array+0x2e>
  40803a:	bd70      	pop	{r4, r5, r6, pc}
  40803c:	bd70      	pop	{r4, r5, r6, pc}
  40803e:	bf00      	nop
  408040:	0040c874 	.word	0x0040c874
  408044:	0040c874 	.word	0x0040c874
  408048:	0040c87c 	.word	0x0040c87c
  40804c:	0040c874 	.word	0x0040c874

00408050 <__retarget_lock_acquire_recursive>:
  408050:	4770      	bx	lr
  408052:	bf00      	nop

00408054 <__retarget_lock_release_recursive>:
  408054:	4770      	bx	lr
  408056:	bf00      	nop

00408058 <_malloc_r>:
  408058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40805c:	f101 060b 	add.w	r6, r1, #11
  408060:	2e16      	cmp	r6, #22
  408062:	b083      	sub	sp, #12
  408064:	4605      	mov	r5, r0
  408066:	f240 809e 	bls.w	4081a6 <_malloc_r+0x14e>
  40806a:	f036 0607 	bics.w	r6, r6, #7
  40806e:	f100 80bd 	bmi.w	4081ec <_malloc_r+0x194>
  408072:	42b1      	cmp	r1, r6
  408074:	f200 80ba 	bhi.w	4081ec <_malloc_r+0x194>
  408078:	f000 fc3e 	bl	4088f8 <__malloc_lock>
  40807c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  408080:	f0c0 8293 	bcc.w	4085aa <_malloc_r+0x552>
  408084:	0a73      	lsrs	r3, r6, #9
  408086:	f000 80b8 	beq.w	4081fa <_malloc_r+0x1a2>
  40808a:	2b04      	cmp	r3, #4
  40808c:	f200 8179 	bhi.w	408382 <_malloc_r+0x32a>
  408090:	09b3      	lsrs	r3, r6, #6
  408092:	f103 0039 	add.w	r0, r3, #57	; 0x39
  408096:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40809a:	00c3      	lsls	r3, r0, #3
  40809c:	4fbf      	ldr	r7, [pc, #764]	; (40839c <_malloc_r+0x344>)
  40809e:	443b      	add	r3, r7
  4080a0:	f1a3 0108 	sub.w	r1, r3, #8
  4080a4:	685c      	ldr	r4, [r3, #4]
  4080a6:	42a1      	cmp	r1, r4
  4080a8:	d106      	bne.n	4080b8 <_malloc_r+0x60>
  4080aa:	e00c      	b.n	4080c6 <_malloc_r+0x6e>
  4080ac:	2a00      	cmp	r2, #0
  4080ae:	f280 80aa 	bge.w	408206 <_malloc_r+0x1ae>
  4080b2:	68e4      	ldr	r4, [r4, #12]
  4080b4:	42a1      	cmp	r1, r4
  4080b6:	d006      	beq.n	4080c6 <_malloc_r+0x6e>
  4080b8:	6863      	ldr	r3, [r4, #4]
  4080ba:	f023 0303 	bic.w	r3, r3, #3
  4080be:	1b9a      	subs	r2, r3, r6
  4080c0:	2a0f      	cmp	r2, #15
  4080c2:	ddf3      	ble.n	4080ac <_malloc_r+0x54>
  4080c4:	4670      	mov	r0, lr
  4080c6:	693c      	ldr	r4, [r7, #16]
  4080c8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4083b0 <_malloc_r+0x358>
  4080cc:	4574      	cmp	r4, lr
  4080ce:	f000 81ab 	beq.w	408428 <_malloc_r+0x3d0>
  4080d2:	6863      	ldr	r3, [r4, #4]
  4080d4:	f023 0303 	bic.w	r3, r3, #3
  4080d8:	1b9a      	subs	r2, r3, r6
  4080da:	2a0f      	cmp	r2, #15
  4080dc:	f300 8190 	bgt.w	408400 <_malloc_r+0x3a8>
  4080e0:	2a00      	cmp	r2, #0
  4080e2:	f8c7 e014 	str.w	lr, [r7, #20]
  4080e6:	f8c7 e010 	str.w	lr, [r7, #16]
  4080ea:	f280 809d 	bge.w	408228 <_malloc_r+0x1d0>
  4080ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4080f2:	f080 8161 	bcs.w	4083b8 <_malloc_r+0x360>
  4080f6:	08db      	lsrs	r3, r3, #3
  4080f8:	f103 0c01 	add.w	ip, r3, #1
  4080fc:	1099      	asrs	r1, r3, #2
  4080fe:	687a      	ldr	r2, [r7, #4]
  408100:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  408104:	f8c4 8008 	str.w	r8, [r4, #8]
  408108:	2301      	movs	r3, #1
  40810a:	408b      	lsls	r3, r1
  40810c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  408110:	4313      	orrs	r3, r2
  408112:	3908      	subs	r1, #8
  408114:	60e1      	str	r1, [r4, #12]
  408116:	607b      	str	r3, [r7, #4]
  408118:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40811c:	f8c8 400c 	str.w	r4, [r8, #12]
  408120:	1082      	asrs	r2, r0, #2
  408122:	2401      	movs	r4, #1
  408124:	4094      	lsls	r4, r2
  408126:	429c      	cmp	r4, r3
  408128:	f200 808b 	bhi.w	408242 <_malloc_r+0x1ea>
  40812c:	421c      	tst	r4, r3
  40812e:	d106      	bne.n	40813e <_malloc_r+0xe6>
  408130:	f020 0003 	bic.w	r0, r0, #3
  408134:	0064      	lsls	r4, r4, #1
  408136:	421c      	tst	r4, r3
  408138:	f100 0004 	add.w	r0, r0, #4
  40813c:	d0fa      	beq.n	408134 <_malloc_r+0xdc>
  40813e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  408142:	46cc      	mov	ip, r9
  408144:	4680      	mov	r8, r0
  408146:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40814a:	459c      	cmp	ip, r3
  40814c:	d107      	bne.n	40815e <_malloc_r+0x106>
  40814e:	e16d      	b.n	40842c <_malloc_r+0x3d4>
  408150:	2a00      	cmp	r2, #0
  408152:	f280 817b 	bge.w	40844c <_malloc_r+0x3f4>
  408156:	68db      	ldr	r3, [r3, #12]
  408158:	459c      	cmp	ip, r3
  40815a:	f000 8167 	beq.w	40842c <_malloc_r+0x3d4>
  40815e:	6859      	ldr	r1, [r3, #4]
  408160:	f021 0103 	bic.w	r1, r1, #3
  408164:	1b8a      	subs	r2, r1, r6
  408166:	2a0f      	cmp	r2, #15
  408168:	ddf2      	ble.n	408150 <_malloc_r+0xf8>
  40816a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40816e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  408172:	9300      	str	r3, [sp, #0]
  408174:	199c      	adds	r4, r3, r6
  408176:	4628      	mov	r0, r5
  408178:	f046 0601 	orr.w	r6, r6, #1
  40817c:	f042 0501 	orr.w	r5, r2, #1
  408180:	605e      	str	r6, [r3, #4]
  408182:	f8c8 c00c 	str.w	ip, [r8, #12]
  408186:	f8cc 8008 	str.w	r8, [ip, #8]
  40818a:	617c      	str	r4, [r7, #20]
  40818c:	613c      	str	r4, [r7, #16]
  40818e:	f8c4 e00c 	str.w	lr, [r4, #12]
  408192:	f8c4 e008 	str.w	lr, [r4, #8]
  408196:	6065      	str	r5, [r4, #4]
  408198:	505a      	str	r2, [r3, r1]
  40819a:	f000 fbb3 	bl	408904 <__malloc_unlock>
  40819e:	9b00      	ldr	r3, [sp, #0]
  4081a0:	f103 0408 	add.w	r4, r3, #8
  4081a4:	e01e      	b.n	4081e4 <_malloc_r+0x18c>
  4081a6:	2910      	cmp	r1, #16
  4081a8:	d820      	bhi.n	4081ec <_malloc_r+0x194>
  4081aa:	f000 fba5 	bl	4088f8 <__malloc_lock>
  4081ae:	2610      	movs	r6, #16
  4081b0:	2318      	movs	r3, #24
  4081b2:	2002      	movs	r0, #2
  4081b4:	4f79      	ldr	r7, [pc, #484]	; (40839c <_malloc_r+0x344>)
  4081b6:	443b      	add	r3, r7
  4081b8:	f1a3 0208 	sub.w	r2, r3, #8
  4081bc:	685c      	ldr	r4, [r3, #4]
  4081be:	4294      	cmp	r4, r2
  4081c0:	f000 813d 	beq.w	40843e <_malloc_r+0x3e6>
  4081c4:	6863      	ldr	r3, [r4, #4]
  4081c6:	68e1      	ldr	r1, [r4, #12]
  4081c8:	68a6      	ldr	r6, [r4, #8]
  4081ca:	f023 0303 	bic.w	r3, r3, #3
  4081ce:	4423      	add	r3, r4
  4081d0:	4628      	mov	r0, r5
  4081d2:	685a      	ldr	r2, [r3, #4]
  4081d4:	60f1      	str	r1, [r6, #12]
  4081d6:	f042 0201 	orr.w	r2, r2, #1
  4081da:	608e      	str	r6, [r1, #8]
  4081dc:	605a      	str	r2, [r3, #4]
  4081de:	f000 fb91 	bl	408904 <__malloc_unlock>
  4081e2:	3408      	adds	r4, #8
  4081e4:	4620      	mov	r0, r4
  4081e6:	b003      	add	sp, #12
  4081e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081ec:	2400      	movs	r4, #0
  4081ee:	230c      	movs	r3, #12
  4081f0:	4620      	mov	r0, r4
  4081f2:	602b      	str	r3, [r5, #0]
  4081f4:	b003      	add	sp, #12
  4081f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081fa:	2040      	movs	r0, #64	; 0x40
  4081fc:	f44f 7300 	mov.w	r3, #512	; 0x200
  408200:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  408204:	e74a      	b.n	40809c <_malloc_r+0x44>
  408206:	4423      	add	r3, r4
  408208:	68e1      	ldr	r1, [r4, #12]
  40820a:	685a      	ldr	r2, [r3, #4]
  40820c:	68a6      	ldr	r6, [r4, #8]
  40820e:	f042 0201 	orr.w	r2, r2, #1
  408212:	60f1      	str	r1, [r6, #12]
  408214:	4628      	mov	r0, r5
  408216:	608e      	str	r6, [r1, #8]
  408218:	605a      	str	r2, [r3, #4]
  40821a:	f000 fb73 	bl	408904 <__malloc_unlock>
  40821e:	3408      	adds	r4, #8
  408220:	4620      	mov	r0, r4
  408222:	b003      	add	sp, #12
  408224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408228:	4423      	add	r3, r4
  40822a:	4628      	mov	r0, r5
  40822c:	685a      	ldr	r2, [r3, #4]
  40822e:	f042 0201 	orr.w	r2, r2, #1
  408232:	605a      	str	r2, [r3, #4]
  408234:	f000 fb66 	bl	408904 <__malloc_unlock>
  408238:	3408      	adds	r4, #8
  40823a:	4620      	mov	r0, r4
  40823c:	b003      	add	sp, #12
  40823e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408242:	68bc      	ldr	r4, [r7, #8]
  408244:	6863      	ldr	r3, [r4, #4]
  408246:	f023 0803 	bic.w	r8, r3, #3
  40824a:	45b0      	cmp	r8, r6
  40824c:	d304      	bcc.n	408258 <_malloc_r+0x200>
  40824e:	eba8 0306 	sub.w	r3, r8, r6
  408252:	2b0f      	cmp	r3, #15
  408254:	f300 8085 	bgt.w	408362 <_malloc_r+0x30a>
  408258:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4083b4 <_malloc_r+0x35c>
  40825c:	4b50      	ldr	r3, [pc, #320]	; (4083a0 <_malloc_r+0x348>)
  40825e:	f8d9 2000 	ldr.w	r2, [r9]
  408262:	681b      	ldr	r3, [r3, #0]
  408264:	3201      	adds	r2, #1
  408266:	4433      	add	r3, r6
  408268:	eb04 0a08 	add.w	sl, r4, r8
  40826c:	f000 8155 	beq.w	40851a <_malloc_r+0x4c2>
  408270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  408274:	330f      	adds	r3, #15
  408276:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40827a:	f02b 0b0f 	bic.w	fp, fp, #15
  40827e:	4659      	mov	r1, fp
  408280:	4628      	mov	r0, r5
  408282:	f000 fceb 	bl	408c5c <_sbrk_r>
  408286:	1c41      	adds	r1, r0, #1
  408288:	4602      	mov	r2, r0
  40828a:	f000 80fc 	beq.w	408486 <_malloc_r+0x42e>
  40828e:	4582      	cmp	sl, r0
  408290:	f200 80f7 	bhi.w	408482 <_malloc_r+0x42a>
  408294:	4b43      	ldr	r3, [pc, #268]	; (4083a4 <_malloc_r+0x34c>)
  408296:	6819      	ldr	r1, [r3, #0]
  408298:	4459      	add	r1, fp
  40829a:	6019      	str	r1, [r3, #0]
  40829c:	f000 814d 	beq.w	40853a <_malloc_r+0x4e2>
  4082a0:	f8d9 0000 	ldr.w	r0, [r9]
  4082a4:	3001      	adds	r0, #1
  4082a6:	bf1b      	ittet	ne
  4082a8:	eba2 0a0a 	subne.w	sl, r2, sl
  4082ac:	4451      	addne	r1, sl
  4082ae:	f8c9 2000 	streq.w	r2, [r9]
  4082b2:	6019      	strne	r1, [r3, #0]
  4082b4:	f012 0107 	ands.w	r1, r2, #7
  4082b8:	f000 8115 	beq.w	4084e6 <_malloc_r+0x48e>
  4082bc:	f1c1 0008 	rsb	r0, r1, #8
  4082c0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4082c4:	4402      	add	r2, r0
  4082c6:	3108      	adds	r1, #8
  4082c8:	eb02 090b 	add.w	r9, r2, fp
  4082cc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4082d0:	eba1 0909 	sub.w	r9, r1, r9
  4082d4:	4649      	mov	r1, r9
  4082d6:	4628      	mov	r0, r5
  4082d8:	9301      	str	r3, [sp, #4]
  4082da:	9200      	str	r2, [sp, #0]
  4082dc:	f000 fcbe 	bl	408c5c <_sbrk_r>
  4082e0:	1c43      	adds	r3, r0, #1
  4082e2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4082e6:	f000 8143 	beq.w	408570 <_malloc_r+0x518>
  4082ea:	1a80      	subs	r0, r0, r2
  4082ec:	4448      	add	r0, r9
  4082ee:	f040 0001 	orr.w	r0, r0, #1
  4082f2:	6819      	ldr	r1, [r3, #0]
  4082f4:	60ba      	str	r2, [r7, #8]
  4082f6:	4449      	add	r1, r9
  4082f8:	42bc      	cmp	r4, r7
  4082fa:	6050      	str	r0, [r2, #4]
  4082fc:	6019      	str	r1, [r3, #0]
  4082fe:	d017      	beq.n	408330 <_malloc_r+0x2d8>
  408300:	f1b8 0f0f 	cmp.w	r8, #15
  408304:	f240 80fb 	bls.w	4084fe <_malloc_r+0x4a6>
  408308:	6860      	ldr	r0, [r4, #4]
  40830a:	f1a8 020c 	sub.w	r2, r8, #12
  40830e:	f022 0207 	bic.w	r2, r2, #7
  408312:	eb04 0e02 	add.w	lr, r4, r2
  408316:	f000 0001 	and.w	r0, r0, #1
  40831a:	f04f 0c05 	mov.w	ip, #5
  40831e:	4310      	orrs	r0, r2
  408320:	2a0f      	cmp	r2, #15
  408322:	6060      	str	r0, [r4, #4]
  408324:	f8ce c004 	str.w	ip, [lr, #4]
  408328:	f8ce c008 	str.w	ip, [lr, #8]
  40832c:	f200 8117 	bhi.w	40855e <_malloc_r+0x506>
  408330:	4b1d      	ldr	r3, [pc, #116]	; (4083a8 <_malloc_r+0x350>)
  408332:	68bc      	ldr	r4, [r7, #8]
  408334:	681a      	ldr	r2, [r3, #0]
  408336:	4291      	cmp	r1, r2
  408338:	bf88      	it	hi
  40833a:	6019      	strhi	r1, [r3, #0]
  40833c:	4b1b      	ldr	r3, [pc, #108]	; (4083ac <_malloc_r+0x354>)
  40833e:	681a      	ldr	r2, [r3, #0]
  408340:	4291      	cmp	r1, r2
  408342:	6862      	ldr	r2, [r4, #4]
  408344:	bf88      	it	hi
  408346:	6019      	strhi	r1, [r3, #0]
  408348:	f022 0203 	bic.w	r2, r2, #3
  40834c:	4296      	cmp	r6, r2
  40834e:	eba2 0306 	sub.w	r3, r2, r6
  408352:	d801      	bhi.n	408358 <_malloc_r+0x300>
  408354:	2b0f      	cmp	r3, #15
  408356:	dc04      	bgt.n	408362 <_malloc_r+0x30a>
  408358:	4628      	mov	r0, r5
  40835a:	f000 fad3 	bl	408904 <__malloc_unlock>
  40835e:	2400      	movs	r4, #0
  408360:	e740      	b.n	4081e4 <_malloc_r+0x18c>
  408362:	19a2      	adds	r2, r4, r6
  408364:	f043 0301 	orr.w	r3, r3, #1
  408368:	f046 0601 	orr.w	r6, r6, #1
  40836c:	6066      	str	r6, [r4, #4]
  40836e:	4628      	mov	r0, r5
  408370:	60ba      	str	r2, [r7, #8]
  408372:	6053      	str	r3, [r2, #4]
  408374:	f000 fac6 	bl	408904 <__malloc_unlock>
  408378:	3408      	adds	r4, #8
  40837a:	4620      	mov	r0, r4
  40837c:	b003      	add	sp, #12
  40837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408382:	2b14      	cmp	r3, #20
  408384:	d971      	bls.n	40846a <_malloc_r+0x412>
  408386:	2b54      	cmp	r3, #84	; 0x54
  408388:	f200 80a3 	bhi.w	4084d2 <_malloc_r+0x47a>
  40838c:	0b33      	lsrs	r3, r6, #12
  40838e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  408392:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  408396:	00c3      	lsls	r3, r0, #3
  408398:	e680      	b.n	40809c <_malloc_r+0x44>
  40839a:	bf00      	nop
  40839c:	20002918 	.word	0x20002918
  4083a0:	20004480 	.word	0x20004480
  4083a4:	20004450 	.word	0x20004450
  4083a8:	20004478 	.word	0x20004478
  4083ac:	2000447c 	.word	0x2000447c
  4083b0:	20002920 	.word	0x20002920
  4083b4:	20002d20 	.word	0x20002d20
  4083b8:	0a5a      	lsrs	r2, r3, #9
  4083ba:	2a04      	cmp	r2, #4
  4083bc:	d95b      	bls.n	408476 <_malloc_r+0x41e>
  4083be:	2a14      	cmp	r2, #20
  4083c0:	f200 80ae 	bhi.w	408520 <_malloc_r+0x4c8>
  4083c4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4083c8:	00c9      	lsls	r1, r1, #3
  4083ca:	325b      	adds	r2, #91	; 0x5b
  4083cc:	eb07 0c01 	add.w	ip, r7, r1
  4083d0:	5879      	ldr	r1, [r7, r1]
  4083d2:	f1ac 0c08 	sub.w	ip, ip, #8
  4083d6:	458c      	cmp	ip, r1
  4083d8:	f000 8088 	beq.w	4084ec <_malloc_r+0x494>
  4083dc:	684a      	ldr	r2, [r1, #4]
  4083de:	f022 0203 	bic.w	r2, r2, #3
  4083e2:	4293      	cmp	r3, r2
  4083e4:	d273      	bcs.n	4084ce <_malloc_r+0x476>
  4083e6:	6889      	ldr	r1, [r1, #8]
  4083e8:	458c      	cmp	ip, r1
  4083ea:	d1f7      	bne.n	4083dc <_malloc_r+0x384>
  4083ec:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4083f0:	687b      	ldr	r3, [r7, #4]
  4083f2:	60e2      	str	r2, [r4, #12]
  4083f4:	f8c4 c008 	str.w	ip, [r4, #8]
  4083f8:	6094      	str	r4, [r2, #8]
  4083fa:	f8cc 400c 	str.w	r4, [ip, #12]
  4083fe:	e68f      	b.n	408120 <_malloc_r+0xc8>
  408400:	19a1      	adds	r1, r4, r6
  408402:	f046 0c01 	orr.w	ip, r6, #1
  408406:	f042 0601 	orr.w	r6, r2, #1
  40840a:	f8c4 c004 	str.w	ip, [r4, #4]
  40840e:	4628      	mov	r0, r5
  408410:	6179      	str	r1, [r7, #20]
  408412:	6139      	str	r1, [r7, #16]
  408414:	f8c1 e00c 	str.w	lr, [r1, #12]
  408418:	f8c1 e008 	str.w	lr, [r1, #8]
  40841c:	604e      	str	r6, [r1, #4]
  40841e:	50e2      	str	r2, [r4, r3]
  408420:	f000 fa70 	bl	408904 <__malloc_unlock>
  408424:	3408      	adds	r4, #8
  408426:	e6dd      	b.n	4081e4 <_malloc_r+0x18c>
  408428:	687b      	ldr	r3, [r7, #4]
  40842a:	e679      	b.n	408120 <_malloc_r+0xc8>
  40842c:	f108 0801 	add.w	r8, r8, #1
  408430:	f018 0f03 	tst.w	r8, #3
  408434:	f10c 0c08 	add.w	ip, ip, #8
  408438:	f47f ae85 	bne.w	408146 <_malloc_r+0xee>
  40843c:	e02d      	b.n	40849a <_malloc_r+0x442>
  40843e:	68dc      	ldr	r4, [r3, #12]
  408440:	42a3      	cmp	r3, r4
  408442:	bf08      	it	eq
  408444:	3002      	addeq	r0, #2
  408446:	f43f ae3e 	beq.w	4080c6 <_malloc_r+0x6e>
  40844a:	e6bb      	b.n	4081c4 <_malloc_r+0x16c>
  40844c:	4419      	add	r1, r3
  40844e:	461c      	mov	r4, r3
  408450:	684a      	ldr	r2, [r1, #4]
  408452:	68db      	ldr	r3, [r3, #12]
  408454:	f854 6f08 	ldr.w	r6, [r4, #8]!
  408458:	f042 0201 	orr.w	r2, r2, #1
  40845c:	604a      	str	r2, [r1, #4]
  40845e:	4628      	mov	r0, r5
  408460:	60f3      	str	r3, [r6, #12]
  408462:	609e      	str	r6, [r3, #8]
  408464:	f000 fa4e 	bl	408904 <__malloc_unlock>
  408468:	e6bc      	b.n	4081e4 <_malloc_r+0x18c>
  40846a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40846e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  408472:	00c3      	lsls	r3, r0, #3
  408474:	e612      	b.n	40809c <_malloc_r+0x44>
  408476:	099a      	lsrs	r2, r3, #6
  408478:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40847c:	00c9      	lsls	r1, r1, #3
  40847e:	3238      	adds	r2, #56	; 0x38
  408480:	e7a4      	b.n	4083cc <_malloc_r+0x374>
  408482:	42bc      	cmp	r4, r7
  408484:	d054      	beq.n	408530 <_malloc_r+0x4d8>
  408486:	68bc      	ldr	r4, [r7, #8]
  408488:	6862      	ldr	r2, [r4, #4]
  40848a:	f022 0203 	bic.w	r2, r2, #3
  40848e:	e75d      	b.n	40834c <_malloc_r+0x2f4>
  408490:	f859 3908 	ldr.w	r3, [r9], #-8
  408494:	4599      	cmp	r9, r3
  408496:	f040 8086 	bne.w	4085a6 <_malloc_r+0x54e>
  40849a:	f010 0f03 	tst.w	r0, #3
  40849e:	f100 30ff 	add.w	r0, r0, #4294967295
  4084a2:	d1f5      	bne.n	408490 <_malloc_r+0x438>
  4084a4:	687b      	ldr	r3, [r7, #4]
  4084a6:	ea23 0304 	bic.w	r3, r3, r4
  4084aa:	607b      	str	r3, [r7, #4]
  4084ac:	0064      	lsls	r4, r4, #1
  4084ae:	429c      	cmp	r4, r3
  4084b0:	f63f aec7 	bhi.w	408242 <_malloc_r+0x1ea>
  4084b4:	2c00      	cmp	r4, #0
  4084b6:	f43f aec4 	beq.w	408242 <_malloc_r+0x1ea>
  4084ba:	421c      	tst	r4, r3
  4084bc:	4640      	mov	r0, r8
  4084be:	f47f ae3e 	bne.w	40813e <_malloc_r+0xe6>
  4084c2:	0064      	lsls	r4, r4, #1
  4084c4:	421c      	tst	r4, r3
  4084c6:	f100 0004 	add.w	r0, r0, #4
  4084ca:	d0fa      	beq.n	4084c2 <_malloc_r+0x46a>
  4084cc:	e637      	b.n	40813e <_malloc_r+0xe6>
  4084ce:	468c      	mov	ip, r1
  4084d0:	e78c      	b.n	4083ec <_malloc_r+0x394>
  4084d2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4084d6:	d815      	bhi.n	408504 <_malloc_r+0x4ac>
  4084d8:	0bf3      	lsrs	r3, r6, #15
  4084da:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4084de:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4084e2:	00c3      	lsls	r3, r0, #3
  4084e4:	e5da      	b.n	40809c <_malloc_r+0x44>
  4084e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4084ea:	e6ed      	b.n	4082c8 <_malloc_r+0x270>
  4084ec:	687b      	ldr	r3, [r7, #4]
  4084ee:	1092      	asrs	r2, r2, #2
  4084f0:	2101      	movs	r1, #1
  4084f2:	fa01 f202 	lsl.w	r2, r1, r2
  4084f6:	4313      	orrs	r3, r2
  4084f8:	607b      	str	r3, [r7, #4]
  4084fa:	4662      	mov	r2, ip
  4084fc:	e779      	b.n	4083f2 <_malloc_r+0x39a>
  4084fe:	2301      	movs	r3, #1
  408500:	6053      	str	r3, [r2, #4]
  408502:	e729      	b.n	408358 <_malloc_r+0x300>
  408504:	f240 5254 	movw	r2, #1364	; 0x554
  408508:	4293      	cmp	r3, r2
  40850a:	d822      	bhi.n	408552 <_malloc_r+0x4fa>
  40850c:	0cb3      	lsrs	r3, r6, #18
  40850e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  408512:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  408516:	00c3      	lsls	r3, r0, #3
  408518:	e5c0      	b.n	40809c <_malloc_r+0x44>
  40851a:	f103 0b10 	add.w	fp, r3, #16
  40851e:	e6ae      	b.n	40827e <_malloc_r+0x226>
  408520:	2a54      	cmp	r2, #84	; 0x54
  408522:	d829      	bhi.n	408578 <_malloc_r+0x520>
  408524:	0b1a      	lsrs	r2, r3, #12
  408526:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40852a:	00c9      	lsls	r1, r1, #3
  40852c:	326e      	adds	r2, #110	; 0x6e
  40852e:	e74d      	b.n	4083cc <_malloc_r+0x374>
  408530:	4b20      	ldr	r3, [pc, #128]	; (4085b4 <_malloc_r+0x55c>)
  408532:	6819      	ldr	r1, [r3, #0]
  408534:	4459      	add	r1, fp
  408536:	6019      	str	r1, [r3, #0]
  408538:	e6b2      	b.n	4082a0 <_malloc_r+0x248>
  40853a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40853e:	2800      	cmp	r0, #0
  408540:	f47f aeae 	bne.w	4082a0 <_malloc_r+0x248>
  408544:	eb08 030b 	add.w	r3, r8, fp
  408548:	68ba      	ldr	r2, [r7, #8]
  40854a:	f043 0301 	orr.w	r3, r3, #1
  40854e:	6053      	str	r3, [r2, #4]
  408550:	e6ee      	b.n	408330 <_malloc_r+0x2d8>
  408552:	207f      	movs	r0, #127	; 0x7f
  408554:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  408558:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40855c:	e59e      	b.n	40809c <_malloc_r+0x44>
  40855e:	f104 0108 	add.w	r1, r4, #8
  408562:	4628      	mov	r0, r5
  408564:	9300      	str	r3, [sp, #0]
  408566:	f002 ff23 	bl	40b3b0 <_free_r>
  40856a:	9b00      	ldr	r3, [sp, #0]
  40856c:	6819      	ldr	r1, [r3, #0]
  40856e:	e6df      	b.n	408330 <_malloc_r+0x2d8>
  408570:	2001      	movs	r0, #1
  408572:	f04f 0900 	mov.w	r9, #0
  408576:	e6bc      	b.n	4082f2 <_malloc_r+0x29a>
  408578:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40857c:	d805      	bhi.n	40858a <_malloc_r+0x532>
  40857e:	0bda      	lsrs	r2, r3, #15
  408580:	f102 0178 	add.w	r1, r2, #120	; 0x78
  408584:	00c9      	lsls	r1, r1, #3
  408586:	3277      	adds	r2, #119	; 0x77
  408588:	e720      	b.n	4083cc <_malloc_r+0x374>
  40858a:	f240 5154 	movw	r1, #1364	; 0x554
  40858e:	428a      	cmp	r2, r1
  408590:	d805      	bhi.n	40859e <_malloc_r+0x546>
  408592:	0c9a      	lsrs	r2, r3, #18
  408594:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  408598:	00c9      	lsls	r1, r1, #3
  40859a:	327c      	adds	r2, #124	; 0x7c
  40859c:	e716      	b.n	4083cc <_malloc_r+0x374>
  40859e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4085a2:	227e      	movs	r2, #126	; 0x7e
  4085a4:	e712      	b.n	4083cc <_malloc_r+0x374>
  4085a6:	687b      	ldr	r3, [r7, #4]
  4085a8:	e780      	b.n	4084ac <_malloc_r+0x454>
  4085aa:	08f0      	lsrs	r0, r6, #3
  4085ac:	f106 0308 	add.w	r3, r6, #8
  4085b0:	e600      	b.n	4081b4 <_malloc_r+0x15c>
  4085b2:	bf00      	nop
  4085b4:	20004450 	.word	0x20004450
	...

004085c0 <memchr>:
  4085c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4085c4:	2a10      	cmp	r2, #16
  4085c6:	db2b      	blt.n	408620 <memchr+0x60>
  4085c8:	f010 0f07 	tst.w	r0, #7
  4085cc:	d008      	beq.n	4085e0 <memchr+0x20>
  4085ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  4085d2:	3a01      	subs	r2, #1
  4085d4:	428b      	cmp	r3, r1
  4085d6:	d02d      	beq.n	408634 <memchr+0x74>
  4085d8:	f010 0f07 	tst.w	r0, #7
  4085dc:	b342      	cbz	r2, 408630 <memchr+0x70>
  4085de:	d1f6      	bne.n	4085ce <memchr+0xe>
  4085e0:	b4f0      	push	{r4, r5, r6, r7}
  4085e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4085e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4085ea:	f022 0407 	bic.w	r4, r2, #7
  4085ee:	f07f 0700 	mvns.w	r7, #0
  4085f2:	2300      	movs	r3, #0
  4085f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4085f8:	3c08      	subs	r4, #8
  4085fa:	ea85 0501 	eor.w	r5, r5, r1
  4085fe:	ea86 0601 	eor.w	r6, r6, r1
  408602:	fa85 f547 	uadd8	r5, r5, r7
  408606:	faa3 f587 	sel	r5, r3, r7
  40860a:	fa86 f647 	uadd8	r6, r6, r7
  40860e:	faa5 f687 	sel	r6, r5, r7
  408612:	b98e      	cbnz	r6, 408638 <memchr+0x78>
  408614:	d1ee      	bne.n	4085f4 <memchr+0x34>
  408616:	bcf0      	pop	{r4, r5, r6, r7}
  408618:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40861c:	f002 0207 	and.w	r2, r2, #7
  408620:	b132      	cbz	r2, 408630 <memchr+0x70>
  408622:	f810 3b01 	ldrb.w	r3, [r0], #1
  408626:	3a01      	subs	r2, #1
  408628:	ea83 0301 	eor.w	r3, r3, r1
  40862c:	b113      	cbz	r3, 408634 <memchr+0x74>
  40862e:	d1f8      	bne.n	408622 <memchr+0x62>
  408630:	2000      	movs	r0, #0
  408632:	4770      	bx	lr
  408634:	3801      	subs	r0, #1
  408636:	4770      	bx	lr
  408638:	2d00      	cmp	r5, #0
  40863a:	bf06      	itte	eq
  40863c:	4635      	moveq	r5, r6
  40863e:	3803      	subeq	r0, #3
  408640:	3807      	subne	r0, #7
  408642:	f015 0f01 	tst.w	r5, #1
  408646:	d107      	bne.n	408658 <memchr+0x98>
  408648:	3001      	adds	r0, #1
  40864a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40864e:	bf02      	ittt	eq
  408650:	3001      	addeq	r0, #1
  408652:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408656:	3001      	addeq	r0, #1
  408658:	bcf0      	pop	{r4, r5, r6, r7}
  40865a:	3801      	subs	r0, #1
  40865c:	4770      	bx	lr
  40865e:	bf00      	nop

00408660 <memcpy>:
  408660:	4684      	mov	ip, r0
  408662:	ea41 0300 	orr.w	r3, r1, r0
  408666:	f013 0303 	ands.w	r3, r3, #3
  40866a:	d16d      	bne.n	408748 <memcpy+0xe8>
  40866c:	3a40      	subs	r2, #64	; 0x40
  40866e:	d341      	bcc.n	4086f4 <memcpy+0x94>
  408670:	f851 3b04 	ldr.w	r3, [r1], #4
  408674:	f840 3b04 	str.w	r3, [r0], #4
  408678:	f851 3b04 	ldr.w	r3, [r1], #4
  40867c:	f840 3b04 	str.w	r3, [r0], #4
  408680:	f851 3b04 	ldr.w	r3, [r1], #4
  408684:	f840 3b04 	str.w	r3, [r0], #4
  408688:	f851 3b04 	ldr.w	r3, [r1], #4
  40868c:	f840 3b04 	str.w	r3, [r0], #4
  408690:	f851 3b04 	ldr.w	r3, [r1], #4
  408694:	f840 3b04 	str.w	r3, [r0], #4
  408698:	f851 3b04 	ldr.w	r3, [r1], #4
  40869c:	f840 3b04 	str.w	r3, [r0], #4
  4086a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4086a4:	f840 3b04 	str.w	r3, [r0], #4
  4086a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4086ac:	f840 3b04 	str.w	r3, [r0], #4
  4086b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4086b4:	f840 3b04 	str.w	r3, [r0], #4
  4086b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4086bc:	f840 3b04 	str.w	r3, [r0], #4
  4086c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4086c4:	f840 3b04 	str.w	r3, [r0], #4
  4086c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4086cc:	f840 3b04 	str.w	r3, [r0], #4
  4086d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4086d4:	f840 3b04 	str.w	r3, [r0], #4
  4086d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4086dc:	f840 3b04 	str.w	r3, [r0], #4
  4086e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4086e4:	f840 3b04 	str.w	r3, [r0], #4
  4086e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4086ec:	f840 3b04 	str.w	r3, [r0], #4
  4086f0:	3a40      	subs	r2, #64	; 0x40
  4086f2:	d2bd      	bcs.n	408670 <memcpy+0x10>
  4086f4:	3230      	adds	r2, #48	; 0x30
  4086f6:	d311      	bcc.n	40871c <memcpy+0xbc>
  4086f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4086fc:	f840 3b04 	str.w	r3, [r0], #4
  408700:	f851 3b04 	ldr.w	r3, [r1], #4
  408704:	f840 3b04 	str.w	r3, [r0], #4
  408708:	f851 3b04 	ldr.w	r3, [r1], #4
  40870c:	f840 3b04 	str.w	r3, [r0], #4
  408710:	f851 3b04 	ldr.w	r3, [r1], #4
  408714:	f840 3b04 	str.w	r3, [r0], #4
  408718:	3a10      	subs	r2, #16
  40871a:	d2ed      	bcs.n	4086f8 <memcpy+0x98>
  40871c:	320c      	adds	r2, #12
  40871e:	d305      	bcc.n	40872c <memcpy+0xcc>
  408720:	f851 3b04 	ldr.w	r3, [r1], #4
  408724:	f840 3b04 	str.w	r3, [r0], #4
  408728:	3a04      	subs	r2, #4
  40872a:	d2f9      	bcs.n	408720 <memcpy+0xc0>
  40872c:	3204      	adds	r2, #4
  40872e:	d008      	beq.n	408742 <memcpy+0xe2>
  408730:	07d2      	lsls	r2, r2, #31
  408732:	bf1c      	itt	ne
  408734:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408738:	f800 3b01 	strbne.w	r3, [r0], #1
  40873c:	d301      	bcc.n	408742 <memcpy+0xe2>
  40873e:	880b      	ldrh	r3, [r1, #0]
  408740:	8003      	strh	r3, [r0, #0]
  408742:	4660      	mov	r0, ip
  408744:	4770      	bx	lr
  408746:	bf00      	nop
  408748:	2a08      	cmp	r2, #8
  40874a:	d313      	bcc.n	408774 <memcpy+0x114>
  40874c:	078b      	lsls	r3, r1, #30
  40874e:	d08d      	beq.n	40866c <memcpy+0xc>
  408750:	f010 0303 	ands.w	r3, r0, #3
  408754:	d08a      	beq.n	40866c <memcpy+0xc>
  408756:	f1c3 0304 	rsb	r3, r3, #4
  40875a:	1ad2      	subs	r2, r2, r3
  40875c:	07db      	lsls	r3, r3, #31
  40875e:	bf1c      	itt	ne
  408760:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408764:	f800 3b01 	strbne.w	r3, [r0], #1
  408768:	d380      	bcc.n	40866c <memcpy+0xc>
  40876a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40876e:	f820 3b02 	strh.w	r3, [r0], #2
  408772:	e77b      	b.n	40866c <memcpy+0xc>
  408774:	3a04      	subs	r2, #4
  408776:	d3d9      	bcc.n	40872c <memcpy+0xcc>
  408778:	3a01      	subs	r2, #1
  40877a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40877e:	f800 3b01 	strb.w	r3, [r0], #1
  408782:	d2f9      	bcs.n	408778 <memcpy+0x118>
  408784:	780b      	ldrb	r3, [r1, #0]
  408786:	7003      	strb	r3, [r0, #0]
  408788:	784b      	ldrb	r3, [r1, #1]
  40878a:	7043      	strb	r3, [r0, #1]
  40878c:	788b      	ldrb	r3, [r1, #2]
  40878e:	7083      	strb	r3, [r0, #2]
  408790:	4660      	mov	r0, ip
  408792:	4770      	bx	lr

00408794 <memmove>:
  408794:	4288      	cmp	r0, r1
  408796:	b5f0      	push	{r4, r5, r6, r7, lr}
  408798:	d90d      	bls.n	4087b6 <memmove+0x22>
  40879a:	188b      	adds	r3, r1, r2
  40879c:	4298      	cmp	r0, r3
  40879e:	d20a      	bcs.n	4087b6 <memmove+0x22>
  4087a0:	1884      	adds	r4, r0, r2
  4087a2:	2a00      	cmp	r2, #0
  4087a4:	d051      	beq.n	40884a <memmove+0xb6>
  4087a6:	4622      	mov	r2, r4
  4087a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4087ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4087b0:	4299      	cmp	r1, r3
  4087b2:	d1f9      	bne.n	4087a8 <memmove+0x14>
  4087b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4087b6:	2a0f      	cmp	r2, #15
  4087b8:	d948      	bls.n	40884c <memmove+0xb8>
  4087ba:	ea41 0300 	orr.w	r3, r1, r0
  4087be:	079b      	lsls	r3, r3, #30
  4087c0:	d146      	bne.n	408850 <memmove+0xbc>
  4087c2:	f100 0410 	add.w	r4, r0, #16
  4087c6:	f101 0310 	add.w	r3, r1, #16
  4087ca:	4615      	mov	r5, r2
  4087cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4087d0:	f844 6c10 	str.w	r6, [r4, #-16]
  4087d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4087d8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4087dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4087e0:	f844 6c08 	str.w	r6, [r4, #-8]
  4087e4:	3d10      	subs	r5, #16
  4087e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4087ea:	f844 6c04 	str.w	r6, [r4, #-4]
  4087ee:	2d0f      	cmp	r5, #15
  4087f0:	f103 0310 	add.w	r3, r3, #16
  4087f4:	f104 0410 	add.w	r4, r4, #16
  4087f8:	d8e8      	bhi.n	4087cc <memmove+0x38>
  4087fa:	f1a2 0310 	sub.w	r3, r2, #16
  4087fe:	f023 030f 	bic.w	r3, r3, #15
  408802:	f002 0e0f 	and.w	lr, r2, #15
  408806:	3310      	adds	r3, #16
  408808:	f1be 0f03 	cmp.w	lr, #3
  40880c:	4419      	add	r1, r3
  40880e:	4403      	add	r3, r0
  408810:	d921      	bls.n	408856 <memmove+0xc2>
  408812:	1f1e      	subs	r6, r3, #4
  408814:	460d      	mov	r5, r1
  408816:	4674      	mov	r4, lr
  408818:	3c04      	subs	r4, #4
  40881a:	f855 7b04 	ldr.w	r7, [r5], #4
  40881e:	f846 7f04 	str.w	r7, [r6, #4]!
  408822:	2c03      	cmp	r4, #3
  408824:	d8f8      	bhi.n	408818 <memmove+0x84>
  408826:	f1ae 0404 	sub.w	r4, lr, #4
  40882a:	f024 0403 	bic.w	r4, r4, #3
  40882e:	3404      	adds	r4, #4
  408830:	4421      	add	r1, r4
  408832:	4423      	add	r3, r4
  408834:	f002 0203 	and.w	r2, r2, #3
  408838:	b162      	cbz	r2, 408854 <memmove+0xc0>
  40883a:	3b01      	subs	r3, #1
  40883c:	440a      	add	r2, r1
  40883e:	f811 4b01 	ldrb.w	r4, [r1], #1
  408842:	f803 4f01 	strb.w	r4, [r3, #1]!
  408846:	428a      	cmp	r2, r1
  408848:	d1f9      	bne.n	40883e <memmove+0xaa>
  40884a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40884c:	4603      	mov	r3, r0
  40884e:	e7f3      	b.n	408838 <memmove+0xa4>
  408850:	4603      	mov	r3, r0
  408852:	e7f2      	b.n	40883a <memmove+0xa6>
  408854:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408856:	4672      	mov	r2, lr
  408858:	e7ee      	b.n	408838 <memmove+0xa4>
  40885a:	bf00      	nop

0040885c <memset>:
  40885c:	b470      	push	{r4, r5, r6}
  40885e:	0786      	lsls	r6, r0, #30
  408860:	d046      	beq.n	4088f0 <memset+0x94>
  408862:	1e54      	subs	r4, r2, #1
  408864:	2a00      	cmp	r2, #0
  408866:	d041      	beq.n	4088ec <memset+0x90>
  408868:	b2ca      	uxtb	r2, r1
  40886a:	4603      	mov	r3, r0
  40886c:	e002      	b.n	408874 <memset+0x18>
  40886e:	f114 34ff 	adds.w	r4, r4, #4294967295
  408872:	d33b      	bcc.n	4088ec <memset+0x90>
  408874:	f803 2b01 	strb.w	r2, [r3], #1
  408878:	079d      	lsls	r5, r3, #30
  40887a:	d1f8      	bne.n	40886e <memset+0x12>
  40887c:	2c03      	cmp	r4, #3
  40887e:	d92e      	bls.n	4088de <memset+0x82>
  408880:	b2cd      	uxtb	r5, r1
  408882:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  408886:	2c0f      	cmp	r4, #15
  408888:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40888c:	d919      	bls.n	4088c2 <memset+0x66>
  40888e:	f103 0210 	add.w	r2, r3, #16
  408892:	4626      	mov	r6, r4
  408894:	3e10      	subs	r6, #16
  408896:	2e0f      	cmp	r6, #15
  408898:	f842 5c10 	str.w	r5, [r2, #-16]
  40889c:	f842 5c0c 	str.w	r5, [r2, #-12]
  4088a0:	f842 5c08 	str.w	r5, [r2, #-8]
  4088a4:	f842 5c04 	str.w	r5, [r2, #-4]
  4088a8:	f102 0210 	add.w	r2, r2, #16
  4088ac:	d8f2      	bhi.n	408894 <memset+0x38>
  4088ae:	f1a4 0210 	sub.w	r2, r4, #16
  4088b2:	f022 020f 	bic.w	r2, r2, #15
  4088b6:	f004 040f 	and.w	r4, r4, #15
  4088ba:	3210      	adds	r2, #16
  4088bc:	2c03      	cmp	r4, #3
  4088be:	4413      	add	r3, r2
  4088c0:	d90d      	bls.n	4088de <memset+0x82>
  4088c2:	461e      	mov	r6, r3
  4088c4:	4622      	mov	r2, r4
  4088c6:	3a04      	subs	r2, #4
  4088c8:	2a03      	cmp	r2, #3
  4088ca:	f846 5b04 	str.w	r5, [r6], #4
  4088ce:	d8fa      	bhi.n	4088c6 <memset+0x6a>
  4088d0:	1f22      	subs	r2, r4, #4
  4088d2:	f022 0203 	bic.w	r2, r2, #3
  4088d6:	3204      	adds	r2, #4
  4088d8:	4413      	add	r3, r2
  4088da:	f004 0403 	and.w	r4, r4, #3
  4088de:	b12c      	cbz	r4, 4088ec <memset+0x90>
  4088e0:	b2c9      	uxtb	r1, r1
  4088e2:	441c      	add	r4, r3
  4088e4:	f803 1b01 	strb.w	r1, [r3], #1
  4088e8:	429c      	cmp	r4, r3
  4088ea:	d1fb      	bne.n	4088e4 <memset+0x88>
  4088ec:	bc70      	pop	{r4, r5, r6}
  4088ee:	4770      	bx	lr
  4088f0:	4614      	mov	r4, r2
  4088f2:	4603      	mov	r3, r0
  4088f4:	e7c2      	b.n	40887c <memset+0x20>
  4088f6:	bf00      	nop

004088f8 <__malloc_lock>:
  4088f8:	4801      	ldr	r0, [pc, #4]	; (408900 <__malloc_lock+0x8>)
  4088fa:	f7ff bba9 	b.w	408050 <__retarget_lock_acquire_recursive>
  4088fe:	bf00      	nop
  408900:	200046a8 	.word	0x200046a8

00408904 <__malloc_unlock>:
  408904:	4801      	ldr	r0, [pc, #4]	; (40890c <__malloc_unlock+0x8>)
  408906:	f7ff bba5 	b.w	408054 <__retarget_lock_release_recursive>
  40890a:	bf00      	nop
  40890c:	200046a8 	.word	0x200046a8

00408910 <_realloc_r>:
  408910:	2900      	cmp	r1, #0
  408912:	f000 8095 	beq.w	408a40 <_realloc_r+0x130>
  408916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40891a:	460d      	mov	r5, r1
  40891c:	4616      	mov	r6, r2
  40891e:	b083      	sub	sp, #12
  408920:	4680      	mov	r8, r0
  408922:	f106 070b 	add.w	r7, r6, #11
  408926:	f7ff ffe7 	bl	4088f8 <__malloc_lock>
  40892a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40892e:	2f16      	cmp	r7, #22
  408930:	f02e 0403 	bic.w	r4, lr, #3
  408934:	f1a5 0908 	sub.w	r9, r5, #8
  408938:	d83c      	bhi.n	4089b4 <_realloc_r+0xa4>
  40893a:	2210      	movs	r2, #16
  40893c:	4617      	mov	r7, r2
  40893e:	42be      	cmp	r6, r7
  408940:	d83d      	bhi.n	4089be <_realloc_r+0xae>
  408942:	4294      	cmp	r4, r2
  408944:	da43      	bge.n	4089ce <_realloc_r+0xbe>
  408946:	4bc4      	ldr	r3, [pc, #784]	; (408c58 <_realloc_r+0x348>)
  408948:	6899      	ldr	r1, [r3, #8]
  40894a:	eb09 0004 	add.w	r0, r9, r4
  40894e:	4288      	cmp	r0, r1
  408950:	f000 80b4 	beq.w	408abc <_realloc_r+0x1ac>
  408954:	6843      	ldr	r3, [r0, #4]
  408956:	f023 0101 	bic.w	r1, r3, #1
  40895a:	4401      	add	r1, r0
  40895c:	6849      	ldr	r1, [r1, #4]
  40895e:	07c9      	lsls	r1, r1, #31
  408960:	d54c      	bpl.n	4089fc <_realloc_r+0xec>
  408962:	f01e 0f01 	tst.w	lr, #1
  408966:	f000 809b 	beq.w	408aa0 <_realloc_r+0x190>
  40896a:	4631      	mov	r1, r6
  40896c:	4640      	mov	r0, r8
  40896e:	f7ff fb73 	bl	408058 <_malloc_r>
  408972:	4606      	mov	r6, r0
  408974:	2800      	cmp	r0, #0
  408976:	d03a      	beq.n	4089ee <_realloc_r+0xde>
  408978:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40897c:	f023 0301 	bic.w	r3, r3, #1
  408980:	444b      	add	r3, r9
  408982:	f1a0 0208 	sub.w	r2, r0, #8
  408986:	429a      	cmp	r2, r3
  408988:	f000 8121 	beq.w	408bce <_realloc_r+0x2be>
  40898c:	1f22      	subs	r2, r4, #4
  40898e:	2a24      	cmp	r2, #36	; 0x24
  408990:	f200 8107 	bhi.w	408ba2 <_realloc_r+0x292>
  408994:	2a13      	cmp	r2, #19
  408996:	f200 80db 	bhi.w	408b50 <_realloc_r+0x240>
  40899a:	4603      	mov	r3, r0
  40899c:	462a      	mov	r2, r5
  40899e:	6811      	ldr	r1, [r2, #0]
  4089a0:	6019      	str	r1, [r3, #0]
  4089a2:	6851      	ldr	r1, [r2, #4]
  4089a4:	6059      	str	r1, [r3, #4]
  4089a6:	6892      	ldr	r2, [r2, #8]
  4089a8:	609a      	str	r2, [r3, #8]
  4089aa:	4629      	mov	r1, r5
  4089ac:	4640      	mov	r0, r8
  4089ae:	f002 fcff 	bl	40b3b0 <_free_r>
  4089b2:	e01c      	b.n	4089ee <_realloc_r+0xde>
  4089b4:	f027 0707 	bic.w	r7, r7, #7
  4089b8:	2f00      	cmp	r7, #0
  4089ba:	463a      	mov	r2, r7
  4089bc:	dabf      	bge.n	40893e <_realloc_r+0x2e>
  4089be:	2600      	movs	r6, #0
  4089c0:	230c      	movs	r3, #12
  4089c2:	4630      	mov	r0, r6
  4089c4:	f8c8 3000 	str.w	r3, [r8]
  4089c8:	b003      	add	sp, #12
  4089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089ce:	462e      	mov	r6, r5
  4089d0:	1be3      	subs	r3, r4, r7
  4089d2:	2b0f      	cmp	r3, #15
  4089d4:	d81e      	bhi.n	408a14 <_realloc_r+0x104>
  4089d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4089da:	f003 0301 	and.w	r3, r3, #1
  4089de:	4323      	orrs	r3, r4
  4089e0:	444c      	add	r4, r9
  4089e2:	f8c9 3004 	str.w	r3, [r9, #4]
  4089e6:	6863      	ldr	r3, [r4, #4]
  4089e8:	f043 0301 	orr.w	r3, r3, #1
  4089ec:	6063      	str	r3, [r4, #4]
  4089ee:	4640      	mov	r0, r8
  4089f0:	f7ff ff88 	bl	408904 <__malloc_unlock>
  4089f4:	4630      	mov	r0, r6
  4089f6:	b003      	add	sp, #12
  4089f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089fc:	f023 0303 	bic.w	r3, r3, #3
  408a00:	18e1      	adds	r1, r4, r3
  408a02:	4291      	cmp	r1, r2
  408a04:	db1f      	blt.n	408a46 <_realloc_r+0x136>
  408a06:	68c3      	ldr	r3, [r0, #12]
  408a08:	6882      	ldr	r2, [r0, #8]
  408a0a:	462e      	mov	r6, r5
  408a0c:	60d3      	str	r3, [r2, #12]
  408a0e:	460c      	mov	r4, r1
  408a10:	609a      	str	r2, [r3, #8]
  408a12:	e7dd      	b.n	4089d0 <_realloc_r+0xc0>
  408a14:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408a18:	eb09 0107 	add.w	r1, r9, r7
  408a1c:	f002 0201 	and.w	r2, r2, #1
  408a20:	444c      	add	r4, r9
  408a22:	f043 0301 	orr.w	r3, r3, #1
  408a26:	4317      	orrs	r7, r2
  408a28:	f8c9 7004 	str.w	r7, [r9, #4]
  408a2c:	604b      	str	r3, [r1, #4]
  408a2e:	6863      	ldr	r3, [r4, #4]
  408a30:	f043 0301 	orr.w	r3, r3, #1
  408a34:	3108      	adds	r1, #8
  408a36:	6063      	str	r3, [r4, #4]
  408a38:	4640      	mov	r0, r8
  408a3a:	f002 fcb9 	bl	40b3b0 <_free_r>
  408a3e:	e7d6      	b.n	4089ee <_realloc_r+0xde>
  408a40:	4611      	mov	r1, r2
  408a42:	f7ff bb09 	b.w	408058 <_malloc_r>
  408a46:	f01e 0f01 	tst.w	lr, #1
  408a4a:	d18e      	bne.n	40896a <_realloc_r+0x5a>
  408a4c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408a50:	eba9 0a01 	sub.w	sl, r9, r1
  408a54:	f8da 1004 	ldr.w	r1, [sl, #4]
  408a58:	f021 0103 	bic.w	r1, r1, #3
  408a5c:	440b      	add	r3, r1
  408a5e:	4423      	add	r3, r4
  408a60:	4293      	cmp	r3, r2
  408a62:	db25      	blt.n	408ab0 <_realloc_r+0x1a0>
  408a64:	68c2      	ldr	r2, [r0, #12]
  408a66:	6881      	ldr	r1, [r0, #8]
  408a68:	4656      	mov	r6, sl
  408a6a:	60ca      	str	r2, [r1, #12]
  408a6c:	6091      	str	r1, [r2, #8]
  408a6e:	f8da 100c 	ldr.w	r1, [sl, #12]
  408a72:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408a76:	1f22      	subs	r2, r4, #4
  408a78:	2a24      	cmp	r2, #36	; 0x24
  408a7a:	60c1      	str	r1, [r0, #12]
  408a7c:	6088      	str	r0, [r1, #8]
  408a7e:	f200 8094 	bhi.w	408baa <_realloc_r+0x29a>
  408a82:	2a13      	cmp	r2, #19
  408a84:	d96f      	bls.n	408b66 <_realloc_r+0x256>
  408a86:	6829      	ldr	r1, [r5, #0]
  408a88:	f8ca 1008 	str.w	r1, [sl, #8]
  408a8c:	6869      	ldr	r1, [r5, #4]
  408a8e:	f8ca 100c 	str.w	r1, [sl, #12]
  408a92:	2a1b      	cmp	r2, #27
  408a94:	f200 80a2 	bhi.w	408bdc <_realloc_r+0x2cc>
  408a98:	3508      	adds	r5, #8
  408a9a:	f10a 0210 	add.w	r2, sl, #16
  408a9e:	e063      	b.n	408b68 <_realloc_r+0x258>
  408aa0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408aa4:	eba9 0a03 	sub.w	sl, r9, r3
  408aa8:	f8da 1004 	ldr.w	r1, [sl, #4]
  408aac:	f021 0103 	bic.w	r1, r1, #3
  408ab0:	1863      	adds	r3, r4, r1
  408ab2:	4293      	cmp	r3, r2
  408ab4:	f6ff af59 	blt.w	40896a <_realloc_r+0x5a>
  408ab8:	4656      	mov	r6, sl
  408aba:	e7d8      	b.n	408a6e <_realloc_r+0x15e>
  408abc:	6841      	ldr	r1, [r0, #4]
  408abe:	f021 0b03 	bic.w	fp, r1, #3
  408ac2:	44a3      	add	fp, r4
  408ac4:	f107 0010 	add.w	r0, r7, #16
  408ac8:	4583      	cmp	fp, r0
  408aca:	da56      	bge.n	408b7a <_realloc_r+0x26a>
  408acc:	f01e 0f01 	tst.w	lr, #1
  408ad0:	f47f af4b 	bne.w	40896a <_realloc_r+0x5a>
  408ad4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408ad8:	eba9 0a01 	sub.w	sl, r9, r1
  408adc:	f8da 1004 	ldr.w	r1, [sl, #4]
  408ae0:	f021 0103 	bic.w	r1, r1, #3
  408ae4:	448b      	add	fp, r1
  408ae6:	4558      	cmp	r0, fp
  408ae8:	dce2      	bgt.n	408ab0 <_realloc_r+0x1a0>
  408aea:	4656      	mov	r6, sl
  408aec:	f8da 100c 	ldr.w	r1, [sl, #12]
  408af0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408af4:	1f22      	subs	r2, r4, #4
  408af6:	2a24      	cmp	r2, #36	; 0x24
  408af8:	60c1      	str	r1, [r0, #12]
  408afa:	6088      	str	r0, [r1, #8]
  408afc:	f200 808f 	bhi.w	408c1e <_realloc_r+0x30e>
  408b00:	2a13      	cmp	r2, #19
  408b02:	f240 808a 	bls.w	408c1a <_realloc_r+0x30a>
  408b06:	6829      	ldr	r1, [r5, #0]
  408b08:	f8ca 1008 	str.w	r1, [sl, #8]
  408b0c:	6869      	ldr	r1, [r5, #4]
  408b0e:	f8ca 100c 	str.w	r1, [sl, #12]
  408b12:	2a1b      	cmp	r2, #27
  408b14:	f200 808a 	bhi.w	408c2c <_realloc_r+0x31c>
  408b18:	3508      	adds	r5, #8
  408b1a:	f10a 0210 	add.w	r2, sl, #16
  408b1e:	6829      	ldr	r1, [r5, #0]
  408b20:	6011      	str	r1, [r2, #0]
  408b22:	6869      	ldr	r1, [r5, #4]
  408b24:	6051      	str	r1, [r2, #4]
  408b26:	68a9      	ldr	r1, [r5, #8]
  408b28:	6091      	str	r1, [r2, #8]
  408b2a:	eb0a 0107 	add.w	r1, sl, r7
  408b2e:	ebab 0207 	sub.w	r2, fp, r7
  408b32:	f042 0201 	orr.w	r2, r2, #1
  408b36:	6099      	str	r1, [r3, #8]
  408b38:	604a      	str	r2, [r1, #4]
  408b3a:	f8da 3004 	ldr.w	r3, [sl, #4]
  408b3e:	f003 0301 	and.w	r3, r3, #1
  408b42:	431f      	orrs	r7, r3
  408b44:	4640      	mov	r0, r8
  408b46:	f8ca 7004 	str.w	r7, [sl, #4]
  408b4a:	f7ff fedb 	bl	408904 <__malloc_unlock>
  408b4e:	e751      	b.n	4089f4 <_realloc_r+0xe4>
  408b50:	682b      	ldr	r3, [r5, #0]
  408b52:	6003      	str	r3, [r0, #0]
  408b54:	686b      	ldr	r3, [r5, #4]
  408b56:	6043      	str	r3, [r0, #4]
  408b58:	2a1b      	cmp	r2, #27
  408b5a:	d82d      	bhi.n	408bb8 <_realloc_r+0x2a8>
  408b5c:	f100 0308 	add.w	r3, r0, #8
  408b60:	f105 0208 	add.w	r2, r5, #8
  408b64:	e71b      	b.n	40899e <_realloc_r+0x8e>
  408b66:	4632      	mov	r2, r6
  408b68:	6829      	ldr	r1, [r5, #0]
  408b6a:	6011      	str	r1, [r2, #0]
  408b6c:	6869      	ldr	r1, [r5, #4]
  408b6e:	6051      	str	r1, [r2, #4]
  408b70:	68a9      	ldr	r1, [r5, #8]
  408b72:	6091      	str	r1, [r2, #8]
  408b74:	461c      	mov	r4, r3
  408b76:	46d1      	mov	r9, sl
  408b78:	e72a      	b.n	4089d0 <_realloc_r+0xc0>
  408b7a:	eb09 0107 	add.w	r1, r9, r7
  408b7e:	ebab 0b07 	sub.w	fp, fp, r7
  408b82:	f04b 0201 	orr.w	r2, fp, #1
  408b86:	6099      	str	r1, [r3, #8]
  408b88:	604a      	str	r2, [r1, #4]
  408b8a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408b8e:	f003 0301 	and.w	r3, r3, #1
  408b92:	431f      	orrs	r7, r3
  408b94:	4640      	mov	r0, r8
  408b96:	f845 7c04 	str.w	r7, [r5, #-4]
  408b9a:	f7ff feb3 	bl	408904 <__malloc_unlock>
  408b9e:	462e      	mov	r6, r5
  408ba0:	e728      	b.n	4089f4 <_realloc_r+0xe4>
  408ba2:	4629      	mov	r1, r5
  408ba4:	f7ff fdf6 	bl	408794 <memmove>
  408ba8:	e6ff      	b.n	4089aa <_realloc_r+0x9a>
  408baa:	4629      	mov	r1, r5
  408bac:	4630      	mov	r0, r6
  408bae:	461c      	mov	r4, r3
  408bb0:	46d1      	mov	r9, sl
  408bb2:	f7ff fdef 	bl	408794 <memmove>
  408bb6:	e70b      	b.n	4089d0 <_realloc_r+0xc0>
  408bb8:	68ab      	ldr	r3, [r5, #8]
  408bba:	6083      	str	r3, [r0, #8]
  408bbc:	68eb      	ldr	r3, [r5, #12]
  408bbe:	60c3      	str	r3, [r0, #12]
  408bc0:	2a24      	cmp	r2, #36	; 0x24
  408bc2:	d017      	beq.n	408bf4 <_realloc_r+0x2e4>
  408bc4:	f100 0310 	add.w	r3, r0, #16
  408bc8:	f105 0210 	add.w	r2, r5, #16
  408bcc:	e6e7      	b.n	40899e <_realloc_r+0x8e>
  408bce:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408bd2:	f023 0303 	bic.w	r3, r3, #3
  408bd6:	441c      	add	r4, r3
  408bd8:	462e      	mov	r6, r5
  408bda:	e6f9      	b.n	4089d0 <_realloc_r+0xc0>
  408bdc:	68a9      	ldr	r1, [r5, #8]
  408bde:	f8ca 1010 	str.w	r1, [sl, #16]
  408be2:	68e9      	ldr	r1, [r5, #12]
  408be4:	f8ca 1014 	str.w	r1, [sl, #20]
  408be8:	2a24      	cmp	r2, #36	; 0x24
  408bea:	d00c      	beq.n	408c06 <_realloc_r+0x2f6>
  408bec:	3510      	adds	r5, #16
  408bee:	f10a 0218 	add.w	r2, sl, #24
  408bf2:	e7b9      	b.n	408b68 <_realloc_r+0x258>
  408bf4:	692b      	ldr	r3, [r5, #16]
  408bf6:	6103      	str	r3, [r0, #16]
  408bf8:	696b      	ldr	r3, [r5, #20]
  408bfa:	6143      	str	r3, [r0, #20]
  408bfc:	f105 0218 	add.w	r2, r5, #24
  408c00:	f100 0318 	add.w	r3, r0, #24
  408c04:	e6cb      	b.n	40899e <_realloc_r+0x8e>
  408c06:	692a      	ldr	r2, [r5, #16]
  408c08:	f8ca 2018 	str.w	r2, [sl, #24]
  408c0c:	696a      	ldr	r2, [r5, #20]
  408c0e:	f8ca 201c 	str.w	r2, [sl, #28]
  408c12:	3518      	adds	r5, #24
  408c14:	f10a 0220 	add.w	r2, sl, #32
  408c18:	e7a6      	b.n	408b68 <_realloc_r+0x258>
  408c1a:	4632      	mov	r2, r6
  408c1c:	e77f      	b.n	408b1e <_realloc_r+0x20e>
  408c1e:	4629      	mov	r1, r5
  408c20:	4630      	mov	r0, r6
  408c22:	9301      	str	r3, [sp, #4]
  408c24:	f7ff fdb6 	bl	408794 <memmove>
  408c28:	9b01      	ldr	r3, [sp, #4]
  408c2a:	e77e      	b.n	408b2a <_realloc_r+0x21a>
  408c2c:	68a9      	ldr	r1, [r5, #8]
  408c2e:	f8ca 1010 	str.w	r1, [sl, #16]
  408c32:	68e9      	ldr	r1, [r5, #12]
  408c34:	f8ca 1014 	str.w	r1, [sl, #20]
  408c38:	2a24      	cmp	r2, #36	; 0x24
  408c3a:	d003      	beq.n	408c44 <_realloc_r+0x334>
  408c3c:	3510      	adds	r5, #16
  408c3e:	f10a 0218 	add.w	r2, sl, #24
  408c42:	e76c      	b.n	408b1e <_realloc_r+0x20e>
  408c44:	692a      	ldr	r2, [r5, #16]
  408c46:	f8ca 2018 	str.w	r2, [sl, #24]
  408c4a:	696a      	ldr	r2, [r5, #20]
  408c4c:	f8ca 201c 	str.w	r2, [sl, #28]
  408c50:	3518      	adds	r5, #24
  408c52:	f10a 0220 	add.w	r2, sl, #32
  408c56:	e762      	b.n	408b1e <_realloc_r+0x20e>
  408c58:	20002918 	.word	0x20002918

00408c5c <_sbrk_r>:
  408c5c:	b538      	push	{r3, r4, r5, lr}
  408c5e:	4c07      	ldr	r4, [pc, #28]	; (408c7c <_sbrk_r+0x20>)
  408c60:	2300      	movs	r3, #0
  408c62:	4605      	mov	r5, r0
  408c64:	4608      	mov	r0, r1
  408c66:	6023      	str	r3, [r4, #0]
  408c68:	f7fe fd36 	bl	4076d8 <_sbrk>
  408c6c:	1c43      	adds	r3, r0, #1
  408c6e:	d000      	beq.n	408c72 <_sbrk_r+0x16>
  408c70:	bd38      	pop	{r3, r4, r5, pc}
  408c72:	6823      	ldr	r3, [r4, #0]
  408c74:	2b00      	cmp	r3, #0
  408c76:	d0fb      	beq.n	408c70 <_sbrk_r+0x14>
  408c78:	602b      	str	r3, [r5, #0]
  408c7a:	bd38      	pop	{r3, r4, r5, pc}
  408c7c:	200046bc 	.word	0x200046bc

00408c80 <snprintf>:
  408c80:	b40c      	push	{r2, r3}
  408c82:	b5f0      	push	{r4, r5, r6, r7, lr}
  408c84:	4b23      	ldr	r3, [pc, #140]	; (408d14 <snprintf+0x94>)
  408c86:	1e0c      	subs	r4, r1, #0
  408c88:	b09d      	sub	sp, #116	; 0x74
  408c8a:	681d      	ldr	r5, [r3, #0]
  408c8c:	db3d      	blt.n	408d0a <snprintf+0x8a>
  408c8e:	f44f 7302 	mov.w	r3, #520	; 0x208
  408c92:	9002      	str	r0, [sp, #8]
  408c94:	9006      	str	r0, [sp, #24]
  408c96:	f8ad 3014 	strh.w	r3, [sp, #20]
  408c9a:	ae23      	add	r6, sp, #140	; 0x8c
  408c9c:	d017      	beq.n	408cce <snprintf+0x4e>
  408c9e:	3c01      	subs	r4, #1
  408ca0:	9a22      	ldr	r2, [sp, #136]	; 0x88
  408ca2:	9404      	str	r4, [sp, #16]
  408ca4:	4633      	mov	r3, r6
  408ca6:	f64f 77ff 	movw	r7, #65535	; 0xffff
  408caa:	a902      	add	r1, sp, #8
  408cac:	4628      	mov	r0, r5
  408cae:	9407      	str	r4, [sp, #28]
  408cb0:	9601      	str	r6, [sp, #4]
  408cb2:	f8ad 7016 	strh.w	r7, [sp, #22]
  408cb6:	f000 f8b3 	bl	408e20 <_svfprintf_r>
  408cba:	1c42      	adds	r2, r0, #1
  408cbc:	db1b      	blt.n	408cf6 <snprintf+0x76>
  408cbe:	9b02      	ldr	r3, [sp, #8]
  408cc0:	2200      	movs	r2, #0
  408cc2:	701a      	strb	r2, [r3, #0]
  408cc4:	b01d      	add	sp, #116	; 0x74
  408cc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  408cca:	b002      	add	sp, #8
  408ccc:	4770      	bx	lr
  408cce:	4633      	mov	r3, r6
  408cd0:	f64f 77ff 	movw	r7, #65535	; 0xffff
  408cd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
  408cd6:	9404      	str	r4, [sp, #16]
  408cd8:	a902      	add	r1, sp, #8
  408cda:	4628      	mov	r0, r5
  408cdc:	9407      	str	r4, [sp, #28]
  408cde:	9601      	str	r6, [sp, #4]
  408ce0:	f8ad 7016 	strh.w	r7, [sp, #22]
  408ce4:	f000 f89c 	bl	408e20 <_svfprintf_r>
  408ce8:	1c43      	adds	r3, r0, #1
  408cea:	db07      	blt.n	408cfc <snprintf+0x7c>
  408cec:	b01d      	add	sp, #116	; 0x74
  408cee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  408cf2:	b002      	add	sp, #8
  408cf4:	4770      	bx	lr
  408cf6:	238b      	movs	r3, #139	; 0x8b
  408cf8:	602b      	str	r3, [r5, #0]
  408cfa:	e7e0      	b.n	408cbe <snprintf+0x3e>
  408cfc:	238b      	movs	r3, #139	; 0x8b
  408cfe:	602b      	str	r3, [r5, #0]
  408d00:	b01d      	add	sp, #116	; 0x74
  408d02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  408d06:	b002      	add	sp, #8
  408d08:	4770      	bx	lr
  408d0a:	238b      	movs	r3, #139	; 0x8b
  408d0c:	602b      	str	r3, [r5, #0]
  408d0e:	f04f 30ff 	mov.w	r0, #4294967295
  408d12:	e7eb      	b.n	408cec <snprintf+0x6c>
  408d14:	200024ec 	.word	0x200024ec
	...

00408d40 <strlen>:
  408d40:	f890 f000 	pld	[r0]
  408d44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  408d48:	f020 0107 	bic.w	r1, r0, #7
  408d4c:	f06f 0c00 	mvn.w	ip, #0
  408d50:	f010 0407 	ands.w	r4, r0, #7
  408d54:	f891 f020 	pld	[r1, #32]
  408d58:	f040 8049 	bne.w	408dee <strlen+0xae>
  408d5c:	f04f 0400 	mov.w	r4, #0
  408d60:	f06f 0007 	mvn.w	r0, #7
  408d64:	e9d1 2300 	ldrd	r2, r3, [r1]
  408d68:	f891 f040 	pld	[r1, #64]	; 0x40
  408d6c:	f100 0008 	add.w	r0, r0, #8
  408d70:	fa82 f24c 	uadd8	r2, r2, ip
  408d74:	faa4 f28c 	sel	r2, r4, ip
  408d78:	fa83 f34c 	uadd8	r3, r3, ip
  408d7c:	faa2 f38c 	sel	r3, r2, ip
  408d80:	bb4b      	cbnz	r3, 408dd6 <strlen+0x96>
  408d82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  408d86:	fa82 f24c 	uadd8	r2, r2, ip
  408d8a:	f100 0008 	add.w	r0, r0, #8
  408d8e:	faa4 f28c 	sel	r2, r4, ip
  408d92:	fa83 f34c 	uadd8	r3, r3, ip
  408d96:	faa2 f38c 	sel	r3, r2, ip
  408d9a:	b9e3      	cbnz	r3, 408dd6 <strlen+0x96>
  408d9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  408da0:	fa82 f24c 	uadd8	r2, r2, ip
  408da4:	f100 0008 	add.w	r0, r0, #8
  408da8:	faa4 f28c 	sel	r2, r4, ip
  408dac:	fa83 f34c 	uadd8	r3, r3, ip
  408db0:	faa2 f38c 	sel	r3, r2, ip
  408db4:	b97b      	cbnz	r3, 408dd6 <strlen+0x96>
  408db6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  408dba:	f101 0120 	add.w	r1, r1, #32
  408dbe:	fa82 f24c 	uadd8	r2, r2, ip
  408dc2:	f100 0008 	add.w	r0, r0, #8
  408dc6:	faa4 f28c 	sel	r2, r4, ip
  408dca:	fa83 f34c 	uadd8	r3, r3, ip
  408dce:	faa2 f38c 	sel	r3, r2, ip
  408dd2:	2b00      	cmp	r3, #0
  408dd4:	d0c6      	beq.n	408d64 <strlen+0x24>
  408dd6:	2a00      	cmp	r2, #0
  408dd8:	bf04      	itt	eq
  408dda:	3004      	addeq	r0, #4
  408ddc:	461a      	moveq	r2, r3
  408dde:	ba12      	rev	r2, r2
  408de0:	fab2 f282 	clz	r2, r2
  408de4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  408de8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  408dec:	4770      	bx	lr
  408dee:	e9d1 2300 	ldrd	r2, r3, [r1]
  408df2:	f004 0503 	and.w	r5, r4, #3
  408df6:	f1c4 0000 	rsb	r0, r4, #0
  408dfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  408dfe:	f014 0f04 	tst.w	r4, #4
  408e02:	f891 f040 	pld	[r1, #64]	; 0x40
  408e06:	fa0c f505 	lsl.w	r5, ip, r5
  408e0a:	ea62 0205 	orn	r2, r2, r5
  408e0e:	bf1c      	itt	ne
  408e10:	ea63 0305 	ornne	r3, r3, r5
  408e14:	4662      	movne	r2, ip
  408e16:	f04f 0400 	mov.w	r4, #0
  408e1a:	e7a9      	b.n	408d70 <strlen+0x30>
  408e1c:	0000      	movs	r0, r0
	...

00408e20 <_svfprintf_r>:
  408e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408e24:	b0c1      	sub	sp, #260	; 0x104
  408e26:	460c      	mov	r4, r1
  408e28:	9107      	str	r1, [sp, #28]
  408e2a:	4692      	mov	sl, r2
  408e2c:	930b      	str	r3, [sp, #44]	; 0x2c
  408e2e:	9008      	str	r0, [sp, #32]
  408e30:	f002 fba4 	bl	40b57c <_localeconv_r>
  408e34:	6803      	ldr	r3, [r0, #0]
  408e36:	9314      	str	r3, [sp, #80]	; 0x50
  408e38:	4618      	mov	r0, r3
  408e3a:	f7ff ff81 	bl	408d40 <strlen>
  408e3e:	89a3      	ldrh	r3, [r4, #12]
  408e40:	9013      	str	r0, [sp, #76]	; 0x4c
  408e42:	0619      	lsls	r1, r3, #24
  408e44:	d503      	bpl.n	408e4e <_svfprintf_r+0x2e>
  408e46:	6923      	ldr	r3, [r4, #16]
  408e48:	2b00      	cmp	r3, #0
  408e4a:	f001 801b 	beq.w	409e84 <_svfprintf_r+0x1064>
  408e4e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 4090a0 <_svfprintf_r+0x280>
  408e52:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  408e56:	2300      	movs	r3, #0
  408e58:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  408e5c:	930f      	str	r3, [sp, #60]	; 0x3c
  408e5e:	9325      	str	r3, [sp, #148]	; 0x94
  408e60:	9324      	str	r3, [sp, #144]	; 0x90
  408e62:	9312      	str	r3, [sp, #72]	; 0x48
  408e64:	9315      	str	r3, [sp, #84]	; 0x54
  408e66:	9305      	str	r3, [sp, #20]
  408e68:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
  408e6c:	46c8      	mov	r8, r9
  408e6e:	f89a 3000 	ldrb.w	r3, [sl]
  408e72:	4654      	mov	r4, sl
  408e74:	b1e3      	cbz	r3, 408eb0 <_svfprintf_r+0x90>
  408e76:	2b25      	cmp	r3, #37	; 0x25
  408e78:	d102      	bne.n	408e80 <_svfprintf_r+0x60>
  408e7a:	e019      	b.n	408eb0 <_svfprintf_r+0x90>
  408e7c:	2b25      	cmp	r3, #37	; 0x25
  408e7e:	d003      	beq.n	408e88 <_svfprintf_r+0x68>
  408e80:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  408e84:	2b00      	cmp	r3, #0
  408e86:	d1f9      	bne.n	408e7c <_svfprintf_r+0x5c>
  408e88:	eba4 050a 	sub.w	r5, r4, sl
  408e8c:	b185      	cbz	r5, 408eb0 <_svfprintf_r+0x90>
  408e8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408e90:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408e92:	f8c8 a000 	str.w	sl, [r8]
  408e96:	3301      	adds	r3, #1
  408e98:	442a      	add	r2, r5
  408e9a:	2b07      	cmp	r3, #7
  408e9c:	f8c8 5004 	str.w	r5, [r8, #4]
  408ea0:	9225      	str	r2, [sp, #148]	; 0x94
  408ea2:	9324      	str	r3, [sp, #144]	; 0x90
  408ea4:	dc7f      	bgt.n	408fa6 <_svfprintf_r+0x186>
  408ea6:	f108 0808 	add.w	r8, r8, #8
  408eaa:	9b05      	ldr	r3, [sp, #20]
  408eac:	442b      	add	r3, r5
  408eae:	9305      	str	r3, [sp, #20]
  408eb0:	7823      	ldrb	r3, [r4, #0]
  408eb2:	2b00      	cmp	r3, #0
  408eb4:	d07f      	beq.n	408fb6 <_svfprintf_r+0x196>
  408eb6:	2300      	movs	r3, #0
  408eb8:	461a      	mov	r2, r3
  408eba:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  408ebe:	4619      	mov	r1, r3
  408ec0:	9309      	str	r3, [sp, #36]	; 0x24
  408ec2:	469b      	mov	fp, r3
  408ec4:	f04f 30ff 	mov.w	r0, #4294967295
  408ec8:	7863      	ldrb	r3, [r4, #1]
  408eca:	9006      	str	r0, [sp, #24]
  408ecc:	f104 0a01 	add.w	sl, r4, #1
  408ed0:	f10a 0a01 	add.w	sl, sl, #1
  408ed4:	f1a3 0020 	sub.w	r0, r3, #32
  408ed8:	2858      	cmp	r0, #88	; 0x58
  408eda:	f200 83d3 	bhi.w	409684 <_svfprintf_r+0x864>
  408ede:	e8df f010 	tbh	[pc, r0, lsl #1]
  408ee2:	023f      	.short	0x023f
  408ee4:	03d103d1 	.word	0x03d103d1
  408ee8:	03d10247 	.word	0x03d10247
  408eec:	03d103d1 	.word	0x03d103d1
  408ef0:	03d103d1 	.word	0x03d103d1
  408ef4:	024c03d1 	.word	0x024c03d1
  408ef8:	03d1020a 	.word	0x03d1020a
  408efc:	0273005d 	.word	0x0273005d
  408f00:	028e03d1 	.word	0x028e03d1
  408f04:	03c103c1 	.word	0x03c103c1
  408f08:	03c103c1 	.word	0x03c103c1
  408f0c:	03c103c1 	.word	0x03c103c1
  408f10:	03c103c1 	.word	0x03c103c1
  408f14:	03d103c1 	.word	0x03d103c1
  408f18:	03d103d1 	.word	0x03d103d1
  408f1c:	03d103d1 	.word	0x03d103d1
  408f20:	03d103d1 	.word	0x03d103d1
  408f24:	03d103d1 	.word	0x03d103d1
  408f28:	033f03d1 	.word	0x033f03d1
  408f2c:	03d1035f 	.word	0x03d1035f
  408f30:	03d1035f 	.word	0x03d1035f
  408f34:	03d103d1 	.word	0x03d103d1
  408f38:	03aa03d1 	.word	0x03aa03d1
  408f3c:	03d103d1 	.word	0x03d103d1
  408f40:	03d103af 	.word	0x03d103af
  408f44:	03d103d1 	.word	0x03d103d1
  408f48:	03d103d1 	.word	0x03d103d1
  408f4c:	03d10261 	.word	0x03d10261
  408f50:	032603d1 	.word	0x032603d1
  408f54:	03d103d1 	.word	0x03d103d1
  408f58:	03d103d1 	.word	0x03d103d1
  408f5c:	03d103d1 	.word	0x03d103d1
  408f60:	03d103d1 	.word	0x03d103d1
  408f64:	03d103d1 	.word	0x03d103d1
  408f68:	02e302ce 	.word	0x02e302ce
  408f6c:	035f035f 	.word	0x035f035f
  408f70:	0293035f 	.word	0x0293035f
  408f74:	03d102e3 	.word	0x03d102e3
  408f78:	029803d1 	.word	0x029803d1
  408f7c:	02a503d1 	.word	0x02a503d1
  408f80:	02bc01d3 	.word	0x02bc01d3
  408f84:	03d1020f 	.word	0x03d1020f
  408f88:	03d101e8 	.word	0x03d101e8
  408f8c:	03d1007e 	.word	0x03d1007e
  408f90:	021403d1 	.word	0x021403d1
  408f94:	9809      	ldr	r0, [sp, #36]	; 0x24
  408f96:	930b      	str	r3, [sp, #44]	; 0x2c
  408f98:	4240      	negs	r0, r0
  408f9a:	9009      	str	r0, [sp, #36]	; 0x24
  408f9c:	f04b 0b04 	orr.w	fp, fp, #4
  408fa0:	f89a 3000 	ldrb.w	r3, [sl]
  408fa4:	e794      	b.n	408ed0 <_svfprintf_r+0xb0>
  408fa6:	aa23      	add	r2, sp, #140	; 0x8c
  408fa8:	9907      	ldr	r1, [sp, #28]
  408faa:	9808      	ldr	r0, [sp, #32]
  408fac:	f002 fdf0 	bl	40bb90 <__ssprint_r>
  408fb0:	b940      	cbnz	r0, 408fc4 <_svfprintf_r+0x1a4>
  408fb2:	46c8      	mov	r8, r9
  408fb4:	e779      	b.n	408eaa <_svfprintf_r+0x8a>
  408fb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408fb8:	b123      	cbz	r3, 408fc4 <_svfprintf_r+0x1a4>
  408fba:	9808      	ldr	r0, [sp, #32]
  408fbc:	9907      	ldr	r1, [sp, #28]
  408fbe:	aa23      	add	r2, sp, #140	; 0x8c
  408fc0:	f002 fde6 	bl	40bb90 <__ssprint_r>
  408fc4:	9b07      	ldr	r3, [sp, #28]
  408fc6:	899b      	ldrh	r3, [r3, #12]
  408fc8:	f013 0f40 	tst.w	r3, #64	; 0x40
  408fcc:	9b05      	ldr	r3, [sp, #20]
  408fce:	bf18      	it	ne
  408fd0:	f04f 33ff 	movne.w	r3, #4294967295
  408fd4:	9305      	str	r3, [sp, #20]
  408fd6:	9805      	ldr	r0, [sp, #20]
  408fd8:	b041      	add	sp, #260	; 0x104
  408fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fde:	f01b 0f20 	tst.w	fp, #32
  408fe2:	930d      	str	r3, [sp, #52]	; 0x34
  408fe4:	f040 81e5 	bne.w	4093b2 <_svfprintf_r+0x592>
  408fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408fea:	f01b 0f10 	tst.w	fp, #16
  408fee:	4613      	mov	r3, r2
  408ff0:	f040 8588 	bne.w	409b04 <_svfprintf_r+0xce4>
  408ff4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  408ff8:	f000 8584 	beq.w	409b04 <_svfprintf_r+0xce4>
  408ffc:	8814      	ldrh	r4, [r2, #0]
  408ffe:	3204      	adds	r2, #4
  409000:	2500      	movs	r5, #0
  409002:	2301      	movs	r3, #1
  409004:	920b      	str	r2, [sp, #44]	; 0x2c
  409006:	2700      	movs	r7, #0
  409008:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40900c:	9906      	ldr	r1, [sp, #24]
  40900e:	1c4a      	adds	r2, r1, #1
  409010:	f000 826d 	beq.w	4094ee <_svfprintf_r+0x6ce>
  409014:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  409018:	9203      	str	r2, [sp, #12]
  40901a:	ea54 0205 	orrs.w	r2, r4, r5
  40901e:	f040 826c 	bne.w	4094fa <_svfprintf_r+0x6da>
  409022:	2900      	cmp	r1, #0
  409024:	f040 8451 	bne.w	4098ca <_svfprintf_r+0xaaa>
  409028:	2b00      	cmp	r3, #0
  40902a:	f040 850b 	bne.w	409a44 <_svfprintf_r+0xc24>
  40902e:	f01b 0301 	ands.w	r3, fp, #1
  409032:	930a      	str	r3, [sp, #40]	; 0x28
  409034:	f000 861a 	beq.w	409c6c <_svfprintf_r+0xe4c>
  409038:	ae40      	add	r6, sp, #256	; 0x100
  40903a:	2330      	movs	r3, #48	; 0x30
  40903c:	f806 3d41 	strb.w	r3, [r6, #-65]!
  409040:	9b06      	ldr	r3, [sp, #24]
  409042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409044:	4293      	cmp	r3, r2
  409046:	bfb8      	it	lt
  409048:	4613      	movlt	r3, r2
  40904a:	9304      	str	r3, [sp, #16]
  40904c:	2300      	movs	r3, #0
  40904e:	930e      	str	r3, [sp, #56]	; 0x38
  409050:	b117      	cbz	r7, 409058 <_svfprintf_r+0x238>
  409052:	9b04      	ldr	r3, [sp, #16]
  409054:	3301      	adds	r3, #1
  409056:	9304      	str	r3, [sp, #16]
  409058:	9b03      	ldr	r3, [sp, #12]
  40905a:	f013 0302 	ands.w	r3, r3, #2
  40905e:	930c      	str	r3, [sp, #48]	; 0x30
  409060:	d002      	beq.n	409068 <_svfprintf_r+0x248>
  409062:	9b04      	ldr	r3, [sp, #16]
  409064:	3302      	adds	r3, #2
  409066:	9304      	str	r3, [sp, #16]
  409068:	9b03      	ldr	r3, [sp, #12]
  40906a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40906e:	f040 8320 	bne.w	4096b2 <_svfprintf_r+0x892>
  409072:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409074:	9a04      	ldr	r2, [sp, #16]
  409076:	eba3 0b02 	sub.w	fp, r3, r2
  40907a:	f1bb 0f00 	cmp.w	fp, #0
  40907e:	f340 8318 	ble.w	4096b2 <_svfprintf_r+0x892>
  409082:	f1bb 0f10 	cmp.w	fp, #16
  409086:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409088:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40908a:	dd30      	ble.n	4090ee <_svfprintf_r+0x2ce>
  40908c:	4643      	mov	r3, r8
  40908e:	4621      	mov	r1, r4
  409090:	46a8      	mov	r8, r5
  409092:	2710      	movs	r7, #16
  409094:	9c08      	ldr	r4, [sp, #32]
  409096:	9d07      	ldr	r5, [sp, #28]
  409098:	e00d      	b.n	4090b6 <_svfprintf_r+0x296>
  40909a:	bf00      	nop
  40909c:	f3af 8000 	nop.w
	...
  4090a8:	f1ab 0b10 	sub.w	fp, fp, #16
  4090ac:	f1bb 0f10 	cmp.w	fp, #16
  4090b0:	f103 0308 	add.w	r3, r3, #8
  4090b4:	dd18      	ble.n	4090e8 <_svfprintf_r+0x2c8>
  4090b6:	3201      	adds	r2, #1
  4090b8:	48b7      	ldr	r0, [pc, #732]	; (409398 <_svfprintf_r+0x578>)
  4090ba:	9224      	str	r2, [sp, #144]	; 0x90
  4090bc:	3110      	adds	r1, #16
  4090be:	2a07      	cmp	r2, #7
  4090c0:	9125      	str	r1, [sp, #148]	; 0x94
  4090c2:	e883 0081 	stmia.w	r3, {r0, r7}
  4090c6:	ddef      	ble.n	4090a8 <_svfprintf_r+0x288>
  4090c8:	aa23      	add	r2, sp, #140	; 0x8c
  4090ca:	4629      	mov	r1, r5
  4090cc:	4620      	mov	r0, r4
  4090ce:	f002 fd5f 	bl	40bb90 <__ssprint_r>
  4090d2:	2800      	cmp	r0, #0
  4090d4:	f47f af76 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  4090d8:	f1ab 0b10 	sub.w	fp, fp, #16
  4090dc:	f1bb 0f10 	cmp.w	fp, #16
  4090e0:	9925      	ldr	r1, [sp, #148]	; 0x94
  4090e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4090e4:	464b      	mov	r3, r9
  4090e6:	dce6      	bgt.n	4090b6 <_svfprintf_r+0x296>
  4090e8:	4645      	mov	r5, r8
  4090ea:	460c      	mov	r4, r1
  4090ec:	4698      	mov	r8, r3
  4090ee:	3201      	adds	r2, #1
  4090f0:	4ba9      	ldr	r3, [pc, #676]	; (409398 <_svfprintf_r+0x578>)
  4090f2:	9224      	str	r2, [sp, #144]	; 0x90
  4090f4:	445c      	add	r4, fp
  4090f6:	2a07      	cmp	r2, #7
  4090f8:	9425      	str	r4, [sp, #148]	; 0x94
  4090fa:	e888 0808 	stmia.w	r8, {r3, fp}
  4090fe:	f300 84a6 	bgt.w	409a4e <_svfprintf_r+0xc2e>
  409102:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  409106:	f108 0808 	add.w	r8, r8, #8
  40910a:	b177      	cbz	r7, 40912a <_svfprintf_r+0x30a>
  40910c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40910e:	3301      	adds	r3, #1
  409110:	3401      	adds	r4, #1
  409112:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  409116:	2201      	movs	r2, #1
  409118:	2b07      	cmp	r3, #7
  40911a:	9425      	str	r4, [sp, #148]	; 0x94
  40911c:	9324      	str	r3, [sp, #144]	; 0x90
  40911e:	e888 0006 	stmia.w	r8, {r1, r2}
  409122:	f300 83f4 	bgt.w	40990e <_svfprintf_r+0xaee>
  409126:	f108 0808 	add.w	r8, r8, #8
  40912a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40912c:	b16b      	cbz	r3, 40914a <_svfprintf_r+0x32a>
  40912e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409130:	3301      	adds	r3, #1
  409132:	3402      	adds	r4, #2
  409134:	a91c      	add	r1, sp, #112	; 0x70
  409136:	2202      	movs	r2, #2
  409138:	2b07      	cmp	r3, #7
  40913a:	9425      	str	r4, [sp, #148]	; 0x94
  40913c:	9324      	str	r3, [sp, #144]	; 0x90
  40913e:	e888 0006 	stmia.w	r8, {r1, r2}
  409142:	f300 83d9 	bgt.w	4098f8 <_svfprintf_r+0xad8>
  409146:	f108 0808 	add.w	r8, r8, #8
  40914a:	2d80      	cmp	r5, #128	; 0x80
  40914c:	f000 8322 	beq.w	409794 <_svfprintf_r+0x974>
  409150:	9b06      	ldr	r3, [sp, #24]
  409152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409154:	1a9f      	subs	r7, r3, r2
  409156:	2f00      	cmp	r7, #0
  409158:	dd36      	ble.n	4091c8 <_svfprintf_r+0x3a8>
  40915a:	2f10      	cmp	r7, #16
  40915c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40915e:	4d8f      	ldr	r5, [pc, #572]	; (40939c <_svfprintf_r+0x57c>)
  409160:	dd27      	ble.n	4091b2 <_svfprintf_r+0x392>
  409162:	4642      	mov	r2, r8
  409164:	4621      	mov	r1, r4
  409166:	46b0      	mov	r8, r6
  409168:	f04f 0b10 	mov.w	fp, #16
  40916c:	462e      	mov	r6, r5
  40916e:	9c08      	ldr	r4, [sp, #32]
  409170:	9d07      	ldr	r5, [sp, #28]
  409172:	e004      	b.n	40917e <_svfprintf_r+0x35e>
  409174:	3f10      	subs	r7, #16
  409176:	2f10      	cmp	r7, #16
  409178:	f102 0208 	add.w	r2, r2, #8
  40917c:	dd15      	ble.n	4091aa <_svfprintf_r+0x38a>
  40917e:	3301      	adds	r3, #1
  409180:	3110      	adds	r1, #16
  409182:	2b07      	cmp	r3, #7
  409184:	9125      	str	r1, [sp, #148]	; 0x94
  409186:	9324      	str	r3, [sp, #144]	; 0x90
  409188:	e882 0840 	stmia.w	r2, {r6, fp}
  40918c:	ddf2      	ble.n	409174 <_svfprintf_r+0x354>
  40918e:	aa23      	add	r2, sp, #140	; 0x8c
  409190:	4629      	mov	r1, r5
  409192:	4620      	mov	r0, r4
  409194:	f002 fcfc 	bl	40bb90 <__ssprint_r>
  409198:	2800      	cmp	r0, #0
  40919a:	f47f af13 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  40919e:	3f10      	subs	r7, #16
  4091a0:	2f10      	cmp	r7, #16
  4091a2:	9925      	ldr	r1, [sp, #148]	; 0x94
  4091a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4091a6:	464a      	mov	r2, r9
  4091a8:	dce9      	bgt.n	40917e <_svfprintf_r+0x35e>
  4091aa:	4635      	mov	r5, r6
  4091ac:	460c      	mov	r4, r1
  4091ae:	4646      	mov	r6, r8
  4091b0:	4690      	mov	r8, r2
  4091b2:	3301      	adds	r3, #1
  4091b4:	443c      	add	r4, r7
  4091b6:	2b07      	cmp	r3, #7
  4091b8:	9425      	str	r4, [sp, #148]	; 0x94
  4091ba:	9324      	str	r3, [sp, #144]	; 0x90
  4091bc:	e888 00a0 	stmia.w	r8, {r5, r7}
  4091c0:	f300 838f 	bgt.w	4098e2 <_svfprintf_r+0xac2>
  4091c4:	f108 0808 	add.w	r8, r8, #8
  4091c8:	9b03      	ldr	r3, [sp, #12]
  4091ca:	05df      	lsls	r7, r3, #23
  4091cc:	f100 8273 	bmi.w	4096b6 <_svfprintf_r+0x896>
  4091d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4091d2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4091d4:	f8c8 6000 	str.w	r6, [r8]
  4091d8:	3301      	adds	r3, #1
  4091da:	440c      	add	r4, r1
  4091dc:	2b07      	cmp	r3, #7
  4091de:	9425      	str	r4, [sp, #148]	; 0x94
  4091e0:	f8c8 1004 	str.w	r1, [r8, #4]
  4091e4:	9324      	str	r3, [sp, #144]	; 0x90
  4091e6:	f300 835b 	bgt.w	4098a0 <_svfprintf_r+0xa80>
  4091ea:	f108 0808 	add.w	r8, r8, #8
  4091ee:	9b03      	ldr	r3, [sp, #12]
  4091f0:	075b      	lsls	r3, r3, #29
  4091f2:	d53a      	bpl.n	40926a <_svfprintf_r+0x44a>
  4091f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4091f6:	9a04      	ldr	r2, [sp, #16]
  4091f8:	1a9d      	subs	r5, r3, r2
  4091fa:	2d00      	cmp	r5, #0
  4091fc:	dd35      	ble.n	40926a <_svfprintf_r+0x44a>
  4091fe:	2d10      	cmp	r5, #16
  409200:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409202:	dd20      	ble.n	409246 <_svfprintf_r+0x426>
  409204:	2610      	movs	r6, #16
  409206:	9f08      	ldr	r7, [sp, #32]
  409208:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40920c:	e004      	b.n	409218 <_svfprintf_r+0x3f8>
  40920e:	3d10      	subs	r5, #16
  409210:	2d10      	cmp	r5, #16
  409212:	f108 0808 	add.w	r8, r8, #8
  409216:	dd16      	ble.n	409246 <_svfprintf_r+0x426>
  409218:	3301      	adds	r3, #1
  40921a:	4a5f      	ldr	r2, [pc, #380]	; (409398 <_svfprintf_r+0x578>)
  40921c:	9324      	str	r3, [sp, #144]	; 0x90
  40921e:	3410      	adds	r4, #16
  409220:	2b07      	cmp	r3, #7
  409222:	9425      	str	r4, [sp, #148]	; 0x94
  409224:	e888 0044 	stmia.w	r8, {r2, r6}
  409228:	ddf1      	ble.n	40920e <_svfprintf_r+0x3ee>
  40922a:	aa23      	add	r2, sp, #140	; 0x8c
  40922c:	4659      	mov	r1, fp
  40922e:	4638      	mov	r0, r7
  409230:	f002 fcae 	bl	40bb90 <__ssprint_r>
  409234:	2800      	cmp	r0, #0
  409236:	f47f aec5 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  40923a:	3d10      	subs	r5, #16
  40923c:	2d10      	cmp	r5, #16
  40923e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409240:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409242:	46c8      	mov	r8, r9
  409244:	dce8      	bgt.n	409218 <_svfprintf_r+0x3f8>
  409246:	3301      	adds	r3, #1
  409248:	4a53      	ldr	r2, [pc, #332]	; (409398 <_svfprintf_r+0x578>)
  40924a:	9324      	str	r3, [sp, #144]	; 0x90
  40924c:	442c      	add	r4, r5
  40924e:	2b07      	cmp	r3, #7
  409250:	9425      	str	r4, [sp, #148]	; 0x94
  409252:	e888 0024 	stmia.w	r8, {r2, r5}
  409256:	dd08      	ble.n	40926a <_svfprintf_r+0x44a>
  409258:	aa23      	add	r2, sp, #140	; 0x8c
  40925a:	9907      	ldr	r1, [sp, #28]
  40925c:	9808      	ldr	r0, [sp, #32]
  40925e:	f002 fc97 	bl	40bb90 <__ssprint_r>
  409262:	2800      	cmp	r0, #0
  409264:	f47f aeae 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409268:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40926a:	9b05      	ldr	r3, [sp, #20]
  40926c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40926e:	9904      	ldr	r1, [sp, #16]
  409270:	428a      	cmp	r2, r1
  409272:	bfac      	ite	ge
  409274:	189b      	addge	r3, r3, r2
  409276:	185b      	addlt	r3, r3, r1
  409278:	9305      	str	r3, [sp, #20]
  40927a:	2c00      	cmp	r4, #0
  40927c:	f040 831b 	bne.w	4098b6 <_svfprintf_r+0xa96>
  409280:	2300      	movs	r3, #0
  409282:	9324      	str	r3, [sp, #144]	; 0x90
  409284:	46c8      	mov	r8, r9
  409286:	e5f2      	b.n	408e6e <_svfprintf_r+0x4e>
  409288:	930d      	str	r3, [sp, #52]	; 0x34
  40928a:	f01b 0320 	ands.w	r3, fp, #32
  40928e:	f040 81de 	bne.w	40964e <_svfprintf_r+0x82e>
  409292:	f01b 0210 	ands.w	r2, fp, #16
  409296:	f040 842d 	bne.w	409af4 <_svfprintf_r+0xcd4>
  40929a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40929e:	f000 8429 	beq.w	409af4 <_svfprintf_r+0xcd4>
  4092a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4092a4:	4613      	mov	r3, r2
  4092a6:	460a      	mov	r2, r1
  4092a8:	3204      	adds	r2, #4
  4092aa:	880c      	ldrh	r4, [r1, #0]
  4092ac:	920b      	str	r2, [sp, #44]	; 0x2c
  4092ae:	2500      	movs	r5, #0
  4092b0:	e6a9      	b.n	409006 <_svfprintf_r+0x1e6>
  4092b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4092b4:	930d      	str	r3, [sp, #52]	; 0x34
  4092b6:	6816      	ldr	r6, [r2, #0]
  4092b8:	2400      	movs	r4, #0
  4092ba:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4092be:	1d15      	adds	r5, r2, #4
  4092c0:	2e00      	cmp	r6, #0
  4092c2:	f000 86b5 	beq.w	40a030 <_svfprintf_r+0x1210>
  4092c6:	9a06      	ldr	r2, [sp, #24]
  4092c8:	1c53      	adds	r3, r2, #1
  4092ca:	f000 8617 	beq.w	409efc <_svfprintf_r+0x10dc>
  4092ce:	4621      	mov	r1, r4
  4092d0:	4630      	mov	r0, r6
  4092d2:	f7ff f975 	bl	4085c0 <memchr>
  4092d6:	2800      	cmp	r0, #0
  4092d8:	f000 8708 	beq.w	40a0ec <_svfprintf_r+0x12cc>
  4092dc:	1b83      	subs	r3, r0, r6
  4092de:	930a      	str	r3, [sp, #40]	; 0x28
  4092e0:	9406      	str	r4, [sp, #24]
  4092e2:	950b      	str	r5, [sp, #44]	; 0x2c
  4092e4:	f8cd b00c 	str.w	fp, [sp, #12]
  4092e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4092ec:	9304      	str	r3, [sp, #16]
  4092ee:	940e      	str	r4, [sp, #56]	; 0x38
  4092f0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4092f4:	e6ac      	b.n	409050 <_svfprintf_r+0x230>
  4092f6:	f89a 3000 	ldrb.w	r3, [sl]
  4092fa:	2201      	movs	r2, #1
  4092fc:	212b      	movs	r1, #43	; 0x2b
  4092fe:	e5e7      	b.n	408ed0 <_svfprintf_r+0xb0>
  409300:	f04b 0b20 	orr.w	fp, fp, #32
  409304:	f89a 3000 	ldrb.w	r3, [sl]
  409308:	e5e2      	b.n	408ed0 <_svfprintf_r+0xb0>
  40930a:	930d      	str	r3, [sp, #52]	; 0x34
  40930c:	2a00      	cmp	r2, #0
  40930e:	f040 87aa 	bne.w	40a266 <_svfprintf_r+0x1446>
  409312:	4b23      	ldr	r3, [pc, #140]	; (4093a0 <_svfprintf_r+0x580>)
  409314:	9312      	str	r3, [sp, #72]	; 0x48
  409316:	f01b 0f20 	tst.w	fp, #32
  40931a:	f040 8112 	bne.w	409542 <_svfprintf_r+0x722>
  40931e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409320:	f01b 0f10 	tst.w	fp, #16
  409324:	4613      	mov	r3, r2
  409326:	f040 83e0 	bne.w	409aea <_svfprintf_r+0xcca>
  40932a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40932e:	f000 83dc 	beq.w	409aea <_svfprintf_r+0xcca>
  409332:	3304      	adds	r3, #4
  409334:	8814      	ldrh	r4, [r2, #0]
  409336:	930b      	str	r3, [sp, #44]	; 0x2c
  409338:	2500      	movs	r5, #0
  40933a:	f01b 0f01 	tst.w	fp, #1
  40933e:	f000 810d 	beq.w	40955c <_svfprintf_r+0x73c>
  409342:	ea54 0305 	orrs.w	r3, r4, r5
  409346:	f000 8109 	beq.w	40955c <_svfprintf_r+0x73c>
  40934a:	2330      	movs	r3, #48	; 0x30
  40934c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
  409350:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  409354:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  409358:	f04b 0b02 	orr.w	fp, fp, #2
  40935c:	2302      	movs	r3, #2
  40935e:	e652      	b.n	409006 <_svfprintf_r+0x1e6>
  409360:	f89a 3000 	ldrb.w	r3, [sl]
  409364:	2900      	cmp	r1, #0
  409366:	f47f adb3 	bne.w	408ed0 <_svfprintf_r+0xb0>
  40936a:	2201      	movs	r2, #1
  40936c:	2120      	movs	r1, #32
  40936e:	e5af      	b.n	408ed0 <_svfprintf_r+0xb0>
  409370:	f04b 0b01 	orr.w	fp, fp, #1
  409374:	f89a 3000 	ldrb.w	r3, [sl]
  409378:	e5aa      	b.n	408ed0 <_svfprintf_r+0xb0>
  40937a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40937c:	6823      	ldr	r3, [r4, #0]
  40937e:	9309      	str	r3, [sp, #36]	; 0x24
  409380:	4618      	mov	r0, r3
  409382:	2800      	cmp	r0, #0
  409384:	4623      	mov	r3, r4
  409386:	f103 0304 	add.w	r3, r3, #4
  40938a:	f6ff ae03 	blt.w	408f94 <_svfprintf_r+0x174>
  40938e:	930b      	str	r3, [sp, #44]	; 0x2c
  409390:	f89a 3000 	ldrb.w	r3, [sl]
  409394:	e59c      	b.n	408ed0 <_svfprintf_r+0xb0>
  409396:	bf00      	nop
  409398:	0040c628 	.word	0x0040c628
  40939c:	0040c638 	.word	0x0040c638
  4093a0:	0040c608 	.word	0x0040c608
  4093a4:	f04b 0b10 	orr.w	fp, fp, #16
  4093a8:	f01b 0f20 	tst.w	fp, #32
  4093ac:	930d      	str	r3, [sp, #52]	; 0x34
  4093ae:	f43f ae1b 	beq.w	408fe8 <_svfprintf_r+0x1c8>
  4093b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4093b4:	3507      	adds	r5, #7
  4093b6:	f025 0307 	bic.w	r3, r5, #7
  4093ba:	f103 0208 	add.w	r2, r3, #8
  4093be:	e9d3 4500 	ldrd	r4, r5, [r3]
  4093c2:	920b      	str	r2, [sp, #44]	; 0x2c
  4093c4:	2301      	movs	r3, #1
  4093c6:	e61e      	b.n	409006 <_svfprintf_r+0x1e6>
  4093c8:	f89a 3000 	ldrb.w	r3, [sl]
  4093cc:	2b2a      	cmp	r3, #42	; 0x2a
  4093ce:	f10a 0401 	add.w	r4, sl, #1
  4093d2:	f000 873b 	beq.w	40a24c <_svfprintf_r+0x142c>
  4093d6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4093da:	2809      	cmp	r0, #9
  4093dc:	46a2      	mov	sl, r4
  4093de:	f200 8691 	bhi.w	40a104 <_svfprintf_r+0x12e4>
  4093e2:	2300      	movs	r3, #0
  4093e4:	461c      	mov	r4, r3
  4093e6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4093ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4093ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4093f2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4093f6:	2809      	cmp	r0, #9
  4093f8:	d9f5      	bls.n	4093e6 <_svfprintf_r+0x5c6>
  4093fa:	9406      	str	r4, [sp, #24]
  4093fc:	e56a      	b.n	408ed4 <_svfprintf_r+0xb4>
  4093fe:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  409402:	f89a 3000 	ldrb.w	r3, [sl]
  409406:	e563      	b.n	408ed0 <_svfprintf_r+0xb0>
  409408:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40940c:	f89a 3000 	ldrb.w	r3, [sl]
  409410:	e55e      	b.n	408ed0 <_svfprintf_r+0xb0>
  409412:	f89a 3000 	ldrb.w	r3, [sl]
  409416:	2b6c      	cmp	r3, #108	; 0x6c
  409418:	bf03      	ittte	eq
  40941a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40941e:	f04b 0b20 	orreq.w	fp, fp, #32
  409422:	f10a 0a01 	addeq.w	sl, sl, #1
  409426:	f04b 0b10 	orrne.w	fp, fp, #16
  40942a:	e551      	b.n	408ed0 <_svfprintf_r+0xb0>
  40942c:	2a00      	cmp	r2, #0
  40942e:	f040 871e 	bne.w	40a26e <_svfprintf_r+0x144e>
  409432:	f01b 0f20 	tst.w	fp, #32
  409436:	f040 8509 	bne.w	409e4c <_svfprintf_r+0x102c>
  40943a:	f01b 0f10 	tst.w	fp, #16
  40943e:	f040 84bc 	bne.w	409dba <_svfprintf_r+0xf9a>
  409442:	f01b 0f40 	tst.w	fp, #64	; 0x40
  409446:	f000 84b8 	beq.w	409dba <_svfprintf_r+0xf9a>
  40944a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40944c:	6813      	ldr	r3, [r2, #0]
  40944e:	3204      	adds	r2, #4
  409450:	920b      	str	r2, [sp, #44]	; 0x2c
  409452:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  409456:	801a      	strh	r2, [r3, #0]
  409458:	e509      	b.n	408e6e <_svfprintf_r+0x4e>
  40945a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40945c:	4bb9      	ldr	r3, [pc, #740]	; (409744 <_svfprintf_r+0x924>)
  40945e:	680c      	ldr	r4, [r1, #0]
  409460:	9312      	str	r3, [sp, #72]	; 0x48
  409462:	2230      	movs	r2, #48	; 0x30
  409464:	2378      	movs	r3, #120	; 0x78
  409466:	3104      	adds	r1, #4
  409468:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  40946c:	930d      	str	r3, [sp, #52]	; 0x34
  40946e:	f04b 0b02 	orr.w	fp, fp, #2
  409472:	910b      	str	r1, [sp, #44]	; 0x2c
  409474:	2500      	movs	r5, #0
  409476:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  40947a:	2302      	movs	r3, #2
  40947c:	e5c3      	b.n	409006 <_svfprintf_r+0x1e6>
  40947e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409480:	930d      	str	r3, [sp, #52]	; 0x34
  409482:	680a      	ldr	r2, [r1, #0]
  409484:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  409488:	2300      	movs	r3, #0
  40948a:	460a      	mov	r2, r1
  40948c:	461f      	mov	r7, r3
  40948e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  409492:	3204      	adds	r2, #4
  409494:	2301      	movs	r3, #1
  409496:	9304      	str	r3, [sp, #16]
  409498:	f8cd b00c 	str.w	fp, [sp, #12]
  40949c:	9706      	str	r7, [sp, #24]
  40949e:	970e      	str	r7, [sp, #56]	; 0x38
  4094a0:	920b      	str	r2, [sp, #44]	; 0x2c
  4094a2:	930a      	str	r3, [sp, #40]	; 0x28
  4094a4:	ae26      	add	r6, sp, #152	; 0x98
  4094a6:	e5d7      	b.n	409058 <_svfprintf_r+0x238>
  4094a8:	930d      	str	r3, [sp, #52]	; 0x34
  4094aa:	2a00      	cmp	r2, #0
  4094ac:	f040 86fe 	bne.w	40a2ac <_svfprintf_r+0x148c>
  4094b0:	f01b 0f20 	tst.w	fp, #32
  4094b4:	d15d      	bne.n	409572 <_svfprintf_r+0x752>
  4094b6:	f01b 0f10 	tst.w	fp, #16
  4094ba:	f040 8335 	bne.w	409b28 <_svfprintf_r+0xd08>
  4094be:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4094c2:	f000 8331 	beq.w	409b28 <_svfprintf_r+0xd08>
  4094c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4094c8:	f9b1 4000 	ldrsh.w	r4, [r1]
  4094cc:	3104      	adds	r1, #4
  4094ce:	17e5      	asrs	r5, r4, #31
  4094d0:	4622      	mov	r2, r4
  4094d2:	462b      	mov	r3, r5
  4094d4:	910b      	str	r1, [sp, #44]	; 0x2c
  4094d6:	2a00      	cmp	r2, #0
  4094d8:	f173 0300 	sbcs.w	r3, r3, #0
  4094dc:	db58      	blt.n	409590 <_svfprintf_r+0x770>
  4094de:	9906      	ldr	r1, [sp, #24]
  4094e0:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4094e4:	1c4a      	adds	r2, r1, #1
  4094e6:	f04f 0301 	mov.w	r3, #1
  4094ea:	f47f ad93 	bne.w	409014 <_svfprintf_r+0x1f4>
  4094ee:	ea54 0205 	orrs.w	r2, r4, r5
  4094f2:	f000 81ec 	beq.w	4098ce <_svfprintf_r+0xaae>
  4094f6:	f8cd b00c 	str.w	fp, [sp, #12]
  4094fa:	2b01      	cmp	r3, #1
  4094fc:	f000 8283 	beq.w	409a06 <_svfprintf_r+0xbe6>
  409500:	2b02      	cmp	r3, #2
  409502:	f040 8213 	bne.w	40992c <_svfprintf_r+0xb0c>
  409506:	9812      	ldr	r0, [sp, #72]	; 0x48
  409508:	464e      	mov	r6, r9
  40950a:	0923      	lsrs	r3, r4, #4
  40950c:	f004 010f 	and.w	r1, r4, #15
  409510:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  409514:	092a      	lsrs	r2, r5, #4
  409516:	461c      	mov	r4, r3
  409518:	4615      	mov	r5, r2
  40951a:	5c43      	ldrb	r3, [r0, r1]
  40951c:	f806 3d01 	strb.w	r3, [r6, #-1]!
  409520:	ea54 0305 	orrs.w	r3, r4, r5
  409524:	d1f1      	bne.n	40950a <_svfprintf_r+0x6ea>
  409526:	eba9 0306 	sub.w	r3, r9, r6
  40952a:	930a      	str	r3, [sp, #40]	; 0x28
  40952c:	e588      	b.n	409040 <_svfprintf_r+0x220>
  40952e:	930d      	str	r3, [sp, #52]	; 0x34
  409530:	2a00      	cmp	r2, #0
  409532:	f040 86b7 	bne.w	40a2a4 <_svfprintf_r+0x1484>
  409536:	4b84      	ldr	r3, [pc, #528]	; (409748 <_svfprintf_r+0x928>)
  409538:	9312      	str	r3, [sp, #72]	; 0x48
  40953a:	f01b 0f20 	tst.w	fp, #32
  40953e:	f43f aeee 	beq.w	40931e <_svfprintf_r+0x4fe>
  409542:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409544:	3507      	adds	r5, #7
  409546:	f025 0307 	bic.w	r3, r5, #7
  40954a:	f103 0208 	add.w	r2, r3, #8
  40954e:	f01b 0f01 	tst.w	fp, #1
  409552:	920b      	str	r2, [sp, #44]	; 0x2c
  409554:	e9d3 4500 	ldrd	r4, r5, [r3]
  409558:	f47f aef3 	bne.w	409342 <_svfprintf_r+0x522>
  40955c:	2302      	movs	r3, #2
  40955e:	e552      	b.n	409006 <_svfprintf_r+0x1e6>
  409560:	930d      	str	r3, [sp, #52]	; 0x34
  409562:	2a00      	cmp	r2, #0
  409564:	f040 869a 	bne.w	40a29c <_svfprintf_r+0x147c>
  409568:	f04b 0b10 	orr.w	fp, fp, #16
  40956c:	f01b 0f20 	tst.w	fp, #32
  409570:	d0a1      	beq.n	4094b6 <_svfprintf_r+0x696>
  409572:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409574:	3507      	adds	r5, #7
  409576:	f025 0507 	bic.w	r5, r5, #7
  40957a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40957e:	2a00      	cmp	r2, #0
  409580:	f105 0108 	add.w	r1, r5, #8
  409584:	461d      	mov	r5, r3
  409586:	f173 0300 	sbcs.w	r3, r3, #0
  40958a:	910b      	str	r1, [sp, #44]	; 0x2c
  40958c:	4614      	mov	r4, r2
  40958e:	daa6      	bge.n	4094de <_svfprintf_r+0x6be>
  409590:	272d      	movs	r7, #45	; 0x2d
  409592:	4264      	negs	r4, r4
  409594:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  409598:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40959c:	2301      	movs	r3, #1
  40959e:	e535      	b.n	40900c <_svfprintf_r+0x1ec>
  4095a0:	930d      	str	r3, [sp, #52]	; 0x34
  4095a2:	2a00      	cmp	r2, #0
  4095a4:	f040 8676 	bne.w	40a294 <_svfprintf_r+0x1474>
  4095a8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4095aa:	f01b 0f08 	tst.w	fp, #8
  4095ae:	f105 0507 	add.w	r5, r5, #7
  4095b2:	f000 83e8 	beq.w	409d86 <_svfprintf_r+0xf66>
  4095b6:	f025 0307 	bic.w	r3, r5, #7
  4095ba:	ed93 7b00 	vldr	d7, [r3]
  4095be:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  4095c2:	f103 0208 	add.w	r2, r3, #8
  4095c6:	920b      	str	r2, [sp, #44]	; 0x2c
  4095c8:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
  4095cc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
  4095d0:	9116      	str	r1, [sp, #88]	; 0x58
  4095d2:	9317      	str	r3, [sp, #92]	; 0x5c
  4095d4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4095d8:	f04f 32ff 	mov.w	r2, #4294967295
  4095dc:	4620      	mov	r0, r4
  4095de:	4629      	mov	r1, r5
  4095e0:	4b5a      	ldr	r3, [pc, #360]	; (40974c <_svfprintf_r+0x92c>)
  4095e2:	f7fe fcf7 	bl	407fd4 <__aeabi_dcmpun>
  4095e6:	2800      	cmp	r0, #0
  4095e8:	f040 834f 	bne.w	409c8a <_svfprintf_r+0xe6a>
  4095ec:	f04f 32ff 	mov.w	r2, #4294967295
  4095f0:	4b56      	ldr	r3, [pc, #344]	; (40974c <_svfprintf_r+0x92c>)
  4095f2:	4620      	mov	r0, r4
  4095f4:	4629      	mov	r1, r5
  4095f6:	f7fe fccf 	bl	407f98 <__aeabi_dcmple>
  4095fa:	2800      	cmp	r0, #0
  4095fc:	f040 8345 	bne.w	409c8a <_svfprintf_r+0xe6a>
  409600:	2200      	movs	r2, #0
  409602:	2300      	movs	r3, #0
  409604:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  409608:	f7fe fcbc 	bl	407f84 <__aeabi_dcmplt>
  40960c:	2800      	cmp	r0, #0
  40960e:	f040 8533 	bne.w	40a078 <_svfprintf_r+0x1258>
  409612:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  409616:	4e4e      	ldr	r6, [pc, #312]	; (409750 <_svfprintf_r+0x930>)
  409618:	4b4e      	ldr	r3, [pc, #312]	; (409754 <_svfprintf_r+0x934>)
  40961a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40961e:	9003      	str	r0, [sp, #12]
  409620:	980d      	ldr	r0, [sp, #52]	; 0x34
  409622:	2203      	movs	r2, #3
  409624:	2100      	movs	r1, #0
  409626:	9204      	str	r2, [sp, #16]
  409628:	9106      	str	r1, [sp, #24]
  40962a:	2847      	cmp	r0, #71	; 0x47
  40962c:	bfd8      	it	le
  40962e:	461e      	movle	r6, r3
  409630:	920a      	str	r2, [sp, #40]	; 0x28
  409632:	910e      	str	r1, [sp, #56]	; 0x38
  409634:	e50c      	b.n	409050 <_svfprintf_r+0x230>
  409636:	f04b 0b08 	orr.w	fp, fp, #8
  40963a:	f89a 3000 	ldrb.w	r3, [sl]
  40963e:	e447      	b.n	408ed0 <_svfprintf_r+0xb0>
  409640:	f04b 0b10 	orr.w	fp, fp, #16
  409644:	930d      	str	r3, [sp, #52]	; 0x34
  409646:	f01b 0320 	ands.w	r3, fp, #32
  40964a:	f43f ae22 	beq.w	409292 <_svfprintf_r+0x472>
  40964e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409650:	3507      	adds	r5, #7
  409652:	f025 0307 	bic.w	r3, r5, #7
  409656:	f103 0208 	add.w	r2, r3, #8
  40965a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40965e:	920b      	str	r2, [sp, #44]	; 0x2c
  409660:	2300      	movs	r3, #0
  409662:	e4d0      	b.n	409006 <_svfprintf_r+0x1e6>
  409664:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  409668:	2300      	movs	r3, #0
  40966a:	461c      	mov	r4, r3
  40966c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  409670:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409674:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  409678:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40967c:	2809      	cmp	r0, #9
  40967e:	d9f5      	bls.n	40966c <_svfprintf_r+0x84c>
  409680:	9409      	str	r4, [sp, #36]	; 0x24
  409682:	e427      	b.n	408ed4 <_svfprintf_r+0xb4>
  409684:	930d      	str	r3, [sp, #52]	; 0x34
  409686:	2a00      	cmp	r2, #0
  409688:	f040 85f5 	bne.w	40a276 <_svfprintf_r+0x1456>
  40968c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40968e:	2a00      	cmp	r2, #0
  409690:	f43f ac91 	beq.w	408fb6 <_svfprintf_r+0x196>
  409694:	2300      	movs	r3, #0
  409696:	2101      	movs	r1, #1
  409698:	461f      	mov	r7, r3
  40969a:	9104      	str	r1, [sp, #16]
  40969c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4096a0:	f8cd b00c 	str.w	fp, [sp, #12]
  4096a4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4096a8:	9306      	str	r3, [sp, #24]
  4096aa:	930e      	str	r3, [sp, #56]	; 0x38
  4096ac:	910a      	str	r1, [sp, #40]	; 0x28
  4096ae:	ae26      	add	r6, sp, #152	; 0x98
  4096b0:	e4d2      	b.n	409058 <_svfprintf_r+0x238>
  4096b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4096b4:	e529      	b.n	40910a <_svfprintf_r+0x2ea>
  4096b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4096b8:	2b65      	cmp	r3, #101	; 0x65
  4096ba:	f340 80a9 	ble.w	409810 <_svfprintf_r+0x9f0>
  4096be:	2200      	movs	r2, #0
  4096c0:	2300      	movs	r3, #0
  4096c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4096c6:	f7fe fc53 	bl	407f70 <__aeabi_dcmpeq>
  4096ca:	2800      	cmp	r0, #0
  4096cc:	f000 8152 	beq.w	409974 <_svfprintf_r+0xb54>
  4096d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4096d2:	4a21      	ldr	r2, [pc, #132]	; (409758 <_svfprintf_r+0x938>)
  4096d4:	f8c8 2000 	str.w	r2, [r8]
  4096d8:	3301      	adds	r3, #1
  4096da:	3401      	adds	r4, #1
  4096dc:	2201      	movs	r2, #1
  4096de:	2b07      	cmp	r3, #7
  4096e0:	9425      	str	r4, [sp, #148]	; 0x94
  4096e2:	9324      	str	r3, [sp, #144]	; 0x90
  4096e4:	f8c8 2004 	str.w	r2, [r8, #4]
  4096e8:	f300 836f 	bgt.w	409dca <_svfprintf_r+0xfaa>
  4096ec:	f108 0808 	add.w	r8, r8, #8
  4096f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4096f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4096f4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4096f6:	4293      	cmp	r3, r2
  4096f8:	db03      	blt.n	409702 <_svfprintf_r+0x8e2>
  4096fa:	9b03      	ldr	r3, [sp, #12]
  4096fc:	07dd      	lsls	r5, r3, #31
  4096fe:	f57f ad76 	bpl.w	4091ee <_svfprintf_r+0x3ce>
  409702:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409704:	9913      	ldr	r1, [sp, #76]	; 0x4c
  409706:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409708:	f8c8 2000 	str.w	r2, [r8]
  40970c:	3301      	adds	r3, #1
  40970e:	440c      	add	r4, r1
  409710:	2b07      	cmp	r3, #7
  409712:	f8c8 1004 	str.w	r1, [r8, #4]
  409716:	9425      	str	r4, [sp, #148]	; 0x94
  409718:	9324      	str	r3, [sp, #144]	; 0x90
  40971a:	f300 83a3 	bgt.w	409e64 <_svfprintf_r+0x1044>
  40971e:	f108 0808 	add.w	r8, r8, #8
  409722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409724:	1e5e      	subs	r6, r3, #1
  409726:	2e00      	cmp	r6, #0
  409728:	f77f ad61 	ble.w	4091ee <_svfprintf_r+0x3ce>
  40972c:	2e10      	cmp	r6, #16
  40972e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409730:	4d0a      	ldr	r5, [pc, #40]	; (40975c <_svfprintf_r+0x93c>)
  409732:	f340 81ef 	ble.w	409b14 <_svfprintf_r+0xcf4>
  409736:	4622      	mov	r2, r4
  409738:	2710      	movs	r7, #16
  40973a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40973e:	9c07      	ldr	r4, [sp, #28]
  409740:	e014      	b.n	40976c <_svfprintf_r+0x94c>
  409742:	bf00      	nop
  409744:	0040c608 	.word	0x0040c608
  409748:	0040c5f4 	.word	0x0040c5f4
  40974c:	7fefffff 	.word	0x7fefffff
  409750:	0040c5e8 	.word	0x0040c5e8
  409754:	0040c5e4 	.word	0x0040c5e4
  409758:	0040c624 	.word	0x0040c624
  40975c:	0040c638 	.word	0x0040c638
  409760:	f108 0808 	add.w	r8, r8, #8
  409764:	3e10      	subs	r6, #16
  409766:	2e10      	cmp	r6, #16
  409768:	f340 81d3 	ble.w	409b12 <_svfprintf_r+0xcf2>
  40976c:	3301      	adds	r3, #1
  40976e:	3210      	adds	r2, #16
  409770:	2b07      	cmp	r3, #7
  409772:	9225      	str	r2, [sp, #148]	; 0x94
  409774:	9324      	str	r3, [sp, #144]	; 0x90
  409776:	e888 00a0 	stmia.w	r8, {r5, r7}
  40977a:	ddf1      	ble.n	409760 <_svfprintf_r+0x940>
  40977c:	aa23      	add	r2, sp, #140	; 0x8c
  40977e:	4621      	mov	r1, r4
  409780:	4658      	mov	r0, fp
  409782:	f002 fa05 	bl	40bb90 <__ssprint_r>
  409786:	2800      	cmp	r0, #0
  409788:	f47f ac1c 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  40978c:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40978e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409790:	46c8      	mov	r8, r9
  409792:	e7e7      	b.n	409764 <_svfprintf_r+0x944>
  409794:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409796:	9a04      	ldr	r2, [sp, #16]
  409798:	1a9f      	subs	r7, r3, r2
  40979a:	2f00      	cmp	r7, #0
  40979c:	f77f acd8 	ble.w	409150 <_svfprintf_r+0x330>
  4097a0:	2f10      	cmp	r7, #16
  4097a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4097a4:	4db7      	ldr	r5, [pc, #732]	; (409a84 <_svfprintf_r+0xc64>)
  4097a6:	dd27      	ble.n	4097f8 <_svfprintf_r+0x9d8>
  4097a8:	4642      	mov	r2, r8
  4097aa:	4621      	mov	r1, r4
  4097ac:	46b0      	mov	r8, r6
  4097ae:	f04f 0b10 	mov.w	fp, #16
  4097b2:	462e      	mov	r6, r5
  4097b4:	9c08      	ldr	r4, [sp, #32]
  4097b6:	9d07      	ldr	r5, [sp, #28]
  4097b8:	e004      	b.n	4097c4 <_svfprintf_r+0x9a4>
  4097ba:	3f10      	subs	r7, #16
  4097bc:	2f10      	cmp	r7, #16
  4097be:	f102 0208 	add.w	r2, r2, #8
  4097c2:	dd15      	ble.n	4097f0 <_svfprintf_r+0x9d0>
  4097c4:	3301      	adds	r3, #1
  4097c6:	3110      	adds	r1, #16
  4097c8:	2b07      	cmp	r3, #7
  4097ca:	9125      	str	r1, [sp, #148]	; 0x94
  4097cc:	9324      	str	r3, [sp, #144]	; 0x90
  4097ce:	e882 0840 	stmia.w	r2, {r6, fp}
  4097d2:	ddf2      	ble.n	4097ba <_svfprintf_r+0x99a>
  4097d4:	aa23      	add	r2, sp, #140	; 0x8c
  4097d6:	4629      	mov	r1, r5
  4097d8:	4620      	mov	r0, r4
  4097da:	f002 f9d9 	bl	40bb90 <__ssprint_r>
  4097de:	2800      	cmp	r0, #0
  4097e0:	f47f abf0 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  4097e4:	3f10      	subs	r7, #16
  4097e6:	2f10      	cmp	r7, #16
  4097e8:	9925      	ldr	r1, [sp, #148]	; 0x94
  4097ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4097ec:	464a      	mov	r2, r9
  4097ee:	dce9      	bgt.n	4097c4 <_svfprintf_r+0x9a4>
  4097f0:	4635      	mov	r5, r6
  4097f2:	460c      	mov	r4, r1
  4097f4:	4646      	mov	r6, r8
  4097f6:	4690      	mov	r8, r2
  4097f8:	3301      	adds	r3, #1
  4097fa:	443c      	add	r4, r7
  4097fc:	2b07      	cmp	r3, #7
  4097fe:	9425      	str	r4, [sp, #148]	; 0x94
  409800:	9324      	str	r3, [sp, #144]	; 0x90
  409802:	e888 00a0 	stmia.w	r8, {r5, r7}
  409806:	f300 8234 	bgt.w	409c72 <_svfprintf_r+0xe52>
  40980a:	f108 0808 	add.w	r8, r8, #8
  40980e:	e49f      	b.n	409150 <_svfprintf_r+0x330>
  409810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409812:	9f24      	ldr	r7, [sp, #144]	; 0x90
  409814:	2b01      	cmp	r3, #1
  409816:	f340 8200 	ble.w	409c1a <_svfprintf_r+0xdfa>
  40981a:	3701      	adds	r7, #1
  40981c:	3401      	adds	r4, #1
  40981e:	2301      	movs	r3, #1
  409820:	2f07      	cmp	r7, #7
  409822:	9425      	str	r4, [sp, #148]	; 0x94
  409824:	9724      	str	r7, [sp, #144]	; 0x90
  409826:	f8c8 6000 	str.w	r6, [r8]
  40982a:	f8c8 3004 	str.w	r3, [r8, #4]
  40982e:	f300 8205 	bgt.w	409c3c <_svfprintf_r+0xe1c>
  409832:	f108 0808 	add.w	r8, r8, #8
  409836:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  409838:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40983a:	f8c8 3000 	str.w	r3, [r8]
  40983e:	3701      	adds	r7, #1
  409840:	4414      	add	r4, r2
  409842:	2f07      	cmp	r7, #7
  409844:	9425      	str	r4, [sp, #148]	; 0x94
  409846:	9724      	str	r7, [sp, #144]	; 0x90
  409848:	f8c8 2004 	str.w	r2, [r8, #4]
  40984c:	f300 8202 	bgt.w	409c54 <_svfprintf_r+0xe34>
  409850:	f108 0808 	add.w	r8, r8, #8
  409854:	2300      	movs	r3, #0
  409856:	2200      	movs	r2, #0
  409858:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40985c:	f7fe fb88 	bl	407f70 <__aeabi_dcmpeq>
  409860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409862:	2800      	cmp	r0, #0
  409864:	f040 8101 	bne.w	409a6a <_svfprintf_r+0xc4a>
  409868:	3b01      	subs	r3, #1
  40986a:	3701      	adds	r7, #1
  40986c:	3601      	adds	r6, #1
  40986e:	441c      	add	r4, r3
  409870:	2f07      	cmp	r7, #7
  409872:	9724      	str	r7, [sp, #144]	; 0x90
  409874:	9425      	str	r4, [sp, #148]	; 0x94
  409876:	f8c8 6000 	str.w	r6, [r8]
  40987a:	f8c8 3004 	str.w	r3, [r8, #4]
  40987e:	f300 8128 	bgt.w	409ad2 <_svfprintf_r+0xcb2>
  409882:	f108 0808 	add.w	r8, r8, #8
  409886:	9a15      	ldr	r2, [sp, #84]	; 0x54
  409888:	f8c8 2004 	str.w	r2, [r8, #4]
  40988c:	3701      	adds	r7, #1
  40988e:	4414      	add	r4, r2
  409890:	ab1f      	add	r3, sp, #124	; 0x7c
  409892:	2f07      	cmp	r7, #7
  409894:	9425      	str	r4, [sp, #148]	; 0x94
  409896:	9724      	str	r7, [sp, #144]	; 0x90
  409898:	f8c8 3000 	str.w	r3, [r8]
  40989c:	f77f aca5 	ble.w	4091ea <_svfprintf_r+0x3ca>
  4098a0:	aa23      	add	r2, sp, #140	; 0x8c
  4098a2:	9907      	ldr	r1, [sp, #28]
  4098a4:	9808      	ldr	r0, [sp, #32]
  4098a6:	f002 f973 	bl	40bb90 <__ssprint_r>
  4098aa:	2800      	cmp	r0, #0
  4098ac:	f47f ab8a 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  4098b0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4098b2:	46c8      	mov	r8, r9
  4098b4:	e49b      	b.n	4091ee <_svfprintf_r+0x3ce>
  4098b6:	aa23      	add	r2, sp, #140	; 0x8c
  4098b8:	9907      	ldr	r1, [sp, #28]
  4098ba:	9808      	ldr	r0, [sp, #32]
  4098bc:	f002 f968 	bl	40bb90 <__ssprint_r>
  4098c0:	2800      	cmp	r0, #0
  4098c2:	f43f acdd 	beq.w	409280 <_svfprintf_r+0x460>
  4098c6:	f7ff bb7d 	b.w	408fc4 <_svfprintf_r+0x1a4>
  4098ca:	f8dd b00c 	ldr.w	fp, [sp, #12]
  4098ce:	2b01      	cmp	r3, #1
  4098d0:	f000 8135 	beq.w	409b3e <_svfprintf_r+0xd1e>
  4098d4:	2b02      	cmp	r3, #2
  4098d6:	d125      	bne.n	409924 <_svfprintf_r+0xb04>
  4098d8:	f8cd b00c 	str.w	fp, [sp, #12]
  4098dc:	2400      	movs	r4, #0
  4098de:	2500      	movs	r5, #0
  4098e0:	e611      	b.n	409506 <_svfprintf_r+0x6e6>
  4098e2:	aa23      	add	r2, sp, #140	; 0x8c
  4098e4:	9907      	ldr	r1, [sp, #28]
  4098e6:	9808      	ldr	r0, [sp, #32]
  4098e8:	f002 f952 	bl	40bb90 <__ssprint_r>
  4098ec:	2800      	cmp	r0, #0
  4098ee:	f47f ab69 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  4098f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4098f4:	46c8      	mov	r8, r9
  4098f6:	e467      	b.n	4091c8 <_svfprintf_r+0x3a8>
  4098f8:	aa23      	add	r2, sp, #140	; 0x8c
  4098fa:	9907      	ldr	r1, [sp, #28]
  4098fc:	9808      	ldr	r0, [sp, #32]
  4098fe:	f002 f947 	bl	40bb90 <__ssprint_r>
  409902:	2800      	cmp	r0, #0
  409904:	f47f ab5e 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409908:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40990a:	46c8      	mov	r8, r9
  40990c:	e41d      	b.n	40914a <_svfprintf_r+0x32a>
  40990e:	aa23      	add	r2, sp, #140	; 0x8c
  409910:	9907      	ldr	r1, [sp, #28]
  409912:	9808      	ldr	r0, [sp, #32]
  409914:	f002 f93c 	bl	40bb90 <__ssprint_r>
  409918:	2800      	cmp	r0, #0
  40991a:	f47f ab53 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  40991e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409920:	46c8      	mov	r8, r9
  409922:	e402      	b.n	40912a <_svfprintf_r+0x30a>
  409924:	f8cd b00c 	str.w	fp, [sp, #12]
  409928:	2400      	movs	r4, #0
  40992a:	2500      	movs	r5, #0
  40992c:	4649      	mov	r1, r9
  40992e:	e000      	b.n	409932 <_svfprintf_r+0xb12>
  409930:	4631      	mov	r1, r6
  409932:	08e2      	lsrs	r2, r4, #3
  409934:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  409938:	08e8      	lsrs	r0, r5, #3
  40993a:	f004 0307 	and.w	r3, r4, #7
  40993e:	4605      	mov	r5, r0
  409940:	4614      	mov	r4, r2
  409942:	3330      	adds	r3, #48	; 0x30
  409944:	ea54 0205 	orrs.w	r2, r4, r5
  409948:	f801 3c01 	strb.w	r3, [r1, #-1]
  40994c:	f101 36ff 	add.w	r6, r1, #4294967295
  409950:	d1ee      	bne.n	409930 <_svfprintf_r+0xb10>
  409952:	9a03      	ldr	r2, [sp, #12]
  409954:	07d2      	lsls	r2, r2, #31
  409956:	f57f ade6 	bpl.w	409526 <_svfprintf_r+0x706>
  40995a:	2b30      	cmp	r3, #48	; 0x30
  40995c:	f43f ade3 	beq.w	409526 <_svfprintf_r+0x706>
  409960:	3902      	subs	r1, #2
  409962:	2330      	movs	r3, #48	; 0x30
  409964:	f806 3c01 	strb.w	r3, [r6, #-1]
  409968:	eba9 0301 	sub.w	r3, r9, r1
  40996c:	930a      	str	r3, [sp, #40]	; 0x28
  40996e:	460e      	mov	r6, r1
  409970:	f7ff bb66 	b.w	409040 <_svfprintf_r+0x220>
  409974:	991d      	ldr	r1, [sp, #116]	; 0x74
  409976:	2900      	cmp	r1, #0
  409978:	f340 8231 	ble.w	409dde <_svfprintf_r+0xfbe>
  40997c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40997e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409980:	4293      	cmp	r3, r2
  409982:	bfa8      	it	ge
  409984:	4613      	movge	r3, r2
  409986:	2b00      	cmp	r3, #0
  409988:	461f      	mov	r7, r3
  40998a:	dd0d      	ble.n	4099a8 <_svfprintf_r+0xb88>
  40998c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40998e:	f8c8 6000 	str.w	r6, [r8]
  409992:	3301      	adds	r3, #1
  409994:	443c      	add	r4, r7
  409996:	2b07      	cmp	r3, #7
  409998:	9425      	str	r4, [sp, #148]	; 0x94
  40999a:	f8c8 7004 	str.w	r7, [r8, #4]
  40999e:	9324      	str	r3, [sp, #144]	; 0x90
  4099a0:	f300 8321 	bgt.w	409fe6 <_svfprintf_r+0x11c6>
  4099a4:	f108 0808 	add.w	r8, r8, #8
  4099a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4099aa:	2f00      	cmp	r7, #0
  4099ac:	bfa8      	it	ge
  4099ae:	1bdb      	subge	r3, r3, r7
  4099b0:	2b00      	cmp	r3, #0
  4099b2:	461f      	mov	r7, r3
  4099b4:	f340 80d7 	ble.w	409b66 <_svfprintf_r+0xd46>
  4099b8:	2f10      	cmp	r7, #16
  4099ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4099bc:	4d31      	ldr	r5, [pc, #196]	; (409a84 <_svfprintf_r+0xc64>)
  4099be:	f340 81f0 	ble.w	409da2 <_svfprintf_r+0xf82>
  4099c2:	4642      	mov	r2, r8
  4099c4:	4621      	mov	r1, r4
  4099c6:	46b0      	mov	r8, r6
  4099c8:	f04f 0b10 	mov.w	fp, #16
  4099cc:	462e      	mov	r6, r5
  4099ce:	9c08      	ldr	r4, [sp, #32]
  4099d0:	9d07      	ldr	r5, [sp, #28]
  4099d2:	e004      	b.n	4099de <_svfprintf_r+0xbbe>
  4099d4:	3208      	adds	r2, #8
  4099d6:	3f10      	subs	r7, #16
  4099d8:	2f10      	cmp	r7, #16
  4099da:	f340 81de 	ble.w	409d9a <_svfprintf_r+0xf7a>
  4099de:	3301      	adds	r3, #1
  4099e0:	3110      	adds	r1, #16
  4099e2:	2b07      	cmp	r3, #7
  4099e4:	9125      	str	r1, [sp, #148]	; 0x94
  4099e6:	9324      	str	r3, [sp, #144]	; 0x90
  4099e8:	e882 0840 	stmia.w	r2, {r6, fp}
  4099ec:	ddf2      	ble.n	4099d4 <_svfprintf_r+0xbb4>
  4099ee:	aa23      	add	r2, sp, #140	; 0x8c
  4099f0:	4629      	mov	r1, r5
  4099f2:	4620      	mov	r0, r4
  4099f4:	f002 f8cc 	bl	40bb90 <__ssprint_r>
  4099f8:	2800      	cmp	r0, #0
  4099fa:	f47f aae3 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  4099fe:	9925      	ldr	r1, [sp, #148]	; 0x94
  409a00:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409a02:	464a      	mov	r2, r9
  409a04:	e7e7      	b.n	4099d6 <_svfprintf_r+0xbb6>
  409a06:	2d00      	cmp	r5, #0
  409a08:	bf08      	it	eq
  409a0a:	2c0a      	cmpeq	r4, #10
  409a0c:	f0c0 8095 	bcc.w	409b3a <_svfprintf_r+0xd1a>
  409a10:	464e      	mov	r6, r9
  409a12:	4620      	mov	r0, r4
  409a14:	4629      	mov	r1, r5
  409a16:	220a      	movs	r2, #10
  409a18:	2300      	movs	r3, #0
  409a1a:	f002 fa15 	bl	40be48 <__aeabi_uldivmod>
  409a1e:	3230      	adds	r2, #48	; 0x30
  409a20:	f806 2d01 	strb.w	r2, [r6, #-1]!
  409a24:	4620      	mov	r0, r4
  409a26:	4629      	mov	r1, r5
  409a28:	2300      	movs	r3, #0
  409a2a:	220a      	movs	r2, #10
  409a2c:	f002 fa0c 	bl	40be48 <__aeabi_uldivmod>
  409a30:	4604      	mov	r4, r0
  409a32:	460d      	mov	r5, r1
  409a34:	ea54 0305 	orrs.w	r3, r4, r5
  409a38:	d1eb      	bne.n	409a12 <_svfprintf_r+0xbf2>
  409a3a:	eba9 0306 	sub.w	r3, r9, r6
  409a3e:	930a      	str	r3, [sp, #40]	; 0x28
  409a40:	f7ff bafe 	b.w	409040 <_svfprintf_r+0x220>
  409a44:	9b06      	ldr	r3, [sp, #24]
  409a46:	930a      	str	r3, [sp, #40]	; 0x28
  409a48:	464e      	mov	r6, r9
  409a4a:	f7ff baf9 	b.w	409040 <_svfprintf_r+0x220>
  409a4e:	aa23      	add	r2, sp, #140	; 0x8c
  409a50:	9907      	ldr	r1, [sp, #28]
  409a52:	9808      	ldr	r0, [sp, #32]
  409a54:	f002 f89c 	bl	40bb90 <__ssprint_r>
  409a58:	2800      	cmp	r0, #0
  409a5a:	f47f aab3 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409a5e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  409a62:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409a64:	46c8      	mov	r8, r9
  409a66:	f7ff bb50 	b.w	40910a <_svfprintf_r+0x2ea>
  409a6a:	1e5e      	subs	r6, r3, #1
  409a6c:	2e00      	cmp	r6, #0
  409a6e:	f77f af0a 	ble.w	409886 <_svfprintf_r+0xa66>
  409a72:	2e10      	cmp	r6, #16
  409a74:	4d03      	ldr	r5, [pc, #12]	; (409a84 <_svfprintf_r+0xc64>)
  409a76:	dd23      	ble.n	409ac0 <_svfprintf_r+0xca0>
  409a78:	4622      	mov	r2, r4
  409a7a:	f04f 0b10 	mov.w	fp, #16
  409a7e:	9c08      	ldr	r4, [sp, #32]
  409a80:	e007      	b.n	409a92 <_svfprintf_r+0xc72>
  409a82:	bf00      	nop
  409a84:	0040c638 	.word	0x0040c638
  409a88:	3e10      	subs	r6, #16
  409a8a:	2e10      	cmp	r6, #16
  409a8c:	f108 0808 	add.w	r8, r8, #8
  409a90:	dd15      	ble.n	409abe <_svfprintf_r+0xc9e>
  409a92:	3701      	adds	r7, #1
  409a94:	3210      	adds	r2, #16
  409a96:	2f07      	cmp	r7, #7
  409a98:	9225      	str	r2, [sp, #148]	; 0x94
  409a9a:	9724      	str	r7, [sp, #144]	; 0x90
  409a9c:	e888 0820 	stmia.w	r8, {r5, fp}
  409aa0:	ddf2      	ble.n	409a88 <_svfprintf_r+0xc68>
  409aa2:	aa23      	add	r2, sp, #140	; 0x8c
  409aa4:	9907      	ldr	r1, [sp, #28]
  409aa6:	4620      	mov	r0, r4
  409aa8:	f002 f872 	bl	40bb90 <__ssprint_r>
  409aac:	2800      	cmp	r0, #0
  409aae:	f47f aa89 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409ab2:	3e10      	subs	r6, #16
  409ab4:	2e10      	cmp	r6, #16
  409ab6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409ab8:	9f24      	ldr	r7, [sp, #144]	; 0x90
  409aba:	46c8      	mov	r8, r9
  409abc:	dce9      	bgt.n	409a92 <_svfprintf_r+0xc72>
  409abe:	4614      	mov	r4, r2
  409ac0:	3701      	adds	r7, #1
  409ac2:	4434      	add	r4, r6
  409ac4:	2f07      	cmp	r7, #7
  409ac6:	9425      	str	r4, [sp, #148]	; 0x94
  409ac8:	9724      	str	r7, [sp, #144]	; 0x90
  409aca:	e888 0060 	stmia.w	r8, {r5, r6}
  409ace:	f77f aed8 	ble.w	409882 <_svfprintf_r+0xa62>
  409ad2:	aa23      	add	r2, sp, #140	; 0x8c
  409ad4:	9907      	ldr	r1, [sp, #28]
  409ad6:	9808      	ldr	r0, [sp, #32]
  409ad8:	f002 f85a 	bl	40bb90 <__ssprint_r>
  409adc:	2800      	cmp	r0, #0
  409ade:	f47f aa71 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409ae2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409ae4:	9f24      	ldr	r7, [sp, #144]	; 0x90
  409ae6:	46c8      	mov	r8, r9
  409ae8:	e6cd      	b.n	409886 <_svfprintf_r+0xa66>
  409aea:	681c      	ldr	r4, [r3, #0]
  409aec:	3304      	adds	r3, #4
  409aee:	930b      	str	r3, [sp, #44]	; 0x2c
  409af0:	2500      	movs	r5, #0
  409af2:	e422      	b.n	40933a <_svfprintf_r+0x51a>
  409af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409af6:	460a      	mov	r2, r1
  409af8:	3204      	adds	r2, #4
  409afa:	680c      	ldr	r4, [r1, #0]
  409afc:	920b      	str	r2, [sp, #44]	; 0x2c
  409afe:	2500      	movs	r5, #0
  409b00:	f7ff ba81 	b.w	409006 <_svfprintf_r+0x1e6>
  409b04:	3204      	adds	r2, #4
  409b06:	681c      	ldr	r4, [r3, #0]
  409b08:	920b      	str	r2, [sp, #44]	; 0x2c
  409b0a:	2301      	movs	r3, #1
  409b0c:	2500      	movs	r5, #0
  409b0e:	f7ff ba7a 	b.w	409006 <_svfprintf_r+0x1e6>
  409b12:	4614      	mov	r4, r2
  409b14:	3301      	adds	r3, #1
  409b16:	4434      	add	r4, r6
  409b18:	2b07      	cmp	r3, #7
  409b1a:	9425      	str	r4, [sp, #148]	; 0x94
  409b1c:	9324      	str	r3, [sp, #144]	; 0x90
  409b1e:	e888 0060 	stmia.w	r8, {r5, r6}
  409b22:	f77f ab62 	ble.w	4091ea <_svfprintf_r+0x3ca>
  409b26:	e6bb      	b.n	4098a0 <_svfprintf_r+0xa80>
  409b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409b2a:	6814      	ldr	r4, [r2, #0]
  409b2c:	4613      	mov	r3, r2
  409b2e:	3304      	adds	r3, #4
  409b30:	17e5      	asrs	r5, r4, #31
  409b32:	930b      	str	r3, [sp, #44]	; 0x2c
  409b34:	4622      	mov	r2, r4
  409b36:	462b      	mov	r3, r5
  409b38:	e4cd      	b.n	4094d6 <_svfprintf_r+0x6b6>
  409b3a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  409b3e:	f8cd b00c 	str.w	fp, [sp, #12]
  409b42:	ae40      	add	r6, sp, #256	; 0x100
  409b44:	3430      	adds	r4, #48	; 0x30
  409b46:	2301      	movs	r3, #1
  409b48:	f806 4d41 	strb.w	r4, [r6, #-65]!
  409b4c:	930a      	str	r3, [sp, #40]	; 0x28
  409b4e:	f7ff ba77 	b.w	409040 <_svfprintf_r+0x220>
  409b52:	aa23      	add	r2, sp, #140	; 0x8c
  409b54:	9907      	ldr	r1, [sp, #28]
  409b56:	9808      	ldr	r0, [sp, #32]
  409b58:	f002 f81a 	bl	40bb90 <__ssprint_r>
  409b5c:	2800      	cmp	r0, #0
  409b5e:	f47f aa31 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409b62:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409b64:	46c8      	mov	r8, r9
  409b66:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  409b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409b6a:	429a      	cmp	r2, r3
  409b6c:	db44      	blt.n	409bf8 <_svfprintf_r+0xdd8>
  409b6e:	9b03      	ldr	r3, [sp, #12]
  409b70:	07d9      	lsls	r1, r3, #31
  409b72:	d441      	bmi.n	409bf8 <_svfprintf_r+0xdd8>
  409b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409b76:	980e      	ldr	r0, [sp, #56]	; 0x38
  409b78:	1a9a      	subs	r2, r3, r2
  409b7a:	1a1d      	subs	r5, r3, r0
  409b7c:	4295      	cmp	r5, r2
  409b7e:	bfa8      	it	ge
  409b80:	4615      	movge	r5, r2
  409b82:	2d00      	cmp	r5, #0
  409b84:	dd0e      	ble.n	409ba4 <_svfprintf_r+0xd84>
  409b86:	9924      	ldr	r1, [sp, #144]	; 0x90
  409b88:	f8c8 5004 	str.w	r5, [r8, #4]
  409b8c:	3101      	adds	r1, #1
  409b8e:	4406      	add	r6, r0
  409b90:	442c      	add	r4, r5
  409b92:	2907      	cmp	r1, #7
  409b94:	f8c8 6000 	str.w	r6, [r8]
  409b98:	9425      	str	r4, [sp, #148]	; 0x94
  409b9a:	9124      	str	r1, [sp, #144]	; 0x90
  409b9c:	f300 823a 	bgt.w	40a014 <_svfprintf_r+0x11f4>
  409ba0:	f108 0808 	add.w	r8, r8, #8
  409ba4:	2d00      	cmp	r5, #0
  409ba6:	bfac      	ite	ge
  409ba8:	1b56      	subge	r6, r2, r5
  409baa:	4616      	movlt	r6, r2
  409bac:	2e00      	cmp	r6, #0
  409bae:	f77f ab1e 	ble.w	4091ee <_svfprintf_r+0x3ce>
  409bb2:	2e10      	cmp	r6, #16
  409bb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409bb6:	4db1      	ldr	r5, [pc, #708]	; (409e7c <_svfprintf_r+0x105c>)
  409bb8:	ddac      	ble.n	409b14 <_svfprintf_r+0xcf4>
  409bba:	4622      	mov	r2, r4
  409bbc:	2710      	movs	r7, #16
  409bbe:	f8dd b020 	ldr.w	fp, [sp, #32]
  409bc2:	9c07      	ldr	r4, [sp, #28]
  409bc4:	e004      	b.n	409bd0 <_svfprintf_r+0xdb0>
  409bc6:	f108 0808 	add.w	r8, r8, #8
  409bca:	3e10      	subs	r6, #16
  409bcc:	2e10      	cmp	r6, #16
  409bce:	dda0      	ble.n	409b12 <_svfprintf_r+0xcf2>
  409bd0:	3301      	adds	r3, #1
  409bd2:	3210      	adds	r2, #16
  409bd4:	2b07      	cmp	r3, #7
  409bd6:	9225      	str	r2, [sp, #148]	; 0x94
  409bd8:	9324      	str	r3, [sp, #144]	; 0x90
  409bda:	e888 00a0 	stmia.w	r8, {r5, r7}
  409bde:	ddf2      	ble.n	409bc6 <_svfprintf_r+0xda6>
  409be0:	aa23      	add	r2, sp, #140	; 0x8c
  409be2:	4621      	mov	r1, r4
  409be4:	4658      	mov	r0, fp
  409be6:	f001 ffd3 	bl	40bb90 <__ssprint_r>
  409bea:	2800      	cmp	r0, #0
  409bec:	f47f a9ea 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409bf0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409bf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409bf4:	46c8      	mov	r8, r9
  409bf6:	e7e8      	b.n	409bca <_svfprintf_r+0xdaa>
  409bf8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409bfa:	9813      	ldr	r0, [sp, #76]	; 0x4c
  409bfc:	9914      	ldr	r1, [sp, #80]	; 0x50
  409bfe:	f8c8 1000 	str.w	r1, [r8]
  409c02:	3301      	adds	r3, #1
  409c04:	4404      	add	r4, r0
  409c06:	2b07      	cmp	r3, #7
  409c08:	9425      	str	r4, [sp, #148]	; 0x94
  409c0a:	f8c8 0004 	str.w	r0, [r8, #4]
  409c0e:	9324      	str	r3, [sp, #144]	; 0x90
  409c10:	f300 81f4 	bgt.w	409ffc <_svfprintf_r+0x11dc>
  409c14:	f108 0808 	add.w	r8, r8, #8
  409c18:	e7ac      	b.n	409b74 <_svfprintf_r+0xd54>
  409c1a:	9b03      	ldr	r3, [sp, #12]
  409c1c:	07da      	lsls	r2, r3, #31
  409c1e:	f53f adfc 	bmi.w	40981a <_svfprintf_r+0x9fa>
  409c22:	3701      	adds	r7, #1
  409c24:	3401      	adds	r4, #1
  409c26:	2301      	movs	r3, #1
  409c28:	2f07      	cmp	r7, #7
  409c2a:	9425      	str	r4, [sp, #148]	; 0x94
  409c2c:	9724      	str	r7, [sp, #144]	; 0x90
  409c2e:	f8c8 6000 	str.w	r6, [r8]
  409c32:	f8c8 3004 	str.w	r3, [r8, #4]
  409c36:	f77f ae24 	ble.w	409882 <_svfprintf_r+0xa62>
  409c3a:	e74a      	b.n	409ad2 <_svfprintf_r+0xcb2>
  409c3c:	aa23      	add	r2, sp, #140	; 0x8c
  409c3e:	9907      	ldr	r1, [sp, #28]
  409c40:	9808      	ldr	r0, [sp, #32]
  409c42:	f001 ffa5 	bl	40bb90 <__ssprint_r>
  409c46:	2800      	cmp	r0, #0
  409c48:	f47f a9bc 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409c4c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409c4e:	9f24      	ldr	r7, [sp, #144]	; 0x90
  409c50:	46c8      	mov	r8, r9
  409c52:	e5f0      	b.n	409836 <_svfprintf_r+0xa16>
  409c54:	aa23      	add	r2, sp, #140	; 0x8c
  409c56:	9907      	ldr	r1, [sp, #28]
  409c58:	9808      	ldr	r0, [sp, #32]
  409c5a:	f001 ff99 	bl	40bb90 <__ssprint_r>
  409c5e:	2800      	cmp	r0, #0
  409c60:	f47f a9b0 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409c64:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409c66:	9f24      	ldr	r7, [sp, #144]	; 0x90
  409c68:	46c8      	mov	r8, r9
  409c6a:	e5f3      	b.n	409854 <_svfprintf_r+0xa34>
  409c6c:	464e      	mov	r6, r9
  409c6e:	f7ff b9e7 	b.w	409040 <_svfprintf_r+0x220>
  409c72:	aa23      	add	r2, sp, #140	; 0x8c
  409c74:	9907      	ldr	r1, [sp, #28]
  409c76:	9808      	ldr	r0, [sp, #32]
  409c78:	f001 ff8a 	bl	40bb90 <__ssprint_r>
  409c7c:	2800      	cmp	r0, #0
  409c7e:	f47f a9a1 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409c82:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409c84:	46c8      	mov	r8, r9
  409c86:	f7ff ba63 	b.w	409150 <_svfprintf_r+0x330>
  409c8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  409c8e:	4602      	mov	r2, r0
  409c90:	460b      	mov	r3, r1
  409c92:	f7fe f99f 	bl	407fd4 <__aeabi_dcmpun>
  409c96:	2800      	cmp	r0, #0
  409c98:	f040 8298 	bne.w	40a1cc <_svfprintf_r+0x13ac>
  409c9c:	9b06      	ldr	r3, [sp, #24]
  409c9e:	3301      	adds	r3, #1
  409ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409ca2:	f023 0720 	bic.w	r7, r3, #32
  409ca6:	f000 81d2 	beq.w	40a04e <_svfprintf_r+0x122e>
  409caa:	2f47      	cmp	r7, #71	; 0x47
  409cac:	f000 8120 	beq.w	409ef0 <_svfprintf_r+0x10d0>
  409cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409cb2:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
  409cb6:	2b00      	cmp	r3, #0
  409cb8:	9203      	str	r2, [sp, #12]
  409cba:	f2c0 81f0 	blt.w	40a09e <_svfprintf_r+0x127e>
  409cbe:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
  409cc2:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
  409cc6:	2300      	movs	r3, #0
  409cc8:	930c      	str	r3, [sp, #48]	; 0x30
  409cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409ccc:	2b66      	cmp	r3, #102	; 0x66
  409cce:	f000 81c1 	beq.w	40a054 <_svfprintf_r+0x1234>
  409cd2:	2b46      	cmp	r3, #70	; 0x46
  409cd4:	f000 80f1 	beq.w	409eba <_svfprintf_r+0x109a>
  409cd8:	2f45      	cmp	r7, #69	; 0x45
  409cda:	bf0c      	ite	eq
  409cdc:	9b06      	ldreq	r3, [sp, #24]
  409cde:	9d06      	ldrne	r5, [sp, #24]
  409ce0:	9808      	ldr	r0, [sp, #32]
  409ce2:	bf08      	it	eq
  409ce4:	1c5d      	addeq	r5, r3, #1
  409ce6:	aa21      	add	r2, sp, #132	; 0x84
  409ce8:	ab1e      	add	r3, sp, #120	; 0x78
  409cea:	9201      	str	r2, [sp, #4]
  409cec:	9300      	str	r3, [sp, #0]
  409cee:	462a      	mov	r2, r5
  409cf0:	ab1d      	add	r3, sp, #116	; 0x74
  409cf2:	2102      	movs	r1, #2
  409cf4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
  409cf8:	f000 fbca 	bl	40a490 <_dtoa_r>
  409cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409cfe:	2b67      	cmp	r3, #103	; 0x67
  409d00:	4606      	mov	r6, r0
  409d02:	f040 81d5 	bne.w	40a0b0 <_svfprintf_r+0x1290>
  409d06:	f01b 0f01 	tst.w	fp, #1
  409d0a:	f000 824e 	beq.w	40a1aa <_svfprintf_r+0x138a>
  409d0e:	1974      	adds	r4, r6, r5
  409d10:	2200      	movs	r2, #0
  409d12:	2300      	movs	r3, #0
  409d14:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  409d18:	f7fe f92a 	bl	407f70 <__aeabi_dcmpeq>
  409d1c:	2800      	cmp	r0, #0
  409d1e:	f040 8160 	bne.w	409fe2 <_svfprintf_r+0x11c2>
  409d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409d24:	42a3      	cmp	r3, r4
  409d26:	d206      	bcs.n	409d36 <_svfprintf_r+0xf16>
  409d28:	2130      	movs	r1, #48	; 0x30
  409d2a:	1c5a      	adds	r2, r3, #1
  409d2c:	9221      	str	r2, [sp, #132]	; 0x84
  409d2e:	7019      	strb	r1, [r3, #0]
  409d30:	9b21      	ldr	r3, [sp, #132]	; 0x84
  409d32:	429c      	cmp	r4, r3
  409d34:	d8f9      	bhi.n	409d2a <_svfprintf_r+0xf0a>
  409d36:	1b9b      	subs	r3, r3, r6
  409d38:	2f47      	cmp	r7, #71	; 0x47
  409d3a:	930f      	str	r3, [sp, #60]	; 0x3c
  409d3c:	f000 80f0 	beq.w	409f20 <_svfprintf_r+0x1100>
  409d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409d42:	2b65      	cmp	r3, #101	; 0x65
  409d44:	f340 81c3 	ble.w	40a0ce <_svfprintf_r+0x12ae>
  409d48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409d4a:	2b66      	cmp	r3, #102	; 0x66
  409d4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409d4e:	930e      	str	r3, [sp, #56]	; 0x38
  409d50:	f000 81c0 	beq.w	40a0d4 <_svfprintf_r+0x12b4>
  409d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409d58:	4619      	mov	r1, r3
  409d5a:	4291      	cmp	r1, r2
  409d5c:	f300 8191 	bgt.w	40a082 <_svfprintf_r+0x1262>
  409d60:	f01b 0f01 	tst.w	fp, #1
  409d64:	f040 8223 	bne.w	40a1ae <_svfprintf_r+0x138e>
  409d68:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  409d6c:	9304      	str	r3, [sp, #16]
  409d6e:	2367      	movs	r3, #103	; 0x67
  409d70:	920a      	str	r2, [sp, #40]	; 0x28
  409d72:	930d      	str	r3, [sp, #52]	; 0x34
  409d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409d76:	2b00      	cmp	r3, #0
  409d78:	f040 80cb 	bne.w	409f12 <_svfprintf_r+0x10f2>
  409d7c:	9306      	str	r3, [sp, #24]
  409d7e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  409d82:	f7ff b965 	b.w	409050 <_svfprintf_r+0x230>
  409d86:	f025 0507 	bic.w	r5, r5, #7
  409d8a:	ed95 7b00 	vldr	d7, [r5]
  409d8e:	f105 0308 	add.w	r3, r5, #8
  409d92:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
  409d96:	930b      	str	r3, [sp, #44]	; 0x2c
  409d98:	e416      	b.n	4095c8 <_svfprintf_r+0x7a8>
  409d9a:	4635      	mov	r5, r6
  409d9c:	460c      	mov	r4, r1
  409d9e:	4646      	mov	r6, r8
  409da0:	4690      	mov	r8, r2
  409da2:	3301      	adds	r3, #1
  409da4:	443c      	add	r4, r7
  409da6:	2b07      	cmp	r3, #7
  409da8:	9425      	str	r4, [sp, #148]	; 0x94
  409daa:	9324      	str	r3, [sp, #144]	; 0x90
  409dac:	e888 00a0 	stmia.w	r8, {r5, r7}
  409db0:	f73f aecf 	bgt.w	409b52 <_svfprintf_r+0xd32>
  409db4:	f108 0808 	add.w	r8, r8, #8
  409db8:	e6d5      	b.n	409b66 <_svfprintf_r+0xd46>
  409dba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409dbc:	6813      	ldr	r3, [r2, #0]
  409dbe:	3204      	adds	r2, #4
  409dc0:	920b      	str	r2, [sp, #44]	; 0x2c
  409dc2:	9a05      	ldr	r2, [sp, #20]
  409dc4:	601a      	str	r2, [r3, #0]
  409dc6:	f7ff b852 	b.w	408e6e <_svfprintf_r+0x4e>
  409dca:	aa23      	add	r2, sp, #140	; 0x8c
  409dcc:	9907      	ldr	r1, [sp, #28]
  409dce:	9808      	ldr	r0, [sp, #32]
  409dd0:	f001 fede 	bl	40bb90 <__ssprint_r>
  409dd4:	2800      	cmp	r0, #0
  409dd6:	f47f a8f5 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409dda:	46c8      	mov	r8, r9
  409ddc:	e488      	b.n	4096f0 <_svfprintf_r+0x8d0>
  409dde:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409de0:	4a27      	ldr	r2, [pc, #156]	; (409e80 <_svfprintf_r+0x1060>)
  409de2:	f8c8 2000 	str.w	r2, [r8]
  409de6:	3301      	adds	r3, #1
  409de8:	3401      	adds	r4, #1
  409dea:	2201      	movs	r2, #1
  409dec:	2b07      	cmp	r3, #7
  409dee:	9425      	str	r4, [sp, #148]	; 0x94
  409df0:	9324      	str	r3, [sp, #144]	; 0x90
  409df2:	f8c8 2004 	str.w	r2, [r8, #4]
  409df6:	dc54      	bgt.n	409ea2 <_svfprintf_r+0x1082>
  409df8:	f108 0808 	add.w	r8, r8, #8
  409dfc:	b929      	cbnz	r1, 409e0a <_svfprintf_r+0xfea>
  409dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409e00:	b91b      	cbnz	r3, 409e0a <_svfprintf_r+0xfea>
  409e02:	9b03      	ldr	r3, [sp, #12]
  409e04:	07d8      	lsls	r0, r3, #31
  409e06:	f57f a9f2 	bpl.w	4091ee <_svfprintf_r+0x3ce>
  409e0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409e0c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  409e0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409e10:	f8c8 2000 	str.w	r2, [r8]
  409e14:	3301      	adds	r3, #1
  409e16:	4602      	mov	r2, r0
  409e18:	4422      	add	r2, r4
  409e1a:	2b07      	cmp	r3, #7
  409e1c:	9225      	str	r2, [sp, #148]	; 0x94
  409e1e:	f8c8 0004 	str.w	r0, [r8, #4]
  409e22:	9324      	str	r3, [sp, #144]	; 0x90
  409e24:	f300 8195 	bgt.w	40a152 <_svfprintf_r+0x1332>
  409e28:	f108 0808 	add.w	r8, r8, #8
  409e2c:	2900      	cmp	r1, #0
  409e2e:	f2c0 816d 	blt.w	40a10c <_svfprintf_r+0x12ec>
  409e32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  409e34:	f8c8 6000 	str.w	r6, [r8]
  409e38:	3301      	adds	r3, #1
  409e3a:	188c      	adds	r4, r1, r2
  409e3c:	2b07      	cmp	r3, #7
  409e3e:	9425      	str	r4, [sp, #148]	; 0x94
  409e40:	9324      	str	r3, [sp, #144]	; 0x90
  409e42:	f8c8 1004 	str.w	r1, [r8, #4]
  409e46:	f77f a9d0 	ble.w	4091ea <_svfprintf_r+0x3ca>
  409e4a:	e529      	b.n	4098a0 <_svfprintf_r+0xa80>
  409e4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  409e4e:	9905      	ldr	r1, [sp, #20]
  409e50:	6813      	ldr	r3, [r2, #0]
  409e52:	17cd      	asrs	r5, r1, #31
  409e54:	4608      	mov	r0, r1
  409e56:	3204      	adds	r2, #4
  409e58:	4629      	mov	r1, r5
  409e5a:	920b      	str	r2, [sp, #44]	; 0x2c
  409e5c:	e9c3 0100 	strd	r0, r1, [r3]
  409e60:	f7ff b805 	b.w	408e6e <_svfprintf_r+0x4e>
  409e64:	aa23      	add	r2, sp, #140	; 0x8c
  409e66:	9907      	ldr	r1, [sp, #28]
  409e68:	9808      	ldr	r0, [sp, #32]
  409e6a:	f001 fe91 	bl	40bb90 <__ssprint_r>
  409e6e:	2800      	cmp	r0, #0
  409e70:	f47f a8a8 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409e74:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409e76:	46c8      	mov	r8, r9
  409e78:	e453      	b.n	409722 <_svfprintf_r+0x902>
  409e7a:	bf00      	nop
  409e7c:	0040c638 	.word	0x0040c638
  409e80:	0040c624 	.word	0x0040c624
  409e84:	2140      	movs	r1, #64	; 0x40
  409e86:	9808      	ldr	r0, [sp, #32]
  409e88:	f7fe f8e6 	bl	408058 <_malloc_r>
  409e8c:	9a07      	ldr	r2, [sp, #28]
  409e8e:	6010      	str	r0, [r2, #0]
  409e90:	6110      	str	r0, [r2, #16]
  409e92:	2800      	cmp	r0, #0
  409e94:	f000 81f6 	beq.w	40a284 <_svfprintf_r+0x1464>
  409e98:	9a07      	ldr	r2, [sp, #28]
  409e9a:	2340      	movs	r3, #64	; 0x40
  409e9c:	6153      	str	r3, [r2, #20]
  409e9e:	f7fe bfd6 	b.w	408e4e <_svfprintf_r+0x2e>
  409ea2:	aa23      	add	r2, sp, #140	; 0x8c
  409ea4:	9907      	ldr	r1, [sp, #28]
  409ea6:	9808      	ldr	r0, [sp, #32]
  409ea8:	f001 fe72 	bl	40bb90 <__ssprint_r>
  409eac:	2800      	cmp	r0, #0
  409eae:	f47f a889 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409eb2:	991d      	ldr	r1, [sp, #116]	; 0x74
  409eb4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409eb6:	46c8      	mov	r8, r9
  409eb8:	e7a0      	b.n	409dfc <_svfprintf_r+0xfdc>
  409eba:	9d06      	ldr	r5, [sp, #24]
  409ebc:	9808      	ldr	r0, [sp, #32]
  409ebe:	aa21      	add	r2, sp, #132	; 0x84
  409ec0:	ab1e      	add	r3, sp, #120	; 0x78
  409ec2:	9201      	str	r2, [sp, #4]
  409ec4:	9300      	str	r3, [sp, #0]
  409ec6:	462a      	mov	r2, r5
  409ec8:	ab1d      	add	r3, sp, #116	; 0x74
  409eca:	2103      	movs	r1, #3
  409ecc:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
  409ed0:	f000 fade 	bl	40a490 <_dtoa_r>
  409ed4:	4606      	mov	r6, r0
  409ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409ed8:	2b46      	cmp	r3, #70	; 0x46
  409eda:	eb06 0405 	add.w	r4, r6, r5
  409ede:	f47f af17 	bne.w	409d10 <_svfprintf_r+0xef0>
  409ee2:	7833      	ldrb	r3, [r6, #0]
  409ee4:	2b30      	cmp	r3, #48	; 0x30
  409ee6:	f000 817d 	beq.w	40a1e4 <_svfprintf_r+0x13c4>
  409eea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  409eec:	442c      	add	r4, r5
  409eee:	e70f      	b.n	409d10 <_svfprintf_r+0xef0>
  409ef0:	9b06      	ldr	r3, [sp, #24]
  409ef2:	2b00      	cmp	r3, #0
  409ef4:	bf08      	it	eq
  409ef6:	2301      	moveq	r3, #1
  409ef8:	9306      	str	r3, [sp, #24]
  409efa:	e6d9      	b.n	409cb0 <_svfprintf_r+0xe90>
  409efc:	4630      	mov	r0, r6
  409efe:	9406      	str	r4, [sp, #24]
  409f00:	f7fe ff1e 	bl	408d40 <strlen>
  409f04:	950b      	str	r5, [sp, #44]	; 0x2c
  409f06:	900a      	str	r0, [sp, #40]	; 0x28
  409f08:	f8cd b00c 	str.w	fp, [sp, #12]
  409f0c:	4603      	mov	r3, r0
  409f0e:	f7ff b9eb 	b.w	4092e8 <_svfprintf_r+0x4c8>
  409f12:	272d      	movs	r7, #45	; 0x2d
  409f14:	2300      	movs	r3, #0
  409f16:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  409f1a:	9306      	str	r3, [sp, #24]
  409f1c:	f7ff b899 	b.w	409052 <_svfprintf_r+0x232>
  409f20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  409f22:	930e      	str	r3, [sp, #56]	; 0x38
  409f24:	461a      	mov	r2, r3
  409f26:	3303      	adds	r3, #3
  409f28:	db04      	blt.n	409f34 <_svfprintf_r+0x1114>
  409f2a:	9b06      	ldr	r3, [sp, #24]
  409f2c:	4619      	mov	r1, r3
  409f2e:	4291      	cmp	r1, r2
  409f30:	f6bf af10 	bge.w	409d54 <_svfprintf_r+0xf34>
  409f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409f36:	3b02      	subs	r3, #2
  409f38:	930d      	str	r3, [sp, #52]	; 0x34
  409f3a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  409f3e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
  409f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  409f44:	3b01      	subs	r3, #1
  409f46:	2b00      	cmp	r3, #0
  409f48:	931d      	str	r3, [sp, #116]	; 0x74
  409f4a:	bfbd      	ittte	lt
  409f4c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
  409f4e:	f1c3 0301 	rsblt	r3, r3, #1
  409f52:	222d      	movlt	r2, #45	; 0x2d
  409f54:	222b      	movge	r2, #43	; 0x2b
  409f56:	2b09      	cmp	r3, #9
  409f58:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  409f5c:	f340 811d 	ble.w	40a19a <_svfprintf_r+0x137a>
  409f60:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  409f64:	4620      	mov	r0, r4
  409f66:	4daf      	ldr	r5, [pc, #700]	; (40a224 <_svfprintf_r+0x1404>)
  409f68:	e000      	b.n	409f6c <_svfprintf_r+0x114c>
  409f6a:	4610      	mov	r0, r2
  409f6c:	fb85 1203 	smull	r1, r2, r5, r3
  409f70:	17d9      	asrs	r1, r3, #31
  409f72:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  409f76:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  409f7a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  409f7e:	3230      	adds	r2, #48	; 0x30
  409f80:	2909      	cmp	r1, #9
  409f82:	f800 2c01 	strb.w	r2, [r0, #-1]
  409f86:	460b      	mov	r3, r1
  409f88:	f100 32ff 	add.w	r2, r0, #4294967295
  409f8c:	dced      	bgt.n	409f6a <_svfprintf_r+0x114a>
  409f8e:	3330      	adds	r3, #48	; 0x30
  409f90:	3802      	subs	r0, #2
  409f92:	b2d9      	uxtb	r1, r3
  409f94:	4284      	cmp	r4, r0
  409f96:	f802 1c01 	strb.w	r1, [r2, #-1]
  409f9a:	f240 8170 	bls.w	40a27e <_svfprintf_r+0x145e>
  409f9e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  409fa2:	4613      	mov	r3, r2
  409fa4:	e001      	b.n	409faa <_svfprintf_r+0x118a>
  409fa6:	f813 1b01 	ldrb.w	r1, [r3], #1
  409faa:	f800 1b01 	strb.w	r1, [r0], #1
  409fae:	42a3      	cmp	r3, r4
  409fb0:	d1f9      	bne.n	409fa6 <_svfprintf_r+0x1186>
  409fb2:	3301      	adds	r3, #1
  409fb4:	1a9b      	subs	r3, r3, r2
  409fb6:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  409fba:	4413      	add	r3, r2
  409fbc:	aa1f      	add	r2, sp, #124	; 0x7c
  409fbe:	1a9b      	subs	r3, r3, r2
  409fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409fc2:	9315      	str	r3, [sp, #84]	; 0x54
  409fc4:	2a01      	cmp	r2, #1
  409fc6:	4413      	add	r3, r2
  409fc8:	930a      	str	r3, [sp, #40]	; 0x28
  409fca:	f340 8120 	ble.w	40a20e <_svfprintf_r+0x13ee>
  409fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409fd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  409fd2:	4413      	add	r3, r2
  409fd4:	930a      	str	r3, [sp, #40]	; 0x28
  409fd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409fda:	9304      	str	r3, [sp, #16]
  409fdc:	2300      	movs	r3, #0
  409fde:	930e      	str	r3, [sp, #56]	; 0x38
  409fe0:	e6c8      	b.n	409d74 <_svfprintf_r+0xf54>
  409fe2:	4623      	mov	r3, r4
  409fe4:	e6a7      	b.n	409d36 <_svfprintf_r+0xf16>
  409fe6:	aa23      	add	r2, sp, #140	; 0x8c
  409fe8:	9907      	ldr	r1, [sp, #28]
  409fea:	9808      	ldr	r0, [sp, #32]
  409fec:	f001 fdd0 	bl	40bb90 <__ssprint_r>
  409ff0:	2800      	cmp	r0, #0
  409ff2:	f47e afe7 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  409ff6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409ff8:	46c8      	mov	r8, r9
  409ffa:	e4d5      	b.n	4099a8 <_svfprintf_r+0xb88>
  409ffc:	aa23      	add	r2, sp, #140	; 0x8c
  409ffe:	9907      	ldr	r1, [sp, #28]
  40a000:	9808      	ldr	r0, [sp, #32]
  40a002:	f001 fdc5 	bl	40bb90 <__ssprint_r>
  40a006:	2800      	cmp	r0, #0
  40a008:	f47e afdc 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  40a00c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40a00e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a010:	46c8      	mov	r8, r9
  40a012:	e5af      	b.n	409b74 <_svfprintf_r+0xd54>
  40a014:	aa23      	add	r2, sp, #140	; 0x8c
  40a016:	9907      	ldr	r1, [sp, #28]
  40a018:	9808      	ldr	r0, [sp, #32]
  40a01a:	f001 fdb9 	bl	40bb90 <__ssprint_r>
  40a01e:	2800      	cmp	r0, #0
  40a020:	f47e afd0 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  40a024:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  40a026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a028:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40a02a:	1a9a      	subs	r2, r3, r2
  40a02c:	46c8      	mov	r8, r9
  40a02e:	e5b9      	b.n	409ba4 <_svfprintf_r+0xd84>
  40a030:	9b06      	ldr	r3, [sp, #24]
  40a032:	960e      	str	r6, [sp, #56]	; 0x38
  40a034:	2b06      	cmp	r3, #6
  40a036:	bf28      	it	cs
  40a038:	2306      	movcs	r3, #6
  40a03a:	9606      	str	r6, [sp, #24]
  40a03c:	4637      	mov	r7, r6
  40a03e:	9304      	str	r3, [sp, #16]
  40a040:	950b      	str	r5, [sp, #44]	; 0x2c
  40a042:	f8cd b00c 	str.w	fp, [sp, #12]
  40a046:	930a      	str	r3, [sp, #40]	; 0x28
  40a048:	4e77      	ldr	r6, [pc, #476]	; (40a228 <_svfprintf_r+0x1408>)
  40a04a:	f7ff b801 	b.w	409050 <_svfprintf_r+0x230>
  40a04e:	2306      	movs	r3, #6
  40a050:	9306      	str	r3, [sp, #24]
  40a052:	e62d      	b.n	409cb0 <_svfprintf_r+0xe90>
  40a054:	9c06      	ldr	r4, [sp, #24]
  40a056:	9808      	ldr	r0, [sp, #32]
  40a058:	aa21      	add	r2, sp, #132	; 0x84
  40a05a:	ab1e      	add	r3, sp, #120	; 0x78
  40a05c:	9201      	str	r2, [sp, #4]
  40a05e:	9300      	str	r3, [sp, #0]
  40a060:	4622      	mov	r2, r4
  40a062:	ab1d      	add	r3, sp, #116	; 0x74
  40a064:	2103      	movs	r1, #3
  40a066:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
  40a06a:	f000 fa11 	bl	40a490 <_dtoa_r>
  40a06e:	4623      	mov	r3, r4
  40a070:	4606      	mov	r6, r0
  40a072:	1904      	adds	r4, r0, r4
  40a074:	461d      	mov	r5, r3
  40a076:	e734      	b.n	409ee2 <_svfprintf_r+0x10c2>
  40a078:	272d      	movs	r7, #45	; 0x2d
  40a07a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40a07e:	f7ff baca 	b.w	409616 <_svfprintf_r+0x7f6>
  40a082:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40a086:	4413      	add	r3, r2
  40a088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a08a:	930a      	str	r3, [sp, #40]	; 0x28
  40a08c:	2a00      	cmp	r2, #0
  40a08e:	f340 80b7 	ble.w	40a200 <_svfprintf_r+0x13e0>
  40a092:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40a096:	9304      	str	r3, [sp, #16]
  40a098:	2367      	movs	r3, #103	; 0x67
  40a09a:	930d      	str	r3, [sp, #52]	; 0x34
  40a09c:	e66a      	b.n	409d74 <_svfprintf_r+0xf54>
  40a09e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
  40a0a2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
  40a0a6:	9319      	str	r3, [sp, #100]	; 0x64
  40a0a8:	232d      	movs	r3, #45	; 0x2d
  40a0aa:	9118      	str	r1, [sp, #96]	; 0x60
  40a0ac:	930c      	str	r3, [sp, #48]	; 0x30
  40a0ae:	e60c      	b.n	409cca <_svfprintf_r+0xeaa>
  40a0b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a0b2:	2b47      	cmp	r3, #71	; 0x47
  40a0b4:	f47f ae2b 	bne.w	409d0e <_svfprintf_r+0xeee>
  40a0b8:	f01b 0f01 	tst.w	fp, #1
  40a0bc:	f47f af0b 	bne.w	409ed6 <_svfprintf_r+0x10b6>
  40a0c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a0c2:	2f47      	cmp	r7, #71	; 0x47
  40a0c4:	eba3 0306 	sub.w	r3, r3, r6
  40a0c8:	930f      	str	r3, [sp, #60]	; 0x3c
  40a0ca:	f43f af29 	beq.w	409f20 <_svfprintf_r+0x1100>
  40a0ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40a0d0:	930e      	str	r3, [sp, #56]	; 0x38
  40a0d2:	e732      	b.n	409f3a <_svfprintf_r+0x111a>
  40a0d4:	2b00      	cmp	r3, #0
  40a0d6:	f340 80af 	ble.w	40a238 <_svfprintf_r+0x1418>
  40a0da:	9a06      	ldr	r2, [sp, #24]
  40a0dc:	2a00      	cmp	r2, #0
  40a0de:	d16b      	bne.n	40a1b8 <_svfprintf_r+0x1398>
  40a0e0:	f01b 0f01 	tst.w	fp, #1
  40a0e4:	d168      	bne.n	40a1b8 <_svfprintf_r+0x1398>
  40a0e6:	9304      	str	r3, [sp, #16]
  40a0e8:	930a      	str	r3, [sp, #40]	; 0x28
  40a0ea:	e643      	b.n	409d74 <_svfprintf_r+0xf54>
  40a0ec:	9b06      	ldr	r3, [sp, #24]
  40a0ee:	9304      	str	r3, [sp, #16]
  40a0f0:	930a      	str	r3, [sp, #40]	; 0x28
  40a0f2:	9006      	str	r0, [sp, #24]
  40a0f4:	950b      	str	r5, [sp, #44]	; 0x2c
  40a0f6:	f8cd b00c 	str.w	fp, [sp, #12]
  40a0fa:	900e      	str	r0, [sp, #56]	; 0x38
  40a0fc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40a100:	f7fe bfa6 	b.w	409050 <_svfprintf_r+0x230>
  40a104:	2000      	movs	r0, #0
  40a106:	9006      	str	r0, [sp, #24]
  40a108:	f7fe bee4 	b.w	408ed4 <_svfprintf_r+0xb4>
  40a10c:	424f      	negs	r7, r1
  40a10e:	3110      	adds	r1, #16
  40a110:	4d46      	ldr	r5, [pc, #280]	; (40a22c <_svfprintf_r+0x140c>)
  40a112:	da2b      	bge.n	40a16c <_svfprintf_r+0x134c>
  40a114:	2410      	movs	r4, #16
  40a116:	f8dd b020 	ldr.w	fp, [sp, #32]
  40a11a:	e004      	b.n	40a126 <_svfprintf_r+0x1306>
  40a11c:	f108 0808 	add.w	r8, r8, #8
  40a120:	3f10      	subs	r7, #16
  40a122:	2f10      	cmp	r7, #16
  40a124:	dd22      	ble.n	40a16c <_svfprintf_r+0x134c>
  40a126:	3301      	adds	r3, #1
  40a128:	3210      	adds	r2, #16
  40a12a:	2b07      	cmp	r3, #7
  40a12c:	9225      	str	r2, [sp, #148]	; 0x94
  40a12e:	9324      	str	r3, [sp, #144]	; 0x90
  40a130:	f8c8 5000 	str.w	r5, [r8]
  40a134:	f8c8 4004 	str.w	r4, [r8, #4]
  40a138:	ddf0      	ble.n	40a11c <_svfprintf_r+0x12fc>
  40a13a:	aa23      	add	r2, sp, #140	; 0x8c
  40a13c:	9907      	ldr	r1, [sp, #28]
  40a13e:	4658      	mov	r0, fp
  40a140:	f001 fd26 	bl	40bb90 <__ssprint_r>
  40a144:	2800      	cmp	r0, #0
  40a146:	f47e af3d 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  40a14a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a14c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a14e:	46c8      	mov	r8, r9
  40a150:	e7e6      	b.n	40a120 <_svfprintf_r+0x1300>
  40a152:	aa23      	add	r2, sp, #140	; 0x8c
  40a154:	9907      	ldr	r1, [sp, #28]
  40a156:	9808      	ldr	r0, [sp, #32]
  40a158:	f001 fd1a 	bl	40bb90 <__ssprint_r>
  40a15c:	2800      	cmp	r0, #0
  40a15e:	f47e af31 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  40a162:	991d      	ldr	r1, [sp, #116]	; 0x74
  40a164:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a166:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a168:	46c8      	mov	r8, r9
  40a16a:	e65f      	b.n	409e2c <_svfprintf_r+0x100c>
  40a16c:	3301      	adds	r3, #1
  40a16e:	443a      	add	r2, r7
  40a170:	2b07      	cmp	r3, #7
  40a172:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a176:	9225      	str	r2, [sp, #148]	; 0x94
  40a178:	9324      	str	r3, [sp, #144]	; 0x90
  40a17a:	f108 0808 	add.w	r8, r8, #8
  40a17e:	f77f ae58 	ble.w	409e32 <_svfprintf_r+0x1012>
  40a182:	aa23      	add	r2, sp, #140	; 0x8c
  40a184:	9907      	ldr	r1, [sp, #28]
  40a186:	9808      	ldr	r0, [sp, #32]
  40a188:	f001 fd02 	bl	40bb90 <__ssprint_r>
  40a18c:	2800      	cmp	r0, #0
  40a18e:	f47e af19 	bne.w	408fc4 <_svfprintf_r+0x1a4>
  40a192:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40a194:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a196:	46c8      	mov	r8, r9
  40a198:	e64b      	b.n	409e32 <_svfprintf_r+0x1012>
  40a19a:	3330      	adds	r3, #48	; 0x30
  40a19c:	2230      	movs	r2, #48	; 0x30
  40a19e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40a1a2:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  40a1a6:	ab20      	add	r3, sp, #128	; 0x80
  40a1a8:	e708      	b.n	409fbc <_svfprintf_r+0x119c>
  40a1aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a1ac:	e5c3      	b.n	409d36 <_svfprintf_r+0xf16>
  40a1ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a1b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a1b2:	4413      	add	r3, r2
  40a1b4:	930a      	str	r3, [sp, #40]	; 0x28
  40a1b6:	e76c      	b.n	40a092 <_svfprintf_r+0x1272>
  40a1b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a1ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a1bc:	4413      	add	r3, r2
  40a1be:	9a06      	ldr	r2, [sp, #24]
  40a1c0:	441a      	add	r2, r3
  40a1c2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40a1c6:	920a      	str	r2, [sp, #40]	; 0x28
  40a1c8:	9304      	str	r3, [sp, #16]
  40a1ca:	e5d3      	b.n	409d74 <_svfprintf_r+0xf54>
  40a1cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a1ce:	4e18      	ldr	r6, [pc, #96]	; (40a230 <_svfprintf_r+0x1410>)
  40a1d0:	2b00      	cmp	r3, #0
  40a1d2:	bfb6      	itet	lt
  40a1d4:	272d      	movlt	r7, #45	; 0x2d
  40a1d6:	f89d 706f 	ldrbge.w	r7, [sp, #111]	; 0x6f
  40a1da:	f88d 706f 	strblt.w	r7, [sp, #111]	; 0x6f
  40a1de:	4b15      	ldr	r3, [pc, #84]	; (40a234 <_svfprintf_r+0x1414>)
  40a1e0:	f7ff ba1b 	b.w	40961a <_svfprintf_r+0x7fa>
  40a1e4:	2200      	movs	r2, #0
  40a1e6:	2300      	movs	r3, #0
  40a1e8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
  40a1ec:	f7fd fec0 	bl	407f70 <__aeabi_dcmpeq>
  40a1f0:	2800      	cmp	r0, #0
  40a1f2:	f47f ae7a 	bne.w	409eea <_svfprintf_r+0x10ca>
  40a1f6:	f1c5 0501 	rsb	r5, r5, #1
  40a1fa:	951d      	str	r5, [sp, #116]	; 0x74
  40a1fc:	442c      	add	r4, r5
  40a1fe:	e587      	b.n	409d10 <_svfprintf_r+0xef0>
  40a200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a204:	f1c3 0301 	rsb	r3, r3, #1
  40a208:	441a      	add	r2, r3
  40a20a:	4613      	mov	r3, r2
  40a20c:	e7d2      	b.n	40a1b4 <_svfprintf_r+0x1394>
  40a20e:	f01b 0301 	ands.w	r3, fp, #1
  40a212:	930e      	str	r3, [sp, #56]	; 0x38
  40a214:	f47f aedb 	bne.w	409fce <_svfprintf_r+0x11ae>
  40a218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a21a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40a21e:	9304      	str	r3, [sp, #16]
  40a220:	e5a8      	b.n	409d74 <_svfprintf_r+0xf54>
  40a222:	bf00      	nop
  40a224:	66666667 	.word	0x66666667
  40a228:	0040c61c 	.word	0x0040c61c
  40a22c:	0040c638 	.word	0x0040c638
  40a230:	0040c5f0 	.word	0x0040c5f0
  40a234:	0040c5ec 	.word	0x0040c5ec
  40a238:	9b06      	ldr	r3, [sp, #24]
  40a23a:	b913      	cbnz	r3, 40a242 <_svfprintf_r+0x1422>
  40a23c:	f01b 0f01 	tst.w	fp, #1
  40a240:	d002      	beq.n	40a248 <_svfprintf_r+0x1428>
  40a242:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a244:	3301      	adds	r3, #1
  40a246:	e7ba      	b.n	40a1be <_svfprintf_r+0x139e>
  40a248:	2301      	movs	r3, #1
  40a24a:	e74c      	b.n	40a0e6 <_svfprintf_r+0x12c6>
  40a24c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a24e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40a252:	6828      	ldr	r0, [r5, #0]
  40a254:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40a258:	9006      	str	r0, [sp, #24]
  40a25a:	4628      	mov	r0, r5
  40a25c:	3004      	adds	r0, #4
  40a25e:	46a2      	mov	sl, r4
  40a260:	900b      	str	r0, [sp, #44]	; 0x2c
  40a262:	f7fe be35 	b.w	408ed0 <_svfprintf_r+0xb0>
  40a266:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40a26a:	f7ff b852 	b.w	409312 <_svfprintf_r+0x4f2>
  40a26e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40a272:	f7ff b8de 	b.w	409432 <_svfprintf_r+0x612>
  40a276:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40a27a:	f7ff ba07 	b.w	40968c <_svfprintf_r+0x86c>
  40a27e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  40a282:	e69b      	b.n	409fbc <_svfprintf_r+0x119c>
  40a284:	9a08      	ldr	r2, [sp, #32]
  40a286:	230c      	movs	r3, #12
  40a288:	6013      	str	r3, [r2, #0]
  40a28a:	f04f 33ff 	mov.w	r3, #4294967295
  40a28e:	9305      	str	r3, [sp, #20]
  40a290:	f7fe bea1 	b.w	408fd6 <_svfprintf_r+0x1b6>
  40a294:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40a298:	f7ff b986 	b.w	4095a8 <_svfprintf_r+0x788>
  40a29c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40a2a0:	f7ff b962 	b.w	409568 <_svfprintf_r+0x748>
  40a2a4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40a2a8:	f7ff b945 	b.w	409536 <_svfprintf_r+0x716>
  40a2ac:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40a2b0:	f7ff b8fe 	b.w	4094b0 <_svfprintf_r+0x690>

0040a2b4 <_vsnprintf_r>:
  40a2b4:	b570      	push	{r4, r5, r6, lr}
  40a2b6:	1e14      	subs	r4, r2, #0
  40a2b8:	b09a      	sub	sp, #104	; 0x68
  40a2ba:	4605      	mov	r5, r0
  40a2bc:	db2e      	blt.n	40a31c <_vsnprintf_r+0x68>
  40a2be:	461a      	mov	r2, r3
  40a2c0:	f44f 7302 	mov.w	r3, #520	; 0x208
  40a2c4:	9100      	str	r1, [sp, #0]
  40a2c6:	9104      	str	r1, [sp, #16]
  40a2c8:	f8ad 300c 	strh.w	r3, [sp, #12]
  40a2cc:	d011      	beq.n	40a2f2 <_vsnprintf_r+0x3e>
  40a2ce:	3c01      	subs	r4, #1
  40a2d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40a2d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40a2d6:	9402      	str	r4, [sp, #8]
  40a2d8:	4669      	mov	r1, sp
  40a2da:	9405      	str	r4, [sp, #20]
  40a2dc:	f8ad 600e 	strh.w	r6, [sp, #14]
  40a2e0:	f7fe fd9e 	bl	408e20 <_svfprintf_r>
  40a2e4:	1c42      	adds	r2, r0, #1
  40a2e6:	db12      	blt.n	40a30e <_vsnprintf_r+0x5a>
  40a2e8:	9b00      	ldr	r3, [sp, #0]
  40a2ea:	2200      	movs	r2, #0
  40a2ec:	701a      	strb	r2, [r3, #0]
  40a2ee:	b01a      	add	sp, #104	; 0x68
  40a2f0:	bd70      	pop	{r4, r5, r6, pc}
  40a2f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40a2f4:	9402      	str	r4, [sp, #8]
  40a2f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40a2fa:	4669      	mov	r1, sp
  40a2fc:	9405      	str	r4, [sp, #20]
  40a2fe:	f8ad 600e 	strh.w	r6, [sp, #14]
  40a302:	f7fe fd8d 	bl	408e20 <_svfprintf_r>
  40a306:	1c43      	adds	r3, r0, #1
  40a308:	db04      	blt.n	40a314 <_vsnprintf_r+0x60>
  40a30a:	b01a      	add	sp, #104	; 0x68
  40a30c:	bd70      	pop	{r4, r5, r6, pc}
  40a30e:	238b      	movs	r3, #139	; 0x8b
  40a310:	602b      	str	r3, [r5, #0]
  40a312:	e7e9      	b.n	40a2e8 <_vsnprintf_r+0x34>
  40a314:	238b      	movs	r3, #139	; 0x8b
  40a316:	602b      	str	r3, [r5, #0]
  40a318:	b01a      	add	sp, #104	; 0x68
  40a31a:	bd70      	pop	{r4, r5, r6, pc}
  40a31c:	238b      	movs	r3, #139	; 0x8b
  40a31e:	6003      	str	r3, [r0, #0]
  40a320:	f04f 30ff 	mov.w	r0, #4294967295
  40a324:	e7f1      	b.n	40a30a <_vsnprintf_r+0x56>
  40a326:	bf00      	nop

0040a328 <vsnprintf>:
  40a328:	b510      	push	{r4, lr}
  40a32a:	b082      	sub	sp, #8
  40a32c:	4c05      	ldr	r4, [pc, #20]	; (40a344 <vsnprintf+0x1c>)
  40a32e:	9300      	str	r3, [sp, #0]
  40a330:	6824      	ldr	r4, [r4, #0]
  40a332:	4613      	mov	r3, r2
  40a334:	460a      	mov	r2, r1
  40a336:	4601      	mov	r1, r0
  40a338:	4620      	mov	r0, r4
  40a33a:	f7ff ffbb 	bl	40a2b4 <_vsnprintf_r>
  40a33e:	b002      	add	sp, #8
  40a340:	bd10      	pop	{r4, pc}
  40a342:	bf00      	nop
  40a344:	200024ec 	.word	0x200024ec

0040a348 <register_fini>:
  40a348:	4b02      	ldr	r3, [pc, #8]	; (40a354 <register_fini+0xc>)
  40a34a:	b113      	cbz	r3, 40a352 <register_fini+0xa>
  40a34c:	4802      	ldr	r0, [pc, #8]	; (40a358 <register_fini+0x10>)
  40a34e:	f000 b805 	b.w	40a35c <atexit>
  40a352:	4770      	bx	lr
  40a354:	00000000 	.word	0x00000000
  40a358:	0040b2dd 	.word	0x0040b2dd

0040a35c <atexit>:
  40a35c:	2300      	movs	r3, #0
  40a35e:	4601      	mov	r1, r0
  40a360:	461a      	mov	r2, r3
  40a362:	4618      	mov	r0, r3
  40a364:	f001 bc92 	b.w	40bc8c <__register_exitproc>

0040a368 <quorem>:
  40a368:	6902      	ldr	r2, [r0, #16]
  40a36a:	690b      	ldr	r3, [r1, #16]
  40a36c:	4293      	cmp	r3, r2
  40a36e:	f300 808d 	bgt.w	40a48c <quorem+0x124>
  40a372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a376:	f103 38ff 	add.w	r8, r3, #4294967295
  40a37a:	f101 0714 	add.w	r7, r1, #20
  40a37e:	f100 0b14 	add.w	fp, r0, #20
  40a382:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40a386:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40a38a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40a38e:	b083      	sub	sp, #12
  40a390:	3201      	adds	r2, #1
  40a392:	fbb3 f9f2 	udiv	r9, r3, r2
  40a396:	eb0b 0304 	add.w	r3, fp, r4
  40a39a:	9400      	str	r4, [sp, #0]
  40a39c:	eb07 0a04 	add.w	sl, r7, r4
  40a3a0:	9301      	str	r3, [sp, #4]
  40a3a2:	f1b9 0f00 	cmp.w	r9, #0
  40a3a6:	d039      	beq.n	40a41c <quorem+0xb4>
  40a3a8:	2500      	movs	r5, #0
  40a3aa:	462e      	mov	r6, r5
  40a3ac:	46bc      	mov	ip, r7
  40a3ae:	46de      	mov	lr, fp
  40a3b0:	f85c 4b04 	ldr.w	r4, [ip], #4
  40a3b4:	f8de 3000 	ldr.w	r3, [lr]
  40a3b8:	b2a2      	uxth	r2, r4
  40a3ba:	fb09 5502 	mla	r5, r9, r2, r5
  40a3be:	0c22      	lsrs	r2, r4, #16
  40a3c0:	0c2c      	lsrs	r4, r5, #16
  40a3c2:	fb09 4202 	mla	r2, r9, r2, r4
  40a3c6:	b2ad      	uxth	r5, r5
  40a3c8:	1b75      	subs	r5, r6, r5
  40a3ca:	b296      	uxth	r6, r2
  40a3cc:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40a3d0:	fa15 f383 	uxtah	r3, r5, r3
  40a3d4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40a3d8:	b29b      	uxth	r3, r3
  40a3da:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40a3de:	45e2      	cmp	sl, ip
  40a3e0:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40a3e4:	f84e 3b04 	str.w	r3, [lr], #4
  40a3e8:	ea4f 4626 	mov.w	r6, r6, asr #16
  40a3ec:	d2e0      	bcs.n	40a3b0 <quorem+0x48>
  40a3ee:	9b00      	ldr	r3, [sp, #0]
  40a3f0:	f85b 3003 	ldr.w	r3, [fp, r3]
  40a3f4:	b993      	cbnz	r3, 40a41c <quorem+0xb4>
  40a3f6:	9c01      	ldr	r4, [sp, #4]
  40a3f8:	1f23      	subs	r3, r4, #4
  40a3fa:	459b      	cmp	fp, r3
  40a3fc:	d20c      	bcs.n	40a418 <quorem+0xb0>
  40a3fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40a402:	b94b      	cbnz	r3, 40a418 <quorem+0xb0>
  40a404:	f1a4 0308 	sub.w	r3, r4, #8
  40a408:	e002      	b.n	40a410 <quorem+0xa8>
  40a40a:	681a      	ldr	r2, [r3, #0]
  40a40c:	3b04      	subs	r3, #4
  40a40e:	b91a      	cbnz	r2, 40a418 <quorem+0xb0>
  40a410:	459b      	cmp	fp, r3
  40a412:	f108 38ff 	add.w	r8, r8, #4294967295
  40a416:	d3f8      	bcc.n	40a40a <quorem+0xa2>
  40a418:	f8c0 8010 	str.w	r8, [r0, #16]
  40a41c:	4604      	mov	r4, r0
  40a41e:	f001 fab9 	bl	40b994 <__mcmp>
  40a422:	2800      	cmp	r0, #0
  40a424:	db2e      	blt.n	40a484 <quorem+0x11c>
  40a426:	f109 0901 	add.w	r9, r9, #1
  40a42a:	465d      	mov	r5, fp
  40a42c:	2300      	movs	r3, #0
  40a42e:	f857 1b04 	ldr.w	r1, [r7], #4
  40a432:	6828      	ldr	r0, [r5, #0]
  40a434:	b28a      	uxth	r2, r1
  40a436:	1a9a      	subs	r2, r3, r2
  40a438:	0c0b      	lsrs	r3, r1, #16
  40a43a:	fa12 f280 	uxtah	r2, r2, r0
  40a43e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40a442:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40a446:	b292      	uxth	r2, r2
  40a448:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40a44c:	45ba      	cmp	sl, r7
  40a44e:	f845 2b04 	str.w	r2, [r5], #4
  40a452:	ea4f 4323 	mov.w	r3, r3, asr #16
  40a456:	d2ea      	bcs.n	40a42e <quorem+0xc6>
  40a458:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40a45c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40a460:	b982      	cbnz	r2, 40a484 <quorem+0x11c>
  40a462:	1f1a      	subs	r2, r3, #4
  40a464:	4593      	cmp	fp, r2
  40a466:	d20b      	bcs.n	40a480 <quorem+0x118>
  40a468:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40a46c:	b942      	cbnz	r2, 40a480 <quorem+0x118>
  40a46e:	3b08      	subs	r3, #8
  40a470:	e002      	b.n	40a478 <quorem+0x110>
  40a472:	681a      	ldr	r2, [r3, #0]
  40a474:	3b04      	subs	r3, #4
  40a476:	b91a      	cbnz	r2, 40a480 <quorem+0x118>
  40a478:	459b      	cmp	fp, r3
  40a47a:	f108 38ff 	add.w	r8, r8, #4294967295
  40a47e:	d3f8      	bcc.n	40a472 <quorem+0x10a>
  40a480:	f8c4 8010 	str.w	r8, [r4, #16]
  40a484:	4648      	mov	r0, r9
  40a486:	b003      	add	sp, #12
  40a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a48c:	2000      	movs	r0, #0
  40a48e:	4770      	bx	lr

0040a490 <_dtoa_r>:
  40a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a494:	ec57 6b10 	vmov	r6, r7, d0
  40a498:	b097      	sub	sp, #92	; 0x5c
  40a49a:	6c05      	ldr	r5, [r0, #64]	; 0x40
  40a49c:	9102      	str	r1, [sp, #8]
  40a49e:	4604      	mov	r4, r0
  40a4a0:	4693      	mov	fp, r2
  40a4a2:	9303      	str	r3, [sp, #12]
  40a4a4:	e9cd 6700 	strd	r6, r7, [sp]
  40a4a8:	b14d      	cbz	r5, 40a4be <_dtoa_r+0x2e>
  40a4aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40a4ac:	606a      	str	r2, [r5, #4]
  40a4ae:	2301      	movs	r3, #1
  40a4b0:	4093      	lsls	r3, r2
  40a4b2:	60ab      	str	r3, [r5, #8]
  40a4b4:	4629      	mov	r1, r5
  40a4b6:	f001 f895 	bl	40b5e4 <_Bfree>
  40a4ba:	2300      	movs	r3, #0
  40a4bc:	6423      	str	r3, [r4, #64]	; 0x40
  40a4be:	e9dd 2300 	ldrd	r2, r3, [sp]
  40a4c2:	2b00      	cmp	r3, #0
  40a4c4:	4699      	mov	r9, r3
  40a4c6:	db38      	blt.n	40a53a <_dtoa_r+0xaa>
  40a4c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40a4ca:	2300      	movs	r3, #0
  40a4cc:	6013      	str	r3, [r2, #0]
  40a4ce:	4ba0      	ldr	r3, [pc, #640]	; (40a750 <_dtoa_r+0x2c0>)
  40a4d0:	ea33 0309 	bics.w	r3, r3, r9
  40a4d4:	d017      	beq.n	40a506 <_dtoa_r+0x76>
  40a4d6:	e9dd 6700 	ldrd	r6, r7, [sp]
  40a4da:	2200      	movs	r2, #0
  40a4dc:	2300      	movs	r3, #0
  40a4de:	4630      	mov	r0, r6
  40a4e0:	4639      	mov	r1, r7
  40a4e2:	f7fd fd45 	bl	407f70 <__aeabi_dcmpeq>
  40a4e6:	4680      	mov	r8, r0
  40a4e8:	2800      	cmp	r0, #0
  40a4ea:	d02f      	beq.n	40a54c <_dtoa_r+0xbc>
  40a4ec:	9a03      	ldr	r2, [sp, #12]
  40a4ee:	2301      	movs	r3, #1
  40a4f0:	6013      	str	r3, [r2, #0]
  40a4f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a4f4:	2b00      	cmp	r3, #0
  40a4f6:	f000 80c4 	beq.w	40a682 <_dtoa_r+0x1f2>
  40a4fa:	4896      	ldr	r0, [pc, #600]	; (40a754 <_dtoa_r+0x2c4>)
  40a4fc:	6018      	str	r0, [r3, #0]
  40a4fe:	3801      	subs	r0, #1
  40a500:	b017      	add	sp, #92	; 0x5c
  40a502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a506:	9a03      	ldr	r2, [sp, #12]
  40a508:	f242 730f 	movw	r3, #9999	; 0x270f
  40a50c:	6013      	str	r3, [r2, #0]
  40a50e:	9b00      	ldr	r3, [sp, #0]
  40a510:	b96b      	cbnz	r3, 40a52e <_dtoa_r+0x9e>
  40a512:	f3c9 0313 	ubfx	r3, r9, #0, #20
  40a516:	b953      	cbnz	r3, 40a52e <_dtoa_r+0x9e>
  40a518:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a51a:	488f      	ldr	r0, [pc, #572]	; (40a758 <_dtoa_r+0x2c8>)
  40a51c:	2b00      	cmp	r3, #0
  40a51e:	d0ef      	beq.n	40a500 <_dtoa_r+0x70>
  40a520:	f100 0308 	add.w	r3, r0, #8
  40a524:	9a21      	ldr	r2, [sp, #132]	; 0x84
  40a526:	6013      	str	r3, [r2, #0]
  40a528:	b017      	add	sp, #92	; 0x5c
  40a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a530:	488a      	ldr	r0, [pc, #552]	; (40a75c <_dtoa_r+0x2cc>)
  40a532:	2b00      	cmp	r3, #0
  40a534:	d0e4      	beq.n	40a500 <_dtoa_r+0x70>
  40a536:	1cc3      	adds	r3, r0, #3
  40a538:	e7f4      	b.n	40a524 <_dtoa_r+0x94>
  40a53a:	9a01      	ldr	r2, [sp, #4]
  40a53c:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
  40a540:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40a542:	f8cd 9004 	str.w	r9, [sp, #4]
  40a546:	2301      	movs	r3, #1
  40a548:	6013      	str	r3, [r2, #0]
  40a54a:	e7c0      	b.n	40a4ce <_dtoa_r+0x3e>
  40a54c:	aa14      	add	r2, sp, #80	; 0x50
  40a54e:	a915      	add	r1, sp, #84	; 0x54
  40a550:	ec47 6b10 	vmov	d0, r6, r7
  40a554:	4620      	mov	r0, r4
  40a556:	f001 fabd 	bl	40bad4 <__d2b>
  40a55a:	ea5f 5519 	movs.w	r5, r9, lsr #20
  40a55e:	4682      	mov	sl, r0
  40a560:	d073      	beq.n	40a64a <_dtoa_r+0x1ba>
  40a562:	f3c7 0313 	ubfx	r3, r7, #0, #20
  40a566:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40a56a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  40a56e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  40a572:	4630      	mov	r0, r6
  40a574:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40a578:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40a57c:	2200      	movs	r2, #0
  40a57e:	4b78      	ldr	r3, [pc, #480]	; (40a760 <_dtoa_r+0x2d0>)
  40a580:	f7fd f8da 	bl	407738 <__aeabi_dsub>
  40a584:	a36c      	add	r3, pc, #432	; (adr r3, 40a738 <_dtoa_r+0x2a8>)
  40a586:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a58a:	f7fd fa89 	bl	407aa0 <__aeabi_dmul>
  40a58e:	a36c      	add	r3, pc, #432	; (adr r3, 40a740 <_dtoa_r+0x2b0>)
  40a590:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a594:	f7fd f8d2 	bl	40773c <__adddf3>
  40a598:	4606      	mov	r6, r0
  40a59a:	4628      	mov	r0, r5
  40a59c:	460f      	mov	r7, r1
  40a59e:	f7fd fa19 	bl	4079d4 <__aeabi_i2d>
  40a5a2:	a369      	add	r3, pc, #420	; (adr r3, 40a748 <_dtoa_r+0x2b8>)
  40a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a5a8:	f7fd fa7a 	bl	407aa0 <__aeabi_dmul>
  40a5ac:	4602      	mov	r2, r0
  40a5ae:	460b      	mov	r3, r1
  40a5b0:	4630      	mov	r0, r6
  40a5b2:	4639      	mov	r1, r7
  40a5b4:	f7fd f8c2 	bl	40773c <__adddf3>
  40a5b8:	4606      	mov	r6, r0
  40a5ba:	460f      	mov	r7, r1
  40a5bc:	f001 fc1c 	bl	40bdf8 <__aeabi_d2iz>
  40a5c0:	2200      	movs	r2, #0
  40a5c2:	9004      	str	r0, [sp, #16]
  40a5c4:	2300      	movs	r3, #0
  40a5c6:	4630      	mov	r0, r6
  40a5c8:	4639      	mov	r1, r7
  40a5ca:	f7fd fcdb 	bl	407f84 <__aeabi_dcmplt>
  40a5ce:	2800      	cmp	r0, #0
  40a5d0:	f040 816f 	bne.w	40a8b2 <_dtoa_r+0x422>
  40a5d4:	9e04      	ldr	r6, [sp, #16]
  40a5d6:	2e16      	cmp	r6, #22
  40a5d8:	f200 8159 	bhi.w	40a88e <_dtoa_r+0x3fe>
  40a5dc:	4b61      	ldr	r3, [pc, #388]	; (40a764 <_dtoa_r+0x2d4>)
  40a5de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40a5e2:	e9d3 0100 	ldrd	r0, r1, [r3]
  40a5e6:	e9dd 2300 	ldrd	r2, r3, [sp]
  40a5ea:	f7fd fce9 	bl	407fc0 <__aeabi_dcmpgt>
  40a5ee:	2800      	cmp	r0, #0
  40a5f0:	f000 81c4 	beq.w	40a97c <_dtoa_r+0x4ec>
  40a5f4:	1e73      	subs	r3, r6, #1
  40a5f6:	9304      	str	r3, [sp, #16]
  40a5f8:	2300      	movs	r3, #0
  40a5fa:	930c      	str	r3, [sp, #48]	; 0x30
  40a5fc:	eba8 0505 	sub.w	r5, r8, r5
  40a600:	1e6b      	subs	r3, r5, #1
  40a602:	9305      	str	r3, [sp, #20]
  40a604:	f100 814f 	bmi.w	40a8a6 <_dtoa_r+0x416>
  40a608:	2300      	movs	r3, #0
  40a60a:	9306      	str	r3, [sp, #24]
  40a60c:	9b04      	ldr	r3, [sp, #16]
  40a60e:	2b00      	cmp	r3, #0
  40a610:	f2c0 8140 	blt.w	40a894 <_dtoa_r+0x404>
  40a614:	9a05      	ldr	r2, [sp, #20]
  40a616:	930b      	str	r3, [sp, #44]	; 0x2c
  40a618:	4611      	mov	r1, r2
  40a61a:	4419      	add	r1, r3
  40a61c:	2300      	movs	r3, #0
  40a61e:	9105      	str	r1, [sp, #20]
  40a620:	930a      	str	r3, [sp, #40]	; 0x28
  40a622:	9b02      	ldr	r3, [sp, #8]
  40a624:	2b09      	cmp	r3, #9
  40a626:	d82e      	bhi.n	40a686 <_dtoa_r+0x1f6>
  40a628:	2b05      	cmp	r3, #5
  40a62a:	f340 8651 	ble.w	40b2d0 <_dtoa_r+0xe40>
  40a62e:	3b04      	subs	r3, #4
  40a630:	9302      	str	r3, [sp, #8]
  40a632:	2700      	movs	r7, #0
  40a634:	9b02      	ldr	r3, [sp, #8]
  40a636:	3b02      	subs	r3, #2
  40a638:	2b03      	cmp	r3, #3
  40a63a:	f200 8633 	bhi.w	40b2a4 <_dtoa_r+0xe14>
  40a63e:	e8df f013 	tbh	[pc, r3, lsl #1]
  40a642:	03d6      	.short	0x03d6
  40a644:	03e302cb 	.word	0x03e302cb
  40a648:	0464      	.short	0x0464
  40a64a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
  40a64e:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40a650:	4445      	add	r5, r8
  40a652:	f205 4332 	addw	r3, r5, #1074	; 0x432
  40a656:	2b20      	cmp	r3, #32
  40a658:	f340 818a 	ble.w	40a970 <_dtoa_r+0x4e0>
  40a65c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40a660:	fa09 f903 	lsl.w	r9, r9, r3
  40a664:	9b00      	ldr	r3, [sp, #0]
  40a666:	f205 4012 	addw	r0, r5, #1042	; 0x412
  40a66a:	fa23 f000 	lsr.w	r0, r3, r0
  40a66e:	ea40 0009 	orr.w	r0, r0, r9
  40a672:	f7fd f99f 	bl	4079b4 <__aeabi_ui2d>
  40a676:	2301      	movs	r3, #1
  40a678:	3d01      	subs	r5, #1
  40a67a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40a67e:	9310      	str	r3, [sp, #64]	; 0x40
  40a680:	e77c      	b.n	40a57c <_dtoa_r+0xec>
  40a682:	4839      	ldr	r0, [pc, #228]	; (40a768 <_dtoa_r+0x2d8>)
  40a684:	e73c      	b.n	40a500 <_dtoa_r+0x70>
  40a686:	2100      	movs	r1, #0
  40a688:	6461      	str	r1, [r4, #68]	; 0x44
  40a68a:	4620      	mov	r0, r4
  40a68c:	468b      	mov	fp, r1
  40a68e:	f000 ff83 	bl	40b598 <_Balloc>
  40a692:	f04f 33ff 	mov.w	r3, #4294967295
  40a696:	9308      	str	r3, [sp, #32]
  40a698:	930d      	str	r3, [sp, #52]	; 0x34
  40a69a:	2301      	movs	r3, #1
  40a69c:	9007      	str	r0, [sp, #28]
  40a69e:	6420      	str	r0, [r4, #64]	; 0x40
  40a6a0:	f8cd b008 	str.w	fp, [sp, #8]
  40a6a4:	9309      	str	r3, [sp, #36]	; 0x24
  40a6a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a6a8:	2b00      	cmp	r3, #0
  40a6aa:	f2c0 80d0 	blt.w	40a84e <_dtoa_r+0x3be>
  40a6ae:	9a04      	ldr	r2, [sp, #16]
  40a6b0:	2a0e      	cmp	r2, #14
  40a6b2:	f300 80cc 	bgt.w	40a84e <_dtoa_r+0x3be>
  40a6b6:	4b2b      	ldr	r3, [pc, #172]	; (40a764 <_dtoa_r+0x2d4>)
  40a6b8:	f1bb 0f00 	cmp.w	fp, #0
  40a6bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a6c0:	e9d3 8900 	ldrd	r8, r9, [r3]
  40a6c4:	f2c0 83be 	blt.w	40ae44 <_dtoa_r+0x9b4>
  40a6c8:	e9dd 6700 	ldrd	r6, r7, [sp]
  40a6cc:	4642      	mov	r2, r8
  40a6ce:	464b      	mov	r3, r9
  40a6d0:	4630      	mov	r0, r6
  40a6d2:	4639      	mov	r1, r7
  40a6d4:	f7fd fb0e 	bl	407cf4 <__aeabi_ddiv>
  40a6d8:	f001 fb8e 	bl	40bdf8 <__aeabi_d2iz>
  40a6dc:	4683      	mov	fp, r0
  40a6de:	f7fd f979 	bl	4079d4 <__aeabi_i2d>
  40a6e2:	4642      	mov	r2, r8
  40a6e4:	464b      	mov	r3, r9
  40a6e6:	f7fd f9db 	bl	407aa0 <__aeabi_dmul>
  40a6ea:	460b      	mov	r3, r1
  40a6ec:	4602      	mov	r2, r0
  40a6ee:	4639      	mov	r1, r7
  40a6f0:	4630      	mov	r0, r6
  40a6f2:	f7fd f821 	bl	407738 <__aeabi_dsub>
  40a6f6:	9d07      	ldr	r5, [sp, #28]
  40a6f8:	f10b 0330 	add.w	r3, fp, #48	; 0x30
  40a6fc:	702b      	strb	r3, [r5, #0]
  40a6fe:	9b08      	ldr	r3, [sp, #32]
  40a700:	2b01      	cmp	r3, #1
  40a702:	4606      	mov	r6, r0
  40a704:	460f      	mov	r7, r1
  40a706:	f105 0501 	add.w	r5, r5, #1
  40a70a:	d061      	beq.n	40a7d0 <_dtoa_r+0x340>
  40a70c:	2200      	movs	r2, #0
  40a70e:	4b17      	ldr	r3, [pc, #92]	; (40a76c <_dtoa_r+0x2dc>)
  40a710:	f7fd f9c6 	bl	407aa0 <__aeabi_dmul>
  40a714:	2200      	movs	r2, #0
  40a716:	2300      	movs	r3, #0
  40a718:	4606      	mov	r6, r0
  40a71a:	460f      	mov	r7, r1
  40a71c:	f7fd fc28 	bl	407f70 <__aeabi_dcmpeq>
  40a720:	2800      	cmp	r0, #0
  40a722:	f040 8081 	bne.w	40a828 <_dtoa_r+0x398>
  40a726:	f8cd a000 	str.w	sl, [sp]
  40a72a:	9402      	str	r4, [sp, #8]
  40a72c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40a730:	9c08      	ldr	r4, [sp, #32]
  40a732:	e028      	b.n	40a786 <_dtoa_r+0x2f6>
  40a734:	f3af 8000 	nop.w
  40a738:	636f4361 	.word	0x636f4361
  40a73c:	3fd287a7 	.word	0x3fd287a7
  40a740:	8b60c8b3 	.word	0x8b60c8b3
  40a744:	3fc68a28 	.word	0x3fc68a28
  40a748:	509f79fb 	.word	0x509f79fb
  40a74c:	3fd34413 	.word	0x3fd34413
  40a750:	7ff00000 	.word	0x7ff00000
  40a754:	0040c625 	.word	0x0040c625
  40a758:	0040c648 	.word	0x0040c648
  40a75c:	0040c654 	.word	0x0040c654
  40a760:	3ff80000 	.word	0x3ff80000
  40a764:	0040c680 	.word	0x0040c680
  40a768:	0040c624 	.word	0x0040c624
  40a76c:	40240000 	.word	0x40240000
  40a770:	f7fd f996 	bl	407aa0 <__aeabi_dmul>
  40a774:	2200      	movs	r2, #0
  40a776:	2300      	movs	r3, #0
  40a778:	4606      	mov	r6, r0
  40a77a:	460f      	mov	r7, r1
  40a77c:	f7fd fbf8 	bl	407f70 <__aeabi_dcmpeq>
  40a780:	2800      	cmp	r0, #0
  40a782:	f040 83c5 	bne.w	40af10 <_dtoa_r+0xa80>
  40a786:	4642      	mov	r2, r8
  40a788:	464b      	mov	r3, r9
  40a78a:	4630      	mov	r0, r6
  40a78c:	4639      	mov	r1, r7
  40a78e:	f7fd fab1 	bl	407cf4 <__aeabi_ddiv>
  40a792:	f001 fb31 	bl	40bdf8 <__aeabi_d2iz>
  40a796:	4683      	mov	fp, r0
  40a798:	f7fd f91c 	bl	4079d4 <__aeabi_i2d>
  40a79c:	4642      	mov	r2, r8
  40a79e:	464b      	mov	r3, r9
  40a7a0:	f7fd f97e 	bl	407aa0 <__aeabi_dmul>
  40a7a4:	4602      	mov	r2, r0
  40a7a6:	460b      	mov	r3, r1
  40a7a8:	4630      	mov	r0, r6
  40a7aa:	4639      	mov	r1, r7
  40a7ac:	f7fc ffc4 	bl	407738 <__aeabi_dsub>
  40a7b0:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
  40a7b4:	f805 eb01 	strb.w	lr, [r5], #1
  40a7b8:	eba5 0e0a 	sub.w	lr, r5, sl
  40a7bc:	45a6      	cmp	lr, r4
  40a7be:	4606      	mov	r6, r0
  40a7c0:	460f      	mov	r7, r1
  40a7c2:	f04f 0200 	mov.w	r2, #0
  40a7c6:	4b6e      	ldr	r3, [pc, #440]	; (40a980 <_dtoa_r+0x4f0>)
  40a7c8:	d1d2      	bne.n	40a770 <_dtoa_r+0x2e0>
  40a7ca:	f8dd a000 	ldr.w	sl, [sp]
  40a7ce:	9c02      	ldr	r4, [sp, #8]
  40a7d0:	4632      	mov	r2, r6
  40a7d2:	463b      	mov	r3, r7
  40a7d4:	4630      	mov	r0, r6
  40a7d6:	4639      	mov	r1, r7
  40a7d8:	f7fc ffb0 	bl	40773c <__adddf3>
  40a7dc:	4606      	mov	r6, r0
  40a7de:	460f      	mov	r7, r1
  40a7e0:	4602      	mov	r2, r0
  40a7e2:	460b      	mov	r3, r1
  40a7e4:	4640      	mov	r0, r8
  40a7e6:	4649      	mov	r1, r9
  40a7e8:	f7fd fbcc 	bl	407f84 <__aeabi_dcmplt>
  40a7ec:	b948      	cbnz	r0, 40a802 <_dtoa_r+0x372>
  40a7ee:	4632      	mov	r2, r6
  40a7f0:	463b      	mov	r3, r7
  40a7f2:	4640      	mov	r0, r8
  40a7f4:	4649      	mov	r1, r9
  40a7f6:	f7fd fbbb 	bl	407f70 <__aeabi_dcmpeq>
  40a7fa:	b1a8      	cbz	r0, 40a828 <_dtoa_r+0x398>
  40a7fc:	f01b 0f01 	tst.w	fp, #1
  40a800:	d012      	beq.n	40a828 <_dtoa_r+0x398>
  40a802:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40a806:	9a07      	ldr	r2, [sp, #28]
  40a808:	1e6b      	subs	r3, r5, #1
  40a80a:	e004      	b.n	40a816 <_dtoa_r+0x386>
  40a80c:	429a      	cmp	r2, r3
  40a80e:	f000 842d 	beq.w	40b06c <_dtoa_r+0xbdc>
  40a812:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40a816:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40a81a:	f103 0501 	add.w	r5, r3, #1
  40a81e:	d0f5      	beq.n	40a80c <_dtoa_r+0x37c>
  40a820:	f108 0801 	add.w	r8, r8, #1
  40a824:	f883 8000 	strb.w	r8, [r3]
  40a828:	4651      	mov	r1, sl
  40a82a:	4620      	mov	r0, r4
  40a82c:	f000 feda 	bl	40b5e4 <_Bfree>
  40a830:	2200      	movs	r2, #0
  40a832:	9b04      	ldr	r3, [sp, #16]
  40a834:	702a      	strb	r2, [r5, #0]
  40a836:	9a03      	ldr	r2, [sp, #12]
  40a838:	3301      	adds	r3, #1
  40a83a:	6013      	str	r3, [r2, #0]
  40a83c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40a83e:	2b00      	cmp	r3, #0
  40a840:	f000 83a3 	beq.w	40af8a <_dtoa_r+0xafa>
  40a844:	9807      	ldr	r0, [sp, #28]
  40a846:	601d      	str	r5, [r3, #0]
  40a848:	b017      	add	sp, #92	; 0x5c
  40a84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a84e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a850:	2a00      	cmp	r2, #0
  40a852:	d040      	beq.n	40a8d6 <_dtoa_r+0x446>
  40a854:	9a02      	ldr	r2, [sp, #8]
  40a856:	2a01      	cmp	r2, #1
  40a858:	f340 831c 	ble.w	40ae94 <_dtoa_r+0xa04>
  40a85c:	9b08      	ldr	r3, [sp, #32]
  40a85e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a860:	1e5f      	subs	r7, r3, #1
  40a862:	42ba      	cmp	r2, r7
  40a864:	f2c0 8394 	blt.w	40af90 <_dtoa_r+0xb00>
  40a868:	1bd7      	subs	r7, r2, r7
  40a86a:	9b08      	ldr	r3, [sp, #32]
  40a86c:	2b00      	cmp	r3, #0
  40a86e:	f2c0 847e 	blt.w	40b16e <_dtoa_r+0xcde>
  40a872:	9d06      	ldr	r5, [sp, #24]
  40a874:	9b08      	ldr	r3, [sp, #32]
  40a876:	9a06      	ldr	r2, [sp, #24]
  40a878:	441a      	add	r2, r3
  40a87a:	9206      	str	r2, [sp, #24]
  40a87c:	9a05      	ldr	r2, [sp, #20]
  40a87e:	2101      	movs	r1, #1
  40a880:	441a      	add	r2, r3
  40a882:	4620      	mov	r0, r4
  40a884:	9205      	str	r2, [sp, #20]
  40a886:	f000 ff47 	bl	40b718 <__i2b>
  40a88a:	4606      	mov	r6, r0
  40a88c:	e026      	b.n	40a8dc <_dtoa_r+0x44c>
  40a88e:	2301      	movs	r3, #1
  40a890:	930c      	str	r3, [sp, #48]	; 0x30
  40a892:	e6b3      	b.n	40a5fc <_dtoa_r+0x16c>
  40a894:	9a06      	ldr	r2, [sp, #24]
  40a896:	9b04      	ldr	r3, [sp, #16]
  40a898:	1ad2      	subs	r2, r2, r3
  40a89a:	425b      	negs	r3, r3
  40a89c:	930a      	str	r3, [sp, #40]	; 0x28
  40a89e:	2300      	movs	r3, #0
  40a8a0:	9206      	str	r2, [sp, #24]
  40a8a2:	930b      	str	r3, [sp, #44]	; 0x2c
  40a8a4:	e6bd      	b.n	40a622 <_dtoa_r+0x192>
  40a8a6:	f1c5 0301 	rsb	r3, r5, #1
  40a8aa:	9306      	str	r3, [sp, #24]
  40a8ac:	2300      	movs	r3, #0
  40a8ae:	9305      	str	r3, [sp, #20]
  40a8b0:	e6ac      	b.n	40a60c <_dtoa_r+0x17c>
  40a8b2:	f8dd 9010 	ldr.w	r9, [sp, #16]
  40a8b6:	4648      	mov	r0, r9
  40a8b8:	f7fd f88c 	bl	4079d4 <__aeabi_i2d>
  40a8bc:	4602      	mov	r2, r0
  40a8be:	460b      	mov	r3, r1
  40a8c0:	4630      	mov	r0, r6
  40a8c2:	4639      	mov	r1, r7
  40a8c4:	f7fd fb54 	bl	407f70 <__aeabi_dcmpeq>
  40a8c8:	2800      	cmp	r0, #0
  40a8ca:	f47f ae83 	bne.w	40a5d4 <_dtoa_r+0x144>
  40a8ce:	f109 33ff 	add.w	r3, r9, #4294967295
  40a8d2:	9304      	str	r3, [sp, #16]
  40a8d4:	e67e      	b.n	40a5d4 <_dtoa_r+0x144>
  40a8d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40a8d8:	9d06      	ldr	r5, [sp, #24]
  40a8da:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40a8dc:	2d00      	cmp	r5, #0
  40a8de:	dd0c      	ble.n	40a8fa <_dtoa_r+0x46a>
  40a8e0:	9905      	ldr	r1, [sp, #20]
  40a8e2:	2900      	cmp	r1, #0
  40a8e4:	460b      	mov	r3, r1
  40a8e6:	dd08      	ble.n	40a8fa <_dtoa_r+0x46a>
  40a8e8:	42a9      	cmp	r1, r5
  40a8ea:	9a06      	ldr	r2, [sp, #24]
  40a8ec:	bfa8      	it	ge
  40a8ee:	462b      	movge	r3, r5
  40a8f0:	1ad2      	subs	r2, r2, r3
  40a8f2:	1aed      	subs	r5, r5, r3
  40a8f4:	1acb      	subs	r3, r1, r3
  40a8f6:	9206      	str	r2, [sp, #24]
  40a8f8:	9305      	str	r3, [sp, #20]
  40a8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a8fc:	b1d3      	cbz	r3, 40a934 <_dtoa_r+0x4a4>
  40a8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a900:	2b00      	cmp	r3, #0
  40a902:	f000 82c0 	beq.w	40ae86 <_dtoa_r+0x9f6>
  40a906:	2f00      	cmp	r7, #0
  40a908:	dd10      	ble.n	40a92c <_dtoa_r+0x49c>
  40a90a:	4631      	mov	r1, r6
  40a90c:	463a      	mov	r2, r7
  40a90e:	4620      	mov	r0, r4
  40a910:	f000 ff9e 	bl	40b850 <__pow5mult>
  40a914:	4652      	mov	r2, sl
  40a916:	4601      	mov	r1, r0
  40a918:	4606      	mov	r6, r0
  40a91a:	4620      	mov	r0, r4
  40a91c:	f000 ff06 	bl	40b72c <__multiply>
  40a920:	4651      	mov	r1, sl
  40a922:	4680      	mov	r8, r0
  40a924:	4620      	mov	r0, r4
  40a926:	f000 fe5d 	bl	40b5e4 <_Bfree>
  40a92a:	46c2      	mov	sl, r8
  40a92c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a92e:	1bda      	subs	r2, r3, r7
  40a930:	f040 82aa 	bne.w	40ae88 <_dtoa_r+0x9f8>
  40a934:	2101      	movs	r1, #1
  40a936:	4620      	mov	r0, r4
  40a938:	f000 feee 	bl	40b718 <__i2b>
  40a93c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a93e:	2b00      	cmp	r3, #0
  40a940:	4681      	mov	r9, r0
  40a942:	dd1f      	ble.n	40a984 <_dtoa_r+0x4f4>
  40a944:	4601      	mov	r1, r0
  40a946:	461a      	mov	r2, r3
  40a948:	4620      	mov	r0, r4
  40a94a:	f000 ff81 	bl	40b850 <__pow5mult>
  40a94e:	9b02      	ldr	r3, [sp, #8]
  40a950:	2b01      	cmp	r3, #1
  40a952:	4681      	mov	r9, r0
  40a954:	f340 825b 	ble.w	40ae0e <_dtoa_r+0x97e>
  40a958:	f04f 0800 	mov.w	r8, #0
  40a95c:	f8d9 3010 	ldr.w	r3, [r9, #16]
  40a960:	eb09 0383 	add.w	r3, r9, r3, lsl #2
  40a964:	6918      	ldr	r0, [r3, #16]
  40a966:	f000 fe87 	bl	40b678 <__hi0bits>
  40a96a:	f1c0 0020 	rsb	r0, r0, #32
  40a96e:	e013      	b.n	40a998 <_dtoa_r+0x508>
  40a970:	f1c3 0920 	rsb	r9, r3, #32
  40a974:	9b00      	ldr	r3, [sp, #0]
  40a976:	fa03 f009 	lsl.w	r0, r3, r9
  40a97a:	e67a      	b.n	40a672 <_dtoa_r+0x1e2>
  40a97c:	900c      	str	r0, [sp, #48]	; 0x30
  40a97e:	e63d      	b.n	40a5fc <_dtoa_r+0x16c>
  40a980:	40240000 	.word	0x40240000
  40a984:	9b02      	ldr	r3, [sp, #8]
  40a986:	2b01      	cmp	r3, #1
  40a988:	f340 828d 	ble.w	40aea6 <_dtoa_r+0xa16>
  40a98c:	f04f 0800 	mov.w	r8, #0
  40a990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a992:	2001      	movs	r0, #1
  40a994:	2b00      	cmp	r3, #0
  40a996:	d1e1      	bne.n	40a95c <_dtoa_r+0x4cc>
  40a998:	9a05      	ldr	r2, [sp, #20]
  40a99a:	4410      	add	r0, r2
  40a99c:	f010 001f 	ands.w	r0, r0, #31
  40a9a0:	f000 80a1 	beq.w	40aae6 <_dtoa_r+0x656>
  40a9a4:	f1c0 0320 	rsb	r3, r0, #32
  40a9a8:	2b04      	cmp	r3, #4
  40a9aa:	f340 848c 	ble.w	40b2c6 <_dtoa_r+0xe36>
  40a9ae:	9b06      	ldr	r3, [sp, #24]
  40a9b0:	f1c0 001c 	rsb	r0, r0, #28
  40a9b4:	4403      	add	r3, r0
  40a9b6:	9306      	str	r3, [sp, #24]
  40a9b8:	4613      	mov	r3, r2
  40a9ba:	4403      	add	r3, r0
  40a9bc:	4405      	add	r5, r0
  40a9be:	9305      	str	r3, [sp, #20]
  40a9c0:	9b06      	ldr	r3, [sp, #24]
  40a9c2:	2b00      	cmp	r3, #0
  40a9c4:	dd05      	ble.n	40a9d2 <_dtoa_r+0x542>
  40a9c6:	4651      	mov	r1, sl
  40a9c8:	461a      	mov	r2, r3
  40a9ca:	4620      	mov	r0, r4
  40a9cc:	f000 ff90 	bl	40b8f0 <__lshift>
  40a9d0:	4682      	mov	sl, r0
  40a9d2:	9b05      	ldr	r3, [sp, #20]
  40a9d4:	2b00      	cmp	r3, #0
  40a9d6:	dd05      	ble.n	40a9e4 <_dtoa_r+0x554>
  40a9d8:	4649      	mov	r1, r9
  40a9da:	461a      	mov	r2, r3
  40a9dc:	4620      	mov	r0, r4
  40a9de:	f000 ff87 	bl	40b8f0 <__lshift>
  40a9e2:	4681      	mov	r9, r0
  40a9e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40a9e6:	2b00      	cmp	r3, #0
  40a9e8:	f040 8086 	bne.w	40aaf8 <_dtoa_r+0x668>
  40a9ec:	9b08      	ldr	r3, [sp, #32]
  40a9ee:	2b00      	cmp	r3, #0
  40a9f0:	f340 8269 	ble.w	40aec6 <_dtoa_r+0xa36>
  40a9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a9f6:	2b00      	cmp	r3, #0
  40a9f8:	f000 8098 	beq.w	40ab2c <_dtoa_r+0x69c>
  40a9fc:	2d00      	cmp	r5, #0
  40a9fe:	dd05      	ble.n	40aa0c <_dtoa_r+0x57c>
  40aa00:	4631      	mov	r1, r6
  40aa02:	462a      	mov	r2, r5
  40aa04:	4620      	mov	r0, r4
  40aa06:	f000 ff73 	bl	40b8f0 <__lshift>
  40aa0a:	4606      	mov	r6, r0
  40aa0c:	f1b8 0f00 	cmp.w	r8, #0
  40aa10:	f040 8336 	bne.w	40b080 <_dtoa_r+0xbf0>
  40aa14:	46b0      	mov	r8, r6
  40aa16:	9b08      	ldr	r3, [sp, #32]
  40aa18:	9a07      	ldr	r2, [sp, #28]
  40aa1a:	3b01      	subs	r3, #1
  40aa1c:	18d3      	adds	r3, r2, r3
  40aa1e:	9308      	str	r3, [sp, #32]
  40aa20:	9b00      	ldr	r3, [sp, #0]
  40aa22:	f003 0301 	and.w	r3, r3, #1
  40aa26:	9309      	str	r3, [sp, #36]	; 0x24
  40aa28:	4617      	mov	r7, r2
  40aa2a:	4649      	mov	r1, r9
  40aa2c:	4650      	mov	r0, sl
  40aa2e:	f7ff fc9b 	bl	40a368 <quorem>
  40aa32:	4631      	mov	r1, r6
  40aa34:	4605      	mov	r5, r0
  40aa36:	4650      	mov	r0, sl
  40aa38:	f000 ffac 	bl	40b994 <__mcmp>
  40aa3c:	4642      	mov	r2, r8
  40aa3e:	4649      	mov	r1, r9
  40aa40:	4683      	mov	fp, r0
  40aa42:	4620      	mov	r0, r4
  40aa44:	f000 ffc2 	bl	40b9cc <__mdiff>
  40aa48:	f105 0230 	add.w	r2, r5, #48	; 0x30
  40aa4c:	9200      	str	r2, [sp, #0]
  40aa4e:	68c2      	ldr	r2, [r0, #12]
  40aa50:	4601      	mov	r1, r0
  40aa52:	2a00      	cmp	r2, #0
  40aa54:	f040 8232 	bne.w	40aebc <_dtoa_r+0xa2c>
  40aa58:	9006      	str	r0, [sp, #24]
  40aa5a:	4650      	mov	r0, sl
  40aa5c:	f000 ff9a 	bl	40b994 <__mcmp>
  40aa60:	9b06      	ldr	r3, [sp, #24]
  40aa62:	9005      	str	r0, [sp, #20]
  40aa64:	4619      	mov	r1, r3
  40aa66:	4620      	mov	r0, r4
  40aa68:	f000 fdbc 	bl	40b5e4 <_Bfree>
  40aa6c:	9a05      	ldr	r2, [sp, #20]
  40aa6e:	b932      	cbnz	r2, 40aa7e <_dtoa_r+0x5ee>
  40aa70:	9b02      	ldr	r3, [sp, #8]
  40aa72:	b923      	cbnz	r3, 40aa7e <_dtoa_r+0x5ee>
  40aa74:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aa76:	2b00      	cmp	r3, #0
  40aa78:	f000 83de 	beq.w	40b238 <_dtoa_r+0xda8>
  40aa7c:	9a02      	ldr	r2, [sp, #8]
  40aa7e:	f1bb 0f00 	cmp.w	fp, #0
  40aa82:	f2c0 82a2 	blt.w	40afca <_dtoa_r+0xb3a>
  40aa86:	d105      	bne.n	40aa94 <_dtoa_r+0x604>
  40aa88:	9b02      	ldr	r3, [sp, #8]
  40aa8a:	b91b      	cbnz	r3, 40aa94 <_dtoa_r+0x604>
  40aa8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aa8e:	2b00      	cmp	r3, #0
  40aa90:	f000 829b 	beq.w	40afca <_dtoa_r+0xb3a>
  40aa94:	2a00      	cmp	r2, #0
  40aa96:	f300 8307 	bgt.w	40b0a8 <_dtoa_r+0xc18>
  40aa9a:	f89d 3000 	ldrb.w	r3, [sp]
  40aa9e:	703b      	strb	r3, [r7, #0]
  40aaa0:	9b08      	ldr	r3, [sp, #32]
  40aaa2:	f107 0b01 	add.w	fp, r7, #1
  40aaa6:	429f      	cmp	r7, r3
  40aaa8:	465d      	mov	r5, fp
  40aaaa:	f000 8308 	beq.w	40b0be <_dtoa_r+0xc2e>
  40aaae:	4651      	mov	r1, sl
  40aab0:	2300      	movs	r3, #0
  40aab2:	220a      	movs	r2, #10
  40aab4:	4620      	mov	r0, r4
  40aab6:	f000 fd9f 	bl	40b5f8 <__multadd>
  40aaba:	4546      	cmp	r6, r8
  40aabc:	4682      	mov	sl, r0
  40aabe:	4631      	mov	r1, r6
  40aac0:	f04f 0300 	mov.w	r3, #0
  40aac4:	f04f 020a 	mov.w	r2, #10
  40aac8:	4620      	mov	r0, r4
  40aaca:	f000 81f1 	beq.w	40aeb0 <_dtoa_r+0xa20>
  40aace:	f000 fd93 	bl	40b5f8 <__multadd>
  40aad2:	4641      	mov	r1, r8
  40aad4:	4606      	mov	r6, r0
  40aad6:	2300      	movs	r3, #0
  40aad8:	220a      	movs	r2, #10
  40aada:	4620      	mov	r0, r4
  40aadc:	f000 fd8c 	bl	40b5f8 <__multadd>
  40aae0:	465f      	mov	r7, fp
  40aae2:	4680      	mov	r8, r0
  40aae4:	e7a1      	b.n	40aa2a <_dtoa_r+0x59a>
  40aae6:	201c      	movs	r0, #28
  40aae8:	9b06      	ldr	r3, [sp, #24]
  40aaea:	4403      	add	r3, r0
  40aaec:	9306      	str	r3, [sp, #24]
  40aaee:	9b05      	ldr	r3, [sp, #20]
  40aaf0:	4403      	add	r3, r0
  40aaf2:	4405      	add	r5, r0
  40aaf4:	9305      	str	r3, [sp, #20]
  40aaf6:	e763      	b.n	40a9c0 <_dtoa_r+0x530>
  40aaf8:	4649      	mov	r1, r9
  40aafa:	4650      	mov	r0, sl
  40aafc:	f000 ff4a 	bl	40b994 <__mcmp>
  40ab00:	2800      	cmp	r0, #0
  40ab02:	f6bf af73 	bge.w	40a9ec <_dtoa_r+0x55c>
  40ab06:	9f04      	ldr	r7, [sp, #16]
  40ab08:	4651      	mov	r1, sl
  40ab0a:	2300      	movs	r3, #0
  40ab0c:	220a      	movs	r2, #10
  40ab0e:	4620      	mov	r0, r4
  40ab10:	3f01      	subs	r7, #1
  40ab12:	9704      	str	r7, [sp, #16]
  40ab14:	f000 fd70 	bl	40b5f8 <__multadd>
  40ab18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ab1a:	4682      	mov	sl, r0
  40ab1c:	2b00      	cmp	r3, #0
  40ab1e:	f040 83a7 	bne.w	40b270 <_dtoa_r+0xde0>
  40ab22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ab24:	2b00      	cmp	r3, #0
  40ab26:	f340 83b0 	ble.w	40b28a <_dtoa_r+0xdfa>
  40ab2a:	9308      	str	r3, [sp, #32]
  40ab2c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40ab30:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40ab34:	465d      	mov	r5, fp
  40ab36:	e002      	b.n	40ab3e <_dtoa_r+0x6ae>
  40ab38:	f000 fd5e 	bl	40b5f8 <__multadd>
  40ab3c:	4682      	mov	sl, r0
  40ab3e:	4649      	mov	r1, r9
  40ab40:	4650      	mov	r0, sl
  40ab42:	f7ff fc11 	bl	40a368 <quorem>
  40ab46:	f100 0730 	add.w	r7, r0, #48	; 0x30
  40ab4a:	f805 7b01 	strb.w	r7, [r5], #1
  40ab4e:	eba5 030b 	sub.w	r3, r5, fp
  40ab52:	4543      	cmp	r3, r8
  40ab54:	f04f 020a 	mov.w	r2, #10
  40ab58:	f04f 0300 	mov.w	r3, #0
  40ab5c:	4651      	mov	r1, sl
  40ab5e:	4620      	mov	r0, r4
  40ab60:	dbea      	blt.n	40ab38 <_dtoa_r+0x6a8>
  40ab62:	9b07      	ldr	r3, [sp, #28]
  40ab64:	9a08      	ldr	r2, [sp, #32]
  40ab66:	9700      	str	r7, [sp, #0]
  40ab68:	2a01      	cmp	r2, #1
  40ab6a:	bfac      	ite	ge
  40ab6c:	189b      	addge	r3, r3, r2
  40ab6e:	3301      	addlt	r3, #1
  40ab70:	461d      	mov	r5, r3
  40ab72:	f04f 0b00 	mov.w	fp, #0
  40ab76:	4651      	mov	r1, sl
  40ab78:	2201      	movs	r2, #1
  40ab7a:	4620      	mov	r0, r4
  40ab7c:	f000 feb8 	bl	40b8f0 <__lshift>
  40ab80:	4649      	mov	r1, r9
  40ab82:	4682      	mov	sl, r0
  40ab84:	f000 ff06 	bl	40b994 <__mcmp>
  40ab88:	2800      	cmp	r0, #0
  40ab8a:	f340 823a 	ble.w	40b002 <_dtoa_r+0xb72>
  40ab8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40ab92:	9907      	ldr	r1, [sp, #28]
  40ab94:	1e6b      	subs	r3, r5, #1
  40ab96:	e004      	b.n	40aba2 <_dtoa_r+0x712>
  40ab98:	428b      	cmp	r3, r1
  40ab9a:	f000 81af 	beq.w	40aefc <_dtoa_r+0xa6c>
  40ab9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40aba2:	2a39      	cmp	r2, #57	; 0x39
  40aba4:	f103 0501 	add.w	r5, r3, #1
  40aba8:	d0f6      	beq.n	40ab98 <_dtoa_r+0x708>
  40abaa:	3201      	adds	r2, #1
  40abac:	701a      	strb	r2, [r3, #0]
  40abae:	4649      	mov	r1, r9
  40abb0:	4620      	mov	r0, r4
  40abb2:	f000 fd17 	bl	40b5e4 <_Bfree>
  40abb6:	2e00      	cmp	r6, #0
  40abb8:	f43f ae36 	beq.w	40a828 <_dtoa_r+0x398>
  40abbc:	f1bb 0f00 	cmp.w	fp, #0
  40abc0:	d005      	beq.n	40abce <_dtoa_r+0x73e>
  40abc2:	45b3      	cmp	fp, r6
  40abc4:	d003      	beq.n	40abce <_dtoa_r+0x73e>
  40abc6:	4659      	mov	r1, fp
  40abc8:	4620      	mov	r0, r4
  40abca:	f000 fd0b 	bl	40b5e4 <_Bfree>
  40abce:	4631      	mov	r1, r6
  40abd0:	4620      	mov	r0, r4
  40abd2:	f000 fd07 	bl	40b5e4 <_Bfree>
  40abd6:	e627      	b.n	40a828 <_dtoa_r+0x398>
  40abd8:	2300      	movs	r3, #0
  40abda:	9309      	str	r3, [sp, #36]	; 0x24
  40abdc:	9b04      	ldr	r3, [sp, #16]
  40abde:	445b      	add	r3, fp
  40abe0:	930d      	str	r3, [sp, #52]	; 0x34
  40abe2:	3301      	adds	r3, #1
  40abe4:	2b01      	cmp	r3, #1
  40abe6:	461e      	mov	r6, r3
  40abe8:	461d      	mov	r5, r3
  40abea:	9308      	str	r3, [sp, #32]
  40abec:	bfb8      	it	lt
  40abee:	2601      	movlt	r6, #1
  40abf0:	2100      	movs	r1, #0
  40abf2:	2e17      	cmp	r6, #23
  40abf4:	6461      	str	r1, [r4, #68]	; 0x44
  40abf6:	d90a      	bls.n	40ac0e <_dtoa_r+0x77e>
  40abf8:	2201      	movs	r2, #1
  40abfa:	2304      	movs	r3, #4
  40abfc:	005b      	lsls	r3, r3, #1
  40abfe:	f103 0014 	add.w	r0, r3, #20
  40ac02:	4286      	cmp	r6, r0
  40ac04:	4611      	mov	r1, r2
  40ac06:	f102 0201 	add.w	r2, r2, #1
  40ac0a:	d2f7      	bcs.n	40abfc <_dtoa_r+0x76c>
  40ac0c:	6461      	str	r1, [r4, #68]	; 0x44
  40ac0e:	4620      	mov	r0, r4
  40ac10:	f000 fcc2 	bl	40b598 <_Balloc>
  40ac14:	2d0e      	cmp	r5, #14
  40ac16:	9007      	str	r0, [sp, #28]
  40ac18:	6420      	str	r0, [r4, #64]	; 0x40
  40ac1a:	f63f ad44 	bhi.w	40a6a6 <_dtoa_r+0x216>
  40ac1e:	2f00      	cmp	r7, #0
  40ac20:	f43f ad41 	beq.w	40a6a6 <_dtoa_r+0x216>
  40ac24:	9904      	ldr	r1, [sp, #16]
  40ac26:	2900      	cmp	r1, #0
  40ac28:	ed9d 7b00 	vldr	d7, [sp]
  40ac2c:	f340 81f6 	ble.w	40b01c <_dtoa_r+0xb8c>
  40ac30:	4bb9      	ldr	r3, [pc, #740]	; (40af18 <_dtoa_r+0xa88>)
  40ac32:	f001 020f 	and.w	r2, r1, #15
  40ac36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40ac3a:	110d      	asrs	r5, r1, #4
  40ac3c:	e9d3 6700 	ldrd	r6, r7, [r3]
  40ac40:	06eb      	lsls	r3, r5, #27
  40ac42:	f140 81ad 	bpl.w	40afa0 <_dtoa_r+0xb10>
  40ac46:	4bb5      	ldr	r3, [pc, #724]	; (40af1c <_dtoa_r+0xa8c>)
  40ac48:	ec51 0b17 	vmov	r0, r1, d7
  40ac4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40ac50:	f7fd f850 	bl	407cf4 <__aeabi_ddiv>
  40ac54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  40ac58:	f005 050f 	and.w	r5, r5, #15
  40ac5c:	f04f 0903 	mov.w	r9, #3
  40ac60:	b18d      	cbz	r5, 40ac86 <_dtoa_r+0x7f6>
  40ac62:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 40af1c <_dtoa_r+0xa8c>
  40ac66:	07e8      	lsls	r0, r5, #31
  40ac68:	d509      	bpl.n	40ac7e <_dtoa_r+0x7ee>
  40ac6a:	4630      	mov	r0, r6
  40ac6c:	4639      	mov	r1, r7
  40ac6e:	e9d8 2300 	ldrd	r2, r3, [r8]
  40ac72:	f7fc ff15 	bl	407aa0 <__aeabi_dmul>
  40ac76:	f109 0901 	add.w	r9, r9, #1
  40ac7a:	4606      	mov	r6, r0
  40ac7c:	460f      	mov	r7, r1
  40ac7e:	106d      	asrs	r5, r5, #1
  40ac80:	f108 0808 	add.w	r8, r8, #8
  40ac84:	d1ef      	bne.n	40ac66 <_dtoa_r+0x7d6>
  40ac86:	463b      	mov	r3, r7
  40ac88:	4632      	mov	r2, r6
  40ac8a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40ac8e:	f7fd f831 	bl	407cf4 <__aeabi_ddiv>
  40ac92:	4607      	mov	r7, r0
  40ac94:	4688      	mov	r8, r1
  40ac96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ac98:	b143      	cbz	r3, 40acac <_dtoa_r+0x81c>
  40ac9a:	2200      	movs	r2, #0
  40ac9c:	4ba0      	ldr	r3, [pc, #640]	; (40af20 <_dtoa_r+0xa90>)
  40ac9e:	4638      	mov	r0, r7
  40aca0:	4641      	mov	r1, r8
  40aca2:	f7fd f96f 	bl	407f84 <__aeabi_dcmplt>
  40aca6:	2800      	cmp	r0, #0
  40aca8:	f040 8273 	bne.w	40b192 <_dtoa_r+0xd02>
  40acac:	4648      	mov	r0, r9
  40acae:	f7fc fe91 	bl	4079d4 <__aeabi_i2d>
  40acb2:	463a      	mov	r2, r7
  40acb4:	4643      	mov	r3, r8
  40acb6:	f7fc fef3 	bl	407aa0 <__aeabi_dmul>
  40acba:	4b9a      	ldr	r3, [pc, #616]	; (40af24 <_dtoa_r+0xa94>)
  40acbc:	2200      	movs	r2, #0
  40acbe:	f7fc fd3d 	bl	40773c <__adddf3>
  40acc2:	9b08      	ldr	r3, [sp, #32]
  40acc4:	4605      	mov	r5, r0
  40acc6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40acca:	2b00      	cmp	r3, #0
  40accc:	f000 8140 	beq.w	40af50 <_dtoa_r+0xac0>
  40acd0:	9b04      	ldr	r3, [sp, #16]
  40acd2:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40acd6:	9311      	str	r3, [sp, #68]	; 0x44
  40acd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40acda:	2b00      	cmp	r3, #0
  40acdc:	f000 81f6 	beq.w	40b0cc <_dtoa_r+0xc3c>
  40ace0:	4b8d      	ldr	r3, [pc, #564]	; (40af18 <_dtoa_r+0xa88>)
  40ace2:	4991      	ldr	r1, [pc, #580]	; (40af28 <_dtoa_r+0xa98>)
  40ace4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40ace8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40acec:	2000      	movs	r0, #0
  40acee:	f7fd f801 	bl	407cf4 <__aeabi_ddiv>
  40acf2:	462a      	mov	r2, r5
  40acf4:	4633      	mov	r3, r6
  40acf6:	f7fc fd1f 	bl	407738 <__aeabi_dsub>
  40acfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  40acfe:	4641      	mov	r1, r8
  40ad00:	4638      	mov	r0, r7
  40ad02:	f001 f879 	bl	40bdf8 <__aeabi_d2iz>
  40ad06:	4605      	mov	r5, r0
  40ad08:	f7fc fe64 	bl	4079d4 <__aeabi_i2d>
  40ad0c:	4602      	mov	r2, r0
  40ad0e:	460b      	mov	r3, r1
  40ad10:	4638      	mov	r0, r7
  40ad12:	4641      	mov	r1, r8
  40ad14:	f7fc fd10 	bl	407738 <__aeabi_dsub>
  40ad18:	3530      	adds	r5, #48	; 0x30
  40ad1a:	fa5f f885 	uxtb.w	r8, r5
  40ad1e:	9d07      	ldr	r5, [sp, #28]
  40ad20:	4606      	mov	r6, r0
  40ad22:	460f      	mov	r7, r1
  40ad24:	f885 8000 	strb.w	r8, [r5]
  40ad28:	4602      	mov	r2, r0
  40ad2a:	460b      	mov	r3, r1
  40ad2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40ad30:	3501      	adds	r5, #1
  40ad32:	f7fd f945 	bl	407fc0 <__aeabi_dcmpgt>
  40ad36:	2800      	cmp	r0, #0
  40ad38:	d156      	bne.n	40ade8 <_dtoa_r+0x958>
  40ad3a:	4632      	mov	r2, r6
  40ad3c:	463b      	mov	r3, r7
  40ad3e:	2000      	movs	r0, #0
  40ad40:	4977      	ldr	r1, [pc, #476]	; (40af20 <_dtoa_r+0xa90>)
  40ad42:	f7fc fcf9 	bl	407738 <__aeabi_dsub>
  40ad46:	4602      	mov	r2, r0
  40ad48:	460b      	mov	r3, r1
  40ad4a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40ad4e:	f7fd f937 	bl	407fc0 <__aeabi_dcmpgt>
  40ad52:	2800      	cmp	r0, #0
  40ad54:	f040 8262 	bne.w	40b21c <_dtoa_r+0xd8c>
  40ad58:	f1b9 0f01 	cmp.w	r9, #1
  40ad5c:	f43f aca3 	beq.w	40a6a6 <_dtoa_r+0x216>
  40ad60:	9b07      	ldr	r3, [sp, #28]
  40ad62:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  40ad66:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40ad6a:	4499      	add	r9, r3
  40ad6c:	46a0      	mov	r8, r4
  40ad6e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40ad72:	e00d      	b.n	40ad90 <_dtoa_r+0x900>
  40ad74:	2000      	movs	r0, #0
  40ad76:	496a      	ldr	r1, [pc, #424]	; (40af20 <_dtoa_r+0xa90>)
  40ad78:	f7fc fcde 	bl	407738 <__aeabi_dsub>
  40ad7c:	4652      	mov	r2, sl
  40ad7e:	465b      	mov	r3, fp
  40ad80:	f7fd f900 	bl	407f84 <__aeabi_dcmplt>
  40ad84:	2800      	cmp	r0, #0
  40ad86:	f040 8244 	bne.w	40b212 <_dtoa_r+0xd82>
  40ad8a:	454d      	cmp	r5, r9
  40ad8c:	f000 824a 	beq.w	40b224 <_dtoa_r+0xd94>
  40ad90:	4650      	mov	r0, sl
  40ad92:	4659      	mov	r1, fp
  40ad94:	2200      	movs	r2, #0
  40ad96:	4b65      	ldr	r3, [pc, #404]	; (40af2c <_dtoa_r+0xa9c>)
  40ad98:	f7fc fe82 	bl	407aa0 <__aeabi_dmul>
  40ad9c:	2200      	movs	r2, #0
  40ad9e:	4b63      	ldr	r3, [pc, #396]	; (40af2c <_dtoa_r+0xa9c>)
  40ada0:	4682      	mov	sl, r0
  40ada2:	468b      	mov	fp, r1
  40ada4:	4630      	mov	r0, r6
  40ada6:	4639      	mov	r1, r7
  40ada8:	f7fc fe7a 	bl	407aa0 <__aeabi_dmul>
  40adac:	460f      	mov	r7, r1
  40adae:	4606      	mov	r6, r0
  40adb0:	f001 f822 	bl	40bdf8 <__aeabi_d2iz>
  40adb4:	4604      	mov	r4, r0
  40adb6:	f7fc fe0d 	bl	4079d4 <__aeabi_i2d>
  40adba:	4602      	mov	r2, r0
  40adbc:	460b      	mov	r3, r1
  40adbe:	4630      	mov	r0, r6
  40adc0:	4639      	mov	r1, r7
  40adc2:	f7fc fcb9 	bl	407738 <__aeabi_dsub>
  40adc6:	3430      	adds	r4, #48	; 0x30
  40adc8:	b2e4      	uxtb	r4, r4
  40adca:	4652      	mov	r2, sl
  40adcc:	465b      	mov	r3, fp
  40adce:	f805 4b01 	strb.w	r4, [r5], #1
  40add2:	4606      	mov	r6, r0
  40add4:	460f      	mov	r7, r1
  40add6:	f7fd f8d5 	bl	407f84 <__aeabi_dcmplt>
  40adda:	4632      	mov	r2, r6
  40addc:	463b      	mov	r3, r7
  40adde:	2800      	cmp	r0, #0
  40ade0:	d0c8      	beq.n	40ad74 <_dtoa_r+0x8e4>
  40ade2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
  40ade6:	4644      	mov	r4, r8
  40ade8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40adea:	9304      	str	r3, [sp, #16]
  40adec:	e51c      	b.n	40a828 <_dtoa_r+0x398>
  40adee:	2300      	movs	r3, #0
  40adf0:	9309      	str	r3, [sp, #36]	; 0x24
  40adf2:	f1bb 0f00 	cmp.w	fp, #0
  40adf6:	f340 80da 	ble.w	40afae <_dtoa_r+0xb1e>
  40adfa:	465e      	mov	r6, fp
  40adfc:	465d      	mov	r5, fp
  40adfe:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40ae02:	f8cd b020 	str.w	fp, [sp, #32]
  40ae06:	e6f3      	b.n	40abf0 <_dtoa_r+0x760>
  40ae08:	2301      	movs	r3, #1
  40ae0a:	9309      	str	r3, [sp, #36]	; 0x24
  40ae0c:	e7f1      	b.n	40adf2 <_dtoa_r+0x962>
  40ae0e:	9b00      	ldr	r3, [sp, #0]
  40ae10:	2b00      	cmp	r3, #0
  40ae12:	f47f ada1 	bne.w	40a958 <_dtoa_r+0x4c8>
  40ae16:	e9dd 1200 	ldrd	r1, r2, [sp]
  40ae1a:	f3c2 0313 	ubfx	r3, r2, #0, #20
  40ae1e:	2b00      	cmp	r3, #0
  40ae20:	f47f adb4 	bne.w	40a98c <_dtoa_r+0x4fc>
  40ae24:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
  40ae28:	0d3f      	lsrs	r7, r7, #20
  40ae2a:	053f      	lsls	r7, r7, #20
  40ae2c:	2f00      	cmp	r7, #0
  40ae2e:	f000 8200 	beq.w	40b232 <_dtoa_r+0xda2>
  40ae32:	9b06      	ldr	r3, [sp, #24]
  40ae34:	3301      	adds	r3, #1
  40ae36:	9306      	str	r3, [sp, #24]
  40ae38:	9b05      	ldr	r3, [sp, #20]
  40ae3a:	3301      	adds	r3, #1
  40ae3c:	9305      	str	r3, [sp, #20]
  40ae3e:	f04f 0801 	mov.w	r8, #1
  40ae42:	e5a5      	b.n	40a990 <_dtoa_r+0x500>
  40ae44:	9b08      	ldr	r3, [sp, #32]
  40ae46:	2b00      	cmp	r3, #0
  40ae48:	f73f ac3e 	bgt.w	40a6c8 <_dtoa_r+0x238>
  40ae4c:	f040 8099 	bne.w	40af82 <_dtoa_r+0xaf2>
  40ae50:	4649      	mov	r1, r9
  40ae52:	2200      	movs	r2, #0
  40ae54:	4b36      	ldr	r3, [pc, #216]	; (40af30 <_dtoa_r+0xaa0>)
  40ae56:	4640      	mov	r0, r8
  40ae58:	f7fc fe22 	bl	407aa0 <__aeabi_dmul>
  40ae5c:	e9dd 2300 	ldrd	r2, r3, [sp]
  40ae60:	f7fd f8a4 	bl	407fac <__aeabi_dcmpge>
  40ae64:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40ae68:	464e      	mov	r6, r9
  40ae6a:	2800      	cmp	r0, #0
  40ae6c:	d03e      	beq.n	40aeec <_dtoa_r+0xa5c>
  40ae6e:	ea6f 030b 	mvn.w	r3, fp
  40ae72:	9d07      	ldr	r5, [sp, #28]
  40ae74:	9304      	str	r3, [sp, #16]
  40ae76:	4649      	mov	r1, r9
  40ae78:	4620      	mov	r0, r4
  40ae7a:	f000 fbb3 	bl	40b5e4 <_Bfree>
  40ae7e:	2e00      	cmp	r6, #0
  40ae80:	f43f acd2 	beq.w	40a828 <_dtoa_r+0x398>
  40ae84:	e6a3      	b.n	40abce <_dtoa_r+0x73e>
  40ae86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ae88:	4651      	mov	r1, sl
  40ae8a:	4620      	mov	r0, r4
  40ae8c:	f000 fce0 	bl	40b850 <__pow5mult>
  40ae90:	4682      	mov	sl, r0
  40ae92:	e54f      	b.n	40a934 <_dtoa_r+0x4a4>
  40ae94:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40ae96:	2a00      	cmp	r2, #0
  40ae98:	f000 816f 	beq.w	40b17a <_dtoa_r+0xcea>
  40ae9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40aea0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40aea2:	9d06      	ldr	r5, [sp, #24]
  40aea4:	e4e7      	b.n	40a876 <_dtoa_r+0x3e6>
  40aea6:	9b00      	ldr	r3, [sp, #0]
  40aea8:	2b00      	cmp	r3, #0
  40aeaa:	f47f ad6f 	bne.w	40a98c <_dtoa_r+0x4fc>
  40aeae:	e7b2      	b.n	40ae16 <_dtoa_r+0x986>
  40aeb0:	f000 fba2 	bl	40b5f8 <__multadd>
  40aeb4:	465f      	mov	r7, fp
  40aeb6:	4606      	mov	r6, r0
  40aeb8:	4680      	mov	r8, r0
  40aeba:	e5b6      	b.n	40aa2a <_dtoa_r+0x59a>
  40aebc:	4620      	mov	r0, r4
  40aebe:	f000 fb91 	bl	40b5e4 <_Bfree>
  40aec2:	2201      	movs	r2, #1
  40aec4:	e5db      	b.n	40aa7e <_dtoa_r+0x5ee>
  40aec6:	9b02      	ldr	r3, [sp, #8]
  40aec8:	2b02      	cmp	r3, #2
  40aeca:	f77f ad93 	ble.w	40a9f4 <_dtoa_r+0x564>
  40aece:	9b08      	ldr	r3, [sp, #32]
  40aed0:	2b00      	cmp	r3, #0
  40aed2:	d1cc      	bne.n	40ae6e <_dtoa_r+0x9de>
  40aed4:	4649      	mov	r1, r9
  40aed6:	2205      	movs	r2, #5
  40aed8:	4620      	mov	r0, r4
  40aeda:	f000 fb8d 	bl	40b5f8 <__multadd>
  40aede:	4601      	mov	r1, r0
  40aee0:	4681      	mov	r9, r0
  40aee2:	4650      	mov	r0, sl
  40aee4:	f000 fd56 	bl	40b994 <__mcmp>
  40aee8:	2800      	cmp	r0, #0
  40aeea:	ddc0      	ble.n	40ae6e <_dtoa_r+0x9de>
  40aeec:	9a04      	ldr	r2, [sp, #16]
  40aeee:	9907      	ldr	r1, [sp, #28]
  40aef0:	2331      	movs	r3, #49	; 0x31
  40aef2:	3201      	adds	r2, #1
  40aef4:	9204      	str	r2, [sp, #16]
  40aef6:	700b      	strb	r3, [r1, #0]
  40aef8:	1c4d      	adds	r5, r1, #1
  40aefa:	e7bc      	b.n	40ae76 <_dtoa_r+0x9e6>
  40aefc:	9a04      	ldr	r2, [sp, #16]
  40aefe:	3201      	adds	r2, #1
  40af00:	9204      	str	r2, [sp, #16]
  40af02:	9a07      	ldr	r2, [sp, #28]
  40af04:	2331      	movs	r3, #49	; 0x31
  40af06:	7013      	strb	r3, [r2, #0]
  40af08:	e651      	b.n	40abae <_dtoa_r+0x71e>
  40af0a:	2301      	movs	r3, #1
  40af0c:	9309      	str	r3, [sp, #36]	; 0x24
  40af0e:	e665      	b.n	40abdc <_dtoa_r+0x74c>
  40af10:	f8dd a000 	ldr.w	sl, [sp]
  40af14:	9c02      	ldr	r4, [sp, #8]
  40af16:	e487      	b.n	40a828 <_dtoa_r+0x398>
  40af18:	0040c680 	.word	0x0040c680
  40af1c:	0040c658 	.word	0x0040c658
  40af20:	3ff00000 	.word	0x3ff00000
  40af24:	401c0000 	.word	0x401c0000
  40af28:	3fe00000 	.word	0x3fe00000
  40af2c:	40240000 	.word	0x40240000
  40af30:	40140000 	.word	0x40140000
  40af34:	4648      	mov	r0, r9
  40af36:	f7fc fd4d 	bl	4079d4 <__aeabi_i2d>
  40af3a:	463a      	mov	r2, r7
  40af3c:	4643      	mov	r3, r8
  40af3e:	f7fc fdaf 	bl	407aa0 <__aeabi_dmul>
  40af42:	2200      	movs	r2, #0
  40af44:	4bc4      	ldr	r3, [pc, #784]	; (40b258 <_dtoa_r+0xdc8>)
  40af46:	f7fc fbf9 	bl	40773c <__adddf3>
  40af4a:	4605      	mov	r5, r0
  40af4c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40af50:	4641      	mov	r1, r8
  40af52:	2200      	movs	r2, #0
  40af54:	4bc1      	ldr	r3, [pc, #772]	; (40b25c <_dtoa_r+0xdcc>)
  40af56:	4638      	mov	r0, r7
  40af58:	f7fc fbee 	bl	407738 <__aeabi_dsub>
  40af5c:	462a      	mov	r2, r5
  40af5e:	4633      	mov	r3, r6
  40af60:	4680      	mov	r8, r0
  40af62:	4689      	mov	r9, r1
  40af64:	f7fd f82c 	bl	407fc0 <__aeabi_dcmpgt>
  40af68:	2800      	cmp	r0, #0
  40af6a:	f040 80ab 	bne.w	40b0c4 <_dtoa_r+0xc34>
  40af6e:	462a      	mov	r2, r5
  40af70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40af74:	4640      	mov	r0, r8
  40af76:	4649      	mov	r1, r9
  40af78:	f7fd f804 	bl	407f84 <__aeabi_dcmplt>
  40af7c:	2800      	cmp	r0, #0
  40af7e:	f43f ab92 	beq.w	40a6a6 <_dtoa_r+0x216>
  40af82:	f04f 0900 	mov.w	r9, #0
  40af86:	464e      	mov	r6, r9
  40af88:	e771      	b.n	40ae6e <_dtoa_r+0x9de>
  40af8a:	9807      	ldr	r0, [sp, #28]
  40af8c:	f7ff bab8 	b.w	40a500 <_dtoa_r+0x70>
  40af90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40af92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40af94:	970a      	str	r7, [sp, #40]	; 0x28
  40af96:	1afb      	subs	r3, r7, r3
  40af98:	441a      	add	r2, r3
  40af9a:	920b      	str	r2, [sp, #44]	; 0x2c
  40af9c:	2700      	movs	r7, #0
  40af9e:	e464      	b.n	40a86a <_dtoa_r+0x3da>
  40afa0:	ed9d 7b00 	vldr	d7, [sp]
  40afa4:	f04f 0902 	mov.w	r9, #2
  40afa8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  40afac:	e658      	b.n	40ac60 <_dtoa_r+0x7d0>
  40afae:	2100      	movs	r1, #0
  40afb0:	6461      	str	r1, [r4, #68]	; 0x44
  40afb2:	4620      	mov	r0, r4
  40afb4:	f000 faf0 	bl	40b598 <_Balloc>
  40afb8:	f04f 0b01 	mov.w	fp, #1
  40afbc:	9007      	str	r0, [sp, #28]
  40afbe:	6420      	str	r0, [r4, #64]	; 0x40
  40afc0:	f8cd b020 	str.w	fp, [sp, #32]
  40afc4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  40afc8:	e629      	b.n	40ac1e <_dtoa_r+0x78e>
  40afca:	2a00      	cmp	r2, #0
  40afcc:	dd12      	ble.n	40aff4 <_dtoa_r+0xb64>
  40afce:	4651      	mov	r1, sl
  40afd0:	2201      	movs	r2, #1
  40afd2:	4620      	mov	r0, r4
  40afd4:	f000 fc8c 	bl	40b8f0 <__lshift>
  40afd8:	4649      	mov	r1, r9
  40afda:	4682      	mov	sl, r0
  40afdc:	f000 fcda 	bl	40b994 <__mcmp>
  40afe0:	2800      	cmp	r0, #0
  40afe2:	f340 8131 	ble.w	40b248 <_dtoa_r+0xdb8>
  40afe6:	9b00      	ldr	r3, [sp, #0]
  40afe8:	2b39      	cmp	r3, #57	; 0x39
  40afea:	f000 80f7 	beq.w	40b1dc <_dtoa_r+0xd4c>
  40afee:	f105 0331 	add.w	r3, r5, #49	; 0x31
  40aff2:	9300      	str	r3, [sp, #0]
  40aff4:	f89d 3000 	ldrb.w	r3, [sp]
  40aff8:	703b      	strb	r3, [r7, #0]
  40affa:	46b3      	mov	fp, r6
  40affc:	1c7d      	adds	r5, r7, #1
  40affe:	4646      	mov	r6, r8
  40b000:	e5d5      	b.n	40abae <_dtoa_r+0x71e>
  40b002:	d104      	bne.n	40b00e <_dtoa_r+0xb7e>
  40b004:	9b00      	ldr	r3, [sp, #0]
  40b006:	07db      	lsls	r3, r3, #31
  40b008:	d501      	bpl.n	40b00e <_dtoa_r+0xb7e>
  40b00a:	e5c0      	b.n	40ab8e <_dtoa_r+0x6fe>
  40b00c:	4615      	mov	r5, r2
  40b00e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b012:	2b30      	cmp	r3, #48	; 0x30
  40b014:	f105 32ff 	add.w	r2, r5, #4294967295
  40b018:	d0f8      	beq.n	40b00c <_dtoa_r+0xb7c>
  40b01a:	e5c8      	b.n	40abae <_dtoa_r+0x71e>
  40b01c:	f000 80b4 	beq.w	40b188 <_dtoa_r+0xcf8>
  40b020:	9b04      	ldr	r3, [sp, #16]
  40b022:	425d      	negs	r5, r3
  40b024:	4b8e      	ldr	r3, [pc, #568]	; (40b260 <_dtoa_r+0xdd0>)
  40b026:	f005 020f 	and.w	r2, r5, #15
  40b02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b032:	e9dd 0100 	ldrd	r0, r1, [sp]
  40b036:	f7fc fd33 	bl	407aa0 <__aeabi_dmul>
  40b03a:	112d      	asrs	r5, r5, #4
  40b03c:	4607      	mov	r7, r0
  40b03e:	4688      	mov	r8, r1
  40b040:	f000 8128 	beq.w	40b294 <_dtoa_r+0xe04>
  40b044:	4e87      	ldr	r6, [pc, #540]	; (40b264 <_dtoa_r+0xdd4>)
  40b046:	f04f 0902 	mov.w	r9, #2
  40b04a:	07e9      	lsls	r1, r5, #31
  40b04c:	d509      	bpl.n	40b062 <_dtoa_r+0xbd2>
  40b04e:	4638      	mov	r0, r7
  40b050:	4641      	mov	r1, r8
  40b052:	e9d6 2300 	ldrd	r2, r3, [r6]
  40b056:	f7fc fd23 	bl	407aa0 <__aeabi_dmul>
  40b05a:	f109 0901 	add.w	r9, r9, #1
  40b05e:	4607      	mov	r7, r0
  40b060:	4688      	mov	r8, r1
  40b062:	106d      	asrs	r5, r5, #1
  40b064:	f106 0608 	add.w	r6, r6, #8
  40b068:	d1ef      	bne.n	40b04a <_dtoa_r+0xbba>
  40b06a:	e614      	b.n	40ac96 <_dtoa_r+0x806>
  40b06c:	9907      	ldr	r1, [sp, #28]
  40b06e:	2230      	movs	r2, #48	; 0x30
  40b070:	700a      	strb	r2, [r1, #0]
  40b072:	9a04      	ldr	r2, [sp, #16]
  40b074:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40b078:	3201      	adds	r2, #1
  40b07a:	9204      	str	r2, [sp, #16]
  40b07c:	f7ff bbd0 	b.w	40a820 <_dtoa_r+0x390>
  40b080:	6871      	ldr	r1, [r6, #4]
  40b082:	4620      	mov	r0, r4
  40b084:	f000 fa88 	bl	40b598 <_Balloc>
  40b088:	6933      	ldr	r3, [r6, #16]
  40b08a:	3302      	adds	r3, #2
  40b08c:	009a      	lsls	r2, r3, #2
  40b08e:	4605      	mov	r5, r0
  40b090:	f106 010c 	add.w	r1, r6, #12
  40b094:	300c      	adds	r0, #12
  40b096:	f7fd fae3 	bl	408660 <memcpy>
  40b09a:	4629      	mov	r1, r5
  40b09c:	2201      	movs	r2, #1
  40b09e:	4620      	mov	r0, r4
  40b0a0:	f000 fc26 	bl	40b8f0 <__lshift>
  40b0a4:	4680      	mov	r8, r0
  40b0a6:	e4b6      	b.n	40aa16 <_dtoa_r+0x586>
  40b0a8:	9b00      	ldr	r3, [sp, #0]
  40b0aa:	2b39      	cmp	r3, #57	; 0x39
  40b0ac:	f000 8096 	beq.w	40b1dc <_dtoa_r+0xd4c>
  40b0b0:	9b00      	ldr	r3, [sp, #0]
  40b0b2:	3301      	adds	r3, #1
  40b0b4:	46b3      	mov	fp, r6
  40b0b6:	703b      	strb	r3, [r7, #0]
  40b0b8:	1c7d      	adds	r5, r7, #1
  40b0ba:	4646      	mov	r6, r8
  40b0bc:	e577      	b.n	40abae <_dtoa_r+0x71e>
  40b0be:	46b3      	mov	fp, r6
  40b0c0:	4646      	mov	r6, r8
  40b0c2:	e558      	b.n	40ab76 <_dtoa_r+0x6e6>
  40b0c4:	f04f 0900 	mov.w	r9, #0
  40b0c8:	464e      	mov	r6, r9
  40b0ca:	e70f      	b.n	40aeec <_dtoa_r+0xa5c>
  40b0cc:	4964      	ldr	r1, [pc, #400]	; (40b260 <_dtoa_r+0xdd0>)
  40b0ce:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
  40b0d2:	462a      	mov	r2, r5
  40b0d4:	4633      	mov	r3, r6
  40b0d6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40b0da:	f7fc fce1 	bl	407aa0 <__aeabi_dmul>
  40b0de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  40b0e2:	4638      	mov	r0, r7
  40b0e4:	4641      	mov	r1, r8
  40b0e6:	f000 fe87 	bl	40bdf8 <__aeabi_d2iz>
  40b0ea:	4605      	mov	r5, r0
  40b0ec:	f7fc fc72 	bl	4079d4 <__aeabi_i2d>
  40b0f0:	4602      	mov	r2, r0
  40b0f2:	460b      	mov	r3, r1
  40b0f4:	4638      	mov	r0, r7
  40b0f6:	4641      	mov	r1, r8
  40b0f8:	f7fc fb1e 	bl	407738 <__aeabi_dsub>
  40b0fc:	9a07      	ldr	r2, [sp, #28]
  40b0fe:	3530      	adds	r5, #48	; 0x30
  40b100:	f1b9 0f01 	cmp.w	r9, #1
  40b104:	7015      	strb	r5, [r2, #0]
  40b106:	4606      	mov	r6, r0
  40b108:	460f      	mov	r7, r1
  40b10a:	f102 0501 	add.w	r5, r2, #1
  40b10e:	d01c      	beq.n	40b14a <_dtoa_r+0xcba>
  40b110:	9b07      	ldr	r3, [sp, #28]
  40b112:	4499      	add	r9, r3
  40b114:	2200      	movs	r2, #0
  40b116:	4b54      	ldr	r3, [pc, #336]	; (40b268 <_dtoa_r+0xdd8>)
  40b118:	4630      	mov	r0, r6
  40b11a:	4639      	mov	r1, r7
  40b11c:	f7fc fcc0 	bl	407aa0 <__aeabi_dmul>
  40b120:	460f      	mov	r7, r1
  40b122:	4606      	mov	r6, r0
  40b124:	f000 fe68 	bl	40bdf8 <__aeabi_d2iz>
  40b128:	4680      	mov	r8, r0
  40b12a:	f7fc fc53 	bl	4079d4 <__aeabi_i2d>
  40b12e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40b132:	4602      	mov	r2, r0
  40b134:	460b      	mov	r3, r1
  40b136:	4630      	mov	r0, r6
  40b138:	4639      	mov	r1, r7
  40b13a:	f7fc fafd 	bl	407738 <__aeabi_dsub>
  40b13e:	f805 8b01 	strb.w	r8, [r5], #1
  40b142:	454d      	cmp	r5, r9
  40b144:	4606      	mov	r6, r0
  40b146:	460f      	mov	r7, r1
  40b148:	d1e4      	bne.n	40b114 <_dtoa_r+0xc84>
  40b14a:	2200      	movs	r2, #0
  40b14c:	4b47      	ldr	r3, [pc, #284]	; (40b26c <_dtoa_r+0xddc>)
  40b14e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  40b152:	f7fc faf3 	bl	40773c <__adddf3>
  40b156:	4632      	mov	r2, r6
  40b158:	463b      	mov	r3, r7
  40b15a:	f7fc ff13 	bl	407f84 <__aeabi_dcmplt>
  40b15e:	2800      	cmp	r0, #0
  40b160:	d042      	beq.n	40b1e8 <_dtoa_r+0xd58>
  40b162:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b164:	9304      	str	r3, [sp, #16]
  40b166:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40b16a:	f7ff bb4c 	b.w	40a806 <_dtoa_r+0x376>
  40b16e:	9b06      	ldr	r3, [sp, #24]
  40b170:	9a08      	ldr	r2, [sp, #32]
  40b172:	1a9d      	subs	r5, r3, r2
  40b174:	2300      	movs	r3, #0
  40b176:	f7ff bb7e 	b.w	40a876 <_dtoa_r+0x3e6>
  40b17a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b17c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b17e:	9d06      	ldr	r5, [sp, #24]
  40b180:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40b184:	f7ff bb77 	b.w	40a876 <_dtoa_r+0x3e6>
  40b188:	e9dd 7800 	ldrd	r7, r8, [sp]
  40b18c:	f04f 0902 	mov.w	r9, #2
  40b190:	e581      	b.n	40ac96 <_dtoa_r+0x806>
  40b192:	9b08      	ldr	r3, [sp, #32]
  40b194:	2b00      	cmp	r3, #0
  40b196:	f43f aecd 	beq.w	40af34 <_dtoa_r+0xaa4>
  40b19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b19c:	2b00      	cmp	r3, #0
  40b19e:	f77f aa82 	ble.w	40a6a6 <_dtoa_r+0x216>
  40b1a2:	2200      	movs	r2, #0
  40b1a4:	4b30      	ldr	r3, [pc, #192]	; (40b268 <_dtoa_r+0xdd8>)
  40b1a6:	4638      	mov	r0, r7
  40b1a8:	4641      	mov	r1, r8
  40b1aa:	f7fc fc79 	bl	407aa0 <__aeabi_dmul>
  40b1ae:	4607      	mov	r7, r0
  40b1b0:	4688      	mov	r8, r1
  40b1b2:	f109 0001 	add.w	r0, r9, #1
  40b1b6:	f7fc fc0d 	bl	4079d4 <__aeabi_i2d>
  40b1ba:	463a      	mov	r2, r7
  40b1bc:	4643      	mov	r3, r8
  40b1be:	f7fc fc6f 	bl	407aa0 <__aeabi_dmul>
  40b1c2:	2200      	movs	r2, #0
  40b1c4:	4b24      	ldr	r3, [pc, #144]	; (40b258 <_dtoa_r+0xdc8>)
  40b1c6:	f7fc fab9 	bl	40773c <__adddf3>
  40b1ca:	9a04      	ldr	r2, [sp, #16]
  40b1cc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  40b1d0:	3a01      	subs	r2, #1
  40b1d2:	4605      	mov	r5, r0
  40b1d4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40b1d8:	9211      	str	r2, [sp, #68]	; 0x44
  40b1da:	e57d      	b.n	40acd8 <_dtoa_r+0x848>
  40b1dc:	2239      	movs	r2, #57	; 0x39
  40b1de:	46b3      	mov	fp, r6
  40b1e0:	703a      	strb	r2, [r7, #0]
  40b1e2:	4646      	mov	r6, r8
  40b1e4:	1c7d      	adds	r5, r7, #1
  40b1e6:	e4d4      	b.n	40ab92 <_dtoa_r+0x702>
  40b1e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  40b1ec:	2000      	movs	r0, #0
  40b1ee:	491f      	ldr	r1, [pc, #124]	; (40b26c <_dtoa_r+0xddc>)
  40b1f0:	f7fc faa2 	bl	407738 <__aeabi_dsub>
  40b1f4:	4632      	mov	r2, r6
  40b1f6:	463b      	mov	r3, r7
  40b1f8:	f7fc fee2 	bl	407fc0 <__aeabi_dcmpgt>
  40b1fc:	b910      	cbnz	r0, 40b204 <_dtoa_r+0xd74>
  40b1fe:	f7ff ba52 	b.w	40a6a6 <_dtoa_r+0x216>
  40b202:	4615      	mov	r5, r2
  40b204:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b208:	2b30      	cmp	r3, #48	; 0x30
  40b20a:	f105 32ff 	add.w	r2, r5, #4294967295
  40b20e:	d0f8      	beq.n	40b202 <_dtoa_r+0xd72>
  40b210:	e5ea      	b.n	40ade8 <_dtoa_r+0x958>
  40b212:	4643      	mov	r3, r8
  40b214:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
  40b218:	46a0      	mov	r8, r4
  40b21a:	461c      	mov	r4, r3
  40b21c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b21e:	9304      	str	r3, [sp, #16]
  40b220:	f7ff baf1 	b.w	40a806 <_dtoa_r+0x376>
  40b224:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
  40b228:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
  40b22c:	4644      	mov	r4, r8
  40b22e:	f7ff ba3a 	b.w	40a6a6 <_dtoa_r+0x216>
  40b232:	46b8      	mov	r8, r7
  40b234:	f7ff bbac 	b.w	40a990 <_dtoa_r+0x500>
  40b238:	9b00      	ldr	r3, [sp, #0]
  40b23a:	2b39      	cmp	r3, #57	; 0x39
  40b23c:	d0ce      	beq.n	40b1dc <_dtoa_r+0xd4c>
  40b23e:	f1bb 0f00 	cmp.w	fp, #0
  40b242:	f73f aed4 	bgt.w	40afee <_dtoa_r+0xb5e>
  40b246:	e6d5      	b.n	40aff4 <_dtoa_r+0xb64>
  40b248:	f47f aed4 	bne.w	40aff4 <_dtoa_r+0xb64>
  40b24c:	9b00      	ldr	r3, [sp, #0]
  40b24e:	07da      	lsls	r2, r3, #31
  40b250:	f57f aed0 	bpl.w	40aff4 <_dtoa_r+0xb64>
  40b254:	e6c7      	b.n	40afe6 <_dtoa_r+0xb56>
  40b256:	bf00      	nop
  40b258:	401c0000 	.word	0x401c0000
  40b25c:	40140000 	.word	0x40140000
  40b260:	0040c680 	.word	0x0040c680
  40b264:	0040c658 	.word	0x0040c658
  40b268:	40240000 	.word	0x40240000
  40b26c:	3fe00000 	.word	0x3fe00000
  40b270:	4631      	mov	r1, r6
  40b272:	2300      	movs	r3, #0
  40b274:	220a      	movs	r2, #10
  40b276:	4620      	mov	r0, r4
  40b278:	f000 f9be 	bl	40b5f8 <__multadd>
  40b27c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b27e:	2b00      	cmp	r3, #0
  40b280:	4606      	mov	r6, r0
  40b282:	dd0a      	ble.n	40b29a <_dtoa_r+0xe0a>
  40b284:	9308      	str	r3, [sp, #32]
  40b286:	f7ff bbb9 	b.w	40a9fc <_dtoa_r+0x56c>
  40b28a:	9b02      	ldr	r3, [sp, #8]
  40b28c:	2b02      	cmp	r3, #2
  40b28e:	dc22      	bgt.n	40b2d6 <_dtoa_r+0xe46>
  40b290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b292:	e44a      	b.n	40ab2a <_dtoa_r+0x69a>
  40b294:	f04f 0902 	mov.w	r9, #2
  40b298:	e4fd      	b.n	40ac96 <_dtoa_r+0x806>
  40b29a:	9b02      	ldr	r3, [sp, #8]
  40b29c:	2b02      	cmp	r3, #2
  40b29e:	dc1a      	bgt.n	40b2d6 <_dtoa_r+0xe46>
  40b2a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b2a2:	e7ef      	b.n	40b284 <_dtoa_r+0xdf4>
  40b2a4:	2500      	movs	r5, #0
  40b2a6:	6465      	str	r5, [r4, #68]	; 0x44
  40b2a8:	4629      	mov	r1, r5
  40b2aa:	4620      	mov	r0, r4
  40b2ac:	f000 f974 	bl	40b598 <_Balloc>
  40b2b0:	f04f 33ff 	mov.w	r3, #4294967295
  40b2b4:	9308      	str	r3, [sp, #32]
  40b2b6:	930d      	str	r3, [sp, #52]	; 0x34
  40b2b8:	2301      	movs	r3, #1
  40b2ba:	9007      	str	r0, [sp, #28]
  40b2bc:	46ab      	mov	fp, r5
  40b2be:	6420      	str	r0, [r4, #64]	; 0x40
  40b2c0:	9309      	str	r3, [sp, #36]	; 0x24
  40b2c2:	f7ff b9f0 	b.w	40a6a6 <_dtoa_r+0x216>
  40b2c6:	f43f ab7b 	beq.w	40a9c0 <_dtoa_r+0x530>
  40b2ca:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40b2ce:	e40b      	b.n	40aae8 <_dtoa_r+0x658>
  40b2d0:	2701      	movs	r7, #1
  40b2d2:	f7ff b9af 	b.w	40a634 <_dtoa_r+0x1a4>
  40b2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b2d8:	9308      	str	r3, [sp, #32]
  40b2da:	e5f8      	b.n	40aece <_dtoa_r+0xa3e>

0040b2dc <__libc_fini_array>:
  40b2dc:	b538      	push	{r3, r4, r5, lr}
  40b2de:	4c0a      	ldr	r4, [pc, #40]	; (40b308 <__libc_fini_array+0x2c>)
  40b2e0:	4d0a      	ldr	r5, [pc, #40]	; (40b30c <__libc_fini_array+0x30>)
  40b2e2:	1b64      	subs	r4, r4, r5
  40b2e4:	10a4      	asrs	r4, r4, #2
  40b2e6:	d00a      	beq.n	40b2fe <__libc_fini_array+0x22>
  40b2e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40b2ec:	3b01      	subs	r3, #1
  40b2ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40b2f2:	3c01      	subs	r4, #1
  40b2f4:	f855 3904 	ldr.w	r3, [r5], #-4
  40b2f8:	4798      	blx	r3
  40b2fa:	2c00      	cmp	r4, #0
  40b2fc:	d1f9      	bne.n	40b2f2 <__libc_fini_array+0x16>
  40b2fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40b302:	f001 babb 	b.w	40c87c <_fini>
  40b306:	bf00      	nop
  40b308:	0040c88c 	.word	0x0040c88c
  40b30c:	0040c888 	.word	0x0040c888

0040b310 <_malloc_trim_r>:
  40b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b312:	4f24      	ldr	r7, [pc, #144]	; (40b3a4 <_malloc_trim_r+0x94>)
  40b314:	460c      	mov	r4, r1
  40b316:	4606      	mov	r6, r0
  40b318:	f7fd faee 	bl	4088f8 <__malloc_lock>
  40b31c:	68bb      	ldr	r3, [r7, #8]
  40b31e:	685d      	ldr	r5, [r3, #4]
  40b320:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40b324:	310f      	adds	r1, #15
  40b326:	f025 0503 	bic.w	r5, r5, #3
  40b32a:	4429      	add	r1, r5
  40b32c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40b330:	f021 010f 	bic.w	r1, r1, #15
  40b334:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40b338:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40b33c:	db07      	blt.n	40b34e <_malloc_trim_r+0x3e>
  40b33e:	2100      	movs	r1, #0
  40b340:	4630      	mov	r0, r6
  40b342:	f7fd fc8b 	bl	408c5c <_sbrk_r>
  40b346:	68bb      	ldr	r3, [r7, #8]
  40b348:	442b      	add	r3, r5
  40b34a:	4298      	cmp	r0, r3
  40b34c:	d004      	beq.n	40b358 <_malloc_trim_r+0x48>
  40b34e:	4630      	mov	r0, r6
  40b350:	f7fd fad8 	bl	408904 <__malloc_unlock>
  40b354:	2000      	movs	r0, #0
  40b356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b358:	4261      	negs	r1, r4
  40b35a:	4630      	mov	r0, r6
  40b35c:	f7fd fc7e 	bl	408c5c <_sbrk_r>
  40b360:	3001      	adds	r0, #1
  40b362:	d00d      	beq.n	40b380 <_malloc_trim_r+0x70>
  40b364:	4b10      	ldr	r3, [pc, #64]	; (40b3a8 <_malloc_trim_r+0x98>)
  40b366:	68ba      	ldr	r2, [r7, #8]
  40b368:	6819      	ldr	r1, [r3, #0]
  40b36a:	1b2d      	subs	r5, r5, r4
  40b36c:	f045 0501 	orr.w	r5, r5, #1
  40b370:	4630      	mov	r0, r6
  40b372:	1b09      	subs	r1, r1, r4
  40b374:	6055      	str	r5, [r2, #4]
  40b376:	6019      	str	r1, [r3, #0]
  40b378:	f7fd fac4 	bl	408904 <__malloc_unlock>
  40b37c:	2001      	movs	r0, #1
  40b37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b380:	2100      	movs	r1, #0
  40b382:	4630      	mov	r0, r6
  40b384:	f7fd fc6a 	bl	408c5c <_sbrk_r>
  40b388:	68ba      	ldr	r2, [r7, #8]
  40b38a:	1a83      	subs	r3, r0, r2
  40b38c:	2b0f      	cmp	r3, #15
  40b38e:	ddde      	ble.n	40b34e <_malloc_trim_r+0x3e>
  40b390:	4c06      	ldr	r4, [pc, #24]	; (40b3ac <_malloc_trim_r+0x9c>)
  40b392:	4905      	ldr	r1, [pc, #20]	; (40b3a8 <_malloc_trim_r+0x98>)
  40b394:	6824      	ldr	r4, [r4, #0]
  40b396:	f043 0301 	orr.w	r3, r3, #1
  40b39a:	1b00      	subs	r0, r0, r4
  40b39c:	6053      	str	r3, [r2, #4]
  40b39e:	6008      	str	r0, [r1, #0]
  40b3a0:	e7d5      	b.n	40b34e <_malloc_trim_r+0x3e>
  40b3a2:	bf00      	nop
  40b3a4:	20002918 	.word	0x20002918
  40b3a8:	20004450 	.word	0x20004450
  40b3ac:	20002d20 	.word	0x20002d20

0040b3b0 <_free_r>:
  40b3b0:	2900      	cmp	r1, #0
  40b3b2:	d044      	beq.n	40b43e <_free_r+0x8e>
  40b3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b3b8:	460d      	mov	r5, r1
  40b3ba:	4680      	mov	r8, r0
  40b3bc:	f7fd fa9c 	bl	4088f8 <__malloc_lock>
  40b3c0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40b3c4:	4969      	ldr	r1, [pc, #420]	; (40b56c <_free_r+0x1bc>)
  40b3c6:	f027 0301 	bic.w	r3, r7, #1
  40b3ca:	f1a5 0408 	sub.w	r4, r5, #8
  40b3ce:	18e2      	adds	r2, r4, r3
  40b3d0:	688e      	ldr	r6, [r1, #8]
  40b3d2:	6850      	ldr	r0, [r2, #4]
  40b3d4:	42b2      	cmp	r2, r6
  40b3d6:	f020 0003 	bic.w	r0, r0, #3
  40b3da:	d05e      	beq.n	40b49a <_free_r+0xea>
  40b3dc:	07fe      	lsls	r6, r7, #31
  40b3de:	6050      	str	r0, [r2, #4]
  40b3e0:	d40b      	bmi.n	40b3fa <_free_r+0x4a>
  40b3e2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40b3e6:	1be4      	subs	r4, r4, r7
  40b3e8:	f101 0e08 	add.w	lr, r1, #8
  40b3ec:	68a5      	ldr	r5, [r4, #8]
  40b3ee:	4575      	cmp	r5, lr
  40b3f0:	443b      	add	r3, r7
  40b3f2:	d06d      	beq.n	40b4d0 <_free_r+0x120>
  40b3f4:	68e7      	ldr	r7, [r4, #12]
  40b3f6:	60ef      	str	r7, [r5, #12]
  40b3f8:	60bd      	str	r5, [r7, #8]
  40b3fa:	1815      	adds	r5, r2, r0
  40b3fc:	686d      	ldr	r5, [r5, #4]
  40b3fe:	07ed      	lsls	r5, r5, #31
  40b400:	d53e      	bpl.n	40b480 <_free_r+0xd0>
  40b402:	f043 0201 	orr.w	r2, r3, #1
  40b406:	6062      	str	r2, [r4, #4]
  40b408:	50e3      	str	r3, [r4, r3]
  40b40a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b40e:	d217      	bcs.n	40b440 <_free_r+0x90>
  40b410:	08db      	lsrs	r3, r3, #3
  40b412:	1c58      	adds	r0, r3, #1
  40b414:	109a      	asrs	r2, r3, #2
  40b416:	684d      	ldr	r5, [r1, #4]
  40b418:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40b41c:	60a7      	str	r7, [r4, #8]
  40b41e:	2301      	movs	r3, #1
  40b420:	4093      	lsls	r3, r2
  40b422:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40b426:	432b      	orrs	r3, r5
  40b428:	3a08      	subs	r2, #8
  40b42a:	60e2      	str	r2, [r4, #12]
  40b42c:	604b      	str	r3, [r1, #4]
  40b42e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40b432:	60fc      	str	r4, [r7, #12]
  40b434:	4640      	mov	r0, r8
  40b436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b43a:	f7fd ba63 	b.w	408904 <__malloc_unlock>
  40b43e:	4770      	bx	lr
  40b440:	0a5a      	lsrs	r2, r3, #9
  40b442:	2a04      	cmp	r2, #4
  40b444:	d852      	bhi.n	40b4ec <_free_r+0x13c>
  40b446:	099a      	lsrs	r2, r3, #6
  40b448:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40b44c:	00ff      	lsls	r7, r7, #3
  40b44e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40b452:	19c8      	adds	r0, r1, r7
  40b454:	59ca      	ldr	r2, [r1, r7]
  40b456:	3808      	subs	r0, #8
  40b458:	4290      	cmp	r0, r2
  40b45a:	d04f      	beq.n	40b4fc <_free_r+0x14c>
  40b45c:	6851      	ldr	r1, [r2, #4]
  40b45e:	f021 0103 	bic.w	r1, r1, #3
  40b462:	428b      	cmp	r3, r1
  40b464:	d232      	bcs.n	40b4cc <_free_r+0x11c>
  40b466:	6892      	ldr	r2, [r2, #8]
  40b468:	4290      	cmp	r0, r2
  40b46a:	d1f7      	bne.n	40b45c <_free_r+0xac>
  40b46c:	68c3      	ldr	r3, [r0, #12]
  40b46e:	60a0      	str	r0, [r4, #8]
  40b470:	60e3      	str	r3, [r4, #12]
  40b472:	609c      	str	r4, [r3, #8]
  40b474:	60c4      	str	r4, [r0, #12]
  40b476:	4640      	mov	r0, r8
  40b478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b47c:	f7fd ba42 	b.w	408904 <__malloc_unlock>
  40b480:	6895      	ldr	r5, [r2, #8]
  40b482:	4f3b      	ldr	r7, [pc, #236]	; (40b570 <_free_r+0x1c0>)
  40b484:	42bd      	cmp	r5, r7
  40b486:	4403      	add	r3, r0
  40b488:	d040      	beq.n	40b50c <_free_r+0x15c>
  40b48a:	68d0      	ldr	r0, [r2, #12]
  40b48c:	60e8      	str	r0, [r5, #12]
  40b48e:	f043 0201 	orr.w	r2, r3, #1
  40b492:	6085      	str	r5, [r0, #8]
  40b494:	6062      	str	r2, [r4, #4]
  40b496:	50e3      	str	r3, [r4, r3]
  40b498:	e7b7      	b.n	40b40a <_free_r+0x5a>
  40b49a:	07ff      	lsls	r7, r7, #31
  40b49c:	4403      	add	r3, r0
  40b49e:	d407      	bmi.n	40b4b0 <_free_r+0x100>
  40b4a0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40b4a4:	1aa4      	subs	r4, r4, r2
  40b4a6:	4413      	add	r3, r2
  40b4a8:	68a0      	ldr	r0, [r4, #8]
  40b4aa:	68e2      	ldr	r2, [r4, #12]
  40b4ac:	60c2      	str	r2, [r0, #12]
  40b4ae:	6090      	str	r0, [r2, #8]
  40b4b0:	4a30      	ldr	r2, [pc, #192]	; (40b574 <_free_r+0x1c4>)
  40b4b2:	6812      	ldr	r2, [r2, #0]
  40b4b4:	f043 0001 	orr.w	r0, r3, #1
  40b4b8:	4293      	cmp	r3, r2
  40b4ba:	6060      	str	r0, [r4, #4]
  40b4bc:	608c      	str	r4, [r1, #8]
  40b4be:	d3b9      	bcc.n	40b434 <_free_r+0x84>
  40b4c0:	4b2d      	ldr	r3, [pc, #180]	; (40b578 <_free_r+0x1c8>)
  40b4c2:	4640      	mov	r0, r8
  40b4c4:	6819      	ldr	r1, [r3, #0]
  40b4c6:	f7ff ff23 	bl	40b310 <_malloc_trim_r>
  40b4ca:	e7b3      	b.n	40b434 <_free_r+0x84>
  40b4cc:	4610      	mov	r0, r2
  40b4ce:	e7cd      	b.n	40b46c <_free_r+0xbc>
  40b4d0:	1811      	adds	r1, r2, r0
  40b4d2:	6849      	ldr	r1, [r1, #4]
  40b4d4:	07c9      	lsls	r1, r1, #31
  40b4d6:	d444      	bmi.n	40b562 <_free_r+0x1b2>
  40b4d8:	6891      	ldr	r1, [r2, #8]
  40b4da:	68d2      	ldr	r2, [r2, #12]
  40b4dc:	60ca      	str	r2, [r1, #12]
  40b4de:	4403      	add	r3, r0
  40b4e0:	f043 0001 	orr.w	r0, r3, #1
  40b4e4:	6091      	str	r1, [r2, #8]
  40b4e6:	6060      	str	r0, [r4, #4]
  40b4e8:	50e3      	str	r3, [r4, r3]
  40b4ea:	e7a3      	b.n	40b434 <_free_r+0x84>
  40b4ec:	2a14      	cmp	r2, #20
  40b4ee:	d816      	bhi.n	40b51e <_free_r+0x16e>
  40b4f0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40b4f4:	00ff      	lsls	r7, r7, #3
  40b4f6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40b4fa:	e7aa      	b.n	40b452 <_free_r+0xa2>
  40b4fc:	10aa      	asrs	r2, r5, #2
  40b4fe:	2301      	movs	r3, #1
  40b500:	684d      	ldr	r5, [r1, #4]
  40b502:	4093      	lsls	r3, r2
  40b504:	432b      	orrs	r3, r5
  40b506:	604b      	str	r3, [r1, #4]
  40b508:	4603      	mov	r3, r0
  40b50a:	e7b0      	b.n	40b46e <_free_r+0xbe>
  40b50c:	f043 0201 	orr.w	r2, r3, #1
  40b510:	614c      	str	r4, [r1, #20]
  40b512:	610c      	str	r4, [r1, #16]
  40b514:	60e5      	str	r5, [r4, #12]
  40b516:	60a5      	str	r5, [r4, #8]
  40b518:	6062      	str	r2, [r4, #4]
  40b51a:	50e3      	str	r3, [r4, r3]
  40b51c:	e78a      	b.n	40b434 <_free_r+0x84>
  40b51e:	2a54      	cmp	r2, #84	; 0x54
  40b520:	d806      	bhi.n	40b530 <_free_r+0x180>
  40b522:	0b1a      	lsrs	r2, r3, #12
  40b524:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40b528:	00ff      	lsls	r7, r7, #3
  40b52a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40b52e:	e790      	b.n	40b452 <_free_r+0xa2>
  40b530:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40b534:	d806      	bhi.n	40b544 <_free_r+0x194>
  40b536:	0bda      	lsrs	r2, r3, #15
  40b538:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40b53c:	00ff      	lsls	r7, r7, #3
  40b53e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40b542:	e786      	b.n	40b452 <_free_r+0xa2>
  40b544:	f240 5054 	movw	r0, #1364	; 0x554
  40b548:	4282      	cmp	r2, r0
  40b54a:	d806      	bhi.n	40b55a <_free_r+0x1aa>
  40b54c:	0c9a      	lsrs	r2, r3, #18
  40b54e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40b552:	00ff      	lsls	r7, r7, #3
  40b554:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40b558:	e77b      	b.n	40b452 <_free_r+0xa2>
  40b55a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40b55e:	257e      	movs	r5, #126	; 0x7e
  40b560:	e777      	b.n	40b452 <_free_r+0xa2>
  40b562:	f043 0101 	orr.w	r1, r3, #1
  40b566:	6061      	str	r1, [r4, #4]
  40b568:	6013      	str	r3, [r2, #0]
  40b56a:	e763      	b.n	40b434 <_free_r+0x84>
  40b56c:	20002918 	.word	0x20002918
  40b570:	20002920 	.word	0x20002920
  40b574:	20002d24 	.word	0x20002d24
  40b578:	20004480 	.word	0x20004480

0040b57c <_localeconv_r>:
  40b57c:	4a04      	ldr	r2, [pc, #16]	; (40b590 <_localeconv_r+0x14>)
  40b57e:	4b05      	ldr	r3, [pc, #20]	; (40b594 <_localeconv_r+0x18>)
  40b580:	6812      	ldr	r2, [r2, #0]
  40b582:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40b584:	2800      	cmp	r0, #0
  40b586:	bf08      	it	eq
  40b588:	4618      	moveq	r0, r3
  40b58a:	30f0      	adds	r0, #240	; 0xf0
  40b58c:	4770      	bx	lr
  40b58e:	bf00      	nop
  40b590:	200024ec 	.word	0x200024ec
  40b594:	20002d2c 	.word	0x20002d2c

0040b598 <_Balloc>:
  40b598:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40b59a:	b570      	push	{r4, r5, r6, lr}
  40b59c:	4605      	mov	r5, r0
  40b59e:	460c      	mov	r4, r1
  40b5a0:	b14b      	cbz	r3, 40b5b6 <_Balloc+0x1e>
  40b5a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40b5a6:	b180      	cbz	r0, 40b5ca <_Balloc+0x32>
  40b5a8:	6802      	ldr	r2, [r0, #0]
  40b5aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40b5ae:	2300      	movs	r3, #0
  40b5b0:	6103      	str	r3, [r0, #16]
  40b5b2:	60c3      	str	r3, [r0, #12]
  40b5b4:	bd70      	pop	{r4, r5, r6, pc}
  40b5b6:	2221      	movs	r2, #33	; 0x21
  40b5b8:	2104      	movs	r1, #4
  40b5ba:	f000 fbc9 	bl	40bd50 <_calloc_r>
  40b5be:	64e8      	str	r0, [r5, #76]	; 0x4c
  40b5c0:	4603      	mov	r3, r0
  40b5c2:	2800      	cmp	r0, #0
  40b5c4:	d1ed      	bne.n	40b5a2 <_Balloc+0xa>
  40b5c6:	2000      	movs	r0, #0
  40b5c8:	bd70      	pop	{r4, r5, r6, pc}
  40b5ca:	2101      	movs	r1, #1
  40b5cc:	fa01 f604 	lsl.w	r6, r1, r4
  40b5d0:	1d72      	adds	r2, r6, #5
  40b5d2:	4628      	mov	r0, r5
  40b5d4:	0092      	lsls	r2, r2, #2
  40b5d6:	f000 fbbb 	bl	40bd50 <_calloc_r>
  40b5da:	2800      	cmp	r0, #0
  40b5dc:	d0f3      	beq.n	40b5c6 <_Balloc+0x2e>
  40b5de:	6044      	str	r4, [r0, #4]
  40b5e0:	6086      	str	r6, [r0, #8]
  40b5e2:	e7e4      	b.n	40b5ae <_Balloc+0x16>

0040b5e4 <_Bfree>:
  40b5e4:	b131      	cbz	r1, 40b5f4 <_Bfree+0x10>
  40b5e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40b5e8:	684a      	ldr	r2, [r1, #4]
  40b5ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40b5ee:	6008      	str	r0, [r1, #0]
  40b5f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40b5f4:	4770      	bx	lr
  40b5f6:	bf00      	nop

0040b5f8 <__multadd>:
  40b5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b5fa:	690c      	ldr	r4, [r1, #16]
  40b5fc:	b083      	sub	sp, #12
  40b5fe:	460d      	mov	r5, r1
  40b600:	4606      	mov	r6, r0
  40b602:	f101 0e14 	add.w	lr, r1, #20
  40b606:	2700      	movs	r7, #0
  40b608:	f8de 0000 	ldr.w	r0, [lr]
  40b60c:	b281      	uxth	r1, r0
  40b60e:	fb02 3301 	mla	r3, r2, r1, r3
  40b612:	0c01      	lsrs	r1, r0, #16
  40b614:	0c18      	lsrs	r0, r3, #16
  40b616:	fb02 0101 	mla	r1, r2, r1, r0
  40b61a:	b29b      	uxth	r3, r3
  40b61c:	3701      	adds	r7, #1
  40b61e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40b622:	42bc      	cmp	r4, r7
  40b624:	f84e 3b04 	str.w	r3, [lr], #4
  40b628:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40b62c:	dcec      	bgt.n	40b608 <__multadd+0x10>
  40b62e:	b13b      	cbz	r3, 40b640 <__multadd+0x48>
  40b630:	68aa      	ldr	r2, [r5, #8]
  40b632:	4294      	cmp	r4, r2
  40b634:	da07      	bge.n	40b646 <__multadd+0x4e>
  40b636:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40b63a:	3401      	adds	r4, #1
  40b63c:	6153      	str	r3, [r2, #20]
  40b63e:	612c      	str	r4, [r5, #16]
  40b640:	4628      	mov	r0, r5
  40b642:	b003      	add	sp, #12
  40b644:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b646:	6869      	ldr	r1, [r5, #4]
  40b648:	9301      	str	r3, [sp, #4]
  40b64a:	3101      	adds	r1, #1
  40b64c:	4630      	mov	r0, r6
  40b64e:	f7ff ffa3 	bl	40b598 <_Balloc>
  40b652:	692a      	ldr	r2, [r5, #16]
  40b654:	3202      	adds	r2, #2
  40b656:	f105 010c 	add.w	r1, r5, #12
  40b65a:	4607      	mov	r7, r0
  40b65c:	0092      	lsls	r2, r2, #2
  40b65e:	300c      	adds	r0, #12
  40b660:	f7fc fffe 	bl	408660 <memcpy>
  40b664:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40b666:	6869      	ldr	r1, [r5, #4]
  40b668:	9b01      	ldr	r3, [sp, #4]
  40b66a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40b66e:	6028      	str	r0, [r5, #0]
  40b670:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40b674:	463d      	mov	r5, r7
  40b676:	e7de      	b.n	40b636 <__multadd+0x3e>

0040b678 <__hi0bits>:
  40b678:	0c02      	lsrs	r2, r0, #16
  40b67a:	0412      	lsls	r2, r2, #16
  40b67c:	4603      	mov	r3, r0
  40b67e:	b9b2      	cbnz	r2, 40b6ae <__hi0bits+0x36>
  40b680:	0403      	lsls	r3, r0, #16
  40b682:	2010      	movs	r0, #16
  40b684:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40b688:	bf04      	itt	eq
  40b68a:	021b      	lsleq	r3, r3, #8
  40b68c:	3008      	addeq	r0, #8
  40b68e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40b692:	bf04      	itt	eq
  40b694:	011b      	lsleq	r3, r3, #4
  40b696:	3004      	addeq	r0, #4
  40b698:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40b69c:	bf04      	itt	eq
  40b69e:	009b      	lsleq	r3, r3, #2
  40b6a0:	3002      	addeq	r0, #2
  40b6a2:	2b00      	cmp	r3, #0
  40b6a4:	db02      	blt.n	40b6ac <__hi0bits+0x34>
  40b6a6:	005b      	lsls	r3, r3, #1
  40b6a8:	d403      	bmi.n	40b6b2 <__hi0bits+0x3a>
  40b6aa:	2020      	movs	r0, #32
  40b6ac:	4770      	bx	lr
  40b6ae:	2000      	movs	r0, #0
  40b6b0:	e7e8      	b.n	40b684 <__hi0bits+0xc>
  40b6b2:	3001      	adds	r0, #1
  40b6b4:	4770      	bx	lr
  40b6b6:	bf00      	nop

0040b6b8 <__lo0bits>:
  40b6b8:	6803      	ldr	r3, [r0, #0]
  40b6ba:	f013 0207 	ands.w	r2, r3, #7
  40b6be:	4601      	mov	r1, r0
  40b6c0:	d007      	beq.n	40b6d2 <__lo0bits+0x1a>
  40b6c2:	07da      	lsls	r2, r3, #31
  40b6c4:	d421      	bmi.n	40b70a <__lo0bits+0x52>
  40b6c6:	0798      	lsls	r0, r3, #30
  40b6c8:	d421      	bmi.n	40b70e <__lo0bits+0x56>
  40b6ca:	089b      	lsrs	r3, r3, #2
  40b6cc:	600b      	str	r3, [r1, #0]
  40b6ce:	2002      	movs	r0, #2
  40b6d0:	4770      	bx	lr
  40b6d2:	b298      	uxth	r0, r3
  40b6d4:	b198      	cbz	r0, 40b6fe <__lo0bits+0x46>
  40b6d6:	4610      	mov	r0, r2
  40b6d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  40b6dc:	bf04      	itt	eq
  40b6de:	0a1b      	lsreq	r3, r3, #8
  40b6e0:	3008      	addeq	r0, #8
  40b6e2:	071a      	lsls	r2, r3, #28
  40b6e4:	bf04      	itt	eq
  40b6e6:	091b      	lsreq	r3, r3, #4
  40b6e8:	3004      	addeq	r0, #4
  40b6ea:	079a      	lsls	r2, r3, #30
  40b6ec:	bf04      	itt	eq
  40b6ee:	089b      	lsreq	r3, r3, #2
  40b6f0:	3002      	addeq	r0, #2
  40b6f2:	07da      	lsls	r2, r3, #31
  40b6f4:	d407      	bmi.n	40b706 <__lo0bits+0x4e>
  40b6f6:	085b      	lsrs	r3, r3, #1
  40b6f8:	d104      	bne.n	40b704 <__lo0bits+0x4c>
  40b6fa:	2020      	movs	r0, #32
  40b6fc:	4770      	bx	lr
  40b6fe:	0c1b      	lsrs	r3, r3, #16
  40b700:	2010      	movs	r0, #16
  40b702:	e7e9      	b.n	40b6d8 <__lo0bits+0x20>
  40b704:	3001      	adds	r0, #1
  40b706:	600b      	str	r3, [r1, #0]
  40b708:	4770      	bx	lr
  40b70a:	2000      	movs	r0, #0
  40b70c:	4770      	bx	lr
  40b70e:	085b      	lsrs	r3, r3, #1
  40b710:	600b      	str	r3, [r1, #0]
  40b712:	2001      	movs	r0, #1
  40b714:	4770      	bx	lr
  40b716:	bf00      	nop

0040b718 <__i2b>:
  40b718:	b510      	push	{r4, lr}
  40b71a:	460c      	mov	r4, r1
  40b71c:	2101      	movs	r1, #1
  40b71e:	f7ff ff3b 	bl	40b598 <_Balloc>
  40b722:	2201      	movs	r2, #1
  40b724:	6144      	str	r4, [r0, #20]
  40b726:	6102      	str	r2, [r0, #16]
  40b728:	bd10      	pop	{r4, pc}
  40b72a:	bf00      	nop

0040b72c <__multiply>:
  40b72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b730:	690c      	ldr	r4, [r1, #16]
  40b732:	6915      	ldr	r5, [r2, #16]
  40b734:	42ac      	cmp	r4, r5
  40b736:	b083      	sub	sp, #12
  40b738:	468b      	mov	fp, r1
  40b73a:	4616      	mov	r6, r2
  40b73c:	da04      	bge.n	40b748 <__multiply+0x1c>
  40b73e:	4622      	mov	r2, r4
  40b740:	46b3      	mov	fp, r6
  40b742:	462c      	mov	r4, r5
  40b744:	460e      	mov	r6, r1
  40b746:	4615      	mov	r5, r2
  40b748:	f8db 3008 	ldr.w	r3, [fp, #8]
  40b74c:	f8db 1004 	ldr.w	r1, [fp, #4]
  40b750:	eb04 0805 	add.w	r8, r4, r5
  40b754:	4598      	cmp	r8, r3
  40b756:	bfc8      	it	gt
  40b758:	3101      	addgt	r1, #1
  40b75a:	f7ff ff1d 	bl	40b598 <_Balloc>
  40b75e:	f100 0914 	add.w	r9, r0, #20
  40b762:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40b766:	45d1      	cmp	r9, sl
  40b768:	9000      	str	r0, [sp, #0]
  40b76a:	d205      	bcs.n	40b778 <__multiply+0x4c>
  40b76c:	464b      	mov	r3, r9
  40b76e:	2100      	movs	r1, #0
  40b770:	f843 1b04 	str.w	r1, [r3], #4
  40b774:	459a      	cmp	sl, r3
  40b776:	d8fb      	bhi.n	40b770 <__multiply+0x44>
  40b778:	f106 0c14 	add.w	ip, r6, #20
  40b77c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40b780:	f10b 0b14 	add.w	fp, fp, #20
  40b784:	459c      	cmp	ip, r3
  40b786:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40b78a:	d24c      	bcs.n	40b826 <__multiply+0xfa>
  40b78c:	f8cd a004 	str.w	sl, [sp, #4]
  40b790:	469a      	mov	sl, r3
  40b792:	f8dc 5000 	ldr.w	r5, [ip]
  40b796:	b2af      	uxth	r7, r5
  40b798:	b1ef      	cbz	r7, 40b7d6 <__multiply+0xaa>
  40b79a:	2100      	movs	r1, #0
  40b79c:	464d      	mov	r5, r9
  40b79e:	465e      	mov	r6, fp
  40b7a0:	460c      	mov	r4, r1
  40b7a2:	f856 2b04 	ldr.w	r2, [r6], #4
  40b7a6:	6828      	ldr	r0, [r5, #0]
  40b7a8:	b293      	uxth	r3, r2
  40b7aa:	b281      	uxth	r1, r0
  40b7ac:	fb07 1303 	mla	r3, r7, r3, r1
  40b7b0:	0c12      	lsrs	r2, r2, #16
  40b7b2:	0c01      	lsrs	r1, r0, #16
  40b7b4:	4423      	add	r3, r4
  40b7b6:	fb07 1102 	mla	r1, r7, r2, r1
  40b7ba:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40b7be:	b29b      	uxth	r3, r3
  40b7c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40b7c4:	45b6      	cmp	lr, r6
  40b7c6:	f845 3b04 	str.w	r3, [r5], #4
  40b7ca:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40b7ce:	d8e8      	bhi.n	40b7a2 <__multiply+0x76>
  40b7d0:	602c      	str	r4, [r5, #0]
  40b7d2:	f8dc 5000 	ldr.w	r5, [ip]
  40b7d6:	0c2d      	lsrs	r5, r5, #16
  40b7d8:	d01d      	beq.n	40b816 <__multiply+0xea>
  40b7da:	f8d9 3000 	ldr.w	r3, [r9]
  40b7de:	4648      	mov	r0, r9
  40b7e0:	461c      	mov	r4, r3
  40b7e2:	4659      	mov	r1, fp
  40b7e4:	2200      	movs	r2, #0
  40b7e6:	880e      	ldrh	r6, [r1, #0]
  40b7e8:	0c24      	lsrs	r4, r4, #16
  40b7ea:	fb05 4406 	mla	r4, r5, r6, r4
  40b7ee:	4422      	add	r2, r4
  40b7f0:	b29b      	uxth	r3, r3
  40b7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40b7f6:	f840 3b04 	str.w	r3, [r0], #4
  40b7fa:	f851 3b04 	ldr.w	r3, [r1], #4
  40b7fe:	6804      	ldr	r4, [r0, #0]
  40b800:	0c1b      	lsrs	r3, r3, #16
  40b802:	b2a6      	uxth	r6, r4
  40b804:	fb05 6303 	mla	r3, r5, r3, r6
  40b808:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40b80c:	458e      	cmp	lr, r1
  40b80e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40b812:	d8e8      	bhi.n	40b7e6 <__multiply+0xba>
  40b814:	6003      	str	r3, [r0, #0]
  40b816:	f10c 0c04 	add.w	ip, ip, #4
  40b81a:	45e2      	cmp	sl, ip
  40b81c:	f109 0904 	add.w	r9, r9, #4
  40b820:	d8b7      	bhi.n	40b792 <__multiply+0x66>
  40b822:	f8dd a004 	ldr.w	sl, [sp, #4]
  40b826:	f1b8 0f00 	cmp.w	r8, #0
  40b82a:	dd0b      	ble.n	40b844 <__multiply+0x118>
  40b82c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40b830:	f1aa 0a04 	sub.w	sl, sl, #4
  40b834:	b11b      	cbz	r3, 40b83e <__multiply+0x112>
  40b836:	e005      	b.n	40b844 <__multiply+0x118>
  40b838:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40b83c:	b913      	cbnz	r3, 40b844 <__multiply+0x118>
  40b83e:	f1b8 0801 	subs.w	r8, r8, #1
  40b842:	d1f9      	bne.n	40b838 <__multiply+0x10c>
  40b844:	9800      	ldr	r0, [sp, #0]
  40b846:	f8c0 8010 	str.w	r8, [r0, #16]
  40b84a:	b003      	add	sp, #12
  40b84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b850 <__pow5mult>:
  40b850:	f012 0303 	ands.w	r3, r2, #3
  40b854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b858:	4614      	mov	r4, r2
  40b85a:	4607      	mov	r7, r0
  40b85c:	d12e      	bne.n	40b8bc <__pow5mult+0x6c>
  40b85e:	460d      	mov	r5, r1
  40b860:	10a4      	asrs	r4, r4, #2
  40b862:	d01c      	beq.n	40b89e <__pow5mult+0x4e>
  40b864:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40b866:	b396      	cbz	r6, 40b8ce <__pow5mult+0x7e>
  40b868:	07e3      	lsls	r3, r4, #31
  40b86a:	f04f 0800 	mov.w	r8, #0
  40b86e:	d406      	bmi.n	40b87e <__pow5mult+0x2e>
  40b870:	1064      	asrs	r4, r4, #1
  40b872:	d014      	beq.n	40b89e <__pow5mult+0x4e>
  40b874:	6830      	ldr	r0, [r6, #0]
  40b876:	b1a8      	cbz	r0, 40b8a4 <__pow5mult+0x54>
  40b878:	4606      	mov	r6, r0
  40b87a:	07e3      	lsls	r3, r4, #31
  40b87c:	d5f8      	bpl.n	40b870 <__pow5mult+0x20>
  40b87e:	4632      	mov	r2, r6
  40b880:	4629      	mov	r1, r5
  40b882:	4638      	mov	r0, r7
  40b884:	f7ff ff52 	bl	40b72c <__multiply>
  40b888:	b1b5      	cbz	r5, 40b8b8 <__pow5mult+0x68>
  40b88a:	686a      	ldr	r2, [r5, #4]
  40b88c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b88e:	1064      	asrs	r4, r4, #1
  40b890:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b894:	6029      	str	r1, [r5, #0]
  40b896:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40b89a:	4605      	mov	r5, r0
  40b89c:	d1ea      	bne.n	40b874 <__pow5mult+0x24>
  40b89e:	4628      	mov	r0, r5
  40b8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b8a4:	4632      	mov	r2, r6
  40b8a6:	4631      	mov	r1, r6
  40b8a8:	4638      	mov	r0, r7
  40b8aa:	f7ff ff3f 	bl	40b72c <__multiply>
  40b8ae:	6030      	str	r0, [r6, #0]
  40b8b0:	f8c0 8000 	str.w	r8, [r0]
  40b8b4:	4606      	mov	r6, r0
  40b8b6:	e7e0      	b.n	40b87a <__pow5mult+0x2a>
  40b8b8:	4605      	mov	r5, r0
  40b8ba:	e7d9      	b.n	40b870 <__pow5mult+0x20>
  40b8bc:	1e5a      	subs	r2, r3, #1
  40b8be:	4d0b      	ldr	r5, [pc, #44]	; (40b8ec <__pow5mult+0x9c>)
  40b8c0:	2300      	movs	r3, #0
  40b8c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40b8c6:	f7ff fe97 	bl	40b5f8 <__multadd>
  40b8ca:	4605      	mov	r5, r0
  40b8cc:	e7c8      	b.n	40b860 <__pow5mult+0x10>
  40b8ce:	2101      	movs	r1, #1
  40b8d0:	4638      	mov	r0, r7
  40b8d2:	f7ff fe61 	bl	40b598 <_Balloc>
  40b8d6:	f240 2171 	movw	r1, #625	; 0x271
  40b8da:	2201      	movs	r2, #1
  40b8dc:	2300      	movs	r3, #0
  40b8de:	6141      	str	r1, [r0, #20]
  40b8e0:	6102      	str	r2, [r0, #16]
  40b8e2:	4606      	mov	r6, r0
  40b8e4:	64b8      	str	r0, [r7, #72]	; 0x48
  40b8e6:	6003      	str	r3, [r0, #0]
  40b8e8:	e7be      	b.n	40b868 <__pow5mult+0x18>
  40b8ea:	bf00      	nop
  40b8ec:	0040c748 	.word	0x0040c748

0040b8f0 <__lshift>:
  40b8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b8f4:	4691      	mov	r9, r2
  40b8f6:	690a      	ldr	r2, [r1, #16]
  40b8f8:	688b      	ldr	r3, [r1, #8]
  40b8fa:	ea4f 1469 	mov.w	r4, r9, asr #5
  40b8fe:	eb04 0802 	add.w	r8, r4, r2
  40b902:	f108 0501 	add.w	r5, r8, #1
  40b906:	429d      	cmp	r5, r3
  40b908:	460e      	mov	r6, r1
  40b90a:	4607      	mov	r7, r0
  40b90c:	6849      	ldr	r1, [r1, #4]
  40b90e:	dd04      	ble.n	40b91a <__lshift+0x2a>
  40b910:	005b      	lsls	r3, r3, #1
  40b912:	429d      	cmp	r5, r3
  40b914:	f101 0101 	add.w	r1, r1, #1
  40b918:	dcfa      	bgt.n	40b910 <__lshift+0x20>
  40b91a:	4638      	mov	r0, r7
  40b91c:	f7ff fe3c 	bl	40b598 <_Balloc>
  40b920:	2c00      	cmp	r4, #0
  40b922:	f100 0314 	add.w	r3, r0, #20
  40b926:	dd06      	ble.n	40b936 <__lshift+0x46>
  40b928:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40b92c:	2100      	movs	r1, #0
  40b92e:	f843 1b04 	str.w	r1, [r3], #4
  40b932:	429a      	cmp	r2, r3
  40b934:	d1fb      	bne.n	40b92e <__lshift+0x3e>
  40b936:	6934      	ldr	r4, [r6, #16]
  40b938:	f106 0114 	add.w	r1, r6, #20
  40b93c:	f019 091f 	ands.w	r9, r9, #31
  40b940:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40b944:	d01d      	beq.n	40b982 <__lshift+0x92>
  40b946:	f1c9 0c20 	rsb	ip, r9, #32
  40b94a:	2200      	movs	r2, #0
  40b94c:	680c      	ldr	r4, [r1, #0]
  40b94e:	fa04 f409 	lsl.w	r4, r4, r9
  40b952:	4314      	orrs	r4, r2
  40b954:	f843 4b04 	str.w	r4, [r3], #4
  40b958:	f851 2b04 	ldr.w	r2, [r1], #4
  40b95c:	458e      	cmp	lr, r1
  40b95e:	fa22 f20c 	lsr.w	r2, r2, ip
  40b962:	d8f3      	bhi.n	40b94c <__lshift+0x5c>
  40b964:	601a      	str	r2, [r3, #0]
  40b966:	b10a      	cbz	r2, 40b96c <__lshift+0x7c>
  40b968:	f108 0502 	add.w	r5, r8, #2
  40b96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b96e:	6872      	ldr	r2, [r6, #4]
  40b970:	3d01      	subs	r5, #1
  40b972:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b976:	6105      	str	r5, [r0, #16]
  40b978:	6031      	str	r1, [r6, #0]
  40b97a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40b97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b982:	3b04      	subs	r3, #4
  40b984:	f851 2b04 	ldr.w	r2, [r1], #4
  40b988:	f843 2f04 	str.w	r2, [r3, #4]!
  40b98c:	458e      	cmp	lr, r1
  40b98e:	d8f9      	bhi.n	40b984 <__lshift+0x94>
  40b990:	e7ec      	b.n	40b96c <__lshift+0x7c>
  40b992:	bf00      	nop

0040b994 <__mcmp>:
  40b994:	b430      	push	{r4, r5}
  40b996:	690b      	ldr	r3, [r1, #16]
  40b998:	4605      	mov	r5, r0
  40b99a:	6900      	ldr	r0, [r0, #16]
  40b99c:	1ac0      	subs	r0, r0, r3
  40b99e:	d10f      	bne.n	40b9c0 <__mcmp+0x2c>
  40b9a0:	009b      	lsls	r3, r3, #2
  40b9a2:	3514      	adds	r5, #20
  40b9a4:	3114      	adds	r1, #20
  40b9a6:	4419      	add	r1, r3
  40b9a8:	442b      	add	r3, r5
  40b9aa:	e001      	b.n	40b9b0 <__mcmp+0x1c>
  40b9ac:	429d      	cmp	r5, r3
  40b9ae:	d207      	bcs.n	40b9c0 <__mcmp+0x2c>
  40b9b0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40b9b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40b9b8:	4294      	cmp	r4, r2
  40b9ba:	d0f7      	beq.n	40b9ac <__mcmp+0x18>
  40b9bc:	d302      	bcc.n	40b9c4 <__mcmp+0x30>
  40b9be:	2001      	movs	r0, #1
  40b9c0:	bc30      	pop	{r4, r5}
  40b9c2:	4770      	bx	lr
  40b9c4:	f04f 30ff 	mov.w	r0, #4294967295
  40b9c8:	e7fa      	b.n	40b9c0 <__mcmp+0x2c>
  40b9ca:	bf00      	nop

0040b9cc <__mdiff>:
  40b9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b9d0:	690f      	ldr	r7, [r1, #16]
  40b9d2:	460e      	mov	r6, r1
  40b9d4:	6911      	ldr	r1, [r2, #16]
  40b9d6:	1a7f      	subs	r7, r7, r1
  40b9d8:	2f00      	cmp	r7, #0
  40b9da:	4690      	mov	r8, r2
  40b9dc:	d117      	bne.n	40ba0e <__mdiff+0x42>
  40b9de:	0089      	lsls	r1, r1, #2
  40b9e0:	f106 0514 	add.w	r5, r6, #20
  40b9e4:	f102 0e14 	add.w	lr, r2, #20
  40b9e8:	186b      	adds	r3, r5, r1
  40b9ea:	4471      	add	r1, lr
  40b9ec:	e001      	b.n	40b9f2 <__mdiff+0x26>
  40b9ee:	429d      	cmp	r5, r3
  40b9f0:	d25c      	bcs.n	40baac <__mdiff+0xe0>
  40b9f2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40b9f6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40b9fa:	42a2      	cmp	r2, r4
  40b9fc:	d0f7      	beq.n	40b9ee <__mdiff+0x22>
  40b9fe:	d25e      	bcs.n	40babe <__mdiff+0xf2>
  40ba00:	4633      	mov	r3, r6
  40ba02:	462c      	mov	r4, r5
  40ba04:	4646      	mov	r6, r8
  40ba06:	4675      	mov	r5, lr
  40ba08:	4698      	mov	r8, r3
  40ba0a:	2701      	movs	r7, #1
  40ba0c:	e005      	b.n	40ba1a <__mdiff+0x4e>
  40ba0e:	db58      	blt.n	40bac2 <__mdiff+0xf6>
  40ba10:	f106 0514 	add.w	r5, r6, #20
  40ba14:	f108 0414 	add.w	r4, r8, #20
  40ba18:	2700      	movs	r7, #0
  40ba1a:	6871      	ldr	r1, [r6, #4]
  40ba1c:	f7ff fdbc 	bl	40b598 <_Balloc>
  40ba20:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40ba24:	6936      	ldr	r6, [r6, #16]
  40ba26:	60c7      	str	r7, [r0, #12]
  40ba28:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40ba2c:	46a6      	mov	lr, r4
  40ba2e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40ba32:	f100 0414 	add.w	r4, r0, #20
  40ba36:	2300      	movs	r3, #0
  40ba38:	f85e 1b04 	ldr.w	r1, [lr], #4
  40ba3c:	f855 8b04 	ldr.w	r8, [r5], #4
  40ba40:	b28a      	uxth	r2, r1
  40ba42:	fa13 f388 	uxtah	r3, r3, r8
  40ba46:	0c09      	lsrs	r1, r1, #16
  40ba48:	1a9a      	subs	r2, r3, r2
  40ba4a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40ba4e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ba52:	b292      	uxth	r2, r2
  40ba54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ba58:	45f4      	cmp	ip, lr
  40ba5a:	f844 2b04 	str.w	r2, [r4], #4
  40ba5e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ba62:	d8e9      	bhi.n	40ba38 <__mdiff+0x6c>
  40ba64:	42af      	cmp	r7, r5
  40ba66:	d917      	bls.n	40ba98 <__mdiff+0xcc>
  40ba68:	46a4      	mov	ip, r4
  40ba6a:	46ae      	mov	lr, r5
  40ba6c:	f85e 2b04 	ldr.w	r2, [lr], #4
  40ba70:	fa13 f382 	uxtah	r3, r3, r2
  40ba74:	1419      	asrs	r1, r3, #16
  40ba76:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40ba7a:	b29b      	uxth	r3, r3
  40ba7c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40ba80:	4577      	cmp	r7, lr
  40ba82:	f84c 2b04 	str.w	r2, [ip], #4
  40ba86:	ea4f 4321 	mov.w	r3, r1, asr #16
  40ba8a:	d8ef      	bhi.n	40ba6c <__mdiff+0xa0>
  40ba8c:	43ed      	mvns	r5, r5
  40ba8e:	442f      	add	r7, r5
  40ba90:	f027 0703 	bic.w	r7, r7, #3
  40ba94:	3704      	adds	r7, #4
  40ba96:	443c      	add	r4, r7
  40ba98:	3c04      	subs	r4, #4
  40ba9a:	b922      	cbnz	r2, 40baa6 <__mdiff+0xda>
  40ba9c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40baa0:	3e01      	subs	r6, #1
  40baa2:	2b00      	cmp	r3, #0
  40baa4:	d0fa      	beq.n	40ba9c <__mdiff+0xd0>
  40baa6:	6106      	str	r6, [r0, #16]
  40baa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40baac:	2100      	movs	r1, #0
  40baae:	f7ff fd73 	bl	40b598 <_Balloc>
  40bab2:	2201      	movs	r2, #1
  40bab4:	2300      	movs	r3, #0
  40bab6:	6102      	str	r2, [r0, #16]
  40bab8:	6143      	str	r3, [r0, #20]
  40baba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40babe:	4674      	mov	r4, lr
  40bac0:	e7ab      	b.n	40ba1a <__mdiff+0x4e>
  40bac2:	4633      	mov	r3, r6
  40bac4:	f106 0414 	add.w	r4, r6, #20
  40bac8:	f102 0514 	add.w	r5, r2, #20
  40bacc:	4616      	mov	r6, r2
  40bace:	2701      	movs	r7, #1
  40bad0:	4698      	mov	r8, r3
  40bad2:	e7a2      	b.n	40ba1a <__mdiff+0x4e>

0040bad4 <__d2b>:
  40bad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40bad8:	ec57 6b10 	vmov	r6, r7, d0
  40badc:	b083      	sub	sp, #12
  40bade:	4688      	mov	r8, r1
  40bae0:	2101      	movs	r1, #1
  40bae2:	463c      	mov	r4, r7
  40bae4:	f3c7 550a 	ubfx	r5, r7, #20, #11
  40bae8:	4617      	mov	r7, r2
  40baea:	f7ff fd55 	bl	40b598 <_Balloc>
  40baee:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40baf2:	4681      	mov	r9, r0
  40baf4:	b10d      	cbz	r5, 40bafa <__d2b+0x26>
  40baf6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40bafa:	9401      	str	r4, [sp, #4]
  40bafc:	b31e      	cbz	r6, 40bb46 <__d2b+0x72>
  40bafe:	a802      	add	r0, sp, #8
  40bb00:	f840 6d08 	str.w	r6, [r0, #-8]!
  40bb04:	f7ff fdd8 	bl	40b6b8 <__lo0bits>
  40bb08:	2800      	cmp	r0, #0
  40bb0a:	d134      	bne.n	40bb76 <__d2b+0xa2>
  40bb0c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40bb10:	f8c9 2014 	str.w	r2, [r9, #20]
  40bb14:	2b00      	cmp	r3, #0
  40bb16:	bf0c      	ite	eq
  40bb18:	2101      	moveq	r1, #1
  40bb1a:	2102      	movne	r1, #2
  40bb1c:	f8c9 3018 	str.w	r3, [r9, #24]
  40bb20:	f8c9 1010 	str.w	r1, [r9, #16]
  40bb24:	b9dd      	cbnz	r5, 40bb5e <__d2b+0x8a>
  40bb26:	eb09 0381 	add.w	r3, r9, r1, lsl #2
  40bb2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40bb2e:	f8c8 0000 	str.w	r0, [r8]
  40bb32:	6918      	ldr	r0, [r3, #16]
  40bb34:	f7ff fda0 	bl	40b678 <__hi0bits>
  40bb38:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40bb3c:	6038      	str	r0, [r7, #0]
  40bb3e:	4648      	mov	r0, r9
  40bb40:	b003      	add	sp, #12
  40bb42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40bb46:	a801      	add	r0, sp, #4
  40bb48:	f7ff fdb6 	bl	40b6b8 <__lo0bits>
  40bb4c:	9b01      	ldr	r3, [sp, #4]
  40bb4e:	f8c9 3014 	str.w	r3, [r9, #20]
  40bb52:	2101      	movs	r1, #1
  40bb54:	3020      	adds	r0, #32
  40bb56:	f8c9 1010 	str.w	r1, [r9, #16]
  40bb5a:	2d00      	cmp	r5, #0
  40bb5c:	d0e3      	beq.n	40bb26 <__d2b+0x52>
  40bb5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
  40bb62:	4405      	add	r5, r0
  40bb64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40bb68:	f8c8 5000 	str.w	r5, [r8]
  40bb6c:	6038      	str	r0, [r7, #0]
  40bb6e:	4648      	mov	r0, r9
  40bb70:	b003      	add	sp, #12
  40bb72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40bb76:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40bb7a:	f1c0 0220 	rsb	r2, r0, #32
  40bb7e:	fa03 f202 	lsl.w	r2, r3, r2
  40bb82:	430a      	orrs	r2, r1
  40bb84:	40c3      	lsrs	r3, r0
  40bb86:	9301      	str	r3, [sp, #4]
  40bb88:	f8c9 2014 	str.w	r2, [r9, #20]
  40bb8c:	e7c2      	b.n	40bb14 <__d2b+0x40>
  40bb8e:	bf00      	nop

0040bb90 <__ssprint_r>:
  40bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bb94:	6893      	ldr	r3, [r2, #8]
  40bb96:	b083      	sub	sp, #12
  40bb98:	4690      	mov	r8, r2
  40bb9a:	2b00      	cmp	r3, #0
  40bb9c:	d070      	beq.n	40bc80 <__ssprint_r+0xf0>
  40bb9e:	4682      	mov	sl, r0
  40bba0:	460c      	mov	r4, r1
  40bba2:	6817      	ldr	r7, [r2, #0]
  40bba4:	688d      	ldr	r5, [r1, #8]
  40bba6:	6808      	ldr	r0, [r1, #0]
  40bba8:	e042      	b.n	40bc30 <__ssprint_r+0xa0>
  40bbaa:	89a3      	ldrh	r3, [r4, #12]
  40bbac:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40bbb0:	d02e      	beq.n	40bc10 <__ssprint_r+0x80>
  40bbb2:	6965      	ldr	r5, [r4, #20]
  40bbb4:	6921      	ldr	r1, [r4, #16]
  40bbb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40bbba:	eba0 0b01 	sub.w	fp, r0, r1
  40bbbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40bbc2:	f10b 0001 	add.w	r0, fp, #1
  40bbc6:	106d      	asrs	r5, r5, #1
  40bbc8:	4430      	add	r0, r6
  40bbca:	42a8      	cmp	r0, r5
  40bbcc:	462a      	mov	r2, r5
  40bbce:	bf84      	itt	hi
  40bbd0:	4605      	movhi	r5, r0
  40bbd2:	462a      	movhi	r2, r5
  40bbd4:	055b      	lsls	r3, r3, #21
  40bbd6:	d538      	bpl.n	40bc4a <__ssprint_r+0xba>
  40bbd8:	4611      	mov	r1, r2
  40bbda:	4650      	mov	r0, sl
  40bbdc:	f7fc fa3c 	bl	408058 <_malloc_r>
  40bbe0:	2800      	cmp	r0, #0
  40bbe2:	d03c      	beq.n	40bc5e <__ssprint_r+0xce>
  40bbe4:	465a      	mov	r2, fp
  40bbe6:	6921      	ldr	r1, [r4, #16]
  40bbe8:	9001      	str	r0, [sp, #4]
  40bbea:	f7fc fd39 	bl	408660 <memcpy>
  40bbee:	89a2      	ldrh	r2, [r4, #12]
  40bbf0:	9b01      	ldr	r3, [sp, #4]
  40bbf2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40bbf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40bbfa:	81a2      	strh	r2, [r4, #12]
  40bbfc:	eba5 020b 	sub.w	r2, r5, fp
  40bc00:	eb03 000b 	add.w	r0, r3, fp
  40bc04:	6165      	str	r5, [r4, #20]
  40bc06:	6123      	str	r3, [r4, #16]
  40bc08:	6020      	str	r0, [r4, #0]
  40bc0a:	60a2      	str	r2, [r4, #8]
  40bc0c:	4635      	mov	r5, r6
  40bc0e:	46b3      	mov	fp, r6
  40bc10:	465a      	mov	r2, fp
  40bc12:	4649      	mov	r1, r9
  40bc14:	f7fc fdbe 	bl	408794 <memmove>
  40bc18:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40bc1c:	68a2      	ldr	r2, [r4, #8]
  40bc1e:	6820      	ldr	r0, [r4, #0]
  40bc20:	1b55      	subs	r5, r2, r5
  40bc22:	4458      	add	r0, fp
  40bc24:	1b9e      	subs	r6, r3, r6
  40bc26:	60a5      	str	r5, [r4, #8]
  40bc28:	6020      	str	r0, [r4, #0]
  40bc2a:	f8c8 6008 	str.w	r6, [r8, #8]
  40bc2e:	b33e      	cbz	r6, 40bc80 <__ssprint_r+0xf0>
  40bc30:	687e      	ldr	r6, [r7, #4]
  40bc32:	463b      	mov	r3, r7
  40bc34:	3708      	adds	r7, #8
  40bc36:	2e00      	cmp	r6, #0
  40bc38:	d0fa      	beq.n	40bc30 <__ssprint_r+0xa0>
  40bc3a:	42ae      	cmp	r6, r5
  40bc3c:	f8d3 9000 	ldr.w	r9, [r3]
  40bc40:	46ab      	mov	fp, r5
  40bc42:	d2b2      	bcs.n	40bbaa <__ssprint_r+0x1a>
  40bc44:	4635      	mov	r5, r6
  40bc46:	46b3      	mov	fp, r6
  40bc48:	e7e2      	b.n	40bc10 <__ssprint_r+0x80>
  40bc4a:	4650      	mov	r0, sl
  40bc4c:	f7fc fe60 	bl	408910 <_realloc_r>
  40bc50:	4603      	mov	r3, r0
  40bc52:	2800      	cmp	r0, #0
  40bc54:	d1d2      	bne.n	40bbfc <__ssprint_r+0x6c>
  40bc56:	6921      	ldr	r1, [r4, #16]
  40bc58:	4650      	mov	r0, sl
  40bc5a:	f7ff fba9 	bl	40b3b0 <_free_r>
  40bc5e:	230c      	movs	r3, #12
  40bc60:	f8ca 3000 	str.w	r3, [sl]
  40bc64:	89a3      	ldrh	r3, [r4, #12]
  40bc66:	2200      	movs	r2, #0
  40bc68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40bc6c:	f04f 30ff 	mov.w	r0, #4294967295
  40bc70:	81a3      	strh	r3, [r4, #12]
  40bc72:	f8c8 2008 	str.w	r2, [r8, #8]
  40bc76:	f8c8 2004 	str.w	r2, [r8, #4]
  40bc7a:	b003      	add	sp, #12
  40bc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bc80:	2000      	movs	r0, #0
  40bc82:	f8c8 0004 	str.w	r0, [r8, #4]
  40bc86:	b003      	add	sp, #12
  40bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040bc8c <__register_exitproc>:
  40bc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40bc90:	4d2c      	ldr	r5, [pc, #176]	; (40bd44 <__register_exitproc+0xb8>)
  40bc92:	4606      	mov	r6, r0
  40bc94:	6828      	ldr	r0, [r5, #0]
  40bc96:	4698      	mov	r8, r3
  40bc98:	460f      	mov	r7, r1
  40bc9a:	4691      	mov	r9, r2
  40bc9c:	f7fc f9d8 	bl	408050 <__retarget_lock_acquire_recursive>
  40bca0:	4b29      	ldr	r3, [pc, #164]	; (40bd48 <__register_exitproc+0xbc>)
  40bca2:	681c      	ldr	r4, [r3, #0]
  40bca4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40bca8:	2b00      	cmp	r3, #0
  40bcaa:	d03e      	beq.n	40bd2a <__register_exitproc+0x9e>
  40bcac:	685a      	ldr	r2, [r3, #4]
  40bcae:	2a1f      	cmp	r2, #31
  40bcb0:	dc1c      	bgt.n	40bcec <__register_exitproc+0x60>
  40bcb2:	f102 0e01 	add.w	lr, r2, #1
  40bcb6:	b176      	cbz	r6, 40bcd6 <__register_exitproc+0x4a>
  40bcb8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40bcbc:	2401      	movs	r4, #1
  40bcbe:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40bcc2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40bcc6:	4094      	lsls	r4, r2
  40bcc8:	4320      	orrs	r0, r4
  40bcca:	2e02      	cmp	r6, #2
  40bccc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40bcd0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40bcd4:	d023      	beq.n	40bd1e <__register_exitproc+0x92>
  40bcd6:	3202      	adds	r2, #2
  40bcd8:	f8c3 e004 	str.w	lr, [r3, #4]
  40bcdc:	6828      	ldr	r0, [r5, #0]
  40bcde:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40bce2:	f7fc f9b7 	bl	408054 <__retarget_lock_release_recursive>
  40bce6:	2000      	movs	r0, #0
  40bce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bcec:	4b17      	ldr	r3, [pc, #92]	; (40bd4c <__register_exitproc+0xc0>)
  40bcee:	b30b      	cbz	r3, 40bd34 <__register_exitproc+0xa8>
  40bcf0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40bcf4:	f3af 8000 	nop.w
  40bcf8:	4603      	mov	r3, r0
  40bcfa:	b1d8      	cbz	r0, 40bd34 <__register_exitproc+0xa8>
  40bcfc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40bd00:	6002      	str	r2, [r0, #0]
  40bd02:	2100      	movs	r1, #0
  40bd04:	6041      	str	r1, [r0, #4]
  40bd06:	460a      	mov	r2, r1
  40bd08:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40bd0c:	f04f 0e01 	mov.w	lr, #1
  40bd10:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40bd14:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40bd18:	2e00      	cmp	r6, #0
  40bd1a:	d0dc      	beq.n	40bcd6 <__register_exitproc+0x4a>
  40bd1c:	e7cc      	b.n	40bcb8 <__register_exitproc+0x2c>
  40bd1e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40bd22:	430c      	orrs	r4, r1
  40bd24:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40bd28:	e7d5      	b.n	40bcd6 <__register_exitproc+0x4a>
  40bd2a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40bd2e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40bd32:	e7bb      	b.n	40bcac <__register_exitproc+0x20>
  40bd34:	6828      	ldr	r0, [r5, #0]
  40bd36:	f7fc f98d 	bl	408054 <__retarget_lock_release_recursive>
  40bd3a:	f04f 30ff 	mov.w	r0, #4294967295
  40bd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40bd42:	bf00      	nop
  40bd44:	20002d28 	.word	0x20002d28
  40bd48:	0040c5e0 	.word	0x0040c5e0
  40bd4c:	00000000 	.word	0x00000000

0040bd50 <_calloc_r>:
  40bd50:	b510      	push	{r4, lr}
  40bd52:	fb02 f101 	mul.w	r1, r2, r1
  40bd56:	f7fc f97f 	bl	408058 <_malloc_r>
  40bd5a:	4604      	mov	r4, r0
  40bd5c:	b1d8      	cbz	r0, 40bd96 <_calloc_r+0x46>
  40bd5e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40bd62:	f022 0203 	bic.w	r2, r2, #3
  40bd66:	3a04      	subs	r2, #4
  40bd68:	2a24      	cmp	r2, #36	; 0x24
  40bd6a:	d818      	bhi.n	40bd9e <_calloc_r+0x4e>
  40bd6c:	2a13      	cmp	r2, #19
  40bd6e:	d914      	bls.n	40bd9a <_calloc_r+0x4a>
  40bd70:	2300      	movs	r3, #0
  40bd72:	2a1b      	cmp	r2, #27
  40bd74:	6003      	str	r3, [r0, #0]
  40bd76:	6043      	str	r3, [r0, #4]
  40bd78:	d916      	bls.n	40bda8 <_calloc_r+0x58>
  40bd7a:	2a24      	cmp	r2, #36	; 0x24
  40bd7c:	6083      	str	r3, [r0, #8]
  40bd7e:	60c3      	str	r3, [r0, #12]
  40bd80:	bf11      	iteee	ne
  40bd82:	f100 0210 	addne.w	r2, r0, #16
  40bd86:	6103      	streq	r3, [r0, #16]
  40bd88:	6143      	streq	r3, [r0, #20]
  40bd8a:	f100 0218 	addeq.w	r2, r0, #24
  40bd8e:	2300      	movs	r3, #0
  40bd90:	6013      	str	r3, [r2, #0]
  40bd92:	6053      	str	r3, [r2, #4]
  40bd94:	6093      	str	r3, [r2, #8]
  40bd96:	4620      	mov	r0, r4
  40bd98:	bd10      	pop	{r4, pc}
  40bd9a:	4602      	mov	r2, r0
  40bd9c:	e7f7      	b.n	40bd8e <_calloc_r+0x3e>
  40bd9e:	2100      	movs	r1, #0
  40bda0:	f7fc fd5c 	bl	40885c <memset>
  40bda4:	4620      	mov	r0, r4
  40bda6:	bd10      	pop	{r4, pc}
  40bda8:	f100 0208 	add.w	r2, r0, #8
  40bdac:	e7ef      	b.n	40bd8e <_calloc_r+0x3e>
  40bdae:	bf00      	nop

0040bdb0 <__ascii_mbtowc>:
  40bdb0:	b082      	sub	sp, #8
  40bdb2:	b149      	cbz	r1, 40bdc8 <__ascii_mbtowc+0x18>
  40bdb4:	b15a      	cbz	r2, 40bdce <__ascii_mbtowc+0x1e>
  40bdb6:	b16b      	cbz	r3, 40bdd4 <__ascii_mbtowc+0x24>
  40bdb8:	7813      	ldrb	r3, [r2, #0]
  40bdba:	600b      	str	r3, [r1, #0]
  40bdbc:	7812      	ldrb	r2, [r2, #0]
  40bdbe:	1c10      	adds	r0, r2, #0
  40bdc0:	bf18      	it	ne
  40bdc2:	2001      	movne	r0, #1
  40bdc4:	b002      	add	sp, #8
  40bdc6:	4770      	bx	lr
  40bdc8:	a901      	add	r1, sp, #4
  40bdca:	2a00      	cmp	r2, #0
  40bdcc:	d1f3      	bne.n	40bdb6 <__ascii_mbtowc+0x6>
  40bdce:	4610      	mov	r0, r2
  40bdd0:	b002      	add	sp, #8
  40bdd2:	4770      	bx	lr
  40bdd4:	f06f 0001 	mvn.w	r0, #1
  40bdd8:	e7f4      	b.n	40bdc4 <__ascii_mbtowc+0x14>
  40bdda:	bf00      	nop

0040bddc <__ascii_wctomb>:
  40bddc:	b121      	cbz	r1, 40bde8 <__ascii_wctomb+0xc>
  40bdde:	2aff      	cmp	r2, #255	; 0xff
  40bde0:	d804      	bhi.n	40bdec <__ascii_wctomb+0x10>
  40bde2:	700a      	strb	r2, [r1, #0]
  40bde4:	2001      	movs	r0, #1
  40bde6:	4770      	bx	lr
  40bde8:	4608      	mov	r0, r1
  40bdea:	4770      	bx	lr
  40bdec:	238a      	movs	r3, #138	; 0x8a
  40bdee:	6003      	str	r3, [r0, #0]
  40bdf0:	f04f 30ff 	mov.w	r0, #4294967295
  40bdf4:	4770      	bx	lr
  40bdf6:	bf00      	nop

0040bdf8 <__aeabi_d2iz>:
  40bdf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40bdfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40be00:	d215      	bcs.n	40be2e <__aeabi_d2iz+0x36>
  40be02:	d511      	bpl.n	40be28 <__aeabi_d2iz+0x30>
  40be04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40be08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40be0c:	d912      	bls.n	40be34 <__aeabi_d2iz+0x3c>
  40be0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40be12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40be16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40be1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40be1e:	fa23 f002 	lsr.w	r0, r3, r2
  40be22:	bf18      	it	ne
  40be24:	4240      	negne	r0, r0
  40be26:	4770      	bx	lr
  40be28:	f04f 0000 	mov.w	r0, #0
  40be2c:	4770      	bx	lr
  40be2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40be32:	d105      	bne.n	40be40 <__aeabi_d2iz+0x48>
  40be34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40be38:	bf08      	it	eq
  40be3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40be3e:	4770      	bx	lr
  40be40:	f04f 0000 	mov.w	r0, #0
  40be44:	4770      	bx	lr
  40be46:	bf00      	nop

0040be48 <__aeabi_uldivmod>:
  40be48:	b953      	cbnz	r3, 40be60 <__aeabi_uldivmod+0x18>
  40be4a:	b94a      	cbnz	r2, 40be60 <__aeabi_uldivmod+0x18>
  40be4c:	2900      	cmp	r1, #0
  40be4e:	bf08      	it	eq
  40be50:	2800      	cmpeq	r0, #0
  40be52:	bf1c      	itt	ne
  40be54:	f04f 31ff 	movne.w	r1, #4294967295
  40be58:	f04f 30ff 	movne.w	r0, #4294967295
  40be5c:	f000 b97a 	b.w	40c154 <__aeabi_idiv0>
  40be60:	f1ad 0c08 	sub.w	ip, sp, #8
  40be64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40be68:	f000 f806 	bl	40be78 <__udivmoddi4>
  40be6c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40be70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40be74:	b004      	add	sp, #16
  40be76:	4770      	bx	lr

0040be78 <__udivmoddi4>:
  40be78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40be7c:	468c      	mov	ip, r1
  40be7e:	460d      	mov	r5, r1
  40be80:	4604      	mov	r4, r0
  40be82:	9e08      	ldr	r6, [sp, #32]
  40be84:	2b00      	cmp	r3, #0
  40be86:	d151      	bne.n	40bf2c <__udivmoddi4+0xb4>
  40be88:	428a      	cmp	r2, r1
  40be8a:	4617      	mov	r7, r2
  40be8c:	d96d      	bls.n	40bf6a <__udivmoddi4+0xf2>
  40be8e:	fab2 fe82 	clz	lr, r2
  40be92:	f1be 0f00 	cmp.w	lr, #0
  40be96:	d00b      	beq.n	40beb0 <__udivmoddi4+0x38>
  40be98:	f1ce 0c20 	rsb	ip, lr, #32
  40be9c:	fa01 f50e 	lsl.w	r5, r1, lr
  40bea0:	fa20 fc0c 	lsr.w	ip, r0, ip
  40bea4:	fa02 f70e 	lsl.w	r7, r2, lr
  40bea8:	ea4c 0c05 	orr.w	ip, ip, r5
  40beac:	fa00 f40e 	lsl.w	r4, r0, lr
  40beb0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40beb4:	0c25      	lsrs	r5, r4, #16
  40beb6:	fbbc f8fa 	udiv	r8, ip, sl
  40beba:	fa1f f987 	uxth.w	r9, r7
  40bebe:	fb0a cc18 	mls	ip, sl, r8, ip
  40bec2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40bec6:	fb08 f309 	mul.w	r3, r8, r9
  40beca:	42ab      	cmp	r3, r5
  40becc:	d90a      	bls.n	40bee4 <__udivmoddi4+0x6c>
  40bece:	19ed      	adds	r5, r5, r7
  40bed0:	f108 32ff 	add.w	r2, r8, #4294967295
  40bed4:	f080 8123 	bcs.w	40c11e <__udivmoddi4+0x2a6>
  40bed8:	42ab      	cmp	r3, r5
  40beda:	f240 8120 	bls.w	40c11e <__udivmoddi4+0x2a6>
  40bede:	f1a8 0802 	sub.w	r8, r8, #2
  40bee2:	443d      	add	r5, r7
  40bee4:	1aed      	subs	r5, r5, r3
  40bee6:	b2a4      	uxth	r4, r4
  40bee8:	fbb5 f0fa 	udiv	r0, r5, sl
  40beec:	fb0a 5510 	mls	r5, sl, r0, r5
  40bef0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40bef4:	fb00 f909 	mul.w	r9, r0, r9
  40bef8:	45a1      	cmp	r9, r4
  40befa:	d909      	bls.n	40bf10 <__udivmoddi4+0x98>
  40befc:	19e4      	adds	r4, r4, r7
  40befe:	f100 33ff 	add.w	r3, r0, #4294967295
  40bf02:	f080 810a 	bcs.w	40c11a <__udivmoddi4+0x2a2>
  40bf06:	45a1      	cmp	r9, r4
  40bf08:	f240 8107 	bls.w	40c11a <__udivmoddi4+0x2a2>
  40bf0c:	3802      	subs	r0, #2
  40bf0e:	443c      	add	r4, r7
  40bf10:	eba4 0409 	sub.w	r4, r4, r9
  40bf14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40bf18:	2100      	movs	r1, #0
  40bf1a:	2e00      	cmp	r6, #0
  40bf1c:	d061      	beq.n	40bfe2 <__udivmoddi4+0x16a>
  40bf1e:	fa24 f40e 	lsr.w	r4, r4, lr
  40bf22:	2300      	movs	r3, #0
  40bf24:	6034      	str	r4, [r6, #0]
  40bf26:	6073      	str	r3, [r6, #4]
  40bf28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bf2c:	428b      	cmp	r3, r1
  40bf2e:	d907      	bls.n	40bf40 <__udivmoddi4+0xc8>
  40bf30:	2e00      	cmp	r6, #0
  40bf32:	d054      	beq.n	40bfde <__udivmoddi4+0x166>
  40bf34:	2100      	movs	r1, #0
  40bf36:	e886 0021 	stmia.w	r6, {r0, r5}
  40bf3a:	4608      	mov	r0, r1
  40bf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bf40:	fab3 f183 	clz	r1, r3
  40bf44:	2900      	cmp	r1, #0
  40bf46:	f040 808e 	bne.w	40c066 <__udivmoddi4+0x1ee>
  40bf4a:	42ab      	cmp	r3, r5
  40bf4c:	d302      	bcc.n	40bf54 <__udivmoddi4+0xdc>
  40bf4e:	4282      	cmp	r2, r0
  40bf50:	f200 80fa 	bhi.w	40c148 <__udivmoddi4+0x2d0>
  40bf54:	1a84      	subs	r4, r0, r2
  40bf56:	eb65 0503 	sbc.w	r5, r5, r3
  40bf5a:	2001      	movs	r0, #1
  40bf5c:	46ac      	mov	ip, r5
  40bf5e:	2e00      	cmp	r6, #0
  40bf60:	d03f      	beq.n	40bfe2 <__udivmoddi4+0x16a>
  40bf62:	e886 1010 	stmia.w	r6, {r4, ip}
  40bf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bf6a:	b912      	cbnz	r2, 40bf72 <__udivmoddi4+0xfa>
  40bf6c:	2701      	movs	r7, #1
  40bf6e:	fbb7 f7f2 	udiv	r7, r7, r2
  40bf72:	fab7 fe87 	clz	lr, r7
  40bf76:	f1be 0f00 	cmp.w	lr, #0
  40bf7a:	d134      	bne.n	40bfe6 <__udivmoddi4+0x16e>
  40bf7c:	1beb      	subs	r3, r5, r7
  40bf7e:	0c3a      	lsrs	r2, r7, #16
  40bf80:	fa1f fc87 	uxth.w	ip, r7
  40bf84:	2101      	movs	r1, #1
  40bf86:	fbb3 f8f2 	udiv	r8, r3, r2
  40bf8a:	0c25      	lsrs	r5, r4, #16
  40bf8c:	fb02 3318 	mls	r3, r2, r8, r3
  40bf90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40bf94:	fb0c f308 	mul.w	r3, ip, r8
  40bf98:	42ab      	cmp	r3, r5
  40bf9a:	d907      	bls.n	40bfac <__udivmoddi4+0x134>
  40bf9c:	19ed      	adds	r5, r5, r7
  40bf9e:	f108 30ff 	add.w	r0, r8, #4294967295
  40bfa2:	d202      	bcs.n	40bfaa <__udivmoddi4+0x132>
  40bfa4:	42ab      	cmp	r3, r5
  40bfa6:	f200 80d1 	bhi.w	40c14c <__udivmoddi4+0x2d4>
  40bfaa:	4680      	mov	r8, r0
  40bfac:	1aed      	subs	r5, r5, r3
  40bfae:	b2a3      	uxth	r3, r4
  40bfb0:	fbb5 f0f2 	udiv	r0, r5, r2
  40bfb4:	fb02 5510 	mls	r5, r2, r0, r5
  40bfb8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40bfbc:	fb0c fc00 	mul.w	ip, ip, r0
  40bfc0:	45a4      	cmp	ip, r4
  40bfc2:	d907      	bls.n	40bfd4 <__udivmoddi4+0x15c>
  40bfc4:	19e4      	adds	r4, r4, r7
  40bfc6:	f100 33ff 	add.w	r3, r0, #4294967295
  40bfca:	d202      	bcs.n	40bfd2 <__udivmoddi4+0x15a>
  40bfcc:	45a4      	cmp	ip, r4
  40bfce:	f200 80b8 	bhi.w	40c142 <__udivmoddi4+0x2ca>
  40bfd2:	4618      	mov	r0, r3
  40bfd4:	eba4 040c 	sub.w	r4, r4, ip
  40bfd8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40bfdc:	e79d      	b.n	40bf1a <__udivmoddi4+0xa2>
  40bfde:	4631      	mov	r1, r6
  40bfe0:	4630      	mov	r0, r6
  40bfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bfe6:	f1ce 0420 	rsb	r4, lr, #32
  40bfea:	fa05 f30e 	lsl.w	r3, r5, lr
  40bfee:	fa07 f70e 	lsl.w	r7, r7, lr
  40bff2:	fa20 f804 	lsr.w	r8, r0, r4
  40bff6:	0c3a      	lsrs	r2, r7, #16
  40bff8:	fa25 f404 	lsr.w	r4, r5, r4
  40bffc:	ea48 0803 	orr.w	r8, r8, r3
  40c000:	fbb4 f1f2 	udiv	r1, r4, r2
  40c004:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40c008:	fb02 4411 	mls	r4, r2, r1, r4
  40c00c:	fa1f fc87 	uxth.w	ip, r7
  40c010:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40c014:	fb01 f30c 	mul.w	r3, r1, ip
  40c018:	42ab      	cmp	r3, r5
  40c01a:	fa00 f40e 	lsl.w	r4, r0, lr
  40c01e:	d909      	bls.n	40c034 <__udivmoddi4+0x1bc>
  40c020:	19ed      	adds	r5, r5, r7
  40c022:	f101 30ff 	add.w	r0, r1, #4294967295
  40c026:	f080 808a 	bcs.w	40c13e <__udivmoddi4+0x2c6>
  40c02a:	42ab      	cmp	r3, r5
  40c02c:	f240 8087 	bls.w	40c13e <__udivmoddi4+0x2c6>
  40c030:	3902      	subs	r1, #2
  40c032:	443d      	add	r5, r7
  40c034:	1aeb      	subs	r3, r5, r3
  40c036:	fa1f f588 	uxth.w	r5, r8
  40c03a:	fbb3 f0f2 	udiv	r0, r3, r2
  40c03e:	fb02 3310 	mls	r3, r2, r0, r3
  40c042:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c046:	fb00 f30c 	mul.w	r3, r0, ip
  40c04a:	42ab      	cmp	r3, r5
  40c04c:	d907      	bls.n	40c05e <__udivmoddi4+0x1e6>
  40c04e:	19ed      	adds	r5, r5, r7
  40c050:	f100 38ff 	add.w	r8, r0, #4294967295
  40c054:	d26f      	bcs.n	40c136 <__udivmoddi4+0x2be>
  40c056:	42ab      	cmp	r3, r5
  40c058:	d96d      	bls.n	40c136 <__udivmoddi4+0x2be>
  40c05a:	3802      	subs	r0, #2
  40c05c:	443d      	add	r5, r7
  40c05e:	1aeb      	subs	r3, r5, r3
  40c060:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40c064:	e78f      	b.n	40bf86 <__udivmoddi4+0x10e>
  40c066:	f1c1 0720 	rsb	r7, r1, #32
  40c06a:	fa22 f807 	lsr.w	r8, r2, r7
  40c06e:	408b      	lsls	r3, r1
  40c070:	fa05 f401 	lsl.w	r4, r5, r1
  40c074:	ea48 0303 	orr.w	r3, r8, r3
  40c078:	fa20 fe07 	lsr.w	lr, r0, r7
  40c07c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40c080:	40fd      	lsrs	r5, r7
  40c082:	ea4e 0e04 	orr.w	lr, lr, r4
  40c086:	fbb5 f9fc 	udiv	r9, r5, ip
  40c08a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40c08e:	fb0c 5519 	mls	r5, ip, r9, r5
  40c092:	fa1f f883 	uxth.w	r8, r3
  40c096:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40c09a:	fb09 f408 	mul.w	r4, r9, r8
  40c09e:	42ac      	cmp	r4, r5
  40c0a0:	fa02 f201 	lsl.w	r2, r2, r1
  40c0a4:	fa00 fa01 	lsl.w	sl, r0, r1
  40c0a8:	d908      	bls.n	40c0bc <__udivmoddi4+0x244>
  40c0aa:	18ed      	adds	r5, r5, r3
  40c0ac:	f109 30ff 	add.w	r0, r9, #4294967295
  40c0b0:	d243      	bcs.n	40c13a <__udivmoddi4+0x2c2>
  40c0b2:	42ac      	cmp	r4, r5
  40c0b4:	d941      	bls.n	40c13a <__udivmoddi4+0x2c2>
  40c0b6:	f1a9 0902 	sub.w	r9, r9, #2
  40c0ba:	441d      	add	r5, r3
  40c0bc:	1b2d      	subs	r5, r5, r4
  40c0be:	fa1f fe8e 	uxth.w	lr, lr
  40c0c2:	fbb5 f0fc 	udiv	r0, r5, ip
  40c0c6:	fb0c 5510 	mls	r5, ip, r0, r5
  40c0ca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40c0ce:	fb00 f808 	mul.w	r8, r0, r8
  40c0d2:	45a0      	cmp	r8, r4
  40c0d4:	d907      	bls.n	40c0e6 <__udivmoddi4+0x26e>
  40c0d6:	18e4      	adds	r4, r4, r3
  40c0d8:	f100 35ff 	add.w	r5, r0, #4294967295
  40c0dc:	d229      	bcs.n	40c132 <__udivmoddi4+0x2ba>
  40c0de:	45a0      	cmp	r8, r4
  40c0e0:	d927      	bls.n	40c132 <__udivmoddi4+0x2ba>
  40c0e2:	3802      	subs	r0, #2
  40c0e4:	441c      	add	r4, r3
  40c0e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40c0ea:	eba4 0408 	sub.w	r4, r4, r8
  40c0ee:	fba0 8902 	umull	r8, r9, r0, r2
  40c0f2:	454c      	cmp	r4, r9
  40c0f4:	46c6      	mov	lr, r8
  40c0f6:	464d      	mov	r5, r9
  40c0f8:	d315      	bcc.n	40c126 <__udivmoddi4+0x2ae>
  40c0fa:	d012      	beq.n	40c122 <__udivmoddi4+0x2aa>
  40c0fc:	b156      	cbz	r6, 40c114 <__udivmoddi4+0x29c>
  40c0fe:	ebba 030e 	subs.w	r3, sl, lr
  40c102:	eb64 0405 	sbc.w	r4, r4, r5
  40c106:	fa04 f707 	lsl.w	r7, r4, r7
  40c10a:	40cb      	lsrs	r3, r1
  40c10c:	431f      	orrs	r7, r3
  40c10e:	40cc      	lsrs	r4, r1
  40c110:	6037      	str	r7, [r6, #0]
  40c112:	6074      	str	r4, [r6, #4]
  40c114:	2100      	movs	r1, #0
  40c116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c11a:	4618      	mov	r0, r3
  40c11c:	e6f8      	b.n	40bf10 <__udivmoddi4+0x98>
  40c11e:	4690      	mov	r8, r2
  40c120:	e6e0      	b.n	40bee4 <__udivmoddi4+0x6c>
  40c122:	45c2      	cmp	sl, r8
  40c124:	d2ea      	bcs.n	40c0fc <__udivmoddi4+0x284>
  40c126:	ebb8 0e02 	subs.w	lr, r8, r2
  40c12a:	eb69 0503 	sbc.w	r5, r9, r3
  40c12e:	3801      	subs	r0, #1
  40c130:	e7e4      	b.n	40c0fc <__udivmoddi4+0x284>
  40c132:	4628      	mov	r0, r5
  40c134:	e7d7      	b.n	40c0e6 <__udivmoddi4+0x26e>
  40c136:	4640      	mov	r0, r8
  40c138:	e791      	b.n	40c05e <__udivmoddi4+0x1e6>
  40c13a:	4681      	mov	r9, r0
  40c13c:	e7be      	b.n	40c0bc <__udivmoddi4+0x244>
  40c13e:	4601      	mov	r1, r0
  40c140:	e778      	b.n	40c034 <__udivmoddi4+0x1bc>
  40c142:	3802      	subs	r0, #2
  40c144:	443c      	add	r4, r7
  40c146:	e745      	b.n	40bfd4 <__udivmoddi4+0x15c>
  40c148:	4608      	mov	r0, r1
  40c14a:	e708      	b.n	40bf5e <__udivmoddi4+0xe6>
  40c14c:	f1a8 0802 	sub.w	r8, r8, #2
  40c150:	443d      	add	r5, r7
  40c152:	e72b      	b.n	40bfac <__udivmoddi4+0x134>

0040c154 <__aeabi_idiv0>:
  40c154:	4770      	bx	lr
  40c156:	bf00      	nop
  40c158:	00706d74 	.word	0x00706d74
  40c15c:	23232323 	.word	0x23232323
  40c160:	23232323 	.word	0x23232323
  40c164:	23232323 	.word	0x23232323
  40c168:	23232323 	.word	0x23232323
  40c16c:	23232323 	.word	0x23232323
  40c170:	23232323 	.word	0x23232323
  40c174:	23232323 	.word	0x23232323
  40c178:	23232323 	.word	0x23232323
  40c17c:	23232323 	.word	0x23232323
  40c180:	23232323 	.word	0x23232323
  40c184:	23232323 	.word	0x23232323
  40c188:	23232323 	.word	0x23232323
  40c18c:	00002323 	.word	0x00002323
  40c190:	342d4b44 	.word	0x342d4b44
  40c194:	35303632 	.word	0x35303632
  40c198:	74616420 	.word	0x74616420
  40c19c:	74732061 	.word	0x74732061
  40c1a0:	6d616572 	.word	0x6d616572
  40c1a4:	20676e69 	.word	0x20676e69
  40c1a8:	6c707061 	.word	0x6c707061
  40c1ac:	74616369 	.word	0x74616369
  40c1b0:	006e6f69 	.word	0x006e6f69
  40c1b4:	67696c53 	.word	0x67696c53
  40c1b8:	796c7468 	.word	0x796c7468
  40c1bc:	646f6d20 	.word	0x646f6d20
  40c1c0:	65696669 	.word	0x65696669
  40c1c4:	72662064 	.word	0x72662064
  40c1c8:	74206d6f 	.word	0x74206d6f
  40c1cc:	6f206568 	.word	0x6f206568
  40c1d0:	63696666 	.word	0x63696666
  40c1d4:	206c6169 	.word	0x206c6169
  40c1d8:	6d617865 	.word	0x6d617865
  40c1dc:	20656c70 	.word	0x20656c70
  40c1e0:	61786528 	.word	0x61786528
  40c1e4:	656c706d 	.word	0x656c706d
  40c1e8:	7761722d 	.word	0x7761722d
  40c1ec:	7461642d 	.word	0x7461642d
  40c1f0:	65722d61 	.word	0x65722d61
  40c1f4:	74736967 	.word	0x74736967
  40c1f8:	29737265 	.word	0x29737265
  40c1fc:	00000000 	.word	0x00000000
  40c200:	736e694a 	.word	0x736e694a
  40c204:	50206e75 	.word	0x50206e75
  40c208:	206b7261 	.word	0x206b7261
  40c20c:	617a7a28 	.word	0x617a7a28
  40c210:	696a676e 	.word	0x696a676e
  40c214:	6e75736e 	.word	0x6e75736e
  40c218:	65733340 	.word	0x65733340
  40c21c:	646e6f63 	.word	0x646e6f63
  40c220:	6f632e7a 	.word	0x6f632e7a
  40c224:	0000296d 	.word	0x0000296d
  40c228:	00000020 	.word	0x00000020
  40c22c:	72727543 	.word	0x72727543
  40c230:	20746e65 	.word	0x20746e65
  40c234:	75746573 	.word	0x75746573
  40c238:	203a2070 	.word	0x203a2070
  40c23c:	00000000 	.word	0x00000000
  40c240:	63634120 	.word	0x63634120
  40c244:	52534620 	.word	0x52534620
  40c248:	32203a20 	.word	0x32203a20
  40c24c:	00000067 	.word	0x00000067
  40c250:	63634120 	.word	0x63634120
  40c254:	52444f20 	.word	0x52444f20
  40c258:	32203a20 	.word	0x32203a20
  40c25c:	7a483030 	.word	0x7a483030
  40c260:	00000000 	.word	0x00000000
  40c264:	72794720 	.word	0x72794720
  40c268:	52534620 	.word	0x52534620
  40c26c:	31203a20 	.word	0x31203a20
  40c270:	70643532 	.word	0x70643532
  40c274:	00000073 	.word	0x00000073
  40c278:	72794720 	.word	0x72794720
  40c27c:	52444f20 	.word	0x52444f20
  40c280:	32203a20 	.word	0x32203a20
  40c284:	7a483030 	.word	0x7a483030
  40c288:	00000000 	.word	0x00000000
  40c28c:	7074754f 	.word	0x7074754f
  40c290:	66207475 	.word	0x66207475
  40c294:	616d726f 	.word	0x616d726f
  40c298:	203a2074 	.word	0x203a2074
  40c29c:	6d69745b 	.word	0x6d69745b
  40c2a0:	61747365 	.word	0x61747365
  40c2a4:	4120706d 	.word	0x4120706d
  40c2a8:	20586363 	.word	0x20586363
  40c2ac:	59636341 	.word	0x59636341
  40c2b0:	63634120 	.word	0x63634120
  40c2b4:	6554205a 	.word	0x6554205a
  40c2b8:	4720706d 	.word	0x4720706d
  40c2bc:	20587279 	.word	0x20587279
  40c2c0:	59727947 	.word	0x59727947
  40c2c4:	72794720 	.word	0x72794720
  40c2c8:	0000005a 	.word	0x0000005a
  40c2cc:	6f727265 	.word	0x6f727265
  40c2d0:	68772072 	.word	0x68772072
  40c2d4:	20656c69 	.word	0x20656c69
  40c2d8:	74746573 	.word	0x74746573
  40c2dc:	20676e69 	.word	0x20676e69
  40c2e0:	49207075 	.word	0x49207075
  40c2e4:	6420564e 	.word	0x6420564e
  40c2e8:	63697665 	.word	0x63697665
  40c2ec:	00000065 	.word	0x00000065
  40c2f0:	6f727265 	.word	0x6f727265
  40c2f4:	68772072 	.word	0x68772072
  40c2f8:	20656c69 	.word	0x20656c69
  40c2fc:	666e6f63 	.word	0x666e6f63
  40c300:	72756769 	.word	0x72756769
  40c304:	20676e69 	.word	0x20676e69
  40c308:	20564e49 	.word	0x20564e49
  40c30c:	69766564 	.word	0x69766564
  40c310:	00006563 	.word	0x00006563
  40c314:	6f727265 	.word	0x6f727265
  40c318:	68772072 	.word	0x68772072
  40c31c:	20656c69 	.word	0x20656c69
  40c320:	636f7270 	.word	0x636f7270
  40c324:	69737365 	.word	0x69737365
  40c328:	4620676e 	.word	0x4620676e
  40c32c:	004f4649 	.word	0x004f4649
  40c330:	203a7325 	.word	0x203a7325
  40c334:	6f727265 	.word	0x6f727265
  40c338:	64252072 	.word	0x64252072
  40c33c:	73252820 	.word	0x73252820
  40c340:	000a0d29 	.word	0x000a0d29
  40c344:	00000a0d 	.word	0x00000a0d
  40c348:	74696e49 	.word	0x74696e49
  40c34c:	696c6169 	.word	0x696c6169
  40c350:	4920657a 	.word	0x4920657a
  40c354:	32346d63 	.word	0x32346d63
  40c358:	00787836 	.word	0x00787836
  40c35c:	20212121 	.word	0x20212121
  40c360:	4f525245 	.word	0x4f525245
  40c364:	203a2052 	.word	0x203a2052
  40c368:	6c696166 	.word	0x6c696166
  40c36c:	74206465 	.word	0x74206465
  40c370:	6e69206f 	.word	0x6e69206f
  40c374:	61697469 	.word	0x61697469
  40c378:	657a696c 	.word	0x657a696c
  40c37c:	6d634920 	.word	0x6d634920
  40c380:	78363234 	.word	0x78363234
  40c384:	00002e78 	.word	0x00002e78
  40c388:	63656843 	.word	0x63656843
  40c38c:	6349206b 	.word	0x6349206b
  40c390:	3632346d 	.word	0x3632346d
  40c394:	77207878 	.word	0x77207878
  40c398:	6d616f68 	.word	0x6d616f68
  40c39c:	61762069 	.word	0x61762069
  40c3a0:	0065756c 	.word	0x0065756c
  40c3a4:	20212121 	.word	0x20212121
  40c3a8:	4f525245 	.word	0x4f525245
  40c3ac:	203a2052 	.word	0x203a2052
  40c3b0:	6c696166 	.word	0x6c696166
  40c3b4:	74206465 	.word	0x74206465
  40c3b8:	6572206f 	.word	0x6572206f
  40c3bc:	49206461 	.word	0x49206461
  40c3c0:	32346d63 	.word	0x32346d63
  40c3c4:	20787836 	.word	0x20787836
  40c3c8:	616f6877 	.word	0x616f6877
  40c3cc:	7620696d 	.word	0x7620696d
  40c3d0:	65756c61 	.word	0x65756c61
  40c3d4:	0000002e 	.word	0x0000002e
  40c3d8:	20212121 	.word	0x20212121
  40c3dc:	4f525245 	.word	0x4f525245
  40c3e0:	203a2052 	.word	0x203a2052
  40c3e4:	64616220 	.word	0x64616220
  40c3e8:	4f485720 	.word	0x4f485720
  40c3ec:	20494d41 	.word	0x20494d41
  40c3f0:	756c6176 	.word	0x756c6176
  40c3f4:	47202e65 	.word	0x47202e65
  40c3f8:	3020746f 	.word	0x3020746f
  40c3fc:	32302578 	.word	0x32302578
  40c400:	65282078 	.word	0x65282078
  40c404:	63657078 	.word	0x63657078
  40c408:	3a646574 	.word	0x3a646574
  40c40c:	25783020 	.word	0x25783020
  40c410:	29783230 	.word	0x29783230
  40c414:	00000000 	.word	0x00000000
  40c418:	25207525 	.word	0x25207525
  40c41c:	64252064 	.word	0x64252064
  40c420:	20642520 	.word	0x20642520
  40c424:	25206425 	.word	0x25206425
  40c428:	64252064 	.word	0x64252064
  40c42c:	00642520 	.word	0x00642520
  40c430:	4e207525 	.word	0x4e207525
  40c434:	414e2041 	.word	0x414e2041
  40c438:	20414e20 	.word	0x20414e20
  40c43c:	25206425 	.word	0x25206425
  40c440:	64252064 	.word	0x64252064
  40c444:	00642520 	.word	0x00642520
  40c448:	25207525 	.word	0x25207525
  40c44c:	64252064 	.word	0x64252064
  40c450:	20642520 	.word	0x20642520
  40c454:	4e206425 	.word	0x4e206425
  40c458:	414e2041 	.word	0x414e2041
  40c45c:	00414e20 	.word	0x00414e20
  40c460:	4e207525 	.word	0x4e207525
  40c464:	414e2041 	.word	0x414e2041
  40c468:	20414e20 	.word	0x20414e20
  40c46c:	4e20414e 	.word	0x4e20414e
  40c470:	414e2041 	.word	0x414e2041
  40c474:	00414e20 	.word	0x00414e20
  40c478:	2e302e32 	.word	0x2e302e32
  40c47c:	00000031 	.word	0x00000031
  40c480:	00010000 	.word	0x00010000
  40c484:	01010101 	.word	0x01010101
  40c488:	01010101 	.word	0x01010101
  40c48c:	00000101 	.word	0x00000101
  40c490:	63637553 	.word	0x63637553
  40c494:	00737365 	.word	0x00737365
  40c498:	70736e55 	.word	0x70736e55
  40c49c:	66696365 	.word	0x66696365
  40c4a0:	20646569 	.word	0x20646569
  40c4a4:	6f727265 	.word	0x6f727265
  40c4a8:	00000072 	.word	0x00000072
  40c4ac:	20746f4e 	.word	0x20746f4e
  40c4b0:	6c706d69 	.word	0x6c706d69
  40c4b4:	6e656d65 	.word	0x6e656d65
  40c4b8:	00646574 	.word	0x00646574
  40c4bc:	6e617254 	.word	0x6e617254
  40c4c0:	726f7073 	.word	0x726f7073
  40c4c4:	72652074 	.word	0x72652074
  40c4c8:	00726f72 	.word	0x00726f72
  40c4cc:	656d6954 	.word	0x656d6954
  40c4d0:	2c74756f 	.word	0x2c74756f
  40c4d4:	74636120 	.word	0x74636120
  40c4d8:	206e6f69 	.word	0x206e6f69
  40c4dc:	20646964 	.word	0x20646964
  40c4e0:	20746f6e 	.word	0x20746f6e
  40c4e4:	706d6f63 	.word	0x706d6f63
  40c4e8:	6574656c 	.word	0x6574656c
  40c4ec:	206e6920 	.word	0x206e6920
  40c4f0:	656d6974 	.word	0x656d6974
  40c4f4:	00000000 	.word	0x00000000
  40c4f8:	6e6f7257 	.word	0x6e6f7257
  40c4fc:	69732067 	.word	0x69732067
  40c500:	6520657a 	.word	0x6520657a
  40c504:	726f7272 	.word	0x726f7272
  40c508:	00000000 	.word	0x00000000
  40c50c:	7265704f 	.word	0x7265704f
  40c510:	6e697461 	.word	0x6e697461
  40c514:	79732067 	.word	0x79732067
  40c518:	6d657473 	.word	0x6d657473
  40c51c:	69616620 	.word	0x69616620
  40c520:	6572756c 	.word	0x6572756c
  40c524:	00000000 	.word	0x00000000
  40c528:	75706e49 	.word	0x75706e49
  40c52c:	754f2f74 	.word	0x754f2f74
  40c530:	74757074 	.word	0x74757074
  40c534:	72726520 	.word	0x72726520
  40c538:	0000726f 	.word	0x0000726f
  40c53c:	20646142 	.word	0x20646142
  40c540:	6f6c6c61 	.word	0x6f6c6c61
  40c544:	69746163 	.word	0x69746163
  40c548:	00006e6f 	.word	0x00006e6f
  40c54c:	64726148 	.word	0x64726148
  40c550:	65726177 	.word	0x65726177
  40c554:	72726520 	.word	0x72726520
  40c558:	0000726f 	.word	0x0000726f
  40c55c:	61766e49 	.word	0x61766e49
  40c560:	2064696c 	.word	0x2064696c
  40c564:	75677261 	.word	0x75677261
  40c568:	746e656d 	.word	0x746e656d
  40c56c:	00000073 	.word	0x00000073
  40c570:	78656e55 	.word	0x78656e55
  40c574:	74636570 	.word	0x74636570
  40c578:	65206465 	.word	0x65206465
  40c57c:	726f7272 	.word	0x726f7272
  40c580:	00000000 	.word	0x00000000
  40c584:	61766e49 	.word	0x61766e49
  40c588:	2064696c 	.word	0x2064696c
  40c58c:	656c6966 	.word	0x656c6966
  40c590:	726f6620 	.word	0x726f6620
  40c594:	0074616d 	.word	0x0074616d
  40c598:	61766e49 	.word	0x61766e49
  40c59c:	2064696c 	.word	0x2064696c
  40c5a0:	656c6966 	.word	0x656c6966
  40c5a4:	74617020 	.word	0x74617020
  40c5a8:	00000068 	.word	0x00000068
  40c5ac:	6e6b6e55 	.word	0x6e6b6e55
  40c5b0:	206e776f 	.word	0x206e776f
  40c5b4:	67616d69 	.word	0x67616d69
  40c5b8:	79742065 	.word	0x79742065
  40c5bc:	00006570 	.word	0x00006570
  40c5c0:	63746157 	.word	0x63746157
  40c5c4:	676f6468 	.word	0x676f6468
  40c5c8:	72726520 	.word	0x72726520
  40c5cc:	0000726f 	.word	0x0000726f
  40c5d0:	6e6b6e55 	.word	0x6e6b6e55
  40c5d4:	206e776f 	.word	0x206e776f
  40c5d8:	6f727265 	.word	0x6f727265
  40c5dc:	00000072 	.word	0x00000072

0040c5e0 <_global_impure_ptr>:
  40c5e0:	200024f0 00464e49 00666e69 004e414e     .$. INF.inf.NAN.
  40c5f0:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40c600:	46454443 00000000 33323130 37363534     CDEF....01234567
  40c610:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40c620:	0000296c 00000030                       l)..0...

0040c628 <blanks.8346>:
  40c628:	20202020 20202020 20202020 20202020                     

0040c638 <zeroes.8347>:
  40c638:	30303030 30303030 30303030 30303030     0000000000000000
  40c648:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0040c658 <__mprec_bigtens>:
  40c658:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40c668:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40c678:	7f73bf3c 75154fdd                       <.s..O.u

0040c680 <__mprec_tens>:
  40c680:	00000000 3ff00000 00000000 40240000     .......?......$@
  40c690:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40c6a0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40c6b0:	00000000 412e8480 00000000 416312d0     .......A......cA
  40c6c0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40c6d0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40c6e0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40c6f0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40c700:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40c710:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40c720:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40c730:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40c740:	79d99db4 44ea7843                       ...yCx.D

0040c748 <p05.7178>:
  40c748:	00000005 00000019 0000007d 00000043     ........}...C...
  40c758:	49534f50 00000058 0000002e              POSIX.......

0040c764 <_ctype_>:
  40c764:	20202000 20202020 28282020 20282828     .         ((((( 
  40c774:	20202020 20202020 20202020 20202020                     
  40c784:	10108820 10101010 10101010 10101010      ...............
  40c794:	04040410 04040404 10040404 10101010     ................
  40c7a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40c7b4:	01010101 01010101 01010101 10101010     ................
  40c7c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40c7d4:	02020202 02020202 02020202 10101010     ................
  40c7e4:	00000020 00000000 00000000 00000000      ...............
	...

0040c868 <_init>:
  40c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c86a:	bf00      	nop
  40c86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c86e:	bc08      	pop	{r3}
  40c870:	469e      	mov	lr, r3
  40c872:	4770      	bx	lr

0040c874 <__init_array_start>:
  40c874:	0040a349 	.word	0x0040a349

0040c878 <__frame_dummy_init_array_entry>:
  40c878:	0040016d                                m.@.

0040c87c <_fini>:
  40c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40c87e:	bf00      	nop
  40c880:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40c882:	bc08      	pop	{r3}
  40c884:	469e      	mov	lr, r3
  40c886:	4770      	bx	lr

0040c888 <__fini_array_start>:
  40c888:	00400149 	.word	0x00400149

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || \
	   SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAMS70 || SAME70)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	683a      	ldr	r2, [r7, #0]
20000052:	4413      	add	r3, r2
20000054:	69fa      	ldr	r2, [r7, #28]
20000056:	0092      	lsls	r2, r2, #2
20000058:	69b9      	ldr	r1, [r7, #24]
2000005a:	440a      	add	r2, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	f85d 7b04 	ldr.w	r7, [sp], #4
200000a2:	4770      	bx	lr

200000a4 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a4:	b480      	push	{r7}
200000a6:	b083      	sub	sp, #12
200000a8:	af00      	add	r7, sp, #0
200000aa:	6078      	str	r0, [r7, #4]
200000ac:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ae:	687b      	ldr	r3, [r7, #4]
200000b0:	683a      	ldr	r2, [r7, #0]
200000b2:	601a      	str	r2, [r3, #0]
}
200000b4:	bf00      	nop
200000b6:	370c      	adds	r7, #12
200000b8:	46bd      	mov	sp, r7
200000ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200000be:	4770      	bx	lr

200000c0 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000c0:	b480      	push	{r7}
200000c2:	b085      	sub	sp, #20
200000c4:	af00      	add	r7, sp, #0
200000c6:	6078      	str	r0, [r7, #4]
200000c8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	683a      	ldr	r2, [r7, #0]
200000ce:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000d0:	687b      	ldr	r3, [r7, #4]
200000d2:	689b      	ldr	r3, [r3, #8]
200000d4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d6:	68fb      	ldr	r3, [r7, #12]
200000d8:	f003 0301 	and.w	r3, r3, #1
200000dc:	2b01      	cmp	r3, #1
200000de:	d1f7      	bne.n	200000d0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000e0:	68fb      	ldr	r3, [r7, #12]
200000e2:	f003 030e 	and.w	r3, r3, #14
}
200000e6:	4618      	mov	r0, r3
200000e8:	3714      	adds	r7, #20
200000ea:	46bd      	mov	sp, r7
200000ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200000f0:	4770      	bx	lr
	...

200000f4 <gm>:
200000f4:	1000 400e 000c 0000 0023 0000 0008 0000     ...@....#.......
20000104:	0000 2800 0070 0000 000c 0000 0000 0000     ...(p...........
20000114:	0000 0000 1000 400e 000c 0000 002f 0000     .......@..../...
20000124:	8000 0000 0000 2800 0070 0000 000c 0000     .......(p.......
	...
2000013c:	0e00 400e 000b 0000 001d 0000 0000 2000     ...@........... 
2000014c:	0000 2800 0070 0000 000b 0000 0000 0000     ...(p...........
2000015c:	0000 0000 0e00 400e 000b 0000 000f 0000     .......@........
2000016c:	8000 0000 0000 2800 0070 0000 000b 0000     .......(p.......
	...
20000184:	0e00 400e 000b 0000 0002 0000 0004 0000     ...@............
20000194:	0000 2800 0059 0000 000b 0000 0000 0000     ...(Y...........
200001a4:	0000 0000 0e00 400e 000b 0000 0011 0000     .......@........
200001b4:	0000 0002 0000 3000 0000 0000 000b 0000     .......0........
	...

200001cc <i2cm>:
200001cc:	0000 0000 c600 4001 c000 4001 0029 0000     .......@...@)...
200001dc:	0000 0000 0028 0000 0000 0000 1a80 0006     ....(...........

200001ec <sm>:
200001ec:	8400 4000 0000 0000 8000 4000 0000 0000     ...@.......@....
200001fc:	0001 0000 0000 0000 0140 0000 000e 0000     ........@.......
2000020c:	0000 0000 000d 0000 0000 0000 000c 0000     ................
2000021c:	0000 0000 000b 0000 0000 0000 0000 0000     ................
	...
20001268:	0015 0000 0000 0000 0000 0000 0000 0000     ................
20001278:	8400 4000 0000 0000 8000 4000 0001 0000     ...@.......@....
20001288:	0001 0000 0000 0000 0140 0000 000e 0000     ........@.......
20001298:	0000 0000 000d 0000 0000 0000 000c 0000     ................
200012a8:	0000 0000 0005 0000 0001 0000 0000 0000     ................
	...
200022f4:	0015 0000 0000 0000 0000 0000 0000 0000     ................

20002304 <tm>:
20002304:	0000 4001 0001 0000 0018 0000 8004 0046     ...@..........F.
20002314:	7fff 0000 0000 0000 0000 0000 0000 0000     ................
20002324:	0018 0000 4451 0040 0000 4001 0002 0000     ....QD@....@....
20002334:	0019 0000 8004 0000 0000 0000 0000 0000     ................
	...
2000234c:	0019 0000 4469 0040 4000 4001 0000 0000     ....iD@..@.@....
2000235c:	001a 0000 8004 0000 0000 0000 0000 0000     ................
	...
20002374:	001a 0000 4481 0040 4000 4001 0001 0000     .....D@..@.@....
20002384:	001b 0000 8004 0000 0000 0000 0000 0000     ................
	...
2000239c:	001b 0000 4499 0040 4000 4001 0002 0000     .....D@..@.@....
200023ac:	001c 0000 8004 0000 0000 0000 0000 0000     ................
	...
200023c4:	001c 0000 44b1 0040 0000 4001 0000 0000     .....D@....@....
200023d4:	0017 0000 8005 0000 0000 0000 0000 0000     ................
	...
200023ec:	0017 0000 442d 0040                         ....-D@.

200023f4 <um>:
200023f4:	c200 4000 0000 0000 0008 0000 0008 0000     ...@............
20002404:	0000 0000 0200 0000 0000 0000 0000 0000     ................
20002414:	0400 0000 0000 0000 0000 0000 0000 0400     ................
	...
2000242c:	0000 0200 0000 0000 0000 0000 0000 0000     ................
	...
20002450:	4200 4003 0000 0000 0007 0000 0007 0000     .B.@............
20002460:	0000 0000 0000 0800 0001 0000 0000 0000     ................
20002470:	0000 1000 0001 0000 ffff ffff 0000 0000     ................
20002480:	0000 0000 ffff ffff 0000 0000 0000 0000     ................
	...

200024ac <um>:
200024ac:	0000 0000 404c 2000 0100 0000 0000 0000     ....L@. ........
200024bc:	384c 2000 0040 07c0 0000 0000 0001 0000     L8. @...........
200024cc:	434c 2000 0040 0000 0000 0000 414c 2000     LC. @.......LA. 
200024dc:	0040 01c0 0000 0000                         @.......

200024e4 <g_interrupt_enabled>:
200024e4:	0001 0000                                   ....

200024e8 <SystemCoreClock>:
200024e8:	1200 007a                                   ..z.

200024ec <_impure_ptr>:
200024ec:	24f0 2000                                   .$. 

200024f0 <impure_data>:
200024f0:	0000 0000 27dc 2000 2844 2000 28ac 2000     .....'. D(. .(. 
	...
20002598:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200025a8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20002918 <__malloc_av_>:
	...
20002920:	2918 2000 2918 2000 2920 2000 2920 2000     .). .).  ).  ). 
20002930:	2928 2000 2928 2000 2930 2000 2930 2000     (). (). 0). 0). 
20002940:	2938 2000 2938 2000 2940 2000 2940 2000     8). 8). @). @). 
20002950:	2948 2000 2948 2000 2950 2000 2950 2000     H). H). P). P). 
20002960:	2958 2000 2958 2000 2960 2000 2960 2000     X). X). `). `). 
20002970:	2968 2000 2968 2000 2970 2000 2970 2000     h). h). p). p). 
20002980:	2978 2000 2978 2000 2980 2000 2980 2000     x). x). .). .). 
20002990:	2988 2000 2988 2000 2990 2000 2990 2000     .). .). .). .). 
200029a0:	2998 2000 2998 2000 29a0 2000 29a0 2000     .). .). .). .). 
200029b0:	29a8 2000 29a8 2000 29b0 2000 29b0 2000     .). .). .). .). 
200029c0:	29b8 2000 29b8 2000 29c0 2000 29c0 2000     .). .). .). .). 
200029d0:	29c8 2000 29c8 2000 29d0 2000 29d0 2000     .). .). .). .). 
200029e0:	29d8 2000 29d8 2000 29e0 2000 29e0 2000     .). .). .). .). 
200029f0:	29e8 2000 29e8 2000 29f0 2000 29f0 2000     .). .). .). .). 
20002a00:	29f8 2000 29f8 2000 2a00 2000 2a00 2000     .). .). .*. .*. 
20002a10:	2a08 2000 2a08 2000 2a10 2000 2a10 2000     .*. .*. .*. .*. 
20002a20:	2a18 2000 2a18 2000 2a20 2000 2a20 2000     .*. .*.  *.  *. 
20002a30:	2a28 2000 2a28 2000 2a30 2000 2a30 2000     (*. (*. 0*. 0*. 
20002a40:	2a38 2000 2a38 2000 2a40 2000 2a40 2000     8*. 8*. @*. @*. 
20002a50:	2a48 2000 2a48 2000 2a50 2000 2a50 2000     H*. H*. P*. P*. 
20002a60:	2a58 2000 2a58 2000 2a60 2000 2a60 2000     X*. X*. `*. `*. 
20002a70:	2a68 2000 2a68 2000 2a70 2000 2a70 2000     h*. h*. p*. p*. 
20002a80:	2a78 2000 2a78 2000 2a80 2000 2a80 2000     x*. x*. .*. .*. 
20002a90:	2a88 2000 2a88 2000 2a90 2000 2a90 2000     .*. .*. .*. .*. 
20002aa0:	2a98 2000 2a98 2000 2aa0 2000 2aa0 2000     .*. .*. .*. .*. 
20002ab0:	2aa8 2000 2aa8 2000 2ab0 2000 2ab0 2000     .*. .*. .*. .*. 
20002ac0:	2ab8 2000 2ab8 2000 2ac0 2000 2ac0 2000     .*. .*. .*. .*. 
20002ad0:	2ac8 2000 2ac8 2000 2ad0 2000 2ad0 2000     .*. .*. .*. .*. 
20002ae0:	2ad8 2000 2ad8 2000 2ae0 2000 2ae0 2000     .*. .*. .*. .*. 
20002af0:	2ae8 2000 2ae8 2000 2af0 2000 2af0 2000     .*. .*. .*. .*. 
20002b00:	2af8 2000 2af8 2000 2b00 2000 2b00 2000     .*. .*. .+. .+. 
20002b10:	2b08 2000 2b08 2000 2b10 2000 2b10 2000     .+. .+. .+. .+. 
20002b20:	2b18 2000 2b18 2000 2b20 2000 2b20 2000     .+. .+.  +.  +. 
20002b30:	2b28 2000 2b28 2000 2b30 2000 2b30 2000     (+. (+. 0+. 0+. 
20002b40:	2b38 2000 2b38 2000 2b40 2000 2b40 2000     8+. 8+. @+. @+. 
20002b50:	2b48 2000 2b48 2000 2b50 2000 2b50 2000     H+. H+. P+. P+. 
20002b60:	2b58 2000 2b58 2000 2b60 2000 2b60 2000     X+. X+. `+. `+. 
20002b70:	2b68 2000 2b68 2000 2b70 2000 2b70 2000     h+. h+. p+. p+. 
20002b80:	2b78 2000 2b78 2000 2b80 2000 2b80 2000     x+. x+. .+. .+. 
20002b90:	2b88 2000 2b88 2000 2b90 2000 2b90 2000     .+. .+. .+. .+. 
20002ba0:	2b98 2000 2b98 2000 2ba0 2000 2ba0 2000     .+. .+. .+. .+. 
20002bb0:	2ba8 2000 2ba8 2000 2bb0 2000 2bb0 2000     .+. .+. .+. .+. 
20002bc0:	2bb8 2000 2bb8 2000 2bc0 2000 2bc0 2000     .+. .+. .+. .+. 
20002bd0:	2bc8 2000 2bc8 2000 2bd0 2000 2bd0 2000     .+. .+. .+. .+. 
20002be0:	2bd8 2000 2bd8 2000 2be0 2000 2be0 2000     .+. .+. .+. .+. 
20002bf0:	2be8 2000 2be8 2000 2bf0 2000 2bf0 2000     .+. .+. .+. .+. 
20002c00:	2bf8 2000 2bf8 2000 2c00 2000 2c00 2000     .+. .+. .,. .,. 
20002c10:	2c08 2000 2c08 2000 2c10 2000 2c10 2000     .,. .,. .,. .,. 
20002c20:	2c18 2000 2c18 2000 2c20 2000 2c20 2000     .,. .,.  ,.  ,. 
20002c30:	2c28 2000 2c28 2000 2c30 2000 2c30 2000     (,. (,. 0,. 0,. 
20002c40:	2c38 2000 2c38 2000 2c40 2000 2c40 2000     8,. 8,. @,. @,. 
20002c50:	2c48 2000 2c48 2000 2c50 2000 2c50 2000     H,. H,. P,. P,. 
20002c60:	2c58 2000 2c58 2000 2c60 2000 2c60 2000     X,. X,. `,. `,. 
20002c70:	2c68 2000 2c68 2000 2c70 2000 2c70 2000     h,. h,. p,. p,. 
20002c80:	2c78 2000 2c78 2000 2c80 2000 2c80 2000     x,. x,. .,. .,. 
20002c90:	2c88 2000 2c88 2000 2c90 2000 2c90 2000     .,. .,. .,. .,. 
20002ca0:	2c98 2000 2c98 2000 2ca0 2000 2ca0 2000     .,. .,. .,. .,. 
20002cb0:	2ca8 2000 2ca8 2000 2cb0 2000 2cb0 2000     .,. .,. .,. .,. 
20002cc0:	2cb8 2000 2cb8 2000 2cc0 2000 2cc0 2000     .,. .,. .,. .,. 
20002cd0:	2cc8 2000 2cc8 2000 2cd0 2000 2cd0 2000     .,. .,. .,. .,. 
20002ce0:	2cd8 2000 2cd8 2000 2ce0 2000 2ce0 2000     .,. .,. .,. .,. 
20002cf0:	2ce8 2000 2ce8 2000 2cf0 2000 2cf0 2000     .,. .,. .,. .,. 
20002d00:	2cf8 2000 2cf8 2000 2d00 2000 2d00 2000     .,. .,. .-. .-. 
20002d10:	2d08 2000 2d08 2000 2d10 2000 2d10 2000     .-. .-. .-. .-. 

20002d20 <__malloc_sbrk_base>:
20002d20:	ffff ffff                                   ....

20002d24 <__malloc_trim_threshold>:
20002d24:	0000 0002                                   ....

20002d28 <__atexit_recursive_mutex>:
20002d28:	4698 2000                                   .F. 

20002d2c <__global_locale>:
20002d2c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002d4c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002d6c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002d8c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002dac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002dcc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002dec:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20002e0c:	bddd 0040 bdb1 0040 0000 0000 c764 0040     ..@...@.....d.@.
20002e1c:	c760 0040 c604 0040 c604 0040 c604 0040     `.@...@...@...@.
20002e2c:	c604 0040 c604 0040 c604 0040 c604 0040     ..@...@...@...@.
20002e3c:	c604 0040 c604 0040 ffff ffff ffff ffff     ..@...@.........
20002e4c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20002e74:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
